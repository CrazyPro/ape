// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "countryDB.pb.h"
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>

namespace {

const ::google::protobuf::Descriptor* DB_C_User_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DB_C_User_reflection_ = NULL;
const ::google::protobuf::Descriptor* DB_One_Yuan_Reward_key_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DB_One_Yuan_Reward_key_reflection_ = NULL;
const ::google::protobuf::Descriptor* DB_One_Yuan_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DB_One_Yuan_reflection_ = NULL;
const ::google::protobuf::Descriptor* DB_One_Yuan_Purchase_Winner_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DB_One_Yuan_Purchase_Winner_reflection_ = NULL;
const ::google::protobuf::Descriptor* DB_Region_One_Yuan_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DB_Region_One_Yuan_reflection_ = NULL;
const ::google::protobuf::Descriptor* DB_C_UserList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DB_C_UserList_reflection_ = NULL;
const ::google::protobuf::Descriptor* DB_C_NPC_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DB_C_NPC_reflection_ = NULL;
const ::google::protobuf::Descriptor* DB_C_CountryRank_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DB_C_CountryRank_reflection_ = NULL;
const ::google::protobuf::Descriptor* DB_C_CountryLeagueBattle_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DB_C_CountryLeagueBattle_reflection_ = NULL;
const ::google::protobuf::Descriptor* DB_C_CountryLeagueMsg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DB_C_CountryLeagueMsg_reflection_ = NULL;
const ::google::protobuf::Descriptor* DB_C_LeaguePlayerUnit_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DB_C_LeaguePlayerUnit_reflection_ = NULL;
const ::google::protobuf::Descriptor* DB_C_LeagueGuildUnit_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DB_C_LeagueGuildUnit_reflection_ = NULL;
const ::google::protobuf::Descriptor* DB_C_BtlRecord_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DB_C_BtlRecord_reflection_ = NULL;
const ::google::protobuf::Descriptor* DB_C_BloodBtlStep_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DB_C_BloodBtlStep_reflection_ = NULL;
const ::google::protobuf::Descriptor* DB_C_BloodBtl_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DB_C_BloodBtl_reflection_ = NULL;
const ::google::protobuf::Descriptor* DB_C_OfficerRightUse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DB_C_OfficerRightUse_reflection_ = NULL;
const ::google::protobuf::Descriptor* DB_C_City_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DB_C_City_reflection_ = NULL;
const ::google::protobuf::Descriptor* DB_C_CityBuffData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DB_C_CityBuffData_reflection_ = NULL;
const ::google::protobuf::Descriptor* DB_C_RandomBuff_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DB_C_RandomBuff_reflection_ = NULL;
const ::google::protobuf::Descriptor* DB_Arena_Rank_NPC_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DB_Arena_Rank_NPC_reflection_ = NULL;
const ::google::protobuf::Descriptor* DB_Arena_Rank_List_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DB_Arena_Rank_List_reflection_ = NULL;
const ::google::protobuf::Descriptor* DB_Arena_Score_Unit_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DB_Arena_Score_Unit_reflection_ = NULL;
const ::google::protobuf::Descriptor* DB_Arena_Score_List_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DB_Arena_Score_List_reflection_ = NULL;
const ::google::protobuf::Descriptor* DB_Arena_Rank_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DB_Arena_Rank_reflection_ = NULL;
const ::google::protobuf::Descriptor* DB_WorldArena_Rank_Unit_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DB_WorldArena_Rank_Unit_reflection_ = NULL;
const ::google::protobuf::Descriptor* DB_WorldArena_Rank_List_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DB_WorldArena_Rank_List_reflection_ = NULL;
const ::google::protobuf::Descriptor* DB_WorldArena_Rank_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DB_WorldArena_Rank_reflection_ = NULL;
const ::google::protobuf::Descriptor* DB_HeroArena_Rank_Unit_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DB_HeroArena_Rank_Unit_reflection_ = NULL;
const ::google::protobuf::Descriptor* DB_HeroArena_Rank_List_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DB_HeroArena_Rank_List_reflection_ = NULL;
const ::google::protobuf::Descriptor* DB_HeroArena_Rank_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DB_HeroArena_Rank_reflection_ = NULL;
const ::google::protobuf::Descriptor* DB_C_Officer_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DB_C_Officer_reflection_ = NULL;
const ::google::protobuf::Descriptor* DB_C_OfficerInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DB_C_OfficerInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* DB_C_PubGuildPKGroup_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DB_C_PubGuildPKGroup_reflection_ = NULL;
const ::google::protobuf::Descriptor* DB_C_PubGuildBtlInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DB_C_PubGuildBtlInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* DB_C_GuildBtl_Top_Guild_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DB_C_GuildBtl_Top_Guild_reflection_ = NULL;
const ::google::protobuf::Descriptor* DB_C_GuildBtl_Record_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DB_C_GuildBtl_Record_reflection_ = NULL;
const ::google::protobuf::Descriptor* DB_C_Country_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DB_C_Country_reflection_ = NULL;
const ::google::protobuf::Descriptor* DB_C_GuildBld_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DB_C_GuildBld_reflection_ = NULL;
const ::google::protobuf::Descriptor* DB_C_GuildLog_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DB_C_GuildLog_reflection_ = NULL;
const ::google::protobuf::Descriptor* DB_C_GuildBuyRecord_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DB_C_GuildBuyRecord_reflection_ = NULL;
const ::google::protobuf::Descriptor* DB_C_GuildShopPmt_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DB_C_GuildShopPmt_reflection_ = NULL;
const ::google::protobuf::Descriptor* DB_C_GuildShop_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DB_C_GuildShop_reflection_ = NULL;
const ::google::protobuf::Descriptor* DB_C_GuildBtlAddProp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DB_C_GuildBtlAddProp_reflection_ = NULL;
const ::google::protobuf::Descriptor* DB_C_GuildBtlReward_Turns_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DB_C_GuildBtlReward_Turns_reflection_ = NULL;
const ::google::protobuf::Descriptor* DB_C_GuildBtlReward_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DB_C_GuildBtlReward_reflection_ = NULL;
const ::google::protobuf::Descriptor* DB_C_GuildBtlResult_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DB_C_GuildBtlResult_reflection_ = NULL;
const ::google::protobuf::Descriptor* DB_C_GuildStorage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DB_C_GuildStorage_reflection_ = NULL;
const ::google::protobuf::Descriptor* DB_C_GuildBtl_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DB_C_GuildBtl_reflection_ = NULL;
const ::google::protobuf::Descriptor* DB_C_Guild_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DB_C_Guild_reflection_ = NULL;
const ::google::protobuf::Descriptor* DB_C_GuildList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DB_C_GuildList_reflection_ = NULL;
const ::google::protobuf::Descriptor* DB_C_GuildBtlGeneral_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DB_C_GuildBtlGeneral_reflection_ = NULL;
const ::google::protobuf::Descriptor* DB_C_PVEFightMH_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DB_C_PVEFightMH_reflection_ = NULL;
const ::google::protobuf::Descriptor* DB_C_GuildBtlUser_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DB_C_GuildBtlUser_reflection_ = NULL;
const ::google::protobuf::Descriptor* DB_C_GuildBtlPosition_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DB_C_GuildBtlPosition_reflection_ = NULL;
const ::google::protobuf::Descriptor* DB_C_GuildBtlFightUnit_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DB_C_GuildBtlFightUnit_reflection_ = NULL;
const ::google::protobuf::Descriptor* DB_C_GuildBtlArmyAtkProp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DB_C_GuildBtlArmyAtkProp_reflection_ = NULL;
const ::google::protobuf::Descriptor* DB_C_GuildBtlAdmiralAdd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DB_C_GuildBtlAdmiralAdd_reflection_ = NULL;
const ::google::protobuf::Descriptor* Pve_GuildBtlHeroSkill_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Pve_GuildBtlHeroSkill_reflection_ = NULL;
const ::google::protobuf::Descriptor* DB_C_GuildBtlSendDataUnit_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DB_C_GuildBtlSendDataUnit_reflection_ = NULL;
const ::google::protobuf::Descriptor* DB_C_Guild_FightSendData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DB_C_Guild_FightSendData_reflection_ = NULL;
const ::google::protobuf::Descriptor* DB_C_GuildBtlUserPK_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DB_C_GuildBtlUserPK_reflection_ = NULL;
const ::google::protobuf::Descriptor* DB_C_GuidlBtlRetWay_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DB_C_GuidlBtlRetWay_reflection_ = NULL;
const ::google::protobuf::Descriptor* DB_GVE_City_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DB_GVE_City_reflection_ = NULL;
const ::google::protobuf::Descriptor* DB_GVE_List_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DB_GVE_List_reflection_ = NULL;
const ::google::protobuf::Descriptor* DB_GVE_Msg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DB_GVE_Msg_reflection_ = NULL;
const ::google::protobuf::Descriptor* DB_GVE_Buff_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DB_GVE_Buff_reflection_ = NULL;
const ::google::protobuf::Descriptor* DB_GVE_FirstDown_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DB_GVE_FirstDown_reflection_ = NULL;
const ::google::protobuf::Descriptor* DB_C_ResourceData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DB_C_ResourceData_reflection_ = NULL;
const ::google::protobuf::Descriptor* DB_C_Resource_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DB_C_Resource_reflection_ = NULL;
const ::google::protobuf::Descriptor* DB_C_GvgCity_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DB_C_GvgCity_reflection_ = NULL;
const ::google::protobuf::Descriptor* DB_C_GvgSignMsg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DB_C_GvgSignMsg_reflection_ = NULL;
const ::google::protobuf::Descriptor* DB_C_GvgBtlRet_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DB_C_GvgBtlRet_reflection_ = NULL;
const ::google::protobuf::Descriptor* DB_C_GvgBtlPlayerMsg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DB_C_GvgBtlPlayerMsg_reflection_ = NULL;
const ::google::protobuf::Descriptor* DB_C_GvgBtlRetSave_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DB_C_GvgBtlRetSave_reflection_ = NULL;
const ::google::protobuf::Descriptor* DB_C_GvgBtlRetWay_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DB_C_GvgBtlRetWay_reflection_ = NULL;
const ::google::protobuf::Descriptor* DB_C_Gvg_FightSendData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DB_C_Gvg_FightSendData_reflection_ = NULL;
const ::google::protobuf::Descriptor* DB_C_GVG_Msg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DB_C_GVG_Msg_reflection_ = NULL;
const ::google::protobuf::Descriptor* DB_C_GvgBtlCityMsg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DB_C_GvgBtlCityMsg_reflection_ = NULL;
const ::google::protobuf::Descriptor* DB_C_GvgBtlAddProp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DB_C_GvgBtlAddProp_reflection_ = NULL;
const ::google::protobuf::Descriptor* DB_C_PubGvgBtlInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DB_C_PubGvgBtlInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* DB_C_GVG_Reward_Record_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DB_C_GVG_Reward_Record_reflection_ = NULL;
const ::google::protobuf::Descriptor* DB_C_WpcRank_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DB_C_WpcRank_reflection_ = NULL;
const ::google::protobuf::Descriptor* DB_C_WpcRankUnit_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DB_C_WpcRankUnit_reflection_ = NULL;
const ::google::protobuf::Descriptor* DB_C_WarGameData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DB_C_WarGameData_reflection_ = NULL;
const ::google::protobuf::Descriptor* DB_C_WarGameSite_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DB_C_WarGameSite_reflection_ = NULL;
const ::google::protobuf::Descriptor* DB_C_WarGameAdmiralInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DB_C_WarGameAdmiralInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* DB_C_ChatMsg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DB_C_ChatMsg_reflection_ = NULL;
const ::google::protobuf::Descriptor* DB_C_ChatMsgOne_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DB_C_ChatMsgOne_reflection_ = NULL;
const ::google::protobuf::Descriptor* DB_C_BossBtlMsg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DB_C_BossBtlMsg_reflection_ = NULL;
const ::google::protobuf::Descriptor* DB_C_BossInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DB_C_BossInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* DB_C_BossMsg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DB_C_BossMsg_reflection_ = NULL;
const ::google::protobuf::Descriptor* DB_C_BossBtlRankUnit_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DB_C_BossBtlRankUnit_reflection_ = NULL;
const ::google::protobuf::Descriptor* DB_C_Report_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DB_C_Report_reflection_ = NULL;
const ::google::protobuf::Descriptor* DB_C_NpcActiveRankItem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DB_C_NpcActiveRankItem_reflection_ = NULL;
const ::google::protobuf::Descriptor* DB_C_NpcActiveRank_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DB_C_NpcActiveRank_reflection_ = NULL;
const ::google::protobuf::Descriptor* DB_C_GuildRedEnvelope_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DB_C_GuildRedEnvelope_reflection_ = NULL;
const ::google::protobuf::Descriptor* DB_C_RedEnvelopeInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DB_C_RedEnvelopeInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* DB_C_RedEnvelopeReport_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DB_C_RedEnvelopeReport_reflection_ = NULL;
const ::google::protobuf::Descriptor* DB_C_RedEnvelopeCount_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DB_C_RedEnvelopeCount_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_countryDB_2eproto() {
  protobuf_AddDesc_countryDB_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "countryDB.proto");
  GOOGLE_CHECK(file != NULL);
  DB_C_User_descriptor_ = file->message_type(0);
  static const int DB_C_User_offsets_[25] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_C_User, userid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_C_User, cityid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_C_User, countryid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_C_User, arenaindex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_C_User, worldarenaindex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_C_User, lastarenaindex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_C_User, lastworldarenaindex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_C_User, guildid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_C_User, position_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_C_User, officerposition_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_C_User, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_C_User, pic_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_C_User, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_C_User, viplevel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_C_User, viptype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_C_User, gvepoint_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_C_User, flag_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_C_User, heroarenaindex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_C_User, wpcsearchtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_C_User, leaguepoint_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_C_User, redenvelopecount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_C_User, tlastleaveguildtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_C_User, bossbtldmg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_C_User, wpclabsearchcnt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_C_User, oneyuan_),
  };
  DB_C_User_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DB_C_User_descriptor_,
      DB_C_User::default_instance_,
      DB_C_User_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_C_User, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_C_User, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DB_C_User));
  DB_One_Yuan_Reward_key_descriptor_ = file->message_type(1);
  static const int DB_One_Yuan_Reward_key_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_One_Yuan_Reward_key, redwardkey_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_One_Yuan_Reward_key, nindex_),
  };
  DB_One_Yuan_Reward_key_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DB_One_Yuan_Reward_key_descriptor_,
      DB_One_Yuan_Reward_key::default_instance_,
      DB_One_Yuan_Reward_key_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_One_Yuan_Reward_key, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_One_Yuan_Reward_key, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DB_One_Yuan_Reward_key));
  DB_One_Yuan_descriptor_ = file->message_type(2);
  static const int DB_One_Yuan_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_One_Yuan, flag_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_One_Yuan, rewardkey_),
  };
  DB_One_Yuan_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DB_One_Yuan_descriptor_,
      DB_One_Yuan::default_instance_,
      DB_One_Yuan_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_One_Yuan, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_One_Yuan, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DB_One_Yuan));
  DB_One_Yuan_Purchase_Winner_descriptor_ = file->message_type(3);
  static const int DB_One_Yuan_Purchase_Winner_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_One_Yuan_Purchase_Winner, flag_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_One_Yuan_Purchase_Winner, userid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_One_Yuan_Purchase_Winner, bfetch_),
  };
  DB_One_Yuan_Purchase_Winner_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DB_One_Yuan_Purchase_Winner_descriptor_,
      DB_One_Yuan_Purchase_Winner::default_instance_,
      DB_One_Yuan_Purchase_Winner_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_One_Yuan_Purchase_Winner, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_One_Yuan_Purchase_Winner, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DB_One_Yuan_Purchase_Winner));
  DB_Region_One_Yuan_descriptor_ = file->message_type(4);
  static const int DB_Region_One_Yuan_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_Region_One_Yuan, oneyuanpurchasecleartime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_Region_One_Yuan, win_),
  };
  DB_Region_One_Yuan_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DB_Region_One_Yuan_descriptor_,
      DB_Region_One_Yuan::default_instance_,
      DB_Region_One_Yuan_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_Region_One_Yuan, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_Region_One_Yuan, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DB_Region_One_Yuan));
  DB_C_UserList_descriptor_ = file->message_type(5);
  static const int DB_C_UserList_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_C_UserList, key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_C_UserList, region_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_C_UserList, index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_C_UserList, ltsaverevision_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_C_UserList, user_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_C_UserList, regiononeyuan_),
  };
  DB_C_UserList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DB_C_UserList_descriptor_,
      DB_C_UserList::default_instance_,
      DB_C_UserList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_C_UserList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_C_UserList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DB_C_UserList));
  DB_C_NPC_descriptor_ = file->message_type(6);
  static const int DB_C_NPC_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_C_NPC, npcid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_C_NPC, morale_),
  };
  DB_C_NPC_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DB_C_NPC_descriptor_,
      DB_C_NPC::default_instance_,
      DB_C_NPC_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_C_NPC, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_C_NPC, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DB_C_NPC));
  DB_C_CountryRank_descriptor_ = file->message_type(7);
  static const int DB_C_CountryRank_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_C_CountryRank, nexttime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_C_CountryRank, rank_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_C_CountryRank, boom_),
  };
  DB_C_CountryRank_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DB_C_CountryRank_descriptor_,
      DB_C_CountryRank::default_instance_,
      DB_C_CountryRank_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_C_CountryRank, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_C_CountryRank, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DB_C_CountryRank));
  DB_C_CountryLeagueBattle_descriptor_ = file->message_type(8);
  static const int DB_C_CountryLeagueBattle_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_C_CountryLeagueBattle, activeflag_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_C_CountryLeagueBattle, rank_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_C_CountryLeagueBattle, boom_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_C_CountryLeagueBattle, leagueid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_C_CountryLeagueBattle, winid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_C_CountryLeagueBattle, activestate_),
  };
  DB_C_CountryLeagueBattle_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DB_C_CountryLeagueBattle_descriptor_,
      DB_C_CountryLeagueBattle::default_instance_,
      DB_C_CountryLeagueBattle_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_C_CountryLeagueBattle, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_C_CountryLeagueBattle, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DB_C_CountryLeagueBattle));
  DB_C_CountryLeagueMsg_descriptor_ = file->message_type(9);
  static const int DB_C_CountryLeagueMsg_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_C_CountryLeagueMsg, leagueid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_C_CountryLeagueMsg, countryid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_C_CountryLeagueMsg, playerranklist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_C_CountryLeagueMsg, playerranklastlist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_C_CountryLeagueMsg, guildlist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_C_CountryLeagueMsg, guildlastlist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_C_CountryLeagueMsg, lastcountryid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_C_CountryLeagueMsg, boomrecord_),
  };
  DB_C_CountryLeagueMsg_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DB_C_CountryLeagueMsg_descriptor_,
      DB_C_CountryLeagueMsg::default_instance_,
      DB_C_CountryLeagueMsg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_C_CountryLeagueMsg, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_C_CountryLeagueMsg, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DB_C_CountryLeagueMsg));
  DB_C_LeaguePlayerUnit_descriptor_ = file->message_type(10);
  static const int DB_C_LeaguePlayerUnit_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_C_LeaguePlayerUnit, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_C_LeaguePlayerUnit, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_C_LeaguePlayerUnit, pic_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_C_LeaguePlayerUnit, countryid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_C_LeaguePlayerUnit, guildname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_C_LeaguePlayerUnit, fightpoint_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_C_LeaguePlayerUnit, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_C_LeaguePlayerUnit, leaguepoint_),
  };
  DB_C_LeaguePlayerUnit_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DB_C_LeaguePlayerUnit_descriptor_,
      DB_C_LeaguePlayerUnit::default_instance_,
      DB_C_LeaguePlayerUnit_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_C_LeaguePlayerUnit, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_C_LeaguePlayerUnit, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DB_C_LeaguePlayerUnit));
  DB_C_LeagueGuildUnit_descriptor_ = file->message_type(11);
  static const int DB_C_LeagueGuildUnit_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_C_LeagueGuildUnit, guildid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_C_LeagueGuildUnit, guildname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_C_LeagueGuildUnit, leadername_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_C_LeagueGuildUnit, leaguepoint_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_C_LeagueGuildUnit, countryid_),
  };
  DB_C_LeagueGuildUnit_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DB_C_LeagueGuildUnit_descriptor_,
      DB_C_LeagueGuildUnit::default_instance_,
      DB_C_LeagueGuildUnit_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_C_LeagueGuildUnit, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_C_LeagueGuildUnit, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DB_C_LeagueGuildUnit));
  DB_C_BtlRecord_descriptor_ = file->message_type(12);
  static const int DB_C_BtlRecord_offsets_[13] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_C_BtlRecord, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_C_BtlRecord, btltime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_C_BtlRecord, atkid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_C_BtlRecord, atkname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_C_BtlRecord, atkcountry_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_C_BtlRecord, defid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_C_BtlRecord, defname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_C_BtlRecord, defcountry_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_C_BtlRecord, cityid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_C_BtlRecord, winningcnt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_C_BtlRecord, bloodatkcity_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_C_BtlRecord, blooddefcity_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_C_BtlRecord, bloodwincity_),
  };
  DB_C_BtlRecord_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DB_C_BtlRecord_descriptor_,
      DB_C_BtlRecord::default_instance_,
      DB_C_BtlRecord_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_C_BtlRecord, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_C_BtlRecord, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DB_C_BtlRecord));
  DB_C_BloodBtlStep_descriptor_ = file->message_type(13);
  static const int DB_C_BloodBtlStep_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_C_BloodBtlStep, time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_C_BloodBtlStep, atkid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_C_BloodBtlStep, atkname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_C_BloodBtlStep, atkcountry_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_C_BloodBtlStep, defid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_C_BloodBtlStep, defname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_C_BloodBtlStep, defcountry_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_C_BloodBtlStep, winid_),
  };
  DB_C_BloodBtlStep_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DB_C_BloodBtlStep_descriptor_,
      DB_C_BloodBtlStep::default_instance_,
      DB_C_BloodBtlStep_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_C_BloodBtlStep, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_C_BloodBtlStep, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DB_C_BloodBtlStep));
  DB_C_BloodBtl_descriptor_ = file->message_type(14);
  static const int DB_C_BloodBtl_offsets_[15] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_C_BloodBtl, launchuserid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_C_BloodBtl, launchname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_C_BloodBtl, launchtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_C_BloodBtl, atkcountry_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_C_BloodBtl, atkcity_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_C_BloodBtl, atktotalcnt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_C_BloodBtl, atkleftcnt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_C_BloodBtl, defcountry_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_C_BloodBtl, defcity_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_C_BloodBtl, deftotalcnt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_C_BloodBtl, defleftcnt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_C_BloodBtl, btlstep_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_C_BloodBtl, wincity_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_C_BloodBtl, overtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_C_BloodBtl, type_),
  };
  DB_C_BloodBtl_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DB_C_BloodBtl_descriptor_,
      DB_C_BloodBtl::default_instance_,
      DB_C_BloodBtl_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_C_BloodBtl, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_C_BloodBtl, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DB_C_BloodBtl));
  DB_C_OfficerRightUse_descriptor_ = file->message_type(15);
  static const int DB_C_OfficerRightUse_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_C_OfficerRightUse, rightid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_C_OfficerRightUse, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_C_OfficerRightUse, endtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_C_OfficerRightUse, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_C_OfficerRightUse, position_),
  };
  DB_C_OfficerRightUse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DB_C_OfficerRightUse_descriptor_,
      DB_C_OfficerRightUse::default_instance_,
      DB_C_OfficerRightUse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_C_OfficerRightUse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_C_OfficerRightUse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DB_C_OfficerRightUse));
  DB_C_City_descriptor_ = file->message_type(16);
  static const int DB_C_City_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_C_City, region_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_C_City, cityid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_C_City, countryid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_C_City, npc_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_C_City, npcinittm_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_C_City, ltsaverevision_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_C_City, lastbloodbtl_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_C_City, officerrightuselst_),
  };
  DB_C_City_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DB_C_City_descriptor_,
      DB_C_City::default_instance_,
      DB_C_City_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_C_City, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_C_City, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DB_C_City));
  DB_C_CityBuffData_descriptor_ = file->message_type(17);
  static const int DB_C_CityBuffData_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_C_CityBuffData, flag_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_C_CityBuffData, randombuffs_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_C_CityBuffData, state_),
  };
  DB_C_CityBuffData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DB_C_CityBuffData_descriptor_,
      DB_C_CityBuffData::default_instance_,
      DB_C_CityBuffData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_C_CityBuffData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_C_CityBuffData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DB_C_CityBuffData));
  DB_C_RandomBuff_descriptor_ = file->message_type(18);
  static const int DB_C_RandomBuff_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_C_RandomBuff, cityid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_C_RandomBuff, buffid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_C_RandomBuff, activetm_),
  };
  DB_C_RandomBuff_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DB_C_RandomBuff_descriptor_,
      DB_C_RandomBuff::default_instance_,
      DB_C_RandomBuff_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_C_RandomBuff, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_C_RandomBuff, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DB_C_RandomBuff));
  DB_Arena_Rank_NPC_descriptor_ = file->message_type(19);
  static const int DB_Arena_Rank_NPC_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_Arena_Rank_NPC, npcid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_Arena_Rank_NPC, npcindex_),
  };
  DB_Arena_Rank_NPC_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DB_Arena_Rank_NPC_descriptor_,
      DB_Arena_Rank_NPC::default_instance_,
      DB_Arena_Rank_NPC_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_Arena_Rank_NPC, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_Arena_Rank_NPC, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DB_Arena_Rank_NPC));
  DB_Arena_Rank_List_descriptor_ = file->message_type(20);
  static const int DB_Arena_Rank_List_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_Arena_Rank_List, uidlist_),
  };
  DB_Arena_Rank_List_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DB_Arena_Rank_List_descriptor_,
      DB_Arena_Rank_List::default_instance_,
      DB_Arena_Rank_List_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_Arena_Rank_List, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_Arena_Rank_List, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DB_Arena_Rank_List));
  DB_Arena_Score_Unit_descriptor_ = file->message_type(21);
  static const int DB_Arena_Score_Unit_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_Arena_Score_Unit, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_Arena_Score_Unit, score_),
  };
  DB_Arena_Score_Unit_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DB_Arena_Score_Unit_descriptor_,
      DB_Arena_Score_Unit::default_instance_,
      DB_Arena_Score_Unit_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_Arena_Score_Unit, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_Arena_Score_Unit, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DB_Arena_Score_Unit));
  DB_Arena_Score_List_descriptor_ = file->message_type(22);
  static const int DB_Arena_Score_List_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_Arena_Score_List, scorelist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_Arena_Score_List, nactive_),
  };
  DB_Arena_Score_List_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DB_Arena_Score_List_descriptor_,
      DB_Arena_Score_List::default_instance_,
      DB_Arena_Score_List_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_Arena_Score_List, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_Arena_Score_List, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DB_Arena_Score_List));
  DB_Arena_Rank_descriptor_ = file->message_type(23);
  static const int DB_Arena_Rank_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_Arena_Rank, arenaranknpc_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_Arena_Rank, arenaranklast_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_Arena_Rank, nranktimelast_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_Arena_Rank, arenascorelist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_Arena_Rank, arenascorelistold_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_Arena_Rank, currentscorelist_),
  };
  DB_Arena_Rank_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DB_Arena_Rank_descriptor_,
      DB_Arena_Rank::default_instance_,
      DB_Arena_Rank_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_Arena_Rank, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_Arena_Rank, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DB_Arena_Rank));
  DB_WorldArena_Rank_Unit_descriptor_ = file->message_type(24);
  static const int DB_WorldArena_Rank_Unit_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_WorldArena_Rank_Unit, uid_),
  };
  DB_WorldArena_Rank_Unit_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DB_WorldArena_Rank_Unit_descriptor_,
      DB_WorldArena_Rank_Unit::default_instance_,
      DB_WorldArena_Rank_Unit_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_WorldArena_Rank_Unit, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_WorldArena_Rank_Unit, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DB_WorldArena_Rank_Unit));
  DB_WorldArena_Rank_List_descriptor_ = file->message_type(25);
  static const int DB_WorldArena_Rank_List_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_WorldArena_Rank_List, worldarenaranklist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_WorldArena_Rank_List, ranktimelast_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_WorldArena_Rank_List, activityindex_),
  };
  DB_WorldArena_Rank_List_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DB_WorldArena_Rank_List_descriptor_,
      DB_WorldArena_Rank_List::default_instance_,
      DB_WorldArena_Rank_List_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_WorldArena_Rank_List, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_WorldArena_Rank_List, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DB_WorldArena_Rank_List));
  DB_WorldArena_Rank_descriptor_ = file->message_type(26);
  static const int DB_WorldArena_Rank_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_WorldArena_Rank, worldarenaranknpc_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_WorldArena_Rank, worldarenaranklast_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_WorldArena_Rank, worldarenarankall_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_WorldArena_Rank, currentactivityindex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_WorldArena_Rank, rankrecordindex_),
  };
  DB_WorldArena_Rank_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DB_WorldArena_Rank_descriptor_,
      DB_WorldArena_Rank::default_instance_,
      DB_WorldArena_Rank_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_WorldArena_Rank, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_WorldArena_Rank, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DB_WorldArena_Rank));
  DB_HeroArena_Rank_Unit_descriptor_ = file->message_type(27);
  static const int DB_HeroArena_Rank_Unit_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_HeroArena_Rank_Unit, uid_),
  };
  DB_HeroArena_Rank_Unit_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DB_HeroArena_Rank_Unit_descriptor_,
      DB_HeroArena_Rank_Unit::default_instance_,
      DB_HeroArena_Rank_Unit_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_HeroArena_Rank_Unit, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_HeroArena_Rank_Unit, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DB_HeroArena_Rank_Unit));
  DB_HeroArena_Rank_List_descriptor_ = file->message_type(28);
  static const int DB_HeroArena_Rank_List_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_HeroArena_Rank_List, heroarenaranklist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_HeroArena_Rank_List, ranktimelast_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_HeroArena_Rank_List, activityindex_),
  };
  DB_HeroArena_Rank_List_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DB_HeroArena_Rank_List_descriptor_,
      DB_HeroArena_Rank_List::default_instance_,
      DB_HeroArena_Rank_List_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_HeroArena_Rank_List, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_HeroArena_Rank_List, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DB_HeroArena_Rank_List));
  DB_HeroArena_Rank_descriptor_ = file->message_type(29);
  static const int DB_HeroArena_Rank_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_HeroArena_Rank, heroarenaranknpc_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_HeroArena_Rank, heroarenaranklast_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_HeroArena_Rank, currentactivityindex_),
  };
  DB_HeroArena_Rank_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DB_HeroArena_Rank_descriptor_,
      DB_HeroArena_Rank::default_instance_,
      DB_HeroArena_Rank_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_HeroArena_Rank, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_HeroArena_Rank, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DB_HeroArena_Rank));
  DB_C_Officer_descriptor_ = file->message_type(30);
  static const int DB_C_Officer_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_C_Officer, officerposition_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_C_Officer, uid_),
  };
  DB_C_Officer_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DB_C_Officer_descriptor_,
      DB_C_Officer::default_instance_,
      DB_C_Officer_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_C_Officer, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_C_Officer, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DB_C_Officer));
  DB_C_OfficerInfo_descriptor_ = file->message_type(31);
  static const int DB_C_OfficerInfo_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_C_OfficerInfo, arenaofficers_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_C_OfficerInfo, guildofficers_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_C_OfficerInfo, officerrightuseflag_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_C_OfficerInfo, updatetimelast_),
  };
  DB_C_OfficerInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DB_C_OfficerInfo_descriptor_,
      DB_C_OfficerInfo::default_instance_,
      DB_C_OfficerInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_C_OfficerInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_C_OfficerInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DB_C_OfficerInfo));
  DB_C_PubGuildPKGroup_descriptor_ = file->message_type(32);
  static const int DB_C_PubGuildPKGroup_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_C_PubGuildPKGroup, guildid1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_C_PubGuildPKGroup, guildid2_),
  };
  DB_C_PubGuildPKGroup_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DB_C_PubGuildPKGroup_descriptor_,
      DB_C_PubGuildPKGroup::default_instance_,
      DB_C_PubGuildPKGroup_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_C_PubGuildPKGroup, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_C_PubGuildPKGroup, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DB_C_PubGuildPKGroup));
  DB_C_PubGuildBtlInfo_descriptor_ = file->message_type(33);
  static const int DB_C_PubGuildBtlInfo_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_C_PubGuildBtlInfo, cursession_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_C_PubGuildBtlInfo, btlday_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_C_PubGuildBtlInfo, pkstep_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_C_PubGuildBtlInfo, curpkover_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_C_PubGuildBtlInfo, pklstidx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_C_PubGuildBtlInfo, pklst_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_C_PubGuildBtlInfo, cursesionbtlover_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_C_PubGuildBtlInfo, curaddscore_),
  };
  DB_C_PubGuildBtlInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DB_C_PubGuildBtlInfo_descriptor_,
      DB_C_PubGuildBtlInfo::default_instance_,
      DB_C_PubGuildBtlInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_C_PubGuildBtlInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_C_PubGuildBtlInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DB_C_PubGuildBtlInfo));
  DB_C_GuildBtl_Top_Guild_descriptor_ = file->message_type(34);
  static const int DB_C_GuildBtl_Top_Guild_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_C_GuildBtl_Top_Guild, guildid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_C_GuildBtl_Top_Guild, countryid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_C_GuildBtl_Top_Guild, guildlv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_C_GuildBtl_Top_Guild, guildname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_C_GuildBtl_Top_Guild, usercnt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_C_GuildBtl_Top_Guild, btlscore_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_C_GuildBtl_Top_Guild, leadername_),
  };
  DB_C_GuildBtl_Top_Guild_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DB_C_GuildBtl_Top_Guild_descriptor_,
      DB_C_GuildBtl_Top_Guild::default_instance_,
      DB_C_GuildBtl_Top_Guild_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_C_GuildBtl_Top_Guild, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_C_GuildBtl_Top_Guild, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DB_C_GuildBtl_Top_Guild));
  DB_C_GuildBtl_Record_descriptor_ = file->message_type(35);
  static const int DB_C_GuildBtl_Record_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_C_GuildBtl_Record, seasons_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_C_GuildBtl_Record, guilddata_),
  };
  DB_C_GuildBtl_Record_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DB_C_GuildBtl_Record_descriptor_,
      DB_C_GuildBtl_Record::default_instance_,
      DB_C_GuildBtl_Record_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_C_GuildBtl_Record, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_C_GuildBtl_Record, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DB_C_GuildBtl_Record));
  DB_C_Country_descriptor_ = file->message_type(36);
  static const int DB_C_Country_offsets_[26] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_C_Country, region_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_C_Country, countryid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_C_Country, usercnt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_C_Country, ltsaverevision_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_C_Country, lastrank_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_C_Country, btlrecord_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_C_Country, atktargetcity_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_C_Country, deftargetcity_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_C_Country, arenarank_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_C_Country, nactivityindex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_C_Country, worldarenarank_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_C_Country, officerinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_C_Country, pubguildbtlinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_C_Country, gbtlrecord_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_C_Country, dataresetflag_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_C_Country, gvefirstdownlist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_C_Country, gveflag_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_C_Country, heroarenarank_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_C_Country, pubgvgbtlinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_C_Country, wpcrank_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_C_Country, lastleaguebattle_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_C_Country, leagueallmsg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_C_Country, chatmsg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_C_Country, npcactivecnt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_C_Country, npcactiverank_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_C_Country, citybuffdata_),
  };
  DB_C_Country_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DB_C_Country_descriptor_,
      DB_C_Country::default_instance_,
      DB_C_Country_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_C_Country, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_C_Country, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DB_C_Country));
  DB_C_GuildBld_descriptor_ = file->message_type(37);
  static const int DB_C_GuildBld_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_C_GuildBld, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_C_GuildBld, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_C_GuildBld, exp_),
  };
  DB_C_GuildBld_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DB_C_GuildBld_descriptor_,
      DB_C_GuildBld::default_instance_,
      DB_C_GuildBld_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_C_GuildBld, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_C_GuildBld, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DB_C_GuildBld));
  DB_C_GuildLog_descriptor_ = file->message_type(38);
  static const int DB_C_GuildLog_offsets_[14] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_C_GuildLog, time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_C_GuildLog, userid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_C_GuildLog, username_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_C_GuildLog, logtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_C_GuildLog, userpos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_C_GuildLog, bldid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_C_GuildLog, bldlv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_C_GuildLog, paytype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_C_GuildLog, gscore_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_C_GuildLog, itemid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_C_GuildLog, itemcnt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_C_GuildLog, bldvalue_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_C_GuildLog, pkrank_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_C_GuildLog, pkrank1_),
  };
  DB_C_GuildLog_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DB_C_GuildLog_descriptor_,
      DB_C_GuildLog::default_instance_,
      DB_C_GuildLog_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_C_GuildLog, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_C_GuildLog, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DB_C_GuildLog));
  DB_C_GuildBuyRecord_descriptor_ = file->message_type(39);
  static const int DB_C_GuildBuyRecord_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_C_GuildBuyRecord, daybuyshopid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_C_GuildBuyRecord, daybuyshopcnt_),
  };
  DB_C_GuildBuyRecord_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DB_C_GuildBuyRecord_descriptor_,
      DB_C_GuildBuyRecord::default_instance_,
      DB_C_GuildBuyRecord_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_C_GuildBuyRecord, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_C_GuildBuyRecord, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DB_C_GuildBuyRecord));
  DB_C_GuildShopPmt_descriptor_ = file->message_type(40);
  static const int DB_C_GuildShopPmt_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_C_GuildShopPmt, shopid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_C_GuildShopPmt, position_),
  };
  DB_C_GuildShopPmt_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DB_C_GuildShopPmt_descriptor_,
      DB_C_GuildShopPmt::default_instance_,
      DB_C_GuildShopPmt_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_C_GuildShopPmt, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_C_GuildShopPmt, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DB_C_GuildShopPmt));
  DB_C_GuildShop_descriptor_ = file->message_type(41);
  static const int DB_C_GuildShop_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_C_GuildShop, mysticshopupdatetm_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_C_GuildShop, mysticshopsaleid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_C_GuildShop, buyrecordday_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_C_GuildShop, buyrecord_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_C_GuildShop, shoppmt_),
  };
  DB_C_GuildShop_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DB_C_GuildShop_descriptor_,
      DB_C_GuildShop::default_instance_,
      DB_C_GuildShop_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_C_GuildShop, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_C_GuildShop, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DB_C_GuildShop));
  DB_C_GuildBtlAddProp_descriptor_ = file->message_type(42);
  static const int DB_C_GuildBtlAddProp_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_C_GuildBtlAddProp, userid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_C_GuildBtlAddProp, addatkpct_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_C_GuildBtlAddProp, addbloodpct_),
  };
  DB_C_GuildBtlAddProp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DB_C_GuildBtlAddProp_descriptor_,
      DB_C_GuildBtlAddProp::default_instance_,
      DB_C_GuildBtlAddProp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_C_GuildBtlAddProp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_C_GuildBtlAddProp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DB_C_GuildBtlAddProp));
  DB_C_GuildBtlReward_Turns_descriptor_ = file->message_type(43);
  static const int DB_C_GuildBtlReward_Turns_offsets_[11] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_C_GuildBtlReward_Turns, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_C_GuildBtlReward_Turns, winway0_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_C_GuildBtlReward_Turns, winway1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_C_GuildBtlReward_Turns, winway2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_C_GuildBtlReward_Turns, score_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_C_GuildBtlReward_Turns, guildid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_C_GuildBtlReward_Turns, guildlv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_C_GuildBtlReward_Turns, guildname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_C_GuildBtlReward_Turns, guildenemyid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_C_GuildBtlReward_Turns, guildenemylv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_C_GuildBtlReward_Turns, guildenemyname_),
  };
  DB_C_GuildBtlReward_Turns_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DB_C_GuildBtlReward_Turns_descriptor_,
      DB_C_GuildBtlReward_Turns::default_instance_,
      DB_C_GuildBtlReward_Turns_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_C_GuildBtlReward_Turns, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_C_GuildBtlReward_Turns, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DB_C_GuildBtlReward_Turns));
  DB_C_GuildBtlReward_descriptor_ = file->message_type(44);
  static const int DB_C_GuildBtlReward_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_C_GuildBtlReward, btlday_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_C_GuildBtlReward, turns_),
  };
  DB_C_GuildBtlReward_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DB_C_GuildBtlReward_descriptor_,
      DB_C_GuildBtlReward::default_instance_,
      DB_C_GuildBtlReward_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_C_GuildBtlReward, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_C_GuildBtlReward, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DB_C_GuildBtlReward));
  DB_C_GuildBtlResult_descriptor_ = file->message_type(45);
  static const int DB_C_GuildBtlResult_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_C_GuildBtlResult, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_C_GuildBtlResult, winway0_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_C_GuildBtlResult, winway1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_C_GuildBtlResult, winway2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_C_GuildBtlResult, score_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_C_GuildBtlResult, pkguild_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_C_GuildBtlResult, addflag_),
  };
  DB_C_GuildBtlResult_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DB_C_GuildBtlResult_descriptor_,
      DB_C_GuildBtlResult::default_instance_,
      DB_C_GuildBtlResult_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_C_GuildBtlResult, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_C_GuildBtlResult, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DB_C_GuildBtlResult));
  DB_C_GuildStorage_descriptor_ = file->message_type(46);
  static const int DB_C_GuildStorage_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_C_GuildStorage, itemid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_C_GuildStorage, itemcnt_),
  };
  DB_C_GuildStorage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DB_C_GuildStorage_descriptor_,
      DB_C_GuildStorage::default_instance_,
      DB_C_GuildStorage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_C_GuildStorage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_C_GuildStorage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DB_C_GuildStorage));
  DB_C_GuildBtl_descriptor_ = file->message_type(47);
  static const int DB_C_GuildBtl_offsets_[12] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_C_GuildBtl, btlday_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_C_GuildBtl, userway0_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_C_GuildBtl, userway1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_C_GuildBtl, userway2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_C_GuildBtl, signupcnt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_C_GuildBtl, addprop_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_C_GuildBtl, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_C_GuildBtl, reward_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_C_GuildBtl, totalscore_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_C_GuildBtl, lastbtlsession_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_C_GuildBtl, lastbtlrank_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_C_GuildBtl, btlcnt_),
  };
  DB_C_GuildBtl_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DB_C_GuildBtl_descriptor_,
      DB_C_GuildBtl::default_instance_,
      DB_C_GuildBtl_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_C_GuildBtl, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_C_GuildBtl, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DB_C_GuildBtl));
  DB_C_Guild_descriptor_ = file->message_type(48);
  static const int DB_C_Guild_offsets_[33] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_C_Guild, guildid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_C_Guild, countryid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_C_Guild, guildlv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_C_Guild, guildname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_C_Guild, guildslogan_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_C_Guild, guildbulletin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_C_Guild, bldvalue_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_C_Guild, guilduesrcnt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_C_Guild, leaderid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_C_Guild, leadername_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_C_Guild, delatetm_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_C_Guild, leaderlasttm_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_C_Guild, applyuserid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_C_Guild, build_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_C_Guild, log_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_C_Guild, guildshop_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_C_Guild, totalbldvalue_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_C_Guild, coinlog_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_C_Guild, lastchgtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_C_Guild, daykickusercnt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_C_Guild, dayentercnt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_C_Guild, btlinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_C_Guild, storage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_C_Guild, rewardlog_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_C_Guild, gvemsg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_C_Guild, gvgmsg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_C_Guild, delateid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_C_Guild, leagueactiveid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_C_Guild, leaguepoint_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_C_Guild, leaguelist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_C_Guild, leagueleaderuid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_C_Guild, chgleadertm_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_C_Guild, redenvelopeinfo_),
  };
  DB_C_Guild_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DB_C_Guild_descriptor_,
      DB_C_Guild::default_instance_,
      DB_C_Guild_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_C_Guild, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_C_Guild, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DB_C_Guild));
  DB_C_GuildList_descriptor_ = file->message_type(49);
  static const int DB_C_GuildList_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_C_GuildList, key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_C_GuildList, region_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_C_GuildList, index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_C_GuildList, ltsaverevision_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_C_GuildList, guild_),
  };
  DB_C_GuildList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DB_C_GuildList_descriptor_,
      DB_C_GuildList::default_instance_,
      DB_C_GuildList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_C_GuildList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_C_GuildList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DB_C_GuildList));
  DB_C_GuildBtlGeneral_descriptor_ = file->message_type(50);
  static const int DB_C_GuildBtlGeneral_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_C_GuildBtlGeneral, ngeneralid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_C_GuildBtlGeneral, ngenerallvl_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_C_GuildBtlGeneral, ngeneraltrainlvl_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_C_GuildBtlGeneral, ngeneralatk_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_C_GuildBtlGeneral, ngeneraldef_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_C_GuildBtlGeneral, ngeneralhp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_C_GuildBtlGeneral, ngeneralcrt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_C_GuildBtlGeneral, ngeneralscore_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_C_GuildBtlGeneral, listgeneralmh_),
  };
  DB_C_GuildBtlGeneral_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DB_C_GuildBtlGeneral_descriptor_,
      DB_C_GuildBtlGeneral::default_instance_,
      DB_C_GuildBtlGeneral_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_C_GuildBtlGeneral, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_C_GuildBtlGeneral, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DB_C_GuildBtlGeneral));
  DB_C_PVEFightMH_descriptor_ = file->message_type(51);
  static const int DB_C_PVEFightMH_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_C_PVEFightMH, nmhid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_C_PVEFightMH, nmhlv_),
  };
  DB_C_PVEFightMH_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DB_C_PVEFightMH_descriptor_,
      DB_C_PVEFightMH::default_instance_,
      DB_C_PVEFightMH_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_C_PVEFightMH, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_C_PVEFightMH, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DB_C_PVEFightMH));
  DB_C_GuildBtlUser_descriptor_ = file->message_type(52);
  static const int DB_C_GuildBtlUser_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_C_GuildBtlUser, userid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_C_GuildBtlUser, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_C_GuildBtlUser, pic_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_C_GuildBtlUser, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_C_GuildBtlUser, combatvalue_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_C_GuildBtlUser, addhppct_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_C_GuildBtlUser, addatkpct_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_C_GuildBtlUser, wintime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_C_GuildBtlUser, maxwintime_),
  };
  DB_C_GuildBtlUser_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DB_C_GuildBtlUser_descriptor_,
      DB_C_GuildBtlUser::default_instance_,
      DB_C_GuildBtlUser_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_C_GuildBtlUser, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_C_GuildBtlUser, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DB_C_GuildBtlUser));
  DB_C_GuildBtlPosition_descriptor_ = file->message_type(53);
  static const int DB_C_GuildBtlPosition_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_C_GuildBtlPosition, nposx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_C_GuildBtlPosition, nposy_),
  };
  DB_C_GuildBtlPosition_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DB_C_GuildBtlPosition_descriptor_,
      DB_C_GuildBtlPosition::default_instance_,
      DB_C_GuildBtlPosition_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_C_GuildBtlPosition, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_C_GuildBtlPosition, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DB_C_GuildBtlPosition));
  DB_C_GuildBtlFightUnit_descriptor_ = file->message_type(54);
  static const int DB_C_GuildBtlFightUnit_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_C_GuildBtlFightUnit, nid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_C_GuildBtlFightUnit, narmytype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_C_GuildBtlFightUnit, nhp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_C_GuildBtlFightUnit, ngrade_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_C_GuildBtlFightUnit, narmygroup_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_C_GuildBtlFightUnit, nrestframe_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_C_GuildBtlFightUnit, pos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_C_GuildBtlFightUnit, nmaxhp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_C_GuildBtlFightUnit, nherograde_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_C_GuildBtlFightUnit, nherolv_),
  };
  DB_C_GuildBtlFightUnit_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DB_C_GuildBtlFightUnit_descriptor_,
      DB_C_GuildBtlFightUnit::default_instance_,
      DB_C_GuildBtlFightUnit_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_C_GuildBtlFightUnit, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_C_GuildBtlFightUnit, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DB_C_GuildBtlFightUnit));
  DB_C_GuildBtlArmyAtkProp_descriptor_ = file->message_type(55);
  static const int DB_C_GuildBtlArmyAtkProp_offsets_[23] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_C_GuildBtlArmyAtkProp, narmytype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_C_GuildBtlArmyAtkProp, nhp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_C_GuildBtlArmyAtkProp, ndamage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_C_GuildBtlArmyAtkProp, ndamagebase_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_C_GuildBtlArmyAtkProp, ndamagepec_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_C_GuildBtlArmyAtkProp, nrange_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_C_GuildBtlArmyAtkProp, ncrt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_C_GuildBtlArmyAtkProp, nspeed_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_C_GuildBtlArmyAtkProp, nturnspeed_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_C_GuildBtlArmyAtkProp, nrestraint_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_C_GuildBtlArmyAtkProp, ncrtdamage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_C_GuildBtlArmyAtkProp, ncrtdef_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_C_GuildBtlArmyAtkProp, ndamagedef_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_C_GuildBtlArmyAtkProp, ntotaldamagepct_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_C_GuildBtlArmyAtkProp, nbuffdamagepct_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_C_GuildBtlArmyAtkProp, nrangebase_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_C_GuildBtlArmyAtkProp, nspeedbase_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_C_GuildBtlArmyAtkProp, nrestraintdef_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_C_GuildBtlArmyAtkProp, npropertydamagepec_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_C_GuildBtlArmyAtkProp, npropertydamagedefpec_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_C_GuildBtlArmyAtkProp, ndefatkpec_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_C_GuildBtlArmyAtkProp, ndefcritrate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_C_GuildBtlArmyAtkProp, ndefcritrange_),
  };
  DB_C_GuildBtlArmyAtkProp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DB_C_GuildBtlArmyAtkProp_descriptor_,
      DB_C_GuildBtlArmyAtkProp::default_instance_,
      DB_C_GuildBtlArmyAtkProp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_C_GuildBtlArmyAtkProp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_C_GuildBtlArmyAtkProp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DB_C_GuildBtlArmyAtkProp));
  DB_C_GuildBtlAdmiralAdd_descriptor_ = file->message_type(56);
  static const int DB_C_GuildBtlAdmiralAdd_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_C_GuildBtlAdmiralAdd, naddpctfoot_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_C_GuildBtlAdmiralAdd, naddpcttank_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_C_GuildBtlAdmiralAdd, naddpctplane_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_C_GuildBtlAdmiralAdd, naddpctbuild_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_C_GuildBtlAdmiralAdd, fightgeneral_),
  };
  DB_C_GuildBtlAdmiralAdd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DB_C_GuildBtlAdmiralAdd_descriptor_,
      DB_C_GuildBtlAdmiralAdd::default_instance_,
      DB_C_GuildBtlAdmiralAdd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_C_GuildBtlAdmiralAdd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_C_GuildBtlAdmiralAdd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DB_C_GuildBtlAdmiralAdd));
  Pve_GuildBtlHeroSkill_descriptor_ = file->message_type(57);
  static const int Pve_GuildBtlHeroSkill_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Pve_GuildBtlHeroSkill, heroid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Pve_GuildBtlHeroSkill, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Pve_GuildBtlHeroSkill, skillid1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Pve_GuildBtlHeroSkill, skill1grade_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Pve_GuildBtlHeroSkill, skill1quality_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Pve_GuildBtlHeroSkill, skillid2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Pve_GuildBtlHeroSkill, skill2grade_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Pve_GuildBtlHeroSkill, skill2quality_),
  };
  Pve_GuildBtlHeroSkill_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Pve_GuildBtlHeroSkill_descriptor_,
      Pve_GuildBtlHeroSkill::default_instance_,
      Pve_GuildBtlHeroSkill_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Pve_GuildBtlHeroSkill, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Pve_GuildBtlHeroSkill, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Pve_GuildBtlHeroSkill));
  DB_C_GuildBtlSendDataUnit_descriptor_ = file->message_type(58);
  static const int DB_C_GuildBtlSendDataUnit_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_C_GuildBtlSendDataUnit, pvecarmyatkprop_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_C_GuildBtlSendDataUnit, pvefightunit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_C_GuildBtlSendDataUnit, pvefightadmiral_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_C_GuildBtlSendDataUnit, pvefightheroskill_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_C_GuildBtlSendDataUnit, nreducespeed_),
  };
  DB_C_GuildBtlSendDataUnit_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DB_C_GuildBtlSendDataUnit_descriptor_,
      DB_C_GuildBtlSendDataUnit::default_instance_,
      DB_C_GuildBtlSendDataUnit_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_C_GuildBtlSendDataUnit, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_C_GuildBtlSendDataUnit, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DB_C_GuildBtlSendDataUnit));
  DB_C_Guild_FightSendData_descriptor_ = file->message_type(59);
  static const int DB_C_Guild_FightSendData_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_C_Guild_FightSendData, btluser_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_C_Guild_FightSendData, fightsenddata_),
  };
  DB_C_Guild_FightSendData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DB_C_Guild_FightSendData_descriptor_,
      DB_C_Guild_FightSendData::default_instance_,
      DB_C_Guild_FightSendData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_C_Guild_FightSendData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_C_Guild_FightSendData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DB_C_Guild_FightSendData));
  DB_C_GuildBtlUserPK_descriptor_ = file->message_type(60);
  static const int DB_C_GuildBtlUserPK_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_C_GuildBtlUserPK, userid1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_C_GuildBtlUserPK, userid2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_C_GuildBtlUserPK, winid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_C_GuildBtlUserPK, winlefthp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_C_GuildBtlUserPK, bstreakleave_),
  };
  DB_C_GuildBtlUserPK_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DB_C_GuildBtlUserPK_descriptor_,
      DB_C_GuildBtlUserPK::default_instance_,
      DB_C_GuildBtlUserPK_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_C_GuildBtlUserPK, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_C_GuildBtlUserPK, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DB_C_GuildBtlUserPK));
  DB_C_GuidlBtlRetWay_descriptor_ = file->message_type(61);
  static const int DB_C_GuidlBtlRetWay_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_C_GuidlBtlRetWay, region_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_C_GuidlBtlRetWay, guildid1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_C_GuidlBtlRetWay, guildid2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_C_GuidlBtlRetWay, session_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_C_GuidlBtlRetWay, way_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_C_GuidlBtlRetWay, winguildid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_C_GuidlBtlRetWay, userlst1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_C_GuidlBtlRetWay, userlst2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_C_GuidlBtlRetWay, pklst_),
  };
  DB_C_GuidlBtlRetWay_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DB_C_GuidlBtlRetWay_descriptor_,
      DB_C_GuidlBtlRetWay::default_instance_,
      DB_C_GuidlBtlRetWay_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_C_GuidlBtlRetWay, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_C_GuidlBtlRetWay, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DB_C_GuidlBtlRetWay));
  DB_GVE_City_descriptor_ = file->message_type(62);
  static const int DB_GVE_City_offsets_[11] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_GVE_City, npc_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_GVE_City, flag_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_GVE_City, bufflist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_GVE_City, nowlist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_GVE_City, lastlist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_GVE_City, nowmsg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_GVE_City, lastmsg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_GVE_City, highestmsg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_GVE_City, playerlist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_GVE_City, lastrefreshtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_GVE_City, spnpc_),
  };
  DB_GVE_City_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DB_GVE_City_descriptor_,
      DB_GVE_City::default_instance_,
      DB_GVE_City_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_GVE_City, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_GVE_City, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DB_GVE_City));
  DB_GVE_List_descriptor_ = file->message_type(63);
  static const int DB_GVE_List_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_GVE_List, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_GVE_List, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_GVE_List, gvepoint_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_GVE_List, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_GVE_List, officerposition_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_GVE_List, viptype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_GVE_List, viplevel_),
  };
  DB_GVE_List_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DB_GVE_List_descriptor_,
      DB_GVE_List::default_instance_,
      DB_GVE_List_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_GVE_List, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_GVE_List, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DB_GVE_List));
  DB_GVE_Msg_descriptor_ = file->message_type(64);
  static const int DB_GVE_Msg_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_GVE_Msg, gvestep_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_GVE_Msg, point_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_GVE_Msg, rank_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_GVE_Msg, playercnt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_GVE_Msg, overguildstep_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_GVE_Msg, overguildpoint_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_GVE_Msg, overguildmem_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_GVE_Msg, flag_),
  };
  DB_GVE_Msg_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DB_GVE_Msg_descriptor_,
      DB_GVE_Msg::default_instance_,
      DB_GVE_Msg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_GVE_Msg, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_GVE_Msg, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DB_GVE_Msg));
  DB_GVE_Buff_descriptor_ = file->message_type(65);
  static const int DB_GVE_Buff_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_GVE_Buff, buffid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_GVE_Buff, buffendtime_),
  };
  DB_GVE_Buff_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DB_GVE_Buff_descriptor_,
      DB_GVE_Buff::default_instance_,
      DB_GVE_Buff_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_GVE_Buff, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_GVE_Buff, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DB_GVE_Buff));
  DB_GVE_FirstDown_descriptor_ = file->message_type(66);
  static const int DB_GVE_FirstDown_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_GVE_FirstDown, stepid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_GVE_FirstDown, guildid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_GVE_FirstDown, guildcountry_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_GVE_FirstDown, guildname_),
  };
  DB_GVE_FirstDown_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DB_GVE_FirstDown_descriptor_,
      DB_GVE_FirstDown::default_instance_,
      DB_GVE_FirstDown_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_GVE_FirstDown, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_GVE_FirstDown, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DB_GVE_FirstDown));
  DB_C_ResourceData_descriptor_ = file->message_type(67);
  static const int DB_C_ResourceData_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_C_ResourceData, key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_C_ResourceData, region_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_C_ResourceData, resourselist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_C_ResourceData, ltsaverevision_),
  };
  DB_C_ResourceData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DB_C_ResourceData_descriptor_,
      DB_C_ResourceData::default_instance_,
      DB_C_ResourceData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_C_ResourceData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_C_ResourceData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DB_C_ResourceData));
  DB_C_Resource_descriptor_ = file->message_type(68);
  static const int DB_C_Resource_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_C_Resource, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_C_Resource, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_C_Resource, lv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_C_Resource, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_C_Resource, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_C_Resource, endtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_C_Resource, admiralid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_C_Resource, admiraltrainlv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_C_Resource, pow_),
  };
  DB_C_Resource_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DB_C_Resource_descriptor_,
      DB_C_Resource::default_instance_,
      DB_C_Resource_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_C_Resource, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_C_Resource, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DB_C_Resource));
  DB_C_GvgCity_descriptor_ = file->message_type(69);
  static const int DB_C_GvgCity_offsets_[11] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_C_GvgCity, key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_C_GvgCity, region_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_C_GvgCity, cityid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_C_GvgCity, activeflag_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_C_GvgCity, guildid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_C_GvgCity, ltsaverevision_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_C_GvgCity, signguildlist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_C_GvgCity, gvgbtl_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_C_GvgCity, step_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_C_GvgCity, guildstreak_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_C_GvgCity, citypoint_),
  };
  DB_C_GvgCity_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DB_C_GvgCity_descriptor_,
      DB_C_GvgCity::default_instance_,
      DB_C_GvgCity_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_C_GvgCity, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_C_GvgCity, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DB_C_GvgCity));
  DB_C_GvgSignMsg_descriptor_ = file->message_type(70);
  static const int DB_C_GvgSignMsg_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_C_GvgSignMsg, guildid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_C_GvgSignMsg, guildcontribute_),
  };
  DB_C_GvgSignMsg_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DB_C_GvgSignMsg_descriptor_,
      DB_C_GvgSignMsg::default_instance_,
      DB_C_GvgSignMsg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_C_GvgSignMsg, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_C_GvgSignMsg, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DB_C_GvgSignMsg));
  DB_C_GvgBtlRet_descriptor_ = file->message_type(71);
  static const int DB_C_GvgBtlRet_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_C_GvgBtlRet, guildid1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_C_GvgBtlRet, guildid2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_C_GvgBtlRet, session_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_C_GvgBtlRet, winguildid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_C_GvgBtlRet, cityid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_C_GvgBtlRet, round_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_C_GvgBtlRet, bwinbyfight_),
  };
  DB_C_GvgBtlRet_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DB_C_GvgBtlRet_descriptor_,
      DB_C_GvgBtlRet::default_instance_,
      DB_C_GvgBtlRet_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_C_GvgBtlRet, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_C_GvgBtlRet, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DB_C_GvgBtlRet));
  DB_C_GvgBtlPlayerMsg_descriptor_ = file->message_type(72);
  static const int DB_C_GvgBtlPlayerMsg_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_C_GvgBtlPlayerMsg, userid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_C_GvgBtlPlayerMsg, wintime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_C_GvgBtlPlayerMsg, lefthp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_C_GvgBtlPlayerMsg, way_),
  };
  DB_C_GvgBtlPlayerMsg_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DB_C_GvgBtlPlayerMsg_descriptor_,
      DB_C_GvgBtlPlayerMsg::default_instance_,
      DB_C_GvgBtlPlayerMsg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_C_GvgBtlPlayerMsg, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_C_GvgBtlPlayerMsg, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DB_C_GvgBtlPlayerMsg));
  DB_C_GvgBtlRetSave_descriptor_ = file->message_type(73);
  static const int DB_C_GvgBtlRetSave_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_C_GvgBtlRetSave, winguildid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_C_GvgBtlRetSave, guildid1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_C_GvgBtlRetSave, guildid2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_C_GvgBtlRetSave, session_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_C_GvgBtlRetSave, cityid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_C_GvgBtlRetSave, region_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_C_GvgBtlRetSave, retway_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_C_GvgBtlRetSave, playercnt1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_C_GvgBtlRetSave, playercnt2_),
  };
  DB_C_GvgBtlRetSave_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DB_C_GvgBtlRetSave_descriptor_,
      DB_C_GvgBtlRetSave::default_instance_,
      DB_C_GvgBtlRetSave_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_C_GvgBtlRetSave, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_C_GvgBtlRetSave, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DB_C_GvgBtlRetSave));
  DB_C_GvgBtlRetWay_descriptor_ = file->message_type(74);
  static const int DB_C_GvgBtlRetWay_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_C_GvgBtlRetWay, way_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_C_GvgBtlRetWay, winguildid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_C_GvgBtlRetWay, guildid1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_C_GvgBtlRetWay, guildid2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_C_GvgBtlRetWay, session_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_C_GvgBtlRetWay, cityid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_C_GvgBtlRetWay, userlst1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_C_GvgBtlRetWay, userlst2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_C_GvgBtlRetWay, pklst_),
  };
  DB_C_GvgBtlRetWay_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DB_C_GvgBtlRetWay_descriptor_,
      DB_C_GvgBtlRetWay::default_instance_,
      DB_C_GvgBtlRetWay_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_C_GvgBtlRetWay, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_C_GvgBtlRetWay, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DB_C_GvgBtlRetWay));
  DB_C_Gvg_FightSendData_descriptor_ = file->message_type(75);
  static const int DB_C_Gvg_FightSendData_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_C_Gvg_FightSendData, btluser_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_C_Gvg_FightSendData, fightsenddata_),
  };
  DB_C_Gvg_FightSendData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DB_C_Gvg_FightSendData_descriptor_,
      DB_C_Gvg_FightSendData::default_instance_,
      DB_C_Gvg_FightSendData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_C_Gvg_FightSendData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_C_Gvg_FightSendData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DB_C_Gvg_FightSendData));
  DB_C_GVG_Msg_descriptor_ = file->message_type(76);
  static const int DB_C_GVG_Msg_offsets_[12] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_C_GVG_Msg, flag_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_C_GVG_Msg, signcity_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_C_GVG_Msg, controlcity_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_C_GVG_Msg, contribute_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_C_GVG_Msg, userway_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_C_GVG_Msg, addprop_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_C_GVG_Msg, fightend_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_C_GVG_Msg, lastcontributetime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_C_GVG_Msg, state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_C_GVG_Msg, contributerecorcd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_C_GVG_Msg, rewardrecord_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_C_GVG_Msg, playerid_),
  };
  DB_C_GVG_Msg_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DB_C_GVG_Msg_descriptor_,
      DB_C_GVG_Msg::default_instance_,
      DB_C_GVG_Msg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_C_GVG_Msg, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_C_GVG_Msg, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DB_C_GVG_Msg));
  DB_C_GvgBtlCityMsg_descriptor_ = file->message_type(77);
  static const int DB_C_GvgBtlCityMsg_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_C_GvgBtlCityMsg, cityid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_C_GvgBtlCityMsg, userway1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_C_GvgBtlCityMsg, signupcnt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_C_GvgBtlCityMsg, session_),
  };
  DB_C_GvgBtlCityMsg_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DB_C_GvgBtlCityMsg_descriptor_,
      DB_C_GvgBtlCityMsg::default_instance_,
      DB_C_GvgBtlCityMsg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_C_GvgBtlCityMsg, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_C_GvgBtlCityMsg, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DB_C_GvgBtlCityMsg));
  DB_C_GvgBtlAddProp_descriptor_ = file->message_type(78);
  static const int DB_C_GvgBtlAddProp_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_C_GvgBtlAddProp, userid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_C_GvgBtlAddProp, addatkpct_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_C_GvgBtlAddProp, addbloodpct_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_C_GvgBtlAddProp, maxwintime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_C_GvgBtlAddProp, wintime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_C_GvgBtlAddProp, lefthp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_C_GvgBtlAddProp, session_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_C_GvgBtlAddProp, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_C_GvgBtlAddProp, pic_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_C_GvgBtlAddProp, isoffline_),
  };
  DB_C_GvgBtlAddProp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DB_C_GvgBtlAddProp_descriptor_,
      DB_C_GvgBtlAddProp::default_instance_,
      DB_C_GvgBtlAddProp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_C_GvgBtlAddProp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_C_GvgBtlAddProp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DB_C_GvgBtlAddProp));
  DB_C_PubGvgBtlInfo_descriptor_ = file->message_type(79);
  static const int DB_C_PubGvgBtlInfo_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_C_PubGvgBtlInfo, cursession_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_C_PubGvgBtlInfo, flag_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_C_PubGvgBtlInfo, fightover_),
  };
  DB_C_PubGvgBtlInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DB_C_PubGvgBtlInfo_descriptor_,
      DB_C_PubGvgBtlInfo::default_instance_,
      DB_C_PubGvgBtlInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_C_PubGvgBtlInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_C_PubGvgBtlInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DB_C_PubGvgBtlInfo));
  DB_C_GVG_Reward_Record_descriptor_ = file->message_type(80);
  static const int DB_C_GVG_Reward_Record_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_C_GVG_Reward_Record, pos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_C_GVG_Reward_Record, cnt_),
  };
  DB_C_GVG_Reward_Record_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DB_C_GVG_Reward_Record_descriptor_,
      DB_C_GVG_Reward_Record::default_instance_,
      DB_C_GVG_Reward_Record_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_C_GVG_Reward_Record, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_C_GVG_Reward_Record, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DB_C_GVG_Reward_Record));
  DB_C_WpcRank_descriptor_ = file->message_type(81);
  static const int DB_C_WpcRank_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_C_WpcRank, nowrank_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_C_WpcRank, lastrank_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_C_WpcRank, activeid_),
  };
  DB_C_WpcRank_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DB_C_WpcRank_descriptor_,
      DB_C_WpcRank::default_instance_,
      DB_C_WpcRank_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_C_WpcRank, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_C_WpcRank, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DB_C_WpcRank));
  DB_C_WpcRankUnit_descriptor_ = file->message_type(82);
  static const int DB_C_WpcRankUnit_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_C_WpcRankUnit, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_C_WpcRankUnit, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_C_WpcRankUnit, pic_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_C_WpcRankUnit, countryid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_C_WpcRankUnit, guildname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_C_WpcRankUnit, fightpoint_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_C_WpcRankUnit, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_C_WpcRankUnit, explorecnt_),
  };
  DB_C_WpcRankUnit_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DB_C_WpcRankUnit_descriptor_,
      DB_C_WpcRankUnit::default_instance_,
      DB_C_WpcRankUnit_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_C_WpcRankUnit, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_C_WpcRankUnit, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DB_C_WpcRankUnit));
  DB_C_WarGameData_descriptor_ = file->message_type(83);
  static const int DB_C_WarGameData_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_C_WarGameData, key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_C_WarGameData, region_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_C_WarGameData, sitelist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_C_WarGameData, ltsaverevision_),
  };
  DB_C_WarGameData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DB_C_WarGameData_descriptor_,
      DB_C_WarGameData::default_instance_,
      DB_C_WarGameData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_C_WarGameData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_C_WarGameData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DB_C_WarGameData));
  DB_C_WarGameSite_descriptor_ = file->message_type(84);
  static const int DB_C_WarGameSite_offsets_[12] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_C_WarGameSite, sitid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_C_WarGameSite, sitlv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_C_WarGameSite, starttime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_C_WarGameSite, endtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_C_WarGameSite, delaynum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_C_WarGameSite, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_C_WarGameSite, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_C_WarGameSite, countryid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_C_WarGameSite, power_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_C_WarGameSite, admirallist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_C_WarGameSite, trucestarttime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_C_WarGameSite, truceendtime_),
  };
  DB_C_WarGameSite_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DB_C_WarGameSite_descriptor_,
      DB_C_WarGameSite::default_instance_,
      DB_C_WarGameSite_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_C_WarGameSite, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_C_WarGameSite, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DB_C_WarGameSite));
  DB_C_WarGameAdmiralInfo_descriptor_ = file->message_type(85);
  static const int DB_C_WarGameAdmiralInfo_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_C_WarGameAdmiralInfo, admiralid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_C_WarGameAdmiralInfo, admirallv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_C_WarGameAdmiralInfo, admiraltrainlv_),
  };
  DB_C_WarGameAdmiralInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DB_C_WarGameAdmiralInfo_descriptor_,
      DB_C_WarGameAdmiralInfo::default_instance_,
      DB_C_WarGameAdmiralInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_C_WarGameAdmiralInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_C_WarGameAdmiralInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DB_C_WarGameAdmiralInfo));
  DB_C_ChatMsg_descriptor_ = file->message_type(86);
  static const int DB_C_ChatMsg_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_C_ChatMsg, begin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_C_ChatMsg, end_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_C_ChatMsg, num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_C_ChatMsg, msg_),
  };
  DB_C_ChatMsg_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DB_C_ChatMsg_descriptor_,
      DB_C_ChatMsg::default_instance_,
      DB_C_ChatMsg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_C_ChatMsg, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_C_ChatMsg, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DB_C_ChatMsg));
  DB_C_ChatMsgOne_descriptor_ = file->message_type(87);
  static const int DB_C_ChatMsgOne_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_C_ChatMsgOne, country_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_C_ChatMsgOne, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_C_ChatMsgOne, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_C_ChatMsgOne, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_C_ChatMsgOne, msg_),
  };
  DB_C_ChatMsgOne_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DB_C_ChatMsgOne_descriptor_,
      DB_C_ChatMsgOne::default_instance_,
      DB_C_ChatMsgOne_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_C_ChatMsgOne, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_C_ChatMsgOne, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DB_C_ChatMsgOne));
  DB_C_BossBtlMsg_descriptor_ = file->message_type(88);
  static const int DB_C_BossBtlMsg_offsets_[13] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_C_BossBtlMsg, key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_C_BossBtlMsg, region_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_C_BossBtlMsg, nbossbtlflag_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_C_BossBtlMsg, bossinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_C_BossBtlMsg, ranklist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_C_BossBtlMsg, killer_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_C_BossBtlMsg, state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_C_BossBtlMsg, fightingbossmsg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_C_BossBtlMsg, luckylist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_C_BossBtlMsg, ltsaverevision_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_C_BossBtlMsg, lastranklist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_C_BossBtlMsg, highpointlist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_C_BossBtlMsg, uplist_),
  };
  DB_C_BossBtlMsg_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DB_C_BossBtlMsg_descriptor_,
      DB_C_BossBtlMsg::default_instance_,
      DB_C_BossBtlMsg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_C_BossBtlMsg, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_C_BossBtlMsg, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DB_C_BossBtlMsg));
  DB_C_BossInfo_descriptor_ = file->message_type(89);
  static const int DB_C_BossInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_C_BossInfo, bossid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_C_BossInfo, bosslv_),
  };
  DB_C_BossInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DB_C_BossInfo_descriptor_,
      DB_C_BossInfo::default_instance_,
      DB_C_BossInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_C_BossInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_C_BossInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DB_C_BossInfo));
  DB_C_BossMsg_descriptor_ = file->message_type(90);
  static const int DB_C_BossMsg_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_C_BossMsg, bossid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_C_BossMsg, hp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_C_BossMsg, maxhp_),
  };
  DB_C_BossMsg_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DB_C_BossMsg_descriptor_,
      DB_C_BossMsg::default_instance_,
      DB_C_BossMsg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_C_BossMsg, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_C_BossMsg, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DB_C_BossMsg));
  DB_C_BossBtlRankUnit_descriptor_ = file->message_type(91);
  static const int DB_C_BossBtlRankUnit_offsets_[12] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_C_BossBtlRankUnit, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_C_BossBtlRankUnit, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_C_BossBtlRankUnit, pic_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_C_BossBtlRankUnit, dmg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_C_BossBtlRankUnit, count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_C_BossBtlRankUnit, namelist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_C_BossBtlRankUnit, words_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_C_BossBtlRankUnit, reports_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_C_BossBtlRankUnit, power_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_C_BossBtlRankUnit, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_C_BossBtlRankUnit, guildname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_C_BossBtlRankUnit, countryid_),
  };
  DB_C_BossBtlRankUnit_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DB_C_BossBtlRankUnit_descriptor_,
      DB_C_BossBtlRankUnit::default_instance_,
      DB_C_BossBtlRankUnit_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_C_BossBtlRankUnit, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_C_BossBtlRankUnit, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DB_C_BossBtlRankUnit));
  DB_C_Report_descriptor_ = file->message_type(92);
  static const int DB_C_Report_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_C_Report, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_C_Report, count_),
  };
  DB_C_Report_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DB_C_Report_descriptor_,
      DB_C_Report::default_instance_,
      DB_C_Report_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_C_Report, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_C_Report, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DB_C_Report));
  DB_C_NpcActiveRankItem_descriptor_ = file->message_type(93);
  static const int DB_C_NpcActiveRankItem_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_C_NpcActiveRankItem, country_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_C_NpcActiveRankItem, wincnt_),
  };
  DB_C_NpcActiveRankItem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DB_C_NpcActiveRankItem_descriptor_,
      DB_C_NpcActiveRankItem::default_instance_,
      DB_C_NpcActiveRankItem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_C_NpcActiveRankItem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_C_NpcActiveRankItem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DB_C_NpcActiveRankItem));
  DB_C_NpcActiveRank_descriptor_ = file->message_type(94);
  static const int DB_C_NpcActiveRank_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_C_NpcActiveRank, ranktime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_C_NpcActiveRank, rank_),
  };
  DB_C_NpcActiveRank_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DB_C_NpcActiveRank_descriptor_,
      DB_C_NpcActiveRank::default_instance_,
      DB_C_NpcActiveRank_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_C_NpcActiveRank, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_C_NpcActiveRank, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DB_C_NpcActiveRank));
  DB_C_GuildRedEnvelope_descriptor_ = file->message_type(95);
  static const int DB_C_GuildRedEnvelope_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_C_GuildRedEnvelope, nflag_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_C_GuildRedEnvelope, ntotal_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_C_GuildRedEnvelope, ncurrentid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_C_GuildRedEnvelope, listredenvelope_),
  };
  DB_C_GuildRedEnvelope_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DB_C_GuildRedEnvelope_descriptor_,
      DB_C_GuildRedEnvelope::default_instance_,
      DB_C_GuildRedEnvelope_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_C_GuildRedEnvelope, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_C_GuildRedEnvelope, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DB_C_GuildRedEnvelope));
  DB_C_RedEnvelopeInfo_descriptor_ = file->message_type(96);
  static const int DB_C_RedEnvelopeInfo_offsets_[11] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_C_RedEnvelopeInfo, nid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_C_RedEnvelopeInfo, ntype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_C_RedEnvelopeInfo, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_C_RedEnvelopeInfo, ntotalcredit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_C_RedEnvelopeInfo, nissuetime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_C_RedEnvelopeInfo, noverduetime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_C_RedEnvelopeInfo, ngiveout_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_C_RedEnvelopeInfo, ntotalnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_C_RedEnvelopeInfo, nadjtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_C_RedEnvelopeInfo, brefund_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_C_RedEnvelopeInfo, listreport_),
  };
  DB_C_RedEnvelopeInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DB_C_RedEnvelopeInfo_descriptor_,
      DB_C_RedEnvelopeInfo::default_instance_,
      DB_C_RedEnvelopeInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_C_RedEnvelopeInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_C_RedEnvelopeInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DB_C_RedEnvelopeInfo));
  DB_C_RedEnvelopeReport_descriptor_ = file->message_type(97);
  static const int DB_C_RedEnvelopeReport_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_C_RedEnvelopeReport, ntime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_C_RedEnvelopeReport, nuid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_C_RedEnvelopeReport, ngetnum_),
  };
  DB_C_RedEnvelopeReport_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DB_C_RedEnvelopeReport_descriptor_,
      DB_C_RedEnvelopeReport::default_instance_,
      DB_C_RedEnvelopeReport_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_C_RedEnvelopeReport, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_C_RedEnvelopeReport, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DB_C_RedEnvelopeReport));
  DB_C_RedEnvelopeCount_descriptor_ = file->message_type(98);
  static const int DB_C_RedEnvelopeCount_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_C_RedEnvelopeCount, nflag_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_C_RedEnvelopeCount, ntotalnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_C_RedEnvelopeCount, nsendtotal_),
  };
  DB_C_RedEnvelopeCount_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DB_C_RedEnvelopeCount_descriptor_,
      DB_C_RedEnvelopeCount::default_instance_,
      DB_C_RedEnvelopeCount_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_C_RedEnvelopeCount, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_C_RedEnvelopeCount, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DB_C_RedEnvelopeCount));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_countryDB_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DB_C_User_descriptor_, &DB_C_User::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DB_One_Yuan_Reward_key_descriptor_, &DB_One_Yuan_Reward_key::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DB_One_Yuan_descriptor_, &DB_One_Yuan::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DB_One_Yuan_Purchase_Winner_descriptor_, &DB_One_Yuan_Purchase_Winner::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DB_Region_One_Yuan_descriptor_, &DB_Region_One_Yuan::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DB_C_UserList_descriptor_, &DB_C_UserList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DB_C_NPC_descriptor_, &DB_C_NPC::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DB_C_CountryRank_descriptor_, &DB_C_CountryRank::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DB_C_CountryLeagueBattle_descriptor_, &DB_C_CountryLeagueBattle::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DB_C_CountryLeagueMsg_descriptor_, &DB_C_CountryLeagueMsg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DB_C_LeaguePlayerUnit_descriptor_, &DB_C_LeaguePlayerUnit::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DB_C_LeagueGuildUnit_descriptor_, &DB_C_LeagueGuildUnit::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DB_C_BtlRecord_descriptor_, &DB_C_BtlRecord::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DB_C_BloodBtlStep_descriptor_, &DB_C_BloodBtlStep::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DB_C_BloodBtl_descriptor_, &DB_C_BloodBtl::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DB_C_OfficerRightUse_descriptor_, &DB_C_OfficerRightUse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DB_C_City_descriptor_, &DB_C_City::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DB_C_CityBuffData_descriptor_, &DB_C_CityBuffData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DB_C_RandomBuff_descriptor_, &DB_C_RandomBuff::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DB_Arena_Rank_NPC_descriptor_, &DB_Arena_Rank_NPC::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DB_Arena_Rank_List_descriptor_, &DB_Arena_Rank_List::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DB_Arena_Score_Unit_descriptor_, &DB_Arena_Score_Unit::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DB_Arena_Score_List_descriptor_, &DB_Arena_Score_List::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DB_Arena_Rank_descriptor_, &DB_Arena_Rank::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DB_WorldArena_Rank_Unit_descriptor_, &DB_WorldArena_Rank_Unit::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DB_WorldArena_Rank_List_descriptor_, &DB_WorldArena_Rank_List::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DB_WorldArena_Rank_descriptor_, &DB_WorldArena_Rank::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DB_HeroArena_Rank_Unit_descriptor_, &DB_HeroArena_Rank_Unit::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DB_HeroArena_Rank_List_descriptor_, &DB_HeroArena_Rank_List::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DB_HeroArena_Rank_descriptor_, &DB_HeroArena_Rank::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DB_C_Officer_descriptor_, &DB_C_Officer::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DB_C_OfficerInfo_descriptor_, &DB_C_OfficerInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DB_C_PubGuildPKGroup_descriptor_, &DB_C_PubGuildPKGroup::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DB_C_PubGuildBtlInfo_descriptor_, &DB_C_PubGuildBtlInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DB_C_GuildBtl_Top_Guild_descriptor_, &DB_C_GuildBtl_Top_Guild::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DB_C_GuildBtl_Record_descriptor_, &DB_C_GuildBtl_Record::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DB_C_Country_descriptor_, &DB_C_Country::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DB_C_GuildBld_descriptor_, &DB_C_GuildBld::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DB_C_GuildLog_descriptor_, &DB_C_GuildLog::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DB_C_GuildBuyRecord_descriptor_, &DB_C_GuildBuyRecord::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DB_C_GuildShopPmt_descriptor_, &DB_C_GuildShopPmt::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DB_C_GuildShop_descriptor_, &DB_C_GuildShop::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DB_C_GuildBtlAddProp_descriptor_, &DB_C_GuildBtlAddProp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DB_C_GuildBtlReward_Turns_descriptor_, &DB_C_GuildBtlReward_Turns::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DB_C_GuildBtlReward_descriptor_, &DB_C_GuildBtlReward::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DB_C_GuildBtlResult_descriptor_, &DB_C_GuildBtlResult::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DB_C_GuildStorage_descriptor_, &DB_C_GuildStorage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DB_C_GuildBtl_descriptor_, &DB_C_GuildBtl::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DB_C_Guild_descriptor_, &DB_C_Guild::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DB_C_GuildList_descriptor_, &DB_C_GuildList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DB_C_GuildBtlGeneral_descriptor_, &DB_C_GuildBtlGeneral::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DB_C_PVEFightMH_descriptor_, &DB_C_PVEFightMH::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DB_C_GuildBtlUser_descriptor_, &DB_C_GuildBtlUser::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DB_C_GuildBtlPosition_descriptor_, &DB_C_GuildBtlPosition::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DB_C_GuildBtlFightUnit_descriptor_, &DB_C_GuildBtlFightUnit::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DB_C_GuildBtlArmyAtkProp_descriptor_, &DB_C_GuildBtlArmyAtkProp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DB_C_GuildBtlAdmiralAdd_descriptor_, &DB_C_GuildBtlAdmiralAdd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Pve_GuildBtlHeroSkill_descriptor_, &Pve_GuildBtlHeroSkill::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DB_C_GuildBtlSendDataUnit_descriptor_, &DB_C_GuildBtlSendDataUnit::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DB_C_Guild_FightSendData_descriptor_, &DB_C_Guild_FightSendData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DB_C_GuildBtlUserPK_descriptor_, &DB_C_GuildBtlUserPK::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DB_C_GuidlBtlRetWay_descriptor_, &DB_C_GuidlBtlRetWay::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DB_GVE_City_descriptor_, &DB_GVE_City::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DB_GVE_List_descriptor_, &DB_GVE_List::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DB_GVE_Msg_descriptor_, &DB_GVE_Msg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DB_GVE_Buff_descriptor_, &DB_GVE_Buff::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DB_GVE_FirstDown_descriptor_, &DB_GVE_FirstDown::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DB_C_ResourceData_descriptor_, &DB_C_ResourceData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DB_C_Resource_descriptor_, &DB_C_Resource::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DB_C_GvgCity_descriptor_, &DB_C_GvgCity::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DB_C_GvgSignMsg_descriptor_, &DB_C_GvgSignMsg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DB_C_GvgBtlRet_descriptor_, &DB_C_GvgBtlRet::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DB_C_GvgBtlPlayerMsg_descriptor_, &DB_C_GvgBtlPlayerMsg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DB_C_GvgBtlRetSave_descriptor_, &DB_C_GvgBtlRetSave::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DB_C_GvgBtlRetWay_descriptor_, &DB_C_GvgBtlRetWay::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DB_C_Gvg_FightSendData_descriptor_, &DB_C_Gvg_FightSendData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DB_C_GVG_Msg_descriptor_, &DB_C_GVG_Msg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DB_C_GvgBtlCityMsg_descriptor_, &DB_C_GvgBtlCityMsg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DB_C_GvgBtlAddProp_descriptor_, &DB_C_GvgBtlAddProp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DB_C_PubGvgBtlInfo_descriptor_, &DB_C_PubGvgBtlInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DB_C_GVG_Reward_Record_descriptor_, &DB_C_GVG_Reward_Record::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DB_C_WpcRank_descriptor_, &DB_C_WpcRank::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DB_C_WpcRankUnit_descriptor_, &DB_C_WpcRankUnit::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DB_C_WarGameData_descriptor_, &DB_C_WarGameData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DB_C_WarGameSite_descriptor_, &DB_C_WarGameSite::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DB_C_WarGameAdmiralInfo_descriptor_, &DB_C_WarGameAdmiralInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DB_C_ChatMsg_descriptor_, &DB_C_ChatMsg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DB_C_ChatMsgOne_descriptor_, &DB_C_ChatMsgOne::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DB_C_BossBtlMsg_descriptor_, &DB_C_BossBtlMsg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DB_C_BossInfo_descriptor_, &DB_C_BossInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DB_C_BossMsg_descriptor_, &DB_C_BossMsg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DB_C_BossBtlRankUnit_descriptor_, &DB_C_BossBtlRankUnit::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DB_C_Report_descriptor_, &DB_C_Report::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DB_C_NpcActiveRankItem_descriptor_, &DB_C_NpcActiveRankItem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DB_C_NpcActiveRank_descriptor_, &DB_C_NpcActiveRank::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DB_C_GuildRedEnvelope_descriptor_, &DB_C_GuildRedEnvelope::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DB_C_RedEnvelopeInfo_descriptor_, &DB_C_RedEnvelopeInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DB_C_RedEnvelopeReport_descriptor_, &DB_C_RedEnvelopeReport::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DB_C_RedEnvelopeCount_descriptor_, &DB_C_RedEnvelopeCount::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_countryDB_2eproto() {
  delete DB_C_User::default_instance_;
  delete DB_C_User_reflection_;
  delete DB_One_Yuan_Reward_key::default_instance_;
  delete DB_One_Yuan_Reward_key_reflection_;
  delete DB_One_Yuan::default_instance_;
  delete DB_One_Yuan_reflection_;
  delete DB_One_Yuan_Purchase_Winner::default_instance_;
  delete DB_One_Yuan_Purchase_Winner_reflection_;
  delete DB_Region_One_Yuan::default_instance_;
  delete DB_Region_One_Yuan_reflection_;
  delete DB_C_UserList::default_instance_;
  delete DB_C_UserList_reflection_;
  delete DB_C_NPC::default_instance_;
  delete DB_C_NPC_reflection_;
  delete DB_C_CountryRank::default_instance_;
  delete DB_C_CountryRank_reflection_;
  delete DB_C_CountryLeagueBattle::default_instance_;
  delete DB_C_CountryLeagueBattle_reflection_;
  delete DB_C_CountryLeagueMsg::default_instance_;
  delete DB_C_CountryLeagueMsg_reflection_;
  delete DB_C_LeaguePlayerUnit::default_instance_;
  delete DB_C_LeaguePlayerUnit_reflection_;
  delete DB_C_LeagueGuildUnit::default_instance_;
  delete DB_C_LeagueGuildUnit_reflection_;
  delete DB_C_BtlRecord::default_instance_;
  delete DB_C_BtlRecord_reflection_;
  delete DB_C_BloodBtlStep::default_instance_;
  delete DB_C_BloodBtlStep_reflection_;
  delete DB_C_BloodBtl::default_instance_;
  delete DB_C_BloodBtl_reflection_;
  delete DB_C_OfficerRightUse::default_instance_;
  delete DB_C_OfficerRightUse_reflection_;
  delete DB_C_City::default_instance_;
  delete DB_C_City_reflection_;
  delete DB_C_CityBuffData::default_instance_;
  delete DB_C_CityBuffData_reflection_;
  delete DB_C_RandomBuff::default_instance_;
  delete DB_C_RandomBuff_reflection_;
  delete DB_Arena_Rank_NPC::default_instance_;
  delete DB_Arena_Rank_NPC_reflection_;
  delete DB_Arena_Rank_List::default_instance_;
  delete DB_Arena_Rank_List_reflection_;
  delete DB_Arena_Score_Unit::default_instance_;
  delete DB_Arena_Score_Unit_reflection_;
  delete DB_Arena_Score_List::default_instance_;
  delete DB_Arena_Score_List_reflection_;
  delete DB_Arena_Rank::default_instance_;
  delete DB_Arena_Rank_reflection_;
  delete DB_WorldArena_Rank_Unit::default_instance_;
  delete DB_WorldArena_Rank_Unit_reflection_;
  delete DB_WorldArena_Rank_List::default_instance_;
  delete DB_WorldArena_Rank_List_reflection_;
  delete DB_WorldArena_Rank::default_instance_;
  delete DB_WorldArena_Rank_reflection_;
  delete DB_HeroArena_Rank_Unit::default_instance_;
  delete DB_HeroArena_Rank_Unit_reflection_;
  delete DB_HeroArena_Rank_List::default_instance_;
  delete DB_HeroArena_Rank_List_reflection_;
  delete DB_HeroArena_Rank::default_instance_;
  delete DB_HeroArena_Rank_reflection_;
  delete DB_C_Officer::default_instance_;
  delete DB_C_Officer_reflection_;
  delete DB_C_OfficerInfo::default_instance_;
  delete DB_C_OfficerInfo_reflection_;
  delete DB_C_PubGuildPKGroup::default_instance_;
  delete DB_C_PubGuildPKGroup_reflection_;
  delete DB_C_PubGuildBtlInfo::default_instance_;
  delete DB_C_PubGuildBtlInfo_reflection_;
  delete DB_C_GuildBtl_Top_Guild::default_instance_;
  delete DB_C_GuildBtl_Top_Guild_reflection_;
  delete DB_C_GuildBtl_Record::default_instance_;
  delete DB_C_GuildBtl_Record_reflection_;
  delete DB_C_Country::default_instance_;
  delete DB_C_Country_reflection_;
  delete DB_C_GuildBld::default_instance_;
  delete DB_C_GuildBld_reflection_;
  delete DB_C_GuildLog::default_instance_;
  delete DB_C_GuildLog_reflection_;
  delete DB_C_GuildBuyRecord::default_instance_;
  delete DB_C_GuildBuyRecord_reflection_;
  delete DB_C_GuildShopPmt::default_instance_;
  delete DB_C_GuildShopPmt_reflection_;
  delete DB_C_GuildShop::default_instance_;
  delete DB_C_GuildShop_reflection_;
  delete DB_C_GuildBtlAddProp::default_instance_;
  delete DB_C_GuildBtlAddProp_reflection_;
  delete DB_C_GuildBtlReward_Turns::default_instance_;
  delete DB_C_GuildBtlReward_Turns_reflection_;
  delete DB_C_GuildBtlReward::default_instance_;
  delete DB_C_GuildBtlReward_reflection_;
  delete DB_C_GuildBtlResult::default_instance_;
  delete DB_C_GuildBtlResult_reflection_;
  delete DB_C_GuildStorage::default_instance_;
  delete DB_C_GuildStorage_reflection_;
  delete DB_C_GuildBtl::default_instance_;
  delete DB_C_GuildBtl_reflection_;
  delete DB_C_Guild::default_instance_;
  delete DB_C_Guild_reflection_;
  delete DB_C_GuildList::default_instance_;
  delete DB_C_GuildList_reflection_;
  delete DB_C_GuildBtlGeneral::default_instance_;
  delete DB_C_GuildBtlGeneral_reflection_;
  delete DB_C_PVEFightMH::default_instance_;
  delete DB_C_PVEFightMH_reflection_;
  delete DB_C_GuildBtlUser::default_instance_;
  delete DB_C_GuildBtlUser_reflection_;
  delete DB_C_GuildBtlPosition::default_instance_;
  delete DB_C_GuildBtlPosition_reflection_;
  delete DB_C_GuildBtlFightUnit::default_instance_;
  delete DB_C_GuildBtlFightUnit_reflection_;
  delete DB_C_GuildBtlArmyAtkProp::default_instance_;
  delete DB_C_GuildBtlArmyAtkProp_reflection_;
  delete DB_C_GuildBtlAdmiralAdd::default_instance_;
  delete DB_C_GuildBtlAdmiralAdd_reflection_;
  delete Pve_GuildBtlHeroSkill::default_instance_;
  delete Pve_GuildBtlHeroSkill_reflection_;
  delete DB_C_GuildBtlSendDataUnit::default_instance_;
  delete DB_C_GuildBtlSendDataUnit_reflection_;
  delete DB_C_Guild_FightSendData::default_instance_;
  delete DB_C_Guild_FightSendData_reflection_;
  delete DB_C_GuildBtlUserPK::default_instance_;
  delete DB_C_GuildBtlUserPK_reflection_;
  delete DB_C_GuidlBtlRetWay::default_instance_;
  delete DB_C_GuidlBtlRetWay_reflection_;
  delete DB_GVE_City::default_instance_;
  delete DB_GVE_City_reflection_;
  delete DB_GVE_List::default_instance_;
  delete DB_GVE_List_reflection_;
  delete DB_GVE_Msg::default_instance_;
  delete DB_GVE_Msg_reflection_;
  delete DB_GVE_Buff::default_instance_;
  delete DB_GVE_Buff_reflection_;
  delete DB_GVE_FirstDown::default_instance_;
  delete DB_GVE_FirstDown_reflection_;
  delete DB_C_ResourceData::default_instance_;
  delete DB_C_ResourceData_reflection_;
  delete DB_C_Resource::default_instance_;
  delete DB_C_Resource_reflection_;
  delete DB_C_GvgCity::default_instance_;
  delete DB_C_GvgCity_reflection_;
  delete DB_C_GvgSignMsg::default_instance_;
  delete DB_C_GvgSignMsg_reflection_;
  delete DB_C_GvgBtlRet::default_instance_;
  delete DB_C_GvgBtlRet_reflection_;
  delete DB_C_GvgBtlPlayerMsg::default_instance_;
  delete DB_C_GvgBtlPlayerMsg_reflection_;
  delete DB_C_GvgBtlRetSave::default_instance_;
  delete DB_C_GvgBtlRetSave_reflection_;
  delete DB_C_GvgBtlRetWay::default_instance_;
  delete DB_C_GvgBtlRetWay_reflection_;
  delete DB_C_Gvg_FightSendData::default_instance_;
  delete DB_C_Gvg_FightSendData_reflection_;
  delete DB_C_GVG_Msg::default_instance_;
  delete DB_C_GVG_Msg_reflection_;
  delete DB_C_GvgBtlCityMsg::default_instance_;
  delete DB_C_GvgBtlCityMsg_reflection_;
  delete DB_C_GvgBtlAddProp::default_instance_;
  delete DB_C_GvgBtlAddProp_reflection_;
  delete DB_C_PubGvgBtlInfo::default_instance_;
  delete DB_C_PubGvgBtlInfo_reflection_;
  delete DB_C_GVG_Reward_Record::default_instance_;
  delete DB_C_GVG_Reward_Record_reflection_;
  delete DB_C_WpcRank::default_instance_;
  delete DB_C_WpcRank_reflection_;
  delete DB_C_WpcRankUnit::default_instance_;
  delete DB_C_WpcRankUnit_reflection_;
  delete DB_C_WarGameData::default_instance_;
  delete DB_C_WarGameData_reflection_;
  delete DB_C_WarGameSite::default_instance_;
  delete DB_C_WarGameSite_reflection_;
  delete DB_C_WarGameAdmiralInfo::default_instance_;
  delete DB_C_WarGameAdmiralInfo_reflection_;
  delete DB_C_ChatMsg::default_instance_;
  delete DB_C_ChatMsg_reflection_;
  delete DB_C_ChatMsgOne::default_instance_;
  delete DB_C_ChatMsgOne_reflection_;
  delete DB_C_BossBtlMsg::default_instance_;
  delete DB_C_BossBtlMsg_reflection_;
  delete DB_C_BossInfo::default_instance_;
  delete DB_C_BossInfo_reflection_;
  delete DB_C_BossMsg::default_instance_;
  delete DB_C_BossMsg_reflection_;
  delete DB_C_BossBtlRankUnit::default_instance_;
  delete DB_C_BossBtlRankUnit_reflection_;
  delete DB_C_Report::default_instance_;
  delete DB_C_Report_reflection_;
  delete DB_C_NpcActiveRankItem::default_instance_;
  delete DB_C_NpcActiveRankItem_reflection_;
  delete DB_C_NpcActiveRank::default_instance_;
  delete DB_C_NpcActiveRank_reflection_;
  delete DB_C_GuildRedEnvelope::default_instance_;
  delete DB_C_GuildRedEnvelope_reflection_;
  delete DB_C_RedEnvelopeInfo::default_instance_;
  delete DB_C_RedEnvelopeInfo_reflection_;
  delete DB_C_RedEnvelopeReport::default_instance_;
  delete DB_C_RedEnvelopeReport_reflection_;
  delete DB_C_RedEnvelopeCount::default_instance_;
  delete DB_C_RedEnvelopeCount_reflection_;
}

void protobuf_AddDesc_countryDB_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\017countryDB.proto\"\313\004\n\tDB_C_User\022\016\n\006userI"
    "D\030\001 \001(\003\022\016\n\006cityID\030\002 \001(\005\022\021\n\tcountryID\030\003 \001"
    "(\005\022\026\n\nArenaIndex\030\004 \001(\005:\002-1\022\033\n\017worldArena"
    "Index\030\005 \001(\005:\002-1\022\032\n\016lastArenaIndex\030\006 \001(\005:"
    "\002-1\022\037\n\023lastworldArenaIndex\030\007 \001(\005:\002-1\022\017\n\007"
    "guildID\030\010 \001(\005\022\020\n\010position\030\t \001(\005\022\032\n\017offic"
    "erposition\030\n \001(\005:\0010\022\014\n\004name\030\013 \001(\t\022\013\n\003pic"
    "\030\014 \001(\t\022\r\n\005level\030\r \001(\005\022\020\n\010vipLevel\030\016 \001(\005\022"
    "\017\n\007vipType\030\017 \001(\005\022\020\n\010gvepoint\030\020 \001(\005\022\014\n\004fl"
    "ag\030\021 \001(\005\022\032\n\016heroArenaIndex\030\022 \001(\005:\002-1\022\030\n\r"
    "wpcSearchTime\030\023 \001(\005:\0010\022\026\n\013leaguePoint\030\024 "
    "\001(\005:\0010\0220\n\020redEnvelopeCount\030\025 \001(\0132\026.DB_C_"
    "RedEnvelopeCount\022\036\n\023tLastLeaveGuildTime\030"
    "\026 \001(\005:\0010\022\022\n\nbossBtlDmg\030\027 \001(\003\022\032\n\017wpcLabSe"
    "archCnt\030\030 \001(\005:\0010\022\035\n\007oneyuan\030\031 \003(\0132\014.DB_O"
    "ne_Yuan\"<\n\026DB_One_Yuan_Reward_key\022\022\n\nred"
    "wardkey\030\001 \001(\005\022\016\n\006nIndex\030\002 \001(\005\"G\n\013DB_One_"
    "Yuan\022\014\n\004flag\030\001 \001(\005\022*\n\trewardKey\030\002 \003(\0132\027."
    "DB_One_Yuan_Reward_key\"R\n\033DB_One_Yuan_Pu"
    "rchase_Winner\022\014\n\004flag\030\001 \001(\005\022\016\n\006userid\030\002 "
    "\001(\003\022\025\n\006bFetch\030\003 \001(\010:\005false\"d\n\022DB_Region_"
    "One_Yuan\022#\n\030oneYuanPurchaseClearTime\030\001 \001"
    "(\005:\0010\022)\n\003win\030\002 \003(\0132\034.DB_One_Yuan_Purchas"
    "e_Winner\"\234\001\n\rDB_C_UserList\022\013\n\003key\030\001 \002(\005\022"
    "\016\n\006region\030\002 \002(\005\022\r\n\005index\030\003 \002(\005\022\031\n\016ltSave"
    "Revision\030\004 \001(\003:\0010\022\030\n\004user\030\005 \003(\0132\n.DB_C_U"
    "ser\022*\n\rregiononeyuan\030\006 \001(\0132\023.DB_Region_O"
    "ne_Yuan\")\n\010DB_C_NPC\022\r\n\005npcID\030\001 \001(\005\022\016\n\006mo"
    "rale\030\002 \001(\005\"I\n\020DB_C_CountryRank\022\023\n\010nextTi"
    "me\030\001 \001(\005:\0010\022\017\n\004rank\030\002 \001(\005:\0010\022\017\n\004boom\030\003 \001"
    "(\005:\0010\"\222\001\n\030DB_C_CountryLeagueBattle\022\025\n\nac"
    "tiveFlag\030\001 \001(\005:\0010\022\017\n\004rank\030\002 \001(\005:\0010\022\017\n\004bo"
    "om\030\003 \001(\005:\0010\022\023\n\010leagueID\030\004 \001(\005:\0010\022\020\n\005winI"
    "D\030\005 \001(\005:\0010\022\026\n\013activeState\030\006 \001(\005:\0010\"\246\002\n\025D"
    "B_C_CountryLeagueMsg\022\023\n\010leagueID\030\001 \001(\005:\001"
    "0\022\021\n\tcountryID\030\002 \003(\005\022.\n\016playerRankList\030\003"
    " \003(\0132\026.DB_C_LeaguePlayerUnit\0222\n\022playerRa"
    "nkLastList\030\004 \003(\0132\026.DB_C_LeaguePlayerUnit"
    "\022(\n\tguildList\030\005 \003(\0132\025.DB_C_LeagueGuildUn"
    "it\022,\n\rguildLastList\030\006 \003(\0132\025.DB_C_LeagueG"
    "uildUnit\022\025\n\rlastCountryID\030\007 \003(\005\022\022\n\nboomR"
    "ecord\030\010 \003(\005\"\235\001\n\025DB_C_LeaguePlayerUnit\022\013\n"
    "\003uid\030\001 \001(\t\022\014\n\004name\030\002 \001(\t\022\013\n\003pic\030\003 \001(\t\022\021\n"
    "\tcountryid\030\004 \001(\005\022\021\n\tguildName\030\005 \001(\t\022\022\n\nf"
    "ightPoint\030\006 \001(\005\022\r\n\005level\030\007 \001(\005\022\023\n\013league"
    "Point\030\010 \001(\005\"v\n\024DB_C_LeagueGuildUnit\022\017\n\007g"
    "uildID\030\001 \001(\005\022\021\n\tguildName\030\002 \001(\t\022\022\n\nleade"
    "rName\030\003 \001(\t\022\023\n\013LeaguePoint\030\004 \001(\005\022\021\n\tcoun"
    "tryID\030\005 \001(\005\"\375\001\n\016DB_C_BtlRecord\022\014\n\004type\030\001"
    " \001(\005\022\017\n\007btlTime\030\002 \001(\005\022\r\n\005atkID\030\003 \001(\t\022\017\n\007"
    "atkName\030\004 \001(\t\022\022\n\natkCountry\030\005 \001(\005\022\r\n\005def"
    "ID\030\006 \001(\t\022\017\n\007defName\030\007 \001(\t\022\022\n\ndefCountry\030"
    "\010 \001(\005\022\016\n\006cityID\030\t \001(\005\022\022\n\nwinningCnt\030\n \001("
    "\005\022\024\n\014bloodAtkCity\030\013 \001(\005\022\024\n\014bloodDefCity\030"
    "\014 \001(\005\022\024\n\014bloodWinCity\030\r \001(\005\"\230\001\n\021DB_C_Blo"
    "odBtlStep\022\014\n\004time\030\001 \001(\005\022\r\n\005atkID\030\002 \001(\t\022\017"
    "\n\007atkName\030\003 \001(\t\022\022\n\natkCountry\030\004 \001(\005\022\r\n\005d"
    "efID\030\005 \001(\t\022\017\n\007defName\030\006 \001(\t\022\022\n\ndefCountr"
    "y\030\007 \001(\005\022\r\n\005winID\030\010 \001(\t\"\302\002\n\rDB_C_BloodBtl"
    "\022\024\n\014launchUserID\030\001 \001(\003\022\022\n\nlaunchName\030\002 \001"
    "(\t\022\022\n\nlaunchTime\030\003 \001(\005\022\022\n\natkCountry\030\004 \001"
    "(\005\022\017\n\007atkCity\030\005 \001(\005\022\023\n\013atkTotalCnt\030\006 \001(\005"
    "\022\022\n\natkLeftCnt\030\007 \001(\005\022\022\n\ndefCountry\030\010 \001(\005"
    "\022\017\n\007defCity\030\t \001(\005\022\023\n\013defTotalCnt\030\n \001(\005\022\022"
    "\n\ndefLeftCnt\030\013 \001(\005\022#\n\007btlStep\030\014 \003(\0132\022.DB"
    "_C_BloodBtlStep\022\017\n\007winCity\030\r \001(\005\022\020\n\010over"
    "Time\030\016 \001(\005\022\017\n\004type\030\017 \001(\005:\0010\"e\n\024DB_C_Offi"
    "cerRightUse\022\017\n\007rightId\030\001 \001(\005\022\013\n\003uid\030\002 \001("
    "\003\022\017\n\007endtime\030\003 \001(\005\022\014\n\004name\030\004 \001(\t\022\020\n\010posi"
    "tion\030\005 \001(\005\"\340\001\n\tDB_C_City\022\016\n\006region\030\001 \002(\005"
    "\022\016\n\006cityID\030\002 \002(\005\022\021\n\tcountryID\030\003 \002(\005\022\026\n\003n"
    "pc\030\005 \003(\0132\t.DB_C_NPC\022\024\n\tnpcInitTM\030\006 \001(\005:\001"
    "0\022\031\n\016ltSaveRevision\030\007 \001(\003:\0010\022$\n\014lastBloo"
    "dBtl\030\010 \001(\0132\016.DB_C_BloodBtl\0221\n\022officerRig"
    "htUseLst\030\t \003(\0132\025.DB_C_OfficerRightUse\"]\n"
    "\021DB_C_CityBuffData\022\017\n\004flag\030\001 \001(\005:\0010\022%\n\013r"
    "andomBuffs\030\002 \003(\0132\020.DB_C_RandomBuff\022\020\n\005st"
    "ate\030\003 \001(\005:\0010\"I\n\017DB_C_RandomBuff\022\016\n\006cityI"
    "D\030\001 \001(\005\022\021\n\006buffID\030\002 \001(\005:\0010\022\023\n\010activeTm\030\003"
    " \001(\005:\0010\"4\n\021DB_Arena_Rank_NPC\022\r\n\005npcid\030\001 "
    "\001(\005\022\020\n\010npcindex\030\002 \001(\005\"%\n\022DB_Arena_Rank_L"
    "ist\022\017\n\007uidlist\030\001 \003(\003\"1\n\023DB_Arena_Score_U"
    "nit\022\013\n\003uid\030\001 \001(\003\022\r\n\005score\030\002 \001(\005\"O\n\023DB_Ar"
    "ena_Score_List\022\'\n\tscorelist\030\001 \003(\0132\024.DB_A"
    "rena_Score_Unit\022\017\n\007nActive\030\002 \001(\005\"\216\002\n\rDB_"
    "Arena_Rank\022(\n\014arenaRankNpc\030\001 \003(\0132\022.DB_Ar"
    "ena_Rank_NPC\022*\n\rarenaRankLast\030\002 \001(\0132\023.DB"
    "_Arena_Rank_List\022\030\n\rnRankTimeLast\030\003 \001(\r:"
    "\0010\022,\n\016arenaScoreList\030\004 \001(\0132\024.DB_Arena_Sc"
    "ore_List\022/\n\021arenaScoreListOld\030\005 \001(\0132\024.DB"
    "_Arena_Score_List\022.\n\020currentScoreList\030\006 "
    "\001(\0132\024.DB_Arena_Score_List\"&\n\027DB_WorldAre"
    "na_Rank_Unit\022\013\n\003uid\030\001 \001(\003\"\202\001\n\027DB_WorldAr"
    "ena_Rank_List\0224\n\022worldArenaRankList\030\001 \003("
    "\0132\030.DB_WorldArena_Rank_Unit\022\027\n\014rankTimeL"
    "ast\030\002 \001(\005:\0010\022\030\n\ractivityIndex\030\003 \001(\005:\0010\"\353"
    "\001\n\022DB_WorldArena_Rank\022-\n\021worldArenaRankN"
    "pc\030\001 \003(\0132\022.DB_Arena_Rank_NPC\0224\n\022worldAre"
    "naRankLast\030\002 \001(\0132\030.DB_WorldArena_Rank_Li"
    "st\0223\n\021worldArenaRankAll\030\003 \003(\0132\030.DB_World"
    "Arena_Rank_List\022\037\n\024currentActivityIndex\030"
    "\004 \001(\005:\0010\022\032\n\017rankRecordIndex\030\005 \001(\005:\0010\"%\n\026"
    "DB_HeroArena_Rank_Unit\022\013\n\003uid\030\001 \001(\003\"\177\n\026D"
    "B_HeroArena_Rank_List\0222\n\021heroArenaRankLi"
    "st\030\001 \003(\0132\027.DB_HeroArena_Rank_Unit\022\027\n\014ran"
    "kTimeLast\030\002 \001(\005:\0010\022\030\n\ractivityIndex\030\003 \001("
    "\005:\0010\"\226\001\n\021DB_HeroArena_Rank\022,\n\020heroArenaR"
    "ankNpc\030\001 \003(\0132\022.DB_Arena_Rank_NPC\0222\n\021hero"
    "ArenaRankLast\030\002 \001(\0132\027.DB_HeroArena_Rank_"
    "List\022\037\n\024currentActivityIndex\030\003 \001(\005:\0010\"4\n"
    "\014DB_C_Officer\022\027\n\017officerPosition\030\001 \001(\005\022\013"
    "\n\003uid\030\002 \001(\003\"\231\001\n\020DB_C_OfficerInfo\022$\n\raren"
    "aofficers\030\001 \003(\0132\r.DB_C_Officer\022$\n\rguildo"
    "fficers\030\002 \003(\0132\r.DB_C_Officer\022\036\n\023officerR"
    "ightUseFlag\030\003 \001(\005:\0010\022\031\n\016updateTimeLast\030\004"
    " \001(\005:\0010\":\n\024DB_C_PubGuildPKGroup\022\020\n\010guild"
    "ID1\030\001 \001(\005\022\020\n\010guildID2\030\002 \001(\005\"\304\001\n\024DB_C_Pub"
    "GuildBtlInfo\022\022\n\ncurSession\030\001 \001(\005\022\016\n\006btlD"
    "ay\030\002 \001(\005\022\016\n\006pkStep\030\003 \001(\005\022\021\n\tcurPKOVer\030\004 "
    "\003(\010\022\020\n\010pkLstIdx\030\005 \001(\005\022$\n\005pkLst\030\006 \003(\0132\025.D"
    "B_C_PubGuildPKGroup\022\030\n\020curSesionBtlOver\030"
    "\007 \001(\010\022\023\n\013curAddScore\030\010 \003(\010\"\230\001\n\027DB_C_Guil"
    "dBtl_Top_Guild\022\017\n\007guildID\030\001 \002(\005\022\021\n\tcount"
    "ryID\030\002 \002(\005\022\017\n\007guildLV\030\003 \001(\005\022\021\n\tguildName"
    "\030\004 \001(\t\022\017\n\007userCnt\030\005 \001(\005\022\020\n\010btlScore\030\006 \001("
    "\005\022\022\n\nleaderName\030\007 \001(\t\"T\n\024DB_C_GuildBtl_R"
    "ecord\022\017\n\007seasons\030\001 \001(\005\022+\n\tguildData\030\002 \003("
    "\0132\030.DB_C_GuildBtl_Top_Guild\"\203\007\n\014DB_C_Cou"
    "ntry\022\016\n\006region\030\001 \002(\005\022\021\n\tcountryID\030\002 \002(\005\022"
    "\022\n\007userCnt\030\003 \001(\005:\0010\022\031\n\016ltSaveRevision\030\004 "
    "\001(\003:\0010\022#\n\010lastRank\030\005 \001(\0132\021.DB_C_CountryR"
    "ank\022\"\n\tbtlRecord\030\006 \003(\0132\017.DB_C_BtlRecord\022"
    "\025\n\ratkTargetCity\030\007 \001(\005\022\025\n\rdefTargetCity\030"
    "\010 \001(\005\022!\n\tarenaRank\030\t \001(\0132\016.DB_Arena_Rank"
    "\022\031\n\016nActivityIndex\030\n \001(\r:\0010\022+\n\016worldAren"
    "aRank\030\013 \001(\0132\023.DB_WorldArena_Rank\022&\n\013offi"
    "cerInfo\030\014 \001(\0132\021.DB_C_OfficerInfo\022.\n\017pubG"
    "uildBtlInfo\030\r \001(\0132\025.DB_C_PubGuildBtlInfo"
    "\022)\n\ngBtlRecord\030\016 \003(\0132\025.DB_C_GuildBtl_Rec"
    "ord\022\030\n\rdataResetFlag\030\017 \001(\005:\0010\022+\n\020gveFirs"
    "tDownList\030\020 \003(\0132\021.DB_GVE_FirstDown\022\017\n\007gv"
    "eFlag\030\021 \001(\005\022)\n\rheroArenaRank\030\022 \001(\0132\022.DB_"
    "HeroArena_Rank\022*\n\rpubGvgBtlInfo\030\023 \001(\0132\023."
    "DB_C_PubGvgBtlInfo\022\036\n\007wpcrank\030\024 \001(\0132\r.DB"
    "_C_WpcRank\0223\n\020lastLeagueBattle\030\025 \001(\0132\031.D"
    "B_C_CountryLeagueBattle\022,\n\014leagueAllMsg\030"
    "\026 \003(\0132\026.DB_C_CountryLeagueMsg\022\036\n\007chatmsg"
    "\030\027 \001(\0132\r.DB_C_ChatMsg\022\024\n\014npcactivecnt\030\030 "
    "\003(\005\022*\n\rnpcactiverank\030\031 \001(\0132\023.DB_C_NpcAct"
    "iveRank\022(\n\014CityBuffData\030\032 \001(\0132\022.DB_C_Cit"
    "yBuffData\"7\n\rDB_C_GuildBld\022\n\n\002id\030\001 \001(\005\022\r"
    "\n\005level\030\002 \001(\005\022\013\n\003exp\030\003 \001(\005\"\364\001\n\rDB_C_Guil"
    "dLog\022\014\n\004time\030\001 \001(\005\022\016\n\006userID\030\002 \001(\t\022\020\n\010us"
    "erName\030\003 \001(\t\022\017\n\007logType\030\004 \001(\005\022\017\n\007userPos"
    "\030\005 \001(\005\022\r\n\005bldID\030\006 \001(\005\022\r\n\005bldLV\030\007 \001(\005\022\017\n\007"
    "payType\030\010 \001(\005\022\016\n\006gScore\030\t \001(\005\022\016\n\006itemID\030"
    "\n \001(\005\022\017\n\007itemCnt\030\013 \001(\005\022\020\n\010bldValue\030\014 \001(\005"
    "\022\016\n\006pkRank\030\r \001(\005\022\017\n\007pkRank1\030\016 \001(\005\"B\n\023DB_"
    "C_GuildBuyRecord\022\024\n\014dayBuyShopID\030\001 \001(\005\022\025"
    "\n\rdayBuyShopCnt\030\002 \001(\005\"5\n\021DB_C_GuildShopP"
    "mt\022\016\n\006shopID\030\001 \001(\005\022\020\n\010position\030\002 \001(\005\"\252\001\n"
    "\016DB_C_GuildShop\022\032\n\022mysticShopUpdateTM\030\001 "
    "\001(\005\022\030\n\020mysticShopSaleID\030\002 \003(\005\022\024\n\014buyReco"
    "rdDay\030\003 \001(\005\022\'\n\tbuyRecord\030\004 \003(\0132\024.DB_C_Gu"
    "ildBuyRecord\022#\n\007shopPmt\030\005 \003(\0132\022.DB_C_Gui"
    "ldShopPmt\"N\n\024DB_C_GuildBtlAddProp\022\016\n\006use"
    "rID\030\001 \001(\003\022\021\n\taddAtkPct\030\002 \001(\005\022\023\n\013addBlood"
    "Pct\030\003 \001(\005\"\346\001\n\031DB_C_GuildBtlReward_Turns\022"
    "\016\n\006result\030\001 \001(\005\022\017\n\007winWay0\030\002 \001(\005\022\017\n\007winW"
    "ay1\030\003 \001(\005\022\017\n\007winWay2\030\004 \001(\005\022\r\n\005score\030\005 \001("
    "\005\022\017\n\007guildID\030\006 \001(\005\022\017\n\007guildLV\030\007 \001(\005\022\021\n\tg"
    "uildName\030\010 \001(\t\022\024\n\014guildEnemyID\030\t \001(\005\022\024\n\014"
    "guildEnemyLV\030\n \001(\005\022\026\n\016guildEnemyName\030\013 \001"
    "(\t\"P\n\023DB_C_GuildBtlReward\022\016\n\006btlDay\030\001 \001("
    "\005\022)\n\005turns\030\002 \003(\0132\032.DB_C_GuildBtlReward_T"
    "urns\"\211\001\n\023DB_C_GuildBtlResult\022\016\n\006result\030\002"
    " \001(\005\022\017\n\007winWay0\030\003 \001(\005\022\017\n\007winWay1\030\004 \001(\005\022\017"
    "\n\007winWay2\030\005 \001(\005\022\r\n\005score\030\006 \001(\005\022\017\n\007pkGuil"
    "d\030\007 \001(\005\022\017\n\007addFlag\030\010 \001(\010\"4\n\021DB_C_GuildSt"
    "orage\022\016\n\006itemID\030\001 \001(\005\022\017\n\007itemCnt\030\002 \001(\005\"\255"
    "\002\n\rDB_C_GuildBtl\022\016\n\006btlDay\030\001 \001(\005\022\020\n\010user"
    "Way0\030\002 \003(\003\022\020\n\010userWay1\030\003 \003(\003\022\020\n\010userWay2"
    "\030\004 \003(\003\022\021\n\tsignupCnt\030\005 \001(\005\022&\n\007addProp\030\006 \003"
    "(\0132\025.DB_C_GuildBtlAddProp\022$\n\006result\030\007 \003("
    "\0132\024.DB_C_GuildBtlResult\022$\n\006reward\030\010 \001(\0132"
    "\024.DB_C_GuildBtlReward\022\022\n\ntotalScore\030\t \001("
    "\005\022\026\n\016lastBtlSession\030\n \001(\005\022\023\n\013lastBtlRank"
    "\030\013 \001(\005\022\016\n\006btlCnt\030\014 \001(\005\"\303\006\n\nDB_C_Guild\022\017\n"
    "\007guildID\030\001 \002(\005\022\021\n\tcountryID\030\002 \002(\005\022\017\n\007gui"
    "ldLV\030\003 \001(\005\022\021\n\tguildName\030\004 \001(\t\022\023\n\013guildSl"
    "ogan\030\005 \001(\t\022\025\n\rguildBulletin\030\006 \001(\t\022\020\n\010bld"
    "Value\030\007 \001(\005\022\024\n\014guildUesrCnt\030\010 \001(\005\022\020\n\010lea"
    "derID\030\t \001(\003\022\022\n\nleaderName\030\n \001(\t\022\020\n\010delat"
    "eTM\030\013 \001(\005\022\024\n\014leaderLastTM\030\014 \001(\005\022\023\n\013apply"
    "UserID\030\r \003(\003\022\035\n\005build\030\016 \003(\0132\016.DB_C_Guild"
    "Bld\022\033\n\003log\030\017 \003(\0132\016.DB_C_GuildLog\022\"\n\tguil"
    "dShop\030\020 \001(\0132\017.DB_C_GuildShop\022\025\n\rtotalBld"
    "Value\030\021 \001(\005\022\037\n\007coinLog\030\022 \003(\0132\016.DB_C_Guil"
    "dLog\022\023\n\013lastchgtime\030\023 \001(\005\022\026\n\016dayKickUser"
    "Cnt\030\024 \001(\005\022\023\n\013dayEnterCnt\030\025 \001(\005\022\037\n\007btlInf"
    "o\030\026 \001(\0132\016.DB_C_GuildBtl\022#\n\007storage\030\027 \003(\013"
    "2\022.DB_C_GuildStorage\022!\n\trewardLog\030\030 \003(\0132"
    "\016.DB_C_GuildLog\022\034\n\006gveMsg\030\031 \001(\0132\014.DB_GVE"
    "_City\022\035\n\006gvgMsg\030\032 \001(\0132\r.DB_C_GVG_Msg\022\020\n\010"
    "delateID\030\033 \001(\003\022\031\n\016leagueActiveID\030\034 \001(\005:\001"
    "0\022\026\n\013leaguePoint\030\035 \001(\005:\0010\022\022\n\nleagueList\030"
    "\036 \003(\003\022\027\n\017leagueLeaderUID\030\037 \001(\003\022\023\n\013chgLea"
    "derTM\030  \001(\005\022/\n\017redEnvelopeInfo\030! \001(\0132\026.D"
    "B_C_GuildRedEnvelope\"s\n\016DB_C_GuildList\022\013"
    "\n\003key\030\001 \002(\005\022\016\n\006region\030\002 \002(\005\022\r\n\005index\030\003 \002"
    "(\005\022\031\n\016ltSaveRevision\030\004 \001(\003:\0010\022\032\n\005guild\030\005"
    " \003(\0132\013.DB_C_Guild\"\354\001\n\024DB_C_GuildBtlGener"
    "al\022\022\n\nnGeneralID\030\001 \001(\005\022\023\n\013nGeneralLvl\030\002 "
    "\001(\005\022\030\n\020nGeneralTrainLvl\030\003 \001(\005\022\023\n\013nGenera"
    "lAtk\030\004 \001(\005\022\023\n\013nGeneralDef\030\005 \001(\005\022\022\n\nnGene"
    "ralHP\030\006 \001(\005\022\023\n\013nGeneralCrt\030\007 \001(\005\022\025\n\rnGen"
    "eralScore\030\010 \001(\005\022\'\n\rlistGeneralMH\030\t \003(\0132\020"
    ".DB_C_PVEFightMH\"/\n\017DB_C_PVEFightMH\022\r\n\005n"
    "MHID\030\001 \001(\005\022\r\n\005nMHLv\030\002 \001(\005\"\270\001\n\021DB_C_Guild"
    "BtlUser\022\016\n\006userID\030\001 \001(\t\022\014\n\004name\030\002 \001(\t\022\013\n"
    "\003pic\030\003 \001(\t\022\020\n\005level\030\006 \001(\005:\0010\022\026\n\013combatVa"
    "lue\030\007 \001(\005:\0010\022\020\n\010addHPPct\030\010 \001(\005\022\021\n\taddAtk"
    "Pct\030\t \001(\005\022\022\n\007winTime\030\n \001(\005:\0010\022\025\n\nmaxWinT"
    "ime\030\013 \001(\005:\0010\"5\n\025DB_C_GuildBtlPosition\022\r\n"
    "\005nPosX\030\001 \001(\005\022\r\n\005nPosY\030\002 \001(\005\"\327\001\n\026DB_C_Gui"
    "ldBtlFightUnit\022\013\n\003nID\030\001 \001(\005\022\021\n\tnArmyType"
    "\030\002 \001(\005\022\013\n\003nHP\030\003 \001(\005\022\016\n\006nGrade\030\004 \001(\005\022\022\n\nn"
    "ArmyGroup\030\005 \001(\005\022\022\n\nnRestframe\030\006 \001(\005\022#\n\003P"
    "os\030\007 \001(\0132\026.DB_C_GuildBtlPosition\022\016\n\006nMax"
    "HP\030\010 \001(\005\022\022\n\nnHeroGrade\030\t \001(\005\022\017\n\007nHeroLV\030"
    "\n \001(\005\"\357\003\n\030DB_C_GuildBtlArmyAtkProp\022\021\n\tnA"
    "rmyType\030\001 \001(\005\022\013\n\003nHP\030\002 \001(\005\022\017\n\007nDamage\030\003 "
    "\001(\005\022\023\n\013nDamageBase\030\004 \001(\005\022\022\n\nnDamagePec\030\005"
    " \001(\005\022\016\n\006nRange\030\006 \001(\005\022\014\n\004nCrt\030\007 \001(\005\022\016\n\006nS"
    "peed\030\010 \001(\005\022\022\n\nnTurnSpeed\030\t \001(\005\022\022\n\nnRestr"
    "aint\030\n \003(\005\022\022\n\nnCrtDamage\030\013 \001(\005\022\017\n\007nCrtDe"
    "f\030\014 \001(\005\022\022\n\nnDamageDef\030\r \001(\005\022\027\n\017nTotalDam"
    "agePct\030\016 \001(\005\022\026\n\016nBuffDamagePct\030\017 \001(\005\022\022\n\n"
    "nRangeBase\030\020 \001(\005\022\022\n\nnSpeedBase\030\021 \001(\005\022\025\n\r"
    "nRestraintdef\030\022 \003(\005\022\032\n\022nPropertyDamagePe"
    "c\030\023 \001(\005\022\035\n\025nPropertyDamageDefPec\030\024 \001(\005\022\022"
    "\n\nnDefAtkPec\030\025 \003(\005\022\024\n\014nDefCritRate\030\026 \003(\005"
    "\022\025\n\rnDefCritRange\030\027 \003(\005\"\234\001\n\027DB_C_GuildBt"
    "lAdmiralAdd\022\023\n\013nAddPctFoot\030\001 \003(\005\022\023\n\013nAdd"
    "PctTank\030\002 \003(\005\022\024\n\014nAddPctPlane\030\003 \003(\005\022\024\n\014n"
    "AddPctBuild\030\004 \003(\005\022+\n\014fightGeneral\030\005 \001(\0132"
    "\025.DB_C_GuildBtlGeneral\"\312\001\n\025Pve_GuildBtlH"
    "eroSkill\022\021\n\006heroId\030\001 \001(\005:\0010\022\020\n\005level\030\002 \001"
    "(\005:\0010\022\023\n\010skillID1\030\003 \001(\005:\0010\022\026\n\013skill1Grad"
    "e\030\004 \001(\005:\0010\022\030\n\rskill1Quality\030\005 \001(\005:\0010\022\023\n\010"
    "skillID2\030\006 \001(\005:\0010\022\026\n\013skill2Grade\030\007 \001(\005:\001"
    "0\022\030\n\rskill2Quality\030\010 \001(\005:\0010\"\372\001\n\031DB_C_Gui"
    "ldBtlSendDataUnit\0222\n\017pvecarmyatkprop\030\001 \003"
    "(\0132\031.DB_C_GuildBtlArmyAtkProp\022-\n\014pvefigh"
    "tunit\030\002 \003(\0132\027.DB_C_GuildBtlFightUnit\0221\n\017"
    "pvefightadmiral\030\003 \001(\0132\030.DB_C_GuildBtlAdm"
    "iralAdd\0221\n\021pvefightheroskill\030\004 \001(\0132\026.Pve"
    "_GuildBtlHeroSkill\022\024\n\014nReduceSpeed\030\005 \003(\005"
    "\"r\n\030DB_C_Guild_FightSendData\022#\n\007btlUser\030"
    "\001 \001(\0132\022.DB_C_GuildBtlUser\0221\n\rfightsendda"
    "ta\030\002 \003(\0132\032.DB_C_GuildBtlSendDataUnit\"o\n\023"
    "DB_C_GuildBtlUserPK\022\017\n\007userID1\030\001 \001(\t\022\017\n\007"
    "userID2\030\002 \001(\t\022\r\n\005winID\030\003 \001(\t\022\021\n\twinLeftH"
    "P\030\004 \001(\005\022\024\n\014bStreakLeave\030\005 \001(\010\"\354\001\n\023DB_C_G"
    "uidlBtlRetWay\022\016\n\006region\030\001 \001(\005\022\020\n\010guildID"
    "1\030\002 \001(\005\022\020\n\010guildID2\030\003 \001(\005\022\017\n\007session\030\004 \001"
    "(\005\022\013\n\003way\030\005 \001(\005\022\022\n\nwinGuildID\030\006 \001(\005\022$\n\010u"
    "serLst1\030\007 \003(\0132\022.DB_C_GuildBtlUser\022$\n\010use"
    "rLst2\030\010 \003(\0132\022.DB_C_GuildBtlUser\022#\n\005pkLst"
    "\030\t \003(\0132\024.DB_C_GuildBtlUserPK\"\270\002\n\013DB_GVE_"
    "City\022\026\n\003npc\030\001 \003(\0132\t.DB_C_NPC\022\017\n\004flag\030\002 \001"
    "(\005:\0010\022\036\n\010buffList\030\003 \003(\0132\014.DB_GVE_Buff\022\035\n"
    "\007nowList\030\005 \003(\0132\014.DB_GVE_List\022\036\n\010LastList"
    "\030\006 \003(\0132\014.DB_GVE_List\022\033\n\006nowMsg\030\007 \001(\0132\013.D"
    "B_GVE_Msg\022\034\n\007lastMsg\030\010 \001(\0132\013.DB_GVE_Msg\022"
    "\037\n\nHighestMsg\030\t \001(\0132\013.DB_GVE_Msg\022\022\n\nplay"
    "erList\030\n \003(\003\022\027\n\017lastRefreshTime\030\013 \001(\005\022\030\n"
    "\005spNpc\030\014 \003(\0132\t.DB_C_NPC\"\205\001\n\013DB_GVE_List\022"
    "\013\n\003uid\030\001 \001(\t\022\014\n\004name\030\002 \001(\t\022\020\n\010gvePoint\030\003"
    " \001(\005\022\r\n\005level\030\004 \001(\005\022\027\n\017officerPosition\030\005"
    " \001(\005\022\017\n\007vipType\030\006 \001(\005\022\020\n\010vipLevel\030\007 \001(\005\""
    "\244\001\n\nDB_GVE_Msg\022\023\n\007gveStep\030\001 \001(\005:\002-1\022\r\n\005p"
    "oint\030\002 \001(\005\022\014\n\004rank\030\003 \001(\005\022\021\n\tplayerCnt\030\004 "
    "\001(\005\022\025\n\roverGuildStep\030\005 \001(\005\022\026\n\016overGuildP"
    "oint\030\006 \001(\005\022\024\n\014overGuildMem\030\007 \001(\005\022\014\n\004flag"
    "\030\010 \001(\005\"2\n\013DB_GVE_Buff\022\016\n\006buffID\030\001 \001(\005\022\023\n"
    "\013buffEndTime\030\002 \001(\005\"\\\n\020DB_GVE_FirstDown\022\016"
    "\n\006stepID\030\001 \001(\005\022\017\n\007guildID\030\002 \001(\005\022\024\n\014guild"
    "Country\030\003 \001(\005\022\021\n\tguildName\030\004 \001(\t\"q\n\021DB_C"
    "_ResourceData\022\013\n\003key\030\001 \002(\005\022\016\n\006region\030\002 \002"
    "(\005\022$\n\014resourseList\030\003 \003(\0132\016.DB_C_Resource"
    "\022\031\n\016ltSaveRevision\030\004 \001(\003:\0010\"\231\001\n\rDB_C_Res"
    "ource\022\n\n\002id\030\001 \002(\005\022\014\n\004type\030\002 \001(\005\022\n\n\002lv\030\003 "
    "\001(\005\022\013\n\003uid\030\004 \001(\t\022\014\n\004name\030\005 \001(\t\022\017\n\007endTim"
    "e\030\006 \001(\005\022\021\n\tadmiralID\030\007 \003(\005\022\026\n\016admiralTra"
    "inLv\030\010 \003(\005\022\013\n\003pow\030\t \001(\005\"\376\001\n\014DB_C_GvgCity"
    "\022\013\n\003key\030\001 \002(\005\022\016\n\006region\030\002 \001(\005\022\016\n\006cityID\030"
    "\003 \002(\005\022\022\n\nactiveFlag\030\004 \001(\005\022\022\n\007guildID\030\005 \001"
    "(\005:\0010\022\031\n\016ltSaveRevision\030\006 \001(\003:\0010\022\'\n\rsign"
    "GuildList\030\007 \003(\0132\020.DB_C_GvgSignMsg\022\037\n\006gvg"
    "Btl\030\010 \003(\0132\017.DB_C_GvgBtlRet\022\014\n\004step\030\t \001(\005"
    "\022\023\n\013guildStreak\030\n \001(\005\022\021\n\tcityPoint\030\013 \001(\005"
    "\";\n\017DB_C_GvgSignMsg\022\017\n\007guildID\030\001 \001(\005\022\027\n\017"
    "guildContribute\030\002 \001(\005\"\227\001\n\016DB_C_GvgBtlRet"
    "\022\020\n\010guildID1\030\001 \001(\005\022\020\n\010guildID2\030\002 \001(\005\022\017\n\007"
    "session\030\003 \001(\005\022\026\n\nwinGuildID\030\004 \001(\005:\002-1\022\016\n"
    "\006cityID\030\005 \001(\005\022\r\n\005round\030\006 \001(\005\022\031\n\013bWinByFi"
    "ght\030\007 \001(\010:\004true\"T\n\024DB_C_GvgBtlPlayerMsg\022"
    "\016\n\006userID\030\001 \001(\003\022\017\n\007winTime\030\002 \001(\005\022\016\n\006left"
    "Hp\030\003 \001(\005\022\013\n\003way\030\004 \001(\005\"\311\001\n\022DB_C_GvgBtlRet"
    "Save\022\022\n\nwinGuildID\030\001 \001(\005\022\020\n\010guildID1\030\002 \001"
    "(\005\022\020\n\010guildID2\030\003 \001(\005\022\017\n\007session\030\004 \001(\005\022\016\n"
    "\006cityID\030\005 \001(\005\022\016\n\006region\030\006 \001(\005\022\"\n\006retWay\030"
    "\007 \003(\0132\022.DB_C_GvgBtlRetWay\022\022\n\nplayerCnt1\030"
    "\010 \001(\005\022\022\n\nplayerCnt2\030\t \001(\005\"\352\001\n\021DB_C_GvgBt"
    "lRetWay\022\013\n\003way\030\001 \001(\005\022\022\n\nwinGuildID\030\002 \001(\005"
    "\022\020\n\010guildID1\030\003 \001(\005\022\020\n\010guildID2\030\004 \001(\005\022\017\n\007"
    "session\030\005 \001(\005\022\016\n\006cityID\030\006 \001(\005\022$\n\010userLst"
    "1\030\007 \003(\0132\022.DB_C_GuildBtlUser\022$\n\010userLst2\030"
    "\010 \003(\0132\022.DB_C_GuildBtlUser\022#\n\005pkLst\030\t \003(\013"
    "2\024.DB_C_GuildBtlUserPK\"p\n\026DB_C_Gvg_Fight"
    "SendData\022#\n\007btlUser\030\001 \001(\0132\022.DB_C_GuildBt"
    "lUser\0221\n\rfightsenddata\030\002 \003(\0132\032.DB_C_Guil"
    "dBtlSendDataUnit\"\314\002\n\014DB_C_GVG_Msg\022\017\n\004fla"
    "g\030\001 \001(\005:\0010\022\020\n\010signCity\030\002 \003(\005\022\023\n\013controlC"
    "ity\030\003 \001(\005\022\022\n\ncontribute\030\004 \001(\005\022$\n\007userWay"
    "\030\005 \003(\0132\023.DB_C_GvgBtlCityMsg\022$\n\007addProp\030\006"
    " \003(\0132\023.DB_C_GvgBtlAddProp\022\027\n\010fightEnd\030\007 "
    "\001(\010:\005false\022\035\n\022lastContributeTime\030\010 \001(\005:\001"
    "0\022\020\n\005state\030\t \001(\005:\0010\022\031\n\021contributeRecorcd"
    "\030\n \001(\005\022-\n\014rewardRecord\030\013 \003(\0132\027.DB_C_GVG_"
    "Reward_Record\022\020\n\010playerID\030\014 \003(\003\"Z\n\022DB_C_"
    "GvgBtlCityMsg\022\016\n\006cityID\030\001 \001(\005\022\020\n\010userWay"
    "1\030\002 \003(\003\022\021\n\tsignupCnt\030\003 \001(\005\022\017\n\007session\030\004 "
    "\001(\005\"\307\001\n\022DB_C_GvgBtlAddProp\022\016\n\006userID\030\001 \001"
    "(\003\022\021\n\taddAtkPct\030\002 \001(\005\022\023\n\013addBloodPct\030\003 \001"
    "(\005\022\022\n\nmaxWinTime\030\004 \001(\005\022\017\n\007winTime\030\005 \001(\005\022"
    "\016\n\006leftHP\030\006 \001(\005\022\017\n\007session\030\007 \001(\005\022\014\n\004name"
    "\030\010 \001(\t\022\013\n\003pic\030\t \001(\t\022\030\n\tisOffLine\030\n \001(\010:\005"
    "false\"P\n\022DB_C_PubGvgBtlInfo\022\022\n\ncurSessio"
    "n\030\001 \001(\005\022\014\n\004flag\030\002 \001(\005\022\030\n\tfightOver\030\003 \001(\010"
    ":\005false\"2\n\026DB_C_GVG_Reward_Record\022\013\n\003pos"
    "\030\001 \001(\005\022\013\n\003cnt\030\002 \001(\005\"l\n\014DB_C_WpcRank\022\"\n\007n"
    "owRank\030\001 \003(\0132\021.DB_C_WpcRankUnit\022#\n\010lastR"
    "ank\030\002 \003(\0132\021.DB_C_WpcRankUnit\022\023\n\010activeID"
    "\030\003 \001(\005:\0010\"\227\001\n\020DB_C_WpcRankUnit\022\013\n\003uid\030\001 "
    "\001(\t\022\014\n\004name\030\002 \001(\t\022\013\n\003pic\030\003 \001(\t\022\021\n\tcountr"
    "yid\030\004 \001(\005\022\021\n\tguildName\030\005 \001(\t\022\022\n\nfightPoi"
    "nt\030\006 \001(\005\022\r\n\005level\030\007 \001(\005\022\022\n\nexploreCnt\030\010 "
    "\001(\005\"o\n\020DB_C_WarGameData\022\013\n\003key\030\001 \002(\005\022\016\n\006"
    "region\030\002 \002(\005\022#\n\010siteList\030\003 \003(\0132\021.DB_C_Wa"
    "rGameSite\022\031\n\016ltSaveRevision\030\004 \001(\003:\0010\"\217\002\n"
    "\020DB_C_WarGameSite\022\r\n\005sitID\030\001 \002(\005\022\r\n\005sitL"
    "v\030\002 \001(\005\022\021\n\tstartTime\030\003 \001(\005\022\017\n\007endTime\030\004 "
    "\001(\005\022\023\n\010delayNum\030\005 \001(\005:\0010\022\013\n\003uid\030\006 \001(\t\022\014\n"
    "\004name\030\007 \001(\t\022\024\n\tcountryID\030\010 \001(\005:\0010\022\020\n\005pow"
    "er\030\t \001(\005:\0010\022-\n\013admiralList\030\n \003(\0132\030.DB_C_"
    "WarGameAdmiralInfo\022\031\n\016TruceStartTime\030\013 \001"
    "(\005:\0010\022\027\n\014TruceEndTime\030\014 \001(\005:\0010\"`\n\027DB_C_W"
    "arGameAdmiralInfo\022\024\n\tadmiralID\030\001 \001(\005:\0010\022"
    "\024\n\tadmiralLv\030\002 \001(\005:\0010\022\031\n\016admiralTrainLv\030"
    "\003 \001(\005:\0010\"V\n\014DB_C_ChatMsg\022\r\n\005begin\030\001 \001(\005\022"
    "\013\n\003end\030\002 \001(\005\022\013\n\003num\030\003 \001(\005\022\035\n\003msg\030\004 \003(\0132\020"
    ".DB_C_ChatMsgOne\"X\n\017DB_C_ChatMsgOne\022\017\n\007c"
    "ountry\030\001 \001(\005\022\014\n\004type\030\002 \001(\005\022\013\n\003uid\030\003 \001(\003\022"
    "\014\n\004name\030\004 \001(\t\022\013\n\003msg\030\005 \001(\t\"\275\003\n\017DB_C_Boss"
    "BtlMsg\022\013\n\003key\030\001 \002(\005\022\021\n\006region\030\002 \001(\005:\0010\022\027"
    "\n\014nBossBtlFlag\030\003 \001(\005:\0010\022 \n\010bossInfo\030\004 \003("
    "\0132\016.DB_C_BossInfo\022\'\n\010rankList\030\005 \003(\0132\025.DB"
    "_C_BossBtlRankUnit\022%\n\006killer\030\006 \001(\0132\025.DB_"
    "C_BossBtlRankUnit\022\020\n\005state\030\007 \001(\005:\0010\022&\n\017f"
    "ightingBossMsg\030\010 \001(\0132\r.DB_C_BossMsg\022(\n\tl"
    "uckyList\030\t \003(\0132\025.DB_C_BossBtlRankUnit\022\031\n"
    "\016ltSaveRevision\030\n \001(\003:\0010\022+\n\014lastRankList"
    "\030\013 \003(\0132\025.DB_C_BossBtlRankUnit\022,\n\rhighPoi"
    "ntList\030\014 \003(\0132\025.DB_C_BossBtlRankUnit\022%\n\006u"
    "pList\030\r \003(\0132\025.DB_C_BossBtlRankUnit\"2\n\rDB"
    "_C_BossInfo\022\021\n\006bossID\030\001 \001(\005:\0010\022\016\n\006bossLv"
    "\030\002 \001(\005\"D\n\014DB_C_BossMsg\022\021\n\006bossID\030\001 \001(\005:\001"
    "0\022\016\n\002hp\030\002 \001(\003:\002-1\022\021\n\005maxHp\030\003 \001(\003:\002-1\"\347\001\n"
    "\024DB_C_BossBtlRankUnit\022\016\n\003uid\030\001 \001(\003:\0010\022\014\n"
    "\004name\030\002 \001(\t\022\013\n\003pic\030\003 \001(\t\022\016\n\003dmg\030\004 \001(\003:\0010"
    "\022\020\n\005count\030\005 \001(\005:\0010\022\020\n\010nameList\030\006 \003(\t\022\r\n\005"
    "words\030\007 \001(\t\022\035\n\007reports\030\010 \003(\0132\014.DB_C_Repo"
    "rt\022\r\n\005power\030\t \001(\005\022\r\n\005level\030\n \001(\005\022\021\n\tguil"
    "dname\030\013 \001(\t\022\021\n\tcountryID\030\014 \001(\005\"0\n\013DB_C_R"
    "eport\022\017\n\004type\030\001 \001(\005:\0010\022\020\n\005count\030\002 \001(\005:\0010"
    "\"9\n\026DB_C_NpcActiveRankItem\022\017\n\007country\030\001 "
    "\001(\005\022\016\n\006wincnt\030\002 \003(\005\"M\n\022DB_C_NpcActiveRan"
    "k\022\020\n\010ranktime\030\001 \001(\005\022%\n\004rank\030\002 \003(\0132\027.DB_C"
    "_NpcActiveRankItem\"\203\001\n\025DB_C_GuildRedEnve"
    "lope\022\020\n\005nFlag\030\001 \001(\005:\0010\022\021\n\006nTotal\030\002 \001(\005:\001"
    "0\022\025\n\nnCurrentID\030\003 \001(\005:\0010\022.\n\017listRedEnvel"
    "ope\030\004 \003(\0132\025.DB_C_RedEnvelopeInfo\"\226\002\n\024DB_"
    "C_RedEnvelopeInfo\022\016\n\003nID\030\001 \001(\005:\0010\022\020\n\005nTy"
    "pe\030\002 \001(\005:\0010\022\016\n\003uid\030\003 \001(\003:\0010\022\027\n\014nTotalCre"
    "dit\030\004 \001(\005:\0010\022\025\n\nnIssueTime\030\005 \001(\005:\0010\022\027\n\014n"
    "OverdueTime\030\006 \001(\005:\0010\022\023\n\010nGiveOut\030\007 \001(\005:\001"
    "0\022\024\n\tnTotalNum\030\010 \001(\005:\0010\022\023\n\010nAdjType\030\t \001("
    "\005:\0010\022\026\n\007bRefund\030\n \001(\010:\005false\022+\n\nlistRepo"
    "rt\030\013 \003(\0132\027.DB_C_RedEnvelopeReport\"O\n\026DB_"
    "C_RedEnvelopeReport\022\020\n\005nTime\030\001 \001(\005:\0010\022\017\n"
    "\004nUid\030\002 \001(\003:\0010\022\022\n\007nGetNum\030\003 \001(\005:\0010\"V\n\025DB"
    "_C_RedEnvelopeCount\022\020\n\005nFlag\030\001 \001(\005:\0010\022\024\n"
    "\tnTotalNum\030\002 \001(\003:\0010\022\025\n\nnSendTotal\030\003 \001(\005:"
    "\0010", 16202);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "countryDB.proto", &protobuf_RegisterTypes);
  DB_C_User::default_instance_ = new DB_C_User();
  DB_One_Yuan_Reward_key::default_instance_ = new DB_One_Yuan_Reward_key();
  DB_One_Yuan::default_instance_ = new DB_One_Yuan();
  DB_One_Yuan_Purchase_Winner::default_instance_ = new DB_One_Yuan_Purchase_Winner();
  DB_Region_One_Yuan::default_instance_ = new DB_Region_One_Yuan();
  DB_C_UserList::default_instance_ = new DB_C_UserList();
  DB_C_NPC::default_instance_ = new DB_C_NPC();
  DB_C_CountryRank::default_instance_ = new DB_C_CountryRank();
  DB_C_CountryLeagueBattle::default_instance_ = new DB_C_CountryLeagueBattle();
  DB_C_CountryLeagueMsg::default_instance_ = new DB_C_CountryLeagueMsg();
  DB_C_LeaguePlayerUnit::default_instance_ = new DB_C_LeaguePlayerUnit();
  DB_C_LeagueGuildUnit::default_instance_ = new DB_C_LeagueGuildUnit();
  DB_C_BtlRecord::default_instance_ = new DB_C_BtlRecord();
  DB_C_BloodBtlStep::default_instance_ = new DB_C_BloodBtlStep();
  DB_C_BloodBtl::default_instance_ = new DB_C_BloodBtl();
  DB_C_OfficerRightUse::default_instance_ = new DB_C_OfficerRightUse();
  DB_C_City::default_instance_ = new DB_C_City();
  DB_C_CityBuffData::default_instance_ = new DB_C_CityBuffData();
  DB_C_RandomBuff::default_instance_ = new DB_C_RandomBuff();
  DB_Arena_Rank_NPC::default_instance_ = new DB_Arena_Rank_NPC();
  DB_Arena_Rank_List::default_instance_ = new DB_Arena_Rank_List();
  DB_Arena_Score_Unit::default_instance_ = new DB_Arena_Score_Unit();
  DB_Arena_Score_List::default_instance_ = new DB_Arena_Score_List();
  DB_Arena_Rank::default_instance_ = new DB_Arena_Rank();
  DB_WorldArena_Rank_Unit::default_instance_ = new DB_WorldArena_Rank_Unit();
  DB_WorldArena_Rank_List::default_instance_ = new DB_WorldArena_Rank_List();
  DB_WorldArena_Rank::default_instance_ = new DB_WorldArena_Rank();
  DB_HeroArena_Rank_Unit::default_instance_ = new DB_HeroArena_Rank_Unit();
  DB_HeroArena_Rank_List::default_instance_ = new DB_HeroArena_Rank_List();
  DB_HeroArena_Rank::default_instance_ = new DB_HeroArena_Rank();
  DB_C_Officer::default_instance_ = new DB_C_Officer();
  DB_C_OfficerInfo::default_instance_ = new DB_C_OfficerInfo();
  DB_C_PubGuildPKGroup::default_instance_ = new DB_C_PubGuildPKGroup();
  DB_C_PubGuildBtlInfo::default_instance_ = new DB_C_PubGuildBtlInfo();
  DB_C_GuildBtl_Top_Guild::default_instance_ = new DB_C_GuildBtl_Top_Guild();
  DB_C_GuildBtl_Record::default_instance_ = new DB_C_GuildBtl_Record();
  DB_C_Country::default_instance_ = new DB_C_Country();
  DB_C_GuildBld::default_instance_ = new DB_C_GuildBld();
  DB_C_GuildLog::default_instance_ = new DB_C_GuildLog();
  DB_C_GuildBuyRecord::default_instance_ = new DB_C_GuildBuyRecord();
  DB_C_GuildShopPmt::default_instance_ = new DB_C_GuildShopPmt();
  DB_C_GuildShop::default_instance_ = new DB_C_GuildShop();
  DB_C_GuildBtlAddProp::default_instance_ = new DB_C_GuildBtlAddProp();
  DB_C_GuildBtlReward_Turns::default_instance_ = new DB_C_GuildBtlReward_Turns();
  DB_C_GuildBtlReward::default_instance_ = new DB_C_GuildBtlReward();
  DB_C_GuildBtlResult::default_instance_ = new DB_C_GuildBtlResult();
  DB_C_GuildStorage::default_instance_ = new DB_C_GuildStorage();
  DB_C_GuildBtl::default_instance_ = new DB_C_GuildBtl();
  DB_C_Guild::default_instance_ = new DB_C_Guild();
  DB_C_GuildList::default_instance_ = new DB_C_GuildList();
  DB_C_GuildBtlGeneral::default_instance_ = new DB_C_GuildBtlGeneral();
  DB_C_PVEFightMH::default_instance_ = new DB_C_PVEFightMH();
  DB_C_GuildBtlUser::default_instance_ = new DB_C_GuildBtlUser();
  DB_C_GuildBtlPosition::default_instance_ = new DB_C_GuildBtlPosition();
  DB_C_GuildBtlFightUnit::default_instance_ = new DB_C_GuildBtlFightUnit();
  DB_C_GuildBtlArmyAtkProp::default_instance_ = new DB_C_GuildBtlArmyAtkProp();
  DB_C_GuildBtlAdmiralAdd::default_instance_ = new DB_C_GuildBtlAdmiralAdd();
  Pve_GuildBtlHeroSkill::default_instance_ = new Pve_GuildBtlHeroSkill();
  DB_C_GuildBtlSendDataUnit::default_instance_ = new DB_C_GuildBtlSendDataUnit();
  DB_C_Guild_FightSendData::default_instance_ = new DB_C_Guild_FightSendData();
  DB_C_GuildBtlUserPK::default_instance_ = new DB_C_GuildBtlUserPK();
  DB_C_GuidlBtlRetWay::default_instance_ = new DB_C_GuidlBtlRetWay();
  DB_GVE_City::default_instance_ = new DB_GVE_City();
  DB_GVE_List::default_instance_ = new DB_GVE_List();
  DB_GVE_Msg::default_instance_ = new DB_GVE_Msg();
  DB_GVE_Buff::default_instance_ = new DB_GVE_Buff();
  DB_GVE_FirstDown::default_instance_ = new DB_GVE_FirstDown();
  DB_C_ResourceData::default_instance_ = new DB_C_ResourceData();
  DB_C_Resource::default_instance_ = new DB_C_Resource();
  DB_C_GvgCity::default_instance_ = new DB_C_GvgCity();
  DB_C_GvgSignMsg::default_instance_ = new DB_C_GvgSignMsg();
  DB_C_GvgBtlRet::default_instance_ = new DB_C_GvgBtlRet();
  DB_C_GvgBtlPlayerMsg::default_instance_ = new DB_C_GvgBtlPlayerMsg();
  DB_C_GvgBtlRetSave::default_instance_ = new DB_C_GvgBtlRetSave();
  DB_C_GvgBtlRetWay::default_instance_ = new DB_C_GvgBtlRetWay();
  DB_C_Gvg_FightSendData::default_instance_ = new DB_C_Gvg_FightSendData();
  DB_C_GVG_Msg::default_instance_ = new DB_C_GVG_Msg();
  DB_C_GvgBtlCityMsg::default_instance_ = new DB_C_GvgBtlCityMsg();
  DB_C_GvgBtlAddProp::default_instance_ = new DB_C_GvgBtlAddProp();
  DB_C_PubGvgBtlInfo::default_instance_ = new DB_C_PubGvgBtlInfo();
  DB_C_GVG_Reward_Record::default_instance_ = new DB_C_GVG_Reward_Record();
  DB_C_WpcRank::default_instance_ = new DB_C_WpcRank();
  DB_C_WpcRankUnit::default_instance_ = new DB_C_WpcRankUnit();
  DB_C_WarGameData::default_instance_ = new DB_C_WarGameData();
  DB_C_WarGameSite::default_instance_ = new DB_C_WarGameSite();
  DB_C_WarGameAdmiralInfo::default_instance_ = new DB_C_WarGameAdmiralInfo();
  DB_C_ChatMsg::default_instance_ = new DB_C_ChatMsg();
  DB_C_ChatMsgOne::default_instance_ = new DB_C_ChatMsgOne();
  DB_C_BossBtlMsg::default_instance_ = new DB_C_BossBtlMsg();
  DB_C_BossInfo::default_instance_ = new DB_C_BossInfo();
  DB_C_BossMsg::default_instance_ = new DB_C_BossMsg();
  DB_C_BossBtlRankUnit::default_instance_ = new DB_C_BossBtlRankUnit();
  DB_C_Report::default_instance_ = new DB_C_Report();
  DB_C_NpcActiveRankItem::default_instance_ = new DB_C_NpcActiveRankItem();
  DB_C_NpcActiveRank::default_instance_ = new DB_C_NpcActiveRank();
  DB_C_GuildRedEnvelope::default_instance_ = new DB_C_GuildRedEnvelope();
  DB_C_RedEnvelopeInfo::default_instance_ = new DB_C_RedEnvelopeInfo();
  DB_C_RedEnvelopeReport::default_instance_ = new DB_C_RedEnvelopeReport();
  DB_C_RedEnvelopeCount::default_instance_ = new DB_C_RedEnvelopeCount();
  DB_C_User::default_instance_->InitAsDefaultInstance();
  DB_One_Yuan_Reward_key::default_instance_->InitAsDefaultInstance();
  DB_One_Yuan::default_instance_->InitAsDefaultInstance();
  DB_One_Yuan_Purchase_Winner::default_instance_->InitAsDefaultInstance();
  DB_Region_One_Yuan::default_instance_->InitAsDefaultInstance();
  DB_C_UserList::default_instance_->InitAsDefaultInstance();
  DB_C_NPC::default_instance_->InitAsDefaultInstance();
  DB_C_CountryRank::default_instance_->InitAsDefaultInstance();
  DB_C_CountryLeagueBattle::default_instance_->InitAsDefaultInstance();
  DB_C_CountryLeagueMsg::default_instance_->InitAsDefaultInstance();
  DB_C_LeaguePlayerUnit::default_instance_->InitAsDefaultInstance();
  DB_C_LeagueGuildUnit::default_instance_->InitAsDefaultInstance();
  DB_C_BtlRecord::default_instance_->InitAsDefaultInstance();
  DB_C_BloodBtlStep::default_instance_->InitAsDefaultInstance();
  DB_C_BloodBtl::default_instance_->InitAsDefaultInstance();
  DB_C_OfficerRightUse::default_instance_->InitAsDefaultInstance();
  DB_C_City::default_instance_->InitAsDefaultInstance();
  DB_C_CityBuffData::default_instance_->InitAsDefaultInstance();
  DB_C_RandomBuff::default_instance_->InitAsDefaultInstance();
  DB_Arena_Rank_NPC::default_instance_->InitAsDefaultInstance();
  DB_Arena_Rank_List::default_instance_->InitAsDefaultInstance();
  DB_Arena_Score_Unit::default_instance_->InitAsDefaultInstance();
  DB_Arena_Score_List::default_instance_->InitAsDefaultInstance();
  DB_Arena_Rank::default_instance_->InitAsDefaultInstance();
  DB_WorldArena_Rank_Unit::default_instance_->InitAsDefaultInstance();
  DB_WorldArena_Rank_List::default_instance_->InitAsDefaultInstance();
  DB_WorldArena_Rank::default_instance_->InitAsDefaultInstance();
  DB_HeroArena_Rank_Unit::default_instance_->InitAsDefaultInstance();
  DB_HeroArena_Rank_List::default_instance_->InitAsDefaultInstance();
  DB_HeroArena_Rank::default_instance_->InitAsDefaultInstance();
  DB_C_Officer::default_instance_->InitAsDefaultInstance();
  DB_C_OfficerInfo::default_instance_->InitAsDefaultInstance();
  DB_C_PubGuildPKGroup::default_instance_->InitAsDefaultInstance();
  DB_C_PubGuildBtlInfo::default_instance_->InitAsDefaultInstance();
  DB_C_GuildBtl_Top_Guild::default_instance_->InitAsDefaultInstance();
  DB_C_GuildBtl_Record::default_instance_->InitAsDefaultInstance();
  DB_C_Country::default_instance_->InitAsDefaultInstance();
  DB_C_GuildBld::default_instance_->InitAsDefaultInstance();
  DB_C_GuildLog::default_instance_->InitAsDefaultInstance();
  DB_C_GuildBuyRecord::default_instance_->InitAsDefaultInstance();
  DB_C_GuildShopPmt::default_instance_->InitAsDefaultInstance();
  DB_C_GuildShop::default_instance_->InitAsDefaultInstance();
  DB_C_GuildBtlAddProp::default_instance_->InitAsDefaultInstance();
  DB_C_GuildBtlReward_Turns::default_instance_->InitAsDefaultInstance();
  DB_C_GuildBtlReward::default_instance_->InitAsDefaultInstance();
  DB_C_GuildBtlResult::default_instance_->InitAsDefaultInstance();
  DB_C_GuildStorage::default_instance_->InitAsDefaultInstance();
  DB_C_GuildBtl::default_instance_->InitAsDefaultInstance();
  DB_C_Guild::default_instance_->InitAsDefaultInstance();
  DB_C_GuildList::default_instance_->InitAsDefaultInstance();
  DB_C_GuildBtlGeneral::default_instance_->InitAsDefaultInstance();
  DB_C_PVEFightMH::default_instance_->InitAsDefaultInstance();
  DB_C_GuildBtlUser::default_instance_->InitAsDefaultInstance();
  DB_C_GuildBtlPosition::default_instance_->InitAsDefaultInstance();
  DB_C_GuildBtlFightUnit::default_instance_->InitAsDefaultInstance();
  DB_C_GuildBtlArmyAtkProp::default_instance_->InitAsDefaultInstance();
  DB_C_GuildBtlAdmiralAdd::default_instance_->InitAsDefaultInstance();
  Pve_GuildBtlHeroSkill::default_instance_->InitAsDefaultInstance();
  DB_C_GuildBtlSendDataUnit::default_instance_->InitAsDefaultInstance();
  DB_C_Guild_FightSendData::default_instance_->InitAsDefaultInstance();
  DB_C_GuildBtlUserPK::default_instance_->InitAsDefaultInstance();
  DB_C_GuidlBtlRetWay::default_instance_->InitAsDefaultInstance();
  DB_GVE_City::default_instance_->InitAsDefaultInstance();
  DB_GVE_List::default_instance_->InitAsDefaultInstance();
  DB_GVE_Msg::default_instance_->InitAsDefaultInstance();
  DB_GVE_Buff::default_instance_->InitAsDefaultInstance();
  DB_GVE_FirstDown::default_instance_->InitAsDefaultInstance();
  DB_C_ResourceData::default_instance_->InitAsDefaultInstance();
  DB_C_Resource::default_instance_->InitAsDefaultInstance();
  DB_C_GvgCity::default_instance_->InitAsDefaultInstance();
  DB_C_GvgSignMsg::default_instance_->InitAsDefaultInstance();
  DB_C_GvgBtlRet::default_instance_->InitAsDefaultInstance();
  DB_C_GvgBtlPlayerMsg::default_instance_->InitAsDefaultInstance();
  DB_C_GvgBtlRetSave::default_instance_->InitAsDefaultInstance();
  DB_C_GvgBtlRetWay::default_instance_->InitAsDefaultInstance();
  DB_C_Gvg_FightSendData::default_instance_->InitAsDefaultInstance();
  DB_C_GVG_Msg::default_instance_->InitAsDefaultInstance();
  DB_C_GvgBtlCityMsg::default_instance_->InitAsDefaultInstance();
  DB_C_GvgBtlAddProp::default_instance_->InitAsDefaultInstance();
  DB_C_PubGvgBtlInfo::default_instance_->InitAsDefaultInstance();
  DB_C_GVG_Reward_Record::default_instance_->InitAsDefaultInstance();
  DB_C_WpcRank::default_instance_->InitAsDefaultInstance();
  DB_C_WpcRankUnit::default_instance_->InitAsDefaultInstance();
  DB_C_WarGameData::default_instance_->InitAsDefaultInstance();
  DB_C_WarGameSite::default_instance_->InitAsDefaultInstance();
  DB_C_WarGameAdmiralInfo::default_instance_->InitAsDefaultInstance();
  DB_C_ChatMsg::default_instance_->InitAsDefaultInstance();
  DB_C_ChatMsgOne::default_instance_->InitAsDefaultInstance();
  DB_C_BossBtlMsg::default_instance_->InitAsDefaultInstance();
  DB_C_BossInfo::default_instance_->InitAsDefaultInstance();
  DB_C_BossMsg::default_instance_->InitAsDefaultInstance();
  DB_C_BossBtlRankUnit::default_instance_->InitAsDefaultInstance();
  DB_C_Report::default_instance_->InitAsDefaultInstance();
  DB_C_NpcActiveRankItem::default_instance_->InitAsDefaultInstance();
  DB_C_NpcActiveRank::default_instance_->InitAsDefaultInstance();
  DB_C_GuildRedEnvelope::default_instance_->InitAsDefaultInstance();
  DB_C_RedEnvelopeInfo::default_instance_->InitAsDefaultInstance();
  DB_C_RedEnvelopeReport::default_instance_->InitAsDefaultInstance();
  DB_C_RedEnvelopeCount::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_countryDB_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_countryDB_2eproto {
  StaticDescriptorInitializer_countryDB_2eproto() {
    protobuf_AddDesc_countryDB_2eproto();
  }
} static_descriptor_initializer_countryDB_2eproto_;


// ===================================================================

const ::std::string DB_C_User::_default_name_;
const ::std::string DB_C_User::_default_pic_;
#ifndef _MSC_VER
const int DB_C_User::kUserIDFieldNumber;
const int DB_C_User::kCityIDFieldNumber;
const int DB_C_User::kCountryIDFieldNumber;
const int DB_C_User::kArenaIndexFieldNumber;
const int DB_C_User::kWorldArenaIndexFieldNumber;
const int DB_C_User::kLastArenaIndexFieldNumber;
const int DB_C_User::kLastworldArenaIndexFieldNumber;
const int DB_C_User::kGuildIDFieldNumber;
const int DB_C_User::kPositionFieldNumber;
const int DB_C_User::kOfficerpositionFieldNumber;
const int DB_C_User::kNameFieldNumber;
const int DB_C_User::kPicFieldNumber;
const int DB_C_User::kLevelFieldNumber;
const int DB_C_User::kVipLevelFieldNumber;
const int DB_C_User::kVipTypeFieldNumber;
const int DB_C_User::kGvepointFieldNumber;
const int DB_C_User::kFlagFieldNumber;
const int DB_C_User::kHeroArenaIndexFieldNumber;
const int DB_C_User::kWpcSearchTimeFieldNumber;
const int DB_C_User::kLeaguePointFieldNumber;
const int DB_C_User::kRedEnvelopeCountFieldNumber;
const int DB_C_User::kTLastLeaveGuildTimeFieldNumber;
const int DB_C_User::kBossBtlDmgFieldNumber;
const int DB_C_User::kWpcLabSearchCntFieldNumber;
const int DB_C_User::kOneyuanFieldNumber;
#endif  // !_MSC_VER

DB_C_User::DB_C_User() {
  SharedCtor();
}

void DB_C_User::InitAsDefaultInstance() {
  redenvelopecount_ = const_cast< ::DB_C_RedEnvelopeCount*>(&::DB_C_RedEnvelopeCount::default_instance());
}

DB_C_User::DB_C_User(const DB_C_User& from) {
  SharedCtor();
  MergeFrom(from);
}

void DB_C_User::SharedCtor() {
  _cached_size_ = 0;
  userid_ = GOOGLE_LONGLONG(0);
  cityid_ = 0;
  countryid_ = 0;
  arenaindex_ = -1;
  worldarenaindex_ = -1;
  lastarenaindex_ = -1;
  lastworldarenaindex_ = -1;
  guildid_ = 0;
  position_ = 0;
  officerposition_ = 0;
  name_ = const_cast< ::std::string*>(&_default_name_);
  pic_ = const_cast< ::std::string*>(&_default_pic_);
  level_ = 0;
  viplevel_ = 0;
  viptype_ = 0;
  gvepoint_ = 0;
  flag_ = 0;
  heroarenaindex_ = -1;
  wpcsearchtime_ = 0;
  leaguepoint_ = 0;
  redenvelopecount_ = NULL;
  tlastleaveguildtime_ = 0;
  bossbtldmg_ = GOOGLE_LONGLONG(0);
  wpclabsearchcnt_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DB_C_User::~DB_C_User() {
  SharedDtor();
}

void DB_C_User::SharedDtor() {
  if (name_ != &_default_name_) {
    delete name_;
  }
  if (pic_ != &_default_pic_) {
    delete pic_;
  }
  if (this != default_instance_) {
    delete redenvelopecount_;
  }
}

const ::google::protobuf::Descriptor* DB_C_User::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DB_C_User_descriptor_;
}

const DB_C_User& DB_C_User::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_countryDB_2eproto();  return *default_instance_;
}

DB_C_User* DB_C_User::default_instance_ = NULL;

DB_C_User* DB_C_User::New() const {
  return new DB_C_User;
}

void DB_C_User::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    userid_ = GOOGLE_LONGLONG(0);
    cityid_ = 0;
    countryid_ = 0;
    arenaindex_ = -1;
    worldarenaindex_ = -1;
    lastarenaindex_ = -1;
    lastworldarenaindex_ = -1;
    guildid_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    position_ = 0;
    officerposition_ = 0;
    if (_has_bit(10)) {
      if (name_ != &_default_name_) {
        name_->clear();
      }
    }
    if (_has_bit(11)) {
      if (pic_ != &_default_pic_) {
        pic_->clear();
      }
    }
    level_ = 0;
    viplevel_ = 0;
    viptype_ = 0;
    gvepoint_ = 0;
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    flag_ = 0;
    heroarenaindex_ = -1;
    wpcsearchtime_ = 0;
    leaguepoint_ = 0;
    if (_has_bit(20)) {
      if (redenvelopecount_ != NULL) redenvelopecount_->::DB_C_RedEnvelopeCount::Clear();
    }
    tlastleaveguildtime_ = 0;
    bossbtldmg_ = GOOGLE_LONGLONG(0);
    wpclabsearchcnt_ = 0;
  }
  oneyuan_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DB_C_User::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 userID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt64(
              input, &userid_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_cityID;
        break;
      }
      
      // optional int32 cityID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_cityID:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &cityid_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_countryID;
        break;
      }
      
      // optional int32 countryID = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_countryID:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &countryid_));
        _set_bit(2);
        if (input->ExpectTag(32)) goto parse_ArenaIndex;
        break;
      }
      
      // optional int32 ArenaIndex = 4 [default = -1];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_ArenaIndex:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &arenaindex_));
        _set_bit(3);
        if (input->ExpectTag(40)) goto parse_worldArenaIndex;
        break;
      }
      
      // optional int32 worldArenaIndex = 5 [default = -1];
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_worldArenaIndex:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &worldarenaindex_));
        _set_bit(4);
        if (input->ExpectTag(48)) goto parse_lastArenaIndex;
        break;
      }
      
      // optional int32 lastArenaIndex = 6 [default = -1];
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_lastArenaIndex:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &lastarenaindex_));
        _set_bit(5);
        if (input->ExpectTag(56)) goto parse_lastworldArenaIndex;
        break;
      }
      
      // optional int32 lastworldArenaIndex = 7 [default = -1];
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_lastworldArenaIndex:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &lastworldarenaindex_));
        _set_bit(6);
        if (input->ExpectTag(64)) goto parse_guildID;
        break;
      }
      
      // optional int32 guildID = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_guildID:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &guildid_));
        _set_bit(7);
        if (input->ExpectTag(72)) goto parse_position;
        break;
      }
      
      // optional int32 position = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_position:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &position_));
        _set_bit(8);
        if (input->ExpectTag(80)) goto parse_officerposition;
        break;
      }
      
      // optional int32 officerposition = 10 [default = 0];
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_officerposition:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &officerposition_));
        _set_bit(9);
        if (input->ExpectTag(90)) goto parse_name;
        break;
      }
      
      // optional string name = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_name:
        DO_(::google::protobuf::internal::WireFormatLite::ReadString(
              input, this->mutable_name()));
        ::google::protobuf::internal::WireFormat::VerifyUTF8String(
          this->name().data(), this->name().length(),
          ::google::protobuf::internal::WireFormat::PARSE);
        if (input->ExpectTag(98)) goto parse_pic;
        break;
      }
      
      // optional string pic = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_pic:
        DO_(::google::protobuf::internal::WireFormatLite::ReadString(
              input, this->mutable_pic()));
        ::google::protobuf::internal::WireFormat::VerifyUTF8String(
          this->pic().data(), this->pic().length(),
          ::google::protobuf::internal::WireFormat::PARSE);
        if (input->ExpectTag(104)) goto parse_level;
        break;
      }
      
      // optional int32 level = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_level:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &level_));
        _set_bit(12);
        if (input->ExpectTag(112)) goto parse_vipLevel;
        break;
      }
      
      // optional int32 vipLevel = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_vipLevel:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &viplevel_));
        _set_bit(13);
        if (input->ExpectTag(120)) goto parse_vipType;
        break;
      }
      
      // optional int32 vipType = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_vipType:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &viptype_));
        _set_bit(14);
        if (input->ExpectTag(128)) goto parse_gvepoint;
        break;
      }
      
      // optional int32 gvepoint = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_gvepoint:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &gvepoint_));
        _set_bit(15);
        if (input->ExpectTag(136)) goto parse_flag;
        break;
      }
      
      // optional int32 flag = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_flag:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &flag_));
        _set_bit(16);
        if (input->ExpectTag(144)) goto parse_heroArenaIndex;
        break;
      }
      
      // optional int32 heroArenaIndex = 18 [default = -1];
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_heroArenaIndex:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &heroarenaindex_));
        _set_bit(17);
        if (input->ExpectTag(152)) goto parse_wpcSearchTime;
        break;
      }
      
      // optional int32 wpcSearchTime = 19 [default = 0];
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_wpcSearchTime:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &wpcsearchtime_));
        _set_bit(18);
        if (input->ExpectTag(160)) goto parse_leaguePoint;
        break;
      }
      
      // optional int32 leaguePoint = 20 [default = 0];
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_leaguePoint:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &leaguepoint_));
        _set_bit(19);
        if (input->ExpectTag(170)) goto parse_redEnvelopeCount;
        break;
      }
      
      // optional .DB_C_RedEnvelopeCount redEnvelopeCount = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_redEnvelopeCount:
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
             input, mutable_redenvelopecount()));
        if (input->ExpectTag(176)) goto parse_tLastLeaveGuildTime;
        break;
      }
      
      // optional int32 tLastLeaveGuildTime = 22 [default = 0];
      case 22: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_tLastLeaveGuildTime:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &tlastleaveguildtime_));
        _set_bit(21);
        if (input->ExpectTag(184)) goto parse_bossBtlDmg;
        break;
      }
      
      // optional int64 bossBtlDmg = 23;
      case 23: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_bossBtlDmg:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt64(
              input, &bossbtldmg_));
        _set_bit(22);
        if (input->ExpectTag(192)) goto parse_wpcLabSearchCnt;
        break;
      }
      
      // optional int32 wpcLabSearchCnt = 24 [default = 0];
      case 24: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_wpcLabSearchCnt:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &wpclabsearchcnt_));
        _set_bit(23);
        if (input->ExpectTag(202)) goto parse_oneyuan;
        break;
      }
      
      // repeated .DB_One_Yuan oneyuan = 25;
      case 25: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_oneyuan:
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, add_oneyuan()));
        if (input->ExpectTag(202)) goto parse_oneyuan;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DB_C_User::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    DB_C_User::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional int64 userID = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->userid(), output);
  }
  
  // optional int32 cityID = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->cityid(), output);
  }
  
  // optional int32 countryID = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->countryid(), output);
  }
  
  // optional int32 ArenaIndex = 4 [default = -1];
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->arenaindex(), output);
  }
  
  // optional int32 worldArenaIndex = 5 [default = -1];
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->worldarenaindex(), output);
  }
  
  // optional int32 lastArenaIndex = 6 [default = -1];
  if (_has_bit(5)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->lastarenaindex(), output);
  }
  
  // optional int32 lastworldArenaIndex = 7 [default = -1];
  if (_has_bit(6)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->lastworldarenaindex(), output);
  }
  
  // optional int32 guildID = 8;
  if (_has_bit(7)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->guildid(), output);
  }
  
  // optional int32 position = 9;
  if (_has_bit(8)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->position(), output);
  }
  
  // optional int32 officerposition = 10 [default = 0];
  if (_has_bit(9)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->officerposition(), output);
  }
  
  // optional string name = 11;
  if (_has_bit(10)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      11, this->name(), output);
  }
  
  // optional string pic = 12;
  if (_has_bit(11)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->pic().data(), this->pic().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      12, this->pic(), output);
  }
  
  // optional int32 level = 13;
  if (_has_bit(12)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->level(), output);
  }
  
  // optional int32 vipLevel = 14;
  if (_has_bit(13)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->viplevel(), output);
  }
  
  // optional int32 vipType = 15;
  if (_has_bit(14)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(15, this->viptype(), output);
  }
  
  // optional int32 gvepoint = 16;
  if (_has_bit(15)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(16, this->gvepoint(), output);
  }
  
  // optional int32 flag = 17;
  if (_has_bit(16)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(17, this->flag(), output);
  }
  
  // optional int32 heroArenaIndex = 18 [default = -1];
  if (_has_bit(17)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(18, this->heroarenaindex(), output);
  }
  
  // optional int32 wpcSearchTime = 19 [default = 0];
  if (_has_bit(18)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(19, this->wpcsearchtime(), output);
  }
  
  // optional int32 leaguePoint = 20 [default = 0];
  if (_has_bit(19)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(20, this->leaguepoint(), output);
  }
  
  // optional .DB_C_RedEnvelopeCount redEnvelopeCount = 21;
  if (_has_bit(20)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      21, this->redenvelopecount(), output);
  }
  
  // optional int32 tLastLeaveGuildTime = 22 [default = 0];
  if (_has_bit(21)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(22, this->tlastleaveguildtime(), output);
  }
  
  // optional int64 bossBtlDmg = 23;
  if (_has_bit(22)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(23, this->bossbtldmg(), output);
  }
  
  // optional int32 wpcLabSearchCnt = 24 [default = 0];
  if (_has_bit(23)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(24, this->wpclabsearchcnt(), output);
  }
  
  // repeated .DB_One_Yuan oneyuan = 25;
  for (int i = 0; i < this->oneyuan_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      25, this->oneyuan(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DB_C_User::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int64 userID = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->userid(), target);
  }
  
  // optional int32 cityID = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->cityid(), target);
  }
  
  // optional int32 countryID = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->countryid(), target);
  }
  
  // optional int32 ArenaIndex = 4 [default = -1];
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->arenaindex(), target);
  }
  
  // optional int32 worldArenaIndex = 5 [default = -1];
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->worldarenaindex(), target);
  }
  
  // optional int32 lastArenaIndex = 6 [default = -1];
  if (_has_bit(5)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->lastarenaindex(), target);
  }
  
  // optional int32 lastworldArenaIndex = 7 [default = -1];
  if (_has_bit(6)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->lastworldarenaindex(), target);
  }
  
  // optional int32 guildID = 8;
  if (_has_bit(7)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->guildid(), target);
  }
  
  // optional int32 position = 9;
  if (_has_bit(8)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->position(), target);
  }
  
  // optional int32 officerposition = 10 [default = 0];
  if (_has_bit(9)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->officerposition(), target);
  }
  
  // optional string name = 11;
  if (_has_bit(10)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        11, this->name(), target);
  }
  
  // optional string pic = 12;
  if (_has_bit(11)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->pic().data(), this->pic().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        12, this->pic(), target);
  }
  
  // optional int32 level = 13;
  if (_has_bit(12)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->level(), target);
  }
  
  // optional int32 vipLevel = 14;
  if (_has_bit(13)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(14, this->viplevel(), target);
  }
  
  // optional int32 vipType = 15;
  if (_has_bit(14)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(15, this->viptype(), target);
  }
  
  // optional int32 gvepoint = 16;
  if (_has_bit(15)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(16, this->gvepoint(), target);
  }
  
  // optional int32 flag = 17;
  if (_has_bit(16)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(17, this->flag(), target);
  }
  
  // optional int32 heroArenaIndex = 18 [default = -1];
  if (_has_bit(17)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(18, this->heroarenaindex(), target);
  }
  
  // optional int32 wpcSearchTime = 19 [default = 0];
  if (_has_bit(18)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(19, this->wpcsearchtime(), target);
  }
  
  // optional int32 leaguePoint = 20 [default = 0];
  if (_has_bit(19)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(20, this->leaguepoint(), target);
  }
  
  // optional .DB_C_RedEnvelopeCount redEnvelopeCount = 21;
  if (_has_bit(20)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        21, this->redenvelopecount(), target);
  }
  
  // optional int32 tLastLeaveGuildTime = 22 [default = 0];
  if (_has_bit(21)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(22, this->tlastleaveguildtime(), target);
  }
  
  // optional int64 bossBtlDmg = 23;
  if (_has_bit(22)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(23, this->bossbtldmg(), target);
  }
  
  // optional int32 wpcLabSearchCnt = 24 [default = 0];
  if (_has_bit(23)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(24, this->wpclabsearchcnt(), target);
  }
  
  // repeated .DB_One_Yuan oneyuan = 25;
  for (int i = 0; i < this->oneyuan_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        25, this->oneyuan(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DB_C_User::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 userID = 1;
    if (has_userid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->userid());
    }
    
    // optional int32 cityID = 2;
    if (has_cityid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cityid());
    }
    
    // optional int32 countryID = 3;
    if (has_countryid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->countryid());
    }
    
    // optional int32 ArenaIndex = 4 [default = -1];
    if (has_arenaindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->arenaindex());
    }
    
    // optional int32 worldArenaIndex = 5 [default = -1];
    if (has_worldarenaindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->worldarenaindex());
    }
    
    // optional int32 lastArenaIndex = 6 [default = -1];
    if (has_lastarenaindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->lastarenaindex());
    }
    
    // optional int32 lastworldArenaIndex = 7 [default = -1];
    if (has_lastworldarenaindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->lastworldarenaindex());
    }
    
    // optional int32 guildID = 8;
    if (has_guildid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->guildid());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 position = 9;
    if (has_position()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->position());
    }
    
    // optional int32 officerposition = 10 [default = 0];
    if (has_officerposition()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->officerposition());
    }
    
    // optional string name = 11;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }
    
    // optional string pic = 12;
    if (has_pic()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->pic());
    }
    
    // optional int32 level = 13;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->level());
    }
    
    // optional int32 vipLevel = 14;
    if (has_viplevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->viplevel());
    }
    
    // optional int32 vipType = 15;
    if (has_viptype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->viptype());
    }
    
    // optional int32 gvepoint = 16;
    if (has_gvepoint()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gvepoint());
    }
    
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional int32 flag = 17;
    if (has_flag()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->flag());
    }
    
    // optional int32 heroArenaIndex = 18 [default = -1];
    if (has_heroarenaindex()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->heroarenaindex());
    }
    
    // optional int32 wpcSearchTime = 19 [default = 0];
    if (has_wpcsearchtime()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->wpcsearchtime());
    }
    
    // optional int32 leaguePoint = 20 [default = 0];
    if (has_leaguepoint()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->leaguepoint());
    }
    
    // optional .DB_C_RedEnvelopeCount redEnvelopeCount = 21;
    if (has_redenvelopecount()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->redenvelopecount());
    }
    
    // optional int32 tLastLeaveGuildTime = 22 [default = 0];
    if (has_tlastleaveguildtime()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tlastleaveguildtime());
    }
    
    // optional int64 bossBtlDmg = 23;
    if (has_bossbtldmg()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->bossbtldmg());
    }
    
    // optional int32 wpcLabSearchCnt = 24 [default = 0];
    if (has_wpclabsearchcnt()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->wpclabsearchcnt());
    }
    
  }
  // repeated .DB_One_Yuan oneyuan = 25;
  total_size += 2 * this->oneyuan_size();
  for (int i = 0; i < this->oneyuan_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->oneyuan(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void DB_C_User::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DB_C_User* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DB_C_User*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DB_C_User::MergeFrom(const DB_C_User& from) {
  GOOGLE_CHECK_NE(&from, this);
  oneyuan_.MergeFrom(from.oneyuan_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_userid(from.userid());
    }
    if (from._has_bit(1)) {
      set_cityid(from.cityid());
    }
    if (from._has_bit(2)) {
      set_countryid(from.countryid());
    }
    if (from._has_bit(3)) {
      set_arenaindex(from.arenaindex());
    }
    if (from._has_bit(4)) {
      set_worldarenaindex(from.worldarenaindex());
    }
    if (from._has_bit(5)) {
      set_lastarenaindex(from.lastarenaindex());
    }
    if (from._has_bit(6)) {
      set_lastworldarenaindex(from.lastworldarenaindex());
    }
    if (from._has_bit(7)) {
      set_guildid(from.guildid());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from._has_bit(8)) {
      set_position(from.position());
    }
    if (from._has_bit(9)) {
      set_officerposition(from.officerposition());
    }
    if (from._has_bit(10)) {
      set_name(from.name());
    }
    if (from._has_bit(11)) {
      set_pic(from.pic());
    }
    if (from._has_bit(12)) {
      set_level(from.level());
    }
    if (from._has_bit(13)) {
      set_viplevel(from.viplevel());
    }
    if (from._has_bit(14)) {
      set_viptype(from.viptype());
    }
    if (from._has_bit(15)) {
      set_gvepoint(from.gvepoint());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from._has_bit(16)) {
      set_flag(from.flag());
    }
    if (from._has_bit(17)) {
      set_heroarenaindex(from.heroarenaindex());
    }
    if (from._has_bit(18)) {
      set_wpcsearchtime(from.wpcsearchtime());
    }
    if (from._has_bit(19)) {
      set_leaguepoint(from.leaguepoint());
    }
    if (from._has_bit(20)) {
      mutable_redenvelopecount()->::DB_C_RedEnvelopeCount::MergeFrom(from.redenvelopecount());
    }
    if (from._has_bit(21)) {
      set_tlastleaveguildtime(from.tlastleaveguildtime());
    }
    if (from._has_bit(22)) {
      set_bossbtldmg(from.bossbtldmg());
    }
    if (from._has_bit(23)) {
      set_wpclabsearchcnt(from.wpclabsearchcnt());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DB_C_User::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DB_C_User::CopyFrom(const DB_C_User& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DB_C_User::IsInitialized() const {
  
  return true;
}

void DB_C_User::Swap(DB_C_User* other) {
  if (other != this) {
    std::swap(userid_, other->userid_);
    std::swap(cityid_, other->cityid_);
    std::swap(countryid_, other->countryid_);
    std::swap(arenaindex_, other->arenaindex_);
    std::swap(worldarenaindex_, other->worldarenaindex_);
    std::swap(lastarenaindex_, other->lastarenaindex_);
    std::swap(lastworldarenaindex_, other->lastworldarenaindex_);
    std::swap(guildid_, other->guildid_);
    std::swap(position_, other->position_);
    std::swap(officerposition_, other->officerposition_);
    std::swap(name_, other->name_);
    std::swap(pic_, other->pic_);
    std::swap(level_, other->level_);
    std::swap(viplevel_, other->viplevel_);
    std::swap(viptype_, other->viptype_);
    std::swap(gvepoint_, other->gvepoint_);
    std::swap(flag_, other->flag_);
    std::swap(heroarenaindex_, other->heroarenaindex_);
    std::swap(wpcsearchtime_, other->wpcsearchtime_);
    std::swap(leaguepoint_, other->leaguepoint_);
    std::swap(redenvelopecount_, other->redenvelopecount_);
    std::swap(tlastleaveguildtime_, other->tlastleaveguildtime_);
    std::swap(bossbtldmg_, other->bossbtldmg_);
    std::swap(wpclabsearchcnt_, other->wpclabsearchcnt_);
    oneyuan_.Swap(&other->oneyuan_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DB_C_User::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DB_C_User_descriptor_;
  metadata.reflection = DB_C_User_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DB_One_Yuan_Reward_key::kRedwardkeyFieldNumber;
const int DB_One_Yuan_Reward_key::kNIndexFieldNumber;
#endif  // !_MSC_VER

DB_One_Yuan_Reward_key::DB_One_Yuan_Reward_key() {
  SharedCtor();
}

void DB_One_Yuan_Reward_key::InitAsDefaultInstance() {
}

DB_One_Yuan_Reward_key::DB_One_Yuan_Reward_key(const DB_One_Yuan_Reward_key& from) {
  SharedCtor();
  MergeFrom(from);
}

void DB_One_Yuan_Reward_key::SharedCtor() {
  _cached_size_ = 0;
  redwardkey_ = 0;
  nindex_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DB_One_Yuan_Reward_key::~DB_One_Yuan_Reward_key() {
  SharedDtor();
}

void DB_One_Yuan_Reward_key::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* DB_One_Yuan_Reward_key::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DB_One_Yuan_Reward_key_descriptor_;
}

const DB_One_Yuan_Reward_key& DB_One_Yuan_Reward_key::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_countryDB_2eproto();  return *default_instance_;
}

DB_One_Yuan_Reward_key* DB_One_Yuan_Reward_key::default_instance_ = NULL;

DB_One_Yuan_Reward_key* DB_One_Yuan_Reward_key::New() const {
  return new DB_One_Yuan_Reward_key;
}

void DB_One_Yuan_Reward_key::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    redwardkey_ = 0;
    nindex_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DB_One_Yuan_Reward_key::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 redwardkey = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &redwardkey_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_nIndex;
        break;
      }
      
      // optional int32 nIndex = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_nIndex:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &nindex_));
        _set_bit(1);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DB_One_Yuan_Reward_key::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    DB_One_Yuan_Reward_key::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional int32 redwardkey = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->redwardkey(), output);
  }
  
  // optional int32 nIndex = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->nindex(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DB_One_Yuan_Reward_key::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 redwardkey = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->redwardkey(), target);
  }
  
  // optional int32 nIndex = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->nindex(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DB_One_Yuan_Reward_key::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 redwardkey = 1;
    if (has_redwardkey()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->redwardkey());
    }
    
    // optional int32 nIndex = 2;
    if (has_nindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->nindex());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void DB_One_Yuan_Reward_key::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DB_One_Yuan_Reward_key* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DB_One_Yuan_Reward_key*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DB_One_Yuan_Reward_key::MergeFrom(const DB_One_Yuan_Reward_key& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_redwardkey(from.redwardkey());
    }
    if (from._has_bit(1)) {
      set_nindex(from.nindex());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DB_One_Yuan_Reward_key::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DB_One_Yuan_Reward_key::CopyFrom(const DB_One_Yuan_Reward_key& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DB_One_Yuan_Reward_key::IsInitialized() const {
  
  return true;
}

void DB_One_Yuan_Reward_key::Swap(DB_One_Yuan_Reward_key* other) {
  if (other != this) {
    std::swap(redwardkey_, other->redwardkey_);
    std::swap(nindex_, other->nindex_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DB_One_Yuan_Reward_key::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DB_One_Yuan_Reward_key_descriptor_;
  metadata.reflection = DB_One_Yuan_Reward_key_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DB_One_Yuan::kFlagFieldNumber;
const int DB_One_Yuan::kRewardKeyFieldNumber;
#endif  // !_MSC_VER

DB_One_Yuan::DB_One_Yuan() {
  SharedCtor();
}

void DB_One_Yuan::InitAsDefaultInstance() {
}

DB_One_Yuan::DB_One_Yuan(const DB_One_Yuan& from) {
  SharedCtor();
  MergeFrom(from);
}

void DB_One_Yuan::SharedCtor() {
  _cached_size_ = 0;
  flag_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DB_One_Yuan::~DB_One_Yuan() {
  SharedDtor();
}

void DB_One_Yuan::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* DB_One_Yuan::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DB_One_Yuan_descriptor_;
}

const DB_One_Yuan& DB_One_Yuan::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_countryDB_2eproto();  return *default_instance_;
}

DB_One_Yuan* DB_One_Yuan::default_instance_ = NULL;

DB_One_Yuan* DB_One_Yuan::New() const {
  return new DB_One_Yuan;
}

void DB_One_Yuan::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    flag_ = 0;
  }
  rewardkey_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DB_One_Yuan::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 flag = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &flag_));
        _set_bit(0);
        if (input->ExpectTag(18)) goto parse_rewardKey;
        break;
      }
      
      // repeated .DB_One_Yuan_Reward_key rewardKey = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_rewardKey:
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, add_rewardkey()));
        if (input->ExpectTag(18)) goto parse_rewardKey;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DB_One_Yuan::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    DB_One_Yuan::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional int32 flag = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->flag(), output);
  }
  
  // repeated .DB_One_Yuan_Reward_key rewardKey = 2;
  for (int i = 0; i < this->rewardkey_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      2, this->rewardkey(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DB_One_Yuan::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 flag = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->flag(), target);
  }
  
  // repeated .DB_One_Yuan_Reward_key rewardKey = 2;
  for (int i = 0; i < this->rewardkey_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->rewardkey(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DB_One_Yuan::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 flag = 1;
    if (has_flag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->flag());
    }
    
  }
  // repeated .DB_One_Yuan_Reward_key rewardKey = 2;
  total_size += 1 * this->rewardkey_size();
  for (int i = 0; i < this->rewardkey_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->rewardkey(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void DB_One_Yuan::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DB_One_Yuan* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DB_One_Yuan*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DB_One_Yuan::MergeFrom(const DB_One_Yuan& from) {
  GOOGLE_CHECK_NE(&from, this);
  rewardkey_.MergeFrom(from.rewardkey_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_flag(from.flag());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DB_One_Yuan::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DB_One_Yuan::CopyFrom(const DB_One_Yuan& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DB_One_Yuan::IsInitialized() const {
  
  return true;
}

void DB_One_Yuan::Swap(DB_One_Yuan* other) {
  if (other != this) {
    std::swap(flag_, other->flag_);
    rewardkey_.Swap(&other->rewardkey_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DB_One_Yuan::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DB_One_Yuan_descriptor_;
  metadata.reflection = DB_One_Yuan_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DB_One_Yuan_Purchase_Winner::kFlagFieldNumber;
const int DB_One_Yuan_Purchase_Winner::kUseridFieldNumber;
const int DB_One_Yuan_Purchase_Winner::kBFetchFieldNumber;
#endif  // !_MSC_VER

DB_One_Yuan_Purchase_Winner::DB_One_Yuan_Purchase_Winner() {
  SharedCtor();
}

void DB_One_Yuan_Purchase_Winner::InitAsDefaultInstance() {
}

DB_One_Yuan_Purchase_Winner::DB_One_Yuan_Purchase_Winner(const DB_One_Yuan_Purchase_Winner& from) {
  SharedCtor();
  MergeFrom(from);
}

void DB_One_Yuan_Purchase_Winner::SharedCtor() {
  _cached_size_ = 0;
  flag_ = 0;
  userid_ = GOOGLE_LONGLONG(0);
  bfetch_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DB_One_Yuan_Purchase_Winner::~DB_One_Yuan_Purchase_Winner() {
  SharedDtor();
}

void DB_One_Yuan_Purchase_Winner::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* DB_One_Yuan_Purchase_Winner::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DB_One_Yuan_Purchase_Winner_descriptor_;
}

const DB_One_Yuan_Purchase_Winner& DB_One_Yuan_Purchase_Winner::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_countryDB_2eproto();  return *default_instance_;
}

DB_One_Yuan_Purchase_Winner* DB_One_Yuan_Purchase_Winner::default_instance_ = NULL;

DB_One_Yuan_Purchase_Winner* DB_One_Yuan_Purchase_Winner::New() const {
  return new DB_One_Yuan_Purchase_Winner;
}

void DB_One_Yuan_Purchase_Winner::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    flag_ = 0;
    userid_ = GOOGLE_LONGLONG(0);
    bfetch_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DB_One_Yuan_Purchase_Winner::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 flag = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &flag_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_userid;
        break;
      }
      
      // optional int64 userid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_userid:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt64(
              input, &userid_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_bFetch;
        break;
      }
      
      // optional bool bFetch = 3 [default = false];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_bFetch:
        DO_(::google::protobuf::internal::WireFormatLite::ReadBool(
              input, &bfetch_));
        _set_bit(2);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DB_One_Yuan_Purchase_Winner::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    DB_One_Yuan_Purchase_Winner::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional int32 flag = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->flag(), output);
  }
  
  // optional int64 userid = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->userid(), output);
  }
  
  // optional bool bFetch = 3 [default = false];
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->bfetch(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DB_One_Yuan_Purchase_Winner::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 flag = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->flag(), target);
  }
  
  // optional int64 userid = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->userid(), target);
  }
  
  // optional bool bFetch = 3 [default = false];
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->bfetch(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DB_One_Yuan_Purchase_Winner::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 flag = 1;
    if (has_flag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->flag());
    }
    
    // optional int64 userid = 2;
    if (has_userid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->userid());
    }
    
    // optional bool bFetch = 3 [default = false];
    if (has_bfetch()) {
      total_size += 1 + 1;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void DB_One_Yuan_Purchase_Winner::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DB_One_Yuan_Purchase_Winner* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DB_One_Yuan_Purchase_Winner*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DB_One_Yuan_Purchase_Winner::MergeFrom(const DB_One_Yuan_Purchase_Winner& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_flag(from.flag());
    }
    if (from._has_bit(1)) {
      set_userid(from.userid());
    }
    if (from._has_bit(2)) {
      set_bfetch(from.bfetch());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DB_One_Yuan_Purchase_Winner::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DB_One_Yuan_Purchase_Winner::CopyFrom(const DB_One_Yuan_Purchase_Winner& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DB_One_Yuan_Purchase_Winner::IsInitialized() const {
  
  return true;
}

void DB_One_Yuan_Purchase_Winner::Swap(DB_One_Yuan_Purchase_Winner* other) {
  if (other != this) {
    std::swap(flag_, other->flag_);
    std::swap(userid_, other->userid_);
    std::swap(bfetch_, other->bfetch_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DB_One_Yuan_Purchase_Winner::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DB_One_Yuan_Purchase_Winner_descriptor_;
  metadata.reflection = DB_One_Yuan_Purchase_Winner_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DB_Region_One_Yuan::kOneYuanPurchaseClearTimeFieldNumber;
const int DB_Region_One_Yuan::kWinFieldNumber;
#endif  // !_MSC_VER

DB_Region_One_Yuan::DB_Region_One_Yuan() {
  SharedCtor();
}

void DB_Region_One_Yuan::InitAsDefaultInstance() {
}

DB_Region_One_Yuan::DB_Region_One_Yuan(const DB_Region_One_Yuan& from) {
  SharedCtor();
  MergeFrom(from);
}

void DB_Region_One_Yuan::SharedCtor() {
  _cached_size_ = 0;
  oneyuanpurchasecleartime_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DB_Region_One_Yuan::~DB_Region_One_Yuan() {
  SharedDtor();
}

void DB_Region_One_Yuan::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* DB_Region_One_Yuan::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DB_Region_One_Yuan_descriptor_;
}

const DB_Region_One_Yuan& DB_Region_One_Yuan::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_countryDB_2eproto();  return *default_instance_;
}

DB_Region_One_Yuan* DB_Region_One_Yuan::default_instance_ = NULL;

DB_Region_One_Yuan* DB_Region_One_Yuan::New() const {
  return new DB_Region_One_Yuan;
}

void DB_Region_One_Yuan::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    oneyuanpurchasecleartime_ = 0;
  }
  win_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DB_Region_One_Yuan::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 oneYuanPurchaseClearTime = 1 [default = 0];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &oneyuanpurchasecleartime_));
        _set_bit(0);
        if (input->ExpectTag(18)) goto parse_win;
        break;
      }
      
      // repeated .DB_One_Yuan_Purchase_Winner win = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_win:
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, add_win()));
        if (input->ExpectTag(18)) goto parse_win;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DB_Region_One_Yuan::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    DB_Region_One_Yuan::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional int32 oneYuanPurchaseClearTime = 1 [default = 0];
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->oneyuanpurchasecleartime(), output);
  }
  
  // repeated .DB_One_Yuan_Purchase_Winner win = 2;
  for (int i = 0; i < this->win_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      2, this->win(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DB_Region_One_Yuan::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 oneYuanPurchaseClearTime = 1 [default = 0];
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->oneyuanpurchasecleartime(), target);
  }
  
  // repeated .DB_One_Yuan_Purchase_Winner win = 2;
  for (int i = 0; i < this->win_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->win(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DB_Region_One_Yuan::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 oneYuanPurchaseClearTime = 1 [default = 0];
    if (has_oneyuanpurchasecleartime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->oneyuanpurchasecleartime());
    }
    
  }
  // repeated .DB_One_Yuan_Purchase_Winner win = 2;
  total_size += 1 * this->win_size();
  for (int i = 0; i < this->win_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->win(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void DB_Region_One_Yuan::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DB_Region_One_Yuan* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DB_Region_One_Yuan*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DB_Region_One_Yuan::MergeFrom(const DB_Region_One_Yuan& from) {
  GOOGLE_CHECK_NE(&from, this);
  win_.MergeFrom(from.win_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_oneyuanpurchasecleartime(from.oneyuanpurchasecleartime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DB_Region_One_Yuan::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DB_Region_One_Yuan::CopyFrom(const DB_Region_One_Yuan& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DB_Region_One_Yuan::IsInitialized() const {
  
  return true;
}

void DB_Region_One_Yuan::Swap(DB_Region_One_Yuan* other) {
  if (other != this) {
    std::swap(oneyuanpurchasecleartime_, other->oneyuanpurchasecleartime_);
    win_.Swap(&other->win_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DB_Region_One_Yuan::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DB_Region_One_Yuan_descriptor_;
  metadata.reflection = DB_Region_One_Yuan_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DB_C_UserList::kKeyFieldNumber;
const int DB_C_UserList::kRegionFieldNumber;
const int DB_C_UserList::kIndexFieldNumber;
const int DB_C_UserList::kLtSaveRevisionFieldNumber;
const int DB_C_UserList::kUserFieldNumber;
const int DB_C_UserList::kRegiononeyuanFieldNumber;
#endif  // !_MSC_VER

DB_C_UserList::DB_C_UserList() {
  SharedCtor();
}

void DB_C_UserList::InitAsDefaultInstance() {
  regiononeyuan_ = const_cast< ::DB_Region_One_Yuan*>(&::DB_Region_One_Yuan::default_instance());
}

DB_C_UserList::DB_C_UserList(const DB_C_UserList& from) {
  SharedCtor();
  MergeFrom(from);
}

void DB_C_UserList::SharedCtor() {
  _cached_size_ = 0;
  key_ = 0;
  region_ = 0;
  index_ = 0;
  ltsaverevision_ = GOOGLE_LONGLONG(0);
  regiononeyuan_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DB_C_UserList::~DB_C_UserList() {
  SharedDtor();
}

void DB_C_UserList::SharedDtor() {
  if (this != default_instance_) {
    delete regiononeyuan_;
  }
}

const ::google::protobuf::Descriptor* DB_C_UserList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DB_C_UserList_descriptor_;
}

const DB_C_UserList& DB_C_UserList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_countryDB_2eproto();  return *default_instance_;
}

DB_C_UserList* DB_C_UserList::default_instance_ = NULL;

DB_C_UserList* DB_C_UserList::New() const {
  return new DB_C_UserList;
}

void DB_C_UserList::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    key_ = 0;
    region_ = 0;
    index_ = 0;
    ltsaverevision_ = GOOGLE_LONGLONG(0);
    if (_has_bit(5)) {
      if (regiononeyuan_ != NULL) regiononeyuan_->::DB_Region_One_Yuan::Clear();
    }
  }
  user_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DB_C_UserList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 key = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &key_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_region;
        break;
      }
      
      // required int32 region = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_region:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &region_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_index;
        break;
      }
      
      // required int32 index = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_index:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &index_));
        _set_bit(2);
        if (input->ExpectTag(32)) goto parse_ltSaveRevision;
        break;
      }
      
      // optional int64 ltSaveRevision = 4 [default = 0];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_ltSaveRevision:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt64(
              input, &ltsaverevision_));
        _set_bit(3);
        if (input->ExpectTag(42)) goto parse_user;
        break;
      }
      
      // repeated .DB_C_User user = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_user:
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, add_user()));
        if (input->ExpectTag(42)) goto parse_user;
        if (input->ExpectTag(50)) goto parse_regiononeyuan;
        break;
      }
      
      // optional .DB_Region_One_Yuan regiononeyuan = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_regiononeyuan:
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
             input, mutable_regiononeyuan()));
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DB_C_UserList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    DB_C_UserList::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // required int32 key = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->key(), output);
  }
  
  // required int32 region = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->region(), output);
  }
  
  // required int32 index = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->index(), output);
  }
  
  // optional int64 ltSaveRevision = 4 [default = 0];
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->ltsaverevision(), output);
  }
  
  // repeated .DB_C_User user = 5;
  for (int i = 0; i < this->user_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      5, this->user(i), output);
  }
  
  // optional .DB_Region_One_Yuan regiononeyuan = 6;
  if (_has_bit(5)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      6, this->regiononeyuan(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DB_C_UserList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 key = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->key(), target);
  }
  
  // required int32 region = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->region(), target);
  }
  
  // required int32 index = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->index(), target);
  }
  
  // optional int64 ltSaveRevision = 4 [default = 0];
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->ltsaverevision(), target);
  }
  
  // repeated .DB_C_User user = 5;
  for (int i = 0; i < this->user_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->user(i), target);
  }
  
  // optional .DB_Region_One_Yuan regiononeyuan = 6;
  if (_has_bit(5)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->regiononeyuan(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DB_C_UserList::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 key = 1;
    if (has_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->key());
    }
    
    // required int32 region = 2;
    if (has_region()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->region());
    }
    
    // required int32 index = 3;
    if (has_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->index());
    }
    
    // optional int64 ltSaveRevision = 4 [default = 0];
    if (has_ltsaverevision()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->ltsaverevision());
    }
    
    // optional .DB_Region_One_Yuan regiononeyuan = 6;
    if (has_regiononeyuan()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->regiononeyuan());
    }
    
  }
  // repeated .DB_C_User user = 5;
  total_size += 1 * this->user_size();
  for (int i = 0; i < this->user_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->user(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void DB_C_UserList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DB_C_UserList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DB_C_UserList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DB_C_UserList::MergeFrom(const DB_C_UserList& from) {
  GOOGLE_CHECK_NE(&from, this);
  user_.MergeFrom(from.user_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_key(from.key());
    }
    if (from._has_bit(1)) {
      set_region(from.region());
    }
    if (from._has_bit(2)) {
      set_index(from.index());
    }
    if (from._has_bit(3)) {
      set_ltsaverevision(from.ltsaverevision());
    }
    if (from._has_bit(5)) {
      mutable_regiononeyuan()->::DB_Region_One_Yuan::MergeFrom(from.regiononeyuan());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DB_C_UserList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DB_C_UserList::CopyFrom(const DB_C_UserList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DB_C_UserList::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  
  return true;
}

void DB_C_UserList::Swap(DB_C_UserList* other) {
  if (other != this) {
    std::swap(key_, other->key_);
    std::swap(region_, other->region_);
    std::swap(index_, other->index_);
    std::swap(ltsaverevision_, other->ltsaverevision_);
    user_.Swap(&other->user_);
    std::swap(regiononeyuan_, other->regiononeyuan_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DB_C_UserList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DB_C_UserList_descriptor_;
  metadata.reflection = DB_C_UserList_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DB_C_NPC::kNpcIDFieldNumber;
const int DB_C_NPC::kMoraleFieldNumber;
#endif  // !_MSC_VER

DB_C_NPC::DB_C_NPC() {
  SharedCtor();
}

void DB_C_NPC::InitAsDefaultInstance() {
}

DB_C_NPC::DB_C_NPC(const DB_C_NPC& from) {
  SharedCtor();
  MergeFrom(from);
}

void DB_C_NPC::SharedCtor() {
  _cached_size_ = 0;
  npcid_ = 0;
  morale_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DB_C_NPC::~DB_C_NPC() {
  SharedDtor();
}

void DB_C_NPC::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* DB_C_NPC::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DB_C_NPC_descriptor_;
}

const DB_C_NPC& DB_C_NPC::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_countryDB_2eproto();  return *default_instance_;
}

DB_C_NPC* DB_C_NPC::default_instance_ = NULL;

DB_C_NPC* DB_C_NPC::New() const {
  return new DB_C_NPC;
}

void DB_C_NPC::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    npcid_ = 0;
    morale_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DB_C_NPC::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 npcID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &npcid_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_morale;
        break;
      }
      
      // optional int32 morale = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_morale:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &morale_));
        _set_bit(1);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DB_C_NPC::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    DB_C_NPC::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional int32 npcID = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->npcid(), output);
  }
  
  // optional int32 morale = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->morale(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DB_C_NPC::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 npcID = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->npcid(), target);
  }
  
  // optional int32 morale = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->morale(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DB_C_NPC::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 npcID = 1;
    if (has_npcid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->npcid());
    }
    
    // optional int32 morale = 2;
    if (has_morale()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->morale());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void DB_C_NPC::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DB_C_NPC* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DB_C_NPC*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DB_C_NPC::MergeFrom(const DB_C_NPC& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_npcid(from.npcid());
    }
    if (from._has_bit(1)) {
      set_morale(from.morale());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DB_C_NPC::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DB_C_NPC::CopyFrom(const DB_C_NPC& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DB_C_NPC::IsInitialized() const {
  
  return true;
}

void DB_C_NPC::Swap(DB_C_NPC* other) {
  if (other != this) {
    std::swap(npcid_, other->npcid_);
    std::swap(morale_, other->morale_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DB_C_NPC::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DB_C_NPC_descriptor_;
  metadata.reflection = DB_C_NPC_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DB_C_CountryRank::kNextTimeFieldNumber;
const int DB_C_CountryRank::kRankFieldNumber;
const int DB_C_CountryRank::kBoomFieldNumber;
#endif  // !_MSC_VER

DB_C_CountryRank::DB_C_CountryRank() {
  SharedCtor();
}

void DB_C_CountryRank::InitAsDefaultInstance() {
}

DB_C_CountryRank::DB_C_CountryRank(const DB_C_CountryRank& from) {
  SharedCtor();
  MergeFrom(from);
}

void DB_C_CountryRank::SharedCtor() {
  _cached_size_ = 0;
  nexttime_ = 0;
  rank_ = 0;
  boom_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DB_C_CountryRank::~DB_C_CountryRank() {
  SharedDtor();
}

void DB_C_CountryRank::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* DB_C_CountryRank::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DB_C_CountryRank_descriptor_;
}

const DB_C_CountryRank& DB_C_CountryRank::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_countryDB_2eproto();  return *default_instance_;
}

DB_C_CountryRank* DB_C_CountryRank::default_instance_ = NULL;

DB_C_CountryRank* DB_C_CountryRank::New() const {
  return new DB_C_CountryRank;
}

void DB_C_CountryRank::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    nexttime_ = 0;
    rank_ = 0;
    boom_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DB_C_CountryRank::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 nextTime = 1 [default = 0];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &nexttime_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_rank;
        break;
      }
      
      // optional int32 rank = 2 [default = 0];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_rank:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &rank_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_boom;
        break;
      }
      
      // optional int32 boom = 3 [default = 0];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_boom:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &boom_));
        _set_bit(2);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DB_C_CountryRank::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    DB_C_CountryRank::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional int32 nextTime = 1 [default = 0];
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->nexttime(), output);
  }
  
  // optional int32 rank = 2 [default = 0];
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->rank(), output);
  }
  
  // optional int32 boom = 3 [default = 0];
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->boom(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DB_C_CountryRank::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 nextTime = 1 [default = 0];
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->nexttime(), target);
  }
  
  // optional int32 rank = 2 [default = 0];
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->rank(), target);
  }
  
  // optional int32 boom = 3 [default = 0];
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->boom(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DB_C_CountryRank::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 nextTime = 1 [default = 0];
    if (has_nexttime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->nexttime());
    }
    
    // optional int32 rank = 2 [default = 0];
    if (has_rank()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rank());
    }
    
    // optional int32 boom = 3 [default = 0];
    if (has_boom()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->boom());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void DB_C_CountryRank::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DB_C_CountryRank* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DB_C_CountryRank*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DB_C_CountryRank::MergeFrom(const DB_C_CountryRank& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_nexttime(from.nexttime());
    }
    if (from._has_bit(1)) {
      set_rank(from.rank());
    }
    if (from._has_bit(2)) {
      set_boom(from.boom());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DB_C_CountryRank::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DB_C_CountryRank::CopyFrom(const DB_C_CountryRank& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DB_C_CountryRank::IsInitialized() const {
  
  return true;
}

void DB_C_CountryRank::Swap(DB_C_CountryRank* other) {
  if (other != this) {
    std::swap(nexttime_, other->nexttime_);
    std::swap(rank_, other->rank_);
    std::swap(boom_, other->boom_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DB_C_CountryRank::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DB_C_CountryRank_descriptor_;
  metadata.reflection = DB_C_CountryRank_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DB_C_CountryLeagueBattle::kActiveFlagFieldNumber;
const int DB_C_CountryLeagueBattle::kRankFieldNumber;
const int DB_C_CountryLeagueBattle::kBoomFieldNumber;
const int DB_C_CountryLeagueBattle::kLeagueIDFieldNumber;
const int DB_C_CountryLeagueBattle::kWinIDFieldNumber;
const int DB_C_CountryLeagueBattle::kActiveStateFieldNumber;
#endif  // !_MSC_VER

DB_C_CountryLeagueBattle::DB_C_CountryLeagueBattle() {
  SharedCtor();
}

void DB_C_CountryLeagueBattle::InitAsDefaultInstance() {
}

DB_C_CountryLeagueBattle::DB_C_CountryLeagueBattle(const DB_C_CountryLeagueBattle& from) {
  SharedCtor();
  MergeFrom(from);
}

void DB_C_CountryLeagueBattle::SharedCtor() {
  _cached_size_ = 0;
  activeflag_ = 0;
  rank_ = 0;
  boom_ = 0;
  leagueid_ = 0;
  winid_ = 0;
  activestate_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DB_C_CountryLeagueBattle::~DB_C_CountryLeagueBattle() {
  SharedDtor();
}

void DB_C_CountryLeagueBattle::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* DB_C_CountryLeagueBattle::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DB_C_CountryLeagueBattle_descriptor_;
}

const DB_C_CountryLeagueBattle& DB_C_CountryLeagueBattle::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_countryDB_2eproto();  return *default_instance_;
}

DB_C_CountryLeagueBattle* DB_C_CountryLeagueBattle::default_instance_ = NULL;

DB_C_CountryLeagueBattle* DB_C_CountryLeagueBattle::New() const {
  return new DB_C_CountryLeagueBattle;
}

void DB_C_CountryLeagueBattle::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    activeflag_ = 0;
    rank_ = 0;
    boom_ = 0;
    leagueid_ = 0;
    winid_ = 0;
    activestate_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DB_C_CountryLeagueBattle::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 activeFlag = 1 [default = 0];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &activeflag_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_rank;
        break;
      }
      
      // optional int32 rank = 2 [default = 0];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_rank:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &rank_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_boom;
        break;
      }
      
      // optional int32 boom = 3 [default = 0];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_boom:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &boom_));
        _set_bit(2);
        if (input->ExpectTag(32)) goto parse_leagueID;
        break;
      }
      
      // optional int32 leagueID = 4 [default = 0];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_leagueID:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &leagueid_));
        _set_bit(3);
        if (input->ExpectTag(40)) goto parse_winID;
        break;
      }
      
      // optional int32 winID = 5 [default = 0];
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_winID:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &winid_));
        _set_bit(4);
        if (input->ExpectTag(48)) goto parse_activeState;
        break;
      }
      
      // optional int32 activeState = 6 [default = 0];
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_activeState:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &activestate_));
        _set_bit(5);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DB_C_CountryLeagueBattle::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    DB_C_CountryLeagueBattle::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional int32 activeFlag = 1 [default = 0];
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->activeflag(), output);
  }
  
  // optional int32 rank = 2 [default = 0];
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->rank(), output);
  }
  
  // optional int32 boom = 3 [default = 0];
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->boom(), output);
  }
  
  // optional int32 leagueID = 4 [default = 0];
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->leagueid(), output);
  }
  
  // optional int32 winID = 5 [default = 0];
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->winid(), output);
  }
  
  // optional int32 activeState = 6 [default = 0];
  if (_has_bit(5)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->activestate(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DB_C_CountryLeagueBattle::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 activeFlag = 1 [default = 0];
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->activeflag(), target);
  }
  
  // optional int32 rank = 2 [default = 0];
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->rank(), target);
  }
  
  // optional int32 boom = 3 [default = 0];
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->boom(), target);
  }
  
  // optional int32 leagueID = 4 [default = 0];
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->leagueid(), target);
  }
  
  // optional int32 winID = 5 [default = 0];
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->winid(), target);
  }
  
  // optional int32 activeState = 6 [default = 0];
  if (_has_bit(5)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->activestate(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DB_C_CountryLeagueBattle::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 activeFlag = 1 [default = 0];
    if (has_activeflag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->activeflag());
    }
    
    // optional int32 rank = 2 [default = 0];
    if (has_rank()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rank());
    }
    
    // optional int32 boom = 3 [default = 0];
    if (has_boom()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->boom());
    }
    
    // optional int32 leagueID = 4 [default = 0];
    if (has_leagueid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->leagueid());
    }
    
    // optional int32 winID = 5 [default = 0];
    if (has_winid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->winid());
    }
    
    // optional int32 activeState = 6 [default = 0];
    if (has_activestate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->activestate());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void DB_C_CountryLeagueBattle::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DB_C_CountryLeagueBattle* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DB_C_CountryLeagueBattle*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DB_C_CountryLeagueBattle::MergeFrom(const DB_C_CountryLeagueBattle& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_activeflag(from.activeflag());
    }
    if (from._has_bit(1)) {
      set_rank(from.rank());
    }
    if (from._has_bit(2)) {
      set_boom(from.boom());
    }
    if (from._has_bit(3)) {
      set_leagueid(from.leagueid());
    }
    if (from._has_bit(4)) {
      set_winid(from.winid());
    }
    if (from._has_bit(5)) {
      set_activestate(from.activestate());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DB_C_CountryLeagueBattle::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DB_C_CountryLeagueBattle::CopyFrom(const DB_C_CountryLeagueBattle& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DB_C_CountryLeagueBattle::IsInitialized() const {
  
  return true;
}

void DB_C_CountryLeagueBattle::Swap(DB_C_CountryLeagueBattle* other) {
  if (other != this) {
    std::swap(activeflag_, other->activeflag_);
    std::swap(rank_, other->rank_);
    std::swap(boom_, other->boom_);
    std::swap(leagueid_, other->leagueid_);
    std::swap(winid_, other->winid_);
    std::swap(activestate_, other->activestate_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DB_C_CountryLeagueBattle::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DB_C_CountryLeagueBattle_descriptor_;
  metadata.reflection = DB_C_CountryLeagueBattle_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DB_C_CountryLeagueMsg::kLeagueIDFieldNumber;
const int DB_C_CountryLeagueMsg::kCountryIDFieldNumber;
const int DB_C_CountryLeagueMsg::kPlayerRankListFieldNumber;
const int DB_C_CountryLeagueMsg::kPlayerRankLastListFieldNumber;
const int DB_C_CountryLeagueMsg::kGuildListFieldNumber;
const int DB_C_CountryLeagueMsg::kGuildLastListFieldNumber;
const int DB_C_CountryLeagueMsg::kLastCountryIDFieldNumber;
const int DB_C_CountryLeagueMsg::kBoomRecordFieldNumber;
#endif  // !_MSC_VER

DB_C_CountryLeagueMsg::DB_C_CountryLeagueMsg() {
  SharedCtor();
}

void DB_C_CountryLeagueMsg::InitAsDefaultInstance() {
}

DB_C_CountryLeagueMsg::DB_C_CountryLeagueMsg(const DB_C_CountryLeagueMsg& from) {
  SharedCtor();
  MergeFrom(from);
}

void DB_C_CountryLeagueMsg::SharedCtor() {
  _cached_size_ = 0;
  leagueid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DB_C_CountryLeagueMsg::~DB_C_CountryLeagueMsg() {
  SharedDtor();
}

void DB_C_CountryLeagueMsg::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* DB_C_CountryLeagueMsg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DB_C_CountryLeagueMsg_descriptor_;
}

const DB_C_CountryLeagueMsg& DB_C_CountryLeagueMsg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_countryDB_2eproto();  return *default_instance_;
}

DB_C_CountryLeagueMsg* DB_C_CountryLeagueMsg::default_instance_ = NULL;

DB_C_CountryLeagueMsg* DB_C_CountryLeagueMsg::New() const {
  return new DB_C_CountryLeagueMsg;
}

void DB_C_CountryLeagueMsg::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    leagueid_ = 0;
  }
  countryid_.Clear();
  playerranklist_.Clear();
  playerranklastlist_.Clear();
  guildlist_.Clear();
  guildlastlist_.Clear();
  lastcountryid_.Clear();
  boomrecord_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DB_C_CountryLeagueMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 leagueID = 1 [default = 0];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &leagueid_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_countryID;
        break;
      }
      
      // repeated int32 countryID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_countryID:
        ::google::protobuf::int32 value;
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &value));
        add_countryid(value);
        if (input->ExpectTag(16)) goto parse_countryID;
        if (input->ExpectTag(26)) goto parse_playerRankList;
        break;
      }
      
      // repeated .DB_C_LeaguePlayerUnit playerRankList = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_playerRankList:
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, add_playerranklist()));
        if (input->ExpectTag(26)) goto parse_playerRankList;
        if (input->ExpectTag(34)) goto parse_playerRankLastList;
        break;
      }
      
      // repeated .DB_C_LeaguePlayerUnit playerRankLastList = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_playerRankLastList:
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, add_playerranklastlist()));
        if (input->ExpectTag(34)) goto parse_playerRankLastList;
        if (input->ExpectTag(42)) goto parse_guildList;
        break;
      }
      
      // repeated .DB_C_LeagueGuildUnit guildList = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_guildList:
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, add_guildlist()));
        if (input->ExpectTag(42)) goto parse_guildList;
        if (input->ExpectTag(50)) goto parse_guildLastList;
        break;
      }
      
      // repeated .DB_C_LeagueGuildUnit guildLastList = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_guildLastList:
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, add_guildlastlist()));
        if (input->ExpectTag(50)) goto parse_guildLastList;
        if (input->ExpectTag(56)) goto parse_lastCountryID;
        break;
      }
      
      // repeated int32 lastCountryID = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_lastCountryID:
        ::google::protobuf::int32 value;
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &value));
        add_lastcountryid(value);
        if (input->ExpectTag(56)) goto parse_lastCountryID;
        if (input->ExpectTag(64)) goto parse_boomRecord;
        break;
      }
      
      // repeated int32 boomRecord = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_boomRecord:
        ::google::protobuf::int32 value;
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &value));
        add_boomrecord(value);
        if (input->ExpectTag(64)) goto parse_boomRecord;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DB_C_CountryLeagueMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    DB_C_CountryLeagueMsg::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional int32 leagueID = 1 [default = 0];
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->leagueid(), output);
  }
  
  // repeated int32 countryID = 2;
  for (int i = 0; i < this->countryid_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      2, this->countryid(i), output);
  }
  
  // repeated .DB_C_LeaguePlayerUnit playerRankList = 3;
  for (int i = 0; i < this->playerranklist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      3, this->playerranklist(i), output);
  }
  
  // repeated .DB_C_LeaguePlayerUnit playerRankLastList = 4;
  for (int i = 0; i < this->playerranklastlist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      4, this->playerranklastlist(i), output);
  }
  
  // repeated .DB_C_LeagueGuildUnit guildList = 5;
  for (int i = 0; i < this->guildlist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      5, this->guildlist(i), output);
  }
  
  // repeated .DB_C_LeagueGuildUnit guildLastList = 6;
  for (int i = 0; i < this->guildlastlist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      6, this->guildlastlist(i), output);
  }
  
  // repeated int32 lastCountryID = 7;
  for (int i = 0; i < this->lastcountryid_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      7, this->lastcountryid(i), output);
  }
  
  // repeated int32 boomRecord = 8;
  for (int i = 0; i < this->boomrecord_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      8, this->boomrecord(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DB_C_CountryLeagueMsg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 leagueID = 1 [default = 0];
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->leagueid(), target);
  }
  
  // repeated int32 countryID = 2;
  for (int i = 0; i < this->countryid_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(2, this->countryid(i), target);
  }
  
  // repeated .DB_C_LeaguePlayerUnit playerRankList = 3;
  for (int i = 0; i < this->playerranklist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->playerranklist(i), target);
  }
  
  // repeated .DB_C_LeaguePlayerUnit playerRankLastList = 4;
  for (int i = 0; i < this->playerranklastlist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->playerranklastlist(i), target);
  }
  
  // repeated .DB_C_LeagueGuildUnit guildList = 5;
  for (int i = 0; i < this->guildlist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->guildlist(i), target);
  }
  
  // repeated .DB_C_LeagueGuildUnit guildLastList = 6;
  for (int i = 0; i < this->guildlastlist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->guildlastlist(i), target);
  }
  
  // repeated int32 lastCountryID = 7;
  for (int i = 0; i < this->lastcountryid_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(7, this->lastcountryid(i), target);
  }
  
  // repeated int32 boomRecord = 8;
  for (int i = 0; i < this->boomrecord_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(8, this->boomrecord(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DB_C_CountryLeagueMsg::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 leagueID = 1 [default = 0];
    if (has_leagueid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->leagueid());
    }
    
  }
  // repeated int32 countryID = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->countryid_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->countryid(i));
    }
    total_size += 1 * this->countryid_size() + data_size;
  }
  
  // repeated .DB_C_LeaguePlayerUnit playerRankList = 3;
  total_size += 1 * this->playerranklist_size();
  for (int i = 0; i < this->playerranklist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->playerranklist(i));
  }
  
  // repeated .DB_C_LeaguePlayerUnit playerRankLastList = 4;
  total_size += 1 * this->playerranklastlist_size();
  for (int i = 0; i < this->playerranklastlist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->playerranklastlist(i));
  }
  
  // repeated .DB_C_LeagueGuildUnit guildList = 5;
  total_size += 1 * this->guildlist_size();
  for (int i = 0; i < this->guildlist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->guildlist(i));
  }
  
  // repeated .DB_C_LeagueGuildUnit guildLastList = 6;
  total_size += 1 * this->guildlastlist_size();
  for (int i = 0; i < this->guildlastlist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->guildlastlist(i));
  }
  
  // repeated int32 lastCountryID = 7;
  {
    int data_size = 0;
    for (int i = 0; i < this->lastcountryid_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->lastcountryid(i));
    }
    total_size += 1 * this->lastcountryid_size() + data_size;
  }
  
  // repeated int32 boomRecord = 8;
  {
    int data_size = 0;
    for (int i = 0; i < this->boomrecord_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->boomrecord(i));
    }
    total_size += 1 * this->boomrecord_size() + data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void DB_C_CountryLeagueMsg::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DB_C_CountryLeagueMsg* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DB_C_CountryLeagueMsg*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DB_C_CountryLeagueMsg::MergeFrom(const DB_C_CountryLeagueMsg& from) {
  GOOGLE_CHECK_NE(&from, this);
  countryid_.MergeFrom(from.countryid_);
  playerranklist_.MergeFrom(from.playerranklist_);
  playerranklastlist_.MergeFrom(from.playerranklastlist_);
  guildlist_.MergeFrom(from.guildlist_);
  guildlastlist_.MergeFrom(from.guildlastlist_);
  lastcountryid_.MergeFrom(from.lastcountryid_);
  boomrecord_.MergeFrom(from.boomrecord_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_leagueid(from.leagueid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DB_C_CountryLeagueMsg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DB_C_CountryLeagueMsg::CopyFrom(const DB_C_CountryLeagueMsg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DB_C_CountryLeagueMsg::IsInitialized() const {
  
  return true;
}

void DB_C_CountryLeagueMsg::Swap(DB_C_CountryLeagueMsg* other) {
  if (other != this) {
    std::swap(leagueid_, other->leagueid_);
    countryid_.Swap(&other->countryid_);
    playerranklist_.Swap(&other->playerranklist_);
    playerranklastlist_.Swap(&other->playerranklastlist_);
    guildlist_.Swap(&other->guildlist_);
    guildlastlist_.Swap(&other->guildlastlist_);
    lastcountryid_.Swap(&other->lastcountryid_);
    boomrecord_.Swap(&other->boomrecord_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DB_C_CountryLeagueMsg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DB_C_CountryLeagueMsg_descriptor_;
  metadata.reflection = DB_C_CountryLeagueMsg_reflection_;
  return metadata;
}


// ===================================================================

const ::std::string DB_C_LeaguePlayerUnit::_default_uid_;
const ::std::string DB_C_LeaguePlayerUnit::_default_name_;
const ::std::string DB_C_LeaguePlayerUnit::_default_pic_;
const ::std::string DB_C_LeaguePlayerUnit::_default_guildname_;
#ifndef _MSC_VER
const int DB_C_LeaguePlayerUnit::kUidFieldNumber;
const int DB_C_LeaguePlayerUnit::kNameFieldNumber;
const int DB_C_LeaguePlayerUnit::kPicFieldNumber;
const int DB_C_LeaguePlayerUnit::kCountryidFieldNumber;
const int DB_C_LeaguePlayerUnit::kGuildNameFieldNumber;
const int DB_C_LeaguePlayerUnit::kFightPointFieldNumber;
const int DB_C_LeaguePlayerUnit::kLevelFieldNumber;
const int DB_C_LeaguePlayerUnit::kLeaguePointFieldNumber;
#endif  // !_MSC_VER

DB_C_LeaguePlayerUnit::DB_C_LeaguePlayerUnit() {
  SharedCtor();
}

void DB_C_LeaguePlayerUnit::InitAsDefaultInstance() {
}

DB_C_LeaguePlayerUnit::DB_C_LeaguePlayerUnit(const DB_C_LeaguePlayerUnit& from) {
  SharedCtor();
  MergeFrom(from);
}

void DB_C_LeaguePlayerUnit::SharedCtor() {
  _cached_size_ = 0;
  uid_ = const_cast< ::std::string*>(&_default_uid_);
  name_ = const_cast< ::std::string*>(&_default_name_);
  pic_ = const_cast< ::std::string*>(&_default_pic_);
  countryid_ = 0;
  guildname_ = const_cast< ::std::string*>(&_default_guildname_);
  fightpoint_ = 0;
  level_ = 0;
  leaguepoint_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DB_C_LeaguePlayerUnit::~DB_C_LeaguePlayerUnit() {
  SharedDtor();
}

void DB_C_LeaguePlayerUnit::SharedDtor() {
  if (uid_ != &_default_uid_) {
    delete uid_;
  }
  if (name_ != &_default_name_) {
    delete name_;
  }
  if (pic_ != &_default_pic_) {
    delete pic_;
  }
  if (guildname_ != &_default_guildname_) {
    delete guildname_;
  }
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* DB_C_LeaguePlayerUnit::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DB_C_LeaguePlayerUnit_descriptor_;
}

const DB_C_LeaguePlayerUnit& DB_C_LeaguePlayerUnit::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_countryDB_2eproto();  return *default_instance_;
}

DB_C_LeaguePlayerUnit* DB_C_LeaguePlayerUnit::default_instance_ = NULL;

DB_C_LeaguePlayerUnit* DB_C_LeaguePlayerUnit::New() const {
  return new DB_C_LeaguePlayerUnit;
}

void DB_C_LeaguePlayerUnit::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (uid_ != &_default_uid_) {
        uid_->clear();
      }
    }
    if (_has_bit(1)) {
      if (name_ != &_default_name_) {
        name_->clear();
      }
    }
    if (_has_bit(2)) {
      if (pic_ != &_default_pic_) {
        pic_->clear();
      }
    }
    countryid_ = 0;
    if (_has_bit(4)) {
      if (guildname_ != &_default_guildname_) {
        guildname_->clear();
      }
    }
    fightpoint_ = 0;
    level_ = 0;
    leaguepoint_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DB_C_LeaguePlayerUnit::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string uid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadString(
              input, this->mutable_uid()));
        ::google::protobuf::internal::WireFormat::VerifyUTF8String(
          this->uid().data(), this->uid().length(),
          ::google::protobuf::internal::WireFormat::PARSE);
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }
      
      // optional string name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_name:
        DO_(::google::protobuf::internal::WireFormatLite::ReadString(
              input, this->mutable_name()));
        ::google::protobuf::internal::WireFormat::VerifyUTF8String(
          this->name().data(), this->name().length(),
          ::google::protobuf::internal::WireFormat::PARSE);
        if (input->ExpectTag(26)) goto parse_pic;
        break;
      }
      
      // optional string pic = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_pic:
        DO_(::google::protobuf::internal::WireFormatLite::ReadString(
              input, this->mutable_pic()));
        ::google::protobuf::internal::WireFormat::VerifyUTF8String(
          this->pic().data(), this->pic().length(),
          ::google::protobuf::internal::WireFormat::PARSE);
        if (input->ExpectTag(32)) goto parse_countryid;
        break;
      }
      
      // optional int32 countryid = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_countryid:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &countryid_));
        _set_bit(3);
        if (input->ExpectTag(42)) goto parse_guildName;
        break;
      }
      
      // optional string guildName = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_guildName:
        DO_(::google::protobuf::internal::WireFormatLite::ReadString(
              input, this->mutable_guildname()));
        ::google::protobuf::internal::WireFormat::VerifyUTF8String(
          this->guildname().data(), this->guildname().length(),
          ::google::protobuf::internal::WireFormat::PARSE);
        if (input->ExpectTag(48)) goto parse_fightPoint;
        break;
      }
      
      // optional int32 fightPoint = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_fightPoint:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &fightpoint_));
        _set_bit(5);
        if (input->ExpectTag(56)) goto parse_level;
        break;
      }
      
      // optional int32 level = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_level:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &level_));
        _set_bit(6);
        if (input->ExpectTag(64)) goto parse_leaguePoint;
        break;
      }
      
      // optional int32 leaguePoint = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_leaguePoint:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &leaguepoint_));
        _set_bit(7);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DB_C_LeaguePlayerUnit::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    DB_C_LeaguePlayerUnit::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional string uid = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->uid().data(), this->uid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->uid(), output);
  }
  
  // optional string name = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->name(), output);
  }
  
  // optional string pic = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->pic().data(), this->pic().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->pic(), output);
  }
  
  // optional int32 countryid = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->countryid(), output);
  }
  
  // optional string guildName = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->guildname().data(), this->guildname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->guildname(), output);
  }
  
  // optional int32 fightPoint = 6;
  if (_has_bit(5)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->fightpoint(), output);
  }
  
  // optional int32 level = 7;
  if (_has_bit(6)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->level(), output);
  }
  
  // optional int32 leaguePoint = 8;
  if (_has_bit(7)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->leaguepoint(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DB_C_LeaguePlayerUnit::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string uid = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->uid().data(), this->uid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->uid(), target);
  }
  
  // optional string name = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }
  
  // optional string pic = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->pic().data(), this->pic().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->pic(), target);
  }
  
  // optional int32 countryid = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->countryid(), target);
  }
  
  // optional string guildName = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->guildname().data(), this->guildname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->guildname(), target);
  }
  
  // optional int32 fightPoint = 6;
  if (_has_bit(5)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->fightpoint(), target);
  }
  
  // optional int32 level = 7;
  if (_has_bit(6)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->level(), target);
  }
  
  // optional int32 leaguePoint = 8;
  if (_has_bit(7)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->leaguepoint(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DB_C_LeaguePlayerUnit::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string uid = 1;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->uid());
    }
    
    // optional string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }
    
    // optional string pic = 3;
    if (has_pic()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->pic());
    }
    
    // optional int32 countryid = 4;
    if (has_countryid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->countryid());
    }
    
    // optional string guildName = 5;
    if (has_guildname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->guildname());
    }
    
    // optional int32 fightPoint = 6;
    if (has_fightpoint()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->fightpoint());
    }
    
    // optional int32 level = 7;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->level());
    }
    
    // optional int32 leaguePoint = 8;
    if (has_leaguepoint()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->leaguepoint());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void DB_C_LeaguePlayerUnit::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DB_C_LeaguePlayerUnit* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DB_C_LeaguePlayerUnit*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DB_C_LeaguePlayerUnit::MergeFrom(const DB_C_LeaguePlayerUnit& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_uid(from.uid());
    }
    if (from._has_bit(1)) {
      set_name(from.name());
    }
    if (from._has_bit(2)) {
      set_pic(from.pic());
    }
    if (from._has_bit(3)) {
      set_countryid(from.countryid());
    }
    if (from._has_bit(4)) {
      set_guildname(from.guildname());
    }
    if (from._has_bit(5)) {
      set_fightpoint(from.fightpoint());
    }
    if (from._has_bit(6)) {
      set_level(from.level());
    }
    if (from._has_bit(7)) {
      set_leaguepoint(from.leaguepoint());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DB_C_LeaguePlayerUnit::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DB_C_LeaguePlayerUnit::CopyFrom(const DB_C_LeaguePlayerUnit& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DB_C_LeaguePlayerUnit::IsInitialized() const {
  
  return true;
}

void DB_C_LeaguePlayerUnit::Swap(DB_C_LeaguePlayerUnit* other) {
  if (other != this) {
    std::swap(uid_, other->uid_);
    std::swap(name_, other->name_);
    std::swap(pic_, other->pic_);
    std::swap(countryid_, other->countryid_);
    std::swap(guildname_, other->guildname_);
    std::swap(fightpoint_, other->fightpoint_);
    std::swap(level_, other->level_);
    std::swap(leaguepoint_, other->leaguepoint_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DB_C_LeaguePlayerUnit::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DB_C_LeaguePlayerUnit_descriptor_;
  metadata.reflection = DB_C_LeaguePlayerUnit_reflection_;
  return metadata;
}


// ===================================================================

const ::std::string DB_C_LeagueGuildUnit::_default_guildname_;
const ::std::string DB_C_LeagueGuildUnit::_default_leadername_;
#ifndef _MSC_VER
const int DB_C_LeagueGuildUnit::kGuildIDFieldNumber;
const int DB_C_LeagueGuildUnit::kGuildNameFieldNumber;
const int DB_C_LeagueGuildUnit::kLeaderNameFieldNumber;
const int DB_C_LeagueGuildUnit::kLeaguePointFieldNumber;
const int DB_C_LeagueGuildUnit::kCountryIDFieldNumber;
#endif  // !_MSC_VER

DB_C_LeagueGuildUnit::DB_C_LeagueGuildUnit() {
  SharedCtor();
}

void DB_C_LeagueGuildUnit::InitAsDefaultInstance() {
}

DB_C_LeagueGuildUnit::DB_C_LeagueGuildUnit(const DB_C_LeagueGuildUnit& from) {
  SharedCtor();
  MergeFrom(from);
}

void DB_C_LeagueGuildUnit::SharedCtor() {
  _cached_size_ = 0;
  guildid_ = 0;
  guildname_ = const_cast< ::std::string*>(&_default_guildname_);
  leadername_ = const_cast< ::std::string*>(&_default_leadername_);
  leaguepoint_ = 0;
  countryid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DB_C_LeagueGuildUnit::~DB_C_LeagueGuildUnit() {
  SharedDtor();
}

void DB_C_LeagueGuildUnit::SharedDtor() {
  if (guildname_ != &_default_guildname_) {
    delete guildname_;
  }
  if (leadername_ != &_default_leadername_) {
    delete leadername_;
  }
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* DB_C_LeagueGuildUnit::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DB_C_LeagueGuildUnit_descriptor_;
}

const DB_C_LeagueGuildUnit& DB_C_LeagueGuildUnit::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_countryDB_2eproto();  return *default_instance_;
}

DB_C_LeagueGuildUnit* DB_C_LeagueGuildUnit::default_instance_ = NULL;

DB_C_LeagueGuildUnit* DB_C_LeagueGuildUnit::New() const {
  return new DB_C_LeagueGuildUnit;
}

void DB_C_LeagueGuildUnit::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    guildid_ = 0;
    if (_has_bit(1)) {
      if (guildname_ != &_default_guildname_) {
        guildname_->clear();
      }
    }
    if (_has_bit(2)) {
      if (leadername_ != &_default_leadername_) {
        leadername_->clear();
      }
    }
    leaguepoint_ = 0;
    countryid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DB_C_LeagueGuildUnit::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 guildID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &guildid_));
        _set_bit(0);
        if (input->ExpectTag(18)) goto parse_guildName;
        break;
      }
      
      // optional string guildName = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_guildName:
        DO_(::google::protobuf::internal::WireFormatLite::ReadString(
              input, this->mutable_guildname()));
        ::google::protobuf::internal::WireFormat::VerifyUTF8String(
          this->guildname().data(), this->guildname().length(),
          ::google::protobuf::internal::WireFormat::PARSE);
        if (input->ExpectTag(26)) goto parse_leaderName;
        break;
      }
      
      // optional string leaderName = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_leaderName:
        DO_(::google::protobuf::internal::WireFormatLite::ReadString(
              input, this->mutable_leadername()));
        ::google::protobuf::internal::WireFormat::VerifyUTF8String(
          this->leadername().data(), this->leadername().length(),
          ::google::protobuf::internal::WireFormat::PARSE);
        if (input->ExpectTag(32)) goto parse_LeaguePoint;
        break;
      }
      
      // optional int32 LeaguePoint = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_LeaguePoint:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &leaguepoint_));
        _set_bit(3);
        if (input->ExpectTag(40)) goto parse_countryID;
        break;
      }
      
      // optional int32 countryID = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_countryID:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &countryid_));
        _set_bit(4);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DB_C_LeagueGuildUnit::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    DB_C_LeagueGuildUnit::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional int32 guildID = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->guildid(), output);
  }
  
  // optional string guildName = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->guildname().data(), this->guildname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->guildname(), output);
  }
  
  // optional string leaderName = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->leadername().data(), this->leadername().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->leadername(), output);
  }
  
  // optional int32 LeaguePoint = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->leaguepoint(), output);
  }
  
  // optional int32 countryID = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->countryid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DB_C_LeagueGuildUnit::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 guildID = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->guildid(), target);
  }
  
  // optional string guildName = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->guildname().data(), this->guildname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->guildname(), target);
  }
  
  // optional string leaderName = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->leadername().data(), this->leadername().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->leadername(), target);
  }
  
  // optional int32 LeaguePoint = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->leaguepoint(), target);
  }
  
  // optional int32 countryID = 5;
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->countryid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DB_C_LeagueGuildUnit::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 guildID = 1;
    if (has_guildid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->guildid());
    }
    
    // optional string guildName = 2;
    if (has_guildname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->guildname());
    }
    
    // optional string leaderName = 3;
    if (has_leadername()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->leadername());
    }
    
    // optional int32 LeaguePoint = 4;
    if (has_leaguepoint()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->leaguepoint());
    }
    
    // optional int32 countryID = 5;
    if (has_countryid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->countryid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void DB_C_LeagueGuildUnit::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DB_C_LeagueGuildUnit* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DB_C_LeagueGuildUnit*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DB_C_LeagueGuildUnit::MergeFrom(const DB_C_LeagueGuildUnit& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_guildid(from.guildid());
    }
    if (from._has_bit(1)) {
      set_guildname(from.guildname());
    }
    if (from._has_bit(2)) {
      set_leadername(from.leadername());
    }
    if (from._has_bit(3)) {
      set_leaguepoint(from.leaguepoint());
    }
    if (from._has_bit(4)) {
      set_countryid(from.countryid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DB_C_LeagueGuildUnit::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DB_C_LeagueGuildUnit::CopyFrom(const DB_C_LeagueGuildUnit& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DB_C_LeagueGuildUnit::IsInitialized() const {
  
  return true;
}

void DB_C_LeagueGuildUnit::Swap(DB_C_LeagueGuildUnit* other) {
  if (other != this) {
    std::swap(guildid_, other->guildid_);
    std::swap(guildname_, other->guildname_);
    std::swap(leadername_, other->leadername_);
    std::swap(leaguepoint_, other->leaguepoint_);
    std::swap(countryid_, other->countryid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DB_C_LeagueGuildUnit::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DB_C_LeagueGuildUnit_descriptor_;
  metadata.reflection = DB_C_LeagueGuildUnit_reflection_;
  return metadata;
}


// ===================================================================

const ::std::string DB_C_BtlRecord::_default_atkid_;
const ::std::string DB_C_BtlRecord::_default_atkname_;
const ::std::string DB_C_BtlRecord::_default_defid_;
const ::std::string DB_C_BtlRecord::_default_defname_;
#ifndef _MSC_VER
const int DB_C_BtlRecord::kTypeFieldNumber;
const int DB_C_BtlRecord::kBtlTimeFieldNumber;
const int DB_C_BtlRecord::kAtkIDFieldNumber;
const int DB_C_BtlRecord::kAtkNameFieldNumber;
const int DB_C_BtlRecord::kAtkCountryFieldNumber;
const int DB_C_BtlRecord::kDefIDFieldNumber;
const int DB_C_BtlRecord::kDefNameFieldNumber;
const int DB_C_BtlRecord::kDefCountryFieldNumber;
const int DB_C_BtlRecord::kCityIDFieldNumber;
const int DB_C_BtlRecord::kWinningCntFieldNumber;
const int DB_C_BtlRecord::kBloodAtkCityFieldNumber;
const int DB_C_BtlRecord::kBloodDefCityFieldNumber;
const int DB_C_BtlRecord::kBloodWinCityFieldNumber;
#endif  // !_MSC_VER

DB_C_BtlRecord::DB_C_BtlRecord() {
  SharedCtor();
}

void DB_C_BtlRecord::InitAsDefaultInstance() {
}

DB_C_BtlRecord::DB_C_BtlRecord(const DB_C_BtlRecord& from) {
  SharedCtor();
  MergeFrom(from);
}

void DB_C_BtlRecord::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  btltime_ = 0;
  atkid_ = const_cast< ::std::string*>(&_default_atkid_);
  atkname_ = const_cast< ::std::string*>(&_default_atkname_);
  atkcountry_ = 0;
  defid_ = const_cast< ::std::string*>(&_default_defid_);
  defname_ = const_cast< ::std::string*>(&_default_defname_);
  defcountry_ = 0;
  cityid_ = 0;
  winningcnt_ = 0;
  bloodatkcity_ = 0;
  blooddefcity_ = 0;
  bloodwincity_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DB_C_BtlRecord::~DB_C_BtlRecord() {
  SharedDtor();
}

void DB_C_BtlRecord::SharedDtor() {
  if (atkid_ != &_default_atkid_) {
    delete atkid_;
  }
  if (atkname_ != &_default_atkname_) {
    delete atkname_;
  }
  if (defid_ != &_default_defid_) {
    delete defid_;
  }
  if (defname_ != &_default_defname_) {
    delete defname_;
  }
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* DB_C_BtlRecord::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DB_C_BtlRecord_descriptor_;
}

const DB_C_BtlRecord& DB_C_BtlRecord::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_countryDB_2eproto();  return *default_instance_;
}

DB_C_BtlRecord* DB_C_BtlRecord::default_instance_ = NULL;

DB_C_BtlRecord* DB_C_BtlRecord::New() const {
  return new DB_C_BtlRecord;
}

void DB_C_BtlRecord::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0;
    btltime_ = 0;
    if (_has_bit(2)) {
      if (atkid_ != &_default_atkid_) {
        atkid_->clear();
      }
    }
    if (_has_bit(3)) {
      if (atkname_ != &_default_atkname_) {
        atkname_->clear();
      }
    }
    atkcountry_ = 0;
    if (_has_bit(5)) {
      if (defid_ != &_default_defid_) {
        defid_->clear();
      }
    }
    if (_has_bit(6)) {
      if (defname_ != &_default_defname_) {
        defname_->clear();
      }
    }
    defcountry_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    cityid_ = 0;
    winningcnt_ = 0;
    bloodatkcity_ = 0;
    blooddefcity_ = 0;
    bloodwincity_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DB_C_BtlRecord::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &type_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_btlTime;
        break;
      }
      
      // optional int32 btlTime = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_btlTime:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &btltime_));
        _set_bit(1);
        if (input->ExpectTag(26)) goto parse_atkID;
        break;
      }
      
      // optional string atkID = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_atkID:
        DO_(::google::protobuf::internal::WireFormatLite::ReadString(
              input, this->mutable_atkid()));
        ::google::protobuf::internal::WireFormat::VerifyUTF8String(
          this->atkid().data(), this->atkid().length(),
          ::google::protobuf::internal::WireFormat::PARSE);
        if (input->ExpectTag(34)) goto parse_atkName;
        break;
      }
      
      // optional string atkName = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_atkName:
        DO_(::google::protobuf::internal::WireFormatLite::ReadString(
              input, this->mutable_atkname()));
        ::google::protobuf::internal::WireFormat::VerifyUTF8String(
          this->atkname().data(), this->atkname().length(),
          ::google::protobuf::internal::WireFormat::PARSE);
        if (input->ExpectTag(40)) goto parse_atkCountry;
        break;
      }
      
      // optional int32 atkCountry = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_atkCountry:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &atkcountry_));
        _set_bit(4);
        if (input->ExpectTag(50)) goto parse_defID;
        break;
      }
      
      // optional string defID = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_defID:
        DO_(::google::protobuf::internal::WireFormatLite::ReadString(
              input, this->mutable_defid()));
        ::google::protobuf::internal::WireFormat::VerifyUTF8String(
          this->defid().data(), this->defid().length(),
          ::google::protobuf::internal::WireFormat::PARSE);
        if (input->ExpectTag(58)) goto parse_defName;
        break;
      }
      
      // optional string defName = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_defName:
        DO_(::google::protobuf::internal::WireFormatLite::ReadString(
              input, this->mutable_defname()));
        ::google::protobuf::internal::WireFormat::VerifyUTF8String(
          this->defname().data(), this->defname().length(),
          ::google::protobuf::internal::WireFormat::PARSE);
        if (input->ExpectTag(64)) goto parse_defCountry;
        break;
      }
      
      // optional int32 defCountry = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_defCountry:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &defcountry_));
        _set_bit(7);
        if (input->ExpectTag(72)) goto parse_cityID;
        break;
      }
      
      // optional int32 cityID = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_cityID:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &cityid_));
        _set_bit(8);
        if (input->ExpectTag(80)) goto parse_winningCnt;
        break;
      }
      
      // optional int32 winningCnt = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_winningCnt:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &winningcnt_));
        _set_bit(9);
        if (input->ExpectTag(88)) goto parse_bloodAtkCity;
        break;
      }
      
      // optional int32 bloodAtkCity = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_bloodAtkCity:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &bloodatkcity_));
        _set_bit(10);
        if (input->ExpectTag(96)) goto parse_bloodDefCity;
        break;
      }
      
      // optional int32 bloodDefCity = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_bloodDefCity:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &blooddefcity_));
        _set_bit(11);
        if (input->ExpectTag(104)) goto parse_bloodWinCity;
        break;
      }
      
      // optional int32 bloodWinCity = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_bloodWinCity:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &bloodwincity_));
        _set_bit(12);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DB_C_BtlRecord::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    DB_C_BtlRecord::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional int32 type = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->type(), output);
  }
  
  // optional int32 btlTime = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->btltime(), output);
  }
  
  // optional string atkID = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->atkid().data(), this->atkid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->atkid(), output);
  }
  
  // optional string atkName = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->atkname().data(), this->atkname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->atkname(), output);
  }
  
  // optional int32 atkCountry = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->atkcountry(), output);
  }
  
  // optional string defID = 6;
  if (_has_bit(5)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->defid().data(), this->defid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->defid(), output);
  }
  
  // optional string defName = 7;
  if (_has_bit(6)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->defname().data(), this->defname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->defname(), output);
  }
  
  // optional int32 defCountry = 8;
  if (_has_bit(7)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->defcountry(), output);
  }
  
  // optional int32 cityID = 9;
  if (_has_bit(8)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->cityid(), output);
  }
  
  // optional int32 winningCnt = 10;
  if (_has_bit(9)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->winningcnt(), output);
  }
  
  // optional int32 bloodAtkCity = 11;
  if (_has_bit(10)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->bloodatkcity(), output);
  }
  
  // optional int32 bloodDefCity = 12;
  if (_has_bit(11)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->blooddefcity(), output);
  }
  
  // optional int32 bloodWinCity = 13;
  if (_has_bit(12)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->bloodwincity(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DB_C_BtlRecord::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 type = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->type(), target);
  }
  
  // optional int32 btlTime = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->btltime(), target);
  }
  
  // optional string atkID = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->atkid().data(), this->atkid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->atkid(), target);
  }
  
  // optional string atkName = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->atkname().data(), this->atkname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->atkname(), target);
  }
  
  // optional int32 atkCountry = 5;
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->atkcountry(), target);
  }
  
  // optional string defID = 6;
  if (_has_bit(5)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->defid().data(), this->defid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->defid(), target);
  }
  
  // optional string defName = 7;
  if (_has_bit(6)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->defname().data(), this->defname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->defname(), target);
  }
  
  // optional int32 defCountry = 8;
  if (_has_bit(7)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->defcountry(), target);
  }
  
  // optional int32 cityID = 9;
  if (_has_bit(8)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->cityid(), target);
  }
  
  // optional int32 winningCnt = 10;
  if (_has_bit(9)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->winningcnt(), target);
  }
  
  // optional int32 bloodAtkCity = 11;
  if (_has_bit(10)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->bloodatkcity(), target);
  }
  
  // optional int32 bloodDefCity = 12;
  if (_has_bit(11)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->blooddefcity(), target);
  }
  
  // optional int32 bloodWinCity = 13;
  if (_has_bit(12)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->bloodwincity(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DB_C_BtlRecord::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }
    
    // optional int32 btlTime = 2;
    if (has_btltime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->btltime());
    }
    
    // optional string atkID = 3;
    if (has_atkid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->atkid());
    }
    
    // optional string atkName = 4;
    if (has_atkname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->atkname());
    }
    
    // optional int32 atkCountry = 5;
    if (has_atkcountry()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->atkcountry());
    }
    
    // optional string defID = 6;
    if (has_defid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->defid());
    }
    
    // optional string defName = 7;
    if (has_defname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->defname());
    }
    
    // optional int32 defCountry = 8;
    if (has_defcountry()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->defcountry());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 cityID = 9;
    if (has_cityid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cityid());
    }
    
    // optional int32 winningCnt = 10;
    if (has_winningcnt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->winningcnt());
    }
    
    // optional int32 bloodAtkCity = 11;
    if (has_bloodatkcity()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bloodatkcity());
    }
    
    // optional int32 bloodDefCity = 12;
    if (has_blooddefcity()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->blooddefcity());
    }
    
    // optional int32 bloodWinCity = 13;
    if (has_bloodwincity()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bloodwincity());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void DB_C_BtlRecord::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DB_C_BtlRecord* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DB_C_BtlRecord*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DB_C_BtlRecord::MergeFrom(const DB_C_BtlRecord& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_type(from.type());
    }
    if (from._has_bit(1)) {
      set_btltime(from.btltime());
    }
    if (from._has_bit(2)) {
      set_atkid(from.atkid());
    }
    if (from._has_bit(3)) {
      set_atkname(from.atkname());
    }
    if (from._has_bit(4)) {
      set_atkcountry(from.atkcountry());
    }
    if (from._has_bit(5)) {
      set_defid(from.defid());
    }
    if (from._has_bit(6)) {
      set_defname(from.defname());
    }
    if (from._has_bit(7)) {
      set_defcountry(from.defcountry());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from._has_bit(8)) {
      set_cityid(from.cityid());
    }
    if (from._has_bit(9)) {
      set_winningcnt(from.winningcnt());
    }
    if (from._has_bit(10)) {
      set_bloodatkcity(from.bloodatkcity());
    }
    if (from._has_bit(11)) {
      set_blooddefcity(from.blooddefcity());
    }
    if (from._has_bit(12)) {
      set_bloodwincity(from.bloodwincity());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DB_C_BtlRecord::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DB_C_BtlRecord::CopyFrom(const DB_C_BtlRecord& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DB_C_BtlRecord::IsInitialized() const {
  
  return true;
}

void DB_C_BtlRecord::Swap(DB_C_BtlRecord* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(btltime_, other->btltime_);
    std::swap(atkid_, other->atkid_);
    std::swap(atkname_, other->atkname_);
    std::swap(atkcountry_, other->atkcountry_);
    std::swap(defid_, other->defid_);
    std::swap(defname_, other->defname_);
    std::swap(defcountry_, other->defcountry_);
    std::swap(cityid_, other->cityid_);
    std::swap(winningcnt_, other->winningcnt_);
    std::swap(bloodatkcity_, other->bloodatkcity_);
    std::swap(blooddefcity_, other->blooddefcity_);
    std::swap(bloodwincity_, other->bloodwincity_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DB_C_BtlRecord::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DB_C_BtlRecord_descriptor_;
  metadata.reflection = DB_C_BtlRecord_reflection_;
  return metadata;
}


// ===================================================================

const ::std::string DB_C_BloodBtlStep::_default_atkid_;
const ::std::string DB_C_BloodBtlStep::_default_atkname_;
const ::std::string DB_C_BloodBtlStep::_default_defid_;
const ::std::string DB_C_BloodBtlStep::_default_defname_;
const ::std::string DB_C_BloodBtlStep::_default_winid_;
#ifndef _MSC_VER
const int DB_C_BloodBtlStep::kTimeFieldNumber;
const int DB_C_BloodBtlStep::kAtkIDFieldNumber;
const int DB_C_BloodBtlStep::kAtkNameFieldNumber;
const int DB_C_BloodBtlStep::kAtkCountryFieldNumber;
const int DB_C_BloodBtlStep::kDefIDFieldNumber;
const int DB_C_BloodBtlStep::kDefNameFieldNumber;
const int DB_C_BloodBtlStep::kDefCountryFieldNumber;
const int DB_C_BloodBtlStep::kWinIDFieldNumber;
#endif  // !_MSC_VER

DB_C_BloodBtlStep::DB_C_BloodBtlStep() {
  SharedCtor();
}

void DB_C_BloodBtlStep::InitAsDefaultInstance() {
}

DB_C_BloodBtlStep::DB_C_BloodBtlStep(const DB_C_BloodBtlStep& from) {
  SharedCtor();
  MergeFrom(from);
}

void DB_C_BloodBtlStep::SharedCtor() {
  _cached_size_ = 0;
  time_ = 0;
  atkid_ = const_cast< ::std::string*>(&_default_atkid_);
  atkname_ = const_cast< ::std::string*>(&_default_atkname_);
  atkcountry_ = 0;
  defid_ = const_cast< ::std::string*>(&_default_defid_);
  defname_ = const_cast< ::std::string*>(&_default_defname_);
  defcountry_ = 0;
  winid_ = const_cast< ::std::string*>(&_default_winid_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DB_C_BloodBtlStep::~DB_C_BloodBtlStep() {
  SharedDtor();
}

void DB_C_BloodBtlStep::SharedDtor() {
  if (atkid_ != &_default_atkid_) {
    delete atkid_;
  }
  if (atkname_ != &_default_atkname_) {
    delete atkname_;
  }
  if (defid_ != &_default_defid_) {
    delete defid_;
  }
  if (defname_ != &_default_defname_) {
    delete defname_;
  }
  if (winid_ != &_default_winid_) {
    delete winid_;
  }
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* DB_C_BloodBtlStep::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DB_C_BloodBtlStep_descriptor_;
}

const DB_C_BloodBtlStep& DB_C_BloodBtlStep::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_countryDB_2eproto();  return *default_instance_;
}

DB_C_BloodBtlStep* DB_C_BloodBtlStep::default_instance_ = NULL;

DB_C_BloodBtlStep* DB_C_BloodBtlStep::New() const {
  return new DB_C_BloodBtlStep;
}

void DB_C_BloodBtlStep::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    time_ = 0;
    if (_has_bit(1)) {
      if (atkid_ != &_default_atkid_) {
        atkid_->clear();
      }
    }
    if (_has_bit(2)) {
      if (atkname_ != &_default_atkname_) {
        atkname_->clear();
      }
    }
    atkcountry_ = 0;
    if (_has_bit(4)) {
      if (defid_ != &_default_defid_) {
        defid_->clear();
      }
    }
    if (_has_bit(5)) {
      if (defname_ != &_default_defname_) {
        defname_->clear();
      }
    }
    defcountry_ = 0;
    if (_has_bit(7)) {
      if (winid_ != &_default_winid_) {
        winid_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DB_C_BloodBtlStep::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 time = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &time_));
        _set_bit(0);
        if (input->ExpectTag(18)) goto parse_atkID;
        break;
      }
      
      // optional string atkID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_atkID:
        DO_(::google::protobuf::internal::WireFormatLite::ReadString(
              input, this->mutable_atkid()));
        ::google::protobuf::internal::WireFormat::VerifyUTF8String(
          this->atkid().data(), this->atkid().length(),
          ::google::protobuf::internal::WireFormat::PARSE);
        if (input->ExpectTag(26)) goto parse_atkName;
        break;
      }
      
      // optional string atkName = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_atkName:
        DO_(::google::protobuf::internal::WireFormatLite::ReadString(
              input, this->mutable_atkname()));
        ::google::protobuf::internal::WireFormat::VerifyUTF8String(
          this->atkname().data(), this->atkname().length(),
          ::google::protobuf::internal::WireFormat::PARSE);
        if (input->ExpectTag(32)) goto parse_atkCountry;
        break;
      }
      
      // optional int32 atkCountry = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_atkCountry:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &atkcountry_));
        _set_bit(3);
        if (input->ExpectTag(42)) goto parse_defID;
        break;
      }
      
      // optional string defID = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_defID:
        DO_(::google::protobuf::internal::WireFormatLite::ReadString(
              input, this->mutable_defid()));
        ::google::protobuf::internal::WireFormat::VerifyUTF8String(
          this->defid().data(), this->defid().length(),
          ::google::protobuf::internal::WireFormat::PARSE);
        if (input->ExpectTag(50)) goto parse_defName;
        break;
      }
      
      // optional string defName = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_defName:
        DO_(::google::protobuf::internal::WireFormatLite::ReadString(
              input, this->mutable_defname()));
        ::google::protobuf::internal::WireFormat::VerifyUTF8String(
          this->defname().data(), this->defname().length(),
          ::google::protobuf::internal::WireFormat::PARSE);
        if (input->ExpectTag(56)) goto parse_defCountry;
        break;
      }
      
      // optional int32 defCountry = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_defCountry:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &defcountry_));
        _set_bit(6);
        if (input->ExpectTag(66)) goto parse_winID;
        break;
      }
      
      // optional string winID = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_winID:
        DO_(::google::protobuf::internal::WireFormatLite::ReadString(
              input, this->mutable_winid()));
        ::google::protobuf::internal::WireFormat::VerifyUTF8String(
          this->winid().data(), this->winid().length(),
          ::google::protobuf::internal::WireFormat::PARSE);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DB_C_BloodBtlStep::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    DB_C_BloodBtlStep::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional int32 time = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->time(), output);
  }
  
  // optional string atkID = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->atkid().data(), this->atkid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->atkid(), output);
  }
  
  // optional string atkName = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->atkname().data(), this->atkname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->atkname(), output);
  }
  
  // optional int32 atkCountry = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->atkcountry(), output);
  }
  
  // optional string defID = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->defid().data(), this->defid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->defid(), output);
  }
  
  // optional string defName = 6;
  if (_has_bit(5)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->defname().data(), this->defname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->defname(), output);
  }
  
  // optional int32 defCountry = 7;
  if (_has_bit(6)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->defcountry(), output);
  }
  
  // optional string winID = 8;
  if (_has_bit(7)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->winid().data(), this->winid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      8, this->winid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DB_C_BloodBtlStep::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 time = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->time(), target);
  }
  
  // optional string atkID = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->atkid().data(), this->atkid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->atkid(), target);
  }
  
  // optional string atkName = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->atkname().data(), this->atkname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->atkname(), target);
  }
  
  // optional int32 atkCountry = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->atkcountry(), target);
  }
  
  // optional string defID = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->defid().data(), this->defid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->defid(), target);
  }
  
  // optional string defName = 6;
  if (_has_bit(5)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->defname().data(), this->defname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->defname(), target);
  }
  
  // optional int32 defCountry = 7;
  if (_has_bit(6)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->defcountry(), target);
  }
  
  // optional string winID = 8;
  if (_has_bit(7)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->winid().data(), this->winid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->winid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DB_C_BloodBtlStep::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 time = 1;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->time());
    }
    
    // optional string atkID = 2;
    if (has_atkid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->atkid());
    }
    
    // optional string atkName = 3;
    if (has_atkname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->atkname());
    }
    
    // optional int32 atkCountry = 4;
    if (has_atkcountry()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->atkcountry());
    }
    
    // optional string defID = 5;
    if (has_defid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->defid());
    }
    
    // optional string defName = 6;
    if (has_defname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->defname());
    }
    
    // optional int32 defCountry = 7;
    if (has_defcountry()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->defcountry());
    }
    
    // optional string winID = 8;
    if (has_winid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->winid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void DB_C_BloodBtlStep::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DB_C_BloodBtlStep* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DB_C_BloodBtlStep*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DB_C_BloodBtlStep::MergeFrom(const DB_C_BloodBtlStep& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_time(from.time());
    }
    if (from._has_bit(1)) {
      set_atkid(from.atkid());
    }
    if (from._has_bit(2)) {
      set_atkname(from.atkname());
    }
    if (from._has_bit(3)) {
      set_atkcountry(from.atkcountry());
    }
    if (from._has_bit(4)) {
      set_defid(from.defid());
    }
    if (from._has_bit(5)) {
      set_defname(from.defname());
    }
    if (from._has_bit(6)) {
      set_defcountry(from.defcountry());
    }
    if (from._has_bit(7)) {
      set_winid(from.winid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DB_C_BloodBtlStep::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DB_C_BloodBtlStep::CopyFrom(const DB_C_BloodBtlStep& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DB_C_BloodBtlStep::IsInitialized() const {
  
  return true;
}

void DB_C_BloodBtlStep::Swap(DB_C_BloodBtlStep* other) {
  if (other != this) {
    std::swap(time_, other->time_);
    std::swap(atkid_, other->atkid_);
    std::swap(atkname_, other->atkname_);
    std::swap(atkcountry_, other->atkcountry_);
    std::swap(defid_, other->defid_);
    std::swap(defname_, other->defname_);
    std::swap(defcountry_, other->defcountry_);
    std::swap(winid_, other->winid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DB_C_BloodBtlStep::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DB_C_BloodBtlStep_descriptor_;
  metadata.reflection = DB_C_BloodBtlStep_reflection_;
  return metadata;
}


// ===================================================================

const ::std::string DB_C_BloodBtl::_default_launchname_;
#ifndef _MSC_VER
const int DB_C_BloodBtl::kLaunchUserIDFieldNumber;
const int DB_C_BloodBtl::kLaunchNameFieldNumber;
const int DB_C_BloodBtl::kLaunchTimeFieldNumber;
const int DB_C_BloodBtl::kAtkCountryFieldNumber;
const int DB_C_BloodBtl::kAtkCityFieldNumber;
const int DB_C_BloodBtl::kAtkTotalCntFieldNumber;
const int DB_C_BloodBtl::kAtkLeftCntFieldNumber;
const int DB_C_BloodBtl::kDefCountryFieldNumber;
const int DB_C_BloodBtl::kDefCityFieldNumber;
const int DB_C_BloodBtl::kDefTotalCntFieldNumber;
const int DB_C_BloodBtl::kDefLeftCntFieldNumber;
const int DB_C_BloodBtl::kBtlStepFieldNumber;
const int DB_C_BloodBtl::kWinCityFieldNumber;
const int DB_C_BloodBtl::kOverTimeFieldNumber;
const int DB_C_BloodBtl::kTypeFieldNumber;
#endif  // !_MSC_VER

DB_C_BloodBtl::DB_C_BloodBtl() {
  SharedCtor();
}

void DB_C_BloodBtl::InitAsDefaultInstance() {
}

DB_C_BloodBtl::DB_C_BloodBtl(const DB_C_BloodBtl& from) {
  SharedCtor();
  MergeFrom(from);
}

void DB_C_BloodBtl::SharedCtor() {
  _cached_size_ = 0;
  launchuserid_ = GOOGLE_LONGLONG(0);
  launchname_ = const_cast< ::std::string*>(&_default_launchname_);
  launchtime_ = 0;
  atkcountry_ = 0;
  atkcity_ = 0;
  atktotalcnt_ = 0;
  atkleftcnt_ = 0;
  defcountry_ = 0;
  defcity_ = 0;
  deftotalcnt_ = 0;
  defleftcnt_ = 0;
  wincity_ = 0;
  overtime_ = 0;
  type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DB_C_BloodBtl::~DB_C_BloodBtl() {
  SharedDtor();
}

void DB_C_BloodBtl::SharedDtor() {
  if (launchname_ != &_default_launchname_) {
    delete launchname_;
  }
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* DB_C_BloodBtl::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DB_C_BloodBtl_descriptor_;
}

const DB_C_BloodBtl& DB_C_BloodBtl::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_countryDB_2eproto();  return *default_instance_;
}

DB_C_BloodBtl* DB_C_BloodBtl::default_instance_ = NULL;

DB_C_BloodBtl* DB_C_BloodBtl::New() const {
  return new DB_C_BloodBtl;
}

void DB_C_BloodBtl::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    launchuserid_ = GOOGLE_LONGLONG(0);
    if (_has_bit(1)) {
      if (launchname_ != &_default_launchname_) {
        launchname_->clear();
      }
    }
    launchtime_ = 0;
    atkcountry_ = 0;
    atkcity_ = 0;
    atktotalcnt_ = 0;
    atkleftcnt_ = 0;
    defcountry_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    defcity_ = 0;
    deftotalcnt_ = 0;
    defleftcnt_ = 0;
    wincity_ = 0;
    overtime_ = 0;
    type_ = 0;
  }
  btlstep_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DB_C_BloodBtl::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 launchUserID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt64(
              input, &launchuserid_));
        _set_bit(0);
        if (input->ExpectTag(18)) goto parse_launchName;
        break;
      }
      
      // optional string launchName = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_launchName:
        DO_(::google::protobuf::internal::WireFormatLite::ReadString(
              input, this->mutable_launchname()));
        ::google::protobuf::internal::WireFormat::VerifyUTF8String(
          this->launchname().data(), this->launchname().length(),
          ::google::protobuf::internal::WireFormat::PARSE);
        if (input->ExpectTag(24)) goto parse_launchTime;
        break;
      }
      
      // optional int32 launchTime = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_launchTime:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &launchtime_));
        _set_bit(2);
        if (input->ExpectTag(32)) goto parse_atkCountry;
        break;
      }
      
      // optional int32 atkCountry = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_atkCountry:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &atkcountry_));
        _set_bit(3);
        if (input->ExpectTag(40)) goto parse_atkCity;
        break;
      }
      
      // optional int32 atkCity = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_atkCity:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &atkcity_));
        _set_bit(4);
        if (input->ExpectTag(48)) goto parse_atkTotalCnt;
        break;
      }
      
      // optional int32 atkTotalCnt = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_atkTotalCnt:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &atktotalcnt_));
        _set_bit(5);
        if (input->ExpectTag(56)) goto parse_atkLeftCnt;
        break;
      }
      
      // optional int32 atkLeftCnt = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_atkLeftCnt:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &atkleftcnt_));
        _set_bit(6);
        if (input->ExpectTag(64)) goto parse_defCountry;
        break;
      }
      
      // optional int32 defCountry = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_defCountry:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &defcountry_));
        _set_bit(7);
        if (input->ExpectTag(72)) goto parse_defCity;
        break;
      }
      
      // optional int32 defCity = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_defCity:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &defcity_));
        _set_bit(8);
        if (input->ExpectTag(80)) goto parse_defTotalCnt;
        break;
      }
      
      // optional int32 defTotalCnt = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_defTotalCnt:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &deftotalcnt_));
        _set_bit(9);
        if (input->ExpectTag(88)) goto parse_defLeftCnt;
        break;
      }
      
      // optional int32 defLeftCnt = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_defLeftCnt:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &defleftcnt_));
        _set_bit(10);
        if (input->ExpectTag(98)) goto parse_btlStep;
        break;
      }
      
      // repeated .DB_C_BloodBtlStep btlStep = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_btlStep:
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, add_btlstep()));
        if (input->ExpectTag(98)) goto parse_btlStep;
        if (input->ExpectTag(104)) goto parse_winCity;
        break;
      }
      
      // optional int32 winCity = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_winCity:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &wincity_));
        _set_bit(12);
        if (input->ExpectTag(112)) goto parse_overTime;
        break;
      }
      
      // optional int32 overTime = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_overTime:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &overtime_));
        _set_bit(13);
        if (input->ExpectTag(120)) goto parse_type;
        break;
      }
      
      // optional int32 type = 15 [default = 0];
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_type:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &type_));
        _set_bit(14);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DB_C_BloodBtl::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    DB_C_BloodBtl::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional int64 launchUserID = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->launchuserid(), output);
  }
  
  // optional string launchName = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->launchname().data(), this->launchname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->launchname(), output);
  }
  
  // optional int32 launchTime = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->launchtime(), output);
  }
  
  // optional int32 atkCountry = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->atkcountry(), output);
  }
  
  // optional int32 atkCity = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->atkcity(), output);
  }
  
  // optional int32 atkTotalCnt = 6;
  if (_has_bit(5)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->atktotalcnt(), output);
  }
  
  // optional int32 atkLeftCnt = 7;
  if (_has_bit(6)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->atkleftcnt(), output);
  }
  
  // optional int32 defCountry = 8;
  if (_has_bit(7)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->defcountry(), output);
  }
  
  // optional int32 defCity = 9;
  if (_has_bit(8)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->defcity(), output);
  }
  
  // optional int32 defTotalCnt = 10;
  if (_has_bit(9)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->deftotalcnt(), output);
  }
  
  // optional int32 defLeftCnt = 11;
  if (_has_bit(10)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->defleftcnt(), output);
  }
  
  // repeated .DB_C_BloodBtlStep btlStep = 12;
  for (int i = 0; i < this->btlstep_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      12, this->btlstep(i), output);
  }
  
  // optional int32 winCity = 13;
  if (_has_bit(12)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->wincity(), output);
  }
  
  // optional int32 overTime = 14;
  if (_has_bit(13)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->overtime(), output);
  }
  
  // optional int32 type = 15 [default = 0];
  if (_has_bit(14)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(15, this->type(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DB_C_BloodBtl::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int64 launchUserID = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->launchuserid(), target);
  }
  
  // optional string launchName = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->launchname().data(), this->launchname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->launchname(), target);
  }
  
  // optional int32 launchTime = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->launchtime(), target);
  }
  
  // optional int32 atkCountry = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->atkcountry(), target);
  }
  
  // optional int32 atkCity = 5;
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->atkcity(), target);
  }
  
  // optional int32 atkTotalCnt = 6;
  if (_has_bit(5)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->atktotalcnt(), target);
  }
  
  // optional int32 atkLeftCnt = 7;
  if (_has_bit(6)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->atkleftcnt(), target);
  }
  
  // optional int32 defCountry = 8;
  if (_has_bit(7)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->defcountry(), target);
  }
  
  // optional int32 defCity = 9;
  if (_has_bit(8)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->defcity(), target);
  }
  
  // optional int32 defTotalCnt = 10;
  if (_has_bit(9)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->deftotalcnt(), target);
  }
  
  // optional int32 defLeftCnt = 11;
  if (_has_bit(10)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->defleftcnt(), target);
  }
  
  // repeated .DB_C_BloodBtlStep btlStep = 12;
  for (int i = 0; i < this->btlstep_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        12, this->btlstep(i), target);
  }
  
  // optional int32 winCity = 13;
  if (_has_bit(12)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->wincity(), target);
  }
  
  // optional int32 overTime = 14;
  if (_has_bit(13)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(14, this->overtime(), target);
  }
  
  // optional int32 type = 15 [default = 0];
  if (_has_bit(14)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(15, this->type(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DB_C_BloodBtl::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 launchUserID = 1;
    if (has_launchuserid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->launchuserid());
    }
    
    // optional string launchName = 2;
    if (has_launchname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->launchname());
    }
    
    // optional int32 launchTime = 3;
    if (has_launchtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->launchtime());
    }
    
    // optional int32 atkCountry = 4;
    if (has_atkcountry()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->atkcountry());
    }
    
    // optional int32 atkCity = 5;
    if (has_atkcity()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->atkcity());
    }
    
    // optional int32 atkTotalCnt = 6;
    if (has_atktotalcnt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->atktotalcnt());
    }
    
    // optional int32 atkLeftCnt = 7;
    if (has_atkleftcnt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->atkleftcnt());
    }
    
    // optional int32 defCountry = 8;
    if (has_defcountry()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->defcountry());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 defCity = 9;
    if (has_defcity()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->defcity());
    }
    
    // optional int32 defTotalCnt = 10;
    if (has_deftotalcnt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->deftotalcnt());
    }
    
    // optional int32 defLeftCnt = 11;
    if (has_defleftcnt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->defleftcnt());
    }
    
    // optional int32 winCity = 13;
    if (has_wincity()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->wincity());
    }
    
    // optional int32 overTime = 14;
    if (has_overtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->overtime());
    }
    
    // optional int32 type = 15 [default = 0];
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }
    
  }
  // repeated .DB_C_BloodBtlStep btlStep = 12;
  total_size += 1 * this->btlstep_size();
  for (int i = 0; i < this->btlstep_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->btlstep(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void DB_C_BloodBtl::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DB_C_BloodBtl* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DB_C_BloodBtl*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DB_C_BloodBtl::MergeFrom(const DB_C_BloodBtl& from) {
  GOOGLE_CHECK_NE(&from, this);
  btlstep_.MergeFrom(from.btlstep_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_launchuserid(from.launchuserid());
    }
    if (from._has_bit(1)) {
      set_launchname(from.launchname());
    }
    if (from._has_bit(2)) {
      set_launchtime(from.launchtime());
    }
    if (from._has_bit(3)) {
      set_atkcountry(from.atkcountry());
    }
    if (from._has_bit(4)) {
      set_atkcity(from.atkcity());
    }
    if (from._has_bit(5)) {
      set_atktotalcnt(from.atktotalcnt());
    }
    if (from._has_bit(6)) {
      set_atkleftcnt(from.atkleftcnt());
    }
    if (from._has_bit(7)) {
      set_defcountry(from.defcountry());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from._has_bit(8)) {
      set_defcity(from.defcity());
    }
    if (from._has_bit(9)) {
      set_deftotalcnt(from.deftotalcnt());
    }
    if (from._has_bit(10)) {
      set_defleftcnt(from.defleftcnt());
    }
    if (from._has_bit(12)) {
      set_wincity(from.wincity());
    }
    if (from._has_bit(13)) {
      set_overtime(from.overtime());
    }
    if (from._has_bit(14)) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DB_C_BloodBtl::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DB_C_BloodBtl::CopyFrom(const DB_C_BloodBtl& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DB_C_BloodBtl::IsInitialized() const {
  
  return true;
}

void DB_C_BloodBtl::Swap(DB_C_BloodBtl* other) {
  if (other != this) {
    std::swap(launchuserid_, other->launchuserid_);
    std::swap(launchname_, other->launchname_);
    std::swap(launchtime_, other->launchtime_);
    std::swap(atkcountry_, other->atkcountry_);
    std::swap(atkcity_, other->atkcity_);
    std::swap(atktotalcnt_, other->atktotalcnt_);
    std::swap(atkleftcnt_, other->atkleftcnt_);
    std::swap(defcountry_, other->defcountry_);
    std::swap(defcity_, other->defcity_);
    std::swap(deftotalcnt_, other->deftotalcnt_);
    std::swap(defleftcnt_, other->defleftcnt_);
    btlstep_.Swap(&other->btlstep_);
    std::swap(wincity_, other->wincity_);
    std::swap(overtime_, other->overtime_);
    std::swap(type_, other->type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DB_C_BloodBtl::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DB_C_BloodBtl_descriptor_;
  metadata.reflection = DB_C_BloodBtl_reflection_;
  return metadata;
}


// ===================================================================

const ::std::string DB_C_OfficerRightUse::_default_name_;
#ifndef _MSC_VER
const int DB_C_OfficerRightUse::kRightIdFieldNumber;
const int DB_C_OfficerRightUse::kUidFieldNumber;
const int DB_C_OfficerRightUse::kEndtimeFieldNumber;
const int DB_C_OfficerRightUse::kNameFieldNumber;
const int DB_C_OfficerRightUse::kPositionFieldNumber;
#endif  // !_MSC_VER

DB_C_OfficerRightUse::DB_C_OfficerRightUse() {
  SharedCtor();
}

void DB_C_OfficerRightUse::InitAsDefaultInstance() {
}

DB_C_OfficerRightUse::DB_C_OfficerRightUse(const DB_C_OfficerRightUse& from) {
  SharedCtor();
  MergeFrom(from);
}

void DB_C_OfficerRightUse::SharedCtor() {
  _cached_size_ = 0;
  rightid_ = 0;
  uid_ = GOOGLE_LONGLONG(0);
  endtime_ = 0;
  name_ = const_cast< ::std::string*>(&_default_name_);
  position_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DB_C_OfficerRightUse::~DB_C_OfficerRightUse() {
  SharedDtor();
}

void DB_C_OfficerRightUse::SharedDtor() {
  if (name_ != &_default_name_) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* DB_C_OfficerRightUse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DB_C_OfficerRightUse_descriptor_;
}

const DB_C_OfficerRightUse& DB_C_OfficerRightUse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_countryDB_2eproto();  return *default_instance_;
}

DB_C_OfficerRightUse* DB_C_OfficerRightUse::default_instance_ = NULL;

DB_C_OfficerRightUse* DB_C_OfficerRightUse::New() const {
  return new DB_C_OfficerRightUse;
}

void DB_C_OfficerRightUse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    rightid_ = 0;
    uid_ = GOOGLE_LONGLONG(0);
    endtime_ = 0;
    if (_has_bit(3)) {
      if (name_ != &_default_name_) {
        name_->clear();
      }
    }
    position_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DB_C_OfficerRightUse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 rightId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &rightid_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_uid;
        break;
      }
      
      // optional int64 uid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_uid:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt64(
              input, &uid_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_endtime;
        break;
      }
      
      // optional int32 endtime = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_endtime:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &endtime_));
        _set_bit(2);
        if (input->ExpectTag(34)) goto parse_name;
        break;
      }
      
      // optional string name = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_name:
        DO_(::google::protobuf::internal::WireFormatLite::ReadString(
              input, this->mutable_name()));
        ::google::protobuf::internal::WireFormat::VerifyUTF8String(
          this->name().data(), this->name().length(),
          ::google::protobuf::internal::WireFormat::PARSE);
        if (input->ExpectTag(40)) goto parse_position;
        break;
      }
      
      // optional int32 position = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_position:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &position_));
        _set_bit(4);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DB_C_OfficerRightUse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    DB_C_OfficerRightUse::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional int32 rightId = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->rightid(), output);
  }
  
  // optional int64 uid = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->uid(), output);
  }
  
  // optional int32 endtime = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->endtime(), output);
  }
  
  // optional string name = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->name(), output);
  }
  
  // optional int32 position = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->position(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DB_C_OfficerRightUse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 rightId = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->rightid(), target);
  }
  
  // optional int64 uid = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->uid(), target);
  }
  
  // optional int32 endtime = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->endtime(), target);
  }
  
  // optional string name = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->name(), target);
  }
  
  // optional int32 position = 5;
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->position(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DB_C_OfficerRightUse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 rightId = 1;
    if (has_rightid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rightid());
    }
    
    // optional int64 uid = 2;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->uid());
    }
    
    // optional int32 endtime = 3;
    if (has_endtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->endtime());
    }
    
    // optional string name = 4;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }
    
    // optional int32 position = 5;
    if (has_position()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->position());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void DB_C_OfficerRightUse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DB_C_OfficerRightUse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DB_C_OfficerRightUse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DB_C_OfficerRightUse::MergeFrom(const DB_C_OfficerRightUse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_rightid(from.rightid());
    }
    if (from._has_bit(1)) {
      set_uid(from.uid());
    }
    if (from._has_bit(2)) {
      set_endtime(from.endtime());
    }
    if (from._has_bit(3)) {
      set_name(from.name());
    }
    if (from._has_bit(4)) {
      set_position(from.position());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DB_C_OfficerRightUse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DB_C_OfficerRightUse::CopyFrom(const DB_C_OfficerRightUse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DB_C_OfficerRightUse::IsInitialized() const {
  
  return true;
}

void DB_C_OfficerRightUse::Swap(DB_C_OfficerRightUse* other) {
  if (other != this) {
    std::swap(rightid_, other->rightid_);
    std::swap(uid_, other->uid_);
    std::swap(endtime_, other->endtime_);
    std::swap(name_, other->name_);
    std::swap(position_, other->position_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DB_C_OfficerRightUse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DB_C_OfficerRightUse_descriptor_;
  metadata.reflection = DB_C_OfficerRightUse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DB_C_City::kRegionFieldNumber;
const int DB_C_City::kCityIDFieldNumber;
const int DB_C_City::kCountryIDFieldNumber;
const int DB_C_City::kNpcFieldNumber;
const int DB_C_City::kNpcInitTMFieldNumber;
const int DB_C_City::kLtSaveRevisionFieldNumber;
const int DB_C_City::kLastBloodBtlFieldNumber;
const int DB_C_City::kOfficerRightUseLstFieldNumber;
#endif  // !_MSC_VER

DB_C_City::DB_C_City() {
  SharedCtor();
}

void DB_C_City::InitAsDefaultInstance() {
  lastbloodbtl_ = const_cast< ::DB_C_BloodBtl*>(&::DB_C_BloodBtl::default_instance());
}

DB_C_City::DB_C_City(const DB_C_City& from) {
  SharedCtor();
  MergeFrom(from);
}

void DB_C_City::SharedCtor() {
  _cached_size_ = 0;
  region_ = 0;
  cityid_ = 0;
  countryid_ = 0;
  npcinittm_ = 0;
  ltsaverevision_ = GOOGLE_LONGLONG(0);
  lastbloodbtl_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DB_C_City::~DB_C_City() {
  SharedDtor();
}

void DB_C_City::SharedDtor() {
  if (this != default_instance_) {
    delete lastbloodbtl_;
  }
}

const ::google::protobuf::Descriptor* DB_C_City::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DB_C_City_descriptor_;
}

const DB_C_City& DB_C_City::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_countryDB_2eproto();  return *default_instance_;
}

DB_C_City* DB_C_City::default_instance_ = NULL;

DB_C_City* DB_C_City::New() const {
  return new DB_C_City;
}

void DB_C_City::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    region_ = 0;
    cityid_ = 0;
    countryid_ = 0;
    npcinittm_ = 0;
    ltsaverevision_ = GOOGLE_LONGLONG(0);
    if (_has_bit(6)) {
      if (lastbloodbtl_ != NULL) lastbloodbtl_->::DB_C_BloodBtl::Clear();
    }
  }
  npc_.Clear();
  officerrightuselst_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DB_C_City::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 region = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &region_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_cityID;
        break;
      }
      
      // required int32 cityID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_cityID:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &cityid_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_countryID;
        break;
      }
      
      // required int32 countryID = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_countryID:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &countryid_));
        _set_bit(2);
        if (input->ExpectTag(42)) goto parse_npc;
        break;
      }
      
      // repeated .DB_C_NPC npc = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_npc:
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, add_npc()));
        if (input->ExpectTag(42)) goto parse_npc;
        if (input->ExpectTag(48)) goto parse_npcInitTM;
        break;
      }
      
      // optional int32 npcInitTM = 6 [default = 0];
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_npcInitTM:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &npcinittm_));
        _set_bit(4);
        if (input->ExpectTag(56)) goto parse_ltSaveRevision;
        break;
      }
      
      // optional int64 ltSaveRevision = 7 [default = 0];
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_ltSaveRevision:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt64(
              input, &ltsaverevision_));
        _set_bit(5);
        if (input->ExpectTag(66)) goto parse_lastBloodBtl;
        break;
      }
      
      // optional .DB_C_BloodBtl lastBloodBtl = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_lastBloodBtl:
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
             input, mutable_lastbloodbtl()));
        if (input->ExpectTag(74)) goto parse_officerRightUseLst;
        break;
      }
      
      // repeated .DB_C_OfficerRightUse officerRightUseLst = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_officerRightUseLst:
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, add_officerrightuselst()));
        if (input->ExpectTag(74)) goto parse_officerRightUseLst;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DB_C_City::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    DB_C_City::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // required int32 region = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->region(), output);
  }
  
  // required int32 cityID = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->cityid(), output);
  }
  
  // required int32 countryID = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->countryid(), output);
  }
  
  // repeated .DB_C_NPC npc = 5;
  for (int i = 0; i < this->npc_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      5, this->npc(i), output);
  }
  
  // optional int32 npcInitTM = 6 [default = 0];
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->npcinittm(), output);
  }
  
  // optional int64 ltSaveRevision = 7 [default = 0];
  if (_has_bit(5)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(7, this->ltsaverevision(), output);
  }
  
  // optional .DB_C_BloodBtl lastBloodBtl = 8;
  if (_has_bit(6)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      8, this->lastbloodbtl(), output);
  }
  
  // repeated .DB_C_OfficerRightUse officerRightUseLst = 9;
  for (int i = 0; i < this->officerrightuselst_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      9, this->officerrightuselst(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DB_C_City::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 region = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->region(), target);
  }
  
  // required int32 cityID = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->cityid(), target);
  }
  
  // required int32 countryID = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->countryid(), target);
  }
  
  // repeated .DB_C_NPC npc = 5;
  for (int i = 0; i < this->npc_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->npc(i), target);
  }
  
  // optional int32 npcInitTM = 6 [default = 0];
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->npcinittm(), target);
  }
  
  // optional int64 ltSaveRevision = 7 [default = 0];
  if (_has_bit(5)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(7, this->ltsaverevision(), target);
  }
  
  // optional .DB_C_BloodBtl lastBloodBtl = 8;
  if (_has_bit(6)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->lastbloodbtl(), target);
  }
  
  // repeated .DB_C_OfficerRightUse officerRightUseLst = 9;
  for (int i = 0; i < this->officerrightuselst_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->officerrightuselst(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DB_C_City::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 region = 1;
    if (has_region()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->region());
    }
    
    // required int32 cityID = 2;
    if (has_cityid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cityid());
    }
    
    // required int32 countryID = 3;
    if (has_countryid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->countryid());
    }
    
    // optional int32 npcInitTM = 6 [default = 0];
    if (has_npcinittm()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->npcinittm());
    }
    
    // optional int64 ltSaveRevision = 7 [default = 0];
    if (has_ltsaverevision()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->ltsaverevision());
    }
    
    // optional .DB_C_BloodBtl lastBloodBtl = 8;
    if (has_lastbloodbtl()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->lastbloodbtl());
    }
    
  }
  // repeated .DB_C_NPC npc = 5;
  total_size += 1 * this->npc_size();
  for (int i = 0; i < this->npc_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->npc(i));
  }
  
  // repeated .DB_C_OfficerRightUse officerRightUseLst = 9;
  total_size += 1 * this->officerrightuselst_size();
  for (int i = 0; i < this->officerrightuselst_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->officerrightuselst(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void DB_C_City::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DB_C_City* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DB_C_City*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DB_C_City::MergeFrom(const DB_C_City& from) {
  GOOGLE_CHECK_NE(&from, this);
  npc_.MergeFrom(from.npc_);
  officerrightuselst_.MergeFrom(from.officerrightuselst_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_region(from.region());
    }
    if (from._has_bit(1)) {
      set_cityid(from.cityid());
    }
    if (from._has_bit(2)) {
      set_countryid(from.countryid());
    }
    if (from._has_bit(4)) {
      set_npcinittm(from.npcinittm());
    }
    if (from._has_bit(5)) {
      set_ltsaverevision(from.ltsaverevision());
    }
    if (from._has_bit(6)) {
      mutable_lastbloodbtl()->::DB_C_BloodBtl::MergeFrom(from.lastbloodbtl());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DB_C_City::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DB_C_City::CopyFrom(const DB_C_City& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DB_C_City::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  
  return true;
}

void DB_C_City::Swap(DB_C_City* other) {
  if (other != this) {
    std::swap(region_, other->region_);
    std::swap(cityid_, other->cityid_);
    std::swap(countryid_, other->countryid_);
    npc_.Swap(&other->npc_);
    std::swap(npcinittm_, other->npcinittm_);
    std::swap(ltsaverevision_, other->ltsaverevision_);
    std::swap(lastbloodbtl_, other->lastbloodbtl_);
    officerrightuselst_.Swap(&other->officerrightuselst_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DB_C_City::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DB_C_City_descriptor_;
  metadata.reflection = DB_C_City_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DB_C_CityBuffData::kFlagFieldNumber;
const int DB_C_CityBuffData::kRandomBuffsFieldNumber;
const int DB_C_CityBuffData::kStateFieldNumber;
#endif  // !_MSC_VER

DB_C_CityBuffData::DB_C_CityBuffData() {
  SharedCtor();
}

void DB_C_CityBuffData::InitAsDefaultInstance() {
}

DB_C_CityBuffData::DB_C_CityBuffData(const DB_C_CityBuffData& from) {
  SharedCtor();
  MergeFrom(from);
}

void DB_C_CityBuffData::SharedCtor() {
  _cached_size_ = 0;
  flag_ = 0;
  state_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DB_C_CityBuffData::~DB_C_CityBuffData() {
  SharedDtor();
}

void DB_C_CityBuffData::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* DB_C_CityBuffData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DB_C_CityBuffData_descriptor_;
}

const DB_C_CityBuffData& DB_C_CityBuffData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_countryDB_2eproto();  return *default_instance_;
}

DB_C_CityBuffData* DB_C_CityBuffData::default_instance_ = NULL;

DB_C_CityBuffData* DB_C_CityBuffData::New() const {
  return new DB_C_CityBuffData;
}

void DB_C_CityBuffData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    flag_ = 0;
    state_ = 0;
  }
  randombuffs_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DB_C_CityBuffData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 flag = 1 [default = 0];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &flag_));
        _set_bit(0);
        if (input->ExpectTag(18)) goto parse_randomBuffs;
        break;
      }
      
      // repeated .DB_C_RandomBuff randomBuffs = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_randomBuffs:
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, add_randombuffs()));
        if (input->ExpectTag(18)) goto parse_randomBuffs;
        if (input->ExpectTag(24)) goto parse_state;
        break;
      }
      
      // optional int32 state = 3 [default = 0];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_state:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &state_));
        _set_bit(2);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DB_C_CityBuffData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    DB_C_CityBuffData::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional int32 flag = 1 [default = 0];
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->flag(), output);
  }
  
  // repeated .DB_C_RandomBuff randomBuffs = 2;
  for (int i = 0; i < this->randombuffs_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      2, this->randombuffs(i), output);
  }
  
  // optional int32 state = 3 [default = 0];
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->state(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DB_C_CityBuffData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 flag = 1 [default = 0];
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->flag(), target);
  }
  
  // repeated .DB_C_RandomBuff randomBuffs = 2;
  for (int i = 0; i < this->randombuffs_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->randombuffs(i), target);
  }
  
  // optional int32 state = 3 [default = 0];
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->state(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DB_C_CityBuffData::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 flag = 1 [default = 0];
    if (has_flag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->flag());
    }
    
    // optional int32 state = 3 [default = 0];
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->state());
    }
    
  }
  // repeated .DB_C_RandomBuff randomBuffs = 2;
  total_size += 1 * this->randombuffs_size();
  for (int i = 0; i < this->randombuffs_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->randombuffs(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void DB_C_CityBuffData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DB_C_CityBuffData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DB_C_CityBuffData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DB_C_CityBuffData::MergeFrom(const DB_C_CityBuffData& from) {
  GOOGLE_CHECK_NE(&from, this);
  randombuffs_.MergeFrom(from.randombuffs_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_flag(from.flag());
    }
    if (from._has_bit(2)) {
      set_state(from.state());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DB_C_CityBuffData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DB_C_CityBuffData::CopyFrom(const DB_C_CityBuffData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DB_C_CityBuffData::IsInitialized() const {
  
  return true;
}

void DB_C_CityBuffData::Swap(DB_C_CityBuffData* other) {
  if (other != this) {
    std::swap(flag_, other->flag_);
    randombuffs_.Swap(&other->randombuffs_);
    std::swap(state_, other->state_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DB_C_CityBuffData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DB_C_CityBuffData_descriptor_;
  metadata.reflection = DB_C_CityBuffData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DB_C_RandomBuff::kCityIDFieldNumber;
const int DB_C_RandomBuff::kBuffIDFieldNumber;
const int DB_C_RandomBuff::kActiveTmFieldNumber;
#endif  // !_MSC_VER

DB_C_RandomBuff::DB_C_RandomBuff() {
  SharedCtor();
}

void DB_C_RandomBuff::InitAsDefaultInstance() {
}

DB_C_RandomBuff::DB_C_RandomBuff(const DB_C_RandomBuff& from) {
  SharedCtor();
  MergeFrom(from);
}

void DB_C_RandomBuff::SharedCtor() {
  _cached_size_ = 0;
  cityid_ = 0;
  buffid_ = 0;
  activetm_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DB_C_RandomBuff::~DB_C_RandomBuff() {
  SharedDtor();
}

void DB_C_RandomBuff::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* DB_C_RandomBuff::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DB_C_RandomBuff_descriptor_;
}

const DB_C_RandomBuff& DB_C_RandomBuff::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_countryDB_2eproto();  return *default_instance_;
}

DB_C_RandomBuff* DB_C_RandomBuff::default_instance_ = NULL;

DB_C_RandomBuff* DB_C_RandomBuff::New() const {
  return new DB_C_RandomBuff;
}

void DB_C_RandomBuff::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    cityid_ = 0;
    buffid_ = 0;
    activetm_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DB_C_RandomBuff::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 cityID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &cityid_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_buffID;
        break;
      }
      
      // optional int32 buffID = 2 [default = 0];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_buffID:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &buffid_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_activeTm;
        break;
      }
      
      // optional int32 activeTm = 3 [default = 0];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_activeTm:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &activetm_));
        _set_bit(2);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DB_C_RandomBuff::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    DB_C_RandomBuff::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional int32 cityID = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->cityid(), output);
  }
  
  // optional int32 buffID = 2 [default = 0];
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->buffid(), output);
  }
  
  // optional int32 activeTm = 3 [default = 0];
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->activetm(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DB_C_RandomBuff::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 cityID = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->cityid(), target);
  }
  
  // optional int32 buffID = 2 [default = 0];
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->buffid(), target);
  }
  
  // optional int32 activeTm = 3 [default = 0];
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->activetm(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DB_C_RandomBuff::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 cityID = 1;
    if (has_cityid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cityid());
    }
    
    // optional int32 buffID = 2 [default = 0];
    if (has_buffid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->buffid());
    }
    
    // optional int32 activeTm = 3 [default = 0];
    if (has_activetm()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->activetm());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void DB_C_RandomBuff::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DB_C_RandomBuff* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DB_C_RandomBuff*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DB_C_RandomBuff::MergeFrom(const DB_C_RandomBuff& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_cityid(from.cityid());
    }
    if (from._has_bit(1)) {
      set_buffid(from.buffid());
    }
    if (from._has_bit(2)) {
      set_activetm(from.activetm());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DB_C_RandomBuff::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DB_C_RandomBuff::CopyFrom(const DB_C_RandomBuff& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DB_C_RandomBuff::IsInitialized() const {
  
  return true;
}

void DB_C_RandomBuff::Swap(DB_C_RandomBuff* other) {
  if (other != this) {
    std::swap(cityid_, other->cityid_);
    std::swap(buffid_, other->buffid_);
    std::swap(activetm_, other->activetm_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DB_C_RandomBuff::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DB_C_RandomBuff_descriptor_;
  metadata.reflection = DB_C_RandomBuff_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DB_Arena_Rank_NPC::kNpcidFieldNumber;
const int DB_Arena_Rank_NPC::kNpcindexFieldNumber;
#endif  // !_MSC_VER

DB_Arena_Rank_NPC::DB_Arena_Rank_NPC() {
  SharedCtor();
}

void DB_Arena_Rank_NPC::InitAsDefaultInstance() {
}

DB_Arena_Rank_NPC::DB_Arena_Rank_NPC(const DB_Arena_Rank_NPC& from) {
  SharedCtor();
  MergeFrom(from);
}

void DB_Arena_Rank_NPC::SharedCtor() {
  _cached_size_ = 0;
  npcid_ = 0;
  npcindex_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DB_Arena_Rank_NPC::~DB_Arena_Rank_NPC() {
  SharedDtor();
}

void DB_Arena_Rank_NPC::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* DB_Arena_Rank_NPC::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DB_Arena_Rank_NPC_descriptor_;
}

const DB_Arena_Rank_NPC& DB_Arena_Rank_NPC::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_countryDB_2eproto();  return *default_instance_;
}

DB_Arena_Rank_NPC* DB_Arena_Rank_NPC::default_instance_ = NULL;

DB_Arena_Rank_NPC* DB_Arena_Rank_NPC::New() const {
  return new DB_Arena_Rank_NPC;
}

void DB_Arena_Rank_NPC::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    npcid_ = 0;
    npcindex_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DB_Arena_Rank_NPC::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 npcid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &npcid_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_npcindex;
        break;
      }
      
      // optional int32 npcindex = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_npcindex:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &npcindex_));
        _set_bit(1);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DB_Arena_Rank_NPC::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    DB_Arena_Rank_NPC::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional int32 npcid = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->npcid(), output);
  }
  
  // optional int32 npcindex = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->npcindex(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DB_Arena_Rank_NPC::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 npcid = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->npcid(), target);
  }
  
  // optional int32 npcindex = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->npcindex(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DB_Arena_Rank_NPC::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 npcid = 1;
    if (has_npcid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->npcid());
    }
    
    // optional int32 npcindex = 2;
    if (has_npcindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->npcindex());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void DB_Arena_Rank_NPC::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DB_Arena_Rank_NPC* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DB_Arena_Rank_NPC*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DB_Arena_Rank_NPC::MergeFrom(const DB_Arena_Rank_NPC& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_npcid(from.npcid());
    }
    if (from._has_bit(1)) {
      set_npcindex(from.npcindex());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DB_Arena_Rank_NPC::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DB_Arena_Rank_NPC::CopyFrom(const DB_Arena_Rank_NPC& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DB_Arena_Rank_NPC::IsInitialized() const {
  
  return true;
}

void DB_Arena_Rank_NPC::Swap(DB_Arena_Rank_NPC* other) {
  if (other != this) {
    std::swap(npcid_, other->npcid_);
    std::swap(npcindex_, other->npcindex_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DB_Arena_Rank_NPC::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DB_Arena_Rank_NPC_descriptor_;
  metadata.reflection = DB_Arena_Rank_NPC_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DB_Arena_Rank_List::kUidlistFieldNumber;
#endif  // !_MSC_VER

DB_Arena_Rank_List::DB_Arena_Rank_List() {
  SharedCtor();
}

void DB_Arena_Rank_List::InitAsDefaultInstance() {
}

DB_Arena_Rank_List::DB_Arena_Rank_List(const DB_Arena_Rank_List& from) {
  SharedCtor();
  MergeFrom(from);
}

void DB_Arena_Rank_List::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DB_Arena_Rank_List::~DB_Arena_Rank_List() {
  SharedDtor();
}

void DB_Arena_Rank_List::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* DB_Arena_Rank_List::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DB_Arena_Rank_List_descriptor_;
}

const DB_Arena_Rank_List& DB_Arena_Rank_List::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_countryDB_2eproto();  return *default_instance_;
}

DB_Arena_Rank_List* DB_Arena_Rank_List::default_instance_ = NULL;

DB_Arena_Rank_List* DB_Arena_Rank_List::New() const {
  return new DB_Arena_Rank_List;
}

void DB_Arena_Rank_List::Clear() {
  uidlist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DB_Arena_Rank_List::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated int64 uidlist = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_uidlist:
        ::google::protobuf::int64 value;
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt64(
              input, &value));
        add_uidlist(value);
        if (input->ExpectTag(8)) goto parse_uidlist;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DB_Arena_Rank_List::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    DB_Arena_Rank_List::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // repeated int64 uidlist = 1;
  for (int i = 0; i < this->uidlist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(
      1, this->uidlist(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DB_Arena_Rank_List::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated int64 uidlist = 1;
  for (int i = 0; i < this->uidlist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt64ToArray(1, this->uidlist(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DB_Arena_Rank_List::ByteSize() const {
  int total_size = 0;
  
  // repeated int64 uidlist = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->uidlist_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int64Size(this->uidlist(i));
    }
    total_size += 1 * this->uidlist_size() + data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void DB_Arena_Rank_List::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DB_Arena_Rank_List* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DB_Arena_Rank_List*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DB_Arena_Rank_List::MergeFrom(const DB_Arena_Rank_List& from) {
  GOOGLE_CHECK_NE(&from, this);
  uidlist_.MergeFrom(from.uidlist_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DB_Arena_Rank_List::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DB_Arena_Rank_List::CopyFrom(const DB_Arena_Rank_List& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DB_Arena_Rank_List::IsInitialized() const {
  
  return true;
}

void DB_Arena_Rank_List::Swap(DB_Arena_Rank_List* other) {
  if (other != this) {
    uidlist_.Swap(&other->uidlist_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DB_Arena_Rank_List::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DB_Arena_Rank_List_descriptor_;
  metadata.reflection = DB_Arena_Rank_List_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DB_Arena_Score_Unit::kUidFieldNumber;
const int DB_Arena_Score_Unit::kScoreFieldNumber;
#endif  // !_MSC_VER

DB_Arena_Score_Unit::DB_Arena_Score_Unit() {
  SharedCtor();
}

void DB_Arena_Score_Unit::InitAsDefaultInstance() {
}

DB_Arena_Score_Unit::DB_Arena_Score_Unit(const DB_Arena_Score_Unit& from) {
  SharedCtor();
  MergeFrom(from);
}

void DB_Arena_Score_Unit::SharedCtor() {
  _cached_size_ = 0;
  uid_ = GOOGLE_LONGLONG(0);
  score_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DB_Arena_Score_Unit::~DB_Arena_Score_Unit() {
  SharedDtor();
}

void DB_Arena_Score_Unit::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* DB_Arena_Score_Unit::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DB_Arena_Score_Unit_descriptor_;
}

const DB_Arena_Score_Unit& DB_Arena_Score_Unit::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_countryDB_2eproto();  return *default_instance_;
}

DB_Arena_Score_Unit* DB_Arena_Score_Unit::default_instance_ = NULL;

DB_Arena_Score_Unit* DB_Arena_Score_Unit::New() const {
  return new DB_Arena_Score_Unit;
}

void DB_Arena_Score_Unit::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    uid_ = GOOGLE_LONGLONG(0);
    score_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DB_Arena_Score_Unit::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 uid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt64(
              input, &uid_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_score;
        break;
      }
      
      // optional int32 score = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_score:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &score_));
        _set_bit(1);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DB_Arena_Score_Unit::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    DB_Arena_Score_Unit::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional int64 uid = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->uid(), output);
  }
  
  // optional int32 score = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->score(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DB_Arena_Score_Unit::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int64 uid = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->uid(), target);
  }
  
  // optional int32 score = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->score(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DB_Arena_Score_Unit::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 uid = 1;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->uid());
    }
    
    // optional int32 score = 2;
    if (has_score()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->score());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void DB_Arena_Score_Unit::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DB_Arena_Score_Unit* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DB_Arena_Score_Unit*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DB_Arena_Score_Unit::MergeFrom(const DB_Arena_Score_Unit& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_uid(from.uid());
    }
    if (from._has_bit(1)) {
      set_score(from.score());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DB_Arena_Score_Unit::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DB_Arena_Score_Unit::CopyFrom(const DB_Arena_Score_Unit& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DB_Arena_Score_Unit::IsInitialized() const {
  
  return true;
}

void DB_Arena_Score_Unit::Swap(DB_Arena_Score_Unit* other) {
  if (other != this) {
    std::swap(uid_, other->uid_);
    std::swap(score_, other->score_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DB_Arena_Score_Unit::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DB_Arena_Score_Unit_descriptor_;
  metadata.reflection = DB_Arena_Score_Unit_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DB_Arena_Score_List::kScorelistFieldNumber;
const int DB_Arena_Score_List::kNActiveFieldNumber;
#endif  // !_MSC_VER

DB_Arena_Score_List::DB_Arena_Score_List() {
  SharedCtor();
}

void DB_Arena_Score_List::InitAsDefaultInstance() {
}

DB_Arena_Score_List::DB_Arena_Score_List(const DB_Arena_Score_List& from) {
  SharedCtor();
  MergeFrom(from);
}

void DB_Arena_Score_List::SharedCtor() {
  _cached_size_ = 0;
  nactive_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DB_Arena_Score_List::~DB_Arena_Score_List() {
  SharedDtor();
}

void DB_Arena_Score_List::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* DB_Arena_Score_List::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DB_Arena_Score_List_descriptor_;
}

const DB_Arena_Score_List& DB_Arena_Score_List::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_countryDB_2eproto();  return *default_instance_;
}

DB_Arena_Score_List* DB_Arena_Score_List::default_instance_ = NULL;

DB_Arena_Score_List* DB_Arena_Score_List::New() const {
  return new DB_Arena_Score_List;
}

void DB_Arena_Score_List::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    nactive_ = 0;
  }
  scorelist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DB_Arena_Score_List::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .DB_Arena_Score_Unit scorelist = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_scorelist:
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, add_scorelist()));
        if (input->ExpectTag(10)) goto parse_scorelist;
        if (input->ExpectTag(16)) goto parse_nActive;
        break;
      }
      
      // optional int32 nActive = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_nActive:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &nactive_));
        _set_bit(1);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DB_Arena_Score_List::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    DB_Arena_Score_List::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // repeated .DB_Arena_Score_Unit scorelist = 1;
  for (int i = 0; i < this->scorelist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      1, this->scorelist(i), output);
  }
  
  // optional int32 nActive = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->nactive(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DB_Arena_Score_List::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .DB_Arena_Score_Unit scorelist = 1;
  for (int i = 0; i < this->scorelist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->scorelist(i), target);
  }
  
  // optional int32 nActive = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->nactive(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DB_Arena_Score_List::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional int32 nActive = 2;
    if (has_nactive()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->nactive());
    }
    
  }
  // repeated .DB_Arena_Score_Unit scorelist = 1;
  total_size += 1 * this->scorelist_size();
  for (int i = 0; i < this->scorelist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->scorelist(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void DB_Arena_Score_List::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DB_Arena_Score_List* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DB_Arena_Score_List*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DB_Arena_Score_List::MergeFrom(const DB_Arena_Score_List& from) {
  GOOGLE_CHECK_NE(&from, this);
  scorelist_.MergeFrom(from.scorelist_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from._has_bit(1)) {
      set_nactive(from.nactive());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DB_Arena_Score_List::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DB_Arena_Score_List::CopyFrom(const DB_Arena_Score_List& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DB_Arena_Score_List::IsInitialized() const {
  
  return true;
}

void DB_Arena_Score_List::Swap(DB_Arena_Score_List* other) {
  if (other != this) {
    scorelist_.Swap(&other->scorelist_);
    std::swap(nactive_, other->nactive_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DB_Arena_Score_List::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DB_Arena_Score_List_descriptor_;
  metadata.reflection = DB_Arena_Score_List_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DB_Arena_Rank::kArenaRankNpcFieldNumber;
const int DB_Arena_Rank::kArenaRankLastFieldNumber;
const int DB_Arena_Rank::kNRankTimeLastFieldNumber;
const int DB_Arena_Rank::kArenaScoreListFieldNumber;
const int DB_Arena_Rank::kArenaScoreListOldFieldNumber;
const int DB_Arena_Rank::kCurrentScoreListFieldNumber;
#endif  // !_MSC_VER

DB_Arena_Rank::DB_Arena_Rank() {
  SharedCtor();
}

void DB_Arena_Rank::InitAsDefaultInstance() {
  arenaranklast_ = const_cast< ::DB_Arena_Rank_List*>(&::DB_Arena_Rank_List::default_instance());
  arenascorelist_ = const_cast< ::DB_Arena_Score_List*>(&::DB_Arena_Score_List::default_instance());
  arenascorelistold_ = const_cast< ::DB_Arena_Score_List*>(&::DB_Arena_Score_List::default_instance());
  currentscorelist_ = const_cast< ::DB_Arena_Score_List*>(&::DB_Arena_Score_List::default_instance());
}

DB_Arena_Rank::DB_Arena_Rank(const DB_Arena_Rank& from) {
  SharedCtor();
  MergeFrom(from);
}

void DB_Arena_Rank::SharedCtor() {
  _cached_size_ = 0;
  arenaranklast_ = NULL;
  nranktimelast_ = 0u;
  arenascorelist_ = NULL;
  arenascorelistold_ = NULL;
  currentscorelist_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DB_Arena_Rank::~DB_Arena_Rank() {
  SharedDtor();
}

void DB_Arena_Rank::SharedDtor() {
  if (this != default_instance_) {
    delete arenaranklast_;
    delete arenascorelist_;
    delete arenascorelistold_;
    delete currentscorelist_;
  }
}

const ::google::protobuf::Descriptor* DB_Arena_Rank::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DB_Arena_Rank_descriptor_;
}

const DB_Arena_Rank& DB_Arena_Rank::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_countryDB_2eproto();  return *default_instance_;
}

DB_Arena_Rank* DB_Arena_Rank::default_instance_ = NULL;

DB_Arena_Rank* DB_Arena_Rank::New() const {
  return new DB_Arena_Rank;
}

void DB_Arena_Rank::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (_has_bit(1)) {
      if (arenaranklast_ != NULL) arenaranklast_->::DB_Arena_Rank_List::Clear();
    }
    nranktimelast_ = 0u;
    if (_has_bit(3)) {
      if (arenascorelist_ != NULL) arenascorelist_->::DB_Arena_Score_List::Clear();
    }
    if (_has_bit(4)) {
      if (arenascorelistold_ != NULL) arenascorelistold_->::DB_Arena_Score_List::Clear();
    }
    if (_has_bit(5)) {
      if (currentscorelist_ != NULL) currentscorelist_->::DB_Arena_Score_List::Clear();
    }
  }
  arenaranknpc_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DB_Arena_Rank::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .DB_Arena_Rank_NPC arenaRankNpc = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_arenaRankNpc:
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, add_arenaranknpc()));
        if (input->ExpectTag(10)) goto parse_arenaRankNpc;
        if (input->ExpectTag(18)) goto parse_arenaRankLast;
        break;
      }
      
      // optional .DB_Arena_Rank_List arenaRankLast = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_arenaRankLast:
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
             input, mutable_arenaranklast()));
        if (input->ExpectTag(24)) goto parse_nRankTimeLast;
        break;
      }
      
      // optional uint32 nRankTimeLast = 3 [default = 0];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_nRankTimeLast:
        DO_(::google::protobuf::internal::WireFormatLite::ReadUInt32(
              input, &nranktimelast_));
        _set_bit(2);
        if (input->ExpectTag(34)) goto parse_arenaScoreList;
        break;
      }
      
      // optional .DB_Arena_Score_List arenaScoreList = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_arenaScoreList:
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
             input, mutable_arenascorelist()));
        if (input->ExpectTag(42)) goto parse_arenaScoreListOld;
        break;
      }
      
      // optional .DB_Arena_Score_List arenaScoreListOld = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_arenaScoreListOld:
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
             input, mutable_arenascorelistold()));
        if (input->ExpectTag(50)) goto parse_currentScoreList;
        break;
      }
      
      // optional .DB_Arena_Score_List currentScoreList = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_currentScoreList:
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
             input, mutable_currentscorelist()));
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DB_Arena_Rank::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    DB_Arena_Rank::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // repeated .DB_Arena_Rank_NPC arenaRankNpc = 1;
  for (int i = 0; i < this->arenaranknpc_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      1, this->arenaranknpc(i), output);
  }
  
  // optional .DB_Arena_Rank_List arenaRankLast = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      2, this->arenaranklast(), output);
  }
  
  // optional uint32 nRankTimeLast = 3 [default = 0];
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->nranktimelast(), output);
  }
  
  // optional .DB_Arena_Score_List arenaScoreList = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      4, this->arenascorelist(), output);
  }
  
  // optional .DB_Arena_Score_List arenaScoreListOld = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      5, this->arenascorelistold(), output);
  }
  
  // optional .DB_Arena_Score_List currentScoreList = 6;
  if (_has_bit(5)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      6, this->currentscorelist(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DB_Arena_Rank::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .DB_Arena_Rank_NPC arenaRankNpc = 1;
  for (int i = 0; i < this->arenaranknpc_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->arenaranknpc(i), target);
  }
  
  // optional .DB_Arena_Rank_List arenaRankLast = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->arenaranklast(), target);
  }
  
  // optional uint32 nRankTimeLast = 3 [default = 0];
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->nranktimelast(), target);
  }
  
  // optional .DB_Arena_Score_List arenaScoreList = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->arenascorelist(), target);
  }
  
  // optional .DB_Arena_Score_List arenaScoreListOld = 5;
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->arenascorelistold(), target);
  }
  
  // optional .DB_Arena_Score_List currentScoreList = 6;
  if (_has_bit(5)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->currentscorelist(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DB_Arena_Rank::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional .DB_Arena_Rank_List arenaRankLast = 2;
    if (has_arenaranklast()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->arenaranklast());
    }
    
    // optional uint32 nRankTimeLast = 3 [default = 0];
    if (has_nranktimelast()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->nranktimelast());
    }
    
    // optional .DB_Arena_Score_List arenaScoreList = 4;
    if (has_arenascorelist()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->arenascorelist());
    }
    
    // optional .DB_Arena_Score_List arenaScoreListOld = 5;
    if (has_arenascorelistold()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->arenascorelistold());
    }
    
    // optional .DB_Arena_Score_List currentScoreList = 6;
    if (has_currentscorelist()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->currentscorelist());
    }
    
  }
  // repeated .DB_Arena_Rank_NPC arenaRankNpc = 1;
  total_size += 1 * this->arenaranknpc_size();
  for (int i = 0; i < this->arenaranknpc_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->arenaranknpc(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void DB_Arena_Rank::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DB_Arena_Rank* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DB_Arena_Rank*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DB_Arena_Rank::MergeFrom(const DB_Arena_Rank& from) {
  GOOGLE_CHECK_NE(&from, this);
  arenaranknpc_.MergeFrom(from.arenaranknpc_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from._has_bit(1)) {
      mutable_arenaranklast()->::DB_Arena_Rank_List::MergeFrom(from.arenaranklast());
    }
    if (from._has_bit(2)) {
      set_nranktimelast(from.nranktimelast());
    }
    if (from._has_bit(3)) {
      mutable_arenascorelist()->::DB_Arena_Score_List::MergeFrom(from.arenascorelist());
    }
    if (from._has_bit(4)) {
      mutable_arenascorelistold()->::DB_Arena_Score_List::MergeFrom(from.arenascorelistold());
    }
    if (from._has_bit(5)) {
      mutable_currentscorelist()->::DB_Arena_Score_List::MergeFrom(from.currentscorelist());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DB_Arena_Rank::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DB_Arena_Rank::CopyFrom(const DB_Arena_Rank& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DB_Arena_Rank::IsInitialized() const {
  
  return true;
}

void DB_Arena_Rank::Swap(DB_Arena_Rank* other) {
  if (other != this) {
    arenaranknpc_.Swap(&other->arenaranknpc_);
    std::swap(arenaranklast_, other->arenaranklast_);
    std::swap(nranktimelast_, other->nranktimelast_);
    std::swap(arenascorelist_, other->arenascorelist_);
    std::swap(arenascorelistold_, other->arenascorelistold_);
    std::swap(currentscorelist_, other->currentscorelist_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DB_Arena_Rank::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DB_Arena_Rank_descriptor_;
  metadata.reflection = DB_Arena_Rank_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DB_WorldArena_Rank_Unit::kUidFieldNumber;
#endif  // !_MSC_VER

DB_WorldArena_Rank_Unit::DB_WorldArena_Rank_Unit() {
  SharedCtor();
}

void DB_WorldArena_Rank_Unit::InitAsDefaultInstance() {
}

DB_WorldArena_Rank_Unit::DB_WorldArena_Rank_Unit(const DB_WorldArena_Rank_Unit& from) {
  SharedCtor();
  MergeFrom(from);
}

void DB_WorldArena_Rank_Unit::SharedCtor() {
  _cached_size_ = 0;
  uid_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DB_WorldArena_Rank_Unit::~DB_WorldArena_Rank_Unit() {
  SharedDtor();
}

void DB_WorldArena_Rank_Unit::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* DB_WorldArena_Rank_Unit::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DB_WorldArena_Rank_Unit_descriptor_;
}

const DB_WorldArena_Rank_Unit& DB_WorldArena_Rank_Unit::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_countryDB_2eproto();  return *default_instance_;
}

DB_WorldArena_Rank_Unit* DB_WorldArena_Rank_Unit::default_instance_ = NULL;

DB_WorldArena_Rank_Unit* DB_WorldArena_Rank_Unit::New() const {
  return new DB_WorldArena_Rank_Unit;
}

void DB_WorldArena_Rank_Unit::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    uid_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DB_WorldArena_Rank_Unit::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 uid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt64(
              input, &uid_));
        _set_bit(0);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DB_WorldArena_Rank_Unit::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    DB_WorldArena_Rank_Unit::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional int64 uid = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->uid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DB_WorldArena_Rank_Unit::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int64 uid = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->uid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DB_WorldArena_Rank_Unit::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 uid = 1;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->uid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void DB_WorldArena_Rank_Unit::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DB_WorldArena_Rank_Unit* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DB_WorldArena_Rank_Unit*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DB_WorldArena_Rank_Unit::MergeFrom(const DB_WorldArena_Rank_Unit& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_uid(from.uid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DB_WorldArena_Rank_Unit::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DB_WorldArena_Rank_Unit::CopyFrom(const DB_WorldArena_Rank_Unit& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DB_WorldArena_Rank_Unit::IsInitialized() const {
  
  return true;
}

void DB_WorldArena_Rank_Unit::Swap(DB_WorldArena_Rank_Unit* other) {
  if (other != this) {
    std::swap(uid_, other->uid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DB_WorldArena_Rank_Unit::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DB_WorldArena_Rank_Unit_descriptor_;
  metadata.reflection = DB_WorldArena_Rank_Unit_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DB_WorldArena_Rank_List::kWorldArenaRankListFieldNumber;
const int DB_WorldArena_Rank_List::kRankTimeLastFieldNumber;
const int DB_WorldArena_Rank_List::kActivityIndexFieldNumber;
#endif  // !_MSC_VER

DB_WorldArena_Rank_List::DB_WorldArena_Rank_List() {
  SharedCtor();
}

void DB_WorldArena_Rank_List::InitAsDefaultInstance() {
}

DB_WorldArena_Rank_List::DB_WorldArena_Rank_List(const DB_WorldArena_Rank_List& from) {
  SharedCtor();
  MergeFrom(from);
}

void DB_WorldArena_Rank_List::SharedCtor() {
  _cached_size_ = 0;
  ranktimelast_ = 0;
  activityindex_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DB_WorldArena_Rank_List::~DB_WorldArena_Rank_List() {
  SharedDtor();
}

void DB_WorldArena_Rank_List::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* DB_WorldArena_Rank_List::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DB_WorldArena_Rank_List_descriptor_;
}

const DB_WorldArena_Rank_List& DB_WorldArena_Rank_List::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_countryDB_2eproto();  return *default_instance_;
}

DB_WorldArena_Rank_List* DB_WorldArena_Rank_List::default_instance_ = NULL;

DB_WorldArena_Rank_List* DB_WorldArena_Rank_List::New() const {
  return new DB_WorldArena_Rank_List;
}

void DB_WorldArena_Rank_List::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    ranktimelast_ = 0;
    activityindex_ = 0;
  }
  worldarenaranklist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DB_WorldArena_Rank_List::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .DB_WorldArena_Rank_Unit worldArenaRankList = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_worldArenaRankList:
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, add_worldarenaranklist()));
        if (input->ExpectTag(10)) goto parse_worldArenaRankList;
        if (input->ExpectTag(16)) goto parse_rankTimeLast;
        break;
      }
      
      // optional int32 rankTimeLast = 2 [default = 0];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_rankTimeLast:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &ranktimelast_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_activityIndex;
        break;
      }
      
      // optional int32 activityIndex = 3 [default = 0];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_activityIndex:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &activityindex_));
        _set_bit(2);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DB_WorldArena_Rank_List::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    DB_WorldArena_Rank_List::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // repeated .DB_WorldArena_Rank_Unit worldArenaRankList = 1;
  for (int i = 0; i < this->worldarenaranklist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      1, this->worldarenaranklist(i), output);
  }
  
  // optional int32 rankTimeLast = 2 [default = 0];
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->ranktimelast(), output);
  }
  
  // optional int32 activityIndex = 3 [default = 0];
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->activityindex(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DB_WorldArena_Rank_List::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .DB_WorldArena_Rank_Unit worldArenaRankList = 1;
  for (int i = 0; i < this->worldarenaranklist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->worldarenaranklist(i), target);
  }
  
  // optional int32 rankTimeLast = 2 [default = 0];
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->ranktimelast(), target);
  }
  
  // optional int32 activityIndex = 3 [default = 0];
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->activityindex(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DB_WorldArena_Rank_List::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional int32 rankTimeLast = 2 [default = 0];
    if (has_ranktimelast()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ranktimelast());
    }
    
    // optional int32 activityIndex = 3 [default = 0];
    if (has_activityindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->activityindex());
    }
    
  }
  // repeated .DB_WorldArena_Rank_Unit worldArenaRankList = 1;
  total_size += 1 * this->worldarenaranklist_size();
  for (int i = 0; i < this->worldarenaranklist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->worldarenaranklist(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void DB_WorldArena_Rank_List::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DB_WorldArena_Rank_List* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DB_WorldArena_Rank_List*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DB_WorldArena_Rank_List::MergeFrom(const DB_WorldArena_Rank_List& from) {
  GOOGLE_CHECK_NE(&from, this);
  worldarenaranklist_.MergeFrom(from.worldarenaranklist_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from._has_bit(1)) {
      set_ranktimelast(from.ranktimelast());
    }
    if (from._has_bit(2)) {
      set_activityindex(from.activityindex());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DB_WorldArena_Rank_List::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DB_WorldArena_Rank_List::CopyFrom(const DB_WorldArena_Rank_List& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DB_WorldArena_Rank_List::IsInitialized() const {
  
  return true;
}

void DB_WorldArena_Rank_List::Swap(DB_WorldArena_Rank_List* other) {
  if (other != this) {
    worldarenaranklist_.Swap(&other->worldarenaranklist_);
    std::swap(ranktimelast_, other->ranktimelast_);
    std::swap(activityindex_, other->activityindex_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DB_WorldArena_Rank_List::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DB_WorldArena_Rank_List_descriptor_;
  metadata.reflection = DB_WorldArena_Rank_List_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DB_WorldArena_Rank::kWorldArenaRankNpcFieldNumber;
const int DB_WorldArena_Rank::kWorldArenaRankLastFieldNumber;
const int DB_WorldArena_Rank::kWorldArenaRankAllFieldNumber;
const int DB_WorldArena_Rank::kCurrentActivityIndexFieldNumber;
const int DB_WorldArena_Rank::kRankRecordIndexFieldNumber;
#endif  // !_MSC_VER

DB_WorldArena_Rank::DB_WorldArena_Rank() {
  SharedCtor();
}

void DB_WorldArena_Rank::InitAsDefaultInstance() {
  worldarenaranklast_ = const_cast< ::DB_WorldArena_Rank_List*>(&::DB_WorldArena_Rank_List::default_instance());
}

DB_WorldArena_Rank::DB_WorldArena_Rank(const DB_WorldArena_Rank& from) {
  SharedCtor();
  MergeFrom(from);
}

void DB_WorldArena_Rank::SharedCtor() {
  _cached_size_ = 0;
  worldarenaranklast_ = NULL;
  currentactivityindex_ = 0;
  rankrecordindex_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DB_WorldArena_Rank::~DB_WorldArena_Rank() {
  SharedDtor();
}

void DB_WorldArena_Rank::SharedDtor() {
  if (this != default_instance_) {
    delete worldarenaranklast_;
  }
}

const ::google::protobuf::Descriptor* DB_WorldArena_Rank::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DB_WorldArena_Rank_descriptor_;
}

const DB_WorldArena_Rank& DB_WorldArena_Rank::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_countryDB_2eproto();  return *default_instance_;
}

DB_WorldArena_Rank* DB_WorldArena_Rank::default_instance_ = NULL;

DB_WorldArena_Rank* DB_WorldArena_Rank::New() const {
  return new DB_WorldArena_Rank;
}

void DB_WorldArena_Rank::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (_has_bit(1)) {
      if (worldarenaranklast_ != NULL) worldarenaranklast_->::DB_WorldArena_Rank_List::Clear();
    }
    currentactivityindex_ = 0;
    rankrecordindex_ = 0;
  }
  worldarenaranknpc_.Clear();
  worldarenarankall_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DB_WorldArena_Rank::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .DB_Arena_Rank_NPC worldArenaRankNpc = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_worldArenaRankNpc:
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, add_worldarenaranknpc()));
        if (input->ExpectTag(10)) goto parse_worldArenaRankNpc;
        if (input->ExpectTag(18)) goto parse_worldArenaRankLast;
        break;
      }
      
      // optional .DB_WorldArena_Rank_List worldArenaRankLast = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_worldArenaRankLast:
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
             input, mutable_worldarenaranklast()));
        if (input->ExpectTag(26)) goto parse_worldArenaRankAll;
        break;
      }
      
      // repeated .DB_WorldArena_Rank_List worldArenaRankAll = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_worldArenaRankAll:
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, add_worldarenarankall()));
        if (input->ExpectTag(26)) goto parse_worldArenaRankAll;
        if (input->ExpectTag(32)) goto parse_currentActivityIndex;
        break;
      }
      
      // optional int32 currentActivityIndex = 4 [default = 0];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_currentActivityIndex:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &currentactivityindex_));
        _set_bit(3);
        if (input->ExpectTag(40)) goto parse_rankRecordIndex;
        break;
      }
      
      // optional int32 rankRecordIndex = 5 [default = 0];
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_rankRecordIndex:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &rankrecordindex_));
        _set_bit(4);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DB_WorldArena_Rank::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    DB_WorldArena_Rank::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // repeated .DB_Arena_Rank_NPC worldArenaRankNpc = 1;
  for (int i = 0; i < this->worldarenaranknpc_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      1, this->worldarenaranknpc(i), output);
  }
  
  // optional .DB_WorldArena_Rank_List worldArenaRankLast = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      2, this->worldarenaranklast(), output);
  }
  
  // repeated .DB_WorldArena_Rank_List worldArenaRankAll = 3;
  for (int i = 0; i < this->worldarenarankall_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      3, this->worldarenarankall(i), output);
  }
  
  // optional int32 currentActivityIndex = 4 [default = 0];
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->currentactivityindex(), output);
  }
  
  // optional int32 rankRecordIndex = 5 [default = 0];
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->rankrecordindex(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DB_WorldArena_Rank::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .DB_Arena_Rank_NPC worldArenaRankNpc = 1;
  for (int i = 0; i < this->worldarenaranknpc_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->worldarenaranknpc(i), target);
  }
  
  // optional .DB_WorldArena_Rank_List worldArenaRankLast = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->worldarenaranklast(), target);
  }
  
  // repeated .DB_WorldArena_Rank_List worldArenaRankAll = 3;
  for (int i = 0; i < this->worldarenarankall_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->worldarenarankall(i), target);
  }
  
  // optional int32 currentActivityIndex = 4 [default = 0];
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->currentactivityindex(), target);
  }
  
  // optional int32 rankRecordIndex = 5 [default = 0];
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->rankrecordindex(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DB_WorldArena_Rank::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional .DB_WorldArena_Rank_List worldArenaRankLast = 2;
    if (has_worldarenaranklast()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->worldarenaranklast());
    }
    
    // optional int32 currentActivityIndex = 4 [default = 0];
    if (has_currentactivityindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->currentactivityindex());
    }
    
    // optional int32 rankRecordIndex = 5 [default = 0];
    if (has_rankrecordindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rankrecordindex());
    }
    
  }
  // repeated .DB_Arena_Rank_NPC worldArenaRankNpc = 1;
  total_size += 1 * this->worldarenaranknpc_size();
  for (int i = 0; i < this->worldarenaranknpc_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->worldarenaranknpc(i));
  }
  
  // repeated .DB_WorldArena_Rank_List worldArenaRankAll = 3;
  total_size += 1 * this->worldarenarankall_size();
  for (int i = 0; i < this->worldarenarankall_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->worldarenarankall(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void DB_WorldArena_Rank::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DB_WorldArena_Rank* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DB_WorldArena_Rank*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DB_WorldArena_Rank::MergeFrom(const DB_WorldArena_Rank& from) {
  GOOGLE_CHECK_NE(&from, this);
  worldarenaranknpc_.MergeFrom(from.worldarenaranknpc_);
  worldarenarankall_.MergeFrom(from.worldarenarankall_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from._has_bit(1)) {
      mutable_worldarenaranklast()->::DB_WorldArena_Rank_List::MergeFrom(from.worldarenaranklast());
    }
    if (from._has_bit(3)) {
      set_currentactivityindex(from.currentactivityindex());
    }
    if (from._has_bit(4)) {
      set_rankrecordindex(from.rankrecordindex());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DB_WorldArena_Rank::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DB_WorldArena_Rank::CopyFrom(const DB_WorldArena_Rank& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DB_WorldArena_Rank::IsInitialized() const {
  
  return true;
}

void DB_WorldArena_Rank::Swap(DB_WorldArena_Rank* other) {
  if (other != this) {
    worldarenaranknpc_.Swap(&other->worldarenaranknpc_);
    std::swap(worldarenaranklast_, other->worldarenaranklast_);
    worldarenarankall_.Swap(&other->worldarenarankall_);
    std::swap(currentactivityindex_, other->currentactivityindex_);
    std::swap(rankrecordindex_, other->rankrecordindex_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DB_WorldArena_Rank::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DB_WorldArena_Rank_descriptor_;
  metadata.reflection = DB_WorldArena_Rank_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DB_HeroArena_Rank_Unit::kUidFieldNumber;
#endif  // !_MSC_VER

DB_HeroArena_Rank_Unit::DB_HeroArena_Rank_Unit() {
  SharedCtor();
}

void DB_HeroArena_Rank_Unit::InitAsDefaultInstance() {
}

DB_HeroArena_Rank_Unit::DB_HeroArena_Rank_Unit(const DB_HeroArena_Rank_Unit& from) {
  SharedCtor();
  MergeFrom(from);
}

void DB_HeroArena_Rank_Unit::SharedCtor() {
  _cached_size_ = 0;
  uid_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DB_HeroArena_Rank_Unit::~DB_HeroArena_Rank_Unit() {
  SharedDtor();
}

void DB_HeroArena_Rank_Unit::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* DB_HeroArena_Rank_Unit::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DB_HeroArena_Rank_Unit_descriptor_;
}

const DB_HeroArena_Rank_Unit& DB_HeroArena_Rank_Unit::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_countryDB_2eproto();  return *default_instance_;
}

DB_HeroArena_Rank_Unit* DB_HeroArena_Rank_Unit::default_instance_ = NULL;

DB_HeroArena_Rank_Unit* DB_HeroArena_Rank_Unit::New() const {
  return new DB_HeroArena_Rank_Unit;
}

void DB_HeroArena_Rank_Unit::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    uid_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DB_HeroArena_Rank_Unit::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 uid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt64(
              input, &uid_));
        _set_bit(0);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DB_HeroArena_Rank_Unit::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    DB_HeroArena_Rank_Unit::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional int64 uid = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->uid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DB_HeroArena_Rank_Unit::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int64 uid = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->uid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DB_HeroArena_Rank_Unit::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 uid = 1;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->uid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void DB_HeroArena_Rank_Unit::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DB_HeroArena_Rank_Unit* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DB_HeroArena_Rank_Unit*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DB_HeroArena_Rank_Unit::MergeFrom(const DB_HeroArena_Rank_Unit& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_uid(from.uid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DB_HeroArena_Rank_Unit::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DB_HeroArena_Rank_Unit::CopyFrom(const DB_HeroArena_Rank_Unit& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DB_HeroArena_Rank_Unit::IsInitialized() const {
  
  return true;
}

void DB_HeroArena_Rank_Unit::Swap(DB_HeroArena_Rank_Unit* other) {
  if (other != this) {
    std::swap(uid_, other->uid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DB_HeroArena_Rank_Unit::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DB_HeroArena_Rank_Unit_descriptor_;
  metadata.reflection = DB_HeroArena_Rank_Unit_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DB_HeroArena_Rank_List::kHeroArenaRankListFieldNumber;
const int DB_HeroArena_Rank_List::kRankTimeLastFieldNumber;
const int DB_HeroArena_Rank_List::kActivityIndexFieldNumber;
#endif  // !_MSC_VER

DB_HeroArena_Rank_List::DB_HeroArena_Rank_List() {
  SharedCtor();
}

void DB_HeroArena_Rank_List::InitAsDefaultInstance() {
}

DB_HeroArena_Rank_List::DB_HeroArena_Rank_List(const DB_HeroArena_Rank_List& from) {
  SharedCtor();
  MergeFrom(from);
}

void DB_HeroArena_Rank_List::SharedCtor() {
  _cached_size_ = 0;
  ranktimelast_ = 0;
  activityindex_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DB_HeroArena_Rank_List::~DB_HeroArena_Rank_List() {
  SharedDtor();
}

void DB_HeroArena_Rank_List::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* DB_HeroArena_Rank_List::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DB_HeroArena_Rank_List_descriptor_;
}

const DB_HeroArena_Rank_List& DB_HeroArena_Rank_List::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_countryDB_2eproto();  return *default_instance_;
}

DB_HeroArena_Rank_List* DB_HeroArena_Rank_List::default_instance_ = NULL;

DB_HeroArena_Rank_List* DB_HeroArena_Rank_List::New() const {
  return new DB_HeroArena_Rank_List;
}

void DB_HeroArena_Rank_List::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    ranktimelast_ = 0;
    activityindex_ = 0;
  }
  heroarenaranklist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DB_HeroArena_Rank_List::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .DB_HeroArena_Rank_Unit heroArenaRankList = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_heroArenaRankList:
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, add_heroarenaranklist()));
        if (input->ExpectTag(10)) goto parse_heroArenaRankList;
        if (input->ExpectTag(16)) goto parse_rankTimeLast;
        break;
      }
      
      // optional int32 rankTimeLast = 2 [default = 0];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_rankTimeLast:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &ranktimelast_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_activityIndex;
        break;
      }
      
      // optional int32 activityIndex = 3 [default = 0];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_activityIndex:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &activityindex_));
        _set_bit(2);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DB_HeroArena_Rank_List::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    DB_HeroArena_Rank_List::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // repeated .DB_HeroArena_Rank_Unit heroArenaRankList = 1;
  for (int i = 0; i < this->heroarenaranklist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      1, this->heroarenaranklist(i), output);
  }
  
  // optional int32 rankTimeLast = 2 [default = 0];
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->ranktimelast(), output);
  }
  
  // optional int32 activityIndex = 3 [default = 0];
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->activityindex(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DB_HeroArena_Rank_List::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .DB_HeroArena_Rank_Unit heroArenaRankList = 1;
  for (int i = 0; i < this->heroarenaranklist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->heroarenaranklist(i), target);
  }
  
  // optional int32 rankTimeLast = 2 [default = 0];
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->ranktimelast(), target);
  }
  
  // optional int32 activityIndex = 3 [default = 0];
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->activityindex(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DB_HeroArena_Rank_List::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional int32 rankTimeLast = 2 [default = 0];
    if (has_ranktimelast()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ranktimelast());
    }
    
    // optional int32 activityIndex = 3 [default = 0];
    if (has_activityindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->activityindex());
    }
    
  }
  // repeated .DB_HeroArena_Rank_Unit heroArenaRankList = 1;
  total_size += 1 * this->heroarenaranklist_size();
  for (int i = 0; i < this->heroarenaranklist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->heroarenaranklist(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void DB_HeroArena_Rank_List::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DB_HeroArena_Rank_List* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DB_HeroArena_Rank_List*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DB_HeroArena_Rank_List::MergeFrom(const DB_HeroArena_Rank_List& from) {
  GOOGLE_CHECK_NE(&from, this);
  heroarenaranklist_.MergeFrom(from.heroarenaranklist_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from._has_bit(1)) {
      set_ranktimelast(from.ranktimelast());
    }
    if (from._has_bit(2)) {
      set_activityindex(from.activityindex());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DB_HeroArena_Rank_List::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DB_HeroArena_Rank_List::CopyFrom(const DB_HeroArena_Rank_List& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DB_HeroArena_Rank_List::IsInitialized() const {
  
  return true;
}

void DB_HeroArena_Rank_List::Swap(DB_HeroArena_Rank_List* other) {
  if (other != this) {
    heroarenaranklist_.Swap(&other->heroarenaranklist_);
    std::swap(ranktimelast_, other->ranktimelast_);
    std::swap(activityindex_, other->activityindex_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DB_HeroArena_Rank_List::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DB_HeroArena_Rank_List_descriptor_;
  metadata.reflection = DB_HeroArena_Rank_List_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DB_HeroArena_Rank::kHeroArenaRankNpcFieldNumber;
const int DB_HeroArena_Rank::kHeroArenaRankLastFieldNumber;
const int DB_HeroArena_Rank::kCurrentActivityIndexFieldNumber;
#endif  // !_MSC_VER

DB_HeroArena_Rank::DB_HeroArena_Rank() {
  SharedCtor();
}

void DB_HeroArena_Rank::InitAsDefaultInstance() {
  heroarenaranklast_ = const_cast< ::DB_HeroArena_Rank_List*>(&::DB_HeroArena_Rank_List::default_instance());
}

DB_HeroArena_Rank::DB_HeroArena_Rank(const DB_HeroArena_Rank& from) {
  SharedCtor();
  MergeFrom(from);
}

void DB_HeroArena_Rank::SharedCtor() {
  _cached_size_ = 0;
  heroarenaranklast_ = NULL;
  currentactivityindex_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DB_HeroArena_Rank::~DB_HeroArena_Rank() {
  SharedDtor();
}

void DB_HeroArena_Rank::SharedDtor() {
  if (this != default_instance_) {
    delete heroarenaranklast_;
  }
}

const ::google::protobuf::Descriptor* DB_HeroArena_Rank::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DB_HeroArena_Rank_descriptor_;
}

const DB_HeroArena_Rank& DB_HeroArena_Rank::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_countryDB_2eproto();  return *default_instance_;
}

DB_HeroArena_Rank* DB_HeroArena_Rank::default_instance_ = NULL;

DB_HeroArena_Rank* DB_HeroArena_Rank::New() const {
  return new DB_HeroArena_Rank;
}

void DB_HeroArena_Rank::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (_has_bit(1)) {
      if (heroarenaranklast_ != NULL) heroarenaranklast_->::DB_HeroArena_Rank_List::Clear();
    }
    currentactivityindex_ = 0;
  }
  heroarenaranknpc_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DB_HeroArena_Rank::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .DB_Arena_Rank_NPC heroArenaRankNpc = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_heroArenaRankNpc:
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, add_heroarenaranknpc()));
        if (input->ExpectTag(10)) goto parse_heroArenaRankNpc;
        if (input->ExpectTag(18)) goto parse_heroArenaRankLast;
        break;
      }
      
      // optional .DB_HeroArena_Rank_List heroArenaRankLast = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_heroArenaRankLast:
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
             input, mutable_heroarenaranklast()));
        if (input->ExpectTag(24)) goto parse_currentActivityIndex;
        break;
      }
      
      // optional int32 currentActivityIndex = 3 [default = 0];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_currentActivityIndex:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &currentactivityindex_));
        _set_bit(2);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DB_HeroArena_Rank::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    DB_HeroArena_Rank::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // repeated .DB_Arena_Rank_NPC heroArenaRankNpc = 1;
  for (int i = 0; i < this->heroarenaranknpc_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      1, this->heroarenaranknpc(i), output);
  }
  
  // optional .DB_HeroArena_Rank_List heroArenaRankLast = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      2, this->heroarenaranklast(), output);
  }
  
  // optional int32 currentActivityIndex = 3 [default = 0];
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->currentactivityindex(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DB_HeroArena_Rank::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .DB_Arena_Rank_NPC heroArenaRankNpc = 1;
  for (int i = 0; i < this->heroarenaranknpc_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->heroarenaranknpc(i), target);
  }
  
  // optional .DB_HeroArena_Rank_List heroArenaRankLast = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->heroarenaranklast(), target);
  }
  
  // optional int32 currentActivityIndex = 3 [default = 0];
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->currentactivityindex(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DB_HeroArena_Rank::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional .DB_HeroArena_Rank_List heroArenaRankLast = 2;
    if (has_heroarenaranklast()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->heroarenaranklast());
    }
    
    // optional int32 currentActivityIndex = 3 [default = 0];
    if (has_currentactivityindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->currentactivityindex());
    }
    
  }
  // repeated .DB_Arena_Rank_NPC heroArenaRankNpc = 1;
  total_size += 1 * this->heroarenaranknpc_size();
  for (int i = 0; i < this->heroarenaranknpc_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->heroarenaranknpc(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void DB_HeroArena_Rank::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DB_HeroArena_Rank* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DB_HeroArena_Rank*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DB_HeroArena_Rank::MergeFrom(const DB_HeroArena_Rank& from) {
  GOOGLE_CHECK_NE(&from, this);
  heroarenaranknpc_.MergeFrom(from.heroarenaranknpc_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from._has_bit(1)) {
      mutable_heroarenaranklast()->::DB_HeroArena_Rank_List::MergeFrom(from.heroarenaranklast());
    }
    if (from._has_bit(2)) {
      set_currentactivityindex(from.currentactivityindex());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DB_HeroArena_Rank::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DB_HeroArena_Rank::CopyFrom(const DB_HeroArena_Rank& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DB_HeroArena_Rank::IsInitialized() const {
  
  return true;
}

void DB_HeroArena_Rank::Swap(DB_HeroArena_Rank* other) {
  if (other != this) {
    heroarenaranknpc_.Swap(&other->heroarenaranknpc_);
    std::swap(heroarenaranklast_, other->heroarenaranklast_);
    std::swap(currentactivityindex_, other->currentactivityindex_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DB_HeroArena_Rank::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DB_HeroArena_Rank_descriptor_;
  metadata.reflection = DB_HeroArena_Rank_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DB_C_Officer::kOfficerPositionFieldNumber;
const int DB_C_Officer::kUidFieldNumber;
#endif  // !_MSC_VER

DB_C_Officer::DB_C_Officer() {
  SharedCtor();
}

void DB_C_Officer::InitAsDefaultInstance() {
}

DB_C_Officer::DB_C_Officer(const DB_C_Officer& from) {
  SharedCtor();
  MergeFrom(from);
}

void DB_C_Officer::SharedCtor() {
  _cached_size_ = 0;
  officerposition_ = 0;
  uid_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DB_C_Officer::~DB_C_Officer() {
  SharedDtor();
}

void DB_C_Officer::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* DB_C_Officer::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DB_C_Officer_descriptor_;
}

const DB_C_Officer& DB_C_Officer::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_countryDB_2eproto();  return *default_instance_;
}

DB_C_Officer* DB_C_Officer::default_instance_ = NULL;

DB_C_Officer* DB_C_Officer::New() const {
  return new DB_C_Officer;
}

void DB_C_Officer::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    officerposition_ = 0;
    uid_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DB_C_Officer::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 officerPosition = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &officerposition_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_uid;
        break;
      }
      
      // optional int64 uid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_uid:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt64(
              input, &uid_));
        _set_bit(1);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DB_C_Officer::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    DB_C_Officer::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional int32 officerPosition = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->officerposition(), output);
  }
  
  // optional int64 uid = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->uid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DB_C_Officer::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 officerPosition = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->officerposition(), target);
  }
  
  // optional int64 uid = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->uid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DB_C_Officer::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 officerPosition = 1;
    if (has_officerposition()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->officerposition());
    }
    
    // optional int64 uid = 2;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->uid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void DB_C_Officer::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DB_C_Officer* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DB_C_Officer*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DB_C_Officer::MergeFrom(const DB_C_Officer& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_officerposition(from.officerposition());
    }
    if (from._has_bit(1)) {
      set_uid(from.uid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DB_C_Officer::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DB_C_Officer::CopyFrom(const DB_C_Officer& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DB_C_Officer::IsInitialized() const {
  
  return true;
}

void DB_C_Officer::Swap(DB_C_Officer* other) {
  if (other != this) {
    std::swap(officerposition_, other->officerposition_);
    std::swap(uid_, other->uid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DB_C_Officer::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DB_C_Officer_descriptor_;
  metadata.reflection = DB_C_Officer_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DB_C_OfficerInfo::kArenaofficersFieldNumber;
const int DB_C_OfficerInfo::kGuildofficersFieldNumber;
const int DB_C_OfficerInfo::kOfficerRightUseFlagFieldNumber;
const int DB_C_OfficerInfo::kUpdateTimeLastFieldNumber;
#endif  // !_MSC_VER

DB_C_OfficerInfo::DB_C_OfficerInfo() {
  SharedCtor();
}

void DB_C_OfficerInfo::InitAsDefaultInstance() {
}

DB_C_OfficerInfo::DB_C_OfficerInfo(const DB_C_OfficerInfo& from) {
  SharedCtor();
  MergeFrom(from);
}

void DB_C_OfficerInfo::SharedCtor() {
  _cached_size_ = 0;
  officerrightuseflag_ = 0;
  updatetimelast_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DB_C_OfficerInfo::~DB_C_OfficerInfo() {
  SharedDtor();
}

void DB_C_OfficerInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* DB_C_OfficerInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DB_C_OfficerInfo_descriptor_;
}

const DB_C_OfficerInfo& DB_C_OfficerInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_countryDB_2eproto();  return *default_instance_;
}

DB_C_OfficerInfo* DB_C_OfficerInfo::default_instance_ = NULL;

DB_C_OfficerInfo* DB_C_OfficerInfo::New() const {
  return new DB_C_OfficerInfo;
}

void DB_C_OfficerInfo::Clear() {
  if (_has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    officerrightuseflag_ = 0;
    updatetimelast_ = 0;
  }
  arenaofficers_.Clear();
  guildofficers_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DB_C_OfficerInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .DB_C_Officer arenaofficers = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_arenaofficers:
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, add_arenaofficers()));
        if (input->ExpectTag(10)) goto parse_arenaofficers;
        if (input->ExpectTag(18)) goto parse_guildofficers;
        break;
      }
      
      // repeated .DB_C_Officer guildofficers = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_guildofficers:
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, add_guildofficers()));
        if (input->ExpectTag(18)) goto parse_guildofficers;
        if (input->ExpectTag(24)) goto parse_officerRightUseFlag;
        break;
      }
      
      // optional int32 officerRightUseFlag = 3 [default = 0];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_officerRightUseFlag:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &officerrightuseflag_));
        _set_bit(2);
        if (input->ExpectTag(32)) goto parse_updateTimeLast;
        break;
      }
      
      // optional int32 updateTimeLast = 4 [default = 0];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_updateTimeLast:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &updatetimelast_));
        _set_bit(3);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DB_C_OfficerInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    DB_C_OfficerInfo::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // repeated .DB_C_Officer arenaofficers = 1;
  for (int i = 0; i < this->arenaofficers_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      1, this->arenaofficers(i), output);
  }
  
  // repeated .DB_C_Officer guildofficers = 2;
  for (int i = 0; i < this->guildofficers_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      2, this->guildofficers(i), output);
  }
  
  // optional int32 officerRightUseFlag = 3 [default = 0];
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->officerrightuseflag(), output);
  }
  
  // optional int32 updateTimeLast = 4 [default = 0];
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->updatetimelast(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DB_C_OfficerInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .DB_C_Officer arenaofficers = 1;
  for (int i = 0; i < this->arenaofficers_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->arenaofficers(i), target);
  }
  
  // repeated .DB_C_Officer guildofficers = 2;
  for (int i = 0; i < this->guildofficers_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->guildofficers(i), target);
  }
  
  // optional int32 officerRightUseFlag = 3 [default = 0];
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->officerrightuseflag(), target);
  }
  
  // optional int32 updateTimeLast = 4 [default = 0];
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->updatetimelast(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DB_C_OfficerInfo::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    // optional int32 officerRightUseFlag = 3 [default = 0];
    if (has_officerrightuseflag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->officerrightuseflag());
    }
    
    // optional int32 updateTimeLast = 4 [default = 0];
    if (has_updatetimelast()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->updatetimelast());
    }
    
  }
  // repeated .DB_C_Officer arenaofficers = 1;
  total_size += 1 * this->arenaofficers_size();
  for (int i = 0; i < this->arenaofficers_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->arenaofficers(i));
  }
  
  // repeated .DB_C_Officer guildofficers = 2;
  total_size += 1 * this->guildofficers_size();
  for (int i = 0; i < this->guildofficers_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->guildofficers(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void DB_C_OfficerInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DB_C_OfficerInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DB_C_OfficerInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DB_C_OfficerInfo::MergeFrom(const DB_C_OfficerInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  arenaofficers_.MergeFrom(from.arenaofficers_);
  guildofficers_.MergeFrom(from.guildofficers_);
  if (from._has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    if (from._has_bit(2)) {
      set_officerrightuseflag(from.officerrightuseflag());
    }
    if (from._has_bit(3)) {
      set_updatetimelast(from.updatetimelast());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DB_C_OfficerInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DB_C_OfficerInfo::CopyFrom(const DB_C_OfficerInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DB_C_OfficerInfo::IsInitialized() const {
  
  return true;
}

void DB_C_OfficerInfo::Swap(DB_C_OfficerInfo* other) {
  if (other != this) {
    arenaofficers_.Swap(&other->arenaofficers_);
    guildofficers_.Swap(&other->guildofficers_);
    std::swap(officerrightuseflag_, other->officerrightuseflag_);
    std::swap(updatetimelast_, other->updatetimelast_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DB_C_OfficerInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DB_C_OfficerInfo_descriptor_;
  metadata.reflection = DB_C_OfficerInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DB_C_PubGuildPKGroup::kGuildID1FieldNumber;
const int DB_C_PubGuildPKGroup::kGuildID2FieldNumber;
#endif  // !_MSC_VER

DB_C_PubGuildPKGroup::DB_C_PubGuildPKGroup() {
  SharedCtor();
}

void DB_C_PubGuildPKGroup::InitAsDefaultInstance() {
}

DB_C_PubGuildPKGroup::DB_C_PubGuildPKGroup(const DB_C_PubGuildPKGroup& from) {
  SharedCtor();
  MergeFrom(from);
}

void DB_C_PubGuildPKGroup::SharedCtor() {
  _cached_size_ = 0;
  guildid1_ = 0;
  guildid2_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DB_C_PubGuildPKGroup::~DB_C_PubGuildPKGroup() {
  SharedDtor();
}

void DB_C_PubGuildPKGroup::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* DB_C_PubGuildPKGroup::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DB_C_PubGuildPKGroup_descriptor_;
}

const DB_C_PubGuildPKGroup& DB_C_PubGuildPKGroup::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_countryDB_2eproto();  return *default_instance_;
}

DB_C_PubGuildPKGroup* DB_C_PubGuildPKGroup::default_instance_ = NULL;

DB_C_PubGuildPKGroup* DB_C_PubGuildPKGroup::New() const {
  return new DB_C_PubGuildPKGroup;
}

void DB_C_PubGuildPKGroup::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    guildid1_ = 0;
    guildid2_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DB_C_PubGuildPKGroup::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 guildID1 = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &guildid1_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_guildID2;
        break;
      }
      
      // optional int32 guildID2 = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_guildID2:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &guildid2_));
        _set_bit(1);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DB_C_PubGuildPKGroup::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    DB_C_PubGuildPKGroup::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional int32 guildID1 = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->guildid1(), output);
  }
  
  // optional int32 guildID2 = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->guildid2(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DB_C_PubGuildPKGroup::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 guildID1 = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->guildid1(), target);
  }
  
  // optional int32 guildID2 = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->guildid2(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DB_C_PubGuildPKGroup::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 guildID1 = 1;
    if (has_guildid1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->guildid1());
    }
    
    // optional int32 guildID2 = 2;
    if (has_guildid2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->guildid2());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void DB_C_PubGuildPKGroup::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DB_C_PubGuildPKGroup* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DB_C_PubGuildPKGroup*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DB_C_PubGuildPKGroup::MergeFrom(const DB_C_PubGuildPKGroup& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_guildid1(from.guildid1());
    }
    if (from._has_bit(1)) {
      set_guildid2(from.guildid2());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DB_C_PubGuildPKGroup::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DB_C_PubGuildPKGroup::CopyFrom(const DB_C_PubGuildPKGroup& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DB_C_PubGuildPKGroup::IsInitialized() const {
  
  return true;
}

void DB_C_PubGuildPKGroup::Swap(DB_C_PubGuildPKGroup* other) {
  if (other != this) {
    std::swap(guildid1_, other->guildid1_);
    std::swap(guildid2_, other->guildid2_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DB_C_PubGuildPKGroup::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DB_C_PubGuildPKGroup_descriptor_;
  metadata.reflection = DB_C_PubGuildPKGroup_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DB_C_PubGuildBtlInfo::kCurSessionFieldNumber;
const int DB_C_PubGuildBtlInfo::kBtlDayFieldNumber;
const int DB_C_PubGuildBtlInfo::kPkStepFieldNumber;
const int DB_C_PubGuildBtlInfo::kCurPKOVerFieldNumber;
const int DB_C_PubGuildBtlInfo::kPkLstIdxFieldNumber;
const int DB_C_PubGuildBtlInfo::kPkLstFieldNumber;
const int DB_C_PubGuildBtlInfo::kCurSesionBtlOverFieldNumber;
const int DB_C_PubGuildBtlInfo::kCurAddScoreFieldNumber;
#endif  // !_MSC_VER

DB_C_PubGuildBtlInfo::DB_C_PubGuildBtlInfo() {
  SharedCtor();
}

void DB_C_PubGuildBtlInfo::InitAsDefaultInstance() {
}

DB_C_PubGuildBtlInfo::DB_C_PubGuildBtlInfo(const DB_C_PubGuildBtlInfo& from) {
  SharedCtor();
  MergeFrom(from);
}

void DB_C_PubGuildBtlInfo::SharedCtor() {
  _cached_size_ = 0;
  cursession_ = 0;
  btlday_ = 0;
  pkstep_ = 0;
  pklstidx_ = 0;
  cursesionbtlover_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DB_C_PubGuildBtlInfo::~DB_C_PubGuildBtlInfo() {
  SharedDtor();
}

void DB_C_PubGuildBtlInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* DB_C_PubGuildBtlInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DB_C_PubGuildBtlInfo_descriptor_;
}

const DB_C_PubGuildBtlInfo& DB_C_PubGuildBtlInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_countryDB_2eproto();  return *default_instance_;
}

DB_C_PubGuildBtlInfo* DB_C_PubGuildBtlInfo::default_instance_ = NULL;

DB_C_PubGuildBtlInfo* DB_C_PubGuildBtlInfo::New() const {
  return new DB_C_PubGuildBtlInfo;
}

void DB_C_PubGuildBtlInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    cursession_ = 0;
    btlday_ = 0;
    pkstep_ = 0;
    pklstidx_ = 0;
    cursesionbtlover_ = false;
  }
  curpkover_.Clear();
  pklst_.Clear();
  curaddscore_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DB_C_PubGuildBtlInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 curSession = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &cursession_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_btlDay;
        break;
      }
      
      // optional int32 btlDay = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_btlDay:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &btlday_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_pkStep;
        break;
      }
      
      // optional int32 pkStep = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_pkStep:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &pkstep_));
        _set_bit(2);
        if (input->ExpectTag(32)) goto parse_curPKOVer;
        break;
      }
      
      // repeated bool curPKOVer = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_curPKOVer:
        bool value;
        DO_(::google::protobuf::internal::WireFormatLite::ReadBool(
              input, &value));
        add_curpkover(value);
        if (input->ExpectTag(32)) goto parse_curPKOVer;
        if (input->ExpectTag(40)) goto parse_pkLstIdx;
        break;
      }
      
      // optional int32 pkLstIdx = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_pkLstIdx:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &pklstidx_));
        _set_bit(4);
        if (input->ExpectTag(50)) goto parse_pkLst;
        break;
      }
      
      // repeated .DB_C_PubGuildPKGroup pkLst = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_pkLst:
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, add_pklst()));
        if (input->ExpectTag(50)) goto parse_pkLst;
        if (input->ExpectTag(56)) goto parse_curSesionBtlOver;
        break;
      }
      
      // optional bool curSesionBtlOver = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_curSesionBtlOver:
        DO_(::google::protobuf::internal::WireFormatLite::ReadBool(
              input, &cursesionbtlover_));
        _set_bit(6);
        if (input->ExpectTag(64)) goto parse_curAddScore;
        break;
      }
      
      // repeated bool curAddScore = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_curAddScore:
        bool value;
        DO_(::google::protobuf::internal::WireFormatLite::ReadBool(
              input, &value));
        add_curaddscore(value);
        if (input->ExpectTag(64)) goto parse_curAddScore;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DB_C_PubGuildBtlInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    DB_C_PubGuildBtlInfo::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional int32 curSession = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->cursession(), output);
  }
  
  // optional int32 btlDay = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->btlday(), output);
  }
  
  // optional int32 pkStep = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->pkstep(), output);
  }
  
  // repeated bool curPKOVer = 4;
  for (int i = 0; i < this->curpkover_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(
      4, this->curpkover(i), output);
  }
  
  // optional int32 pkLstIdx = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->pklstidx(), output);
  }
  
  // repeated .DB_C_PubGuildPKGroup pkLst = 6;
  for (int i = 0; i < this->pklst_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      6, this->pklst(i), output);
  }
  
  // optional bool curSesionBtlOver = 7;
  if (_has_bit(6)) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->cursesionbtlover(), output);
  }
  
  // repeated bool curAddScore = 8;
  for (int i = 0; i < this->curaddscore_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(
      8, this->curaddscore(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DB_C_PubGuildBtlInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 curSession = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->cursession(), target);
  }
  
  // optional int32 btlDay = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->btlday(), target);
  }
  
  // optional int32 pkStep = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->pkstep(), target);
  }
  
  // repeated bool curPKOVer = 4;
  for (int i = 0; i < this->curpkover_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteBoolToArray(4, this->curpkover(i), target);
  }
  
  // optional int32 pkLstIdx = 5;
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->pklstidx(), target);
  }
  
  // repeated .DB_C_PubGuildPKGroup pkLst = 6;
  for (int i = 0; i < this->pklst_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->pklst(i), target);
  }
  
  // optional bool curSesionBtlOver = 7;
  if (_has_bit(6)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->cursesionbtlover(), target);
  }
  
  // repeated bool curAddScore = 8;
  for (int i = 0; i < this->curaddscore_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteBoolToArray(8, this->curaddscore(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DB_C_PubGuildBtlInfo::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 curSession = 1;
    if (has_cursession()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cursession());
    }
    
    // optional int32 btlDay = 2;
    if (has_btlday()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->btlday());
    }
    
    // optional int32 pkStep = 3;
    if (has_pkstep()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pkstep());
    }
    
    // optional int32 pkLstIdx = 5;
    if (has_pklstidx()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pklstidx());
    }
    
    // optional bool curSesionBtlOver = 7;
    if (has_cursesionbtlover()) {
      total_size += 1 + 1;
    }
    
  }
  // repeated bool curPKOVer = 4;
  {
    int data_size = 0;
    data_size = 1 * this->curpkover_size();
    total_size += 1 * this->curpkover_size() + data_size;
  }
  
  // repeated .DB_C_PubGuildPKGroup pkLst = 6;
  total_size += 1 * this->pklst_size();
  for (int i = 0; i < this->pklst_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->pklst(i));
  }
  
  // repeated bool curAddScore = 8;
  {
    int data_size = 0;
    data_size = 1 * this->curaddscore_size();
    total_size += 1 * this->curaddscore_size() + data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void DB_C_PubGuildBtlInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DB_C_PubGuildBtlInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DB_C_PubGuildBtlInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DB_C_PubGuildBtlInfo::MergeFrom(const DB_C_PubGuildBtlInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  curpkover_.MergeFrom(from.curpkover_);
  pklst_.MergeFrom(from.pklst_);
  curaddscore_.MergeFrom(from.curaddscore_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_cursession(from.cursession());
    }
    if (from._has_bit(1)) {
      set_btlday(from.btlday());
    }
    if (from._has_bit(2)) {
      set_pkstep(from.pkstep());
    }
    if (from._has_bit(4)) {
      set_pklstidx(from.pklstidx());
    }
    if (from._has_bit(6)) {
      set_cursesionbtlover(from.cursesionbtlover());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DB_C_PubGuildBtlInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DB_C_PubGuildBtlInfo::CopyFrom(const DB_C_PubGuildBtlInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DB_C_PubGuildBtlInfo::IsInitialized() const {
  
  return true;
}

void DB_C_PubGuildBtlInfo::Swap(DB_C_PubGuildBtlInfo* other) {
  if (other != this) {
    std::swap(cursession_, other->cursession_);
    std::swap(btlday_, other->btlday_);
    std::swap(pkstep_, other->pkstep_);
    curpkover_.Swap(&other->curpkover_);
    std::swap(pklstidx_, other->pklstidx_);
    pklst_.Swap(&other->pklst_);
    std::swap(cursesionbtlover_, other->cursesionbtlover_);
    curaddscore_.Swap(&other->curaddscore_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DB_C_PubGuildBtlInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DB_C_PubGuildBtlInfo_descriptor_;
  metadata.reflection = DB_C_PubGuildBtlInfo_reflection_;
  return metadata;
}


// ===================================================================

const ::std::string DB_C_GuildBtl_Top_Guild::_default_guildname_;
const ::std::string DB_C_GuildBtl_Top_Guild::_default_leadername_;
#ifndef _MSC_VER
const int DB_C_GuildBtl_Top_Guild::kGuildIDFieldNumber;
const int DB_C_GuildBtl_Top_Guild::kCountryIDFieldNumber;
const int DB_C_GuildBtl_Top_Guild::kGuildLVFieldNumber;
const int DB_C_GuildBtl_Top_Guild::kGuildNameFieldNumber;
const int DB_C_GuildBtl_Top_Guild::kUserCntFieldNumber;
const int DB_C_GuildBtl_Top_Guild::kBtlScoreFieldNumber;
const int DB_C_GuildBtl_Top_Guild::kLeaderNameFieldNumber;
#endif  // !_MSC_VER

DB_C_GuildBtl_Top_Guild::DB_C_GuildBtl_Top_Guild() {
  SharedCtor();
}

void DB_C_GuildBtl_Top_Guild::InitAsDefaultInstance() {
}

DB_C_GuildBtl_Top_Guild::DB_C_GuildBtl_Top_Guild(const DB_C_GuildBtl_Top_Guild& from) {
  SharedCtor();
  MergeFrom(from);
}

void DB_C_GuildBtl_Top_Guild::SharedCtor() {
  _cached_size_ = 0;
  guildid_ = 0;
  countryid_ = 0;
  guildlv_ = 0;
  guildname_ = const_cast< ::std::string*>(&_default_guildname_);
  usercnt_ = 0;
  btlscore_ = 0;
  leadername_ = const_cast< ::std::string*>(&_default_leadername_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DB_C_GuildBtl_Top_Guild::~DB_C_GuildBtl_Top_Guild() {
  SharedDtor();
}

void DB_C_GuildBtl_Top_Guild::SharedDtor() {
  if (guildname_ != &_default_guildname_) {
    delete guildname_;
  }
  if (leadername_ != &_default_leadername_) {
    delete leadername_;
  }
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* DB_C_GuildBtl_Top_Guild::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DB_C_GuildBtl_Top_Guild_descriptor_;
}

const DB_C_GuildBtl_Top_Guild& DB_C_GuildBtl_Top_Guild::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_countryDB_2eproto();  return *default_instance_;
}

DB_C_GuildBtl_Top_Guild* DB_C_GuildBtl_Top_Guild::default_instance_ = NULL;

DB_C_GuildBtl_Top_Guild* DB_C_GuildBtl_Top_Guild::New() const {
  return new DB_C_GuildBtl_Top_Guild;
}

void DB_C_GuildBtl_Top_Guild::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    guildid_ = 0;
    countryid_ = 0;
    guildlv_ = 0;
    if (_has_bit(3)) {
      if (guildname_ != &_default_guildname_) {
        guildname_->clear();
      }
    }
    usercnt_ = 0;
    btlscore_ = 0;
    if (_has_bit(6)) {
      if (leadername_ != &_default_leadername_) {
        leadername_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DB_C_GuildBtl_Top_Guild::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 guildID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &guildid_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_countryID;
        break;
      }
      
      // required int32 countryID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_countryID:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &countryid_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_guildLV;
        break;
      }
      
      // optional int32 guildLV = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_guildLV:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &guildlv_));
        _set_bit(2);
        if (input->ExpectTag(34)) goto parse_guildName;
        break;
      }
      
      // optional string guildName = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_guildName:
        DO_(::google::protobuf::internal::WireFormatLite::ReadString(
              input, this->mutable_guildname()));
        ::google::protobuf::internal::WireFormat::VerifyUTF8String(
          this->guildname().data(), this->guildname().length(),
          ::google::protobuf::internal::WireFormat::PARSE);
        if (input->ExpectTag(40)) goto parse_userCnt;
        break;
      }
      
      // optional int32 userCnt = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_userCnt:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &usercnt_));
        _set_bit(4);
        if (input->ExpectTag(48)) goto parse_btlScore;
        break;
      }
      
      // optional int32 btlScore = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_btlScore:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &btlscore_));
        _set_bit(5);
        if (input->ExpectTag(58)) goto parse_leaderName;
        break;
      }
      
      // optional string leaderName = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_leaderName:
        DO_(::google::protobuf::internal::WireFormatLite::ReadString(
              input, this->mutable_leadername()));
        ::google::protobuf::internal::WireFormat::VerifyUTF8String(
          this->leadername().data(), this->leadername().length(),
          ::google::protobuf::internal::WireFormat::PARSE);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DB_C_GuildBtl_Top_Guild::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    DB_C_GuildBtl_Top_Guild::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // required int32 guildID = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->guildid(), output);
  }
  
  // required int32 countryID = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->countryid(), output);
  }
  
  // optional int32 guildLV = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->guildlv(), output);
  }
  
  // optional string guildName = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->guildname().data(), this->guildname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->guildname(), output);
  }
  
  // optional int32 userCnt = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->usercnt(), output);
  }
  
  // optional int32 btlScore = 6;
  if (_has_bit(5)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->btlscore(), output);
  }
  
  // optional string leaderName = 7;
  if (_has_bit(6)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->leadername().data(), this->leadername().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->leadername(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DB_C_GuildBtl_Top_Guild::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 guildID = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->guildid(), target);
  }
  
  // required int32 countryID = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->countryid(), target);
  }
  
  // optional int32 guildLV = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->guildlv(), target);
  }
  
  // optional string guildName = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->guildname().data(), this->guildname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->guildname(), target);
  }
  
  // optional int32 userCnt = 5;
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->usercnt(), target);
  }
  
  // optional int32 btlScore = 6;
  if (_has_bit(5)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->btlscore(), target);
  }
  
  // optional string leaderName = 7;
  if (_has_bit(6)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->leadername().data(), this->leadername().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->leadername(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DB_C_GuildBtl_Top_Guild::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 guildID = 1;
    if (has_guildid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->guildid());
    }
    
    // required int32 countryID = 2;
    if (has_countryid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->countryid());
    }
    
    // optional int32 guildLV = 3;
    if (has_guildlv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->guildlv());
    }
    
    // optional string guildName = 4;
    if (has_guildname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->guildname());
    }
    
    // optional int32 userCnt = 5;
    if (has_usercnt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->usercnt());
    }
    
    // optional int32 btlScore = 6;
    if (has_btlscore()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->btlscore());
    }
    
    // optional string leaderName = 7;
    if (has_leadername()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->leadername());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void DB_C_GuildBtl_Top_Guild::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DB_C_GuildBtl_Top_Guild* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DB_C_GuildBtl_Top_Guild*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DB_C_GuildBtl_Top_Guild::MergeFrom(const DB_C_GuildBtl_Top_Guild& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_guildid(from.guildid());
    }
    if (from._has_bit(1)) {
      set_countryid(from.countryid());
    }
    if (from._has_bit(2)) {
      set_guildlv(from.guildlv());
    }
    if (from._has_bit(3)) {
      set_guildname(from.guildname());
    }
    if (from._has_bit(4)) {
      set_usercnt(from.usercnt());
    }
    if (from._has_bit(5)) {
      set_btlscore(from.btlscore());
    }
    if (from._has_bit(6)) {
      set_leadername(from.leadername());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DB_C_GuildBtl_Top_Guild::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DB_C_GuildBtl_Top_Guild::CopyFrom(const DB_C_GuildBtl_Top_Guild& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DB_C_GuildBtl_Top_Guild::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void DB_C_GuildBtl_Top_Guild::Swap(DB_C_GuildBtl_Top_Guild* other) {
  if (other != this) {
    std::swap(guildid_, other->guildid_);
    std::swap(countryid_, other->countryid_);
    std::swap(guildlv_, other->guildlv_);
    std::swap(guildname_, other->guildname_);
    std::swap(usercnt_, other->usercnt_);
    std::swap(btlscore_, other->btlscore_);
    std::swap(leadername_, other->leadername_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DB_C_GuildBtl_Top_Guild::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DB_C_GuildBtl_Top_Guild_descriptor_;
  metadata.reflection = DB_C_GuildBtl_Top_Guild_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DB_C_GuildBtl_Record::kSeasonsFieldNumber;
const int DB_C_GuildBtl_Record::kGuildDataFieldNumber;
#endif  // !_MSC_VER

DB_C_GuildBtl_Record::DB_C_GuildBtl_Record() {
  SharedCtor();
}

void DB_C_GuildBtl_Record::InitAsDefaultInstance() {
}

DB_C_GuildBtl_Record::DB_C_GuildBtl_Record(const DB_C_GuildBtl_Record& from) {
  SharedCtor();
  MergeFrom(from);
}

void DB_C_GuildBtl_Record::SharedCtor() {
  _cached_size_ = 0;
  seasons_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DB_C_GuildBtl_Record::~DB_C_GuildBtl_Record() {
  SharedDtor();
}

void DB_C_GuildBtl_Record::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* DB_C_GuildBtl_Record::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DB_C_GuildBtl_Record_descriptor_;
}

const DB_C_GuildBtl_Record& DB_C_GuildBtl_Record::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_countryDB_2eproto();  return *default_instance_;
}

DB_C_GuildBtl_Record* DB_C_GuildBtl_Record::default_instance_ = NULL;

DB_C_GuildBtl_Record* DB_C_GuildBtl_Record::New() const {
  return new DB_C_GuildBtl_Record;
}

void DB_C_GuildBtl_Record::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    seasons_ = 0;
  }
  guilddata_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DB_C_GuildBtl_Record::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 seasons = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &seasons_));
        _set_bit(0);
        if (input->ExpectTag(18)) goto parse_guildData;
        break;
      }
      
      // repeated .DB_C_GuildBtl_Top_Guild guildData = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_guildData:
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, add_guilddata()));
        if (input->ExpectTag(18)) goto parse_guildData;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DB_C_GuildBtl_Record::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    DB_C_GuildBtl_Record::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional int32 seasons = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->seasons(), output);
  }
  
  // repeated .DB_C_GuildBtl_Top_Guild guildData = 2;
  for (int i = 0; i < this->guilddata_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      2, this->guilddata(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DB_C_GuildBtl_Record::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 seasons = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->seasons(), target);
  }
  
  // repeated .DB_C_GuildBtl_Top_Guild guildData = 2;
  for (int i = 0; i < this->guilddata_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->guilddata(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DB_C_GuildBtl_Record::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 seasons = 1;
    if (has_seasons()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->seasons());
    }
    
  }
  // repeated .DB_C_GuildBtl_Top_Guild guildData = 2;
  total_size += 1 * this->guilddata_size();
  for (int i = 0; i < this->guilddata_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->guilddata(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void DB_C_GuildBtl_Record::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DB_C_GuildBtl_Record* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DB_C_GuildBtl_Record*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DB_C_GuildBtl_Record::MergeFrom(const DB_C_GuildBtl_Record& from) {
  GOOGLE_CHECK_NE(&from, this);
  guilddata_.MergeFrom(from.guilddata_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_seasons(from.seasons());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DB_C_GuildBtl_Record::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DB_C_GuildBtl_Record::CopyFrom(const DB_C_GuildBtl_Record& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DB_C_GuildBtl_Record::IsInitialized() const {
  
  for (int i = 0; i < guilddata_size(); i++) {
    if (!this->guilddata(i).IsInitialized()) return false;
  }
  return true;
}

void DB_C_GuildBtl_Record::Swap(DB_C_GuildBtl_Record* other) {
  if (other != this) {
    std::swap(seasons_, other->seasons_);
    guilddata_.Swap(&other->guilddata_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DB_C_GuildBtl_Record::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DB_C_GuildBtl_Record_descriptor_;
  metadata.reflection = DB_C_GuildBtl_Record_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DB_C_Country::kRegionFieldNumber;
const int DB_C_Country::kCountryIDFieldNumber;
const int DB_C_Country::kUserCntFieldNumber;
const int DB_C_Country::kLtSaveRevisionFieldNumber;
const int DB_C_Country::kLastRankFieldNumber;
const int DB_C_Country::kBtlRecordFieldNumber;
const int DB_C_Country::kAtkTargetCityFieldNumber;
const int DB_C_Country::kDefTargetCityFieldNumber;
const int DB_C_Country::kArenaRankFieldNumber;
const int DB_C_Country::kNActivityIndexFieldNumber;
const int DB_C_Country::kWorldArenaRankFieldNumber;
const int DB_C_Country::kOfficerInfoFieldNumber;
const int DB_C_Country::kPubGuildBtlInfoFieldNumber;
const int DB_C_Country::kGBtlRecordFieldNumber;
const int DB_C_Country::kDataResetFlagFieldNumber;
const int DB_C_Country::kGveFirstDownListFieldNumber;
const int DB_C_Country::kGveFlagFieldNumber;
const int DB_C_Country::kHeroArenaRankFieldNumber;
const int DB_C_Country::kPubGvgBtlInfoFieldNumber;
const int DB_C_Country::kWpcrankFieldNumber;
const int DB_C_Country::kLastLeagueBattleFieldNumber;
const int DB_C_Country::kLeagueAllMsgFieldNumber;
const int DB_C_Country::kChatmsgFieldNumber;
const int DB_C_Country::kNpcactivecntFieldNumber;
const int DB_C_Country::kNpcactiverankFieldNumber;
const int DB_C_Country::kCityBuffDataFieldNumber;
#endif  // !_MSC_VER

DB_C_Country::DB_C_Country() {
  SharedCtor();
}

void DB_C_Country::InitAsDefaultInstance() {
  lastrank_ = const_cast< ::DB_C_CountryRank*>(&::DB_C_CountryRank::default_instance());
  arenarank_ = const_cast< ::DB_Arena_Rank*>(&::DB_Arena_Rank::default_instance());
  worldarenarank_ = const_cast< ::DB_WorldArena_Rank*>(&::DB_WorldArena_Rank::default_instance());
  officerinfo_ = const_cast< ::DB_C_OfficerInfo*>(&::DB_C_OfficerInfo::default_instance());
  pubguildbtlinfo_ = const_cast< ::DB_C_PubGuildBtlInfo*>(&::DB_C_PubGuildBtlInfo::default_instance());
  heroarenarank_ = const_cast< ::DB_HeroArena_Rank*>(&::DB_HeroArena_Rank::default_instance());
  pubgvgbtlinfo_ = const_cast< ::DB_C_PubGvgBtlInfo*>(&::DB_C_PubGvgBtlInfo::default_instance());
  wpcrank_ = const_cast< ::DB_C_WpcRank*>(&::DB_C_WpcRank::default_instance());
  lastleaguebattle_ = const_cast< ::DB_C_CountryLeagueBattle*>(&::DB_C_CountryLeagueBattle::default_instance());
  chatmsg_ = const_cast< ::DB_C_ChatMsg*>(&::DB_C_ChatMsg::default_instance());
  npcactiverank_ = const_cast< ::DB_C_NpcActiveRank*>(&::DB_C_NpcActiveRank::default_instance());
  citybuffdata_ = const_cast< ::DB_C_CityBuffData*>(&::DB_C_CityBuffData::default_instance());
}

DB_C_Country::DB_C_Country(const DB_C_Country& from) {
  SharedCtor();
  MergeFrom(from);
}

void DB_C_Country::SharedCtor() {
  _cached_size_ = 0;
  region_ = 0;
  countryid_ = 0;
  usercnt_ = 0;
  ltsaverevision_ = GOOGLE_LONGLONG(0);
  lastrank_ = NULL;
  atktargetcity_ = 0;
  deftargetcity_ = 0;
  arenarank_ = NULL;
  nactivityindex_ = 0u;
  worldarenarank_ = NULL;
  officerinfo_ = NULL;
  pubguildbtlinfo_ = NULL;
  dataresetflag_ = 0;
  gveflag_ = 0;
  heroarenarank_ = NULL;
  pubgvgbtlinfo_ = NULL;
  wpcrank_ = NULL;
  lastleaguebattle_ = NULL;
  chatmsg_ = NULL;
  npcactiverank_ = NULL;
  citybuffdata_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DB_C_Country::~DB_C_Country() {
  SharedDtor();
}

void DB_C_Country::SharedDtor() {
  if (this != default_instance_) {
    delete lastrank_;
    delete arenarank_;
    delete worldarenarank_;
    delete officerinfo_;
    delete pubguildbtlinfo_;
    delete heroarenarank_;
    delete pubgvgbtlinfo_;
    delete wpcrank_;
    delete lastleaguebattle_;
    delete chatmsg_;
    delete npcactiverank_;
    delete citybuffdata_;
  }
}

const ::google::protobuf::Descriptor* DB_C_Country::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DB_C_Country_descriptor_;
}

const DB_C_Country& DB_C_Country::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_countryDB_2eproto();  return *default_instance_;
}

DB_C_Country* DB_C_Country::default_instance_ = NULL;

DB_C_Country* DB_C_Country::New() const {
  return new DB_C_Country;
}

void DB_C_Country::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    region_ = 0;
    countryid_ = 0;
    usercnt_ = 0;
    ltsaverevision_ = GOOGLE_LONGLONG(0);
    if (_has_bit(4)) {
      if (lastrank_ != NULL) lastrank_->::DB_C_CountryRank::Clear();
    }
    atktargetcity_ = 0;
    deftargetcity_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (_has_bit(8)) {
      if (arenarank_ != NULL) arenarank_->::DB_Arena_Rank::Clear();
    }
    nactivityindex_ = 0u;
    if (_has_bit(10)) {
      if (worldarenarank_ != NULL) worldarenarank_->::DB_WorldArena_Rank::Clear();
    }
    if (_has_bit(11)) {
      if (officerinfo_ != NULL) officerinfo_->::DB_C_OfficerInfo::Clear();
    }
    if (_has_bit(12)) {
      if (pubguildbtlinfo_ != NULL) pubguildbtlinfo_->::DB_C_PubGuildBtlInfo::Clear();
    }
    dataresetflag_ = 0;
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    gveflag_ = 0;
    if (_has_bit(17)) {
      if (heroarenarank_ != NULL) heroarenarank_->::DB_HeroArena_Rank::Clear();
    }
    if (_has_bit(18)) {
      if (pubgvgbtlinfo_ != NULL) pubgvgbtlinfo_->::DB_C_PubGvgBtlInfo::Clear();
    }
    if (_has_bit(19)) {
      if (wpcrank_ != NULL) wpcrank_->::DB_C_WpcRank::Clear();
    }
    if (_has_bit(20)) {
      if (lastleaguebattle_ != NULL) lastleaguebattle_->::DB_C_CountryLeagueBattle::Clear();
    }
    if (_has_bit(22)) {
      if (chatmsg_ != NULL) chatmsg_->::DB_C_ChatMsg::Clear();
    }
  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (_has_bit(24)) {
      if (npcactiverank_ != NULL) npcactiverank_->::DB_C_NpcActiveRank::Clear();
    }
    if (_has_bit(25)) {
      if (citybuffdata_ != NULL) citybuffdata_->::DB_C_CityBuffData::Clear();
    }
  }
  btlrecord_.Clear();
  gbtlrecord_.Clear();
  gvefirstdownlist_.Clear();
  leagueallmsg_.Clear();
  npcactivecnt_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DB_C_Country::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 region = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &region_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_countryID;
        break;
      }
      
      // required int32 countryID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_countryID:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &countryid_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_userCnt;
        break;
      }
      
      // optional int32 userCnt = 3 [default = 0];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_userCnt:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &usercnt_));
        _set_bit(2);
        if (input->ExpectTag(32)) goto parse_ltSaveRevision;
        break;
      }
      
      // optional int64 ltSaveRevision = 4 [default = 0];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_ltSaveRevision:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt64(
              input, &ltsaverevision_));
        _set_bit(3);
        if (input->ExpectTag(42)) goto parse_lastRank;
        break;
      }
      
      // optional .DB_C_CountryRank lastRank = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_lastRank:
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
             input, mutable_lastrank()));
        if (input->ExpectTag(50)) goto parse_btlRecord;
        break;
      }
      
      // repeated .DB_C_BtlRecord btlRecord = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_btlRecord:
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, add_btlrecord()));
        if (input->ExpectTag(50)) goto parse_btlRecord;
        if (input->ExpectTag(56)) goto parse_atkTargetCity;
        break;
      }
      
      // optional int32 atkTargetCity = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_atkTargetCity:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &atktargetcity_));
        _set_bit(6);
        if (input->ExpectTag(64)) goto parse_defTargetCity;
        break;
      }
      
      // optional int32 defTargetCity = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_defTargetCity:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &deftargetcity_));
        _set_bit(7);
        if (input->ExpectTag(74)) goto parse_arenaRank;
        break;
      }
      
      // optional .DB_Arena_Rank arenaRank = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_arenaRank:
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
             input, mutable_arenarank()));
        if (input->ExpectTag(80)) goto parse_nActivityIndex;
        break;
      }
      
      // optional uint32 nActivityIndex = 10 [default = 0];
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_nActivityIndex:
        DO_(::google::protobuf::internal::WireFormatLite::ReadUInt32(
              input, &nactivityindex_));
        _set_bit(9);
        if (input->ExpectTag(90)) goto parse_worldArenaRank;
        break;
      }
      
      // optional .DB_WorldArena_Rank worldArenaRank = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_worldArenaRank:
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
             input, mutable_worldarenarank()));
        if (input->ExpectTag(98)) goto parse_officerInfo;
        break;
      }
      
      // optional .DB_C_OfficerInfo officerInfo = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_officerInfo:
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
             input, mutable_officerinfo()));
        if (input->ExpectTag(106)) goto parse_pubGuildBtlInfo;
        break;
      }
      
      // optional .DB_C_PubGuildBtlInfo pubGuildBtlInfo = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_pubGuildBtlInfo:
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
             input, mutable_pubguildbtlinfo()));
        if (input->ExpectTag(114)) goto parse_gBtlRecord;
        break;
      }
      
      // repeated .DB_C_GuildBtl_Record gBtlRecord = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_gBtlRecord:
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, add_gbtlrecord()));
        if (input->ExpectTag(114)) goto parse_gBtlRecord;
        if (input->ExpectTag(120)) goto parse_dataResetFlag;
        break;
      }
      
      // optional int32 dataResetFlag = 15 [default = 0];
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_dataResetFlag:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &dataresetflag_));
        _set_bit(14);
        if (input->ExpectTag(130)) goto parse_gveFirstDownList;
        break;
      }
      
      // repeated .DB_GVE_FirstDown gveFirstDownList = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_gveFirstDownList:
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, add_gvefirstdownlist()));
        if (input->ExpectTag(130)) goto parse_gveFirstDownList;
        if (input->ExpectTag(136)) goto parse_gveFlag;
        break;
      }
      
      // optional int32 gveFlag = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_gveFlag:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &gveflag_));
        _set_bit(16);
        if (input->ExpectTag(146)) goto parse_heroArenaRank;
        break;
      }
      
      // optional .DB_HeroArena_Rank heroArenaRank = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_heroArenaRank:
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
             input, mutable_heroarenarank()));
        if (input->ExpectTag(154)) goto parse_pubGvgBtlInfo;
        break;
      }
      
      // optional .DB_C_PubGvgBtlInfo pubGvgBtlInfo = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_pubGvgBtlInfo:
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
             input, mutable_pubgvgbtlinfo()));
        if (input->ExpectTag(162)) goto parse_wpcrank;
        break;
      }
      
      // optional .DB_C_WpcRank wpcrank = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_wpcrank:
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
             input, mutable_wpcrank()));
        if (input->ExpectTag(170)) goto parse_lastLeagueBattle;
        break;
      }
      
      // optional .DB_C_CountryLeagueBattle lastLeagueBattle = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_lastLeagueBattle:
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
             input, mutable_lastleaguebattle()));
        if (input->ExpectTag(178)) goto parse_leagueAllMsg;
        break;
      }
      
      // repeated .DB_C_CountryLeagueMsg leagueAllMsg = 22;
      case 22: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_leagueAllMsg:
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, add_leagueallmsg()));
        if (input->ExpectTag(178)) goto parse_leagueAllMsg;
        if (input->ExpectTag(186)) goto parse_chatmsg;
        break;
      }
      
      // optional .DB_C_ChatMsg chatmsg = 23;
      case 23: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_chatmsg:
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
             input, mutable_chatmsg()));
        if (input->ExpectTag(192)) goto parse_npcactivecnt;
        break;
      }
      
      // repeated int32 npcactivecnt = 24;
      case 24: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_npcactivecnt:
        ::google::protobuf::int32 value;
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &value));
        add_npcactivecnt(value);
        if (input->ExpectTag(192)) goto parse_npcactivecnt;
        if (input->ExpectTag(202)) goto parse_npcactiverank;
        break;
      }
      
      // optional .DB_C_NpcActiveRank npcactiverank = 25;
      case 25: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_npcactiverank:
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
             input, mutable_npcactiverank()));
        if (input->ExpectTag(210)) goto parse_CityBuffData;
        break;
      }
      
      // optional .DB_C_CityBuffData CityBuffData = 26;
      case 26: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_CityBuffData:
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
             input, mutable_citybuffdata()));
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DB_C_Country::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    DB_C_Country::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // required int32 region = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->region(), output);
  }
  
  // required int32 countryID = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->countryid(), output);
  }
  
  // optional int32 userCnt = 3 [default = 0];
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->usercnt(), output);
  }
  
  // optional int64 ltSaveRevision = 4 [default = 0];
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->ltsaverevision(), output);
  }
  
  // optional .DB_C_CountryRank lastRank = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      5, this->lastrank(), output);
  }
  
  // repeated .DB_C_BtlRecord btlRecord = 6;
  for (int i = 0; i < this->btlrecord_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      6, this->btlrecord(i), output);
  }
  
  // optional int32 atkTargetCity = 7;
  if (_has_bit(6)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->atktargetcity(), output);
  }
  
  // optional int32 defTargetCity = 8;
  if (_has_bit(7)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->deftargetcity(), output);
  }
  
  // optional .DB_Arena_Rank arenaRank = 9;
  if (_has_bit(8)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      9, this->arenarank(), output);
  }
  
  // optional uint32 nActivityIndex = 10 [default = 0];
  if (_has_bit(9)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->nactivityindex(), output);
  }
  
  // optional .DB_WorldArena_Rank worldArenaRank = 11;
  if (_has_bit(10)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      11, this->worldarenarank(), output);
  }
  
  // optional .DB_C_OfficerInfo officerInfo = 12;
  if (_has_bit(11)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      12, this->officerinfo(), output);
  }
  
  // optional .DB_C_PubGuildBtlInfo pubGuildBtlInfo = 13;
  if (_has_bit(12)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      13, this->pubguildbtlinfo(), output);
  }
  
  // repeated .DB_C_GuildBtl_Record gBtlRecord = 14;
  for (int i = 0; i < this->gbtlrecord_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      14, this->gbtlrecord(i), output);
  }
  
  // optional int32 dataResetFlag = 15 [default = 0];
  if (_has_bit(14)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(15, this->dataresetflag(), output);
  }
  
  // repeated .DB_GVE_FirstDown gveFirstDownList = 16;
  for (int i = 0; i < this->gvefirstdownlist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      16, this->gvefirstdownlist(i), output);
  }
  
  // optional int32 gveFlag = 17;
  if (_has_bit(16)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(17, this->gveflag(), output);
  }
  
  // optional .DB_HeroArena_Rank heroArenaRank = 18;
  if (_has_bit(17)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      18, this->heroarenarank(), output);
  }
  
  // optional .DB_C_PubGvgBtlInfo pubGvgBtlInfo = 19;
  if (_has_bit(18)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      19, this->pubgvgbtlinfo(), output);
  }
  
  // optional .DB_C_WpcRank wpcrank = 20;
  if (_has_bit(19)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      20, this->wpcrank(), output);
  }
  
  // optional .DB_C_CountryLeagueBattle lastLeagueBattle = 21;
  if (_has_bit(20)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      21, this->lastleaguebattle(), output);
  }
  
  // repeated .DB_C_CountryLeagueMsg leagueAllMsg = 22;
  for (int i = 0; i < this->leagueallmsg_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      22, this->leagueallmsg(i), output);
  }
  
  // optional .DB_C_ChatMsg chatmsg = 23;
  if (_has_bit(22)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      23, this->chatmsg(), output);
  }
  
  // repeated int32 npcactivecnt = 24;
  for (int i = 0; i < this->npcactivecnt_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      24, this->npcactivecnt(i), output);
  }
  
  // optional .DB_C_NpcActiveRank npcactiverank = 25;
  if (_has_bit(24)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      25, this->npcactiverank(), output);
  }
  
  // optional .DB_C_CityBuffData CityBuffData = 26;
  if (_has_bit(25)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      26, this->citybuffdata(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DB_C_Country::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 region = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->region(), target);
  }
  
  // required int32 countryID = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->countryid(), target);
  }
  
  // optional int32 userCnt = 3 [default = 0];
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->usercnt(), target);
  }
  
  // optional int64 ltSaveRevision = 4 [default = 0];
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->ltsaverevision(), target);
  }
  
  // optional .DB_C_CountryRank lastRank = 5;
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->lastrank(), target);
  }
  
  // repeated .DB_C_BtlRecord btlRecord = 6;
  for (int i = 0; i < this->btlrecord_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->btlrecord(i), target);
  }
  
  // optional int32 atkTargetCity = 7;
  if (_has_bit(6)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->atktargetcity(), target);
  }
  
  // optional int32 defTargetCity = 8;
  if (_has_bit(7)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->deftargetcity(), target);
  }
  
  // optional .DB_Arena_Rank arenaRank = 9;
  if (_has_bit(8)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->arenarank(), target);
  }
  
  // optional uint32 nActivityIndex = 10 [default = 0];
  if (_has_bit(9)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->nactivityindex(), target);
  }
  
  // optional .DB_WorldArena_Rank worldArenaRank = 11;
  if (_has_bit(10)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        11, this->worldarenarank(), target);
  }
  
  // optional .DB_C_OfficerInfo officerInfo = 12;
  if (_has_bit(11)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        12, this->officerinfo(), target);
  }
  
  // optional .DB_C_PubGuildBtlInfo pubGuildBtlInfo = 13;
  if (_has_bit(12)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        13, this->pubguildbtlinfo(), target);
  }
  
  // repeated .DB_C_GuildBtl_Record gBtlRecord = 14;
  for (int i = 0; i < this->gbtlrecord_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        14, this->gbtlrecord(i), target);
  }
  
  // optional int32 dataResetFlag = 15 [default = 0];
  if (_has_bit(14)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(15, this->dataresetflag(), target);
  }
  
  // repeated .DB_GVE_FirstDown gveFirstDownList = 16;
  for (int i = 0; i < this->gvefirstdownlist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        16, this->gvefirstdownlist(i), target);
  }
  
  // optional int32 gveFlag = 17;
  if (_has_bit(16)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(17, this->gveflag(), target);
  }
  
  // optional .DB_HeroArena_Rank heroArenaRank = 18;
  if (_has_bit(17)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        18, this->heroarenarank(), target);
  }
  
  // optional .DB_C_PubGvgBtlInfo pubGvgBtlInfo = 19;
  if (_has_bit(18)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        19, this->pubgvgbtlinfo(), target);
  }
  
  // optional .DB_C_WpcRank wpcrank = 20;
  if (_has_bit(19)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        20, this->wpcrank(), target);
  }
  
  // optional .DB_C_CountryLeagueBattle lastLeagueBattle = 21;
  if (_has_bit(20)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        21, this->lastleaguebattle(), target);
  }
  
  // repeated .DB_C_CountryLeagueMsg leagueAllMsg = 22;
  for (int i = 0; i < this->leagueallmsg_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        22, this->leagueallmsg(i), target);
  }
  
  // optional .DB_C_ChatMsg chatmsg = 23;
  if (_has_bit(22)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        23, this->chatmsg(), target);
  }
  
  // repeated int32 npcactivecnt = 24;
  for (int i = 0; i < this->npcactivecnt_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(24, this->npcactivecnt(i), target);
  }
  
  // optional .DB_C_NpcActiveRank npcactiverank = 25;
  if (_has_bit(24)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        25, this->npcactiverank(), target);
  }
  
  // optional .DB_C_CityBuffData CityBuffData = 26;
  if (_has_bit(25)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        26, this->citybuffdata(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DB_C_Country::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 region = 1;
    if (has_region()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->region());
    }
    
    // required int32 countryID = 2;
    if (has_countryid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->countryid());
    }
    
    // optional int32 userCnt = 3 [default = 0];
    if (has_usercnt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->usercnt());
    }
    
    // optional int64 ltSaveRevision = 4 [default = 0];
    if (has_ltsaverevision()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->ltsaverevision());
    }
    
    // optional .DB_C_CountryRank lastRank = 5;
    if (has_lastrank()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->lastrank());
    }
    
    // optional int32 atkTargetCity = 7;
    if (has_atktargetcity()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->atktargetcity());
    }
    
    // optional int32 defTargetCity = 8;
    if (has_deftargetcity()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->deftargetcity());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional .DB_Arena_Rank arenaRank = 9;
    if (has_arenarank()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->arenarank());
    }
    
    // optional uint32 nActivityIndex = 10 [default = 0];
    if (has_nactivityindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->nactivityindex());
    }
    
    // optional .DB_WorldArena_Rank worldArenaRank = 11;
    if (has_worldarenarank()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->worldarenarank());
    }
    
    // optional .DB_C_OfficerInfo officerInfo = 12;
    if (has_officerinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->officerinfo());
    }
    
    // optional .DB_C_PubGuildBtlInfo pubGuildBtlInfo = 13;
    if (has_pubguildbtlinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->pubguildbtlinfo());
    }
    
    // optional int32 dataResetFlag = 15 [default = 0];
    if (has_dataresetflag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->dataresetflag());
    }
    
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional int32 gveFlag = 17;
    if (has_gveflag()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gveflag());
    }
    
    // optional .DB_HeroArena_Rank heroArenaRank = 18;
    if (has_heroarenarank()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->heroarenarank());
    }
    
    // optional .DB_C_PubGvgBtlInfo pubGvgBtlInfo = 19;
    if (has_pubgvgbtlinfo()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->pubgvgbtlinfo());
    }
    
    // optional .DB_C_WpcRank wpcrank = 20;
    if (has_wpcrank()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->wpcrank());
    }
    
    // optional .DB_C_CountryLeagueBattle lastLeagueBattle = 21;
    if (has_lastleaguebattle()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->lastleaguebattle());
    }
    
    // optional .DB_C_ChatMsg chatmsg = 23;
    if (has_chatmsg()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->chatmsg());
    }
    
  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    // optional .DB_C_NpcActiveRank npcactiverank = 25;
    if (has_npcactiverank()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->npcactiverank());
    }
    
    // optional .DB_C_CityBuffData CityBuffData = 26;
    if (has_citybuffdata()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->citybuffdata());
    }
    
  }
  // repeated .DB_C_BtlRecord btlRecord = 6;
  total_size += 1 * this->btlrecord_size();
  for (int i = 0; i < this->btlrecord_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->btlrecord(i));
  }
  
  // repeated .DB_C_GuildBtl_Record gBtlRecord = 14;
  total_size += 1 * this->gbtlrecord_size();
  for (int i = 0; i < this->gbtlrecord_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->gbtlrecord(i));
  }
  
  // repeated .DB_GVE_FirstDown gveFirstDownList = 16;
  total_size += 2 * this->gvefirstdownlist_size();
  for (int i = 0; i < this->gvefirstdownlist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->gvefirstdownlist(i));
  }
  
  // repeated .DB_C_CountryLeagueMsg leagueAllMsg = 22;
  total_size += 2 * this->leagueallmsg_size();
  for (int i = 0; i < this->leagueallmsg_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->leagueallmsg(i));
  }
  
  // repeated int32 npcactivecnt = 24;
  {
    int data_size = 0;
    for (int i = 0; i < this->npcactivecnt_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->npcactivecnt(i));
    }
    total_size += 2 * this->npcactivecnt_size() + data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void DB_C_Country::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DB_C_Country* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DB_C_Country*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DB_C_Country::MergeFrom(const DB_C_Country& from) {
  GOOGLE_CHECK_NE(&from, this);
  btlrecord_.MergeFrom(from.btlrecord_);
  gbtlrecord_.MergeFrom(from.gbtlrecord_);
  gvefirstdownlist_.MergeFrom(from.gvefirstdownlist_);
  leagueallmsg_.MergeFrom(from.leagueallmsg_);
  npcactivecnt_.MergeFrom(from.npcactivecnt_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_region(from.region());
    }
    if (from._has_bit(1)) {
      set_countryid(from.countryid());
    }
    if (from._has_bit(2)) {
      set_usercnt(from.usercnt());
    }
    if (from._has_bit(3)) {
      set_ltsaverevision(from.ltsaverevision());
    }
    if (from._has_bit(4)) {
      mutable_lastrank()->::DB_C_CountryRank::MergeFrom(from.lastrank());
    }
    if (from._has_bit(6)) {
      set_atktargetcity(from.atktargetcity());
    }
    if (from._has_bit(7)) {
      set_deftargetcity(from.deftargetcity());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from._has_bit(8)) {
      mutable_arenarank()->::DB_Arena_Rank::MergeFrom(from.arenarank());
    }
    if (from._has_bit(9)) {
      set_nactivityindex(from.nactivityindex());
    }
    if (from._has_bit(10)) {
      mutable_worldarenarank()->::DB_WorldArena_Rank::MergeFrom(from.worldarenarank());
    }
    if (from._has_bit(11)) {
      mutable_officerinfo()->::DB_C_OfficerInfo::MergeFrom(from.officerinfo());
    }
    if (from._has_bit(12)) {
      mutable_pubguildbtlinfo()->::DB_C_PubGuildBtlInfo::MergeFrom(from.pubguildbtlinfo());
    }
    if (from._has_bit(14)) {
      set_dataresetflag(from.dataresetflag());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from._has_bit(16)) {
      set_gveflag(from.gveflag());
    }
    if (from._has_bit(17)) {
      mutable_heroarenarank()->::DB_HeroArena_Rank::MergeFrom(from.heroarenarank());
    }
    if (from._has_bit(18)) {
      mutable_pubgvgbtlinfo()->::DB_C_PubGvgBtlInfo::MergeFrom(from.pubgvgbtlinfo());
    }
    if (from._has_bit(19)) {
      mutable_wpcrank()->::DB_C_WpcRank::MergeFrom(from.wpcrank());
    }
    if (from._has_bit(20)) {
      mutable_lastleaguebattle()->::DB_C_CountryLeagueBattle::MergeFrom(from.lastleaguebattle());
    }
    if (from._has_bit(22)) {
      mutable_chatmsg()->::DB_C_ChatMsg::MergeFrom(from.chatmsg());
    }
  }
  if (from._has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (from._has_bit(24)) {
      mutable_npcactiverank()->::DB_C_NpcActiveRank::MergeFrom(from.npcactiverank());
    }
    if (from._has_bit(25)) {
      mutable_citybuffdata()->::DB_C_CityBuffData::MergeFrom(from.citybuffdata());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DB_C_Country::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DB_C_Country::CopyFrom(const DB_C_Country& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DB_C_Country::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  for (int i = 0; i < gbtlrecord_size(); i++) {
    if (!this->gbtlrecord(i).IsInitialized()) return false;
  }
  return true;
}

void DB_C_Country::Swap(DB_C_Country* other) {
  if (other != this) {
    std::swap(region_, other->region_);
    std::swap(countryid_, other->countryid_);
    std::swap(usercnt_, other->usercnt_);
    std::swap(ltsaverevision_, other->ltsaverevision_);
    std::swap(lastrank_, other->lastrank_);
    btlrecord_.Swap(&other->btlrecord_);
    std::swap(atktargetcity_, other->atktargetcity_);
    std::swap(deftargetcity_, other->deftargetcity_);
    std::swap(arenarank_, other->arenarank_);
    std::swap(nactivityindex_, other->nactivityindex_);
    std::swap(worldarenarank_, other->worldarenarank_);
    std::swap(officerinfo_, other->officerinfo_);
    std::swap(pubguildbtlinfo_, other->pubguildbtlinfo_);
    gbtlrecord_.Swap(&other->gbtlrecord_);
    std::swap(dataresetflag_, other->dataresetflag_);
    gvefirstdownlist_.Swap(&other->gvefirstdownlist_);
    std::swap(gveflag_, other->gveflag_);
    std::swap(heroarenarank_, other->heroarenarank_);
    std::swap(pubgvgbtlinfo_, other->pubgvgbtlinfo_);
    std::swap(wpcrank_, other->wpcrank_);
    std::swap(lastleaguebattle_, other->lastleaguebattle_);
    leagueallmsg_.Swap(&other->leagueallmsg_);
    std::swap(chatmsg_, other->chatmsg_);
    npcactivecnt_.Swap(&other->npcactivecnt_);
    std::swap(npcactiverank_, other->npcactiverank_);
    std::swap(citybuffdata_, other->citybuffdata_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DB_C_Country::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DB_C_Country_descriptor_;
  metadata.reflection = DB_C_Country_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DB_C_GuildBld::kIdFieldNumber;
const int DB_C_GuildBld::kLevelFieldNumber;
const int DB_C_GuildBld::kExpFieldNumber;
#endif  // !_MSC_VER

DB_C_GuildBld::DB_C_GuildBld() {
  SharedCtor();
}

void DB_C_GuildBld::InitAsDefaultInstance() {
}

DB_C_GuildBld::DB_C_GuildBld(const DB_C_GuildBld& from) {
  SharedCtor();
  MergeFrom(from);
}

void DB_C_GuildBld::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  level_ = 0;
  exp_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DB_C_GuildBld::~DB_C_GuildBld() {
  SharedDtor();
}

void DB_C_GuildBld::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* DB_C_GuildBld::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DB_C_GuildBld_descriptor_;
}

const DB_C_GuildBld& DB_C_GuildBld::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_countryDB_2eproto();  return *default_instance_;
}

DB_C_GuildBld* DB_C_GuildBld::default_instance_ = NULL;

DB_C_GuildBld* DB_C_GuildBld::New() const {
  return new DB_C_GuildBld;
}

void DB_C_GuildBld::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    level_ = 0;
    exp_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DB_C_GuildBld::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &id_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_level;
        break;
      }
      
      // optional int32 level = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_level:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &level_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_exp;
        break;
      }
      
      // optional int32 exp = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_exp:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &exp_));
        _set_bit(2);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DB_C_GuildBld::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    DB_C_GuildBld::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional int32 id = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }
  
  // optional int32 level = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->level(), output);
  }
  
  // optional int32 exp = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->exp(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DB_C_GuildBld::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 id = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }
  
  // optional int32 level = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->level(), target);
  }
  
  // optional int32 exp = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->exp(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DB_C_GuildBld::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }
    
    // optional int32 level = 2;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->level());
    }
    
    // optional int32 exp = 3;
    if (has_exp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->exp());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void DB_C_GuildBld::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DB_C_GuildBld* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DB_C_GuildBld*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DB_C_GuildBld::MergeFrom(const DB_C_GuildBld& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_id(from.id());
    }
    if (from._has_bit(1)) {
      set_level(from.level());
    }
    if (from._has_bit(2)) {
      set_exp(from.exp());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DB_C_GuildBld::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DB_C_GuildBld::CopyFrom(const DB_C_GuildBld& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DB_C_GuildBld::IsInitialized() const {
  
  return true;
}

void DB_C_GuildBld::Swap(DB_C_GuildBld* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(level_, other->level_);
    std::swap(exp_, other->exp_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DB_C_GuildBld::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DB_C_GuildBld_descriptor_;
  metadata.reflection = DB_C_GuildBld_reflection_;
  return metadata;
}


// ===================================================================

const ::std::string DB_C_GuildLog::_default_userid_;
const ::std::string DB_C_GuildLog::_default_username_;
#ifndef _MSC_VER
const int DB_C_GuildLog::kTimeFieldNumber;
const int DB_C_GuildLog::kUserIDFieldNumber;
const int DB_C_GuildLog::kUserNameFieldNumber;
const int DB_C_GuildLog::kLogTypeFieldNumber;
const int DB_C_GuildLog::kUserPosFieldNumber;
const int DB_C_GuildLog::kBldIDFieldNumber;
const int DB_C_GuildLog::kBldLVFieldNumber;
const int DB_C_GuildLog::kPayTypeFieldNumber;
const int DB_C_GuildLog::kGScoreFieldNumber;
const int DB_C_GuildLog::kItemIDFieldNumber;
const int DB_C_GuildLog::kItemCntFieldNumber;
const int DB_C_GuildLog::kBldValueFieldNumber;
const int DB_C_GuildLog::kPkRankFieldNumber;
const int DB_C_GuildLog::kPkRank1FieldNumber;
#endif  // !_MSC_VER

DB_C_GuildLog::DB_C_GuildLog() {
  SharedCtor();
}

void DB_C_GuildLog::InitAsDefaultInstance() {
}

DB_C_GuildLog::DB_C_GuildLog(const DB_C_GuildLog& from) {
  SharedCtor();
  MergeFrom(from);
}

void DB_C_GuildLog::SharedCtor() {
  _cached_size_ = 0;
  time_ = 0;
  userid_ = const_cast< ::std::string*>(&_default_userid_);
  username_ = const_cast< ::std::string*>(&_default_username_);
  logtype_ = 0;
  userpos_ = 0;
  bldid_ = 0;
  bldlv_ = 0;
  paytype_ = 0;
  gscore_ = 0;
  itemid_ = 0;
  itemcnt_ = 0;
  bldvalue_ = 0;
  pkrank_ = 0;
  pkrank1_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DB_C_GuildLog::~DB_C_GuildLog() {
  SharedDtor();
}

void DB_C_GuildLog::SharedDtor() {
  if (userid_ != &_default_userid_) {
    delete userid_;
  }
  if (username_ != &_default_username_) {
    delete username_;
  }
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* DB_C_GuildLog::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DB_C_GuildLog_descriptor_;
}

const DB_C_GuildLog& DB_C_GuildLog::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_countryDB_2eproto();  return *default_instance_;
}

DB_C_GuildLog* DB_C_GuildLog::default_instance_ = NULL;

DB_C_GuildLog* DB_C_GuildLog::New() const {
  return new DB_C_GuildLog;
}

void DB_C_GuildLog::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    time_ = 0;
    if (_has_bit(1)) {
      if (userid_ != &_default_userid_) {
        userid_->clear();
      }
    }
    if (_has_bit(2)) {
      if (username_ != &_default_username_) {
        username_->clear();
      }
    }
    logtype_ = 0;
    userpos_ = 0;
    bldid_ = 0;
    bldlv_ = 0;
    paytype_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    gscore_ = 0;
    itemid_ = 0;
    itemcnt_ = 0;
    bldvalue_ = 0;
    pkrank_ = 0;
    pkrank1_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DB_C_GuildLog::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 time = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &time_));
        _set_bit(0);
        if (input->ExpectTag(18)) goto parse_userID;
        break;
      }
      
      // optional string userID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_userID:
        DO_(::google::protobuf::internal::WireFormatLite::ReadString(
              input, this->mutable_userid()));
        ::google::protobuf::internal::WireFormat::VerifyUTF8String(
          this->userid().data(), this->userid().length(),
          ::google::protobuf::internal::WireFormat::PARSE);
        if (input->ExpectTag(26)) goto parse_userName;
        break;
      }
      
      // optional string userName = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_userName:
        DO_(::google::protobuf::internal::WireFormatLite::ReadString(
              input, this->mutable_username()));
        ::google::protobuf::internal::WireFormat::VerifyUTF8String(
          this->username().data(), this->username().length(),
          ::google::protobuf::internal::WireFormat::PARSE);
        if (input->ExpectTag(32)) goto parse_logType;
        break;
      }
      
      // optional int32 logType = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_logType:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &logtype_));
        _set_bit(3);
        if (input->ExpectTag(40)) goto parse_userPos;
        break;
      }
      
      // optional int32 userPos = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_userPos:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &userpos_));
        _set_bit(4);
        if (input->ExpectTag(48)) goto parse_bldID;
        break;
      }
      
      // optional int32 bldID = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_bldID:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &bldid_));
        _set_bit(5);
        if (input->ExpectTag(56)) goto parse_bldLV;
        break;
      }
      
      // optional int32 bldLV = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_bldLV:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &bldlv_));
        _set_bit(6);
        if (input->ExpectTag(64)) goto parse_payType;
        break;
      }
      
      // optional int32 payType = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_payType:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &paytype_));
        _set_bit(7);
        if (input->ExpectTag(72)) goto parse_gScore;
        break;
      }
      
      // optional int32 gScore = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_gScore:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &gscore_));
        _set_bit(8);
        if (input->ExpectTag(80)) goto parse_itemID;
        break;
      }
      
      // optional int32 itemID = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_itemID:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &itemid_));
        _set_bit(9);
        if (input->ExpectTag(88)) goto parse_itemCnt;
        break;
      }
      
      // optional int32 itemCnt = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_itemCnt:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &itemcnt_));
        _set_bit(10);
        if (input->ExpectTag(96)) goto parse_bldValue;
        break;
      }
      
      // optional int32 bldValue = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_bldValue:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &bldvalue_));
        _set_bit(11);
        if (input->ExpectTag(104)) goto parse_pkRank;
        break;
      }
      
      // optional int32 pkRank = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_pkRank:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &pkrank_));
        _set_bit(12);
        if (input->ExpectTag(112)) goto parse_pkRank1;
        break;
      }
      
      // optional int32 pkRank1 = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_pkRank1:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &pkrank1_));
        _set_bit(13);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DB_C_GuildLog::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    DB_C_GuildLog::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional int32 time = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->time(), output);
  }
  
  // optional string userID = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->userid().data(), this->userid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->userid(), output);
  }
  
  // optional string userName = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->username().data(), this->username().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->username(), output);
  }
  
  // optional int32 logType = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->logtype(), output);
  }
  
  // optional int32 userPos = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->userpos(), output);
  }
  
  // optional int32 bldID = 6;
  if (_has_bit(5)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->bldid(), output);
  }
  
  // optional int32 bldLV = 7;
  if (_has_bit(6)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->bldlv(), output);
  }
  
  // optional int32 payType = 8;
  if (_has_bit(7)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->paytype(), output);
  }
  
  // optional int32 gScore = 9;
  if (_has_bit(8)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->gscore(), output);
  }
  
  // optional int32 itemID = 10;
  if (_has_bit(9)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->itemid(), output);
  }
  
  // optional int32 itemCnt = 11;
  if (_has_bit(10)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->itemcnt(), output);
  }
  
  // optional int32 bldValue = 12;
  if (_has_bit(11)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->bldvalue(), output);
  }
  
  // optional int32 pkRank = 13;
  if (_has_bit(12)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->pkrank(), output);
  }
  
  // optional int32 pkRank1 = 14;
  if (_has_bit(13)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->pkrank1(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DB_C_GuildLog::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 time = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->time(), target);
  }
  
  // optional string userID = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->userid().data(), this->userid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->userid(), target);
  }
  
  // optional string userName = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->username().data(), this->username().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->username(), target);
  }
  
  // optional int32 logType = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->logtype(), target);
  }
  
  // optional int32 userPos = 5;
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->userpos(), target);
  }
  
  // optional int32 bldID = 6;
  if (_has_bit(5)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->bldid(), target);
  }
  
  // optional int32 bldLV = 7;
  if (_has_bit(6)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->bldlv(), target);
  }
  
  // optional int32 payType = 8;
  if (_has_bit(7)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->paytype(), target);
  }
  
  // optional int32 gScore = 9;
  if (_has_bit(8)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->gscore(), target);
  }
  
  // optional int32 itemID = 10;
  if (_has_bit(9)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->itemid(), target);
  }
  
  // optional int32 itemCnt = 11;
  if (_has_bit(10)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->itemcnt(), target);
  }
  
  // optional int32 bldValue = 12;
  if (_has_bit(11)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->bldvalue(), target);
  }
  
  // optional int32 pkRank = 13;
  if (_has_bit(12)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->pkrank(), target);
  }
  
  // optional int32 pkRank1 = 14;
  if (_has_bit(13)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(14, this->pkrank1(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DB_C_GuildLog::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 time = 1;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->time());
    }
    
    // optional string userID = 2;
    if (has_userid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->userid());
    }
    
    // optional string userName = 3;
    if (has_username()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->username());
    }
    
    // optional int32 logType = 4;
    if (has_logtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->logtype());
    }
    
    // optional int32 userPos = 5;
    if (has_userpos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->userpos());
    }
    
    // optional int32 bldID = 6;
    if (has_bldid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bldid());
    }
    
    // optional int32 bldLV = 7;
    if (has_bldlv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bldlv());
    }
    
    // optional int32 payType = 8;
    if (has_paytype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->paytype());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 gScore = 9;
    if (has_gscore()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gscore());
    }
    
    // optional int32 itemID = 10;
    if (has_itemid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->itemid());
    }
    
    // optional int32 itemCnt = 11;
    if (has_itemcnt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->itemcnt());
    }
    
    // optional int32 bldValue = 12;
    if (has_bldvalue()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bldvalue());
    }
    
    // optional int32 pkRank = 13;
    if (has_pkrank()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pkrank());
    }
    
    // optional int32 pkRank1 = 14;
    if (has_pkrank1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pkrank1());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void DB_C_GuildLog::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DB_C_GuildLog* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DB_C_GuildLog*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DB_C_GuildLog::MergeFrom(const DB_C_GuildLog& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_time(from.time());
    }
    if (from._has_bit(1)) {
      set_userid(from.userid());
    }
    if (from._has_bit(2)) {
      set_username(from.username());
    }
    if (from._has_bit(3)) {
      set_logtype(from.logtype());
    }
    if (from._has_bit(4)) {
      set_userpos(from.userpos());
    }
    if (from._has_bit(5)) {
      set_bldid(from.bldid());
    }
    if (from._has_bit(6)) {
      set_bldlv(from.bldlv());
    }
    if (from._has_bit(7)) {
      set_paytype(from.paytype());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from._has_bit(8)) {
      set_gscore(from.gscore());
    }
    if (from._has_bit(9)) {
      set_itemid(from.itemid());
    }
    if (from._has_bit(10)) {
      set_itemcnt(from.itemcnt());
    }
    if (from._has_bit(11)) {
      set_bldvalue(from.bldvalue());
    }
    if (from._has_bit(12)) {
      set_pkrank(from.pkrank());
    }
    if (from._has_bit(13)) {
      set_pkrank1(from.pkrank1());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DB_C_GuildLog::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DB_C_GuildLog::CopyFrom(const DB_C_GuildLog& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DB_C_GuildLog::IsInitialized() const {
  
  return true;
}

void DB_C_GuildLog::Swap(DB_C_GuildLog* other) {
  if (other != this) {
    std::swap(time_, other->time_);
    std::swap(userid_, other->userid_);
    std::swap(username_, other->username_);
    std::swap(logtype_, other->logtype_);
    std::swap(userpos_, other->userpos_);
    std::swap(bldid_, other->bldid_);
    std::swap(bldlv_, other->bldlv_);
    std::swap(paytype_, other->paytype_);
    std::swap(gscore_, other->gscore_);
    std::swap(itemid_, other->itemid_);
    std::swap(itemcnt_, other->itemcnt_);
    std::swap(bldvalue_, other->bldvalue_);
    std::swap(pkrank_, other->pkrank_);
    std::swap(pkrank1_, other->pkrank1_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DB_C_GuildLog::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DB_C_GuildLog_descriptor_;
  metadata.reflection = DB_C_GuildLog_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DB_C_GuildBuyRecord::kDayBuyShopIDFieldNumber;
const int DB_C_GuildBuyRecord::kDayBuyShopCntFieldNumber;
#endif  // !_MSC_VER

DB_C_GuildBuyRecord::DB_C_GuildBuyRecord() {
  SharedCtor();
}

void DB_C_GuildBuyRecord::InitAsDefaultInstance() {
}

DB_C_GuildBuyRecord::DB_C_GuildBuyRecord(const DB_C_GuildBuyRecord& from) {
  SharedCtor();
  MergeFrom(from);
}

void DB_C_GuildBuyRecord::SharedCtor() {
  _cached_size_ = 0;
  daybuyshopid_ = 0;
  daybuyshopcnt_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DB_C_GuildBuyRecord::~DB_C_GuildBuyRecord() {
  SharedDtor();
}

void DB_C_GuildBuyRecord::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* DB_C_GuildBuyRecord::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DB_C_GuildBuyRecord_descriptor_;
}

const DB_C_GuildBuyRecord& DB_C_GuildBuyRecord::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_countryDB_2eproto();  return *default_instance_;
}

DB_C_GuildBuyRecord* DB_C_GuildBuyRecord::default_instance_ = NULL;

DB_C_GuildBuyRecord* DB_C_GuildBuyRecord::New() const {
  return new DB_C_GuildBuyRecord;
}

void DB_C_GuildBuyRecord::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    daybuyshopid_ = 0;
    daybuyshopcnt_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DB_C_GuildBuyRecord::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 dayBuyShopID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &daybuyshopid_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_dayBuyShopCnt;
        break;
      }
      
      // optional int32 dayBuyShopCnt = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_dayBuyShopCnt:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &daybuyshopcnt_));
        _set_bit(1);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DB_C_GuildBuyRecord::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    DB_C_GuildBuyRecord::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional int32 dayBuyShopID = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->daybuyshopid(), output);
  }
  
  // optional int32 dayBuyShopCnt = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->daybuyshopcnt(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DB_C_GuildBuyRecord::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 dayBuyShopID = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->daybuyshopid(), target);
  }
  
  // optional int32 dayBuyShopCnt = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->daybuyshopcnt(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DB_C_GuildBuyRecord::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 dayBuyShopID = 1;
    if (has_daybuyshopid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->daybuyshopid());
    }
    
    // optional int32 dayBuyShopCnt = 2;
    if (has_daybuyshopcnt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->daybuyshopcnt());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void DB_C_GuildBuyRecord::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DB_C_GuildBuyRecord* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DB_C_GuildBuyRecord*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DB_C_GuildBuyRecord::MergeFrom(const DB_C_GuildBuyRecord& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_daybuyshopid(from.daybuyshopid());
    }
    if (from._has_bit(1)) {
      set_daybuyshopcnt(from.daybuyshopcnt());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DB_C_GuildBuyRecord::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DB_C_GuildBuyRecord::CopyFrom(const DB_C_GuildBuyRecord& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DB_C_GuildBuyRecord::IsInitialized() const {
  
  return true;
}

void DB_C_GuildBuyRecord::Swap(DB_C_GuildBuyRecord* other) {
  if (other != this) {
    std::swap(daybuyshopid_, other->daybuyshopid_);
    std::swap(daybuyshopcnt_, other->daybuyshopcnt_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DB_C_GuildBuyRecord::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DB_C_GuildBuyRecord_descriptor_;
  metadata.reflection = DB_C_GuildBuyRecord_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DB_C_GuildShopPmt::kShopIDFieldNumber;
const int DB_C_GuildShopPmt::kPositionFieldNumber;
#endif  // !_MSC_VER

DB_C_GuildShopPmt::DB_C_GuildShopPmt() {
  SharedCtor();
}

void DB_C_GuildShopPmt::InitAsDefaultInstance() {
}

DB_C_GuildShopPmt::DB_C_GuildShopPmt(const DB_C_GuildShopPmt& from) {
  SharedCtor();
  MergeFrom(from);
}

void DB_C_GuildShopPmt::SharedCtor() {
  _cached_size_ = 0;
  shopid_ = 0;
  position_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DB_C_GuildShopPmt::~DB_C_GuildShopPmt() {
  SharedDtor();
}

void DB_C_GuildShopPmt::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* DB_C_GuildShopPmt::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DB_C_GuildShopPmt_descriptor_;
}

const DB_C_GuildShopPmt& DB_C_GuildShopPmt::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_countryDB_2eproto();  return *default_instance_;
}

DB_C_GuildShopPmt* DB_C_GuildShopPmt::default_instance_ = NULL;

DB_C_GuildShopPmt* DB_C_GuildShopPmt::New() const {
  return new DB_C_GuildShopPmt;
}

void DB_C_GuildShopPmt::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    shopid_ = 0;
    position_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DB_C_GuildShopPmt::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 shopID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &shopid_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_position;
        break;
      }
      
      // optional int32 position = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_position:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &position_));
        _set_bit(1);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DB_C_GuildShopPmt::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    DB_C_GuildShopPmt::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional int32 shopID = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->shopid(), output);
  }
  
  // optional int32 position = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->position(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DB_C_GuildShopPmt::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 shopID = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->shopid(), target);
  }
  
  // optional int32 position = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->position(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DB_C_GuildShopPmt::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 shopID = 1;
    if (has_shopid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->shopid());
    }
    
    // optional int32 position = 2;
    if (has_position()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->position());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void DB_C_GuildShopPmt::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DB_C_GuildShopPmt* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DB_C_GuildShopPmt*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DB_C_GuildShopPmt::MergeFrom(const DB_C_GuildShopPmt& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_shopid(from.shopid());
    }
    if (from._has_bit(1)) {
      set_position(from.position());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DB_C_GuildShopPmt::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DB_C_GuildShopPmt::CopyFrom(const DB_C_GuildShopPmt& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DB_C_GuildShopPmt::IsInitialized() const {
  
  return true;
}

void DB_C_GuildShopPmt::Swap(DB_C_GuildShopPmt* other) {
  if (other != this) {
    std::swap(shopid_, other->shopid_);
    std::swap(position_, other->position_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DB_C_GuildShopPmt::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DB_C_GuildShopPmt_descriptor_;
  metadata.reflection = DB_C_GuildShopPmt_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DB_C_GuildShop::kMysticShopUpdateTMFieldNumber;
const int DB_C_GuildShop::kMysticShopSaleIDFieldNumber;
const int DB_C_GuildShop::kBuyRecordDayFieldNumber;
const int DB_C_GuildShop::kBuyRecordFieldNumber;
const int DB_C_GuildShop::kShopPmtFieldNumber;
#endif  // !_MSC_VER

DB_C_GuildShop::DB_C_GuildShop() {
  SharedCtor();
}

void DB_C_GuildShop::InitAsDefaultInstance() {
}

DB_C_GuildShop::DB_C_GuildShop(const DB_C_GuildShop& from) {
  SharedCtor();
  MergeFrom(from);
}

void DB_C_GuildShop::SharedCtor() {
  _cached_size_ = 0;
  mysticshopupdatetm_ = 0;
  buyrecordday_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DB_C_GuildShop::~DB_C_GuildShop() {
  SharedDtor();
}

void DB_C_GuildShop::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* DB_C_GuildShop::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DB_C_GuildShop_descriptor_;
}

const DB_C_GuildShop& DB_C_GuildShop::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_countryDB_2eproto();  return *default_instance_;
}

DB_C_GuildShop* DB_C_GuildShop::default_instance_ = NULL;

DB_C_GuildShop* DB_C_GuildShop::New() const {
  return new DB_C_GuildShop;
}

void DB_C_GuildShop::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    mysticshopupdatetm_ = 0;
    buyrecordday_ = 0;
  }
  mysticshopsaleid_.Clear();
  buyrecord_.Clear();
  shoppmt_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DB_C_GuildShop::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 mysticShopUpdateTM = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &mysticshopupdatetm_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_mysticShopSaleID;
        break;
      }
      
      // repeated int32 mysticShopSaleID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_mysticShopSaleID:
        ::google::protobuf::int32 value;
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &value));
        add_mysticshopsaleid(value);
        if (input->ExpectTag(16)) goto parse_mysticShopSaleID;
        if (input->ExpectTag(24)) goto parse_buyRecordDay;
        break;
      }
      
      // optional int32 buyRecordDay = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_buyRecordDay:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &buyrecordday_));
        _set_bit(2);
        if (input->ExpectTag(34)) goto parse_buyRecord;
        break;
      }
      
      // repeated .DB_C_GuildBuyRecord buyRecord = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_buyRecord:
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, add_buyrecord()));
        if (input->ExpectTag(34)) goto parse_buyRecord;
        if (input->ExpectTag(42)) goto parse_shopPmt;
        break;
      }
      
      // repeated .DB_C_GuildShopPmt shopPmt = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_shopPmt:
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, add_shoppmt()));
        if (input->ExpectTag(42)) goto parse_shopPmt;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DB_C_GuildShop::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    DB_C_GuildShop::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional int32 mysticShopUpdateTM = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->mysticshopupdatetm(), output);
  }
  
  // repeated int32 mysticShopSaleID = 2;
  for (int i = 0; i < this->mysticshopsaleid_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      2, this->mysticshopsaleid(i), output);
  }
  
  // optional int32 buyRecordDay = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->buyrecordday(), output);
  }
  
  // repeated .DB_C_GuildBuyRecord buyRecord = 4;
  for (int i = 0; i < this->buyrecord_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      4, this->buyrecord(i), output);
  }
  
  // repeated .DB_C_GuildShopPmt shopPmt = 5;
  for (int i = 0; i < this->shoppmt_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      5, this->shoppmt(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DB_C_GuildShop::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 mysticShopUpdateTM = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->mysticshopupdatetm(), target);
  }
  
  // repeated int32 mysticShopSaleID = 2;
  for (int i = 0; i < this->mysticshopsaleid_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(2, this->mysticshopsaleid(i), target);
  }
  
  // optional int32 buyRecordDay = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->buyrecordday(), target);
  }
  
  // repeated .DB_C_GuildBuyRecord buyRecord = 4;
  for (int i = 0; i < this->buyrecord_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->buyrecord(i), target);
  }
  
  // repeated .DB_C_GuildShopPmt shopPmt = 5;
  for (int i = 0; i < this->shoppmt_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->shoppmt(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DB_C_GuildShop::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 mysticShopUpdateTM = 1;
    if (has_mysticshopupdatetm()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->mysticshopupdatetm());
    }
    
    // optional int32 buyRecordDay = 3;
    if (has_buyrecordday()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->buyrecordday());
    }
    
  }
  // repeated int32 mysticShopSaleID = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->mysticshopsaleid_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->mysticshopsaleid(i));
    }
    total_size += 1 * this->mysticshopsaleid_size() + data_size;
  }
  
  // repeated .DB_C_GuildBuyRecord buyRecord = 4;
  total_size += 1 * this->buyrecord_size();
  for (int i = 0; i < this->buyrecord_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->buyrecord(i));
  }
  
  // repeated .DB_C_GuildShopPmt shopPmt = 5;
  total_size += 1 * this->shoppmt_size();
  for (int i = 0; i < this->shoppmt_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->shoppmt(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void DB_C_GuildShop::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DB_C_GuildShop* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DB_C_GuildShop*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DB_C_GuildShop::MergeFrom(const DB_C_GuildShop& from) {
  GOOGLE_CHECK_NE(&from, this);
  mysticshopsaleid_.MergeFrom(from.mysticshopsaleid_);
  buyrecord_.MergeFrom(from.buyrecord_);
  shoppmt_.MergeFrom(from.shoppmt_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_mysticshopupdatetm(from.mysticshopupdatetm());
    }
    if (from._has_bit(2)) {
      set_buyrecordday(from.buyrecordday());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DB_C_GuildShop::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DB_C_GuildShop::CopyFrom(const DB_C_GuildShop& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DB_C_GuildShop::IsInitialized() const {
  
  return true;
}

void DB_C_GuildShop::Swap(DB_C_GuildShop* other) {
  if (other != this) {
    std::swap(mysticshopupdatetm_, other->mysticshopupdatetm_);
    mysticshopsaleid_.Swap(&other->mysticshopsaleid_);
    std::swap(buyrecordday_, other->buyrecordday_);
    buyrecord_.Swap(&other->buyrecord_);
    shoppmt_.Swap(&other->shoppmt_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DB_C_GuildShop::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DB_C_GuildShop_descriptor_;
  metadata.reflection = DB_C_GuildShop_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DB_C_GuildBtlAddProp::kUserIDFieldNumber;
const int DB_C_GuildBtlAddProp::kAddAtkPctFieldNumber;
const int DB_C_GuildBtlAddProp::kAddBloodPctFieldNumber;
#endif  // !_MSC_VER

DB_C_GuildBtlAddProp::DB_C_GuildBtlAddProp() {
  SharedCtor();
}

void DB_C_GuildBtlAddProp::InitAsDefaultInstance() {
}

DB_C_GuildBtlAddProp::DB_C_GuildBtlAddProp(const DB_C_GuildBtlAddProp& from) {
  SharedCtor();
  MergeFrom(from);
}

void DB_C_GuildBtlAddProp::SharedCtor() {
  _cached_size_ = 0;
  userid_ = GOOGLE_LONGLONG(0);
  addatkpct_ = 0;
  addbloodpct_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DB_C_GuildBtlAddProp::~DB_C_GuildBtlAddProp() {
  SharedDtor();
}

void DB_C_GuildBtlAddProp::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* DB_C_GuildBtlAddProp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DB_C_GuildBtlAddProp_descriptor_;
}

const DB_C_GuildBtlAddProp& DB_C_GuildBtlAddProp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_countryDB_2eproto();  return *default_instance_;
}

DB_C_GuildBtlAddProp* DB_C_GuildBtlAddProp::default_instance_ = NULL;

DB_C_GuildBtlAddProp* DB_C_GuildBtlAddProp::New() const {
  return new DB_C_GuildBtlAddProp;
}

void DB_C_GuildBtlAddProp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    userid_ = GOOGLE_LONGLONG(0);
    addatkpct_ = 0;
    addbloodpct_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DB_C_GuildBtlAddProp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 userID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt64(
              input, &userid_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_addAtkPct;
        break;
      }
      
      // optional int32 addAtkPct = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_addAtkPct:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &addatkpct_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_addBloodPct;
        break;
      }
      
      // optional int32 addBloodPct = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_addBloodPct:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &addbloodpct_));
        _set_bit(2);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DB_C_GuildBtlAddProp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    DB_C_GuildBtlAddProp::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional int64 userID = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->userid(), output);
  }
  
  // optional int32 addAtkPct = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->addatkpct(), output);
  }
  
  // optional int32 addBloodPct = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->addbloodpct(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DB_C_GuildBtlAddProp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int64 userID = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->userid(), target);
  }
  
  // optional int32 addAtkPct = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->addatkpct(), target);
  }
  
  // optional int32 addBloodPct = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->addbloodpct(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DB_C_GuildBtlAddProp::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 userID = 1;
    if (has_userid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->userid());
    }
    
    // optional int32 addAtkPct = 2;
    if (has_addatkpct()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->addatkpct());
    }
    
    // optional int32 addBloodPct = 3;
    if (has_addbloodpct()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->addbloodpct());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void DB_C_GuildBtlAddProp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DB_C_GuildBtlAddProp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DB_C_GuildBtlAddProp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DB_C_GuildBtlAddProp::MergeFrom(const DB_C_GuildBtlAddProp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_userid(from.userid());
    }
    if (from._has_bit(1)) {
      set_addatkpct(from.addatkpct());
    }
    if (from._has_bit(2)) {
      set_addbloodpct(from.addbloodpct());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DB_C_GuildBtlAddProp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DB_C_GuildBtlAddProp::CopyFrom(const DB_C_GuildBtlAddProp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DB_C_GuildBtlAddProp::IsInitialized() const {
  
  return true;
}

void DB_C_GuildBtlAddProp::Swap(DB_C_GuildBtlAddProp* other) {
  if (other != this) {
    std::swap(userid_, other->userid_);
    std::swap(addatkpct_, other->addatkpct_);
    std::swap(addbloodpct_, other->addbloodpct_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DB_C_GuildBtlAddProp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DB_C_GuildBtlAddProp_descriptor_;
  metadata.reflection = DB_C_GuildBtlAddProp_reflection_;
  return metadata;
}


// ===================================================================

const ::std::string DB_C_GuildBtlReward_Turns::_default_guildname_;
const ::std::string DB_C_GuildBtlReward_Turns::_default_guildenemyname_;
#ifndef _MSC_VER
const int DB_C_GuildBtlReward_Turns::kResultFieldNumber;
const int DB_C_GuildBtlReward_Turns::kWinWay0FieldNumber;
const int DB_C_GuildBtlReward_Turns::kWinWay1FieldNumber;
const int DB_C_GuildBtlReward_Turns::kWinWay2FieldNumber;
const int DB_C_GuildBtlReward_Turns::kScoreFieldNumber;
const int DB_C_GuildBtlReward_Turns::kGuildIDFieldNumber;
const int DB_C_GuildBtlReward_Turns::kGuildLVFieldNumber;
const int DB_C_GuildBtlReward_Turns::kGuildNameFieldNumber;
const int DB_C_GuildBtlReward_Turns::kGuildEnemyIDFieldNumber;
const int DB_C_GuildBtlReward_Turns::kGuildEnemyLVFieldNumber;
const int DB_C_GuildBtlReward_Turns::kGuildEnemyNameFieldNumber;
#endif  // !_MSC_VER

DB_C_GuildBtlReward_Turns::DB_C_GuildBtlReward_Turns() {
  SharedCtor();
}

void DB_C_GuildBtlReward_Turns::InitAsDefaultInstance() {
}

DB_C_GuildBtlReward_Turns::DB_C_GuildBtlReward_Turns(const DB_C_GuildBtlReward_Turns& from) {
  SharedCtor();
  MergeFrom(from);
}

void DB_C_GuildBtlReward_Turns::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  winway0_ = 0;
  winway1_ = 0;
  winway2_ = 0;
  score_ = 0;
  guildid_ = 0;
  guildlv_ = 0;
  guildname_ = const_cast< ::std::string*>(&_default_guildname_);
  guildenemyid_ = 0;
  guildenemylv_ = 0;
  guildenemyname_ = const_cast< ::std::string*>(&_default_guildenemyname_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DB_C_GuildBtlReward_Turns::~DB_C_GuildBtlReward_Turns() {
  SharedDtor();
}

void DB_C_GuildBtlReward_Turns::SharedDtor() {
  if (guildname_ != &_default_guildname_) {
    delete guildname_;
  }
  if (guildenemyname_ != &_default_guildenemyname_) {
    delete guildenemyname_;
  }
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* DB_C_GuildBtlReward_Turns::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DB_C_GuildBtlReward_Turns_descriptor_;
}

const DB_C_GuildBtlReward_Turns& DB_C_GuildBtlReward_Turns::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_countryDB_2eproto();  return *default_instance_;
}

DB_C_GuildBtlReward_Turns* DB_C_GuildBtlReward_Turns::default_instance_ = NULL;

DB_C_GuildBtlReward_Turns* DB_C_GuildBtlReward_Turns::New() const {
  return new DB_C_GuildBtlReward_Turns;
}

void DB_C_GuildBtlReward_Turns::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0;
    winway0_ = 0;
    winway1_ = 0;
    winway2_ = 0;
    score_ = 0;
    guildid_ = 0;
    guildlv_ = 0;
    if (_has_bit(7)) {
      if (guildname_ != &_default_guildname_) {
        guildname_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    guildenemyid_ = 0;
    guildenemylv_ = 0;
    if (_has_bit(10)) {
      if (guildenemyname_ != &_default_guildenemyname_) {
        guildenemyname_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DB_C_GuildBtlReward_Turns::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &result_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_winWay0;
        break;
      }
      
      // optional int32 winWay0 = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_winWay0:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &winway0_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_winWay1;
        break;
      }
      
      // optional int32 winWay1 = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_winWay1:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &winway1_));
        _set_bit(2);
        if (input->ExpectTag(32)) goto parse_winWay2;
        break;
      }
      
      // optional int32 winWay2 = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_winWay2:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &winway2_));
        _set_bit(3);
        if (input->ExpectTag(40)) goto parse_score;
        break;
      }
      
      // optional int32 score = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_score:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &score_));
        _set_bit(4);
        if (input->ExpectTag(48)) goto parse_guildID;
        break;
      }
      
      // optional int32 guildID = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_guildID:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &guildid_));
        _set_bit(5);
        if (input->ExpectTag(56)) goto parse_guildLV;
        break;
      }
      
      // optional int32 guildLV = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_guildLV:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &guildlv_));
        _set_bit(6);
        if (input->ExpectTag(66)) goto parse_guildName;
        break;
      }
      
      // optional string guildName = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_guildName:
        DO_(::google::protobuf::internal::WireFormatLite::ReadString(
              input, this->mutable_guildname()));
        ::google::protobuf::internal::WireFormat::VerifyUTF8String(
          this->guildname().data(), this->guildname().length(),
          ::google::protobuf::internal::WireFormat::PARSE);
        if (input->ExpectTag(72)) goto parse_guildEnemyID;
        break;
      }
      
      // optional int32 guildEnemyID = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_guildEnemyID:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &guildenemyid_));
        _set_bit(8);
        if (input->ExpectTag(80)) goto parse_guildEnemyLV;
        break;
      }
      
      // optional int32 guildEnemyLV = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_guildEnemyLV:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &guildenemylv_));
        _set_bit(9);
        if (input->ExpectTag(90)) goto parse_guildEnemyName;
        break;
      }
      
      // optional string guildEnemyName = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_guildEnemyName:
        DO_(::google::protobuf::internal::WireFormatLite::ReadString(
              input, this->mutable_guildenemyname()));
        ::google::protobuf::internal::WireFormat::VerifyUTF8String(
          this->guildenemyname().data(), this->guildenemyname().length(),
          ::google::protobuf::internal::WireFormat::PARSE);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DB_C_GuildBtlReward_Turns::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    DB_C_GuildBtlReward_Turns::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional int32 result = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }
  
  // optional int32 winWay0 = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->winway0(), output);
  }
  
  // optional int32 winWay1 = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->winway1(), output);
  }
  
  // optional int32 winWay2 = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->winway2(), output);
  }
  
  // optional int32 score = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->score(), output);
  }
  
  // optional int32 guildID = 6;
  if (_has_bit(5)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->guildid(), output);
  }
  
  // optional int32 guildLV = 7;
  if (_has_bit(6)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->guildlv(), output);
  }
  
  // optional string guildName = 8;
  if (_has_bit(7)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->guildname().data(), this->guildname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      8, this->guildname(), output);
  }
  
  // optional int32 guildEnemyID = 9;
  if (_has_bit(8)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->guildenemyid(), output);
  }
  
  // optional int32 guildEnemyLV = 10;
  if (_has_bit(9)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->guildenemylv(), output);
  }
  
  // optional string guildEnemyName = 11;
  if (_has_bit(10)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->guildenemyname().data(), this->guildenemyname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      11, this->guildenemyname(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DB_C_GuildBtlReward_Turns::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 result = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }
  
  // optional int32 winWay0 = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->winway0(), target);
  }
  
  // optional int32 winWay1 = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->winway1(), target);
  }
  
  // optional int32 winWay2 = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->winway2(), target);
  }
  
  // optional int32 score = 5;
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->score(), target);
  }
  
  // optional int32 guildID = 6;
  if (_has_bit(5)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->guildid(), target);
  }
  
  // optional int32 guildLV = 7;
  if (_has_bit(6)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->guildlv(), target);
  }
  
  // optional string guildName = 8;
  if (_has_bit(7)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->guildname().data(), this->guildname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->guildname(), target);
  }
  
  // optional int32 guildEnemyID = 9;
  if (_has_bit(8)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->guildenemyid(), target);
  }
  
  // optional int32 guildEnemyLV = 10;
  if (_has_bit(9)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->guildenemylv(), target);
  }
  
  // optional string guildEnemyName = 11;
  if (_has_bit(10)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->guildenemyname().data(), this->guildenemyname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        11, this->guildenemyname(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DB_C_GuildBtlReward_Turns::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }
    
    // optional int32 winWay0 = 2;
    if (has_winway0()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->winway0());
    }
    
    // optional int32 winWay1 = 3;
    if (has_winway1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->winway1());
    }
    
    // optional int32 winWay2 = 4;
    if (has_winway2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->winway2());
    }
    
    // optional int32 score = 5;
    if (has_score()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->score());
    }
    
    // optional int32 guildID = 6;
    if (has_guildid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->guildid());
    }
    
    // optional int32 guildLV = 7;
    if (has_guildlv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->guildlv());
    }
    
    // optional string guildName = 8;
    if (has_guildname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->guildname());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 guildEnemyID = 9;
    if (has_guildenemyid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->guildenemyid());
    }
    
    // optional int32 guildEnemyLV = 10;
    if (has_guildenemylv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->guildenemylv());
    }
    
    // optional string guildEnemyName = 11;
    if (has_guildenemyname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->guildenemyname());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void DB_C_GuildBtlReward_Turns::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DB_C_GuildBtlReward_Turns* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DB_C_GuildBtlReward_Turns*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DB_C_GuildBtlReward_Turns::MergeFrom(const DB_C_GuildBtlReward_Turns& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_result(from.result());
    }
    if (from._has_bit(1)) {
      set_winway0(from.winway0());
    }
    if (from._has_bit(2)) {
      set_winway1(from.winway1());
    }
    if (from._has_bit(3)) {
      set_winway2(from.winway2());
    }
    if (from._has_bit(4)) {
      set_score(from.score());
    }
    if (from._has_bit(5)) {
      set_guildid(from.guildid());
    }
    if (from._has_bit(6)) {
      set_guildlv(from.guildlv());
    }
    if (from._has_bit(7)) {
      set_guildname(from.guildname());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from._has_bit(8)) {
      set_guildenemyid(from.guildenemyid());
    }
    if (from._has_bit(9)) {
      set_guildenemylv(from.guildenemylv());
    }
    if (from._has_bit(10)) {
      set_guildenemyname(from.guildenemyname());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DB_C_GuildBtlReward_Turns::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DB_C_GuildBtlReward_Turns::CopyFrom(const DB_C_GuildBtlReward_Turns& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DB_C_GuildBtlReward_Turns::IsInitialized() const {
  
  return true;
}

void DB_C_GuildBtlReward_Turns::Swap(DB_C_GuildBtlReward_Turns* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(winway0_, other->winway0_);
    std::swap(winway1_, other->winway1_);
    std::swap(winway2_, other->winway2_);
    std::swap(score_, other->score_);
    std::swap(guildid_, other->guildid_);
    std::swap(guildlv_, other->guildlv_);
    std::swap(guildname_, other->guildname_);
    std::swap(guildenemyid_, other->guildenemyid_);
    std::swap(guildenemylv_, other->guildenemylv_);
    std::swap(guildenemyname_, other->guildenemyname_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DB_C_GuildBtlReward_Turns::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DB_C_GuildBtlReward_Turns_descriptor_;
  metadata.reflection = DB_C_GuildBtlReward_Turns_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DB_C_GuildBtlReward::kBtlDayFieldNumber;
const int DB_C_GuildBtlReward::kTurnsFieldNumber;
#endif  // !_MSC_VER

DB_C_GuildBtlReward::DB_C_GuildBtlReward() {
  SharedCtor();
}

void DB_C_GuildBtlReward::InitAsDefaultInstance() {
}

DB_C_GuildBtlReward::DB_C_GuildBtlReward(const DB_C_GuildBtlReward& from) {
  SharedCtor();
  MergeFrom(from);
}

void DB_C_GuildBtlReward::SharedCtor() {
  _cached_size_ = 0;
  btlday_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DB_C_GuildBtlReward::~DB_C_GuildBtlReward() {
  SharedDtor();
}

void DB_C_GuildBtlReward::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* DB_C_GuildBtlReward::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DB_C_GuildBtlReward_descriptor_;
}

const DB_C_GuildBtlReward& DB_C_GuildBtlReward::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_countryDB_2eproto();  return *default_instance_;
}

DB_C_GuildBtlReward* DB_C_GuildBtlReward::default_instance_ = NULL;

DB_C_GuildBtlReward* DB_C_GuildBtlReward::New() const {
  return new DB_C_GuildBtlReward;
}

void DB_C_GuildBtlReward::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    btlday_ = 0;
  }
  turns_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DB_C_GuildBtlReward::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 btlDay = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &btlday_));
        _set_bit(0);
        if (input->ExpectTag(18)) goto parse_turns;
        break;
      }
      
      // repeated .DB_C_GuildBtlReward_Turns turns = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_turns:
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, add_turns()));
        if (input->ExpectTag(18)) goto parse_turns;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DB_C_GuildBtlReward::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    DB_C_GuildBtlReward::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional int32 btlDay = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->btlday(), output);
  }
  
  // repeated .DB_C_GuildBtlReward_Turns turns = 2;
  for (int i = 0; i < this->turns_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      2, this->turns(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DB_C_GuildBtlReward::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 btlDay = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->btlday(), target);
  }
  
  // repeated .DB_C_GuildBtlReward_Turns turns = 2;
  for (int i = 0; i < this->turns_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->turns(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DB_C_GuildBtlReward::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 btlDay = 1;
    if (has_btlday()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->btlday());
    }
    
  }
  // repeated .DB_C_GuildBtlReward_Turns turns = 2;
  total_size += 1 * this->turns_size();
  for (int i = 0; i < this->turns_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->turns(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void DB_C_GuildBtlReward::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DB_C_GuildBtlReward* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DB_C_GuildBtlReward*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DB_C_GuildBtlReward::MergeFrom(const DB_C_GuildBtlReward& from) {
  GOOGLE_CHECK_NE(&from, this);
  turns_.MergeFrom(from.turns_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_btlday(from.btlday());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DB_C_GuildBtlReward::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DB_C_GuildBtlReward::CopyFrom(const DB_C_GuildBtlReward& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DB_C_GuildBtlReward::IsInitialized() const {
  
  return true;
}

void DB_C_GuildBtlReward::Swap(DB_C_GuildBtlReward* other) {
  if (other != this) {
    std::swap(btlday_, other->btlday_);
    turns_.Swap(&other->turns_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DB_C_GuildBtlReward::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DB_C_GuildBtlReward_descriptor_;
  metadata.reflection = DB_C_GuildBtlReward_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DB_C_GuildBtlResult::kResultFieldNumber;
const int DB_C_GuildBtlResult::kWinWay0FieldNumber;
const int DB_C_GuildBtlResult::kWinWay1FieldNumber;
const int DB_C_GuildBtlResult::kWinWay2FieldNumber;
const int DB_C_GuildBtlResult::kScoreFieldNumber;
const int DB_C_GuildBtlResult::kPkGuildFieldNumber;
const int DB_C_GuildBtlResult::kAddFlagFieldNumber;
#endif  // !_MSC_VER

DB_C_GuildBtlResult::DB_C_GuildBtlResult() {
  SharedCtor();
}

void DB_C_GuildBtlResult::InitAsDefaultInstance() {
}

DB_C_GuildBtlResult::DB_C_GuildBtlResult(const DB_C_GuildBtlResult& from) {
  SharedCtor();
  MergeFrom(from);
}

void DB_C_GuildBtlResult::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  winway0_ = 0;
  winway1_ = 0;
  winway2_ = 0;
  score_ = 0;
  pkguild_ = 0;
  addflag_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DB_C_GuildBtlResult::~DB_C_GuildBtlResult() {
  SharedDtor();
}

void DB_C_GuildBtlResult::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* DB_C_GuildBtlResult::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DB_C_GuildBtlResult_descriptor_;
}

const DB_C_GuildBtlResult& DB_C_GuildBtlResult::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_countryDB_2eproto();  return *default_instance_;
}

DB_C_GuildBtlResult* DB_C_GuildBtlResult::default_instance_ = NULL;

DB_C_GuildBtlResult* DB_C_GuildBtlResult::New() const {
  return new DB_C_GuildBtlResult;
}

void DB_C_GuildBtlResult::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0;
    winway0_ = 0;
    winway1_ = 0;
    winway2_ = 0;
    score_ = 0;
    pkguild_ = 0;
    addflag_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DB_C_GuildBtlResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 result = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &result_));
        _set_bit(0);
        if (input->ExpectTag(24)) goto parse_winWay0;
        break;
      }
      
      // optional int32 winWay0 = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_winWay0:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &winway0_));
        _set_bit(1);
        if (input->ExpectTag(32)) goto parse_winWay1;
        break;
      }
      
      // optional int32 winWay1 = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_winWay1:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &winway1_));
        _set_bit(2);
        if (input->ExpectTag(40)) goto parse_winWay2;
        break;
      }
      
      // optional int32 winWay2 = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_winWay2:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &winway2_));
        _set_bit(3);
        if (input->ExpectTag(48)) goto parse_score;
        break;
      }
      
      // optional int32 score = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_score:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &score_));
        _set_bit(4);
        if (input->ExpectTag(56)) goto parse_pkGuild;
        break;
      }
      
      // optional int32 pkGuild = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_pkGuild:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &pkguild_));
        _set_bit(5);
        if (input->ExpectTag(64)) goto parse_addFlag;
        break;
      }
      
      // optional bool addFlag = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_addFlag:
        DO_(::google::protobuf::internal::WireFormatLite::ReadBool(
              input, &addflag_));
        _set_bit(6);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DB_C_GuildBtlResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    DB_C_GuildBtlResult::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional int32 result = 2;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->result(), output);
  }
  
  // optional int32 winWay0 = 3;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->winway0(), output);
  }
  
  // optional int32 winWay1 = 4;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->winway1(), output);
  }
  
  // optional int32 winWay2 = 5;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->winway2(), output);
  }
  
  // optional int32 score = 6;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->score(), output);
  }
  
  // optional int32 pkGuild = 7;
  if (_has_bit(5)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->pkguild(), output);
  }
  
  // optional bool addFlag = 8;
  if (_has_bit(6)) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->addflag(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DB_C_GuildBtlResult::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 result = 2;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->result(), target);
  }
  
  // optional int32 winWay0 = 3;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->winway0(), target);
  }
  
  // optional int32 winWay1 = 4;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->winway1(), target);
  }
  
  // optional int32 winWay2 = 5;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->winway2(), target);
  }
  
  // optional int32 score = 6;
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->score(), target);
  }
  
  // optional int32 pkGuild = 7;
  if (_has_bit(5)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->pkguild(), target);
  }
  
  // optional bool addFlag = 8;
  if (_has_bit(6)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(8, this->addflag(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DB_C_GuildBtlResult::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 result = 2;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }
    
    // optional int32 winWay0 = 3;
    if (has_winway0()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->winway0());
    }
    
    // optional int32 winWay1 = 4;
    if (has_winway1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->winway1());
    }
    
    // optional int32 winWay2 = 5;
    if (has_winway2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->winway2());
    }
    
    // optional int32 score = 6;
    if (has_score()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->score());
    }
    
    // optional int32 pkGuild = 7;
    if (has_pkguild()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pkguild());
    }
    
    // optional bool addFlag = 8;
    if (has_addflag()) {
      total_size += 1 + 1;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void DB_C_GuildBtlResult::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DB_C_GuildBtlResult* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DB_C_GuildBtlResult*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DB_C_GuildBtlResult::MergeFrom(const DB_C_GuildBtlResult& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_result(from.result());
    }
    if (from._has_bit(1)) {
      set_winway0(from.winway0());
    }
    if (from._has_bit(2)) {
      set_winway1(from.winway1());
    }
    if (from._has_bit(3)) {
      set_winway2(from.winway2());
    }
    if (from._has_bit(4)) {
      set_score(from.score());
    }
    if (from._has_bit(5)) {
      set_pkguild(from.pkguild());
    }
    if (from._has_bit(6)) {
      set_addflag(from.addflag());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DB_C_GuildBtlResult::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DB_C_GuildBtlResult::CopyFrom(const DB_C_GuildBtlResult& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DB_C_GuildBtlResult::IsInitialized() const {
  
  return true;
}

void DB_C_GuildBtlResult::Swap(DB_C_GuildBtlResult* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(winway0_, other->winway0_);
    std::swap(winway1_, other->winway1_);
    std::swap(winway2_, other->winway2_);
    std::swap(score_, other->score_);
    std::swap(pkguild_, other->pkguild_);
    std::swap(addflag_, other->addflag_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DB_C_GuildBtlResult::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DB_C_GuildBtlResult_descriptor_;
  metadata.reflection = DB_C_GuildBtlResult_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DB_C_GuildStorage::kItemIDFieldNumber;
const int DB_C_GuildStorage::kItemCntFieldNumber;
#endif  // !_MSC_VER

DB_C_GuildStorage::DB_C_GuildStorage() {
  SharedCtor();
}

void DB_C_GuildStorage::InitAsDefaultInstance() {
}

DB_C_GuildStorage::DB_C_GuildStorage(const DB_C_GuildStorage& from) {
  SharedCtor();
  MergeFrom(from);
}

void DB_C_GuildStorage::SharedCtor() {
  _cached_size_ = 0;
  itemid_ = 0;
  itemcnt_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DB_C_GuildStorage::~DB_C_GuildStorage() {
  SharedDtor();
}

void DB_C_GuildStorage::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* DB_C_GuildStorage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DB_C_GuildStorage_descriptor_;
}

const DB_C_GuildStorage& DB_C_GuildStorage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_countryDB_2eproto();  return *default_instance_;
}

DB_C_GuildStorage* DB_C_GuildStorage::default_instance_ = NULL;

DB_C_GuildStorage* DB_C_GuildStorage::New() const {
  return new DB_C_GuildStorage;
}

void DB_C_GuildStorage::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    itemid_ = 0;
    itemcnt_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DB_C_GuildStorage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 itemID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &itemid_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_itemCnt;
        break;
      }
      
      // optional int32 itemCnt = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_itemCnt:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &itemcnt_));
        _set_bit(1);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DB_C_GuildStorage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    DB_C_GuildStorage::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional int32 itemID = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->itemid(), output);
  }
  
  // optional int32 itemCnt = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->itemcnt(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DB_C_GuildStorage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 itemID = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->itemid(), target);
  }
  
  // optional int32 itemCnt = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->itemcnt(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DB_C_GuildStorage::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 itemID = 1;
    if (has_itemid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->itemid());
    }
    
    // optional int32 itemCnt = 2;
    if (has_itemcnt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->itemcnt());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void DB_C_GuildStorage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DB_C_GuildStorage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DB_C_GuildStorage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DB_C_GuildStorage::MergeFrom(const DB_C_GuildStorage& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_itemid(from.itemid());
    }
    if (from._has_bit(1)) {
      set_itemcnt(from.itemcnt());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DB_C_GuildStorage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DB_C_GuildStorage::CopyFrom(const DB_C_GuildStorage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DB_C_GuildStorage::IsInitialized() const {
  
  return true;
}

void DB_C_GuildStorage::Swap(DB_C_GuildStorage* other) {
  if (other != this) {
    std::swap(itemid_, other->itemid_);
    std::swap(itemcnt_, other->itemcnt_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DB_C_GuildStorage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DB_C_GuildStorage_descriptor_;
  metadata.reflection = DB_C_GuildStorage_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DB_C_GuildBtl::kBtlDayFieldNumber;
const int DB_C_GuildBtl::kUserWay0FieldNumber;
const int DB_C_GuildBtl::kUserWay1FieldNumber;
const int DB_C_GuildBtl::kUserWay2FieldNumber;
const int DB_C_GuildBtl::kSignupCntFieldNumber;
const int DB_C_GuildBtl::kAddPropFieldNumber;
const int DB_C_GuildBtl::kResultFieldNumber;
const int DB_C_GuildBtl::kRewardFieldNumber;
const int DB_C_GuildBtl::kTotalScoreFieldNumber;
const int DB_C_GuildBtl::kLastBtlSessionFieldNumber;
const int DB_C_GuildBtl::kLastBtlRankFieldNumber;
const int DB_C_GuildBtl::kBtlCntFieldNumber;
#endif  // !_MSC_VER

DB_C_GuildBtl::DB_C_GuildBtl() {
  SharedCtor();
}

void DB_C_GuildBtl::InitAsDefaultInstance() {
  reward_ = const_cast< ::DB_C_GuildBtlReward*>(&::DB_C_GuildBtlReward::default_instance());
}

DB_C_GuildBtl::DB_C_GuildBtl(const DB_C_GuildBtl& from) {
  SharedCtor();
  MergeFrom(from);
}

void DB_C_GuildBtl::SharedCtor() {
  _cached_size_ = 0;
  btlday_ = 0;
  signupcnt_ = 0;
  reward_ = NULL;
  totalscore_ = 0;
  lastbtlsession_ = 0;
  lastbtlrank_ = 0;
  btlcnt_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DB_C_GuildBtl::~DB_C_GuildBtl() {
  SharedDtor();
}

void DB_C_GuildBtl::SharedDtor() {
  if (this != default_instance_) {
    delete reward_;
  }
}

const ::google::protobuf::Descriptor* DB_C_GuildBtl::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DB_C_GuildBtl_descriptor_;
}

const DB_C_GuildBtl& DB_C_GuildBtl::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_countryDB_2eproto();  return *default_instance_;
}

DB_C_GuildBtl* DB_C_GuildBtl::default_instance_ = NULL;

DB_C_GuildBtl* DB_C_GuildBtl::New() const {
  return new DB_C_GuildBtl;
}

void DB_C_GuildBtl::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    btlday_ = 0;
    signupcnt_ = 0;
    if (_has_bit(7)) {
      if (reward_ != NULL) reward_->::DB_C_GuildBtlReward::Clear();
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    totalscore_ = 0;
    lastbtlsession_ = 0;
    lastbtlrank_ = 0;
    btlcnt_ = 0;
  }
  userway0_.Clear();
  userway1_.Clear();
  userway2_.Clear();
  addprop_.Clear();
  result_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DB_C_GuildBtl::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 btlDay = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &btlday_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_userWay0;
        break;
      }
      
      // repeated int64 userWay0 = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_userWay0:
        ::google::protobuf::int64 value;
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt64(
              input, &value));
        add_userway0(value);
        if (input->ExpectTag(16)) goto parse_userWay0;
        if (input->ExpectTag(24)) goto parse_userWay1;
        break;
      }
      
      // repeated int64 userWay1 = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_userWay1:
        ::google::protobuf::int64 value;
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt64(
              input, &value));
        add_userway1(value);
        if (input->ExpectTag(24)) goto parse_userWay1;
        if (input->ExpectTag(32)) goto parse_userWay2;
        break;
      }
      
      // repeated int64 userWay2 = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_userWay2:
        ::google::protobuf::int64 value;
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt64(
              input, &value));
        add_userway2(value);
        if (input->ExpectTag(32)) goto parse_userWay2;
        if (input->ExpectTag(40)) goto parse_signupCnt;
        break;
      }
      
      // optional int32 signupCnt = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_signupCnt:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &signupcnt_));
        _set_bit(4);
        if (input->ExpectTag(50)) goto parse_addProp;
        break;
      }
      
      // repeated .DB_C_GuildBtlAddProp addProp = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_addProp:
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, add_addprop()));
        if (input->ExpectTag(50)) goto parse_addProp;
        if (input->ExpectTag(58)) goto parse_result;
        break;
      }
      
      // repeated .DB_C_GuildBtlResult result = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_result:
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, add_result()));
        if (input->ExpectTag(58)) goto parse_result;
        if (input->ExpectTag(66)) goto parse_reward;
        break;
      }
      
      // optional .DB_C_GuildBtlReward reward = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_reward:
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
             input, mutable_reward()));
        if (input->ExpectTag(72)) goto parse_totalScore;
        break;
      }
      
      // optional int32 totalScore = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_totalScore:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &totalscore_));
        _set_bit(8);
        if (input->ExpectTag(80)) goto parse_lastBtlSession;
        break;
      }
      
      // optional int32 lastBtlSession = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_lastBtlSession:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &lastbtlsession_));
        _set_bit(9);
        if (input->ExpectTag(88)) goto parse_lastBtlRank;
        break;
      }
      
      // optional int32 lastBtlRank = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_lastBtlRank:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &lastbtlrank_));
        _set_bit(10);
        if (input->ExpectTag(96)) goto parse_btlCnt;
        break;
      }
      
      // optional int32 btlCnt = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_btlCnt:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &btlcnt_));
        _set_bit(11);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DB_C_GuildBtl::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    DB_C_GuildBtl::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional int32 btlDay = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->btlday(), output);
  }
  
  // repeated int64 userWay0 = 2;
  for (int i = 0; i < this->userway0_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(
      2, this->userway0(i), output);
  }
  
  // repeated int64 userWay1 = 3;
  for (int i = 0; i < this->userway1_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(
      3, this->userway1(i), output);
  }
  
  // repeated int64 userWay2 = 4;
  for (int i = 0; i < this->userway2_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(
      4, this->userway2(i), output);
  }
  
  // optional int32 signupCnt = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->signupcnt(), output);
  }
  
  // repeated .DB_C_GuildBtlAddProp addProp = 6;
  for (int i = 0; i < this->addprop_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      6, this->addprop(i), output);
  }
  
  // repeated .DB_C_GuildBtlResult result = 7;
  for (int i = 0; i < this->result_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      7, this->result(i), output);
  }
  
  // optional .DB_C_GuildBtlReward reward = 8;
  if (_has_bit(7)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      8, this->reward(), output);
  }
  
  // optional int32 totalScore = 9;
  if (_has_bit(8)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->totalscore(), output);
  }
  
  // optional int32 lastBtlSession = 10;
  if (_has_bit(9)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->lastbtlsession(), output);
  }
  
  // optional int32 lastBtlRank = 11;
  if (_has_bit(10)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->lastbtlrank(), output);
  }
  
  // optional int32 btlCnt = 12;
  if (_has_bit(11)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->btlcnt(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DB_C_GuildBtl::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 btlDay = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->btlday(), target);
  }
  
  // repeated int64 userWay0 = 2;
  for (int i = 0; i < this->userway0_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt64ToArray(2, this->userway0(i), target);
  }
  
  // repeated int64 userWay1 = 3;
  for (int i = 0; i < this->userway1_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt64ToArray(3, this->userway1(i), target);
  }
  
  // repeated int64 userWay2 = 4;
  for (int i = 0; i < this->userway2_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt64ToArray(4, this->userway2(i), target);
  }
  
  // optional int32 signupCnt = 5;
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->signupcnt(), target);
  }
  
  // repeated .DB_C_GuildBtlAddProp addProp = 6;
  for (int i = 0; i < this->addprop_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->addprop(i), target);
  }
  
  // repeated .DB_C_GuildBtlResult result = 7;
  for (int i = 0; i < this->result_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->result(i), target);
  }
  
  // optional .DB_C_GuildBtlReward reward = 8;
  if (_has_bit(7)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->reward(), target);
  }
  
  // optional int32 totalScore = 9;
  if (_has_bit(8)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->totalscore(), target);
  }
  
  // optional int32 lastBtlSession = 10;
  if (_has_bit(9)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->lastbtlsession(), target);
  }
  
  // optional int32 lastBtlRank = 11;
  if (_has_bit(10)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->lastbtlrank(), target);
  }
  
  // optional int32 btlCnt = 12;
  if (_has_bit(11)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->btlcnt(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DB_C_GuildBtl::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 btlDay = 1;
    if (has_btlday()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->btlday());
    }
    
    // optional int32 signupCnt = 5;
    if (has_signupcnt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->signupcnt());
    }
    
    // optional .DB_C_GuildBtlReward reward = 8;
    if (has_reward()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->reward());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 totalScore = 9;
    if (has_totalscore()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->totalscore());
    }
    
    // optional int32 lastBtlSession = 10;
    if (has_lastbtlsession()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->lastbtlsession());
    }
    
    // optional int32 lastBtlRank = 11;
    if (has_lastbtlrank()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->lastbtlrank());
    }
    
    // optional int32 btlCnt = 12;
    if (has_btlcnt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->btlcnt());
    }
    
  }
  // repeated int64 userWay0 = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->userway0_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int64Size(this->userway0(i));
    }
    total_size += 1 * this->userway0_size() + data_size;
  }
  
  // repeated int64 userWay1 = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->userway1_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int64Size(this->userway1(i));
    }
    total_size += 1 * this->userway1_size() + data_size;
  }
  
  // repeated int64 userWay2 = 4;
  {
    int data_size = 0;
    for (int i = 0; i < this->userway2_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int64Size(this->userway2(i));
    }
    total_size += 1 * this->userway2_size() + data_size;
  }
  
  // repeated .DB_C_GuildBtlAddProp addProp = 6;
  total_size += 1 * this->addprop_size();
  for (int i = 0; i < this->addprop_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->addprop(i));
  }
  
  // repeated .DB_C_GuildBtlResult result = 7;
  total_size += 1 * this->result_size();
  for (int i = 0; i < this->result_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->result(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void DB_C_GuildBtl::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DB_C_GuildBtl* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DB_C_GuildBtl*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DB_C_GuildBtl::MergeFrom(const DB_C_GuildBtl& from) {
  GOOGLE_CHECK_NE(&from, this);
  userway0_.MergeFrom(from.userway0_);
  userway1_.MergeFrom(from.userway1_);
  userway2_.MergeFrom(from.userway2_);
  addprop_.MergeFrom(from.addprop_);
  result_.MergeFrom(from.result_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_btlday(from.btlday());
    }
    if (from._has_bit(4)) {
      set_signupcnt(from.signupcnt());
    }
    if (from._has_bit(7)) {
      mutable_reward()->::DB_C_GuildBtlReward::MergeFrom(from.reward());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from._has_bit(8)) {
      set_totalscore(from.totalscore());
    }
    if (from._has_bit(9)) {
      set_lastbtlsession(from.lastbtlsession());
    }
    if (from._has_bit(10)) {
      set_lastbtlrank(from.lastbtlrank());
    }
    if (from._has_bit(11)) {
      set_btlcnt(from.btlcnt());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DB_C_GuildBtl::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DB_C_GuildBtl::CopyFrom(const DB_C_GuildBtl& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DB_C_GuildBtl::IsInitialized() const {
  
  return true;
}

void DB_C_GuildBtl::Swap(DB_C_GuildBtl* other) {
  if (other != this) {
    std::swap(btlday_, other->btlday_);
    userway0_.Swap(&other->userway0_);
    userway1_.Swap(&other->userway1_);
    userway2_.Swap(&other->userway2_);
    std::swap(signupcnt_, other->signupcnt_);
    addprop_.Swap(&other->addprop_);
    result_.Swap(&other->result_);
    std::swap(reward_, other->reward_);
    std::swap(totalscore_, other->totalscore_);
    std::swap(lastbtlsession_, other->lastbtlsession_);
    std::swap(lastbtlrank_, other->lastbtlrank_);
    std::swap(btlcnt_, other->btlcnt_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DB_C_GuildBtl::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DB_C_GuildBtl_descriptor_;
  metadata.reflection = DB_C_GuildBtl_reflection_;
  return metadata;
}


// ===================================================================

const ::std::string DB_C_Guild::_default_guildname_;
const ::std::string DB_C_Guild::_default_guildslogan_;
const ::std::string DB_C_Guild::_default_guildbulletin_;
const ::std::string DB_C_Guild::_default_leadername_;
#ifndef _MSC_VER
const int DB_C_Guild::kGuildIDFieldNumber;
const int DB_C_Guild::kCountryIDFieldNumber;
const int DB_C_Guild::kGuildLVFieldNumber;
const int DB_C_Guild::kGuildNameFieldNumber;
const int DB_C_Guild::kGuildSloganFieldNumber;
const int DB_C_Guild::kGuildBulletinFieldNumber;
const int DB_C_Guild::kBldValueFieldNumber;
const int DB_C_Guild::kGuildUesrCntFieldNumber;
const int DB_C_Guild::kLeaderIDFieldNumber;
const int DB_C_Guild::kLeaderNameFieldNumber;
const int DB_C_Guild::kDelateTMFieldNumber;
const int DB_C_Guild::kLeaderLastTMFieldNumber;
const int DB_C_Guild::kApplyUserIDFieldNumber;
const int DB_C_Guild::kBuildFieldNumber;
const int DB_C_Guild::kLogFieldNumber;
const int DB_C_Guild::kGuildShopFieldNumber;
const int DB_C_Guild::kTotalBldValueFieldNumber;
const int DB_C_Guild::kCoinLogFieldNumber;
const int DB_C_Guild::kLastchgtimeFieldNumber;
const int DB_C_Guild::kDayKickUserCntFieldNumber;
const int DB_C_Guild::kDayEnterCntFieldNumber;
const int DB_C_Guild::kBtlInfoFieldNumber;
const int DB_C_Guild::kStorageFieldNumber;
const int DB_C_Guild::kRewardLogFieldNumber;
const int DB_C_Guild::kGveMsgFieldNumber;
const int DB_C_Guild::kGvgMsgFieldNumber;
const int DB_C_Guild::kDelateIDFieldNumber;
const int DB_C_Guild::kLeagueActiveIDFieldNumber;
const int DB_C_Guild::kLeaguePointFieldNumber;
const int DB_C_Guild::kLeagueListFieldNumber;
const int DB_C_Guild::kLeagueLeaderUIDFieldNumber;
const int DB_C_Guild::kChgLeaderTMFieldNumber;
const int DB_C_Guild::kRedEnvelopeInfoFieldNumber;
#endif  // !_MSC_VER

DB_C_Guild::DB_C_Guild() {
  SharedCtor();
}

void DB_C_Guild::InitAsDefaultInstance() {
  guildshop_ = const_cast< ::DB_C_GuildShop*>(&::DB_C_GuildShop::default_instance());
  btlinfo_ = const_cast< ::DB_C_GuildBtl*>(&::DB_C_GuildBtl::default_instance());
  gvemsg_ = const_cast< ::DB_GVE_City*>(&::DB_GVE_City::default_instance());
  gvgmsg_ = const_cast< ::DB_C_GVG_Msg*>(&::DB_C_GVG_Msg::default_instance());
  redenvelopeinfo_ = const_cast< ::DB_C_GuildRedEnvelope*>(&::DB_C_GuildRedEnvelope::default_instance());
}

DB_C_Guild::DB_C_Guild(const DB_C_Guild& from) {
  SharedCtor();
  MergeFrom(from);
}

void DB_C_Guild::SharedCtor() {
  _cached_size_ = 0;
  guildid_ = 0;
  countryid_ = 0;
  guildlv_ = 0;
  guildname_ = const_cast< ::std::string*>(&_default_guildname_);
  guildslogan_ = const_cast< ::std::string*>(&_default_guildslogan_);
  guildbulletin_ = const_cast< ::std::string*>(&_default_guildbulletin_);
  bldvalue_ = 0;
  guilduesrcnt_ = 0;
  leaderid_ = GOOGLE_LONGLONG(0);
  leadername_ = const_cast< ::std::string*>(&_default_leadername_);
  delatetm_ = 0;
  leaderlasttm_ = 0;
  guildshop_ = NULL;
  totalbldvalue_ = 0;
  lastchgtime_ = 0;
  daykickusercnt_ = 0;
  dayentercnt_ = 0;
  btlinfo_ = NULL;
  gvemsg_ = NULL;
  gvgmsg_ = NULL;
  delateid_ = GOOGLE_LONGLONG(0);
  leagueactiveid_ = 0;
  leaguepoint_ = 0;
  leagueleaderuid_ = GOOGLE_LONGLONG(0);
  chgleadertm_ = 0;
  redenvelopeinfo_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DB_C_Guild::~DB_C_Guild() {
  SharedDtor();
}

void DB_C_Guild::SharedDtor() {
  if (guildname_ != &_default_guildname_) {
    delete guildname_;
  }
  if (guildslogan_ != &_default_guildslogan_) {
    delete guildslogan_;
  }
  if (guildbulletin_ != &_default_guildbulletin_) {
    delete guildbulletin_;
  }
  if (leadername_ != &_default_leadername_) {
    delete leadername_;
  }
  if (this != default_instance_) {
    delete guildshop_;
    delete btlinfo_;
    delete gvemsg_;
    delete gvgmsg_;
    delete redenvelopeinfo_;
  }
}

const ::google::protobuf::Descriptor* DB_C_Guild::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DB_C_Guild_descriptor_;
}

const DB_C_Guild& DB_C_Guild::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_countryDB_2eproto();  return *default_instance_;
}

DB_C_Guild* DB_C_Guild::default_instance_ = NULL;

DB_C_Guild* DB_C_Guild::New() const {
  return new DB_C_Guild;
}

void DB_C_Guild::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    guildid_ = 0;
    countryid_ = 0;
    guildlv_ = 0;
    if (_has_bit(3)) {
      if (guildname_ != &_default_guildname_) {
        guildname_->clear();
      }
    }
    if (_has_bit(4)) {
      if (guildslogan_ != &_default_guildslogan_) {
        guildslogan_->clear();
      }
    }
    if (_has_bit(5)) {
      if (guildbulletin_ != &_default_guildbulletin_) {
        guildbulletin_->clear();
      }
    }
    bldvalue_ = 0;
    guilduesrcnt_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    leaderid_ = GOOGLE_LONGLONG(0);
    if (_has_bit(9)) {
      if (leadername_ != &_default_leadername_) {
        leadername_->clear();
      }
    }
    delatetm_ = 0;
    leaderlasttm_ = 0;
    if (_has_bit(15)) {
      if (guildshop_ != NULL) guildshop_->::DB_C_GuildShop::Clear();
    }
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    totalbldvalue_ = 0;
    lastchgtime_ = 0;
    daykickusercnt_ = 0;
    dayentercnt_ = 0;
    if (_has_bit(21)) {
      if (btlinfo_ != NULL) btlinfo_->::DB_C_GuildBtl::Clear();
    }
  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (_has_bit(24)) {
      if (gvemsg_ != NULL) gvemsg_->::DB_GVE_City::Clear();
    }
    if (_has_bit(25)) {
      if (gvgmsg_ != NULL) gvgmsg_->::DB_C_GVG_Msg::Clear();
    }
    delateid_ = GOOGLE_LONGLONG(0);
    leagueactiveid_ = 0;
    leaguepoint_ = 0;
    leagueleaderuid_ = GOOGLE_LONGLONG(0);
    chgleadertm_ = 0;
  }
  if (_has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    if (_has_bit(32)) {
      if (redenvelopeinfo_ != NULL) redenvelopeinfo_->::DB_C_GuildRedEnvelope::Clear();
    }
  }
  applyuserid_.Clear();
  build_.Clear();
  log_.Clear();
  coinlog_.Clear();
  storage_.Clear();
  rewardlog_.Clear();
  leaguelist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DB_C_Guild::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 guildID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &guildid_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_countryID;
        break;
      }
      
      // required int32 countryID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_countryID:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &countryid_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_guildLV;
        break;
      }
      
      // optional int32 guildLV = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_guildLV:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &guildlv_));
        _set_bit(2);
        if (input->ExpectTag(34)) goto parse_guildName;
        break;
      }
      
      // optional string guildName = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_guildName:
        DO_(::google::protobuf::internal::WireFormatLite::ReadString(
              input, this->mutable_guildname()));
        ::google::protobuf::internal::WireFormat::VerifyUTF8String(
          this->guildname().data(), this->guildname().length(),
          ::google::protobuf::internal::WireFormat::PARSE);
        if (input->ExpectTag(42)) goto parse_guildSlogan;
        break;
      }
      
      // optional string guildSlogan = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_guildSlogan:
        DO_(::google::protobuf::internal::WireFormatLite::ReadString(
              input, this->mutable_guildslogan()));
        ::google::protobuf::internal::WireFormat::VerifyUTF8String(
          this->guildslogan().data(), this->guildslogan().length(),
          ::google::protobuf::internal::WireFormat::PARSE);
        if (input->ExpectTag(50)) goto parse_guildBulletin;
        break;
      }
      
      // optional string guildBulletin = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_guildBulletin:
        DO_(::google::protobuf::internal::WireFormatLite::ReadString(
              input, this->mutable_guildbulletin()));
        ::google::protobuf::internal::WireFormat::VerifyUTF8String(
          this->guildbulletin().data(), this->guildbulletin().length(),
          ::google::protobuf::internal::WireFormat::PARSE);
        if (input->ExpectTag(56)) goto parse_bldValue;
        break;
      }
      
      // optional int32 bldValue = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_bldValue:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &bldvalue_));
        _set_bit(6);
        if (input->ExpectTag(64)) goto parse_guildUesrCnt;
        break;
      }
      
      // optional int32 guildUesrCnt = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_guildUesrCnt:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &guilduesrcnt_));
        _set_bit(7);
        if (input->ExpectTag(72)) goto parse_leaderID;
        break;
      }
      
      // optional int64 leaderID = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_leaderID:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt64(
              input, &leaderid_));
        _set_bit(8);
        if (input->ExpectTag(82)) goto parse_leaderName;
        break;
      }
      
      // optional string leaderName = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_leaderName:
        DO_(::google::protobuf::internal::WireFormatLite::ReadString(
              input, this->mutable_leadername()));
        ::google::protobuf::internal::WireFormat::VerifyUTF8String(
          this->leadername().data(), this->leadername().length(),
          ::google::protobuf::internal::WireFormat::PARSE);
        if (input->ExpectTag(88)) goto parse_delateTM;
        break;
      }
      
      // optional int32 delateTM = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_delateTM:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &delatetm_));
        _set_bit(10);
        if (input->ExpectTag(96)) goto parse_leaderLastTM;
        break;
      }
      
      // optional int32 leaderLastTM = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_leaderLastTM:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &leaderlasttm_));
        _set_bit(11);
        if (input->ExpectTag(104)) goto parse_applyUserID;
        break;
      }
      
      // repeated int64 applyUserID = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_applyUserID:
        ::google::protobuf::int64 value;
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt64(
              input, &value));
        add_applyuserid(value);
        if (input->ExpectTag(104)) goto parse_applyUserID;
        if (input->ExpectTag(114)) goto parse_build;
        break;
      }
      
      // repeated .DB_C_GuildBld build = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_build:
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, add_build()));
        if (input->ExpectTag(114)) goto parse_build;
        if (input->ExpectTag(122)) goto parse_log;
        break;
      }
      
      // repeated .DB_C_GuildLog log = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_log:
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, add_log()));
        if (input->ExpectTag(122)) goto parse_log;
        if (input->ExpectTag(130)) goto parse_guildShop;
        break;
      }
      
      // optional .DB_C_GuildShop guildShop = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_guildShop:
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
             input, mutable_guildshop()));
        if (input->ExpectTag(136)) goto parse_totalBldValue;
        break;
      }
      
      // optional int32 totalBldValue = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_totalBldValue:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &totalbldvalue_));
        _set_bit(16);
        if (input->ExpectTag(146)) goto parse_coinLog;
        break;
      }
      
      // repeated .DB_C_GuildLog coinLog = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_coinLog:
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, add_coinlog()));
        if (input->ExpectTag(146)) goto parse_coinLog;
        if (input->ExpectTag(152)) goto parse_lastchgtime;
        break;
      }
      
      // optional int32 lastchgtime = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_lastchgtime:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &lastchgtime_));
        _set_bit(18);
        if (input->ExpectTag(160)) goto parse_dayKickUserCnt;
        break;
      }
      
      // optional int32 dayKickUserCnt = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_dayKickUserCnt:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &daykickusercnt_));
        _set_bit(19);
        if (input->ExpectTag(168)) goto parse_dayEnterCnt;
        break;
      }
      
      // optional int32 dayEnterCnt = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_dayEnterCnt:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &dayentercnt_));
        _set_bit(20);
        if (input->ExpectTag(178)) goto parse_btlInfo;
        break;
      }
      
      // optional .DB_C_GuildBtl btlInfo = 22;
      case 22: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_btlInfo:
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
             input, mutable_btlinfo()));
        if (input->ExpectTag(186)) goto parse_storage;
        break;
      }
      
      // repeated .DB_C_GuildStorage storage = 23;
      case 23: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_storage:
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, add_storage()));
        if (input->ExpectTag(186)) goto parse_storage;
        if (input->ExpectTag(194)) goto parse_rewardLog;
        break;
      }
      
      // repeated .DB_C_GuildLog rewardLog = 24;
      case 24: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_rewardLog:
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, add_rewardlog()));
        if (input->ExpectTag(194)) goto parse_rewardLog;
        if (input->ExpectTag(202)) goto parse_gveMsg;
        break;
      }
      
      // optional .DB_GVE_City gveMsg = 25;
      case 25: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_gveMsg:
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
             input, mutable_gvemsg()));
        if (input->ExpectTag(210)) goto parse_gvgMsg;
        break;
      }
      
      // optional .DB_C_GVG_Msg gvgMsg = 26;
      case 26: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_gvgMsg:
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
             input, mutable_gvgmsg()));
        if (input->ExpectTag(216)) goto parse_delateID;
        break;
      }
      
      // optional int64 delateID = 27;
      case 27: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_delateID:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt64(
              input, &delateid_));
        _set_bit(26);
        if (input->ExpectTag(224)) goto parse_leagueActiveID;
        break;
      }
      
      // optional int32 leagueActiveID = 28 [default = 0];
      case 28: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_leagueActiveID:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &leagueactiveid_));
        _set_bit(27);
        if (input->ExpectTag(232)) goto parse_leaguePoint;
        break;
      }
      
      // optional int32 leaguePoint = 29 [default = 0];
      case 29: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_leaguePoint:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &leaguepoint_));
        _set_bit(28);
        if (input->ExpectTag(240)) goto parse_leagueList;
        break;
      }
      
      // repeated int64 leagueList = 30;
      case 30: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_leagueList:
        ::google::protobuf::int64 value;
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt64(
              input, &value));
        add_leaguelist(value);
        if (input->ExpectTag(240)) goto parse_leagueList;
        if (input->ExpectTag(248)) goto parse_leagueLeaderUID;
        break;
      }
      
      // optional int64 leagueLeaderUID = 31;
      case 31: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_leagueLeaderUID:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt64(
              input, &leagueleaderuid_));
        _set_bit(30);
        if (input->ExpectTag(256)) goto parse_chgLeaderTM;
        break;
      }
      
      // optional int32 chgLeaderTM = 32;
      case 32: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_chgLeaderTM:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &chgleadertm_));
        _set_bit(31);
        if (input->ExpectTag(266)) goto parse_redEnvelopeInfo;
        break;
      }
      
      // optional .DB_C_GuildRedEnvelope redEnvelopeInfo = 33;
      case 33: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_redEnvelopeInfo:
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
             input, mutable_redenvelopeinfo()));
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DB_C_Guild::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    DB_C_Guild::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // required int32 guildID = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->guildid(), output);
  }
  
  // required int32 countryID = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->countryid(), output);
  }
  
  // optional int32 guildLV = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->guildlv(), output);
  }
  
  // optional string guildName = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->guildname().data(), this->guildname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->guildname(), output);
  }
  
  // optional string guildSlogan = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->guildslogan().data(), this->guildslogan().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->guildslogan(), output);
  }
  
  // optional string guildBulletin = 6;
  if (_has_bit(5)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->guildbulletin().data(), this->guildbulletin().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->guildbulletin(), output);
  }
  
  // optional int32 bldValue = 7;
  if (_has_bit(6)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->bldvalue(), output);
  }
  
  // optional int32 guildUesrCnt = 8;
  if (_has_bit(7)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->guilduesrcnt(), output);
  }
  
  // optional int64 leaderID = 9;
  if (_has_bit(8)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(9, this->leaderid(), output);
  }
  
  // optional string leaderName = 10;
  if (_has_bit(9)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->leadername().data(), this->leadername().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      10, this->leadername(), output);
  }
  
  // optional int32 delateTM = 11;
  if (_has_bit(10)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->delatetm(), output);
  }
  
  // optional int32 leaderLastTM = 12;
  if (_has_bit(11)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->leaderlasttm(), output);
  }
  
  // repeated int64 applyUserID = 13;
  for (int i = 0; i < this->applyuserid_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(
      13, this->applyuserid(i), output);
  }
  
  // repeated .DB_C_GuildBld build = 14;
  for (int i = 0; i < this->build_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      14, this->build(i), output);
  }
  
  // repeated .DB_C_GuildLog log = 15;
  for (int i = 0; i < this->log_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      15, this->log(i), output);
  }
  
  // optional .DB_C_GuildShop guildShop = 16;
  if (_has_bit(15)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      16, this->guildshop(), output);
  }
  
  // optional int32 totalBldValue = 17;
  if (_has_bit(16)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(17, this->totalbldvalue(), output);
  }
  
  // repeated .DB_C_GuildLog coinLog = 18;
  for (int i = 0; i < this->coinlog_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      18, this->coinlog(i), output);
  }
  
  // optional int32 lastchgtime = 19;
  if (_has_bit(18)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(19, this->lastchgtime(), output);
  }
  
  // optional int32 dayKickUserCnt = 20;
  if (_has_bit(19)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(20, this->daykickusercnt(), output);
  }
  
  // optional int32 dayEnterCnt = 21;
  if (_has_bit(20)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(21, this->dayentercnt(), output);
  }
  
  // optional .DB_C_GuildBtl btlInfo = 22;
  if (_has_bit(21)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      22, this->btlinfo(), output);
  }
  
  // repeated .DB_C_GuildStorage storage = 23;
  for (int i = 0; i < this->storage_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      23, this->storage(i), output);
  }
  
  // repeated .DB_C_GuildLog rewardLog = 24;
  for (int i = 0; i < this->rewardlog_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      24, this->rewardlog(i), output);
  }
  
  // optional .DB_GVE_City gveMsg = 25;
  if (_has_bit(24)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      25, this->gvemsg(), output);
  }
  
  // optional .DB_C_GVG_Msg gvgMsg = 26;
  if (_has_bit(25)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      26, this->gvgmsg(), output);
  }
  
  // optional int64 delateID = 27;
  if (_has_bit(26)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(27, this->delateid(), output);
  }
  
  // optional int32 leagueActiveID = 28 [default = 0];
  if (_has_bit(27)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(28, this->leagueactiveid(), output);
  }
  
  // optional int32 leaguePoint = 29 [default = 0];
  if (_has_bit(28)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(29, this->leaguepoint(), output);
  }
  
  // repeated int64 leagueList = 30;
  for (int i = 0; i < this->leaguelist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(
      30, this->leaguelist(i), output);
  }
  
  // optional int64 leagueLeaderUID = 31;
  if (_has_bit(30)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(31, this->leagueleaderuid(), output);
  }
  
  // optional int32 chgLeaderTM = 32;
  if (_has_bit(31)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(32, this->chgleadertm(), output);
  }
  
  // optional .DB_C_GuildRedEnvelope redEnvelopeInfo = 33;
  if (_has_bit(32)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      33, this->redenvelopeinfo(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DB_C_Guild::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 guildID = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->guildid(), target);
  }
  
  // required int32 countryID = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->countryid(), target);
  }
  
  // optional int32 guildLV = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->guildlv(), target);
  }
  
  // optional string guildName = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->guildname().data(), this->guildname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->guildname(), target);
  }
  
  // optional string guildSlogan = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->guildslogan().data(), this->guildslogan().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->guildslogan(), target);
  }
  
  // optional string guildBulletin = 6;
  if (_has_bit(5)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->guildbulletin().data(), this->guildbulletin().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->guildbulletin(), target);
  }
  
  // optional int32 bldValue = 7;
  if (_has_bit(6)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->bldvalue(), target);
  }
  
  // optional int32 guildUesrCnt = 8;
  if (_has_bit(7)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->guilduesrcnt(), target);
  }
  
  // optional int64 leaderID = 9;
  if (_has_bit(8)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(9, this->leaderid(), target);
  }
  
  // optional string leaderName = 10;
  if (_has_bit(9)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->leadername().data(), this->leadername().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->leadername(), target);
  }
  
  // optional int32 delateTM = 11;
  if (_has_bit(10)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->delatetm(), target);
  }
  
  // optional int32 leaderLastTM = 12;
  if (_has_bit(11)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->leaderlasttm(), target);
  }
  
  // repeated int64 applyUserID = 13;
  for (int i = 0; i < this->applyuserid_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt64ToArray(13, this->applyuserid(i), target);
  }
  
  // repeated .DB_C_GuildBld build = 14;
  for (int i = 0; i < this->build_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        14, this->build(i), target);
  }
  
  // repeated .DB_C_GuildLog log = 15;
  for (int i = 0; i < this->log_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        15, this->log(i), target);
  }
  
  // optional .DB_C_GuildShop guildShop = 16;
  if (_has_bit(15)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        16, this->guildshop(), target);
  }
  
  // optional int32 totalBldValue = 17;
  if (_has_bit(16)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(17, this->totalbldvalue(), target);
  }
  
  // repeated .DB_C_GuildLog coinLog = 18;
  for (int i = 0; i < this->coinlog_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        18, this->coinlog(i), target);
  }
  
  // optional int32 lastchgtime = 19;
  if (_has_bit(18)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(19, this->lastchgtime(), target);
  }
  
  // optional int32 dayKickUserCnt = 20;
  if (_has_bit(19)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(20, this->daykickusercnt(), target);
  }
  
  // optional int32 dayEnterCnt = 21;
  if (_has_bit(20)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(21, this->dayentercnt(), target);
  }
  
  // optional .DB_C_GuildBtl btlInfo = 22;
  if (_has_bit(21)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        22, this->btlinfo(), target);
  }
  
  // repeated .DB_C_GuildStorage storage = 23;
  for (int i = 0; i < this->storage_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        23, this->storage(i), target);
  }
  
  // repeated .DB_C_GuildLog rewardLog = 24;
  for (int i = 0; i < this->rewardlog_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        24, this->rewardlog(i), target);
  }
  
  // optional .DB_GVE_City gveMsg = 25;
  if (_has_bit(24)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        25, this->gvemsg(), target);
  }
  
  // optional .DB_C_GVG_Msg gvgMsg = 26;
  if (_has_bit(25)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        26, this->gvgmsg(), target);
  }
  
  // optional int64 delateID = 27;
  if (_has_bit(26)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(27, this->delateid(), target);
  }
  
  // optional int32 leagueActiveID = 28 [default = 0];
  if (_has_bit(27)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(28, this->leagueactiveid(), target);
  }
  
  // optional int32 leaguePoint = 29 [default = 0];
  if (_has_bit(28)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(29, this->leaguepoint(), target);
  }
  
  // repeated int64 leagueList = 30;
  for (int i = 0; i < this->leaguelist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt64ToArray(30, this->leaguelist(i), target);
  }
  
  // optional int64 leagueLeaderUID = 31;
  if (_has_bit(30)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(31, this->leagueleaderuid(), target);
  }
  
  // optional int32 chgLeaderTM = 32;
  if (_has_bit(31)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(32, this->chgleadertm(), target);
  }
  
  // optional .DB_C_GuildRedEnvelope redEnvelopeInfo = 33;
  if (_has_bit(32)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        33, this->redenvelopeinfo(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DB_C_Guild::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 guildID = 1;
    if (has_guildid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->guildid());
    }
    
    // required int32 countryID = 2;
    if (has_countryid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->countryid());
    }
    
    // optional int32 guildLV = 3;
    if (has_guildlv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->guildlv());
    }
    
    // optional string guildName = 4;
    if (has_guildname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->guildname());
    }
    
    // optional string guildSlogan = 5;
    if (has_guildslogan()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->guildslogan());
    }
    
    // optional string guildBulletin = 6;
    if (has_guildbulletin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->guildbulletin());
    }
    
    // optional int32 bldValue = 7;
    if (has_bldvalue()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bldvalue());
    }
    
    // optional int32 guildUesrCnt = 8;
    if (has_guilduesrcnt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->guilduesrcnt());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int64 leaderID = 9;
    if (has_leaderid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->leaderid());
    }
    
    // optional string leaderName = 10;
    if (has_leadername()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->leadername());
    }
    
    // optional int32 delateTM = 11;
    if (has_delatetm()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->delatetm());
    }
    
    // optional int32 leaderLastTM = 12;
    if (has_leaderlasttm()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->leaderlasttm());
    }
    
    // optional .DB_C_GuildShop guildShop = 16;
    if (has_guildshop()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->guildshop());
    }
    
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional int32 totalBldValue = 17;
    if (has_totalbldvalue()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->totalbldvalue());
    }
    
    // optional int32 lastchgtime = 19;
    if (has_lastchgtime()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->lastchgtime());
    }
    
    // optional int32 dayKickUserCnt = 20;
    if (has_daykickusercnt()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->daykickusercnt());
    }
    
    // optional int32 dayEnterCnt = 21;
    if (has_dayentercnt()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->dayentercnt());
    }
    
    // optional .DB_C_GuildBtl btlInfo = 22;
    if (has_btlinfo()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->btlinfo());
    }
    
  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    // optional .DB_GVE_City gveMsg = 25;
    if (has_gvemsg()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->gvemsg());
    }
    
    // optional .DB_C_GVG_Msg gvgMsg = 26;
    if (has_gvgmsg()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->gvgmsg());
    }
    
    // optional int64 delateID = 27;
    if (has_delateid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->delateid());
    }
    
    // optional int32 leagueActiveID = 28 [default = 0];
    if (has_leagueactiveid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->leagueactiveid());
    }
    
    // optional int32 leaguePoint = 29 [default = 0];
    if (has_leaguepoint()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->leaguepoint());
    }
    
    // optional int64 leagueLeaderUID = 31;
    if (has_leagueleaderuid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->leagueleaderuid());
    }
    
    // optional int32 chgLeaderTM = 32;
    if (has_chgleadertm()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->chgleadertm());
    }
    
  }
  if (_has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    // optional .DB_C_GuildRedEnvelope redEnvelopeInfo = 33;
    if (has_redenvelopeinfo()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->redenvelopeinfo());
    }
    
  }
  // repeated int64 applyUserID = 13;
  {
    int data_size = 0;
    for (int i = 0; i < this->applyuserid_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int64Size(this->applyuserid(i));
    }
    total_size += 1 * this->applyuserid_size() + data_size;
  }
  
  // repeated .DB_C_GuildBld build = 14;
  total_size += 1 * this->build_size();
  for (int i = 0; i < this->build_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->build(i));
  }
  
  // repeated .DB_C_GuildLog log = 15;
  total_size += 1 * this->log_size();
  for (int i = 0; i < this->log_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->log(i));
  }
  
  // repeated .DB_C_GuildLog coinLog = 18;
  total_size += 2 * this->coinlog_size();
  for (int i = 0; i < this->coinlog_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->coinlog(i));
  }
  
  // repeated .DB_C_GuildStorage storage = 23;
  total_size += 2 * this->storage_size();
  for (int i = 0; i < this->storage_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->storage(i));
  }
  
  // repeated .DB_C_GuildLog rewardLog = 24;
  total_size += 2 * this->rewardlog_size();
  for (int i = 0; i < this->rewardlog_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->rewardlog(i));
  }
  
  // repeated int64 leagueList = 30;
  {
    int data_size = 0;
    for (int i = 0; i < this->leaguelist_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int64Size(this->leaguelist(i));
    }
    total_size += 2 * this->leaguelist_size() + data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void DB_C_Guild::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DB_C_Guild* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DB_C_Guild*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DB_C_Guild::MergeFrom(const DB_C_Guild& from) {
  GOOGLE_CHECK_NE(&from, this);
  applyuserid_.MergeFrom(from.applyuserid_);
  build_.MergeFrom(from.build_);
  log_.MergeFrom(from.log_);
  coinlog_.MergeFrom(from.coinlog_);
  storage_.MergeFrom(from.storage_);
  rewardlog_.MergeFrom(from.rewardlog_);
  leaguelist_.MergeFrom(from.leaguelist_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_guildid(from.guildid());
    }
    if (from._has_bit(1)) {
      set_countryid(from.countryid());
    }
    if (from._has_bit(2)) {
      set_guildlv(from.guildlv());
    }
    if (from._has_bit(3)) {
      set_guildname(from.guildname());
    }
    if (from._has_bit(4)) {
      set_guildslogan(from.guildslogan());
    }
    if (from._has_bit(5)) {
      set_guildbulletin(from.guildbulletin());
    }
    if (from._has_bit(6)) {
      set_bldvalue(from.bldvalue());
    }
    if (from._has_bit(7)) {
      set_guilduesrcnt(from.guilduesrcnt());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from._has_bit(8)) {
      set_leaderid(from.leaderid());
    }
    if (from._has_bit(9)) {
      set_leadername(from.leadername());
    }
    if (from._has_bit(10)) {
      set_delatetm(from.delatetm());
    }
    if (from._has_bit(11)) {
      set_leaderlasttm(from.leaderlasttm());
    }
    if (from._has_bit(15)) {
      mutable_guildshop()->::DB_C_GuildShop::MergeFrom(from.guildshop());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from._has_bit(16)) {
      set_totalbldvalue(from.totalbldvalue());
    }
    if (from._has_bit(18)) {
      set_lastchgtime(from.lastchgtime());
    }
    if (from._has_bit(19)) {
      set_daykickusercnt(from.daykickusercnt());
    }
    if (from._has_bit(20)) {
      set_dayentercnt(from.dayentercnt());
    }
    if (from._has_bit(21)) {
      mutable_btlinfo()->::DB_C_GuildBtl::MergeFrom(from.btlinfo());
    }
  }
  if (from._has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (from._has_bit(24)) {
      mutable_gvemsg()->::DB_GVE_City::MergeFrom(from.gvemsg());
    }
    if (from._has_bit(25)) {
      mutable_gvgmsg()->::DB_C_GVG_Msg::MergeFrom(from.gvgmsg());
    }
    if (from._has_bit(26)) {
      set_delateid(from.delateid());
    }
    if (from._has_bit(27)) {
      set_leagueactiveid(from.leagueactiveid());
    }
    if (from._has_bit(28)) {
      set_leaguepoint(from.leaguepoint());
    }
    if (from._has_bit(30)) {
      set_leagueleaderuid(from.leagueleaderuid());
    }
    if (from._has_bit(31)) {
      set_chgleadertm(from.chgleadertm());
    }
  }
  if (from._has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    if (from._has_bit(32)) {
      mutable_redenvelopeinfo()->::DB_C_GuildRedEnvelope::MergeFrom(from.redenvelopeinfo());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DB_C_Guild::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DB_C_Guild::CopyFrom(const DB_C_Guild& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DB_C_Guild::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void DB_C_Guild::Swap(DB_C_Guild* other) {
  if (other != this) {
    std::swap(guildid_, other->guildid_);
    std::swap(countryid_, other->countryid_);
    std::swap(guildlv_, other->guildlv_);
    std::swap(guildname_, other->guildname_);
    std::swap(guildslogan_, other->guildslogan_);
    std::swap(guildbulletin_, other->guildbulletin_);
    std::swap(bldvalue_, other->bldvalue_);
    std::swap(guilduesrcnt_, other->guilduesrcnt_);
    std::swap(leaderid_, other->leaderid_);
    std::swap(leadername_, other->leadername_);
    std::swap(delatetm_, other->delatetm_);
    std::swap(leaderlasttm_, other->leaderlasttm_);
    applyuserid_.Swap(&other->applyuserid_);
    build_.Swap(&other->build_);
    log_.Swap(&other->log_);
    std::swap(guildshop_, other->guildshop_);
    std::swap(totalbldvalue_, other->totalbldvalue_);
    coinlog_.Swap(&other->coinlog_);
    std::swap(lastchgtime_, other->lastchgtime_);
    std::swap(daykickusercnt_, other->daykickusercnt_);
    std::swap(dayentercnt_, other->dayentercnt_);
    std::swap(btlinfo_, other->btlinfo_);
    storage_.Swap(&other->storage_);
    rewardlog_.Swap(&other->rewardlog_);
    std::swap(gvemsg_, other->gvemsg_);
    std::swap(gvgmsg_, other->gvgmsg_);
    std::swap(delateid_, other->delateid_);
    std::swap(leagueactiveid_, other->leagueactiveid_);
    std::swap(leaguepoint_, other->leaguepoint_);
    leaguelist_.Swap(&other->leaguelist_);
    std::swap(leagueleaderuid_, other->leagueleaderuid_);
    std::swap(chgleadertm_, other->chgleadertm_);
    std::swap(redenvelopeinfo_, other->redenvelopeinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_has_bits_[1], other->_has_bits_[1]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DB_C_Guild::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DB_C_Guild_descriptor_;
  metadata.reflection = DB_C_Guild_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DB_C_GuildList::kKeyFieldNumber;
const int DB_C_GuildList::kRegionFieldNumber;
const int DB_C_GuildList::kIndexFieldNumber;
const int DB_C_GuildList::kLtSaveRevisionFieldNumber;
const int DB_C_GuildList::kGuildFieldNumber;
#endif  // !_MSC_VER

DB_C_GuildList::DB_C_GuildList() {
  SharedCtor();
}

void DB_C_GuildList::InitAsDefaultInstance() {
}

DB_C_GuildList::DB_C_GuildList(const DB_C_GuildList& from) {
  SharedCtor();
  MergeFrom(from);
}

void DB_C_GuildList::SharedCtor() {
  _cached_size_ = 0;
  key_ = 0;
  region_ = 0;
  index_ = 0;
  ltsaverevision_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DB_C_GuildList::~DB_C_GuildList() {
  SharedDtor();
}

void DB_C_GuildList::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* DB_C_GuildList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DB_C_GuildList_descriptor_;
}

const DB_C_GuildList& DB_C_GuildList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_countryDB_2eproto();  return *default_instance_;
}

DB_C_GuildList* DB_C_GuildList::default_instance_ = NULL;

DB_C_GuildList* DB_C_GuildList::New() const {
  return new DB_C_GuildList;
}

void DB_C_GuildList::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    key_ = 0;
    region_ = 0;
    index_ = 0;
    ltsaverevision_ = GOOGLE_LONGLONG(0);
  }
  guild_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DB_C_GuildList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 key = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &key_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_region;
        break;
      }
      
      // required int32 region = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_region:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &region_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_index;
        break;
      }
      
      // required int32 index = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_index:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &index_));
        _set_bit(2);
        if (input->ExpectTag(32)) goto parse_ltSaveRevision;
        break;
      }
      
      // optional int64 ltSaveRevision = 4 [default = 0];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_ltSaveRevision:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt64(
              input, &ltsaverevision_));
        _set_bit(3);
        if (input->ExpectTag(42)) goto parse_guild;
        break;
      }
      
      // repeated .DB_C_Guild guild = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_guild:
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, add_guild()));
        if (input->ExpectTag(42)) goto parse_guild;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DB_C_GuildList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    DB_C_GuildList::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // required int32 key = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->key(), output);
  }
  
  // required int32 region = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->region(), output);
  }
  
  // required int32 index = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->index(), output);
  }
  
  // optional int64 ltSaveRevision = 4 [default = 0];
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->ltsaverevision(), output);
  }
  
  // repeated .DB_C_Guild guild = 5;
  for (int i = 0; i < this->guild_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      5, this->guild(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DB_C_GuildList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 key = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->key(), target);
  }
  
  // required int32 region = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->region(), target);
  }
  
  // required int32 index = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->index(), target);
  }
  
  // optional int64 ltSaveRevision = 4 [default = 0];
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->ltsaverevision(), target);
  }
  
  // repeated .DB_C_Guild guild = 5;
  for (int i = 0; i < this->guild_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->guild(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DB_C_GuildList::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 key = 1;
    if (has_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->key());
    }
    
    // required int32 region = 2;
    if (has_region()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->region());
    }
    
    // required int32 index = 3;
    if (has_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->index());
    }
    
    // optional int64 ltSaveRevision = 4 [default = 0];
    if (has_ltsaverevision()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->ltsaverevision());
    }
    
  }
  // repeated .DB_C_Guild guild = 5;
  total_size += 1 * this->guild_size();
  for (int i = 0; i < this->guild_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->guild(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void DB_C_GuildList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DB_C_GuildList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DB_C_GuildList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DB_C_GuildList::MergeFrom(const DB_C_GuildList& from) {
  GOOGLE_CHECK_NE(&from, this);
  guild_.MergeFrom(from.guild_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_key(from.key());
    }
    if (from._has_bit(1)) {
      set_region(from.region());
    }
    if (from._has_bit(2)) {
      set_index(from.index());
    }
    if (from._has_bit(3)) {
      set_ltsaverevision(from.ltsaverevision());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DB_C_GuildList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DB_C_GuildList::CopyFrom(const DB_C_GuildList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DB_C_GuildList::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  
  for (int i = 0; i < guild_size(); i++) {
    if (!this->guild(i).IsInitialized()) return false;
  }
  return true;
}

void DB_C_GuildList::Swap(DB_C_GuildList* other) {
  if (other != this) {
    std::swap(key_, other->key_);
    std::swap(region_, other->region_);
    std::swap(index_, other->index_);
    std::swap(ltsaverevision_, other->ltsaverevision_);
    guild_.Swap(&other->guild_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DB_C_GuildList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DB_C_GuildList_descriptor_;
  metadata.reflection = DB_C_GuildList_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DB_C_GuildBtlGeneral::kNGeneralIDFieldNumber;
const int DB_C_GuildBtlGeneral::kNGeneralLvlFieldNumber;
const int DB_C_GuildBtlGeneral::kNGeneralTrainLvlFieldNumber;
const int DB_C_GuildBtlGeneral::kNGeneralAtkFieldNumber;
const int DB_C_GuildBtlGeneral::kNGeneralDefFieldNumber;
const int DB_C_GuildBtlGeneral::kNGeneralHPFieldNumber;
const int DB_C_GuildBtlGeneral::kNGeneralCrtFieldNumber;
const int DB_C_GuildBtlGeneral::kNGeneralScoreFieldNumber;
const int DB_C_GuildBtlGeneral::kListGeneralMHFieldNumber;
#endif  // !_MSC_VER

DB_C_GuildBtlGeneral::DB_C_GuildBtlGeneral() {
  SharedCtor();
}

void DB_C_GuildBtlGeneral::InitAsDefaultInstance() {
}

DB_C_GuildBtlGeneral::DB_C_GuildBtlGeneral(const DB_C_GuildBtlGeneral& from) {
  SharedCtor();
  MergeFrom(from);
}

void DB_C_GuildBtlGeneral::SharedCtor() {
  _cached_size_ = 0;
  ngeneralid_ = 0;
  ngenerallvl_ = 0;
  ngeneraltrainlvl_ = 0;
  ngeneralatk_ = 0;
  ngeneraldef_ = 0;
  ngeneralhp_ = 0;
  ngeneralcrt_ = 0;
  ngeneralscore_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DB_C_GuildBtlGeneral::~DB_C_GuildBtlGeneral() {
  SharedDtor();
}

void DB_C_GuildBtlGeneral::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* DB_C_GuildBtlGeneral::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DB_C_GuildBtlGeneral_descriptor_;
}

const DB_C_GuildBtlGeneral& DB_C_GuildBtlGeneral::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_countryDB_2eproto();  return *default_instance_;
}

DB_C_GuildBtlGeneral* DB_C_GuildBtlGeneral::default_instance_ = NULL;

DB_C_GuildBtlGeneral* DB_C_GuildBtlGeneral::New() const {
  return new DB_C_GuildBtlGeneral;
}

void DB_C_GuildBtlGeneral::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ngeneralid_ = 0;
    ngenerallvl_ = 0;
    ngeneraltrainlvl_ = 0;
    ngeneralatk_ = 0;
    ngeneraldef_ = 0;
    ngeneralhp_ = 0;
    ngeneralcrt_ = 0;
    ngeneralscore_ = 0;
  }
  listgeneralmh_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DB_C_GuildBtlGeneral::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 nGeneralID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &ngeneralid_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_nGeneralLvl;
        break;
      }
      
      // optional int32 nGeneralLvl = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_nGeneralLvl:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &ngenerallvl_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_nGeneralTrainLvl;
        break;
      }
      
      // optional int32 nGeneralTrainLvl = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_nGeneralTrainLvl:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &ngeneraltrainlvl_));
        _set_bit(2);
        if (input->ExpectTag(32)) goto parse_nGeneralAtk;
        break;
      }
      
      // optional int32 nGeneralAtk = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_nGeneralAtk:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &ngeneralatk_));
        _set_bit(3);
        if (input->ExpectTag(40)) goto parse_nGeneralDef;
        break;
      }
      
      // optional int32 nGeneralDef = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_nGeneralDef:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &ngeneraldef_));
        _set_bit(4);
        if (input->ExpectTag(48)) goto parse_nGeneralHP;
        break;
      }
      
      // optional int32 nGeneralHP = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_nGeneralHP:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &ngeneralhp_));
        _set_bit(5);
        if (input->ExpectTag(56)) goto parse_nGeneralCrt;
        break;
      }
      
      // optional int32 nGeneralCrt = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_nGeneralCrt:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &ngeneralcrt_));
        _set_bit(6);
        if (input->ExpectTag(64)) goto parse_nGeneralScore;
        break;
      }
      
      // optional int32 nGeneralScore = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_nGeneralScore:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &ngeneralscore_));
        _set_bit(7);
        if (input->ExpectTag(74)) goto parse_listGeneralMH;
        break;
      }
      
      // repeated .DB_C_PVEFightMH listGeneralMH = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_listGeneralMH:
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, add_listgeneralmh()));
        if (input->ExpectTag(74)) goto parse_listGeneralMH;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DB_C_GuildBtlGeneral::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    DB_C_GuildBtlGeneral::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional int32 nGeneralID = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ngeneralid(), output);
  }
  
  // optional int32 nGeneralLvl = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->ngenerallvl(), output);
  }
  
  // optional int32 nGeneralTrainLvl = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->ngeneraltrainlvl(), output);
  }
  
  // optional int32 nGeneralAtk = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->ngeneralatk(), output);
  }
  
  // optional int32 nGeneralDef = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->ngeneraldef(), output);
  }
  
  // optional int32 nGeneralHP = 6;
  if (_has_bit(5)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->ngeneralhp(), output);
  }
  
  // optional int32 nGeneralCrt = 7;
  if (_has_bit(6)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->ngeneralcrt(), output);
  }
  
  // optional int32 nGeneralScore = 8;
  if (_has_bit(7)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->ngeneralscore(), output);
  }
  
  // repeated .DB_C_PVEFightMH listGeneralMH = 9;
  for (int i = 0; i < this->listgeneralmh_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      9, this->listgeneralmh(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DB_C_GuildBtlGeneral::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 nGeneralID = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ngeneralid(), target);
  }
  
  // optional int32 nGeneralLvl = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->ngenerallvl(), target);
  }
  
  // optional int32 nGeneralTrainLvl = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->ngeneraltrainlvl(), target);
  }
  
  // optional int32 nGeneralAtk = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->ngeneralatk(), target);
  }
  
  // optional int32 nGeneralDef = 5;
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->ngeneraldef(), target);
  }
  
  // optional int32 nGeneralHP = 6;
  if (_has_bit(5)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->ngeneralhp(), target);
  }
  
  // optional int32 nGeneralCrt = 7;
  if (_has_bit(6)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->ngeneralcrt(), target);
  }
  
  // optional int32 nGeneralScore = 8;
  if (_has_bit(7)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->ngeneralscore(), target);
  }
  
  // repeated .DB_C_PVEFightMH listGeneralMH = 9;
  for (int i = 0; i < this->listgeneralmh_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->listgeneralmh(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DB_C_GuildBtlGeneral::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 nGeneralID = 1;
    if (has_ngeneralid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ngeneralid());
    }
    
    // optional int32 nGeneralLvl = 2;
    if (has_ngenerallvl()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ngenerallvl());
    }
    
    // optional int32 nGeneralTrainLvl = 3;
    if (has_ngeneraltrainlvl()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ngeneraltrainlvl());
    }
    
    // optional int32 nGeneralAtk = 4;
    if (has_ngeneralatk()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ngeneralatk());
    }
    
    // optional int32 nGeneralDef = 5;
    if (has_ngeneraldef()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ngeneraldef());
    }
    
    // optional int32 nGeneralHP = 6;
    if (has_ngeneralhp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ngeneralhp());
    }
    
    // optional int32 nGeneralCrt = 7;
    if (has_ngeneralcrt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ngeneralcrt());
    }
    
    // optional int32 nGeneralScore = 8;
    if (has_ngeneralscore()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ngeneralscore());
    }
    
  }
  // repeated .DB_C_PVEFightMH listGeneralMH = 9;
  total_size += 1 * this->listgeneralmh_size();
  for (int i = 0; i < this->listgeneralmh_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->listgeneralmh(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void DB_C_GuildBtlGeneral::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DB_C_GuildBtlGeneral* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DB_C_GuildBtlGeneral*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DB_C_GuildBtlGeneral::MergeFrom(const DB_C_GuildBtlGeneral& from) {
  GOOGLE_CHECK_NE(&from, this);
  listgeneralmh_.MergeFrom(from.listgeneralmh_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_ngeneralid(from.ngeneralid());
    }
    if (from._has_bit(1)) {
      set_ngenerallvl(from.ngenerallvl());
    }
    if (from._has_bit(2)) {
      set_ngeneraltrainlvl(from.ngeneraltrainlvl());
    }
    if (from._has_bit(3)) {
      set_ngeneralatk(from.ngeneralatk());
    }
    if (from._has_bit(4)) {
      set_ngeneraldef(from.ngeneraldef());
    }
    if (from._has_bit(5)) {
      set_ngeneralhp(from.ngeneralhp());
    }
    if (from._has_bit(6)) {
      set_ngeneralcrt(from.ngeneralcrt());
    }
    if (from._has_bit(7)) {
      set_ngeneralscore(from.ngeneralscore());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DB_C_GuildBtlGeneral::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DB_C_GuildBtlGeneral::CopyFrom(const DB_C_GuildBtlGeneral& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DB_C_GuildBtlGeneral::IsInitialized() const {
  
  return true;
}

void DB_C_GuildBtlGeneral::Swap(DB_C_GuildBtlGeneral* other) {
  if (other != this) {
    std::swap(ngeneralid_, other->ngeneralid_);
    std::swap(ngenerallvl_, other->ngenerallvl_);
    std::swap(ngeneraltrainlvl_, other->ngeneraltrainlvl_);
    std::swap(ngeneralatk_, other->ngeneralatk_);
    std::swap(ngeneraldef_, other->ngeneraldef_);
    std::swap(ngeneralhp_, other->ngeneralhp_);
    std::swap(ngeneralcrt_, other->ngeneralcrt_);
    std::swap(ngeneralscore_, other->ngeneralscore_);
    listgeneralmh_.Swap(&other->listgeneralmh_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DB_C_GuildBtlGeneral::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DB_C_GuildBtlGeneral_descriptor_;
  metadata.reflection = DB_C_GuildBtlGeneral_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DB_C_PVEFightMH::kNMHIDFieldNumber;
const int DB_C_PVEFightMH::kNMHLvFieldNumber;
#endif  // !_MSC_VER

DB_C_PVEFightMH::DB_C_PVEFightMH() {
  SharedCtor();
}

void DB_C_PVEFightMH::InitAsDefaultInstance() {
}

DB_C_PVEFightMH::DB_C_PVEFightMH(const DB_C_PVEFightMH& from) {
  SharedCtor();
  MergeFrom(from);
}

void DB_C_PVEFightMH::SharedCtor() {
  _cached_size_ = 0;
  nmhid_ = 0;
  nmhlv_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DB_C_PVEFightMH::~DB_C_PVEFightMH() {
  SharedDtor();
}

void DB_C_PVEFightMH::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* DB_C_PVEFightMH::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DB_C_PVEFightMH_descriptor_;
}

const DB_C_PVEFightMH& DB_C_PVEFightMH::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_countryDB_2eproto();  return *default_instance_;
}

DB_C_PVEFightMH* DB_C_PVEFightMH::default_instance_ = NULL;

DB_C_PVEFightMH* DB_C_PVEFightMH::New() const {
  return new DB_C_PVEFightMH;
}

void DB_C_PVEFightMH::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    nmhid_ = 0;
    nmhlv_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DB_C_PVEFightMH::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 nMHID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &nmhid_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_nMHLv;
        break;
      }
      
      // optional int32 nMHLv = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_nMHLv:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &nmhlv_));
        _set_bit(1);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DB_C_PVEFightMH::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    DB_C_PVEFightMH::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional int32 nMHID = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->nmhid(), output);
  }
  
  // optional int32 nMHLv = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->nmhlv(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DB_C_PVEFightMH::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 nMHID = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->nmhid(), target);
  }
  
  // optional int32 nMHLv = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->nmhlv(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DB_C_PVEFightMH::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 nMHID = 1;
    if (has_nmhid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->nmhid());
    }
    
    // optional int32 nMHLv = 2;
    if (has_nmhlv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->nmhlv());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void DB_C_PVEFightMH::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DB_C_PVEFightMH* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DB_C_PVEFightMH*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DB_C_PVEFightMH::MergeFrom(const DB_C_PVEFightMH& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_nmhid(from.nmhid());
    }
    if (from._has_bit(1)) {
      set_nmhlv(from.nmhlv());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DB_C_PVEFightMH::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DB_C_PVEFightMH::CopyFrom(const DB_C_PVEFightMH& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DB_C_PVEFightMH::IsInitialized() const {
  
  return true;
}

void DB_C_PVEFightMH::Swap(DB_C_PVEFightMH* other) {
  if (other != this) {
    std::swap(nmhid_, other->nmhid_);
    std::swap(nmhlv_, other->nmhlv_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DB_C_PVEFightMH::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DB_C_PVEFightMH_descriptor_;
  metadata.reflection = DB_C_PVEFightMH_reflection_;
  return metadata;
}


// ===================================================================

const ::std::string DB_C_GuildBtlUser::_default_userid_;
const ::std::string DB_C_GuildBtlUser::_default_name_;
const ::std::string DB_C_GuildBtlUser::_default_pic_;
#ifndef _MSC_VER
const int DB_C_GuildBtlUser::kUserIDFieldNumber;
const int DB_C_GuildBtlUser::kNameFieldNumber;
const int DB_C_GuildBtlUser::kPicFieldNumber;
const int DB_C_GuildBtlUser::kLevelFieldNumber;
const int DB_C_GuildBtlUser::kCombatValueFieldNumber;
const int DB_C_GuildBtlUser::kAddHPPctFieldNumber;
const int DB_C_GuildBtlUser::kAddAtkPctFieldNumber;
const int DB_C_GuildBtlUser::kWinTimeFieldNumber;
const int DB_C_GuildBtlUser::kMaxWinTimeFieldNumber;
#endif  // !_MSC_VER

DB_C_GuildBtlUser::DB_C_GuildBtlUser() {
  SharedCtor();
}

void DB_C_GuildBtlUser::InitAsDefaultInstance() {
}

DB_C_GuildBtlUser::DB_C_GuildBtlUser(const DB_C_GuildBtlUser& from) {
  SharedCtor();
  MergeFrom(from);
}

void DB_C_GuildBtlUser::SharedCtor() {
  _cached_size_ = 0;
  userid_ = const_cast< ::std::string*>(&_default_userid_);
  name_ = const_cast< ::std::string*>(&_default_name_);
  pic_ = const_cast< ::std::string*>(&_default_pic_);
  level_ = 0;
  combatvalue_ = 0;
  addhppct_ = 0;
  addatkpct_ = 0;
  wintime_ = 0;
  maxwintime_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DB_C_GuildBtlUser::~DB_C_GuildBtlUser() {
  SharedDtor();
}

void DB_C_GuildBtlUser::SharedDtor() {
  if (userid_ != &_default_userid_) {
    delete userid_;
  }
  if (name_ != &_default_name_) {
    delete name_;
  }
  if (pic_ != &_default_pic_) {
    delete pic_;
  }
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* DB_C_GuildBtlUser::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DB_C_GuildBtlUser_descriptor_;
}

const DB_C_GuildBtlUser& DB_C_GuildBtlUser::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_countryDB_2eproto();  return *default_instance_;
}

DB_C_GuildBtlUser* DB_C_GuildBtlUser::default_instance_ = NULL;

DB_C_GuildBtlUser* DB_C_GuildBtlUser::New() const {
  return new DB_C_GuildBtlUser;
}

void DB_C_GuildBtlUser::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (userid_ != &_default_userid_) {
        userid_->clear();
      }
    }
    if (_has_bit(1)) {
      if (name_ != &_default_name_) {
        name_->clear();
      }
    }
    if (_has_bit(2)) {
      if (pic_ != &_default_pic_) {
        pic_->clear();
      }
    }
    level_ = 0;
    combatvalue_ = 0;
    addhppct_ = 0;
    addatkpct_ = 0;
    wintime_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    maxwintime_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DB_C_GuildBtlUser::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string userID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadString(
              input, this->mutable_userid()));
        ::google::protobuf::internal::WireFormat::VerifyUTF8String(
          this->userid().data(), this->userid().length(),
          ::google::protobuf::internal::WireFormat::PARSE);
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }
      
      // optional string name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_name:
        DO_(::google::protobuf::internal::WireFormatLite::ReadString(
              input, this->mutable_name()));
        ::google::protobuf::internal::WireFormat::VerifyUTF8String(
          this->name().data(), this->name().length(),
          ::google::protobuf::internal::WireFormat::PARSE);
        if (input->ExpectTag(26)) goto parse_pic;
        break;
      }
      
      // optional string pic = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_pic:
        DO_(::google::protobuf::internal::WireFormatLite::ReadString(
              input, this->mutable_pic()));
        ::google::protobuf::internal::WireFormat::VerifyUTF8String(
          this->pic().data(), this->pic().length(),
          ::google::protobuf::internal::WireFormat::PARSE);
        if (input->ExpectTag(48)) goto parse_level;
        break;
      }
      
      // optional int32 level = 6 [default = 0];
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_level:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &level_));
        _set_bit(3);
        if (input->ExpectTag(56)) goto parse_combatValue;
        break;
      }
      
      // optional int32 combatValue = 7 [default = 0];
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_combatValue:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &combatvalue_));
        _set_bit(4);
        if (input->ExpectTag(64)) goto parse_addHPPct;
        break;
      }
      
      // optional int32 addHPPct = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_addHPPct:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &addhppct_));
        _set_bit(5);
        if (input->ExpectTag(72)) goto parse_addAtkPct;
        break;
      }
      
      // optional int32 addAtkPct = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_addAtkPct:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &addatkpct_));
        _set_bit(6);
        if (input->ExpectTag(80)) goto parse_winTime;
        break;
      }
      
      // optional int32 winTime = 10 [default = 0];
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_winTime:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &wintime_));
        _set_bit(7);
        if (input->ExpectTag(88)) goto parse_maxWinTime;
        break;
      }
      
      // optional int32 maxWinTime = 11 [default = 0];
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_maxWinTime:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &maxwintime_));
        _set_bit(8);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DB_C_GuildBtlUser::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    DB_C_GuildBtlUser::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional string userID = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->userid().data(), this->userid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->userid(), output);
  }
  
  // optional string name = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->name(), output);
  }
  
  // optional string pic = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->pic().data(), this->pic().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->pic(), output);
  }
  
  // optional int32 level = 6 [default = 0];
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->level(), output);
  }
  
  // optional int32 combatValue = 7 [default = 0];
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->combatvalue(), output);
  }
  
  // optional int32 addHPPct = 8;
  if (_has_bit(5)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->addhppct(), output);
  }
  
  // optional int32 addAtkPct = 9;
  if (_has_bit(6)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->addatkpct(), output);
  }
  
  // optional int32 winTime = 10 [default = 0];
  if (_has_bit(7)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->wintime(), output);
  }
  
  // optional int32 maxWinTime = 11 [default = 0];
  if (_has_bit(8)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->maxwintime(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DB_C_GuildBtlUser::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string userID = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->userid().data(), this->userid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->userid(), target);
  }
  
  // optional string name = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }
  
  // optional string pic = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->pic().data(), this->pic().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->pic(), target);
  }
  
  // optional int32 level = 6 [default = 0];
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->level(), target);
  }
  
  // optional int32 combatValue = 7 [default = 0];
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->combatvalue(), target);
  }
  
  // optional int32 addHPPct = 8;
  if (_has_bit(5)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->addhppct(), target);
  }
  
  // optional int32 addAtkPct = 9;
  if (_has_bit(6)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->addatkpct(), target);
  }
  
  // optional int32 winTime = 10 [default = 0];
  if (_has_bit(7)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->wintime(), target);
  }
  
  // optional int32 maxWinTime = 11 [default = 0];
  if (_has_bit(8)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->maxwintime(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DB_C_GuildBtlUser::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string userID = 1;
    if (has_userid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->userid());
    }
    
    // optional string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }
    
    // optional string pic = 3;
    if (has_pic()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->pic());
    }
    
    // optional int32 level = 6 [default = 0];
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->level());
    }
    
    // optional int32 combatValue = 7 [default = 0];
    if (has_combatvalue()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->combatvalue());
    }
    
    // optional int32 addHPPct = 8;
    if (has_addhppct()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->addhppct());
    }
    
    // optional int32 addAtkPct = 9;
    if (has_addatkpct()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->addatkpct());
    }
    
    // optional int32 winTime = 10 [default = 0];
    if (has_wintime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->wintime());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 maxWinTime = 11 [default = 0];
    if (has_maxwintime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->maxwintime());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void DB_C_GuildBtlUser::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DB_C_GuildBtlUser* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DB_C_GuildBtlUser*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DB_C_GuildBtlUser::MergeFrom(const DB_C_GuildBtlUser& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_userid(from.userid());
    }
    if (from._has_bit(1)) {
      set_name(from.name());
    }
    if (from._has_bit(2)) {
      set_pic(from.pic());
    }
    if (from._has_bit(3)) {
      set_level(from.level());
    }
    if (from._has_bit(4)) {
      set_combatvalue(from.combatvalue());
    }
    if (from._has_bit(5)) {
      set_addhppct(from.addhppct());
    }
    if (from._has_bit(6)) {
      set_addatkpct(from.addatkpct());
    }
    if (from._has_bit(7)) {
      set_wintime(from.wintime());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from._has_bit(8)) {
      set_maxwintime(from.maxwintime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DB_C_GuildBtlUser::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DB_C_GuildBtlUser::CopyFrom(const DB_C_GuildBtlUser& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DB_C_GuildBtlUser::IsInitialized() const {
  
  return true;
}

void DB_C_GuildBtlUser::Swap(DB_C_GuildBtlUser* other) {
  if (other != this) {
    std::swap(userid_, other->userid_);
    std::swap(name_, other->name_);
    std::swap(pic_, other->pic_);
    std::swap(level_, other->level_);
    std::swap(combatvalue_, other->combatvalue_);
    std::swap(addhppct_, other->addhppct_);
    std::swap(addatkpct_, other->addatkpct_);
    std::swap(wintime_, other->wintime_);
    std::swap(maxwintime_, other->maxwintime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DB_C_GuildBtlUser::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DB_C_GuildBtlUser_descriptor_;
  metadata.reflection = DB_C_GuildBtlUser_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DB_C_GuildBtlPosition::kNPosXFieldNumber;
const int DB_C_GuildBtlPosition::kNPosYFieldNumber;
#endif  // !_MSC_VER

DB_C_GuildBtlPosition::DB_C_GuildBtlPosition() {
  SharedCtor();
}

void DB_C_GuildBtlPosition::InitAsDefaultInstance() {
}

DB_C_GuildBtlPosition::DB_C_GuildBtlPosition(const DB_C_GuildBtlPosition& from) {
  SharedCtor();
  MergeFrom(from);
}

void DB_C_GuildBtlPosition::SharedCtor() {
  _cached_size_ = 0;
  nposx_ = 0;
  nposy_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DB_C_GuildBtlPosition::~DB_C_GuildBtlPosition() {
  SharedDtor();
}

void DB_C_GuildBtlPosition::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* DB_C_GuildBtlPosition::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DB_C_GuildBtlPosition_descriptor_;
}

const DB_C_GuildBtlPosition& DB_C_GuildBtlPosition::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_countryDB_2eproto();  return *default_instance_;
}

DB_C_GuildBtlPosition* DB_C_GuildBtlPosition::default_instance_ = NULL;

DB_C_GuildBtlPosition* DB_C_GuildBtlPosition::New() const {
  return new DB_C_GuildBtlPosition;
}

void DB_C_GuildBtlPosition::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    nposx_ = 0;
    nposy_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DB_C_GuildBtlPosition::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 nPosX = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &nposx_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_nPosY;
        break;
      }
      
      // optional int32 nPosY = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_nPosY:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &nposy_));
        _set_bit(1);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DB_C_GuildBtlPosition::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    DB_C_GuildBtlPosition::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional int32 nPosX = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->nposx(), output);
  }
  
  // optional int32 nPosY = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->nposy(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DB_C_GuildBtlPosition::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 nPosX = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->nposx(), target);
  }
  
  // optional int32 nPosY = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->nposy(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DB_C_GuildBtlPosition::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 nPosX = 1;
    if (has_nposx()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->nposx());
    }
    
    // optional int32 nPosY = 2;
    if (has_nposy()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->nposy());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void DB_C_GuildBtlPosition::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DB_C_GuildBtlPosition* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DB_C_GuildBtlPosition*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DB_C_GuildBtlPosition::MergeFrom(const DB_C_GuildBtlPosition& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_nposx(from.nposx());
    }
    if (from._has_bit(1)) {
      set_nposy(from.nposy());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DB_C_GuildBtlPosition::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DB_C_GuildBtlPosition::CopyFrom(const DB_C_GuildBtlPosition& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DB_C_GuildBtlPosition::IsInitialized() const {
  
  return true;
}

void DB_C_GuildBtlPosition::Swap(DB_C_GuildBtlPosition* other) {
  if (other != this) {
    std::swap(nposx_, other->nposx_);
    std::swap(nposy_, other->nposy_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DB_C_GuildBtlPosition::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DB_C_GuildBtlPosition_descriptor_;
  metadata.reflection = DB_C_GuildBtlPosition_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DB_C_GuildBtlFightUnit::kNIDFieldNumber;
const int DB_C_GuildBtlFightUnit::kNArmyTypeFieldNumber;
const int DB_C_GuildBtlFightUnit::kNHPFieldNumber;
const int DB_C_GuildBtlFightUnit::kNGradeFieldNumber;
const int DB_C_GuildBtlFightUnit::kNArmyGroupFieldNumber;
const int DB_C_GuildBtlFightUnit::kNRestframeFieldNumber;
const int DB_C_GuildBtlFightUnit::kPosFieldNumber;
const int DB_C_GuildBtlFightUnit::kNMaxHPFieldNumber;
const int DB_C_GuildBtlFightUnit::kNHeroGradeFieldNumber;
const int DB_C_GuildBtlFightUnit::kNHeroLVFieldNumber;
#endif  // !_MSC_VER

DB_C_GuildBtlFightUnit::DB_C_GuildBtlFightUnit() {
  SharedCtor();
}

void DB_C_GuildBtlFightUnit::InitAsDefaultInstance() {
  pos_ = const_cast< ::DB_C_GuildBtlPosition*>(&::DB_C_GuildBtlPosition::default_instance());
}

DB_C_GuildBtlFightUnit::DB_C_GuildBtlFightUnit(const DB_C_GuildBtlFightUnit& from) {
  SharedCtor();
  MergeFrom(from);
}

void DB_C_GuildBtlFightUnit::SharedCtor() {
  _cached_size_ = 0;
  nid_ = 0;
  narmytype_ = 0;
  nhp_ = 0;
  ngrade_ = 0;
  narmygroup_ = 0;
  nrestframe_ = 0;
  pos_ = NULL;
  nmaxhp_ = 0;
  nherograde_ = 0;
  nherolv_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DB_C_GuildBtlFightUnit::~DB_C_GuildBtlFightUnit() {
  SharedDtor();
}

void DB_C_GuildBtlFightUnit::SharedDtor() {
  if (this != default_instance_) {
    delete pos_;
  }
}

const ::google::protobuf::Descriptor* DB_C_GuildBtlFightUnit::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DB_C_GuildBtlFightUnit_descriptor_;
}

const DB_C_GuildBtlFightUnit& DB_C_GuildBtlFightUnit::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_countryDB_2eproto();  return *default_instance_;
}

DB_C_GuildBtlFightUnit* DB_C_GuildBtlFightUnit::default_instance_ = NULL;

DB_C_GuildBtlFightUnit* DB_C_GuildBtlFightUnit::New() const {
  return new DB_C_GuildBtlFightUnit;
}

void DB_C_GuildBtlFightUnit::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    nid_ = 0;
    narmytype_ = 0;
    nhp_ = 0;
    ngrade_ = 0;
    narmygroup_ = 0;
    nrestframe_ = 0;
    if (_has_bit(6)) {
      if (pos_ != NULL) pos_->::DB_C_GuildBtlPosition::Clear();
    }
    nmaxhp_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    nherograde_ = 0;
    nherolv_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DB_C_GuildBtlFightUnit::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 nID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &nid_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_nArmyType;
        break;
      }
      
      // optional int32 nArmyType = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_nArmyType:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &narmytype_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_nHP;
        break;
      }
      
      // optional int32 nHP = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_nHP:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &nhp_));
        _set_bit(2);
        if (input->ExpectTag(32)) goto parse_nGrade;
        break;
      }
      
      // optional int32 nGrade = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_nGrade:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &ngrade_));
        _set_bit(3);
        if (input->ExpectTag(40)) goto parse_nArmyGroup;
        break;
      }
      
      // optional int32 nArmyGroup = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_nArmyGroup:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &narmygroup_));
        _set_bit(4);
        if (input->ExpectTag(48)) goto parse_nRestframe;
        break;
      }
      
      // optional int32 nRestframe = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_nRestframe:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &nrestframe_));
        _set_bit(5);
        if (input->ExpectTag(58)) goto parse_Pos;
        break;
      }
      
      // optional .DB_C_GuildBtlPosition Pos = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_Pos:
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
             input, mutable_pos()));
        if (input->ExpectTag(64)) goto parse_nMaxHP;
        break;
      }
      
      // optional int32 nMaxHP = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_nMaxHP:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &nmaxhp_));
        _set_bit(7);
        if (input->ExpectTag(72)) goto parse_nHeroGrade;
        break;
      }
      
      // optional int32 nHeroGrade = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_nHeroGrade:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &nherograde_));
        _set_bit(8);
        if (input->ExpectTag(80)) goto parse_nHeroLV;
        break;
      }
      
      // optional int32 nHeroLV = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_nHeroLV:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &nherolv_));
        _set_bit(9);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DB_C_GuildBtlFightUnit::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    DB_C_GuildBtlFightUnit::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional int32 nID = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->nid(), output);
  }
  
  // optional int32 nArmyType = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->narmytype(), output);
  }
  
  // optional int32 nHP = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->nhp(), output);
  }
  
  // optional int32 nGrade = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->ngrade(), output);
  }
  
  // optional int32 nArmyGroup = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->narmygroup(), output);
  }
  
  // optional int32 nRestframe = 6;
  if (_has_bit(5)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->nrestframe(), output);
  }
  
  // optional .DB_C_GuildBtlPosition Pos = 7;
  if (_has_bit(6)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      7, this->pos(), output);
  }
  
  // optional int32 nMaxHP = 8;
  if (_has_bit(7)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->nmaxhp(), output);
  }
  
  // optional int32 nHeroGrade = 9;
  if (_has_bit(8)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->nherograde(), output);
  }
  
  // optional int32 nHeroLV = 10;
  if (_has_bit(9)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->nherolv(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DB_C_GuildBtlFightUnit::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 nID = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->nid(), target);
  }
  
  // optional int32 nArmyType = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->narmytype(), target);
  }
  
  // optional int32 nHP = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->nhp(), target);
  }
  
  // optional int32 nGrade = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->ngrade(), target);
  }
  
  // optional int32 nArmyGroup = 5;
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->narmygroup(), target);
  }
  
  // optional int32 nRestframe = 6;
  if (_has_bit(5)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->nrestframe(), target);
  }
  
  // optional .DB_C_GuildBtlPosition Pos = 7;
  if (_has_bit(6)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->pos(), target);
  }
  
  // optional int32 nMaxHP = 8;
  if (_has_bit(7)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->nmaxhp(), target);
  }
  
  // optional int32 nHeroGrade = 9;
  if (_has_bit(8)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->nherograde(), target);
  }
  
  // optional int32 nHeroLV = 10;
  if (_has_bit(9)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->nherolv(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DB_C_GuildBtlFightUnit::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 nID = 1;
    if (has_nid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->nid());
    }
    
    // optional int32 nArmyType = 2;
    if (has_narmytype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->narmytype());
    }
    
    // optional int32 nHP = 3;
    if (has_nhp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->nhp());
    }
    
    // optional int32 nGrade = 4;
    if (has_ngrade()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ngrade());
    }
    
    // optional int32 nArmyGroup = 5;
    if (has_narmygroup()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->narmygroup());
    }
    
    // optional int32 nRestframe = 6;
    if (has_nrestframe()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->nrestframe());
    }
    
    // optional .DB_C_GuildBtlPosition Pos = 7;
    if (has_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->pos());
    }
    
    // optional int32 nMaxHP = 8;
    if (has_nmaxhp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->nmaxhp());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 nHeroGrade = 9;
    if (has_nherograde()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->nherograde());
    }
    
    // optional int32 nHeroLV = 10;
    if (has_nherolv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->nherolv());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void DB_C_GuildBtlFightUnit::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DB_C_GuildBtlFightUnit* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DB_C_GuildBtlFightUnit*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DB_C_GuildBtlFightUnit::MergeFrom(const DB_C_GuildBtlFightUnit& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_nid(from.nid());
    }
    if (from._has_bit(1)) {
      set_narmytype(from.narmytype());
    }
    if (from._has_bit(2)) {
      set_nhp(from.nhp());
    }
    if (from._has_bit(3)) {
      set_ngrade(from.ngrade());
    }
    if (from._has_bit(4)) {
      set_narmygroup(from.narmygroup());
    }
    if (from._has_bit(5)) {
      set_nrestframe(from.nrestframe());
    }
    if (from._has_bit(6)) {
      mutable_pos()->::DB_C_GuildBtlPosition::MergeFrom(from.pos());
    }
    if (from._has_bit(7)) {
      set_nmaxhp(from.nmaxhp());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from._has_bit(8)) {
      set_nherograde(from.nherograde());
    }
    if (from._has_bit(9)) {
      set_nherolv(from.nherolv());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DB_C_GuildBtlFightUnit::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DB_C_GuildBtlFightUnit::CopyFrom(const DB_C_GuildBtlFightUnit& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DB_C_GuildBtlFightUnit::IsInitialized() const {
  
  return true;
}

void DB_C_GuildBtlFightUnit::Swap(DB_C_GuildBtlFightUnit* other) {
  if (other != this) {
    std::swap(nid_, other->nid_);
    std::swap(narmytype_, other->narmytype_);
    std::swap(nhp_, other->nhp_);
    std::swap(ngrade_, other->ngrade_);
    std::swap(narmygroup_, other->narmygroup_);
    std::swap(nrestframe_, other->nrestframe_);
    std::swap(pos_, other->pos_);
    std::swap(nmaxhp_, other->nmaxhp_);
    std::swap(nherograde_, other->nherograde_);
    std::swap(nherolv_, other->nherolv_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DB_C_GuildBtlFightUnit::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DB_C_GuildBtlFightUnit_descriptor_;
  metadata.reflection = DB_C_GuildBtlFightUnit_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DB_C_GuildBtlArmyAtkProp::kNArmyTypeFieldNumber;
const int DB_C_GuildBtlArmyAtkProp::kNHPFieldNumber;
const int DB_C_GuildBtlArmyAtkProp::kNDamageFieldNumber;
const int DB_C_GuildBtlArmyAtkProp::kNDamageBaseFieldNumber;
const int DB_C_GuildBtlArmyAtkProp::kNDamagePecFieldNumber;
const int DB_C_GuildBtlArmyAtkProp::kNRangeFieldNumber;
const int DB_C_GuildBtlArmyAtkProp::kNCrtFieldNumber;
const int DB_C_GuildBtlArmyAtkProp::kNSpeedFieldNumber;
const int DB_C_GuildBtlArmyAtkProp::kNTurnSpeedFieldNumber;
const int DB_C_GuildBtlArmyAtkProp::kNRestraintFieldNumber;
const int DB_C_GuildBtlArmyAtkProp::kNCrtDamageFieldNumber;
const int DB_C_GuildBtlArmyAtkProp::kNCrtDefFieldNumber;
const int DB_C_GuildBtlArmyAtkProp::kNDamageDefFieldNumber;
const int DB_C_GuildBtlArmyAtkProp::kNTotalDamagePctFieldNumber;
const int DB_C_GuildBtlArmyAtkProp::kNBuffDamagePctFieldNumber;
const int DB_C_GuildBtlArmyAtkProp::kNRangeBaseFieldNumber;
const int DB_C_GuildBtlArmyAtkProp::kNSpeedBaseFieldNumber;
const int DB_C_GuildBtlArmyAtkProp::kNRestraintdefFieldNumber;
const int DB_C_GuildBtlArmyAtkProp::kNPropertyDamagePecFieldNumber;
const int DB_C_GuildBtlArmyAtkProp::kNPropertyDamageDefPecFieldNumber;
const int DB_C_GuildBtlArmyAtkProp::kNDefAtkPecFieldNumber;
const int DB_C_GuildBtlArmyAtkProp::kNDefCritRateFieldNumber;
const int DB_C_GuildBtlArmyAtkProp::kNDefCritRangeFieldNumber;
#endif  // !_MSC_VER

DB_C_GuildBtlArmyAtkProp::DB_C_GuildBtlArmyAtkProp() {
  SharedCtor();
}

void DB_C_GuildBtlArmyAtkProp::InitAsDefaultInstance() {
}

DB_C_GuildBtlArmyAtkProp::DB_C_GuildBtlArmyAtkProp(const DB_C_GuildBtlArmyAtkProp& from) {
  SharedCtor();
  MergeFrom(from);
}

void DB_C_GuildBtlArmyAtkProp::SharedCtor() {
  _cached_size_ = 0;
  narmytype_ = 0;
  nhp_ = 0;
  ndamage_ = 0;
  ndamagebase_ = 0;
  ndamagepec_ = 0;
  nrange_ = 0;
  ncrt_ = 0;
  nspeed_ = 0;
  nturnspeed_ = 0;
  ncrtdamage_ = 0;
  ncrtdef_ = 0;
  ndamagedef_ = 0;
  ntotaldamagepct_ = 0;
  nbuffdamagepct_ = 0;
  nrangebase_ = 0;
  nspeedbase_ = 0;
  npropertydamagepec_ = 0;
  npropertydamagedefpec_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DB_C_GuildBtlArmyAtkProp::~DB_C_GuildBtlArmyAtkProp() {
  SharedDtor();
}

void DB_C_GuildBtlArmyAtkProp::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* DB_C_GuildBtlArmyAtkProp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DB_C_GuildBtlArmyAtkProp_descriptor_;
}

const DB_C_GuildBtlArmyAtkProp& DB_C_GuildBtlArmyAtkProp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_countryDB_2eproto();  return *default_instance_;
}

DB_C_GuildBtlArmyAtkProp* DB_C_GuildBtlArmyAtkProp::default_instance_ = NULL;

DB_C_GuildBtlArmyAtkProp* DB_C_GuildBtlArmyAtkProp::New() const {
  return new DB_C_GuildBtlArmyAtkProp;
}

void DB_C_GuildBtlArmyAtkProp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    narmytype_ = 0;
    nhp_ = 0;
    ndamage_ = 0;
    ndamagebase_ = 0;
    ndamagepec_ = 0;
    nrange_ = 0;
    ncrt_ = 0;
    nspeed_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    nturnspeed_ = 0;
    ncrtdamage_ = 0;
    ncrtdef_ = 0;
    ndamagedef_ = 0;
    ntotaldamagepct_ = 0;
    nbuffdamagepct_ = 0;
    nrangebase_ = 0;
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    nspeedbase_ = 0;
    npropertydamagepec_ = 0;
    npropertydamagedefpec_ = 0;
  }
  nrestraint_.Clear();
  nrestraintdef_.Clear();
  ndefatkpec_.Clear();
  ndefcritrate_.Clear();
  ndefcritrange_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DB_C_GuildBtlArmyAtkProp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 nArmyType = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &narmytype_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_nHP;
        break;
      }
      
      // optional int32 nHP = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_nHP:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &nhp_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_nDamage;
        break;
      }
      
      // optional int32 nDamage = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_nDamage:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &ndamage_));
        _set_bit(2);
        if (input->ExpectTag(32)) goto parse_nDamageBase;
        break;
      }
      
      // optional int32 nDamageBase = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_nDamageBase:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &ndamagebase_));
        _set_bit(3);
        if (input->ExpectTag(40)) goto parse_nDamagePec;
        break;
      }
      
      // optional int32 nDamagePec = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_nDamagePec:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &ndamagepec_));
        _set_bit(4);
        if (input->ExpectTag(48)) goto parse_nRange;
        break;
      }
      
      // optional int32 nRange = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_nRange:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &nrange_));
        _set_bit(5);
        if (input->ExpectTag(56)) goto parse_nCrt;
        break;
      }
      
      // optional int32 nCrt = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_nCrt:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &ncrt_));
        _set_bit(6);
        if (input->ExpectTag(64)) goto parse_nSpeed;
        break;
      }
      
      // optional int32 nSpeed = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_nSpeed:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &nspeed_));
        _set_bit(7);
        if (input->ExpectTag(72)) goto parse_nTurnSpeed;
        break;
      }
      
      // optional int32 nTurnSpeed = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_nTurnSpeed:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &nturnspeed_));
        _set_bit(8);
        if (input->ExpectTag(80)) goto parse_nRestraint;
        break;
      }
      
      // repeated int32 nRestraint = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_nRestraint:
        ::google::protobuf::int32 value;
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &value));
        add_nrestraint(value);
        if (input->ExpectTag(80)) goto parse_nRestraint;
        if (input->ExpectTag(88)) goto parse_nCrtDamage;
        break;
      }
      
      // optional int32 nCrtDamage = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_nCrtDamage:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &ncrtdamage_));
        _set_bit(10);
        if (input->ExpectTag(96)) goto parse_nCrtDef;
        break;
      }
      
      // optional int32 nCrtDef = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_nCrtDef:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &ncrtdef_));
        _set_bit(11);
        if (input->ExpectTag(104)) goto parse_nDamageDef;
        break;
      }
      
      // optional int32 nDamageDef = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_nDamageDef:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &ndamagedef_));
        _set_bit(12);
        if (input->ExpectTag(112)) goto parse_nTotalDamagePct;
        break;
      }
      
      // optional int32 nTotalDamagePct = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_nTotalDamagePct:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &ntotaldamagepct_));
        _set_bit(13);
        if (input->ExpectTag(120)) goto parse_nBuffDamagePct;
        break;
      }
      
      // optional int32 nBuffDamagePct = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_nBuffDamagePct:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &nbuffdamagepct_));
        _set_bit(14);
        if (input->ExpectTag(128)) goto parse_nRangeBase;
        break;
      }
      
      // optional int32 nRangeBase = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_nRangeBase:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &nrangebase_));
        _set_bit(15);
        if (input->ExpectTag(136)) goto parse_nSpeedBase;
        break;
      }
      
      // optional int32 nSpeedBase = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_nSpeedBase:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &nspeedbase_));
        _set_bit(16);
        if (input->ExpectTag(144)) goto parse_nRestraintdef;
        break;
      }
      
      // repeated int32 nRestraintdef = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_nRestraintdef:
        ::google::protobuf::int32 value;
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &value));
        add_nrestraintdef(value);
        if (input->ExpectTag(144)) goto parse_nRestraintdef;
        if (input->ExpectTag(152)) goto parse_nPropertyDamagePec;
        break;
      }
      
      // optional int32 nPropertyDamagePec = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_nPropertyDamagePec:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &npropertydamagepec_));
        _set_bit(18);
        if (input->ExpectTag(160)) goto parse_nPropertyDamageDefPec;
        break;
      }
      
      // optional int32 nPropertyDamageDefPec = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_nPropertyDamageDefPec:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &npropertydamagedefpec_));
        _set_bit(19);
        if (input->ExpectTag(168)) goto parse_nDefAtkPec;
        break;
      }
      
      // repeated int32 nDefAtkPec = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_nDefAtkPec:
        ::google::protobuf::int32 value;
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &value));
        add_ndefatkpec(value);
        if (input->ExpectTag(168)) goto parse_nDefAtkPec;
        if (input->ExpectTag(176)) goto parse_nDefCritRate;
        break;
      }
      
      // repeated int32 nDefCritRate = 22;
      case 22: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_nDefCritRate:
        ::google::protobuf::int32 value;
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &value));
        add_ndefcritrate(value);
        if (input->ExpectTag(176)) goto parse_nDefCritRate;
        if (input->ExpectTag(184)) goto parse_nDefCritRange;
        break;
      }
      
      // repeated int32 nDefCritRange = 23;
      case 23: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_nDefCritRange:
        ::google::protobuf::int32 value;
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &value));
        add_ndefcritrange(value);
        if (input->ExpectTag(184)) goto parse_nDefCritRange;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DB_C_GuildBtlArmyAtkProp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    DB_C_GuildBtlArmyAtkProp::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional int32 nArmyType = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->narmytype(), output);
  }
  
  // optional int32 nHP = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->nhp(), output);
  }
  
  // optional int32 nDamage = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->ndamage(), output);
  }
  
  // optional int32 nDamageBase = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->ndamagebase(), output);
  }
  
  // optional int32 nDamagePec = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->ndamagepec(), output);
  }
  
  // optional int32 nRange = 6;
  if (_has_bit(5)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->nrange(), output);
  }
  
  // optional int32 nCrt = 7;
  if (_has_bit(6)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->ncrt(), output);
  }
  
  // optional int32 nSpeed = 8;
  if (_has_bit(7)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->nspeed(), output);
  }
  
  // optional int32 nTurnSpeed = 9;
  if (_has_bit(8)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->nturnspeed(), output);
  }
  
  // repeated int32 nRestraint = 10;
  for (int i = 0; i < this->nrestraint_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      10, this->nrestraint(i), output);
  }
  
  // optional int32 nCrtDamage = 11;
  if (_has_bit(10)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->ncrtdamage(), output);
  }
  
  // optional int32 nCrtDef = 12;
  if (_has_bit(11)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->ncrtdef(), output);
  }
  
  // optional int32 nDamageDef = 13;
  if (_has_bit(12)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->ndamagedef(), output);
  }
  
  // optional int32 nTotalDamagePct = 14;
  if (_has_bit(13)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->ntotaldamagepct(), output);
  }
  
  // optional int32 nBuffDamagePct = 15;
  if (_has_bit(14)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(15, this->nbuffdamagepct(), output);
  }
  
  // optional int32 nRangeBase = 16;
  if (_has_bit(15)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(16, this->nrangebase(), output);
  }
  
  // optional int32 nSpeedBase = 17;
  if (_has_bit(16)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(17, this->nspeedbase(), output);
  }
  
  // repeated int32 nRestraintdef = 18;
  for (int i = 0; i < this->nrestraintdef_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      18, this->nrestraintdef(i), output);
  }
  
  // optional int32 nPropertyDamagePec = 19;
  if (_has_bit(18)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(19, this->npropertydamagepec(), output);
  }
  
  // optional int32 nPropertyDamageDefPec = 20;
  if (_has_bit(19)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(20, this->npropertydamagedefpec(), output);
  }
  
  // repeated int32 nDefAtkPec = 21;
  for (int i = 0; i < this->ndefatkpec_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      21, this->ndefatkpec(i), output);
  }
  
  // repeated int32 nDefCritRate = 22;
  for (int i = 0; i < this->ndefcritrate_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      22, this->ndefcritrate(i), output);
  }
  
  // repeated int32 nDefCritRange = 23;
  for (int i = 0; i < this->ndefcritrange_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      23, this->ndefcritrange(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DB_C_GuildBtlArmyAtkProp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 nArmyType = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->narmytype(), target);
  }
  
  // optional int32 nHP = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->nhp(), target);
  }
  
  // optional int32 nDamage = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->ndamage(), target);
  }
  
  // optional int32 nDamageBase = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->ndamagebase(), target);
  }
  
  // optional int32 nDamagePec = 5;
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->ndamagepec(), target);
  }
  
  // optional int32 nRange = 6;
  if (_has_bit(5)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->nrange(), target);
  }
  
  // optional int32 nCrt = 7;
  if (_has_bit(6)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->ncrt(), target);
  }
  
  // optional int32 nSpeed = 8;
  if (_has_bit(7)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->nspeed(), target);
  }
  
  // optional int32 nTurnSpeed = 9;
  if (_has_bit(8)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->nturnspeed(), target);
  }
  
  // repeated int32 nRestraint = 10;
  for (int i = 0; i < this->nrestraint_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(10, this->nrestraint(i), target);
  }
  
  // optional int32 nCrtDamage = 11;
  if (_has_bit(10)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->ncrtdamage(), target);
  }
  
  // optional int32 nCrtDef = 12;
  if (_has_bit(11)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->ncrtdef(), target);
  }
  
  // optional int32 nDamageDef = 13;
  if (_has_bit(12)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->ndamagedef(), target);
  }
  
  // optional int32 nTotalDamagePct = 14;
  if (_has_bit(13)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(14, this->ntotaldamagepct(), target);
  }
  
  // optional int32 nBuffDamagePct = 15;
  if (_has_bit(14)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(15, this->nbuffdamagepct(), target);
  }
  
  // optional int32 nRangeBase = 16;
  if (_has_bit(15)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(16, this->nrangebase(), target);
  }
  
  // optional int32 nSpeedBase = 17;
  if (_has_bit(16)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(17, this->nspeedbase(), target);
  }
  
  // repeated int32 nRestraintdef = 18;
  for (int i = 0; i < this->nrestraintdef_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(18, this->nrestraintdef(i), target);
  }
  
  // optional int32 nPropertyDamagePec = 19;
  if (_has_bit(18)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(19, this->npropertydamagepec(), target);
  }
  
  // optional int32 nPropertyDamageDefPec = 20;
  if (_has_bit(19)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(20, this->npropertydamagedefpec(), target);
  }
  
  // repeated int32 nDefAtkPec = 21;
  for (int i = 0; i < this->ndefatkpec_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(21, this->ndefatkpec(i), target);
  }
  
  // repeated int32 nDefCritRate = 22;
  for (int i = 0; i < this->ndefcritrate_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(22, this->ndefcritrate(i), target);
  }
  
  // repeated int32 nDefCritRange = 23;
  for (int i = 0; i < this->ndefcritrange_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(23, this->ndefcritrange(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DB_C_GuildBtlArmyAtkProp::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 nArmyType = 1;
    if (has_narmytype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->narmytype());
    }
    
    // optional int32 nHP = 2;
    if (has_nhp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->nhp());
    }
    
    // optional int32 nDamage = 3;
    if (has_ndamage()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ndamage());
    }
    
    // optional int32 nDamageBase = 4;
    if (has_ndamagebase()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ndamagebase());
    }
    
    // optional int32 nDamagePec = 5;
    if (has_ndamagepec()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ndamagepec());
    }
    
    // optional int32 nRange = 6;
    if (has_nrange()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->nrange());
    }
    
    // optional int32 nCrt = 7;
    if (has_ncrt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ncrt());
    }
    
    // optional int32 nSpeed = 8;
    if (has_nspeed()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->nspeed());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 nTurnSpeed = 9;
    if (has_nturnspeed()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->nturnspeed());
    }
    
    // optional int32 nCrtDamage = 11;
    if (has_ncrtdamage()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ncrtdamage());
    }
    
    // optional int32 nCrtDef = 12;
    if (has_ncrtdef()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ncrtdef());
    }
    
    // optional int32 nDamageDef = 13;
    if (has_ndamagedef()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ndamagedef());
    }
    
    // optional int32 nTotalDamagePct = 14;
    if (has_ntotaldamagepct()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ntotaldamagepct());
    }
    
    // optional int32 nBuffDamagePct = 15;
    if (has_nbuffdamagepct()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->nbuffdamagepct());
    }
    
    // optional int32 nRangeBase = 16;
    if (has_nrangebase()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->nrangebase());
    }
    
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional int32 nSpeedBase = 17;
    if (has_nspeedbase()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->nspeedbase());
    }
    
    // optional int32 nPropertyDamagePec = 19;
    if (has_npropertydamagepec()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->npropertydamagepec());
    }
    
    // optional int32 nPropertyDamageDefPec = 20;
    if (has_npropertydamagedefpec()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->npropertydamagedefpec());
    }
    
  }
  // repeated int32 nRestraint = 10;
  {
    int data_size = 0;
    for (int i = 0; i < this->nrestraint_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->nrestraint(i));
    }
    total_size += 1 * this->nrestraint_size() + data_size;
  }
  
  // repeated int32 nRestraintdef = 18;
  {
    int data_size = 0;
    for (int i = 0; i < this->nrestraintdef_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->nrestraintdef(i));
    }
    total_size += 2 * this->nrestraintdef_size() + data_size;
  }
  
  // repeated int32 nDefAtkPec = 21;
  {
    int data_size = 0;
    for (int i = 0; i < this->ndefatkpec_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->ndefatkpec(i));
    }
    total_size += 2 * this->ndefatkpec_size() + data_size;
  }
  
  // repeated int32 nDefCritRate = 22;
  {
    int data_size = 0;
    for (int i = 0; i < this->ndefcritrate_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->ndefcritrate(i));
    }
    total_size += 2 * this->ndefcritrate_size() + data_size;
  }
  
  // repeated int32 nDefCritRange = 23;
  {
    int data_size = 0;
    for (int i = 0; i < this->ndefcritrange_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->ndefcritrange(i));
    }
    total_size += 2 * this->ndefcritrange_size() + data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void DB_C_GuildBtlArmyAtkProp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DB_C_GuildBtlArmyAtkProp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DB_C_GuildBtlArmyAtkProp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DB_C_GuildBtlArmyAtkProp::MergeFrom(const DB_C_GuildBtlArmyAtkProp& from) {
  GOOGLE_CHECK_NE(&from, this);
  nrestraint_.MergeFrom(from.nrestraint_);
  nrestraintdef_.MergeFrom(from.nrestraintdef_);
  ndefatkpec_.MergeFrom(from.ndefatkpec_);
  ndefcritrate_.MergeFrom(from.ndefcritrate_);
  ndefcritrange_.MergeFrom(from.ndefcritrange_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_narmytype(from.narmytype());
    }
    if (from._has_bit(1)) {
      set_nhp(from.nhp());
    }
    if (from._has_bit(2)) {
      set_ndamage(from.ndamage());
    }
    if (from._has_bit(3)) {
      set_ndamagebase(from.ndamagebase());
    }
    if (from._has_bit(4)) {
      set_ndamagepec(from.ndamagepec());
    }
    if (from._has_bit(5)) {
      set_nrange(from.nrange());
    }
    if (from._has_bit(6)) {
      set_ncrt(from.ncrt());
    }
    if (from._has_bit(7)) {
      set_nspeed(from.nspeed());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from._has_bit(8)) {
      set_nturnspeed(from.nturnspeed());
    }
    if (from._has_bit(10)) {
      set_ncrtdamage(from.ncrtdamage());
    }
    if (from._has_bit(11)) {
      set_ncrtdef(from.ncrtdef());
    }
    if (from._has_bit(12)) {
      set_ndamagedef(from.ndamagedef());
    }
    if (from._has_bit(13)) {
      set_ntotaldamagepct(from.ntotaldamagepct());
    }
    if (from._has_bit(14)) {
      set_nbuffdamagepct(from.nbuffdamagepct());
    }
    if (from._has_bit(15)) {
      set_nrangebase(from.nrangebase());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from._has_bit(16)) {
      set_nspeedbase(from.nspeedbase());
    }
    if (from._has_bit(18)) {
      set_npropertydamagepec(from.npropertydamagepec());
    }
    if (from._has_bit(19)) {
      set_npropertydamagedefpec(from.npropertydamagedefpec());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DB_C_GuildBtlArmyAtkProp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DB_C_GuildBtlArmyAtkProp::CopyFrom(const DB_C_GuildBtlArmyAtkProp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DB_C_GuildBtlArmyAtkProp::IsInitialized() const {
  
  return true;
}

void DB_C_GuildBtlArmyAtkProp::Swap(DB_C_GuildBtlArmyAtkProp* other) {
  if (other != this) {
    std::swap(narmytype_, other->narmytype_);
    std::swap(nhp_, other->nhp_);
    std::swap(ndamage_, other->ndamage_);
    std::swap(ndamagebase_, other->ndamagebase_);
    std::swap(ndamagepec_, other->ndamagepec_);
    std::swap(nrange_, other->nrange_);
    std::swap(ncrt_, other->ncrt_);
    std::swap(nspeed_, other->nspeed_);
    std::swap(nturnspeed_, other->nturnspeed_);
    nrestraint_.Swap(&other->nrestraint_);
    std::swap(ncrtdamage_, other->ncrtdamage_);
    std::swap(ncrtdef_, other->ncrtdef_);
    std::swap(ndamagedef_, other->ndamagedef_);
    std::swap(ntotaldamagepct_, other->ntotaldamagepct_);
    std::swap(nbuffdamagepct_, other->nbuffdamagepct_);
    std::swap(nrangebase_, other->nrangebase_);
    std::swap(nspeedbase_, other->nspeedbase_);
    nrestraintdef_.Swap(&other->nrestraintdef_);
    std::swap(npropertydamagepec_, other->npropertydamagepec_);
    std::swap(npropertydamagedefpec_, other->npropertydamagedefpec_);
    ndefatkpec_.Swap(&other->ndefatkpec_);
    ndefcritrate_.Swap(&other->ndefcritrate_);
    ndefcritrange_.Swap(&other->ndefcritrange_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DB_C_GuildBtlArmyAtkProp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DB_C_GuildBtlArmyAtkProp_descriptor_;
  metadata.reflection = DB_C_GuildBtlArmyAtkProp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DB_C_GuildBtlAdmiralAdd::kNAddPctFootFieldNumber;
const int DB_C_GuildBtlAdmiralAdd::kNAddPctTankFieldNumber;
const int DB_C_GuildBtlAdmiralAdd::kNAddPctPlaneFieldNumber;
const int DB_C_GuildBtlAdmiralAdd::kNAddPctBuildFieldNumber;
const int DB_C_GuildBtlAdmiralAdd::kFightGeneralFieldNumber;
#endif  // !_MSC_VER

DB_C_GuildBtlAdmiralAdd::DB_C_GuildBtlAdmiralAdd() {
  SharedCtor();
}

void DB_C_GuildBtlAdmiralAdd::InitAsDefaultInstance() {
  fightgeneral_ = const_cast< ::DB_C_GuildBtlGeneral*>(&::DB_C_GuildBtlGeneral::default_instance());
}

DB_C_GuildBtlAdmiralAdd::DB_C_GuildBtlAdmiralAdd(const DB_C_GuildBtlAdmiralAdd& from) {
  SharedCtor();
  MergeFrom(from);
}

void DB_C_GuildBtlAdmiralAdd::SharedCtor() {
  _cached_size_ = 0;
  fightgeneral_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DB_C_GuildBtlAdmiralAdd::~DB_C_GuildBtlAdmiralAdd() {
  SharedDtor();
}

void DB_C_GuildBtlAdmiralAdd::SharedDtor() {
  if (this != default_instance_) {
    delete fightgeneral_;
  }
}

const ::google::protobuf::Descriptor* DB_C_GuildBtlAdmiralAdd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DB_C_GuildBtlAdmiralAdd_descriptor_;
}

const DB_C_GuildBtlAdmiralAdd& DB_C_GuildBtlAdmiralAdd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_countryDB_2eproto();  return *default_instance_;
}

DB_C_GuildBtlAdmiralAdd* DB_C_GuildBtlAdmiralAdd::default_instance_ = NULL;

DB_C_GuildBtlAdmiralAdd* DB_C_GuildBtlAdmiralAdd::New() const {
  return new DB_C_GuildBtlAdmiralAdd;
}

void DB_C_GuildBtlAdmiralAdd::Clear() {
  if (_has_bits_[4 / 32] & (0xffu << (4 % 32))) {
    if (_has_bit(4)) {
      if (fightgeneral_ != NULL) fightgeneral_->::DB_C_GuildBtlGeneral::Clear();
    }
  }
  naddpctfoot_.Clear();
  naddpcttank_.Clear();
  naddpctplane_.Clear();
  naddpctbuild_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DB_C_GuildBtlAdmiralAdd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated int32 nAddPctFoot = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_nAddPctFoot:
        ::google::protobuf::int32 value;
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &value));
        add_naddpctfoot(value);
        if (input->ExpectTag(8)) goto parse_nAddPctFoot;
        if (input->ExpectTag(16)) goto parse_nAddPctTank;
        break;
      }
      
      // repeated int32 nAddPctTank = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_nAddPctTank:
        ::google::protobuf::int32 value;
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &value));
        add_naddpcttank(value);
        if (input->ExpectTag(16)) goto parse_nAddPctTank;
        if (input->ExpectTag(24)) goto parse_nAddPctPlane;
        break;
      }
      
      // repeated int32 nAddPctPlane = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_nAddPctPlane:
        ::google::protobuf::int32 value;
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &value));
        add_naddpctplane(value);
        if (input->ExpectTag(24)) goto parse_nAddPctPlane;
        if (input->ExpectTag(32)) goto parse_nAddPctBuild;
        break;
      }
      
      // repeated int32 nAddPctBuild = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_nAddPctBuild:
        ::google::protobuf::int32 value;
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &value));
        add_naddpctbuild(value);
        if (input->ExpectTag(32)) goto parse_nAddPctBuild;
        if (input->ExpectTag(42)) goto parse_fightGeneral;
        break;
      }
      
      // optional .DB_C_GuildBtlGeneral fightGeneral = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_fightGeneral:
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
             input, mutable_fightgeneral()));
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DB_C_GuildBtlAdmiralAdd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    DB_C_GuildBtlAdmiralAdd::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // repeated int32 nAddPctFoot = 1;
  for (int i = 0; i < this->naddpctfoot_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      1, this->naddpctfoot(i), output);
  }
  
  // repeated int32 nAddPctTank = 2;
  for (int i = 0; i < this->naddpcttank_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      2, this->naddpcttank(i), output);
  }
  
  // repeated int32 nAddPctPlane = 3;
  for (int i = 0; i < this->naddpctplane_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      3, this->naddpctplane(i), output);
  }
  
  // repeated int32 nAddPctBuild = 4;
  for (int i = 0; i < this->naddpctbuild_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      4, this->naddpctbuild(i), output);
  }
  
  // optional .DB_C_GuildBtlGeneral fightGeneral = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      5, this->fightgeneral(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DB_C_GuildBtlAdmiralAdd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated int32 nAddPctFoot = 1;
  for (int i = 0; i < this->naddpctfoot_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(1, this->naddpctfoot(i), target);
  }
  
  // repeated int32 nAddPctTank = 2;
  for (int i = 0; i < this->naddpcttank_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(2, this->naddpcttank(i), target);
  }
  
  // repeated int32 nAddPctPlane = 3;
  for (int i = 0; i < this->naddpctplane_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(3, this->naddpctplane(i), target);
  }
  
  // repeated int32 nAddPctBuild = 4;
  for (int i = 0; i < this->naddpctbuild_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(4, this->naddpctbuild(i), target);
  }
  
  // optional .DB_C_GuildBtlGeneral fightGeneral = 5;
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->fightgeneral(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DB_C_GuildBtlAdmiralAdd::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[4 / 32] & (0xffu << (4 % 32))) {
    // optional .DB_C_GuildBtlGeneral fightGeneral = 5;
    if (has_fightgeneral()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->fightgeneral());
    }
    
  }
  // repeated int32 nAddPctFoot = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->naddpctfoot_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->naddpctfoot(i));
    }
    total_size += 1 * this->naddpctfoot_size() + data_size;
  }
  
  // repeated int32 nAddPctTank = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->naddpcttank_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->naddpcttank(i));
    }
    total_size += 1 * this->naddpcttank_size() + data_size;
  }
  
  // repeated int32 nAddPctPlane = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->naddpctplane_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->naddpctplane(i));
    }
    total_size += 1 * this->naddpctplane_size() + data_size;
  }
  
  // repeated int32 nAddPctBuild = 4;
  {
    int data_size = 0;
    for (int i = 0; i < this->naddpctbuild_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->naddpctbuild(i));
    }
    total_size += 1 * this->naddpctbuild_size() + data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void DB_C_GuildBtlAdmiralAdd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DB_C_GuildBtlAdmiralAdd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DB_C_GuildBtlAdmiralAdd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DB_C_GuildBtlAdmiralAdd::MergeFrom(const DB_C_GuildBtlAdmiralAdd& from) {
  GOOGLE_CHECK_NE(&from, this);
  naddpctfoot_.MergeFrom(from.naddpctfoot_);
  naddpcttank_.MergeFrom(from.naddpcttank_);
  naddpctplane_.MergeFrom(from.naddpctplane_);
  naddpctbuild_.MergeFrom(from.naddpctbuild_);
  if (from._has_bits_[4 / 32] & (0xffu << (4 % 32))) {
    if (from._has_bit(4)) {
      mutable_fightgeneral()->::DB_C_GuildBtlGeneral::MergeFrom(from.fightgeneral());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DB_C_GuildBtlAdmiralAdd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DB_C_GuildBtlAdmiralAdd::CopyFrom(const DB_C_GuildBtlAdmiralAdd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DB_C_GuildBtlAdmiralAdd::IsInitialized() const {
  
  return true;
}

void DB_C_GuildBtlAdmiralAdd::Swap(DB_C_GuildBtlAdmiralAdd* other) {
  if (other != this) {
    naddpctfoot_.Swap(&other->naddpctfoot_);
    naddpcttank_.Swap(&other->naddpcttank_);
    naddpctplane_.Swap(&other->naddpctplane_);
    naddpctbuild_.Swap(&other->naddpctbuild_);
    std::swap(fightgeneral_, other->fightgeneral_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DB_C_GuildBtlAdmiralAdd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DB_C_GuildBtlAdmiralAdd_descriptor_;
  metadata.reflection = DB_C_GuildBtlAdmiralAdd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Pve_GuildBtlHeroSkill::kHeroIdFieldNumber;
const int Pve_GuildBtlHeroSkill::kLevelFieldNumber;
const int Pve_GuildBtlHeroSkill::kSkillID1FieldNumber;
const int Pve_GuildBtlHeroSkill::kSkill1GradeFieldNumber;
const int Pve_GuildBtlHeroSkill::kSkill1QualityFieldNumber;
const int Pve_GuildBtlHeroSkill::kSkillID2FieldNumber;
const int Pve_GuildBtlHeroSkill::kSkill2GradeFieldNumber;
const int Pve_GuildBtlHeroSkill::kSkill2QualityFieldNumber;
#endif  // !_MSC_VER

Pve_GuildBtlHeroSkill::Pve_GuildBtlHeroSkill() {
  SharedCtor();
}

void Pve_GuildBtlHeroSkill::InitAsDefaultInstance() {
}

Pve_GuildBtlHeroSkill::Pve_GuildBtlHeroSkill(const Pve_GuildBtlHeroSkill& from) {
  SharedCtor();
  MergeFrom(from);
}

void Pve_GuildBtlHeroSkill::SharedCtor() {
  _cached_size_ = 0;
  heroid_ = 0;
  level_ = 0;
  skillid1_ = 0;
  skill1grade_ = 0;
  skill1quality_ = 0;
  skillid2_ = 0;
  skill2grade_ = 0;
  skill2quality_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Pve_GuildBtlHeroSkill::~Pve_GuildBtlHeroSkill() {
  SharedDtor();
}

void Pve_GuildBtlHeroSkill::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* Pve_GuildBtlHeroSkill::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Pve_GuildBtlHeroSkill_descriptor_;
}

const Pve_GuildBtlHeroSkill& Pve_GuildBtlHeroSkill::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_countryDB_2eproto();  return *default_instance_;
}

Pve_GuildBtlHeroSkill* Pve_GuildBtlHeroSkill::default_instance_ = NULL;

Pve_GuildBtlHeroSkill* Pve_GuildBtlHeroSkill::New() const {
  return new Pve_GuildBtlHeroSkill;
}

void Pve_GuildBtlHeroSkill::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    heroid_ = 0;
    level_ = 0;
    skillid1_ = 0;
    skill1grade_ = 0;
    skill1quality_ = 0;
    skillid2_ = 0;
    skill2grade_ = 0;
    skill2quality_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Pve_GuildBtlHeroSkill::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 heroId = 1 [default = 0];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &heroid_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_level;
        break;
      }
      
      // optional int32 level = 2 [default = 0];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_level:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &level_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_skillID1;
        break;
      }
      
      // optional int32 skillID1 = 3 [default = 0];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_skillID1:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &skillid1_));
        _set_bit(2);
        if (input->ExpectTag(32)) goto parse_skill1Grade;
        break;
      }
      
      // optional int32 skill1Grade = 4 [default = 0];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_skill1Grade:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &skill1grade_));
        _set_bit(3);
        if (input->ExpectTag(40)) goto parse_skill1Quality;
        break;
      }
      
      // optional int32 skill1Quality = 5 [default = 0];
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_skill1Quality:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &skill1quality_));
        _set_bit(4);
        if (input->ExpectTag(48)) goto parse_skillID2;
        break;
      }
      
      // optional int32 skillID2 = 6 [default = 0];
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_skillID2:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &skillid2_));
        _set_bit(5);
        if (input->ExpectTag(56)) goto parse_skill2Grade;
        break;
      }
      
      // optional int32 skill2Grade = 7 [default = 0];
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_skill2Grade:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &skill2grade_));
        _set_bit(6);
        if (input->ExpectTag(64)) goto parse_skill2Quality;
        break;
      }
      
      // optional int32 skill2Quality = 8 [default = 0];
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_skill2Quality:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &skill2quality_));
        _set_bit(7);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Pve_GuildBtlHeroSkill::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    Pve_GuildBtlHeroSkill::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional int32 heroId = 1 [default = 0];
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->heroid(), output);
  }
  
  // optional int32 level = 2 [default = 0];
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->level(), output);
  }
  
  // optional int32 skillID1 = 3 [default = 0];
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->skillid1(), output);
  }
  
  // optional int32 skill1Grade = 4 [default = 0];
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->skill1grade(), output);
  }
  
  // optional int32 skill1Quality = 5 [default = 0];
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->skill1quality(), output);
  }
  
  // optional int32 skillID2 = 6 [default = 0];
  if (_has_bit(5)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->skillid2(), output);
  }
  
  // optional int32 skill2Grade = 7 [default = 0];
  if (_has_bit(6)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->skill2grade(), output);
  }
  
  // optional int32 skill2Quality = 8 [default = 0];
  if (_has_bit(7)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->skill2quality(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Pve_GuildBtlHeroSkill::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 heroId = 1 [default = 0];
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->heroid(), target);
  }
  
  // optional int32 level = 2 [default = 0];
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->level(), target);
  }
  
  // optional int32 skillID1 = 3 [default = 0];
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->skillid1(), target);
  }
  
  // optional int32 skill1Grade = 4 [default = 0];
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->skill1grade(), target);
  }
  
  // optional int32 skill1Quality = 5 [default = 0];
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->skill1quality(), target);
  }
  
  // optional int32 skillID2 = 6 [default = 0];
  if (_has_bit(5)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->skillid2(), target);
  }
  
  // optional int32 skill2Grade = 7 [default = 0];
  if (_has_bit(6)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->skill2grade(), target);
  }
  
  // optional int32 skill2Quality = 8 [default = 0];
  if (_has_bit(7)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->skill2quality(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Pve_GuildBtlHeroSkill::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 heroId = 1 [default = 0];
    if (has_heroid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->heroid());
    }
    
    // optional int32 level = 2 [default = 0];
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->level());
    }
    
    // optional int32 skillID1 = 3 [default = 0];
    if (has_skillid1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->skillid1());
    }
    
    // optional int32 skill1Grade = 4 [default = 0];
    if (has_skill1grade()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->skill1grade());
    }
    
    // optional int32 skill1Quality = 5 [default = 0];
    if (has_skill1quality()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->skill1quality());
    }
    
    // optional int32 skillID2 = 6 [default = 0];
    if (has_skillid2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->skillid2());
    }
    
    // optional int32 skill2Grade = 7 [default = 0];
    if (has_skill2grade()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->skill2grade());
    }
    
    // optional int32 skill2Quality = 8 [default = 0];
    if (has_skill2quality()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->skill2quality());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void Pve_GuildBtlHeroSkill::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Pve_GuildBtlHeroSkill* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Pve_GuildBtlHeroSkill*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Pve_GuildBtlHeroSkill::MergeFrom(const Pve_GuildBtlHeroSkill& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_heroid(from.heroid());
    }
    if (from._has_bit(1)) {
      set_level(from.level());
    }
    if (from._has_bit(2)) {
      set_skillid1(from.skillid1());
    }
    if (from._has_bit(3)) {
      set_skill1grade(from.skill1grade());
    }
    if (from._has_bit(4)) {
      set_skill1quality(from.skill1quality());
    }
    if (from._has_bit(5)) {
      set_skillid2(from.skillid2());
    }
    if (from._has_bit(6)) {
      set_skill2grade(from.skill2grade());
    }
    if (from._has_bit(7)) {
      set_skill2quality(from.skill2quality());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Pve_GuildBtlHeroSkill::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Pve_GuildBtlHeroSkill::CopyFrom(const Pve_GuildBtlHeroSkill& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Pve_GuildBtlHeroSkill::IsInitialized() const {
  
  return true;
}

void Pve_GuildBtlHeroSkill::Swap(Pve_GuildBtlHeroSkill* other) {
  if (other != this) {
    std::swap(heroid_, other->heroid_);
    std::swap(level_, other->level_);
    std::swap(skillid1_, other->skillid1_);
    std::swap(skill1grade_, other->skill1grade_);
    std::swap(skill1quality_, other->skill1quality_);
    std::swap(skillid2_, other->skillid2_);
    std::swap(skill2grade_, other->skill2grade_);
    std::swap(skill2quality_, other->skill2quality_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Pve_GuildBtlHeroSkill::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Pve_GuildBtlHeroSkill_descriptor_;
  metadata.reflection = Pve_GuildBtlHeroSkill_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DB_C_GuildBtlSendDataUnit::kPvecarmyatkpropFieldNumber;
const int DB_C_GuildBtlSendDataUnit::kPvefightunitFieldNumber;
const int DB_C_GuildBtlSendDataUnit::kPvefightadmiralFieldNumber;
const int DB_C_GuildBtlSendDataUnit::kPvefightheroskillFieldNumber;
const int DB_C_GuildBtlSendDataUnit::kNReduceSpeedFieldNumber;
#endif  // !_MSC_VER

DB_C_GuildBtlSendDataUnit::DB_C_GuildBtlSendDataUnit() {
  SharedCtor();
}

void DB_C_GuildBtlSendDataUnit::InitAsDefaultInstance() {
  pvefightadmiral_ = const_cast< ::DB_C_GuildBtlAdmiralAdd*>(&::DB_C_GuildBtlAdmiralAdd::default_instance());
  pvefightheroskill_ = const_cast< ::Pve_GuildBtlHeroSkill*>(&::Pve_GuildBtlHeroSkill::default_instance());
}

DB_C_GuildBtlSendDataUnit::DB_C_GuildBtlSendDataUnit(const DB_C_GuildBtlSendDataUnit& from) {
  SharedCtor();
  MergeFrom(from);
}

void DB_C_GuildBtlSendDataUnit::SharedCtor() {
  _cached_size_ = 0;
  pvefightadmiral_ = NULL;
  pvefightheroskill_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DB_C_GuildBtlSendDataUnit::~DB_C_GuildBtlSendDataUnit() {
  SharedDtor();
}

void DB_C_GuildBtlSendDataUnit::SharedDtor() {
  if (this != default_instance_) {
    delete pvefightadmiral_;
    delete pvefightheroskill_;
  }
}

const ::google::protobuf::Descriptor* DB_C_GuildBtlSendDataUnit::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DB_C_GuildBtlSendDataUnit_descriptor_;
}

const DB_C_GuildBtlSendDataUnit& DB_C_GuildBtlSendDataUnit::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_countryDB_2eproto();  return *default_instance_;
}

DB_C_GuildBtlSendDataUnit* DB_C_GuildBtlSendDataUnit::default_instance_ = NULL;

DB_C_GuildBtlSendDataUnit* DB_C_GuildBtlSendDataUnit::New() const {
  return new DB_C_GuildBtlSendDataUnit;
}

void DB_C_GuildBtlSendDataUnit::Clear() {
  if (_has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    if (_has_bit(2)) {
      if (pvefightadmiral_ != NULL) pvefightadmiral_->::DB_C_GuildBtlAdmiralAdd::Clear();
    }
    if (_has_bit(3)) {
      if (pvefightheroskill_ != NULL) pvefightheroskill_->::Pve_GuildBtlHeroSkill::Clear();
    }
  }
  pvecarmyatkprop_.Clear();
  pvefightunit_.Clear();
  nreducespeed_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DB_C_GuildBtlSendDataUnit::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .DB_C_GuildBtlArmyAtkProp pvecarmyatkprop = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_pvecarmyatkprop:
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, add_pvecarmyatkprop()));
        if (input->ExpectTag(10)) goto parse_pvecarmyatkprop;
        if (input->ExpectTag(18)) goto parse_pvefightunit;
        break;
      }
      
      // repeated .DB_C_GuildBtlFightUnit pvefightunit = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_pvefightunit:
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, add_pvefightunit()));
        if (input->ExpectTag(18)) goto parse_pvefightunit;
        if (input->ExpectTag(26)) goto parse_pvefightadmiral;
        break;
      }
      
      // optional .DB_C_GuildBtlAdmiralAdd pvefightadmiral = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_pvefightadmiral:
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
             input, mutable_pvefightadmiral()));
        if (input->ExpectTag(34)) goto parse_pvefightheroskill;
        break;
      }
      
      // optional .Pve_GuildBtlHeroSkill pvefightheroskill = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_pvefightheroskill:
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
             input, mutable_pvefightheroskill()));
        if (input->ExpectTag(40)) goto parse_nReduceSpeed;
        break;
      }
      
      // repeated int32 nReduceSpeed = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_nReduceSpeed:
        ::google::protobuf::int32 value;
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &value));
        add_nreducespeed(value);
        if (input->ExpectTag(40)) goto parse_nReduceSpeed;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DB_C_GuildBtlSendDataUnit::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    DB_C_GuildBtlSendDataUnit::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // repeated .DB_C_GuildBtlArmyAtkProp pvecarmyatkprop = 1;
  for (int i = 0; i < this->pvecarmyatkprop_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      1, this->pvecarmyatkprop(i), output);
  }
  
  // repeated .DB_C_GuildBtlFightUnit pvefightunit = 2;
  for (int i = 0; i < this->pvefightunit_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      2, this->pvefightunit(i), output);
  }
  
  // optional .DB_C_GuildBtlAdmiralAdd pvefightadmiral = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      3, this->pvefightadmiral(), output);
  }
  
  // optional .Pve_GuildBtlHeroSkill pvefightheroskill = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      4, this->pvefightheroskill(), output);
  }
  
  // repeated int32 nReduceSpeed = 5;
  for (int i = 0; i < this->nreducespeed_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      5, this->nreducespeed(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DB_C_GuildBtlSendDataUnit::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .DB_C_GuildBtlArmyAtkProp pvecarmyatkprop = 1;
  for (int i = 0; i < this->pvecarmyatkprop_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->pvecarmyatkprop(i), target);
  }
  
  // repeated .DB_C_GuildBtlFightUnit pvefightunit = 2;
  for (int i = 0; i < this->pvefightunit_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->pvefightunit(i), target);
  }
  
  // optional .DB_C_GuildBtlAdmiralAdd pvefightadmiral = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->pvefightadmiral(), target);
  }
  
  // optional .Pve_GuildBtlHeroSkill pvefightheroskill = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->pvefightheroskill(), target);
  }
  
  // repeated int32 nReduceSpeed = 5;
  for (int i = 0; i < this->nreducespeed_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(5, this->nreducespeed(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DB_C_GuildBtlSendDataUnit::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    // optional .DB_C_GuildBtlAdmiralAdd pvefightadmiral = 3;
    if (has_pvefightadmiral()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->pvefightadmiral());
    }
    
    // optional .Pve_GuildBtlHeroSkill pvefightheroskill = 4;
    if (has_pvefightheroskill()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->pvefightheroskill());
    }
    
  }
  // repeated .DB_C_GuildBtlArmyAtkProp pvecarmyatkprop = 1;
  total_size += 1 * this->pvecarmyatkprop_size();
  for (int i = 0; i < this->pvecarmyatkprop_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->pvecarmyatkprop(i));
  }
  
  // repeated .DB_C_GuildBtlFightUnit pvefightunit = 2;
  total_size += 1 * this->pvefightunit_size();
  for (int i = 0; i < this->pvefightunit_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->pvefightunit(i));
  }
  
  // repeated int32 nReduceSpeed = 5;
  {
    int data_size = 0;
    for (int i = 0; i < this->nreducespeed_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->nreducespeed(i));
    }
    total_size += 1 * this->nreducespeed_size() + data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void DB_C_GuildBtlSendDataUnit::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DB_C_GuildBtlSendDataUnit* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DB_C_GuildBtlSendDataUnit*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DB_C_GuildBtlSendDataUnit::MergeFrom(const DB_C_GuildBtlSendDataUnit& from) {
  GOOGLE_CHECK_NE(&from, this);
  pvecarmyatkprop_.MergeFrom(from.pvecarmyatkprop_);
  pvefightunit_.MergeFrom(from.pvefightunit_);
  nreducespeed_.MergeFrom(from.nreducespeed_);
  if (from._has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    if (from._has_bit(2)) {
      mutable_pvefightadmiral()->::DB_C_GuildBtlAdmiralAdd::MergeFrom(from.pvefightadmiral());
    }
    if (from._has_bit(3)) {
      mutable_pvefightheroskill()->::Pve_GuildBtlHeroSkill::MergeFrom(from.pvefightheroskill());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DB_C_GuildBtlSendDataUnit::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DB_C_GuildBtlSendDataUnit::CopyFrom(const DB_C_GuildBtlSendDataUnit& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DB_C_GuildBtlSendDataUnit::IsInitialized() const {
  
  return true;
}

void DB_C_GuildBtlSendDataUnit::Swap(DB_C_GuildBtlSendDataUnit* other) {
  if (other != this) {
    pvecarmyatkprop_.Swap(&other->pvecarmyatkprop_);
    pvefightunit_.Swap(&other->pvefightunit_);
    std::swap(pvefightadmiral_, other->pvefightadmiral_);
    std::swap(pvefightheroskill_, other->pvefightheroskill_);
    nreducespeed_.Swap(&other->nreducespeed_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DB_C_GuildBtlSendDataUnit::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DB_C_GuildBtlSendDataUnit_descriptor_;
  metadata.reflection = DB_C_GuildBtlSendDataUnit_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DB_C_Guild_FightSendData::kBtlUserFieldNumber;
const int DB_C_Guild_FightSendData::kFightsenddataFieldNumber;
#endif  // !_MSC_VER

DB_C_Guild_FightSendData::DB_C_Guild_FightSendData() {
  SharedCtor();
}

void DB_C_Guild_FightSendData::InitAsDefaultInstance() {
  btluser_ = const_cast< ::DB_C_GuildBtlUser*>(&::DB_C_GuildBtlUser::default_instance());
}

DB_C_Guild_FightSendData::DB_C_Guild_FightSendData(const DB_C_Guild_FightSendData& from) {
  SharedCtor();
  MergeFrom(from);
}

void DB_C_Guild_FightSendData::SharedCtor() {
  _cached_size_ = 0;
  btluser_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DB_C_Guild_FightSendData::~DB_C_Guild_FightSendData() {
  SharedDtor();
}

void DB_C_Guild_FightSendData::SharedDtor() {
  if (this != default_instance_) {
    delete btluser_;
  }
}

const ::google::protobuf::Descriptor* DB_C_Guild_FightSendData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DB_C_Guild_FightSendData_descriptor_;
}

const DB_C_Guild_FightSendData& DB_C_Guild_FightSendData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_countryDB_2eproto();  return *default_instance_;
}

DB_C_Guild_FightSendData* DB_C_Guild_FightSendData::default_instance_ = NULL;

DB_C_Guild_FightSendData* DB_C_Guild_FightSendData::New() const {
  return new DB_C_Guild_FightSendData;
}

void DB_C_Guild_FightSendData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (btluser_ != NULL) btluser_->::DB_C_GuildBtlUser::Clear();
    }
  }
  fightsenddata_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DB_C_Guild_FightSendData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .DB_C_GuildBtlUser btlUser = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
             input, mutable_btluser()));
        if (input->ExpectTag(18)) goto parse_fightsenddata;
        break;
      }
      
      // repeated .DB_C_GuildBtlSendDataUnit fightsenddata = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_fightsenddata:
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, add_fightsenddata()));
        if (input->ExpectTag(18)) goto parse_fightsenddata;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DB_C_Guild_FightSendData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    DB_C_Guild_FightSendData::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional .DB_C_GuildBtlUser btlUser = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      1, this->btluser(), output);
  }
  
  // repeated .DB_C_GuildBtlSendDataUnit fightsenddata = 2;
  for (int i = 0; i < this->fightsenddata_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      2, this->fightsenddata(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DB_C_Guild_FightSendData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .DB_C_GuildBtlUser btlUser = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->btluser(), target);
  }
  
  // repeated .DB_C_GuildBtlSendDataUnit fightsenddata = 2;
  for (int i = 0; i < this->fightsenddata_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->fightsenddata(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DB_C_Guild_FightSendData::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .DB_C_GuildBtlUser btlUser = 1;
    if (has_btluser()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->btluser());
    }
    
  }
  // repeated .DB_C_GuildBtlSendDataUnit fightsenddata = 2;
  total_size += 1 * this->fightsenddata_size();
  for (int i = 0; i < this->fightsenddata_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->fightsenddata(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void DB_C_Guild_FightSendData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DB_C_Guild_FightSendData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DB_C_Guild_FightSendData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DB_C_Guild_FightSendData::MergeFrom(const DB_C_Guild_FightSendData& from) {
  GOOGLE_CHECK_NE(&from, this);
  fightsenddata_.MergeFrom(from.fightsenddata_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      mutable_btluser()->::DB_C_GuildBtlUser::MergeFrom(from.btluser());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DB_C_Guild_FightSendData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DB_C_Guild_FightSendData::CopyFrom(const DB_C_Guild_FightSendData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DB_C_Guild_FightSendData::IsInitialized() const {
  
  return true;
}

void DB_C_Guild_FightSendData::Swap(DB_C_Guild_FightSendData* other) {
  if (other != this) {
    std::swap(btluser_, other->btluser_);
    fightsenddata_.Swap(&other->fightsenddata_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DB_C_Guild_FightSendData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DB_C_Guild_FightSendData_descriptor_;
  metadata.reflection = DB_C_Guild_FightSendData_reflection_;
  return metadata;
}


// ===================================================================

const ::std::string DB_C_GuildBtlUserPK::_default_userid1_;
const ::std::string DB_C_GuildBtlUserPK::_default_userid2_;
const ::std::string DB_C_GuildBtlUserPK::_default_winid_;
#ifndef _MSC_VER
const int DB_C_GuildBtlUserPK::kUserID1FieldNumber;
const int DB_C_GuildBtlUserPK::kUserID2FieldNumber;
const int DB_C_GuildBtlUserPK::kWinIDFieldNumber;
const int DB_C_GuildBtlUserPK::kWinLeftHPFieldNumber;
const int DB_C_GuildBtlUserPK::kBStreakLeaveFieldNumber;
#endif  // !_MSC_VER

DB_C_GuildBtlUserPK::DB_C_GuildBtlUserPK() {
  SharedCtor();
}

void DB_C_GuildBtlUserPK::InitAsDefaultInstance() {
}

DB_C_GuildBtlUserPK::DB_C_GuildBtlUserPK(const DB_C_GuildBtlUserPK& from) {
  SharedCtor();
  MergeFrom(from);
}

void DB_C_GuildBtlUserPK::SharedCtor() {
  _cached_size_ = 0;
  userid1_ = const_cast< ::std::string*>(&_default_userid1_);
  userid2_ = const_cast< ::std::string*>(&_default_userid2_);
  winid_ = const_cast< ::std::string*>(&_default_winid_);
  winlefthp_ = 0;
  bstreakleave_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DB_C_GuildBtlUserPK::~DB_C_GuildBtlUserPK() {
  SharedDtor();
}

void DB_C_GuildBtlUserPK::SharedDtor() {
  if (userid1_ != &_default_userid1_) {
    delete userid1_;
  }
  if (userid2_ != &_default_userid2_) {
    delete userid2_;
  }
  if (winid_ != &_default_winid_) {
    delete winid_;
  }
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* DB_C_GuildBtlUserPK::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DB_C_GuildBtlUserPK_descriptor_;
}

const DB_C_GuildBtlUserPK& DB_C_GuildBtlUserPK::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_countryDB_2eproto();  return *default_instance_;
}

DB_C_GuildBtlUserPK* DB_C_GuildBtlUserPK::default_instance_ = NULL;

DB_C_GuildBtlUserPK* DB_C_GuildBtlUserPK::New() const {
  return new DB_C_GuildBtlUserPK;
}

void DB_C_GuildBtlUserPK::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (userid1_ != &_default_userid1_) {
        userid1_->clear();
      }
    }
    if (_has_bit(1)) {
      if (userid2_ != &_default_userid2_) {
        userid2_->clear();
      }
    }
    if (_has_bit(2)) {
      if (winid_ != &_default_winid_) {
        winid_->clear();
      }
    }
    winlefthp_ = 0;
    bstreakleave_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DB_C_GuildBtlUserPK::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string userID1 = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadString(
              input, this->mutable_userid1()));
        ::google::protobuf::internal::WireFormat::VerifyUTF8String(
          this->userid1().data(), this->userid1().length(),
          ::google::protobuf::internal::WireFormat::PARSE);
        if (input->ExpectTag(18)) goto parse_userID2;
        break;
      }
      
      // optional string userID2 = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_userID2:
        DO_(::google::protobuf::internal::WireFormatLite::ReadString(
              input, this->mutable_userid2()));
        ::google::protobuf::internal::WireFormat::VerifyUTF8String(
          this->userid2().data(), this->userid2().length(),
          ::google::protobuf::internal::WireFormat::PARSE);
        if (input->ExpectTag(26)) goto parse_winID;
        break;
      }
      
      // optional string winID = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_winID:
        DO_(::google::protobuf::internal::WireFormatLite::ReadString(
              input, this->mutable_winid()));
        ::google::protobuf::internal::WireFormat::VerifyUTF8String(
          this->winid().data(), this->winid().length(),
          ::google::protobuf::internal::WireFormat::PARSE);
        if (input->ExpectTag(32)) goto parse_winLeftHP;
        break;
      }
      
      // optional int32 winLeftHP = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_winLeftHP:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &winlefthp_));
        _set_bit(3);
        if (input->ExpectTag(40)) goto parse_bStreakLeave;
        break;
      }
      
      // optional bool bStreakLeave = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_bStreakLeave:
        DO_(::google::protobuf::internal::WireFormatLite::ReadBool(
              input, &bstreakleave_));
        _set_bit(4);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DB_C_GuildBtlUserPK::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    DB_C_GuildBtlUserPK::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional string userID1 = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->userid1().data(), this->userid1().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->userid1(), output);
  }
  
  // optional string userID2 = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->userid2().data(), this->userid2().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->userid2(), output);
  }
  
  // optional string winID = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->winid().data(), this->winid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->winid(), output);
  }
  
  // optional int32 winLeftHP = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->winlefthp(), output);
  }
  
  // optional bool bStreakLeave = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->bstreakleave(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DB_C_GuildBtlUserPK::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string userID1 = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->userid1().data(), this->userid1().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->userid1(), target);
  }
  
  // optional string userID2 = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->userid2().data(), this->userid2().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->userid2(), target);
  }
  
  // optional string winID = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->winid().data(), this->winid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->winid(), target);
  }
  
  // optional int32 winLeftHP = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->winlefthp(), target);
  }
  
  // optional bool bStreakLeave = 5;
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->bstreakleave(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DB_C_GuildBtlUserPK::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string userID1 = 1;
    if (has_userid1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->userid1());
    }
    
    // optional string userID2 = 2;
    if (has_userid2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->userid2());
    }
    
    // optional string winID = 3;
    if (has_winid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->winid());
    }
    
    // optional int32 winLeftHP = 4;
    if (has_winlefthp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->winlefthp());
    }
    
    // optional bool bStreakLeave = 5;
    if (has_bstreakleave()) {
      total_size += 1 + 1;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void DB_C_GuildBtlUserPK::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DB_C_GuildBtlUserPK* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DB_C_GuildBtlUserPK*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DB_C_GuildBtlUserPK::MergeFrom(const DB_C_GuildBtlUserPK& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_userid1(from.userid1());
    }
    if (from._has_bit(1)) {
      set_userid2(from.userid2());
    }
    if (from._has_bit(2)) {
      set_winid(from.winid());
    }
    if (from._has_bit(3)) {
      set_winlefthp(from.winlefthp());
    }
    if (from._has_bit(4)) {
      set_bstreakleave(from.bstreakleave());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DB_C_GuildBtlUserPK::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DB_C_GuildBtlUserPK::CopyFrom(const DB_C_GuildBtlUserPK& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DB_C_GuildBtlUserPK::IsInitialized() const {
  
  return true;
}

void DB_C_GuildBtlUserPK::Swap(DB_C_GuildBtlUserPK* other) {
  if (other != this) {
    std::swap(userid1_, other->userid1_);
    std::swap(userid2_, other->userid2_);
    std::swap(winid_, other->winid_);
    std::swap(winlefthp_, other->winlefthp_);
    std::swap(bstreakleave_, other->bstreakleave_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DB_C_GuildBtlUserPK::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DB_C_GuildBtlUserPK_descriptor_;
  metadata.reflection = DB_C_GuildBtlUserPK_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DB_C_GuidlBtlRetWay::kRegionFieldNumber;
const int DB_C_GuidlBtlRetWay::kGuildID1FieldNumber;
const int DB_C_GuidlBtlRetWay::kGuildID2FieldNumber;
const int DB_C_GuidlBtlRetWay::kSessionFieldNumber;
const int DB_C_GuidlBtlRetWay::kWayFieldNumber;
const int DB_C_GuidlBtlRetWay::kWinGuildIDFieldNumber;
const int DB_C_GuidlBtlRetWay::kUserLst1FieldNumber;
const int DB_C_GuidlBtlRetWay::kUserLst2FieldNumber;
const int DB_C_GuidlBtlRetWay::kPkLstFieldNumber;
#endif  // !_MSC_VER

DB_C_GuidlBtlRetWay::DB_C_GuidlBtlRetWay() {
  SharedCtor();
}

void DB_C_GuidlBtlRetWay::InitAsDefaultInstance() {
}

DB_C_GuidlBtlRetWay::DB_C_GuidlBtlRetWay(const DB_C_GuidlBtlRetWay& from) {
  SharedCtor();
  MergeFrom(from);
}

void DB_C_GuidlBtlRetWay::SharedCtor() {
  _cached_size_ = 0;
  region_ = 0;
  guildid1_ = 0;
  guildid2_ = 0;
  session_ = 0;
  way_ = 0;
  winguildid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DB_C_GuidlBtlRetWay::~DB_C_GuidlBtlRetWay() {
  SharedDtor();
}

void DB_C_GuidlBtlRetWay::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* DB_C_GuidlBtlRetWay::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DB_C_GuidlBtlRetWay_descriptor_;
}

const DB_C_GuidlBtlRetWay& DB_C_GuidlBtlRetWay::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_countryDB_2eproto();  return *default_instance_;
}

DB_C_GuidlBtlRetWay* DB_C_GuidlBtlRetWay::default_instance_ = NULL;

DB_C_GuidlBtlRetWay* DB_C_GuidlBtlRetWay::New() const {
  return new DB_C_GuidlBtlRetWay;
}

void DB_C_GuidlBtlRetWay::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    region_ = 0;
    guildid1_ = 0;
    guildid2_ = 0;
    session_ = 0;
    way_ = 0;
    winguildid_ = 0;
  }
  userlst1_.Clear();
  userlst2_.Clear();
  pklst_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DB_C_GuidlBtlRetWay::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 region = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &region_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_guildID1;
        break;
      }
      
      // optional int32 guildID1 = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_guildID1:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &guildid1_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_guildID2;
        break;
      }
      
      // optional int32 guildID2 = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_guildID2:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &guildid2_));
        _set_bit(2);
        if (input->ExpectTag(32)) goto parse_session;
        break;
      }
      
      // optional int32 session = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_session:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &session_));
        _set_bit(3);
        if (input->ExpectTag(40)) goto parse_way;
        break;
      }
      
      // optional int32 way = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_way:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &way_));
        _set_bit(4);
        if (input->ExpectTag(48)) goto parse_winGuildID;
        break;
      }
      
      // optional int32 winGuildID = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_winGuildID:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &winguildid_));
        _set_bit(5);
        if (input->ExpectTag(58)) goto parse_userLst1;
        break;
      }
      
      // repeated .DB_C_GuildBtlUser userLst1 = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_userLst1:
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, add_userlst1()));
        if (input->ExpectTag(58)) goto parse_userLst1;
        if (input->ExpectTag(66)) goto parse_userLst2;
        break;
      }
      
      // repeated .DB_C_GuildBtlUser userLst2 = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_userLst2:
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, add_userlst2()));
        if (input->ExpectTag(66)) goto parse_userLst2;
        if (input->ExpectTag(74)) goto parse_pkLst;
        break;
      }
      
      // repeated .DB_C_GuildBtlUserPK pkLst = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_pkLst:
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, add_pklst()));
        if (input->ExpectTag(74)) goto parse_pkLst;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DB_C_GuidlBtlRetWay::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    DB_C_GuidlBtlRetWay::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional int32 region = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->region(), output);
  }
  
  // optional int32 guildID1 = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->guildid1(), output);
  }
  
  // optional int32 guildID2 = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->guildid2(), output);
  }
  
  // optional int32 session = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->session(), output);
  }
  
  // optional int32 way = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->way(), output);
  }
  
  // optional int32 winGuildID = 6;
  if (_has_bit(5)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->winguildid(), output);
  }
  
  // repeated .DB_C_GuildBtlUser userLst1 = 7;
  for (int i = 0; i < this->userlst1_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      7, this->userlst1(i), output);
  }
  
  // repeated .DB_C_GuildBtlUser userLst2 = 8;
  for (int i = 0; i < this->userlst2_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      8, this->userlst2(i), output);
  }
  
  // repeated .DB_C_GuildBtlUserPK pkLst = 9;
  for (int i = 0; i < this->pklst_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      9, this->pklst(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DB_C_GuidlBtlRetWay::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 region = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->region(), target);
  }
  
  // optional int32 guildID1 = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->guildid1(), target);
  }
  
  // optional int32 guildID2 = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->guildid2(), target);
  }
  
  // optional int32 session = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->session(), target);
  }
  
  // optional int32 way = 5;
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->way(), target);
  }
  
  // optional int32 winGuildID = 6;
  if (_has_bit(5)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->winguildid(), target);
  }
  
  // repeated .DB_C_GuildBtlUser userLst1 = 7;
  for (int i = 0; i < this->userlst1_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->userlst1(i), target);
  }
  
  // repeated .DB_C_GuildBtlUser userLst2 = 8;
  for (int i = 0; i < this->userlst2_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->userlst2(i), target);
  }
  
  // repeated .DB_C_GuildBtlUserPK pkLst = 9;
  for (int i = 0; i < this->pklst_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->pklst(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DB_C_GuidlBtlRetWay::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 region = 1;
    if (has_region()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->region());
    }
    
    // optional int32 guildID1 = 2;
    if (has_guildid1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->guildid1());
    }
    
    // optional int32 guildID2 = 3;
    if (has_guildid2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->guildid2());
    }
    
    // optional int32 session = 4;
    if (has_session()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->session());
    }
    
    // optional int32 way = 5;
    if (has_way()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->way());
    }
    
    // optional int32 winGuildID = 6;
    if (has_winguildid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->winguildid());
    }
    
  }
  // repeated .DB_C_GuildBtlUser userLst1 = 7;
  total_size += 1 * this->userlst1_size();
  for (int i = 0; i < this->userlst1_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->userlst1(i));
  }
  
  // repeated .DB_C_GuildBtlUser userLst2 = 8;
  total_size += 1 * this->userlst2_size();
  for (int i = 0; i < this->userlst2_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->userlst2(i));
  }
  
  // repeated .DB_C_GuildBtlUserPK pkLst = 9;
  total_size += 1 * this->pklst_size();
  for (int i = 0; i < this->pklst_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->pklst(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void DB_C_GuidlBtlRetWay::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DB_C_GuidlBtlRetWay* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DB_C_GuidlBtlRetWay*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DB_C_GuidlBtlRetWay::MergeFrom(const DB_C_GuidlBtlRetWay& from) {
  GOOGLE_CHECK_NE(&from, this);
  userlst1_.MergeFrom(from.userlst1_);
  userlst2_.MergeFrom(from.userlst2_);
  pklst_.MergeFrom(from.pklst_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_region(from.region());
    }
    if (from._has_bit(1)) {
      set_guildid1(from.guildid1());
    }
    if (from._has_bit(2)) {
      set_guildid2(from.guildid2());
    }
    if (from._has_bit(3)) {
      set_session(from.session());
    }
    if (from._has_bit(4)) {
      set_way(from.way());
    }
    if (from._has_bit(5)) {
      set_winguildid(from.winguildid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DB_C_GuidlBtlRetWay::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DB_C_GuidlBtlRetWay::CopyFrom(const DB_C_GuidlBtlRetWay& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DB_C_GuidlBtlRetWay::IsInitialized() const {
  
  return true;
}

void DB_C_GuidlBtlRetWay::Swap(DB_C_GuidlBtlRetWay* other) {
  if (other != this) {
    std::swap(region_, other->region_);
    std::swap(guildid1_, other->guildid1_);
    std::swap(guildid2_, other->guildid2_);
    std::swap(session_, other->session_);
    std::swap(way_, other->way_);
    std::swap(winguildid_, other->winguildid_);
    userlst1_.Swap(&other->userlst1_);
    userlst2_.Swap(&other->userlst2_);
    pklst_.Swap(&other->pklst_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DB_C_GuidlBtlRetWay::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DB_C_GuidlBtlRetWay_descriptor_;
  metadata.reflection = DB_C_GuidlBtlRetWay_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DB_GVE_City::kNpcFieldNumber;
const int DB_GVE_City::kFlagFieldNumber;
const int DB_GVE_City::kBuffListFieldNumber;
const int DB_GVE_City::kNowListFieldNumber;
const int DB_GVE_City::kLastListFieldNumber;
const int DB_GVE_City::kNowMsgFieldNumber;
const int DB_GVE_City::kLastMsgFieldNumber;
const int DB_GVE_City::kHighestMsgFieldNumber;
const int DB_GVE_City::kPlayerListFieldNumber;
const int DB_GVE_City::kLastRefreshTimeFieldNumber;
const int DB_GVE_City::kSpNpcFieldNumber;
#endif  // !_MSC_VER

DB_GVE_City::DB_GVE_City() {
  SharedCtor();
}

void DB_GVE_City::InitAsDefaultInstance() {
  nowmsg_ = const_cast< ::DB_GVE_Msg*>(&::DB_GVE_Msg::default_instance());
  lastmsg_ = const_cast< ::DB_GVE_Msg*>(&::DB_GVE_Msg::default_instance());
  highestmsg_ = const_cast< ::DB_GVE_Msg*>(&::DB_GVE_Msg::default_instance());
}

DB_GVE_City::DB_GVE_City(const DB_GVE_City& from) {
  SharedCtor();
  MergeFrom(from);
}

void DB_GVE_City::SharedCtor() {
  _cached_size_ = 0;
  flag_ = 0;
  nowmsg_ = NULL;
  lastmsg_ = NULL;
  highestmsg_ = NULL;
  lastrefreshtime_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DB_GVE_City::~DB_GVE_City() {
  SharedDtor();
}

void DB_GVE_City::SharedDtor() {
  if (this != default_instance_) {
    delete nowmsg_;
    delete lastmsg_;
    delete highestmsg_;
  }
}

const ::google::protobuf::Descriptor* DB_GVE_City::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DB_GVE_City_descriptor_;
}

const DB_GVE_City& DB_GVE_City::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_countryDB_2eproto();  return *default_instance_;
}

DB_GVE_City* DB_GVE_City::default_instance_ = NULL;

DB_GVE_City* DB_GVE_City::New() const {
  return new DB_GVE_City;
}

void DB_GVE_City::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    flag_ = 0;
    if (_has_bit(5)) {
      if (nowmsg_ != NULL) nowmsg_->::DB_GVE_Msg::Clear();
    }
    if (_has_bit(6)) {
      if (lastmsg_ != NULL) lastmsg_->::DB_GVE_Msg::Clear();
    }
    if (_has_bit(7)) {
      if (highestmsg_ != NULL) highestmsg_->::DB_GVE_Msg::Clear();
    }
  }
  if (_has_bits_[9 / 32] & (0xffu << (9 % 32))) {
    lastrefreshtime_ = 0;
  }
  npc_.Clear();
  bufflist_.Clear();
  nowlist_.Clear();
  lastlist_.Clear();
  playerlist_.Clear();
  spnpc_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DB_GVE_City::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .DB_C_NPC npc = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_npc:
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, add_npc()));
        if (input->ExpectTag(10)) goto parse_npc;
        if (input->ExpectTag(16)) goto parse_flag;
        break;
      }
      
      // optional int32 flag = 2 [default = 0];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_flag:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &flag_));
        _set_bit(1);
        if (input->ExpectTag(26)) goto parse_buffList;
        break;
      }
      
      // repeated .DB_GVE_Buff buffList = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_buffList:
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, add_bufflist()));
        if (input->ExpectTag(26)) goto parse_buffList;
        if (input->ExpectTag(42)) goto parse_nowList;
        break;
      }
      
      // repeated .DB_GVE_List nowList = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_nowList:
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, add_nowlist()));
        if (input->ExpectTag(42)) goto parse_nowList;
        if (input->ExpectTag(50)) goto parse_LastList;
        break;
      }
      
      // repeated .DB_GVE_List LastList = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_LastList:
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, add_lastlist()));
        if (input->ExpectTag(50)) goto parse_LastList;
        if (input->ExpectTag(58)) goto parse_nowMsg;
        break;
      }
      
      // optional .DB_GVE_Msg nowMsg = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_nowMsg:
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
             input, mutable_nowmsg()));
        if (input->ExpectTag(66)) goto parse_lastMsg;
        break;
      }
      
      // optional .DB_GVE_Msg lastMsg = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_lastMsg:
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
             input, mutable_lastmsg()));
        if (input->ExpectTag(74)) goto parse_HighestMsg;
        break;
      }
      
      // optional .DB_GVE_Msg HighestMsg = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_HighestMsg:
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
             input, mutable_highestmsg()));
        if (input->ExpectTag(80)) goto parse_playerList;
        break;
      }
      
      // repeated int64 playerList = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_playerList:
        ::google::protobuf::int64 value;
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt64(
              input, &value));
        add_playerlist(value);
        if (input->ExpectTag(80)) goto parse_playerList;
        if (input->ExpectTag(88)) goto parse_lastRefreshTime;
        break;
      }
      
      // optional int32 lastRefreshTime = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_lastRefreshTime:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &lastrefreshtime_));
        _set_bit(9);
        if (input->ExpectTag(98)) goto parse_spNpc;
        break;
      }
      
      // repeated .DB_C_NPC spNpc = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_spNpc:
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, add_spnpc()));
        if (input->ExpectTag(98)) goto parse_spNpc;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DB_GVE_City::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    DB_GVE_City::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // repeated .DB_C_NPC npc = 1;
  for (int i = 0; i < this->npc_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      1, this->npc(i), output);
  }
  
  // optional int32 flag = 2 [default = 0];
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->flag(), output);
  }
  
  // repeated .DB_GVE_Buff buffList = 3;
  for (int i = 0; i < this->bufflist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      3, this->bufflist(i), output);
  }
  
  // repeated .DB_GVE_List nowList = 5;
  for (int i = 0; i < this->nowlist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      5, this->nowlist(i), output);
  }
  
  // repeated .DB_GVE_List LastList = 6;
  for (int i = 0; i < this->lastlist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      6, this->lastlist(i), output);
  }
  
  // optional .DB_GVE_Msg nowMsg = 7;
  if (_has_bit(5)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      7, this->nowmsg(), output);
  }
  
  // optional .DB_GVE_Msg lastMsg = 8;
  if (_has_bit(6)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      8, this->lastmsg(), output);
  }
  
  // optional .DB_GVE_Msg HighestMsg = 9;
  if (_has_bit(7)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      9, this->highestmsg(), output);
  }
  
  // repeated int64 playerList = 10;
  for (int i = 0; i < this->playerlist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(
      10, this->playerlist(i), output);
  }
  
  // optional int32 lastRefreshTime = 11;
  if (_has_bit(9)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->lastrefreshtime(), output);
  }
  
  // repeated .DB_C_NPC spNpc = 12;
  for (int i = 0; i < this->spnpc_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      12, this->spnpc(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DB_GVE_City::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .DB_C_NPC npc = 1;
  for (int i = 0; i < this->npc_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->npc(i), target);
  }
  
  // optional int32 flag = 2 [default = 0];
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->flag(), target);
  }
  
  // repeated .DB_GVE_Buff buffList = 3;
  for (int i = 0; i < this->bufflist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->bufflist(i), target);
  }
  
  // repeated .DB_GVE_List nowList = 5;
  for (int i = 0; i < this->nowlist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->nowlist(i), target);
  }
  
  // repeated .DB_GVE_List LastList = 6;
  for (int i = 0; i < this->lastlist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->lastlist(i), target);
  }
  
  // optional .DB_GVE_Msg nowMsg = 7;
  if (_has_bit(5)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->nowmsg(), target);
  }
  
  // optional .DB_GVE_Msg lastMsg = 8;
  if (_has_bit(6)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->lastmsg(), target);
  }
  
  // optional .DB_GVE_Msg HighestMsg = 9;
  if (_has_bit(7)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->highestmsg(), target);
  }
  
  // repeated int64 playerList = 10;
  for (int i = 0; i < this->playerlist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt64ToArray(10, this->playerlist(i), target);
  }
  
  // optional int32 lastRefreshTime = 11;
  if (_has_bit(9)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->lastrefreshtime(), target);
  }
  
  // repeated .DB_C_NPC spNpc = 12;
  for (int i = 0; i < this->spnpc_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        12, this->spnpc(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DB_GVE_City::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional int32 flag = 2 [default = 0];
    if (has_flag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->flag());
    }
    
    // optional .DB_GVE_Msg nowMsg = 7;
    if (has_nowmsg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->nowmsg());
    }
    
    // optional .DB_GVE_Msg lastMsg = 8;
    if (has_lastmsg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->lastmsg());
    }
    
    // optional .DB_GVE_Msg HighestMsg = 9;
    if (has_highestmsg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->highestmsg());
    }
    
  }
  if (_has_bits_[9 / 32] & (0xffu << (9 % 32))) {
    // optional int32 lastRefreshTime = 11;
    if (has_lastrefreshtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->lastrefreshtime());
    }
    
  }
  // repeated .DB_C_NPC npc = 1;
  total_size += 1 * this->npc_size();
  for (int i = 0; i < this->npc_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->npc(i));
  }
  
  // repeated .DB_GVE_Buff buffList = 3;
  total_size += 1 * this->bufflist_size();
  for (int i = 0; i < this->bufflist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->bufflist(i));
  }
  
  // repeated .DB_GVE_List nowList = 5;
  total_size += 1 * this->nowlist_size();
  for (int i = 0; i < this->nowlist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->nowlist(i));
  }
  
  // repeated .DB_GVE_List LastList = 6;
  total_size += 1 * this->lastlist_size();
  for (int i = 0; i < this->lastlist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->lastlist(i));
  }
  
  // repeated int64 playerList = 10;
  {
    int data_size = 0;
    for (int i = 0; i < this->playerlist_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int64Size(this->playerlist(i));
    }
    total_size += 1 * this->playerlist_size() + data_size;
  }
  
  // repeated .DB_C_NPC spNpc = 12;
  total_size += 1 * this->spnpc_size();
  for (int i = 0; i < this->spnpc_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->spnpc(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void DB_GVE_City::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DB_GVE_City* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DB_GVE_City*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DB_GVE_City::MergeFrom(const DB_GVE_City& from) {
  GOOGLE_CHECK_NE(&from, this);
  npc_.MergeFrom(from.npc_);
  bufflist_.MergeFrom(from.bufflist_);
  nowlist_.MergeFrom(from.nowlist_);
  lastlist_.MergeFrom(from.lastlist_);
  playerlist_.MergeFrom(from.playerlist_);
  spnpc_.MergeFrom(from.spnpc_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from._has_bit(1)) {
      set_flag(from.flag());
    }
    if (from._has_bit(5)) {
      mutable_nowmsg()->::DB_GVE_Msg::MergeFrom(from.nowmsg());
    }
    if (from._has_bit(6)) {
      mutable_lastmsg()->::DB_GVE_Msg::MergeFrom(from.lastmsg());
    }
    if (from._has_bit(7)) {
      mutable_highestmsg()->::DB_GVE_Msg::MergeFrom(from.highestmsg());
    }
  }
  if (from._has_bits_[9 / 32] & (0xffu << (9 % 32))) {
    if (from._has_bit(9)) {
      set_lastrefreshtime(from.lastrefreshtime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DB_GVE_City::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DB_GVE_City::CopyFrom(const DB_GVE_City& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DB_GVE_City::IsInitialized() const {
  
  return true;
}

void DB_GVE_City::Swap(DB_GVE_City* other) {
  if (other != this) {
    npc_.Swap(&other->npc_);
    std::swap(flag_, other->flag_);
    bufflist_.Swap(&other->bufflist_);
    nowlist_.Swap(&other->nowlist_);
    lastlist_.Swap(&other->lastlist_);
    std::swap(nowmsg_, other->nowmsg_);
    std::swap(lastmsg_, other->lastmsg_);
    std::swap(highestmsg_, other->highestmsg_);
    playerlist_.Swap(&other->playerlist_);
    std::swap(lastrefreshtime_, other->lastrefreshtime_);
    spnpc_.Swap(&other->spnpc_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DB_GVE_City::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DB_GVE_City_descriptor_;
  metadata.reflection = DB_GVE_City_reflection_;
  return metadata;
}


// ===================================================================

const ::std::string DB_GVE_List::_default_uid_;
const ::std::string DB_GVE_List::_default_name_;
#ifndef _MSC_VER
const int DB_GVE_List::kUidFieldNumber;
const int DB_GVE_List::kNameFieldNumber;
const int DB_GVE_List::kGvePointFieldNumber;
const int DB_GVE_List::kLevelFieldNumber;
const int DB_GVE_List::kOfficerPositionFieldNumber;
const int DB_GVE_List::kVipTypeFieldNumber;
const int DB_GVE_List::kVipLevelFieldNumber;
#endif  // !_MSC_VER

DB_GVE_List::DB_GVE_List() {
  SharedCtor();
}

void DB_GVE_List::InitAsDefaultInstance() {
}

DB_GVE_List::DB_GVE_List(const DB_GVE_List& from) {
  SharedCtor();
  MergeFrom(from);
}

void DB_GVE_List::SharedCtor() {
  _cached_size_ = 0;
  uid_ = const_cast< ::std::string*>(&_default_uid_);
  name_ = const_cast< ::std::string*>(&_default_name_);
  gvepoint_ = 0;
  level_ = 0;
  officerposition_ = 0;
  viptype_ = 0;
  viplevel_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DB_GVE_List::~DB_GVE_List() {
  SharedDtor();
}

void DB_GVE_List::SharedDtor() {
  if (uid_ != &_default_uid_) {
    delete uid_;
  }
  if (name_ != &_default_name_) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* DB_GVE_List::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DB_GVE_List_descriptor_;
}

const DB_GVE_List& DB_GVE_List::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_countryDB_2eproto();  return *default_instance_;
}

DB_GVE_List* DB_GVE_List::default_instance_ = NULL;

DB_GVE_List* DB_GVE_List::New() const {
  return new DB_GVE_List;
}

void DB_GVE_List::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (uid_ != &_default_uid_) {
        uid_->clear();
      }
    }
    if (_has_bit(1)) {
      if (name_ != &_default_name_) {
        name_->clear();
      }
    }
    gvepoint_ = 0;
    level_ = 0;
    officerposition_ = 0;
    viptype_ = 0;
    viplevel_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DB_GVE_List::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string uid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadString(
              input, this->mutable_uid()));
        ::google::protobuf::internal::WireFormat::VerifyUTF8String(
          this->uid().data(), this->uid().length(),
          ::google::protobuf::internal::WireFormat::PARSE);
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }
      
      // optional string name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_name:
        DO_(::google::protobuf::internal::WireFormatLite::ReadString(
              input, this->mutable_name()));
        ::google::protobuf::internal::WireFormat::VerifyUTF8String(
          this->name().data(), this->name().length(),
          ::google::protobuf::internal::WireFormat::PARSE);
        if (input->ExpectTag(24)) goto parse_gvePoint;
        break;
      }
      
      // optional int32 gvePoint = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_gvePoint:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &gvepoint_));
        _set_bit(2);
        if (input->ExpectTag(32)) goto parse_level;
        break;
      }
      
      // optional int32 level = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_level:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &level_));
        _set_bit(3);
        if (input->ExpectTag(40)) goto parse_officerPosition;
        break;
      }
      
      // optional int32 officerPosition = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_officerPosition:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &officerposition_));
        _set_bit(4);
        if (input->ExpectTag(48)) goto parse_vipType;
        break;
      }
      
      // optional int32 vipType = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_vipType:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &viptype_));
        _set_bit(5);
        if (input->ExpectTag(56)) goto parse_vipLevel;
        break;
      }
      
      // optional int32 vipLevel = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_vipLevel:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &viplevel_));
        _set_bit(6);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DB_GVE_List::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    DB_GVE_List::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional string uid = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->uid().data(), this->uid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->uid(), output);
  }
  
  // optional string name = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->name(), output);
  }
  
  // optional int32 gvePoint = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->gvepoint(), output);
  }
  
  // optional int32 level = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->level(), output);
  }
  
  // optional int32 officerPosition = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->officerposition(), output);
  }
  
  // optional int32 vipType = 6;
  if (_has_bit(5)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->viptype(), output);
  }
  
  // optional int32 vipLevel = 7;
  if (_has_bit(6)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->viplevel(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DB_GVE_List::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string uid = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->uid().data(), this->uid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->uid(), target);
  }
  
  // optional string name = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }
  
  // optional int32 gvePoint = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->gvepoint(), target);
  }
  
  // optional int32 level = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->level(), target);
  }
  
  // optional int32 officerPosition = 5;
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->officerposition(), target);
  }
  
  // optional int32 vipType = 6;
  if (_has_bit(5)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->viptype(), target);
  }
  
  // optional int32 vipLevel = 7;
  if (_has_bit(6)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->viplevel(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DB_GVE_List::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string uid = 1;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->uid());
    }
    
    // optional string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }
    
    // optional int32 gvePoint = 3;
    if (has_gvepoint()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gvepoint());
    }
    
    // optional int32 level = 4;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->level());
    }
    
    // optional int32 officerPosition = 5;
    if (has_officerposition()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->officerposition());
    }
    
    // optional int32 vipType = 6;
    if (has_viptype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->viptype());
    }
    
    // optional int32 vipLevel = 7;
    if (has_viplevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->viplevel());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void DB_GVE_List::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DB_GVE_List* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DB_GVE_List*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DB_GVE_List::MergeFrom(const DB_GVE_List& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_uid(from.uid());
    }
    if (from._has_bit(1)) {
      set_name(from.name());
    }
    if (from._has_bit(2)) {
      set_gvepoint(from.gvepoint());
    }
    if (from._has_bit(3)) {
      set_level(from.level());
    }
    if (from._has_bit(4)) {
      set_officerposition(from.officerposition());
    }
    if (from._has_bit(5)) {
      set_viptype(from.viptype());
    }
    if (from._has_bit(6)) {
      set_viplevel(from.viplevel());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DB_GVE_List::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DB_GVE_List::CopyFrom(const DB_GVE_List& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DB_GVE_List::IsInitialized() const {
  
  return true;
}

void DB_GVE_List::Swap(DB_GVE_List* other) {
  if (other != this) {
    std::swap(uid_, other->uid_);
    std::swap(name_, other->name_);
    std::swap(gvepoint_, other->gvepoint_);
    std::swap(level_, other->level_);
    std::swap(officerposition_, other->officerposition_);
    std::swap(viptype_, other->viptype_);
    std::swap(viplevel_, other->viplevel_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DB_GVE_List::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DB_GVE_List_descriptor_;
  metadata.reflection = DB_GVE_List_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DB_GVE_Msg::kGveStepFieldNumber;
const int DB_GVE_Msg::kPointFieldNumber;
const int DB_GVE_Msg::kRankFieldNumber;
const int DB_GVE_Msg::kPlayerCntFieldNumber;
const int DB_GVE_Msg::kOverGuildStepFieldNumber;
const int DB_GVE_Msg::kOverGuildPointFieldNumber;
const int DB_GVE_Msg::kOverGuildMemFieldNumber;
const int DB_GVE_Msg::kFlagFieldNumber;
#endif  // !_MSC_VER

DB_GVE_Msg::DB_GVE_Msg() {
  SharedCtor();
}

void DB_GVE_Msg::InitAsDefaultInstance() {
}

DB_GVE_Msg::DB_GVE_Msg(const DB_GVE_Msg& from) {
  SharedCtor();
  MergeFrom(from);
}

void DB_GVE_Msg::SharedCtor() {
  _cached_size_ = 0;
  gvestep_ = -1;
  point_ = 0;
  rank_ = 0;
  playercnt_ = 0;
  overguildstep_ = 0;
  overguildpoint_ = 0;
  overguildmem_ = 0;
  flag_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DB_GVE_Msg::~DB_GVE_Msg() {
  SharedDtor();
}

void DB_GVE_Msg::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* DB_GVE_Msg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DB_GVE_Msg_descriptor_;
}

const DB_GVE_Msg& DB_GVE_Msg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_countryDB_2eproto();  return *default_instance_;
}

DB_GVE_Msg* DB_GVE_Msg::default_instance_ = NULL;

DB_GVE_Msg* DB_GVE_Msg::New() const {
  return new DB_GVE_Msg;
}

void DB_GVE_Msg::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    gvestep_ = -1;
    point_ = 0;
    rank_ = 0;
    playercnt_ = 0;
    overguildstep_ = 0;
    overguildpoint_ = 0;
    overguildmem_ = 0;
    flag_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DB_GVE_Msg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 gveStep = 1 [default = -1];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &gvestep_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_point;
        break;
      }
      
      // optional int32 point = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_point:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &point_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_rank;
        break;
      }
      
      // optional int32 rank = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_rank:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &rank_));
        _set_bit(2);
        if (input->ExpectTag(32)) goto parse_playerCnt;
        break;
      }
      
      // optional int32 playerCnt = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_playerCnt:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &playercnt_));
        _set_bit(3);
        if (input->ExpectTag(40)) goto parse_overGuildStep;
        break;
      }
      
      // optional int32 overGuildStep = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_overGuildStep:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &overguildstep_));
        _set_bit(4);
        if (input->ExpectTag(48)) goto parse_overGuildPoint;
        break;
      }
      
      // optional int32 overGuildPoint = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_overGuildPoint:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &overguildpoint_));
        _set_bit(5);
        if (input->ExpectTag(56)) goto parse_overGuildMem;
        break;
      }
      
      // optional int32 overGuildMem = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_overGuildMem:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &overguildmem_));
        _set_bit(6);
        if (input->ExpectTag(64)) goto parse_flag;
        break;
      }
      
      // optional int32 flag = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_flag:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &flag_));
        _set_bit(7);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DB_GVE_Msg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    DB_GVE_Msg::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional int32 gveStep = 1 [default = -1];
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->gvestep(), output);
  }
  
  // optional int32 point = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->point(), output);
  }
  
  // optional int32 rank = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->rank(), output);
  }
  
  // optional int32 playerCnt = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->playercnt(), output);
  }
  
  // optional int32 overGuildStep = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->overguildstep(), output);
  }
  
  // optional int32 overGuildPoint = 6;
  if (_has_bit(5)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->overguildpoint(), output);
  }
  
  // optional int32 overGuildMem = 7;
  if (_has_bit(6)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->overguildmem(), output);
  }
  
  // optional int32 flag = 8;
  if (_has_bit(7)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->flag(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DB_GVE_Msg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 gveStep = 1 [default = -1];
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->gvestep(), target);
  }
  
  // optional int32 point = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->point(), target);
  }
  
  // optional int32 rank = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->rank(), target);
  }
  
  // optional int32 playerCnt = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->playercnt(), target);
  }
  
  // optional int32 overGuildStep = 5;
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->overguildstep(), target);
  }
  
  // optional int32 overGuildPoint = 6;
  if (_has_bit(5)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->overguildpoint(), target);
  }
  
  // optional int32 overGuildMem = 7;
  if (_has_bit(6)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->overguildmem(), target);
  }
  
  // optional int32 flag = 8;
  if (_has_bit(7)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->flag(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DB_GVE_Msg::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 gveStep = 1 [default = -1];
    if (has_gvestep()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gvestep());
    }
    
    // optional int32 point = 2;
    if (has_point()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->point());
    }
    
    // optional int32 rank = 3;
    if (has_rank()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rank());
    }
    
    // optional int32 playerCnt = 4;
    if (has_playercnt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->playercnt());
    }
    
    // optional int32 overGuildStep = 5;
    if (has_overguildstep()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->overguildstep());
    }
    
    // optional int32 overGuildPoint = 6;
    if (has_overguildpoint()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->overguildpoint());
    }
    
    // optional int32 overGuildMem = 7;
    if (has_overguildmem()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->overguildmem());
    }
    
    // optional int32 flag = 8;
    if (has_flag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->flag());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void DB_GVE_Msg::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DB_GVE_Msg* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DB_GVE_Msg*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DB_GVE_Msg::MergeFrom(const DB_GVE_Msg& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_gvestep(from.gvestep());
    }
    if (from._has_bit(1)) {
      set_point(from.point());
    }
    if (from._has_bit(2)) {
      set_rank(from.rank());
    }
    if (from._has_bit(3)) {
      set_playercnt(from.playercnt());
    }
    if (from._has_bit(4)) {
      set_overguildstep(from.overguildstep());
    }
    if (from._has_bit(5)) {
      set_overguildpoint(from.overguildpoint());
    }
    if (from._has_bit(6)) {
      set_overguildmem(from.overguildmem());
    }
    if (from._has_bit(7)) {
      set_flag(from.flag());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DB_GVE_Msg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DB_GVE_Msg::CopyFrom(const DB_GVE_Msg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DB_GVE_Msg::IsInitialized() const {
  
  return true;
}

void DB_GVE_Msg::Swap(DB_GVE_Msg* other) {
  if (other != this) {
    std::swap(gvestep_, other->gvestep_);
    std::swap(point_, other->point_);
    std::swap(rank_, other->rank_);
    std::swap(playercnt_, other->playercnt_);
    std::swap(overguildstep_, other->overguildstep_);
    std::swap(overguildpoint_, other->overguildpoint_);
    std::swap(overguildmem_, other->overguildmem_);
    std::swap(flag_, other->flag_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DB_GVE_Msg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DB_GVE_Msg_descriptor_;
  metadata.reflection = DB_GVE_Msg_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DB_GVE_Buff::kBuffIDFieldNumber;
const int DB_GVE_Buff::kBuffEndTimeFieldNumber;
#endif  // !_MSC_VER

DB_GVE_Buff::DB_GVE_Buff() {
  SharedCtor();
}

void DB_GVE_Buff::InitAsDefaultInstance() {
}

DB_GVE_Buff::DB_GVE_Buff(const DB_GVE_Buff& from) {
  SharedCtor();
  MergeFrom(from);
}

void DB_GVE_Buff::SharedCtor() {
  _cached_size_ = 0;
  buffid_ = 0;
  buffendtime_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DB_GVE_Buff::~DB_GVE_Buff() {
  SharedDtor();
}

void DB_GVE_Buff::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* DB_GVE_Buff::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DB_GVE_Buff_descriptor_;
}

const DB_GVE_Buff& DB_GVE_Buff::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_countryDB_2eproto();  return *default_instance_;
}

DB_GVE_Buff* DB_GVE_Buff::default_instance_ = NULL;

DB_GVE_Buff* DB_GVE_Buff::New() const {
  return new DB_GVE_Buff;
}

void DB_GVE_Buff::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    buffid_ = 0;
    buffendtime_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DB_GVE_Buff::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 buffID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &buffid_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_buffEndTime;
        break;
      }
      
      // optional int32 buffEndTime = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_buffEndTime:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &buffendtime_));
        _set_bit(1);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DB_GVE_Buff::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    DB_GVE_Buff::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional int32 buffID = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->buffid(), output);
  }
  
  // optional int32 buffEndTime = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->buffendtime(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DB_GVE_Buff::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 buffID = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->buffid(), target);
  }
  
  // optional int32 buffEndTime = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->buffendtime(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DB_GVE_Buff::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 buffID = 1;
    if (has_buffid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->buffid());
    }
    
    // optional int32 buffEndTime = 2;
    if (has_buffendtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->buffendtime());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void DB_GVE_Buff::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DB_GVE_Buff* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DB_GVE_Buff*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DB_GVE_Buff::MergeFrom(const DB_GVE_Buff& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_buffid(from.buffid());
    }
    if (from._has_bit(1)) {
      set_buffendtime(from.buffendtime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DB_GVE_Buff::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DB_GVE_Buff::CopyFrom(const DB_GVE_Buff& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DB_GVE_Buff::IsInitialized() const {
  
  return true;
}

void DB_GVE_Buff::Swap(DB_GVE_Buff* other) {
  if (other != this) {
    std::swap(buffid_, other->buffid_);
    std::swap(buffendtime_, other->buffendtime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DB_GVE_Buff::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DB_GVE_Buff_descriptor_;
  metadata.reflection = DB_GVE_Buff_reflection_;
  return metadata;
}


// ===================================================================

const ::std::string DB_GVE_FirstDown::_default_guildname_;
#ifndef _MSC_VER
const int DB_GVE_FirstDown::kStepIDFieldNumber;
const int DB_GVE_FirstDown::kGuildIDFieldNumber;
const int DB_GVE_FirstDown::kGuildCountryFieldNumber;
const int DB_GVE_FirstDown::kGuildNameFieldNumber;
#endif  // !_MSC_VER

DB_GVE_FirstDown::DB_GVE_FirstDown() {
  SharedCtor();
}

void DB_GVE_FirstDown::InitAsDefaultInstance() {
}

DB_GVE_FirstDown::DB_GVE_FirstDown(const DB_GVE_FirstDown& from) {
  SharedCtor();
  MergeFrom(from);
}

void DB_GVE_FirstDown::SharedCtor() {
  _cached_size_ = 0;
  stepid_ = 0;
  guildid_ = 0;
  guildcountry_ = 0;
  guildname_ = const_cast< ::std::string*>(&_default_guildname_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DB_GVE_FirstDown::~DB_GVE_FirstDown() {
  SharedDtor();
}

void DB_GVE_FirstDown::SharedDtor() {
  if (guildname_ != &_default_guildname_) {
    delete guildname_;
  }
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* DB_GVE_FirstDown::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DB_GVE_FirstDown_descriptor_;
}

const DB_GVE_FirstDown& DB_GVE_FirstDown::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_countryDB_2eproto();  return *default_instance_;
}

DB_GVE_FirstDown* DB_GVE_FirstDown::default_instance_ = NULL;

DB_GVE_FirstDown* DB_GVE_FirstDown::New() const {
  return new DB_GVE_FirstDown;
}

void DB_GVE_FirstDown::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    stepid_ = 0;
    guildid_ = 0;
    guildcountry_ = 0;
    if (_has_bit(3)) {
      if (guildname_ != &_default_guildname_) {
        guildname_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DB_GVE_FirstDown::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 stepID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &stepid_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_guildID;
        break;
      }
      
      // optional int32 guildID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_guildID:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &guildid_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_guildCountry;
        break;
      }
      
      // optional int32 guildCountry = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_guildCountry:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &guildcountry_));
        _set_bit(2);
        if (input->ExpectTag(34)) goto parse_guildName;
        break;
      }
      
      // optional string guildName = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_guildName:
        DO_(::google::protobuf::internal::WireFormatLite::ReadString(
              input, this->mutable_guildname()));
        ::google::protobuf::internal::WireFormat::VerifyUTF8String(
          this->guildname().data(), this->guildname().length(),
          ::google::protobuf::internal::WireFormat::PARSE);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DB_GVE_FirstDown::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    DB_GVE_FirstDown::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional int32 stepID = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->stepid(), output);
  }
  
  // optional int32 guildID = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->guildid(), output);
  }
  
  // optional int32 guildCountry = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->guildcountry(), output);
  }
  
  // optional string guildName = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->guildname().data(), this->guildname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->guildname(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DB_GVE_FirstDown::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 stepID = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->stepid(), target);
  }
  
  // optional int32 guildID = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->guildid(), target);
  }
  
  // optional int32 guildCountry = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->guildcountry(), target);
  }
  
  // optional string guildName = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->guildname().data(), this->guildname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->guildname(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DB_GVE_FirstDown::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 stepID = 1;
    if (has_stepid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->stepid());
    }
    
    // optional int32 guildID = 2;
    if (has_guildid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->guildid());
    }
    
    // optional int32 guildCountry = 3;
    if (has_guildcountry()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->guildcountry());
    }
    
    // optional string guildName = 4;
    if (has_guildname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->guildname());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void DB_GVE_FirstDown::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DB_GVE_FirstDown* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DB_GVE_FirstDown*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DB_GVE_FirstDown::MergeFrom(const DB_GVE_FirstDown& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_stepid(from.stepid());
    }
    if (from._has_bit(1)) {
      set_guildid(from.guildid());
    }
    if (from._has_bit(2)) {
      set_guildcountry(from.guildcountry());
    }
    if (from._has_bit(3)) {
      set_guildname(from.guildname());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DB_GVE_FirstDown::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DB_GVE_FirstDown::CopyFrom(const DB_GVE_FirstDown& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DB_GVE_FirstDown::IsInitialized() const {
  
  return true;
}

void DB_GVE_FirstDown::Swap(DB_GVE_FirstDown* other) {
  if (other != this) {
    std::swap(stepid_, other->stepid_);
    std::swap(guildid_, other->guildid_);
    std::swap(guildcountry_, other->guildcountry_);
    std::swap(guildname_, other->guildname_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DB_GVE_FirstDown::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DB_GVE_FirstDown_descriptor_;
  metadata.reflection = DB_GVE_FirstDown_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DB_C_ResourceData::kKeyFieldNumber;
const int DB_C_ResourceData::kRegionFieldNumber;
const int DB_C_ResourceData::kResourseListFieldNumber;
const int DB_C_ResourceData::kLtSaveRevisionFieldNumber;
#endif  // !_MSC_VER

DB_C_ResourceData::DB_C_ResourceData() {
  SharedCtor();
}

void DB_C_ResourceData::InitAsDefaultInstance() {
}

DB_C_ResourceData::DB_C_ResourceData(const DB_C_ResourceData& from) {
  SharedCtor();
  MergeFrom(from);
}

void DB_C_ResourceData::SharedCtor() {
  _cached_size_ = 0;
  key_ = 0;
  region_ = 0;
  ltsaverevision_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DB_C_ResourceData::~DB_C_ResourceData() {
  SharedDtor();
}

void DB_C_ResourceData::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* DB_C_ResourceData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DB_C_ResourceData_descriptor_;
}

const DB_C_ResourceData& DB_C_ResourceData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_countryDB_2eproto();  return *default_instance_;
}

DB_C_ResourceData* DB_C_ResourceData::default_instance_ = NULL;

DB_C_ResourceData* DB_C_ResourceData::New() const {
  return new DB_C_ResourceData;
}

void DB_C_ResourceData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    key_ = 0;
    region_ = 0;
    ltsaverevision_ = GOOGLE_LONGLONG(0);
  }
  resourselist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DB_C_ResourceData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 key = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &key_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_region;
        break;
      }
      
      // required int32 region = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_region:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &region_));
        _set_bit(1);
        if (input->ExpectTag(26)) goto parse_resourseList;
        break;
      }
      
      // repeated .DB_C_Resource resourseList = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_resourseList:
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, add_resourselist()));
        if (input->ExpectTag(26)) goto parse_resourseList;
        if (input->ExpectTag(32)) goto parse_ltSaveRevision;
        break;
      }
      
      // optional int64 ltSaveRevision = 4 [default = 0];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_ltSaveRevision:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt64(
              input, &ltsaverevision_));
        _set_bit(3);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DB_C_ResourceData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    DB_C_ResourceData::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // required int32 key = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->key(), output);
  }
  
  // required int32 region = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->region(), output);
  }
  
  // repeated .DB_C_Resource resourseList = 3;
  for (int i = 0; i < this->resourselist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      3, this->resourselist(i), output);
  }
  
  // optional int64 ltSaveRevision = 4 [default = 0];
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->ltsaverevision(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DB_C_ResourceData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 key = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->key(), target);
  }
  
  // required int32 region = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->region(), target);
  }
  
  // repeated .DB_C_Resource resourseList = 3;
  for (int i = 0; i < this->resourselist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->resourselist(i), target);
  }
  
  // optional int64 ltSaveRevision = 4 [default = 0];
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->ltsaverevision(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DB_C_ResourceData::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 key = 1;
    if (has_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->key());
    }
    
    // required int32 region = 2;
    if (has_region()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->region());
    }
    
    // optional int64 ltSaveRevision = 4 [default = 0];
    if (has_ltsaverevision()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->ltsaverevision());
    }
    
  }
  // repeated .DB_C_Resource resourseList = 3;
  total_size += 1 * this->resourselist_size();
  for (int i = 0; i < this->resourselist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->resourselist(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void DB_C_ResourceData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DB_C_ResourceData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DB_C_ResourceData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DB_C_ResourceData::MergeFrom(const DB_C_ResourceData& from) {
  GOOGLE_CHECK_NE(&from, this);
  resourselist_.MergeFrom(from.resourselist_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_key(from.key());
    }
    if (from._has_bit(1)) {
      set_region(from.region());
    }
    if (from._has_bit(3)) {
      set_ltsaverevision(from.ltsaverevision());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DB_C_ResourceData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DB_C_ResourceData::CopyFrom(const DB_C_ResourceData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DB_C_ResourceData::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  for (int i = 0; i < resourselist_size(); i++) {
    if (!this->resourselist(i).IsInitialized()) return false;
  }
  return true;
}

void DB_C_ResourceData::Swap(DB_C_ResourceData* other) {
  if (other != this) {
    std::swap(key_, other->key_);
    std::swap(region_, other->region_);
    resourselist_.Swap(&other->resourselist_);
    std::swap(ltsaverevision_, other->ltsaverevision_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DB_C_ResourceData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DB_C_ResourceData_descriptor_;
  metadata.reflection = DB_C_ResourceData_reflection_;
  return metadata;
}


// ===================================================================

const ::std::string DB_C_Resource::_default_uid_;
const ::std::string DB_C_Resource::_default_name_;
#ifndef _MSC_VER
const int DB_C_Resource::kIdFieldNumber;
const int DB_C_Resource::kTypeFieldNumber;
const int DB_C_Resource::kLvFieldNumber;
const int DB_C_Resource::kUidFieldNumber;
const int DB_C_Resource::kNameFieldNumber;
const int DB_C_Resource::kEndTimeFieldNumber;
const int DB_C_Resource::kAdmiralIDFieldNumber;
const int DB_C_Resource::kAdmiralTrainLvFieldNumber;
const int DB_C_Resource::kPowFieldNumber;
#endif  // !_MSC_VER

DB_C_Resource::DB_C_Resource() {
  SharedCtor();
}

void DB_C_Resource::InitAsDefaultInstance() {
}

DB_C_Resource::DB_C_Resource(const DB_C_Resource& from) {
  SharedCtor();
  MergeFrom(from);
}

void DB_C_Resource::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  type_ = 0;
  lv_ = 0;
  uid_ = const_cast< ::std::string*>(&_default_uid_);
  name_ = const_cast< ::std::string*>(&_default_name_);
  endtime_ = 0;
  pow_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DB_C_Resource::~DB_C_Resource() {
  SharedDtor();
}

void DB_C_Resource::SharedDtor() {
  if (uid_ != &_default_uid_) {
    delete uid_;
  }
  if (name_ != &_default_name_) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* DB_C_Resource::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DB_C_Resource_descriptor_;
}

const DB_C_Resource& DB_C_Resource::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_countryDB_2eproto();  return *default_instance_;
}

DB_C_Resource* DB_C_Resource::default_instance_ = NULL;

DB_C_Resource* DB_C_Resource::New() const {
  return new DB_C_Resource;
}

void DB_C_Resource::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    type_ = 0;
    lv_ = 0;
    if (_has_bit(3)) {
      if (uid_ != &_default_uid_) {
        uid_->clear();
      }
    }
    if (_has_bit(4)) {
      if (name_ != &_default_name_) {
        name_->clear();
      }
    }
    endtime_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    pow_ = 0;
  }
  admiralid_.Clear();
  admiraltrainlv_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DB_C_Resource::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &id_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }
      
      // optional int32 type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_type:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &type_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_lv;
        break;
      }
      
      // optional int32 lv = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_lv:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &lv_));
        _set_bit(2);
        if (input->ExpectTag(34)) goto parse_uid;
        break;
      }
      
      // optional string uid = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_uid:
        DO_(::google::protobuf::internal::WireFormatLite::ReadString(
              input, this->mutable_uid()));
        ::google::protobuf::internal::WireFormat::VerifyUTF8String(
          this->uid().data(), this->uid().length(),
          ::google::protobuf::internal::WireFormat::PARSE);
        if (input->ExpectTag(42)) goto parse_name;
        break;
      }
      
      // optional string name = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_name:
        DO_(::google::protobuf::internal::WireFormatLite::ReadString(
              input, this->mutable_name()));
        ::google::protobuf::internal::WireFormat::VerifyUTF8String(
          this->name().data(), this->name().length(),
          ::google::protobuf::internal::WireFormat::PARSE);
        if (input->ExpectTag(48)) goto parse_endTime;
        break;
      }
      
      // optional int32 endTime = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_endTime:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &endtime_));
        _set_bit(5);
        if (input->ExpectTag(56)) goto parse_admiralID;
        break;
      }
      
      // repeated int32 admiralID = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_admiralID:
        ::google::protobuf::int32 value;
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &value));
        add_admiralid(value);
        if (input->ExpectTag(56)) goto parse_admiralID;
        if (input->ExpectTag(64)) goto parse_admiralTrainLv;
        break;
      }
      
      // repeated int32 admiralTrainLv = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_admiralTrainLv:
        ::google::protobuf::int32 value;
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &value));
        add_admiraltrainlv(value);
        if (input->ExpectTag(64)) goto parse_admiralTrainLv;
        if (input->ExpectTag(72)) goto parse_pow;
        break;
      }
      
      // optional int32 pow = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_pow:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &pow_));
        _set_bit(8);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DB_C_Resource::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    DB_C_Resource::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // required int32 id = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }
  
  // optional int32 type = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->type(), output);
  }
  
  // optional int32 lv = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->lv(), output);
  }
  
  // optional string uid = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->uid().data(), this->uid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->uid(), output);
  }
  
  // optional string name = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->name(), output);
  }
  
  // optional int32 endTime = 6;
  if (_has_bit(5)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->endtime(), output);
  }
  
  // repeated int32 admiralID = 7;
  for (int i = 0; i < this->admiralid_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      7, this->admiralid(i), output);
  }
  
  // repeated int32 admiralTrainLv = 8;
  for (int i = 0; i < this->admiraltrainlv_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      8, this->admiraltrainlv(i), output);
  }
  
  // optional int32 pow = 9;
  if (_has_bit(8)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->pow(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DB_C_Resource::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 id = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }
  
  // optional int32 type = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->type(), target);
  }
  
  // optional int32 lv = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->lv(), target);
  }
  
  // optional string uid = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->uid().data(), this->uid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->uid(), target);
  }
  
  // optional string name = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->name(), target);
  }
  
  // optional int32 endTime = 6;
  if (_has_bit(5)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->endtime(), target);
  }
  
  // repeated int32 admiralID = 7;
  for (int i = 0; i < this->admiralid_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(7, this->admiralid(i), target);
  }
  
  // repeated int32 admiralTrainLv = 8;
  for (int i = 0; i < this->admiraltrainlv_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(8, this->admiraltrainlv(i), target);
  }
  
  // optional int32 pow = 9;
  if (_has_bit(8)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->pow(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DB_C_Resource::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }
    
    // optional int32 type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }
    
    // optional int32 lv = 3;
    if (has_lv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->lv());
    }
    
    // optional string uid = 4;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->uid());
    }
    
    // optional string name = 5;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }
    
    // optional int32 endTime = 6;
    if (has_endtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->endtime());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 pow = 9;
    if (has_pow()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pow());
    }
    
  }
  // repeated int32 admiralID = 7;
  {
    int data_size = 0;
    for (int i = 0; i < this->admiralid_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->admiralid(i));
    }
    total_size += 1 * this->admiralid_size() + data_size;
  }
  
  // repeated int32 admiralTrainLv = 8;
  {
    int data_size = 0;
    for (int i = 0; i < this->admiraltrainlv_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->admiraltrainlv(i));
    }
    total_size += 1 * this->admiraltrainlv_size() + data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void DB_C_Resource::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DB_C_Resource* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DB_C_Resource*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DB_C_Resource::MergeFrom(const DB_C_Resource& from) {
  GOOGLE_CHECK_NE(&from, this);
  admiralid_.MergeFrom(from.admiralid_);
  admiraltrainlv_.MergeFrom(from.admiraltrainlv_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_id(from.id());
    }
    if (from._has_bit(1)) {
      set_type(from.type());
    }
    if (from._has_bit(2)) {
      set_lv(from.lv());
    }
    if (from._has_bit(3)) {
      set_uid(from.uid());
    }
    if (from._has_bit(4)) {
      set_name(from.name());
    }
    if (from._has_bit(5)) {
      set_endtime(from.endtime());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from._has_bit(8)) {
      set_pow(from.pow());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DB_C_Resource::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DB_C_Resource::CopyFrom(const DB_C_Resource& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DB_C_Resource::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void DB_C_Resource::Swap(DB_C_Resource* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(type_, other->type_);
    std::swap(lv_, other->lv_);
    std::swap(uid_, other->uid_);
    std::swap(name_, other->name_);
    std::swap(endtime_, other->endtime_);
    admiralid_.Swap(&other->admiralid_);
    admiraltrainlv_.Swap(&other->admiraltrainlv_);
    std::swap(pow_, other->pow_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DB_C_Resource::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DB_C_Resource_descriptor_;
  metadata.reflection = DB_C_Resource_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DB_C_GvgCity::kKeyFieldNumber;
const int DB_C_GvgCity::kRegionFieldNumber;
const int DB_C_GvgCity::kCityIDFieldNumber;
const int DB_C_GvgCity::kActiveFlagFieldNumber;
const int DB_C_GvgCity::kGuildIDFieldNumber;
const int DB_C_GvgCity::kLtSaveRevisionFieldNumber;
const int DB_C_GvgCity::kSignGuildListFieldNumber;
const int DB_C_GvgCity::kGvgBtlFieldNumber;
const int DB_C_GvgCity::kStepFieldNumber;
const int DB_C_GvgCity::kGuildStreakFieldNumber;
const int DB_C_GvgCity::kCityPointFieldNumber;
#endif  // !_MSC_VER

DB_C_GvgCity::DB_C_GvgCity() {
  SharedCtor();
}

void DB_C_GvgCity::InitAsDefaultInstance() {
}

DB_C_GvgCity::DB_C_GvgCity(const DB_C_GvgCity& from) {
  SharedCtor();
  MergeFrom(from);
}

void DB_C_GvgCity::SharedCtor() {
  _cached_size_ = 0;
  key_ = 0;
  region_ = 0;
  cityid_ = 0;
  activeflag_ = 0;
  guildid_ = 0;
  ltsaverevision_ = GOOGLE_LONGLONG(0);
  step_ = 0;
  guildstreak_ = 0;
  citypoint_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DB_C_GvgCity::~DB_C_GvgCity() {
  SharedDtor();
}

void DB_C_GvgCity::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* DB_C_GvgCity::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DB_C_GvgCity_descriptor_;
}

const DB_C_GvgCity& DB_C_GvgCity::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_countryDB_2eproto();  return *default_instance_;
}

DB_C_GvgCity* DB_C_GvgCity::default_instance_ = NULL;

DB_C_GvgCity* DB_C_GvgCity::New() const {
  return new DB_C_GvgCity;
}

void DB_C_GvgCity::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    key_ = 0;
    region_ = 0;
    cityid_ = 0;
    activeflag_ = 0;
    guildid_ = 0;
    ltsaverevision_ = GOOGLE_LONGLONG(0);
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    step_ = 0;
    guildstreak_ = 0;
    citypoint_ = 0;
  }
  signguildlist_.Clear();
  gvgbtl_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DB_C_GvgCity::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 key = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &key_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_region;
        break;
      }
      
      // optional int32 region = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_region:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &region_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_cityID;
        break;
      }
      
      // required int32 cityID = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_cityID:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &cityid_));
        _set_bit(2);
        if (input->ExpectTag(32)) goto parse_activeFlag;
        break;
      }
      
      // optional int32 activeFlag = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_activeFlag:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &activeflag_));
        _set_bit(3);
        if (input->ExpectTag(40)) goto parse_guildID;
        break;
      }
      
      // optional int32 guildID = 5 [default = 0];
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_guildID:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &guildid_));
        _set_bit(4);
        if (input->ExpectTag(48)) goto parse_ltSaveRevision;
        break;
      }
      
      // optional int64 ltSaveRevision = 6 [default = 0];
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_ltSaveRevision:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt64(
              input, &ltsaverevision_));
        _set_bit(5);
        if (input->ExpectTag(58)) goto parse_signGuildList;
        break;
      }
      
      // repeated .DB_C_GvgSignMsg signGuildList = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_signGuildList:
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, add_signguildlist()));
        if (input->ExpectTag(58)) goto parse_signGuildList;
        if (input->ExpectTag(66)) goto parse_gvgBtl;
        break;
      }
      
      // repeated .DB_C_GvgBtlRet gvgBtl = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_gvgBtl:
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, add_gvgbtl()));
        if (input->ExpectTag(66)) goto parse_gvgBtl;
        if (input->ExpectTag(72)) goto parse_step;
        break;
      }
      
      // optional int32 step = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_step:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &step_));
        _set_bit(8);
        if (input->ExpectTag(80)) goto parse_guildStreak;
        break;
      }
      
      // optional int32 guildStreak = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_guildStreak:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &guildstreak_));
        _set_bit(9);
        if (input->ExpectTag(88)) goto parse_cityPoint;
        break;
      }
      
      // optional int32 cityPoint = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_cityPoint:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &citypoint_));
        _set_bit(10);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DB_C_GvgCity::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    DB_C_GvgCity::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // required int32 key = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->key(), output);
  }
  
  // optional int32 region = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->region(), output);
  }
  
  // required int32 cityID = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->cityid(), output);
  }
  
  // optional int32 activeFlag = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->activeflag(), output);
  }
  
  // optional int32 guildID = 5 [default = 0];
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->guildid(), output);
  }
  
  // optional int64 ltSaveRevision = 6 [default = 0];
  if (_has_bit(5)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(6, this->ltsaverevision(), output);
  }
  
  // repeated .DB_C_GvgSignMsg signGuildList = 7;
  for (int i = 0; i < this->signguildlist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      7, this->signguildlist(i), output);
  }
  
  // repeated .DB_C_GvgBtlRet gvgBtl = 8;
  for (int i = 0; i < this->gvgbtl_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      8, this->gvgbtl(i), output);
  }
  
  // optional int32 step = 9;
  if (_has_bit(8)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->step(), output);
  }
  
  // optional int32 guildStreak = 10;
  if (_has_bit(9)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->guildstreak(), output);
  }
  
  // optional int32 cityPoint = 11;
  if (_has_bit(10)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->citypoint(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DB_C_GvgCity::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 key = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->key(), target);
  }
  
  // optional int32 region = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->region(), target);
  }
  
  // required int32 cityID = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->cityid(), target);
  }
  
  // optional int32 activeFlag = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->activeflag(), target);
  }
  
  // optional int32 guildID = 5 [default = 0];
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->guildid(), target);
  }
  
  // optional int64 ltSaveRevision = 6 [default = 0];
  if (_has_bit(5)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(6, this->ltsaverevision(), target);
  }
  
  // repeated .DB_C_GvgSignMsg signGuildList = 7;
  for (int i = 0; i < this->signguildlist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->signguildlist(i), target);
  }
  
  // repeated .DB_C_GvgBtlRet gvgBtl = 8;
  for (int i = 0; i < this->gvgbtl_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->gvgbtl(i), target);
  }
  
  // optional int32 step = 9;
  if (_has_bit(8)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->step(), target);
  }
  
  // optional int32 guildStreak = 10;
  if (_has_bit(9)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->guildstreak(), target);
  }
  
  // optional int32 cityPoint = 11;
  if (_has_bit(10)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->citypoint(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DB_C_GvgCity::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 key = 1;
    if (has_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->key());
    }
    
    // optional int32 region = 2;
    if (has_region()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->region());
    }
    
    // required int32 cityID = 3;
    if (has_cityid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cityid());
    }
    
    // optional int32 activeFlag = 4;
    if (has_activeflag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->activeflag());
    }
    
    // optional int32 guildID = 5 [default = 0];
    if (has_guildid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->guildid());
    }
    
    // optional int64 ltSaveRevision = 6 [default = 0];
    if (has_ltsaverevision()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->ltsaverevision());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 step = 9;
    if (has_step()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->step());
    }
    
    // optional int32 guildStreak = 10;
    if (has_guildstreak()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->guildstreak());
    }
    
    // optional int32 cityPoint = 11;
    if (has_citypoint()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->citypoint());
    }
    
  }
  // repeated .DB_C_GvgSignMsg signGuildList = 7;
  total_size += 1 * this->signguildlist_size();
  for (int i = 0; i < this->signguildlist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->signguildlist(i));
  }
  
  // repeated .DB_C_GvgBtlRet gvgBtl = 8;
  total_size += 1 * this->gvgbtl_size();
  for (int i = 0; i < this->gvgbtl_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->gvgbtl(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void DB_C_GvgCity::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DB_C_GvgCity* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DB_C_GvgCity*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DB_C_GvgCity::MergeFrom(const DB_C_GvgCity& from) {
  GOOGLE_CHECK_NE(&from, this);
  signguildlist_.MergeFrom(from.signguildlist_);
  gvgbtl_.MergeFrom(from.gvgbtl_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_key(from.key());
    }
    if (from._has_bit(1)) {
      set_region(from.region());
    }
    if (from._has_bit(2)) {
      set_cityid(from.cityid());
    }
    if (from._has_bit(3)) {
      set_activeflag(from.activeflag());
    }
    if (from._has_bit(4)) {
      set_guildid(from.guildid());
    }
    if (from._has_bit(5)) {
      set_ltsaverevision(from.ltsaverevision());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from._has_bit(8)) {
      set_step(from.step());
    }
    if (from._has_bit(9)) {
      set_guildstreak(from.guildstreak());
    }
    if (from._has_bit(10)) {
      set_citypoint(from.citypoint());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DB_C_GvgCity::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DB_C_GvgCity::CopyFrom(const DB_C_GvgCity& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DB_C_GvgCity::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000005) != 0x00000005) return false;
  
  return true;
}

void DB_C_GvgCity::Swap(DB_C_GvgCity* other) {
  if (other != this) {
    std::swap(key_, other->key_);
    std::swap(region_, other->region_);
    std::swap(cityid_, other->cityid_);
    std::swap(activeflag_, other->activeflag_);
    std::swap(guildid_, other->guildid_);
    std::swap(ltsaverevision_, other->ltsaverevision_);
    signguildlist_.Swap(&other->signguildlist_);
    gvgbtl_.Swap(&other->gvgbtl_);
    std::swap(step_, other->step_);
    std::swap(guildstreak_, other->guildstreak_);
    std::swap(citypoint_, other->citypoint_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DB_C_GvgCity::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DB_C_GvgCity_descriptor_;
  metadata.reflection = DB_C_GvgCity_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DB_C_GvgSignMsg::kGuildIDFieldNumber;
const int DB_C_GvgSignMsg::kGuildContributeFieldNumber;
#endif  // !_MSC_VER

DB_C_GvgSignMsg::DB_C_GvgSignMsg() {
  SharedCtor();
}

void DB_C_GvgSignMsg::InitAsDefaultInstance() {
}

DB_C_GvgSignMsg::DB_C_GvgSignMsg(const DB_C_GvgSignMsg& from) {
  SharedCtor();
  MergeFrom(from);
}

void DB_C_GvgSignMsg::SharedCtor() {
  _cached_size_ = 0;
  guildid_ = 0;
  guildcontribute_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DB_C_GvgSignMsg::~DB_C_GvgSignMsg() {
  SharedDtor();
}

void DB_C_GvgSignMsg::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* DB_C_GvgSignMsg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DB_C_GvgSignMsg_descriptor_;
}

const DB_C_GvgSignMsg& DB_C_GvgSignMsg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_countryDB_2eproto();  return *default_instance_;
}

DB_C_GvgSignMsg* DB_C_GvgSignMsg::default_instance_ = NULL;

DB_C_GvgSignMsg* DB_C_GvgSignMsg::New() const {
  return new DB_C_GvgSignMsg;
}

void DB_C_GvgSignMsg::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    guildid_ = 0;
    guildcontribute_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DB_C_GvgSignMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 guildID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &guildid_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_guildContribute;
        break;
      }
      
      // optional int32 guildContribute = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_guildContribute:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &guildcontribute_));
        _set_bit(1);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DB_C_GvgSignMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    DB_C_GvgSignMsg::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional int32 guildID = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->guildid(), output);
  }
  
  // optional int32 guildContribute = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->guildcontribute(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DB_C_GvgSignMsg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 guildID = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->guildid(), target);
  }
  
  // optional int32 guildContribute = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->guildcontribute(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DB_C_GvgSignMsg::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 guildID = 1;
    if (has_guildid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->guildid());
    }
    
    // optional int32 guildContribute = 2;
    if (has_guildcontribute()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->guildcontribute());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void DB_C_GvgSignMsg::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DB_C_GvgSignMsg* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DB_C_GvgSignMsg*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DB_C_GvgSignMsg::MergeFrom(const DB_C_GvgSignMsg& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_guildid(from.guildid());
    }
    if (from._has_bit(1)) {
      set_guildcontribute(from.guildcontribute());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DB_C_GvgSignMsg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DB_C_GvgSignMsg::CopyFrom(const DB_C_GvgSignMsg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DB_C_GvgSignMsg::IsInitialized() const {
  
  return true;
}

void DB_C_GvgSignMsg::Swap(DB_C_GvgSignMsg* other) {
  if (other != this) {
    std::swap(guildid_, other->guildid_);
    std::swap(guildcontribute_, other->guildcontribute_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DB_C_GvgSignMsg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DB_C_GvgSignMsg_descriptor_;
  metadata.reflection = DB_C_GvgSignMsg_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DB_C_GvgBtlRet::kGuildID1FieldNumber;
const int DB_C_GvgBtlRet::kGuildID2FieldNumber;
const int DB_C_GvgBtlRet::kSessionFieldNumber;
const int DB_C_GvgBtlRet::kWinGuildIDFieldNumber;
const int DB_C_GvgBtlRet::kCityIDFieldNumber;
const int DB_C_GvgBtlRet::kRoundFieldNumber;
const int DB_C_GvgBtlRet::kBWinByFightFieldNumber;
#endif  // !_MSC_VER

DB_C_GvgBtlRet::DB_C_GvgBtlRet() {
  SharedCtor();
}

void DB_C_GvgBtlRet::InitAsDefaultInstance() {
}

DB_C_GvgBtlRet::DB_C_GvgBtlRet(const DB_C_GvgBtlRet& from) {
  SharedCtor();
  MergeFrom(from);
}

void DB_C_GvgBtlRet::SharedCtor() {
  _cached_size_ = 0;
  guildid1_ = 0;
  guildid2_ = 0;
  session_ = 0;
  winguildid_ = -1;
  cityid_ = 0;
  round_ = 0;
  bwinbyfight_ = true;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DB_C_GvgBtlRet::~DB_C_GvgBtlRet() {
  SharedDtor();
}

void DB_C_GvgBtlRet::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* DB_C_GvgBtlRet::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DB_C_GvgBtlRet_descriptor_;
}

const DB_C_GvgBtlRet& DB_C_GvgBtlRet::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_countryDB_2eproto();  return *default_instance_;
}

DB_C_GvgBtlRet* DB_C_GvgBtlRet::default_instance_ = NULL;

DB_C_GvgBtlRet* DB_C_GvgBtlRet::New() const {
  return new DB_C_GvgBtlRet;
}

void DB_C_GvgBtlRet::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    guildid1_ = 0;
    guildid2_ = 0;
    session_ = 0;
    winguildid_ = -1;
    cityid_ = 0;
    round_ = 0;
    bwinbyfight_ = true;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DB_C_GvgBtlRet::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 guildID1 = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &guildid1_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_guildID2;
        break;
      }
      
      // optional int32 guildID2 = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_guildID2:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &guildid2_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_session;
        break;
      }
      
      // optional int32 session = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_session:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &session_));
        _set_bit(2);
        if (input->ExpectTag(32)) goto parse_winGuildID;
        break;
      }
      
      // optional int32 winGuildID = 4 [default = -1];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_winGuildID:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &winguildid_));
        _set_bit(3);
        if (input->ExpectTag(40)) goto parse_cityID;
        break;
      }
      
      // optional int32 cityID = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_cityID:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &cityid_));
        _set_bit(4);
        if (input->ExpectTag(48)) goto parse_round;
        break;
      }
      
      // optional int32 round = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_round:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &round_));
        _set_bit(5);
        if (input->ExpectTag(56)) goto parse_bWinByFight;
        break;
      }
      
      // optional bool bWinByFight = 7 [default = true];
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_bWinByFight:
        DO_(::google::protobuf::internal::WireFormatLite::ReadBool(
              input, &bwinbyfight_));
        _set_bit(6);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DB_C_GvgBtlRet::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    DB_C_GvgBtlRet::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional int32 guildID1 = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->guildid1(), output);
  }
  
  // optional int32 guildID2 = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->guildid2(), output);
  }
  
  // optional int32 session = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->session(), output);
  }
  
  // optional int32 winGuildID = 4 [default = -1];
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->winguildid(), output);
  }
  
  // optional int32 cityID = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->cityid(), output);
  }
  
  // optional int32 round = 6;
  if (_has_bit(5)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->round(), output);
  }
  
  // optional bool bWinByFight = 7 [default = true];
  if (_has_bit(6)) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->bwinbyfight(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DB_C_GvgBtlRet::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 guildID1 = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->guildid1(), target);
  }
  
  // optional int32 guildID2 = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->guildid2(), target);
  }
  
  // optional int32 session = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->session(), target);
  }
  
  // optional int32 winGuildID = 4 [default = -1];
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->winguildid(), target);
  }
  
  // optional int32 cityID = 5;
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->cityid(), target);
  }
  
  // optional int32 round = 6;
  if (_has_bit(5)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->round(), target);
  }
  
  // optional bool bWinByFight = 7 [default = true];
  if (_has_bit(6)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->bwinbyfight(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DB_C_GvgBtlRet::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 guildID1 = 1;
    if (has_guildid1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->guildid1());
    }
    
    // optional int32 guildID2 = 2;
    if (has_guildid2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->guildid2());
    }
    
    // optional int32 session = 3;
    if (has_session()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->session());
    }
    
    // optional int32 winGuildID = 4 [default = -1];
    if (has_winguildid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->winguildid());
    }
    
    // optional int32 cityID = 5;
    if (has_cityid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cityid());
    }
    
    // optional int32 round = 6;
    if (has_round()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->round());
    }
    
    // optional bool bWinByFight = 7 [default = true];
    if (has_bwinbyfight()) {
      total_size += 1 + 1;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void DB_C_GvgBtlRet::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DB_C_GvgBtlRet* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DB_C_GvgBtlRet*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DB_C_GvgBtlRet::MergeFrom(const DB_C_GvgBtlRet& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_guildid1(from.guildid1());
    }
    if (from._has_bit(1)) {
      set_guildid2(from.guildid2());
    }
    if (from._has_bit(2)) {
      set_session(from.session());
    }
    if (from._has_bit(3)) {
      set_winguildid(from.winguildid());
    }
    if (from._has_bit(4)) {
      set_cityid(from.cityid());
    }
    if (from._has_bit(5)) {
      set_round(from.round());
    }
    if (from._has_bit(6)) {
      set_bwinbyfight(from.bwinbyfight());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DB_C_GvgBtlRet::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DB_C_GvgBtlRet::CopyFrom(const DB_C_GvgBtlRet& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DB_C_GvgBtlRet::IsInitialized() const {
  
  return true;
}

void DB_C_GvgBtlRet::Swap(DB_C_GvgBtlRet* other) {
  if (other != this) {
    std::swap(guildid1_, other->guildid1_);
    std::swap(guildid2_, other->guildid2_);
    std::swap(session_, other->session_);
    std::swap(winguildid_, other->winguildid_);
    std::swap(cityid_, other->cityid_);
    std::swap(round_, other->round_);
    std::swap(bwinbyfight_, other->bwinbyfight_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DB_C_GvgBtlRet::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DB_C_GvgBtlRet_descriptor_;
  metadata.reflection = DB_C_GvgBtlRet_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DB_C_GvgBtlPlayerMsg::kUserIDFieldNumber;
const int DB_C_GvgBtlPlayerMsg::kWinTimeFieldNumber;
const int DB_C_GvgBtlPlayerMsg::kLeftHpFieldNumber;
const int DB_C_GvgBtlPlayerMsg::kWayFieldNumber;
#endif  // !_MSC_VER

DB_C_GvgBtlPlayerMsg::DB_C_GvgBtlPlayerMsg() {
  SharedCtor();
}

void DB_C_GvgBtlPlayerMsg::InitAsDefaultInstance() {
}

DB_C_GvgBtlPlayerMsg::DB_C_GvgBtlPlayerMsg(const DB_C_GvgBtlPlayerMsg& from) {
  SharedCtor();
  MergeFrom(from);
}

void DB_C_GvgBtlPlayerMsg::SharedCtor() {
  _cached_size_ = 0;
  userid_ = GOOGLE_LONGLONG(0);
  wintime_ = 0;
  lefthp_ = 0;
  way_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DB_C_GvgBtlPlayerMsg::~DB_C_GvgBtlPlayerMsg() {
  SharedDtor();
}

void DB_C_GvgBtlPlayerMsg::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* DB_C_GvgBtlPlayerMsg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DB_C_GvgBtlPlayerMsg_descriptor_;
}

const DB_C_GvgBtlPlayerMsg& DB_C_GvgBtlPlayerMsg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_countryDB_2eproto();  return *default_instance_;
}

DB_C_GvgBtlPlayerMsg* DB_C_GvgBtlPlayerMsg::default_instance_ = NULL;

DB_C_GvgBtlPlayerMsg* DB_C_GvgBtlPlayerMsg::New() const {
  return new DB_C_GvgBtlPlayerMsg;
}

void DB_C_GvgBtlPlayerMsg::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    userid_ = GOOGLE_LONGLONG(0);
    wintime_ = 0;
    lefthp_ = 0;
    way_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DB_C_GvgBtlPlayerMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 userID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt64(
              input, &userid_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_winTime;
        break;
      }
      
      // optional int32 winTime = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_winTime:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &wintime_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_leftHp;
        break;
      }
      
      // optional int32 leftHp = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_leftHp:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &lefthp_));
        _set_bit(2);
        if (input->ExpectTag(32)) goto parse_way;
        break;
      }
      
      // optional int32 way = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_way:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &way_));
        _set_bit(3);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DB_C_GvgBtlPlayerMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    DB_C_GvgBtlPlayerMsg::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional int64 userID = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->userid(), output);
  }
  
  // optional int32 winTime = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->wintime(), output);
  }
  
  // optional int32 leftHp = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->lefthp(), output);
  }
  
  // optional int32 way = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->way(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DB_C_GvgBtlPlayerMsg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int64 userID = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->userid(), target);
  }
  
  // optional int32 winTime = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->wintime(), target);
  }
  
  // optional int32 leftHp = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->lefthp(), target);
  }
  
  // optional int32 way = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->way(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DB_C_GvgBtlPlayerMsg::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 userID = 1;
    if (has_userid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->userid());
    }
    
    // optional int32 winTime = 2;
    if (has_wintime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->wintime());
    }
    
    // optional int32 leftHp = 3;
    if (has_lefthp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->lefthp());
    }
    
    // optional int32 way = 4;
    if (has_way()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->way());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void DB_C_GvgBtlPlayerMsg::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DB_C_GvgBtlPlayerMsg* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DB_C_GvgBtlPlayerMsg*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DB_C_GvgBtlPlayerMsg::MergeFrom(const DB_C_GvgBtlPlayerMsg& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_userid(from.userid());
    }
    if (from._has_bit(1)) {
      set_wintime(from.wintime());
    }
    if (from._has_bit(2)) {
      set_lefthp(from.lefthp());
    }
    if (from._has_bit(3)) {
      set_way(from.way());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DB_C_GvgBtlPlayerMsg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DB_C_GvgBtlPlayerMsg::CopyFrom(const DB_C_GvgBtlPlayerMsg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DB_C_GvgBtlPlayerMsg::IsInitialized() const {
  
  return true;
}

void DB_C_GvgBtlPlayerMsg::Swap(DB_C_GvgBtlPlayerMsg* other) {
  if (other != this) {
    std::swap(userid_, other->userid_);
    std::swap(wintime_, other->wintime_);
    std::swap(lefthp_, other->lefthp_);
    std::swap(way_, other->way_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DB_C_GvgBtlPlayerMsg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DB_C_GvgBtlPlayerMsg_descriptor_;
  metadata.reflection = DB_C_GvgBtlPlayerMsg_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DB_C_GvgBtlRetSave::kWinGuildIDFieldNumber;
const int DB_C_GvgBtlRetSave::kGuildID1FieldNumber;
const int DB_C_GvgBtlRetSave::kGuildID2FieldNumber;
const int DB_C_GvgBtlRetSave::kSessionFieldNumber;
const int DB_C_GvgBtlRetSave::kCityIDFieldNumber;
const int DB_C_GvgBtlRetSave::kRegionFieldNumber;
const int DB_C_GvgBtlRetSave::kRetWayFieldNumber;
const int DB_C_GvgBtlRetSave::kPlayerCnt1FieldNumber;
const int DB_C_GvgBtlRetSave::kPlayerCnt2FieldNumber;
#endif  // !_MSC_VER

DB_C_GvgBtlRetSave::DB_C_GvgBtlRetSave() {
  SharedCtor();
}

void DB_C_GvgBtlRetSave::InitAsDefaultInstance() {
}

DB_C_GvgBtlRetSave::DB_C_GvgBtlRetSave(const DB_C_GvgBtlRetSave& from) {
  SharedCtor();
  MergeFrom(from);
}

void DB_C_GvgBtlRetSave::SharedCtor() {
  _cached_size_ = 0;
  winguildid_ = 0;
  guildid1_ = 0;
  guildid2_ = 0;
  session_ = 0;
  cityid_ = 0;
  region_ = 0;
  playercnt1_ = 0;
  playercnt2_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DB_C_GvgBtlRetSave::~DB_C_GvgBtlRetSave() {
  SharedDtor();
}

void DB_C_GvgBtlRetSave::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* DB_C_GvgBtlRetSave::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DB_C_GvgBtlRetSave_descriptor_;
}

const DB_C_GvgBtlRetSave& DB_C_GvgBtlRetSave::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_countryDB_2eproto();  return *default_instance_;
}

DB_C_GvgBtlRetSave* DB_C_GvgBtlRetSave::default_instance_ = NULL;

DB_C_GvgBtlRetSave* DB_C_GvgBtlRetSave::New() const {
  return new DB_C_GvgBtlRetSave;
}

void DB_C_GvgBtlRetSave::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    winguildid_ = 0;
    guildid1_ = 0;
    guildid2_ = 0;
    session_ = 0;
    cityid_ = 0;
    region_ = 0;
    playercnt1_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    playercnt2_ = 0;
  }
  retway_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DB_C_GvgBtlRetSave::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 winGuildID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &winguildid_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_guildID1;
        break;
      }
      
      // optional int32 guildID1 = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_guildID1:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &guildid1_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_guildID2;
        break;
      }
      
      // optional int32 guildID2 = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_guildID2:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &guildid2_));
        _set_bit(2);
        if (input->ExpectTag(32)) goto parse_session;
        break;
      }
      
      // optional int32 session = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_session:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &session_));
        _set_bit(3);
        if (input->ExpectTag(40)) goto parse_cityID;
        break;
      }
      
      // optional int32 cityID = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_cityID:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &cityid_));
        _set_bit(4);
        if (input->ExpectTag(48)) goto parse_region;
        break;
      }
      
      // optional int32 region = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_region:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &region_));
        _set_bit(5);
        if (input->ExpectTag(58)) goto parse_retWay;
        break;
      }
      
      // repeated .DB_C_GvgBtlRetWay retWay = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_retWay:
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, add_retway()));
        if (input->ExpectTag(58)) goto parse_retWay;
        if (input->ExpectTag(64)) goto parse_playerCnt1;
        break;
      }
      
      // optional int32 playerCnt1 = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_playerCnt1:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &playercnt1_));
        _set_bit(7);
        if (input->ExpectTag(72)) goto parse_playerCnt2;
        break;
      }
      
      // optional int32 playerCnt2 = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_playerCnt2:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &playercnt2_));
        _set_bit(8);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DB_C_GvgBtlRetSave::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    DB_C_GvgBtlRetSave::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional int32 winGuildID = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->winguildid(), output);
  }
  
  // optional int32 guildID1 = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->guildid1(), output);
  }
  
  // optional int32 guildID2 = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->guildid2(), output);
  }
  
  // optional int32 session = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->session(), output);
  }
  
  // optional int32 cityID = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->cityid(), output);
  }
  
  // optional int32 region = 6;
  if (_has_bit(5)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->region(), output);
  }
  
  // repeated .DB_C_GvgBtlRetWay retWay = 7;
  for (int i = 0; i < this->retway_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      7, this->retway(i), output);
  }
  
  // optional int32 playerCnt1 = 8;
  if (_has_bit(7)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->playercnt1(), output);
  }
  
  // optional int32 playerCnt2 = 9;
  if (_has_bit(8)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->playercnt2(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DB_C_GvgBtlRetSave::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 winGuildID = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->winguildid(), target);
  }
  
  // optional int32 guildID1 = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->guildid1(), target);
  }
  
  // optional int32 guildID2 = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->guildid2(), target);
  }
  
  // optional int32 session = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->session(), target);
  }
  
  // optional int32 cityID = 5;
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->cityid(), target);
  }
  
  // optional int32 region = 6;
  if (_has_bit(5)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->region(), target);
  }
  
  // repeated .DB_C_GvgBtlRetWay retWay = 7;
  for (int i = 0; i < this->retway_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->retway(i), target);
  }
  
  // optional int32 playerCnt1 = 8;
  if (_has_bit(7)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->playercnt1(), target);
  }
  
  // optional int32 playerCnt2 = 9;
  if (_has_bit(8)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->playercnt2(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DB_C_GvgBtlRetSave::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 winGuildID = 1;
    if (has_winguildid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->winguildid());
    }
    
    // optional int32 guildID1 = 2;
    if (has_guildid1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->guildid1());
    }
    
    // optional int32 guildID2 = 3;
    if (has_guildid2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->guildid2());
    }
    
    // optional int32 session = 4;
    if (has_session()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->session());
    }
    
    // optional int32 cityID = 5;
    if (has_cityid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cityid());
    }
    
    // optional int32 region = 6;
    if (has_region()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->region());
    }
    
    // optional int32 playerCnt1 = 8;
    if (has_playercnt1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->playercnt1());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 playerCnt2 = 9;
    if (has_playercnt2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->playercnt2());
    }
    
  }
  // repeated .DB_C_GvgBtlRetWay retWay = 7;
  total_size += 1 * this->retway_size();
  for (int i = 0; i < this->retway_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->retway(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void DB_C_GvgBtlRetSave::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DB_C_GvgBtlRetSave* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DB_C_GvgBtlRetSave*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DB_C_GvgBtlRetSave::MergeFrom(const DB_C_GvgBtlRetSave& from) {
  GOOGLE_CHECK_NE(&from, this);
  retway_.MergeFrom(from.retway_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_winguildid(from.winguildid());
    }
    if (from._has_bit(1)) {
      set_guildid1(from.guildid1());
    }
    if (from._has_bit(2)) {
      set_guildid2(from.guildid2());
    }
    if (from._has_bit(3)) {
      set_session(from.session());
    }
    if (from._has_bit(4)) {
      set_cityid(from.cityid());
    }
    if (from._has_bit(5)) {
      set_region(from.region());
    }
    if (from._has_bit(7)) {
      set_playercnt1(from.playercnt1());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from._has_bit(8)) {
      set_playercnt2(from.playercnt2());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DB_C_GvgBtlRetSave::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DB_C_GvgBtlRetSave::CopyFrom(const DB_C_GvgBtlRetSave& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DB_C_GvgBtlRetSave::IsInitialized() const {
  
  return true;
}

void DB_C_GvgBtlRetSave::Swap(DB_C_GvgBtlRetSave* other) {
  if (other != this) {
    std::swap(winguildid_, other->winguildid_);
    std::swap(guildid1_, other->guildid1_);
    std::swap(guildid2_, other->guildid2_);
    std::swap(session_, other->session_);
    std::swap(cityid_, other->cityid_);
    std::swap(region_, other->region_);
    retway_.Swap(&other->retway_);
    std::swap(playercnt1_, other->playercnt1_);
    std::swap(playercnt2_, other->playercnt2_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DB_C_GvgBtlRetSave::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DB_C_GvgBtlRetSave_descriptor_;
  metadata.reflection = DB_C_GvgBtlRetSave_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DB_C_GvgBtlRetWay::kWayFieldNumber;
const int DB_C_GvgBtlRetWay::kWinGuildIDFieldNumber;
const int DB_C_GvgBtlRetWay::kGuildID1FieldNumber;
const int DB_C_GvgBtlRetWay::kGuildID2FieldNumber;
const int DB_C_GvgBtlRetWay::kSessionFieldNumber;
const int DB_C_GvgBtlRetWay::kCityIDFieldNumber;
const int DB_C_GvgBtlRetWay::kUserLst1FieldNumber;
const int DB_C_GvgBtlRetWay::kUserLst2FieldNumber;
const int DB_C_GvgBtlRetWay::kPkLstFieldNumber;
#endif  // !_MSC_VER

DB_C_GvgBtlRetWay::DB_C_GvgBtlRetWay() {
  SharedCtor();
}

void DB_C_GvgBtlRetWay::InitAsDefaultInstance() {
}

DB_C_GvgBtlRetWay::DB_C_GvgBtlRetWay(const DB_C_GvgBtlRetWay& from) {
  SharedCtor();
  MergeFrom(from);
}

void DB_C_GvgBtlRetWay::SharedCtor() {
  _cached_size_ = 0;
  way_ = 0;
  winguildid_ = 0;
  guildid1_ = 0;
  guildid2_ = 0;
  session_ = 0;
  cityid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DB_C_GvgBtlRetWay::~DB_C_GvgBtlRetWay() {
  SharedDtor();
}

void DB_C_GvgBtlRetWay::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* DB_C_GvgBtlRetWay::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DB_C_GvgBtlRetWay_descriptor_;
}

const DB_C_GvgBtlRetWay& DB_C_GvgBtlRetWay::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_countryDB_2eproto();  return *default_instance_;
}

DB_C_GvgBtlRetWay* DB_C_GvgBtlRetWay::default_instance_ = NULL;

DB_C_GvgBtlRetWay* DB_C_GvgBtlRetWay::New() const {
  return new DB_C_GvgBtlRetWay;
}

void DB_C_GvgBtlRetWay::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    way_ = 0;
    winguildid_ = 0;
    guildid1_ = 0;
    guildid2_ = 0;
    session_ = 0;
    cityid_ = 0;
  }
  userlst1_.Clear();
  userlst2_.Clear();
  pklst_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DB_C_GvgBtlRetWay::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 way = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &way_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_winGuildID;
        break;
      }
      
      // optional int32 winGuildID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_winGuildID:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &winguildid_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_guildID1;
        break;
      }
      
      // optional int32 guildID1 = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_guildID1:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &guildid1_));
        _set_bit(2);
        if (input->ExpectTag(32)) goto parse_guildID2;
        break;
      }
      
      // optional int32 guildID2 = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_guildID2:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &guildid2_));
        _set_bit(3);
        if (input->ExpectTag(40)) goto parse_session;
        break;
      }
      
      // optional int32 session = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_session:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &session_));
        _set_bit(4);
        if (input->ExpectTag(48)) goto parse_cityID;
        break;
      }
      
      // optional int32 cityID = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_cityID:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &cityid_));
        _set_bit(5);
        if (input->ExpectTag(58)) goto parse_userLst1;
        break;
      }
      
      // repeated .DB_C_GuildBtlUser userLst1 = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_userLst1:
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, add_userlst1()));
        if (input->ExpectTag(58)) goto parse_userLst1;
        if (input->ExpectTag(66)) goto parse_userLst2;
        break;
      }
      
      // repeated .DB_C_GuildBtlUser userLst2 = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_userLst2:
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, add_userlst2()));
        if (input->ExpectTag(66)) goto parse_userLst2;
        if (input->ExpectTag(74)) goto parse_pkLst;
        break;
      }
      
      // repeated .DB_C_GuildBtlUserPK pkLst = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_pkLst:
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, add_pklst()));
        if (input->ExpectTag(74)) goto parse_pkLst;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DB_C_GvgBtlRetWay::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    DB_C_GvgBtlRetWay::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional int32 way = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->way(), output);
  }
  
  // optional int32 winGuildID = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->winguildid(), output);
  }
  
  // optional int32 guildID1 = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->guildid1(), output);
  }
  
  // optional int32 guildID2 = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->guildid2(), output);
  }
  
  // optional int32 session = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->session(), output);
  }
  
  // optional int32 cityID = 6;
  if (_has_bit(5)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->cityid(), output);
  }
  
  // repeated .DB_C_GuildBtlUser userLst1 = 7;
  for (int i = 0; i < this->userlst1_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      7, this->userlst1(i), output);
  }
  
  // repeated .DB_C_GuildBtlUser userLst2 = 8;
  for (int i = 0; i < this->userlst2_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      8, this->userlst2(i), output);
  }
  
  // repeated .DB_C_GuildBtlUserPK pkLst = 9;
  for (int i = 0; i < this->pklst_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      9, this->pklst(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DB_C_GvgBtlRetWay::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 way = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->way(), target);
  }
  
  // optional int32 winGuildID = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->winguildid(), target);
  }
  
  // optional int32 guildID1 = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->guildid1(), target);
  }
  
  // optional int32 guildID2 = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->guildid2(), target);
  }
  
  // optional int32 session = 5;
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->session(), target);
  }
  
  // optional int32 cityID = 6;
  if (_has_bit(5)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->cityid(), target);
  }
  
  // repeated .DB_C_GuildBtlUser userLst1 = 7;
  for (int i = 0; i < this->userlst1_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->userlst1(i), target);
  }
  
  // repeated .DB_C_GuildBtlUser userLst2 = 8;
  for (int i = 0; i < this->userlst2_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->userlst2(i), target);
  }
  
  // repeated .DB_C_GuildBtlUserPK pkLst = 9;
  for (int i = 0; i < this->pklst_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->pklst(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DB_C_GvgBtlRetWay::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 way = 1;
    if (has_way()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->way());
    }
    
    // optional int32 winGuildID = 2;
    if (has_winguildid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->winguildid());
    }
    
    // optional int32 guildID1 = 3;
    if (has_guildid1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->guildid1());
    }
    
    // optional int32 guildID2 = 4;
    if (has_guildid2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->guildid2());
    }
    
    // optional int32 session = 5;
    if (has_session()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->session());
    }
    
    // optional int32 cityID = 6;
    if (has_cityid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cityid());
    }
    
  }
  // repeated .DB_C_GuildBtlUser userLst1 = 7;
  total_size += 1 * this->userlst1_size();
  for (int i = 0; i < this->userlst1_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->userlst1(i));
  }
  
  // repeated .DB_C_GuildBtlUser userLst2 = 8;
  total_size += 1 * this->userlst2_size();
  for (int i = 0; i < this->userlst2_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->userlst2(i));
  }
  
  // repeated .DB_C_GuildBtlUserPK pkLst = 9;
  total_size += 1 * this->pklst_size();
  for (int i = 0; i < this->pklst_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->pklst(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void DB_C_GvgBtlRetWay::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DB_C_GvgBtlRetWay* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DB_C_GvgBtlRetWay*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DB_C_GvgBtlRetWay::MergeFrom(const DB_C_GvgBtlRetWay& from) {
  GOOGLE_CHECK_NE(&from, this);
  userlst1_.MergeFrom(from.userlst1_);
  userlst2_.MergeFrom(from.userlst2_);
  pklst_.MergeFrom(from.pklst_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_way(from.way());
    }
    if (from._has_bit(1)) {
      set_winguildid(from.winguildid());
    }
    if (from._has_bit(2)) {
      set_guildid1(from.guildid1());
    }
    if (from._has_bit(3)) {
      set_guildid2(from.guildid2());
    }
    if (from._has_bit(4)) {
      set_session(from.session());
    }
    if (from._has_bit(5)) {
      set_cityid(from.cityid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DB_C_GvgBtlRetWay::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DB_C_GvgBtlRetWay::CopyFrom(const DB_C_GvgBtlRetWay& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DB_C_GvgBtlRetWay::IsInitialized() const {
  
  return true;
}

void DB_C_GvgBtlRetWay::Swap(DB_C_GvgBtlRetWay* other) {
  if (other != this) {
    std::swap(way_, other->way_);
    std::swap(winguildid_, other->winguildid_);
    std::swap(guildid1_, other->guildid1_);
    std::swap(guildid2_, other->guildid2_);
    std::swap(session_, other->session_);
    std::swap(cityid_, other->cityid_);
    userlst1_.Swap(&other->userlst1_);
    userlst2_.Swap(&other->userlst2_);
    pklst_.Swap(&other->pklst_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DB_C_GvgBtlRetWay::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DB_C_GvgBtlRetWay_descriptor_;
  metadata.reflection = DB_C_GvgBtlRetWay_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DB_C_Gvg_FightSendData::kBtlUserFieldNumber;
const int DB_C_Gvg_FightSendData::kFightsenddataFieldNumber;
#endif  // !_MSC_VER

DB_C_Gvg_FightSendData::DB_C_Gvg_FightSendData() {
  SharedCtor();
}

void DB_C_Gvg_FightSendData::InitAsDefaultInstance() {
  btluser_ = const_cast< ::DB_C_GuildBtlUser*>(&::DB_C_GuildBtlUser::default_instance());
}

DB_C_Gvg_FightSendData::DB_C_Gvg_FightSendData(const DB_C_Gvg_FightSendData& from) {
  SharedCtor();
  MergeFrom(from);
}

void DB_C_Gvg_FightSendData::SharedCtor() {
  _cached_size_ = 0;
  btluser_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DB_C_Gvg_FightSendData::~DB_C_Gvg_FightSendData() {
  SharedDtor();
}

void DB_C_Gvg_FightSendData::SharedDtor() {
  if (this != default_instance_) {
    delete btluser_;
  }
}

const ::google::protobuf::Descriptor* DB_C_Gvg_FightSendData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DB_C_Gvg_FightSendData_descriptor_;
}

const DB_C_Gvg_FightSendData& DB_C_Gvg_FightSendData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_countryDB_2eproto();  return *default_instance_;
}

DB_C_Gvg_FightSendData* DB_C_Gvg_FightSendData::default_instance_ = NULL;

DB_C_Gvg_FightSendData* DB_C_Gvg_FightSendData::New() const {
  return new DB_C_Gvg_FightSendData;
}

void DB_C_Gvg_FightSendData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (btluser_ != NULL) btluser_->::DB_C_GuildBtlUser::Clear();
    }
  }
  fightsenddata_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DB_C_Gvg_FightSendData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .DB_C_GuildBtlUser btlUser = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
             input, mutable_btluser()));
        if (input->ExpectTag(18)) goto parse_fightsenddata;
        break;
      }
      
      // repeated .DB_C_GuildBtlSendDataUnit fightsenddata = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_fightsenddata:
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, add_fightsenddata()));
        if (input->ExpectTag(18)) goto parse_fightsenddata;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DB_C_Gvg_FightSendData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    DB_C_Gvg_FightSendData::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional .DB_C_GuildBtlUser btlUser = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      1, this->btluser(), output);
  }
  
  // repeated .DB_C_GuildBtlSendDataUnit fightsenddata = 2;
  for (int i = 0; i < this->fightsenddata_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      2, this->fightsenddata(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DB_C_Gvg_FightSendData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .DB_C_GuildBtlUser btlUser = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->btluser(), target);
  }
  
  // repeated .DB_C_GuildBtlSendDataUnit fightsenddata = 2;
  for (int i = 0; i < this->fightsenddata_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->fightsenddata(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DB_C_Gvg_FightSendData::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .DB_C_GuildBtlUser btlUser = 1;
    if (has_btluser()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->btluser());
    }
    
  }
  // repeated .DB_C_GuildBtlSendDataUnit fightsenddata = 2;
  total_size += 1 * this->fightsenddata_size();
  for (int i = 0; i < this->fightsenddata_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->fightsenddata(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void DB_C_Gvg_FightSendData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DB_C_Gvg_FightSendData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DB_C_Gvg_FightSendData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DB_C_Gvg_FightSendData::MergeFrom(const DB_C_Gvg_FightSendData& from) {
  GOOGLE_CHECK_NE(&from, this);
  fightsenddata_.MergeFrom(from.fightsenddata_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      mutable_btluser()->::DB_C_GuildBtlUser::MergeFrom(from.btluser());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DB_C_Gvg_FightSendData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DB_C_Gvg_FightSendData::CopyFrom(const DB_C_Gvg_FightSendData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DB_C_Gvg_FightSendData::IsInitialized() const {
  
  return true;
}

void DB_C_Gvg_FightSendData::Swap(DB_C_Gvg_FightSendData* other) {
  if (other != this) {
    std::swap(btluser_, other->btluser_);
    fightsenddata_.Swap(&other->fightsenddata_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DB_C_Gvg_FightSendData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DB_C_Gvg_FightSendData_descriptor_;
  metadata.reflection = DB_C_Gvg_FightSendData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DB_C_GVG_Msg::kFlagFieldNumber;
const int DB_C_GVG_Msg::kSignCityFieldNumber;
const int DB_C_GVG_Msg::kControlCityFieldNumber;
const int DB_C_GVG_Msg::kContributeFieldNumber;
const int DB_C_GVG_Msg::kUserWayFieldNumber;
const int DB_C_GVG_Msg::kAddPropFieldNumber;
const int DB_C_GVG_Msg::kFightEndFieldNumber;
const int DB_C_GVG_Msg::kLastContributeTimeFieldNumber;
const int DB_C_GVG_Msg::kStateFieldNumber;
const int DB_C_GVG_Msg::kContributeRecorcdFieldNumber;
const int DB_C_GVG_Msg::kRewardRecordFieldNumber;
const int DB_C_GVG_Msg::kPlayerIDFieldNumber;
#endif  // !_MSC_VER

DB_C_GVG_Msg::DB_C_GVG_Msg() {
  SharedCtor();
}

void DB_C_GVG_Msg::InitAsDefaultInstance() {
}

DB_C_GVG_Msg::DB_C_GVG_Msg(const DB_C_GVG_Msg& from) {
  SharedCtor();
  MergeFrom(from);
}

void DB_C_GVG_Msg::SharedCtor() {
  _cached_size_ = 0;
  flag_ = 0;
  controlcity_ = 0;
  contribute_ = 0;
  fightend_ = false;
  lastcontributetime_ = 0;
  state_ = 0;
  contributerecorcd_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DB_C_GVG_Msg::~DB_C_GVG_Msg() {
  SharedDtor();
}

void DB_C_GVG_Msg::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* DB_C_GVG_Msg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DB_C_GVG_Msg_descriptor_;
}

const DB_C_GVG_Msg& DB_C_GVG_Msg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_countryDB_2eproto();  return *default_instance_;
}

DB_C_GVG_Msg* DB_C_GVG_Msg::default_instance_ = NULL;

DB_C_GVG_Msg* DB_C_GVG_Msg::New() const {
  return new DB_C_GVG_Msg;
}

void DB_C_GVG_Msg::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    flag_ = 0;
    controlcity_ = 0;
    contribute_ = 0;
    fightend_ = false;
    lastcontributetime_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    state_ = 0;
    contributerecorcd_ = 0;
  }
  signcity_.Clear();
  userway_.Clear();
  addprop_.Clear();
  rewardrecord_.Clear();
  playerid_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DB_C_GVG_Msg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 flag = 1 [default = 0];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &flag_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_signCity;
        break;
      }
      
      // repeated int32 signCity = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_signCity:
        ::google::protobuf::int32 value;
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &value));
        add_signcity(value);
        if (input->ExpectTag(16)) goto parse_signCity;
        if (input->ExpectTag(24)) goto parse_controlCity;
        break;
      }
      
      // optional int32 controlCity = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_controlCity:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &controlcity_));
        _set_bit(2);
        if (input->ExpectTag(32)) goto parse_contribute;
        break;
      }
      
      // optional int32 contribute = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_contribute:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &contribute_));
        _set_bit(3);
        if (input->ExpectTag(42)) goto parse_userWay;
        break;
      }
      
      // repeated .DB_C_GvgBtlCityMsg userWay = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_userWay:
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, add_userway()));
        if (input->ExpectTag(42)) goto parse_userWay;
        if (input->ExpectTag(50)) goto parse_addProp;
        break;
      }
      
      // repeated .DB_C_GvgBtlAddProp addProp = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_addProp:
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, add_addprop()));
        if (input->ExpectTag(50)) goto parse_addProp;
        if (input->ExpectTag(56)) goto parse_fightEnd;
        break;
      }
      
      // optional bool fightEnd = 7 [default = false];
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_fightEnd:
        DO_(::google::protobuf::internal::WireFormatLite::ReadBool(
              input, &fightend_));
        _set_bit(6);
        if (input->ExpectTag(64)) goto parse_lastContributeTime;
        break;
      }
      
      // optional int32 lastContributeTime = 8 [default = 0];
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_lastContributeTime:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &lastcontributetime_));
        _set_bit(7);
        if (input->ExpectTag(72)) goto parse_state;
        break;
      }
      
      // optional int32 state = 9 [default = 0];
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_state:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &state_));
        _set_bit(8);
        if (input->ExpectTag(80)) goto parse_contributeRecorcd;
        break;
      }
      
      // optional int32 contributeRecorcd = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_contributeRecorcd:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &contributerecorcd_));
        _set_bit(9);
        if (input->ExpectTag(90)) goto parse_rewardRecord;
        break;
      }
      
      // repeated .DB_C_GVG_Reward_Record rewardRecord = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_rewardRecord:
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, add_rewardrecord()));
        if (input->ExpectTag(90)) goto parse_rewardRecord;
        if (input->ExpectTag(96)) goto parse_playerID;
        break;
      }
      
      // repeated int64 playerID = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_playerID:
        ::google::protobuf::int64 value;
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt64(
              input, &value));
        add_playerid(value);
        if (input->ExpectTag(96)) goto parse_playerID;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DB_C_GVG_Msg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    DB_C_GVG_Msg::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional int32 flag = 1 [default = 0];
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->flag(), output);
  }
  
  // repeated int32 signCity = 2;
  for (int i = 0; i < this->signcity_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      2, this->signcity(i), output);
  }
  
  // optional int32 controlCity = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->controlcity(), output);
  }
  
  // optional int32 contribute = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->contribute(), output);
  }
  
  // repeated .DB_C_GvgBtlCityMsg userWay = 5;
  for (int i = 0; i < this->userway_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      5, this->userway(i), output);
  }
  
  // repeated .DB_C_GvgBtlAddProp addProp = 6;
  for (int i = 0; i < this->addprop_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      6, this->addprop(i), output);
  }
  
  // optional bool fightEnd = 7 [default = false];
  if (_has_bit(6)) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->fightend(), output);
  }
  
  // optional int32 lastContributeTime = 8 [default = 0];
  if (_has_bit(7)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->lastcontributetime(), output);
  }
  
  // optional int32 state = 9 [default = 0];
  if (_has_bit(8)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->state(), output);
  }
  
  // optional int32 contributeRecorcd = 10;
  if (_has_bit(9)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->contributerecorcd(), output);
  }
  
  // repeated .DB_C_GVG_Reward_Record rewardRecord = 11;
  for (int i = 0; i < this->rewardrecord_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      11, this->rewardrecord(i), output);
  }
  
  // repeated int64 playerID = 12;
  for (int i = 0; i < this->playerid_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(
      12, this->playerid(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DB_C_GVG_Msg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 flag = 1 [default = 0];
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->flag(), target);
  }
  
  // repeated int32 signCity = 2;
  for (int i = 0; i < this->signcity_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(2, this->signcity(i), target);
  }
  
  // optional int32 controlCity = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->controlcity(), target);
  }
  
  // optional int32 contribute = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->contribute(), target);
  }
  
  // repeated .DB_C_GvgBtlCityMsg userWay = 5;
  for (int i = 0; i < this->userway_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->userway(i), target);
  }
  
  // repeated .DB_C_GvgBtlAddProp addProp = 6;
  for (int i = 0; i < this->addprop_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->addprop(i), target);
  }
  
  // optional bool fightEnd = 7 [default = false];
  if (_has_bit(6)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->fightend(), target);
  }
  
  // optional int32 lastContributeTime = 8 [default = 0];
  if (_has_bit(7)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->lastcontributetime(), target);
  }
  
  // optional int32 state = 9 [default = 0];
  if (_has_bit(8)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->state(), target);
  }
  
  // optional int32 contributeRecorcd = 10;
  if (_has_bit(9)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->contributerecorcd(), target);
  }
  
  // repeated .DB_C_GVG_Reward_Record rewardRecord = 11;
  for (int i = 0; i < this->rewardrecord_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        11, this->rewardrecord(i), target);
  }
  
  // repeated int64 playerID = 12;
  for (int i = 0; i < this->playerid_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt64ToArray(12, this->playerid(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DB_C_GVG_Msg::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 flag = 1 [default = 0];
    if (has_flag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->flag());
    }
    
    // optional int32 controlCity = 3;
    if (has_controlcity()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->controlcity());
    }
    
    // optional int32 contribute = 4;
    if (has_contribute()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->contribute());
    }
    
    // optional bool fightEnd = 7 [default = false];
    if (has_fightend()) {
      total_size += 1 + 1;
    }
    
    // optional int32 lastContributeTime = 8 [default = 0];
    if (has_lastcontributetime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->lastcontributetime());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 state = 9 [default = 0];
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->state());
    }
    
    // optional int32 contributeRecorcd = 10;
    if (has_contributerecorcd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->contributerecorcd());
    }
    
  }
  // repeated int32 signCity = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->signcity_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->signcity(i));
    }
    total_size += 1 * this->signcity_size() + data_size;
  }
  
  // repeated .DB_C_GvgBtlCityMsg userWay = 5;
  total_size += 1 * this->userway_size();
  for (int i = 0; i < this->userway_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->userway(i));
  }
  
  // repeated .DB_C_GvgBtlAddProp addProp = 6;
  total_size += 1 * this->addprop_size();
  for (int i = 0; i < this->addprop_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->addprop(i));
  }
  
  // repeated .DB_C_GVG_Reward_Record rewardRecord = 11;
  total_size += 1 * this->rewardrecord_size();
  for (int i = 0; i < this->rewardrecord_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->rewardrecord(i));
  }
  
  // repeated int64 playerID = 12;
  {
    int data_size = 0;
    for (int i = 0; i < this->playerid_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int64Size(this->playerid(i));
    }
    total_size += 1 * this->playerid_size() + data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void DB_C_GVG_Msg::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DB_C_GVG_Msg* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DB_C_GVG_Msg*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DB_C_GVG_Msg::MergeFrom(const DB_C_GVG_Msg& from) {
  GOOGLE_CHECK_NE(&from, this);
  signcity_.MergeFrom(from.signcity_);
  userway_.MergeFrom(from.userway_);
  addprop_.MergeFrom(from.addprop_);
  rewardrecord_.MergeFrom(from.rewardrecord_);
  playerid_.MergeFrom(from.playerid_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_flag(from.flag());
    }
    if (from._has_bit(2)) {
      set_controlcity(from.controlcity());
    }
    if (from._has_bit(3)) {
      set_contribute(from.contribute());
    }
    if (from._has_bit(6)) {
      set_fightend(from.fightend());
    }
    if (from._has_bit(7)) {
      set_lastcontributetime(from.lastcontributetime());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from._has_bit(8)) {
      set_state(from.state());
    }
    if (from._has_bit(9)) {
      set_contributerecorcd(from.contributerecorcd());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DB_C_GVG_Msg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DB_C_GVG_Msg::CopyFrom(const DB_C_GVG_Msg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DB_C_GVG_Msg::IsInitialized() const {
  
  return true;
}

void DB_C_GVG_Msg::Swap(DB_C_GVG_Msg* other) {
  if (other != this) {
    std::swap(flag_, other->flag_);
    signcity_.Swap(&other->signcity_);
    std::swap(controlcity_, other->controlcity_);
    std::swap(contribute_, other->contribute_);
    userway_.Swap(&other->userway_);
    addprop_.Swap(&other->addprop_);
    std::swap(fightend_, other->fightend_);
    std::swap(lastcontributetime_, other->lastcontributetime_);
    std::swap(state_, other->state_);
    std::swap(contributerecorcd_, other->contributerecorcd_);
    rewardrecord_.Swap(&other->rewardrecord_);
    playerid_.Swap(&other->playerid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DB_C_GVG_Msg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DB_C_GVG_Msg_descriptor_;
  metadata.reflection = DB_C_GVG_Msg_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DB_C_GvgBtlCityMsg::kCityIDFieldNumber;
const int DB_C_GvgBtlCityMsg::kUserWay1FieldNumber;
const int DB_C_GvgBtlCityMsg::kSignupCntFieldNumber;
const int DB_C_GvgBtlCityMsg::kSessionFieldNumber;
#endif  // !_MSC_VER

DB_C_GvgBtlCityMsg::DB_C_GvgBtlCityMsg() {
  SharedCtor();
}

void DB_C_GvgBtlCityMsg::InitAsDefaultInstance() {
}

DB_C_GvgBtlCityMsg::DB_C_GvgBtlCityMsg(const DB_C_GvgBtlCityMsg& from) {
  SharedCtor();
  MergeFrom(from);
}

void DB_C_GvgBtlCityMsg::SharedCtor() {
  _cached_size_ = 0;
  cityid_ = 0;
  signupcnt_ = 0;
  session_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DB_C_GvgBtlCityMsg::~DB_C_GvgBtlCityMsg() {
  SharedDtor();
}

void DB_C_GvgBtlCityMsg::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* DB_C_GvgBtlCityMsg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DB_C_GvgBtlCityMsg_descriptor_;
}

const DB_C_GvgBtlCityMsg& DB_C_GvgBtlCityMsg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_countryDB_2eproto();  return *default_instance_;
}

DB_C_GvgBtlCityMsg* DB_C_GvgBtlCityMsg::default_instance_ = NULL;

DB_C_GvgBtlCityMsg* DB_C_GvgBtlCityMsg::New() const {
  return new DB_C_GvgBtlCityMsg;
}

void DB_C_GvgBtlCityMsg::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    cityid_ = 0;
    signupcnt_ = 0;
    session_ = 0;
  }
  userway1_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DB_C_GvgBtlCityMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 cityID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &cityid_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_userWay1;
        break;
      }
      
      // repeated int64 userWay1 = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_userWay1:
        ::google::protobuf::int64 value;
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt64(
              input, &value));
        add_userway1(value);
        if (input->ExpectTag(16)) goto parse_userWay1;
        if (input->ExpectTag(24)) goto parse_signupCnt;
        break;
      }
      
      // optional int32 signupCnt = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_signupCnt:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &signupcnt_));
        _set_bit(2);
        if (input->ExpectTag(32)) goto parse_session;
        break;
      }
      
      // optional int32 session = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_session:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &session_));
        _set_bit(3);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DB_C_GvgBtlCityMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    DB_C_GvgBtlCityMsg::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional int32 cityID = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->cityid(), output);
  }
  
  // repeated int64 userWay1 = 2;
  for (int i = 0; i < this->userway1_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(
      2, this->userway1(i), output);
  }
  
  // optional int32 signupCnt = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->signupcnt(), output);
  }
  
  // optional int32 session = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->session(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DB_C_GvgBtlCityMsg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 cityID = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->cityid(), target);
  }
  
  // repeated int64 userWay1 = 2;
  for (int i = 0; i < this->userway1_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt64ToArray(2, this->userway1(i), target);
  }
  
  // optional int32 signupCnt = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->signupcnt(), target);
  }
  
  // optional int32 session = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->session(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DB_C_GvgBtlCityMsg::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 cityID = 1;
    if (has_cityid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cityid());
    }
    
    // optional int32 signupCnt = 3;
    if (has_signupcnt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->signupcnt());
    }
    
    // optional int32 session = 4;
    if (has_session()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->session());
    }
    
  }
  // repeated int64 userWay1 = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->userway1_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int64Size(this->userway1(i));
    }
    total_size += 1 * this->userway1_size() + data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void DB_C_GvgBtlCityMsg::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DB_C_GvgBtlCityMsg* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DB_C_GvgBtlCityMsg*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DB_C_GvgBtlCityMsg::MergeFrom(const DB_C_GvgBtlCityMsg& from) {
  GOOGLE_CHECK_NE(&from, this);
  userway1_.MergeFrom(from.userway1_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_cityid(from.cityid());
    }
    if (from._has_bit(2)) {
      set_signupcnt(from.signupcnt());
    }
    if (from._has_bit(3)) {
      set_session(from.session());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DB_C_GvgBtlCityMsg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DB_C_GvgBtlCityMsg::CopyFrom(const DB_C_GvgBtlCityMsg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DB_C_GvgBtlCityMsg::IsInitialized() const {
  
  return true;
}

void DB_C_GvgBtlCityMsg::Swap(DB_C_GvgBtlCityMsg* other) {
  if (other != this) {
    std::swap(cityid_, other->cityid_);
    userway1_.Swap(&other->userway1_);
    std::swap(signupcnt_, other->signupcnt_);
    std::swap(session_, other->session_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DB_C_GvgBtlCityMsg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DB_C_GvgBtlCityMsg_descriptor_;
  metadata.reflection = DB_C_GvgBtlCityMsg_reflection_;
  return metadata;
}


// ===================================================================

const ::std::string DB_C_GvgBtlAddProp::_default_name_;
const ::std::string DB_C_GvgBtlAddProp::_default_pic_;
#ifndef _MSC_VER
const int DB_C_GvgBtlAddProp::kUserIDFieldNumber;
const int DB_C_GvgBtlAddProp::kAddAtkPctFieldNumber;
const int DB_C_GvgBtlAddProp::kAddBloodPctFieldNumber;
const int DB_C_GvgBtlAddProp::kMaxWinTimeFieldNumber;
const int DB_C_GvgBtlAddProp::kWinTimeFieldNumber;
const int DB_C_GvgBtlAddProp::kLeftHPFieldNumber;
const int DB_C_GvgBtlAddProp::kSessionFieldNumber;
const int DB_C_GvgBtlAddProp::kNameFieldNumber;
const int DB_C_GvgBtlAddProp::kPicFieldNumber;
const int DB_C_GvgBtlAddProp::kIsOffLineFieldNumber;
#endif  // !_MSC_VER

DB_C_GvgBtlAddProp::DB_C_GvgBtlAddProp() {
  SharedCtor();
}

void DB_C_GvgBtlAddProp::InitAsDefaultInstance() {
}

DB_C_GvgBtlAddProp::DB_C_GvgBtlAddProp(const DB_C_GvgBtlAddProp& from) {
  SharedCtor();
  MergeFrom(from);
}

void DB_C_GvgBtlAddProp::SharedCtor() {
  _cached_size_ = 0;
  userid_ = GOOGLE_LONGLONG(0);
  addatkpct_ = 0;
  addbloodpct_ = 0;
  maxwintime_ = 0;
  wintime_ = 0;
  lefthp_ = 0;
  session_ = 0;
  name_ = const_cast< ::std::string*>(&_default_name_);
  pic_ = const_cast< ::std::string*>(&_default_pic_);
  isoffline_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DB_C_GvgBtlAddProp::~DB_C_GvgBtlAddProp() {
  SharedDtor();
}

void DB_C_GvgBtlAddProp::SharedDtor() {
  if (name_ != &_default_name_) {
    delete name_;
  }
  if (pic_ != &_default_pic_) {
    delete pic_;
  }
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* DB_C_GvgBtlAddProp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DB_C_GvgBtlAddProp_descriptor_;
}

const DB_C_GvgBtlAddProp& DB_C_GvgBtlAddProp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_countryDB_2eproto();  return *default_instance_;
}

DB_C_GvgBtlAddProp* DB_C_GvgBtlAddProp::default_instance_ = NULL;

DB_C_GvgBtlAddProp* DB_C_GvgBtlAddProp::New() const {
  return new DB_C_GvgBtlAddProp;
}

void DB_C_GvgBtlAddProp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    userid_ = GOOGLE_LONGLONG(0);
    addatkpct_ = 0;
    addbloodpct_ = 0;
    maxwintime_ = 0;
    wintime_ = 0;
    lefthp_ = 0;
    session_ = 0;
    if (_has_bit(7)) {
      if (name_ != &_default_name_) {
        name_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (_has_bit(8)) {
      if (pic_ != &_default_pic_) {
        pic_->clear();
      }
    }
    isoffline_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DB_C_GvgBtlAddProp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 userID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt64(
              input, &userid_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_addAtkPct;
        break;
      }
      
      // optional int32 addAtkPct = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_addAtkPct:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &addatkpct_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_addBloodPct;
        break;
      }
      
      // optional int32 addBloodPct = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_addBloodPct:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &addbloodpct_));
        _set_bit(2);
        if (input->ExpectTag(32)) goto parse_maxWinTime;
        break;
      }
      
      // optional int32 maxWinTime = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_maxWinTime:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &maxwintime_));
        _set_bit(3);
        if (input->ExpectTag(40)) goto parse_winTime;
        break;
      }
      
      // optional int32 winTime = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_winTime:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &wintime_));
        _set_bit(4);
        if (input->ExpectTag(48)) goto parse_leftHP;
        break;
      }
      
      // optional int32 leftHP = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_leftHP:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &lefthp_));
        _set_bit(5);
        if (input->ExpectTag(56)) goto parse_session;
        break;
      }
      
      // optional int32 session = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_session:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &session_));
        _set_bit(6);
        if (input->ExpectTag(66)) goto parse_name;
        break;
      }
      
      // optional string name = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_name:
        DO_(::google::protobuf::internal::WireFormatLite::ReadString(
              input, this->mutable_name()));
        ::google::protobuf::internal::WireFormat::VerifyUTF8String(
          this->name().data(), this->name().length(),
          ::google::protobuf::internal::WireFormat::PARSE);
        if (input->ExpectTag(74)) goto parse_pic;
        break;
      }
      
      // optional string pic = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_pic:
        DO_(::google::protobuf::internal::WireFormatLite::ReadString(
              input, this->mutable_pic()));
        ::google::protobuf::internal::WireFormat::VerifyUTF8String(
          this->pic().data(), this->pic().length(),
          ::google::protobuf::internal::WireFormat::PARSE);
        if (input->ExpectTag(80)) goto parse_isOffLine;
        break;
      }
      
      // optional bool isOffLine = 10 [default = false];
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_isOffLine:
        DO_(::google::protobuf::internal::WireFormatLite::ReadBool(
              input, &isoffline_));
        _set_bit(9);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DB_C_GvgBtlAddProp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    DB_C_GvgBtlAddProp::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional int64 userID = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->userid(), output);
  }
  
  // optional int32 addAtkPct = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->addatkpct(), output);
  }
  
  // optional int32 addBloodPct = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->addbloodpct(), output);
  }
  
  // optional int32 maxWinTime = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->maxwintime(), output);
  }
  
  // optional int32 winTime = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->wintime(), output);
  }
  
  // optional int32 leftHP = 6;
  if (_has_bit(5)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->lefthp(), output);
  }
  
  // optional int32 session = 7;
  if (_has_bit(6)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->session(), output);
  }
  
  // optional string name = 8;
  if (_has_bit(7)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      8, this->name(), output);
  }
  
  // optional string pic = 9;
  if (_has_bit(8)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->pic().data(), this->pic().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      9, this->pic(), output);
  }
  
  // optional bool isOffLine = 10 [default = false];
  if (_has_bit(9)) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(10, this->isoffline(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DB_C_GvgBtlAddProp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int64 userID = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->userid(), target);
  }
  
  // optional int32 addAtkPct = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->addatkpct(), target);
  }
  
  // optional int32 addBloodPct = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->addbloodpct(), target);
  }
  
  // optional int32 maxWinTime = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->maxwintime(), target);
  }
  
  // optional int32 winTime = 5;
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->wintime(), target);
  }
  
  // optional int32 leftHP = 6;
  if (_has_bit(5)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->lefthp(), target);
  }
  
  // optional int32 session = 7;
  if (_has_bit(6)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->session(), target);
  }
  
  // optional string name = 8;
  if (_has_bit(7)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->name(), target);
  }
  
  // optional string pic = 9;
  if (_has_bit(8)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->pic().data(), this->pic().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->pic(), target);
  }
  
  // optional bool isOffLine = 10 [default = false];
  if (_has_bit(9)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(10, this->isoffline(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DB_C_GvgBtlAddProp::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 userID = 1;
    if (has_userid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->userid());
    }
    
    // optional int32 addAtkPct = 2;
    if (has_addatkpct()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->addatkpct());
    }
    
    // optional int32 addBloodPct = 3;
    if (has_addbloodpct()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->addbloodpct());
    }
    
    // optional int32 maxWinTime = 4;
    if (has_maxwintime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->maxwintime());
    }
    
    // optional int32 winTime = 5;
    if (has_wintime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->wintime());
    }
    
    // optional int32 leftHP = 6;
    if (has_lefthp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->lefthp());
    }
    
    // optional int32 session = 7;
    if (has_session()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->session());
    }
    
    // optional string name = 8;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional string pic = 9;
    if (has_pic()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->pic());
    }
    
    // optional bool isOffLine = 10 [default = false];
    if (has_isoffline()) {
      total_size += 1 + 1;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void DB_C_GvgBtlAddProp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DB_C_GvgBtlAddProp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DB_C_GvgBtlAddProp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DB_C_GvgBtlAddProp::MergeFrom(const DB_C_GvgBtlAddProp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_userid(from.userid());
    }
    if (from._has_bit(1)) {
      set_addatkpct(from.addatkpct());
    }
    if (from._has_bit(2)) {
      set_addbloodpct(from.addbloodpct());
    }
    if (from._has_bit(3)) {
      set_maxwintime(from.maxwintime());
    }
    if (from._has_bit(4)) {
      set_wintime(from.wintime());
    }
    if (from._has_bit(5)) {
      set_lefthp(from.lefthp());
    }
    if (from._has_bit(6)) {
      set_session(from.session());
    }
    if (from._has_bit(7)) {
      set_name(from.name());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from._has_bit(8)) {
      set_pic(from.pic());
    }
    if (from._has_bit(9)) {
      set_isoffline(from.isoffline());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DB_C_GvgBtlAddProp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DB_C_GvgBtlAddProp::CopyFrom(const DB_C_GvgBtlAddProp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DB_C_GvgBtlAddProp::IsInitialized() const {
  
  return true;
}

void DB_C_GvgBtlAddProp::Swap(DB_C_GvgBtlAddProp* other) {
  if (other != this) {
    std::swap(userid_, other->userid_);
    std::swap(addatkpct_, other->addatkpct_);
    std::swap(addbloodpct_, other->addbloodpct_);
    std::swap(maxwintime_, other->maxwintime_);
    std::swap(wintime_, other->wintime_);
    std::swap(lefthp_, other->lefthp_);
    std::swap(session_, other->session_);
    std::swap(name_, other->name_);
    std::swap(pic_, other->pic_);
    std::swap(isoffline_, other->isoffline_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DB_C_GvgBtlAddProp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DB_C_GvgBtlAddProp_descriptor_;
  metadata.reflection = DB_C_GvgBtlAddProp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DB_C_PubGvgBtlInfo::kCurSessionFieldNumber;
const int DB_C_PubGvgBtlInfo::kFlagFieldNumber;
const int DB_C_PubGvgBtlInfo::kFightOverFieldNumber;
#endif  // !_MSC_VER

DB_C_PubGvgBtlInfo::DB_C_PubGvgBtlInfo() {
  SharedCtor();
}

void DB_C_PubGvgBtlInfo::InitAsDefaultInstance() {
}

DB_C_PubGvgBtlInfo::DB_C_PubGvgBtlInfo(const DB_C_PubGvgBtlInfo& from) {
  SharedCtor();
  MergeFrom(from);
}

void DB_C_PubGvgBtlInfo::SharedCtor() {
  _cached_size_ = 0;
  cursession_ = 0;
  flag_ = 0;
  fightover_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DB_C_PubGvgBtlInfo::~DB_C_PubGvgBtlInfo() {
  SharedDtor();
}

void DB_C_PubGvgBtlInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* DB_C_PubGvgBtlInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DB_C_PubGvgBtlInfo_descriptor_;
}

const DB_C_PubGvgBtlInfo& DB_C_PubGvgBtlInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_countryDB_2eproto();  return *default_instance_;
}

DB_C_PubGvgBtlInfo* DB_C_PubGvgBtlInfo::default_instance_ = NULL;

DB_C_PubGvgBtlInfo* DB_C_PubGvgBtlInfo::New() const {
  return new DB_C_PubGvgBtlInfo;
}

void DB_C_PubGvgBtlInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    cursession_ = 0;
    flag_ = 0;
    fightover_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DB_C_PubGvgBtlInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 curSession = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &cursession_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_flag;
        break;
      }
      
      // optional int32 flag = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_flag:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &flag_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_fightOver;
        break;
      }
      
      // optional bool fightOver = 3 [default = false];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_fightOver:
        DO_(::google::protobuf::internal::WireFormatLite::ReadBool(
              input, &fightover_));
        _set_bit(2);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DB_C_PubGvgBtlInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    DB_C_PubGvgBtlInfo::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional int32 curSession = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->cursession(), output);
  }
  
  // optional int32 flag = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->flag(), output);
  }
  
  // optional bool fightOver = 3 [default = false];
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->fightover(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DB_C_PubGvgBtlInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 curSession = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->cursession(), target);
  }
  
  // optional int32 flag = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->flag(), target);
  }
  
  // optional bool fightOver = 3 [default = false];
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->fightover(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DB_C_PubGvgBtlInfo::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 curSession = 1;
    if (has_cursession()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cursession());
    }
    
    // optional int32 flag = 2;
    if (has_flag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->flag());
    }
    
    // optional bool fightOver = 3 [default = false];
    if (has_fightover()) {
      total_size += 1 + 1;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void DB_C_PubGvgBtlInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DB_C_PubGvgBtlInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DB_C_PubGvgBtlInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DB_C_PubGvgBtlInfo::MergeFrom(const DB_C_PubGvgBtlInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_cursession(from.cursession());
    }
    if (from._has_bit(1)) {
      set_flag(from.flag());
    }
    if (from._has_bit(2)) {
      set_fightover(from.fightover());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DB_C_PubGvgBtlInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DB_C_PubGvgBtlInfo::CopyFrom(const DB_C_PubGvgBtlInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DB_C_PubGvgBtlInfo::IsInitialized() const {
  
  return true;
}

void DB_C_PubGvgBtlInfo::Swap(DB_C_PubGvgBtlInfo* other) {
  if (other != this) {
    std::swap(cursession_, other->cursession_);
    std::swap(flag_, other->flag_);
    std::swap(fightover_, other->fightover_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DB_C_PubGvgBtlInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DB_C_PubGvgBtlInfo_descriptor_;
  metadata.reflection = DB_C_PubGvgBtlInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DB_C_GVG_Reward_Record::kPosFieldNumber;
const int DB_C_GVG_Reward_Record::kCntFieldNumber;
#endif  // !_MSC_VER

DB_C_GVG_Reward_Record::DB_C_GVG_Reward_Record() {
  SharedCtor();
}

void DB_C_GVG_Reward_Record::InitAsDefaultInstance() {
}

DB_C_GVG_Reward_Record::DB_C_GVG_Reward_Record(const DB_C_GVG_Reward_Record& from) {
  SharedCtor();
  MergeFrom(from);
}

void DB_C_GVG_Reward_Record::SharedCtor() {
  _cached_size_ = 0;
  pos_ = 0;
  cnt_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DB_C_GVG_Reward_Record::~DB_C_GVG_Reward_Record() {
  SharedDtor();
}

void DB_C_GVG_Reward_Record::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* DB_C_GVG_Reward_Record::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DB_C_GVG_Reward_Record_descriptor_;
}

const DB_C_GVG_Reward_Record& DB_C_GVG_Reward_Record::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_countryDB_2eproto();  return *default_instance_;
}

DB_C_GVG_Reward_Record* DB_C_GVG_Reward_Record::default_instance_ = NULL;

DB_C_GVG_Reward_Record* DB_C_GVG_Reward_Record::New() const {
  return new DB_C_GVG_Reward_Record;
}

void DB_C_GVG_Reward_Record::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    pos_ = 0;
    cnt_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DB_C_GVG_Reward_Record::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 pos = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &pos_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_cnt;
        break;
      }
      
      // optional int32 cnt = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_cnt:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &cnt_));
        _set_bit(1);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DB_C_GVG_Reward_Record::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    DB_C_GVG_Reward_Record::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional int32 pos = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->pos(), output);
  }
  
  // optional int32 cnt = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->cnt(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DB_C_GVG_Reward_Record::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 pos = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->pos(), target);
  }
  
  // optional int32 cnt = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->cnt(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DB_C_GVG_Reward_Record::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 pos = 1;
    if (has_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pos());
    }
    
    // optional int32 cnt = 2;
    if (has_cnt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cnt());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void DB_C_GVG_Reward_Record::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DB_C_GVG_Reward_Record* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DB_C_GVG_Reward_Record*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DB_C_GVG_Reward_Record::MergeFrom(const DB_C_GVG_Reward_Record& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_pos(from.pos());
    }
    if (from._has_bit(1)) {
      set_cnt(from.cnt());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DB_C_GVG_Reward_Record::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DB_C_GVG_Reward_Record::CopyFrom(const DB_C_GVG_Reward_Record& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DB_C_GVG_Reward_Record::IsInitialized() const {
  
  return true;
}

void DB_C_GVG_Reward_Record::Swap(DB_C_GVG_Reward_Record* other) {
  if (other != this) {
    std::swap(pos_, other->pos_);
    std::swap(cnt_, other->cnt_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DB_C_GVG_Reward_Record::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DB_C_GVG_Reward_Record_descriptor_;
  metadata.reflection = DB_C_GVG_Reward_Record_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DB_C_WpcRank::kNowRankFieldNumber;
const int DB_C_WpcRank::kLastRankFieldNumber;
const int DB_C_WpcRank::kActiveIDFieldNumber;
#endif  // !_MSC_VER

DB_C_WpcRank::DB_C_WpcRank() {
  SharedCtor();
}

void DB_C_WpcRank::InitAsDefaultInstance() {
}

DB_C_WpcRank::DB_C_WpcRank(const DB_C_WpcRank& from) {
  SharedCtor();
  MergeFrom(from);
}

void DB_C_WpcRank::SharedCtor() {
  _cached_size_ = 0;
  activeid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DB_C_WpcRank::~DB_C_WpcRank() {
  SharedDtor();
}

void DB_C_WpcRank::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* DB_C_WpcRank::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DB_C_WpcRank_descriptor_;
}

const DB_C_WpcRank& DB_C_WpcRank::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_countryDB_2eproto();  return *default_instance_;
}

DB_C_WpcRank* DB_C_WpcRank::default_instance_ = NULL;

DB_C_WpcRank* DB_C_WpcRank::New() const {
  return new DB_C_WpcRank;
}

void DB_C_WpcRank::Clear() {
  if (_has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    activeid_ = 0;
  }
  nowrank_.Clear();
  lastrank_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DB_C_WpcRank::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .DB_C_WpcRankUnit nowRank = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_nowRank:
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, add_nowrank()));
        if (input->ExpectTag(10)) goto parse_nowRank;
        if (input->ExpectTag(18)) goto parse_lastRank;
        break;
      }
      
      // repeated .DB_C_WpcRankUnit lastRank = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_lastRank:
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, add_lastrank()));
        if (input->ExpectTag(18)) goto parse_lastRank;
        if (input->ExpectTag(24)) goto parse_activeID;
        break;
      }
      
      // optional int32 activeID = 3 [default = 0];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_activeID:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &activeid_));
        _set_bit(2);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DB_C_WpcRank::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    DB_C_WpcRank::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // repeated .DB_C_WpcRankUnit nowRank = 1;
  for (int i = 0; i < this->nowrank_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      1, this->nowrank(i), output);
  }
  
  // repeated .DB_C_WpcRankUnit lastRank = 2;
  for (int i = 0; i < this->lastrank_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      2, this->lastrank(i), output);
  }
  
  // optional int32 activeID = 3 [default = 0];
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->activeid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DB_C_WpcRank::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .DB_C_WpcRankUnit nowRank = 1;
  for (int i = 0; i < this->nowrank_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->nowrank(i), target);
  }
  
  // repeated .DB_C_WpcRankUnit lastRank = 2;
  for (int i = 0; i < this->lastrank_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->lastrank(i), target);
  }
  
  // optional int32 activeID = 3 [default = 0];
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->activeid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DB_C_WpcRank::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    // optional int32 activeID = 3 [default = 0];
    if (has_activeid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->activeid());
    }
    
  }
  // repeated .DB_C_WpcRankUnit nowRank = 1;
  total_size += 1 * this->nowrank_size();
  for (int i = 0; i < this->nowrank_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->nowrank(i));
  }
  
  // repeated .DB_C_WpcRankUnit lastRank = 2;
  total_size += 1 * this->lastrank_size();
  for (int i = 0; i < this->lastrank_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->lastrank(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void DB_C_WpcRank::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DB_C_WpcRank* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DB_C_WpcRank*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DB_C_WpcRank::MergeFrom(const DB_C_WpcRank& from) {
  GOOGLE_CHECK_NE(&from, this);
  nowrank_.MergeFrom(from.nowrank_);
  lastrank_.MergeFrom(from.lastrank_);
  if (from._has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    if (from._has_bit(2)) {
      set_activeid(from.activeid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DB_C_WpcRank::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DB_C_WpcRank::CopyFrom(const DB_C_WpcRank& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DB_C_WpcRank::IsInitialized() const {
  
  return true;
}

void DB_C_WpcRank::Swap(DB_C_WpcRank* other) {
  if (other != this) {
    nowrank_.Swap(&other->nowrank_);
    lastrank_.Swap(&other->lastrank_);
    std::swap(activeid_, other->activeid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DB_C_WpcRank::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DB_C_WpcRank_descriptor_;
  metadata.reflection = DB_C_WpcRank_reflection_;
  return metadata;
}


// ===================================================================

const ::std::string DB_C_WpcRankUnit::_default_uid_;
const ::std::string DB_C_WpcRankUnit::_default_name_;
const ::std::string DB_C_WpcRankUnit::_default_pic_;
const ::std::string DB_C_WpcRankUnit::_default_guildname_;
#ifndef _MSC_VER
const int DB_C_WpcRankUnit::kUidFieldNumber;
const int DB_C_WpcRankUnit::kNameFieldNumber;
const int DB_C_WpcRankUnit::kPicFieldNumber;
const int DB_C_WpcRankUnit::kCountryidFieldNumber;
const int DB_C_WpcRankUnit::kGuildNameFieldNumber;
const int DB_C_WpcRankUnit::kFightPointFieldNumber;
const int DB_C_WpcRankUnit::kLevelFieldNumber;
const int DB_C_WpcRankUnit::kExploreCntFieldNumber;
#endif  // !_MSC_VER

DB_C_WpcRankUnit::DB_C_WpcRankUnit() {
  SharedCtor();
}

void DB_C_WpcRankUnit::InitAsDefaultInstance() {
}

DB_C_WpcRankUnit::DB_C_WpcRankUnit(const DB_C_WpcRankUnit& from) {
  SharedCtor();
  MergeFrom(from);
}

void DB_C_WpcRankUnit::SharedCtor() {
  _cached_size_ = 0;
  uid_ = const_cast< ::std::string*>(&_default_uid_);
  name_ = const_cast< ::std::string*>(&_default_name_);
  pic_ = const_cast< ::std::string*>(&_default_pic_);
  countryid_ = 0;
  guildname_ = const_cast< ::std::string*>(&_default_guildname_);
  fightpoint_ = 0;
  level_ = 0;
  explorecnt_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DB_C_WpcRankUnit::~DB_C_WpcRankUnit() {
  SharedDtor();
}

void DB_C_WpcRankUnit::SharedDtor() {
  if (uid_ != &_default_uid_) {
    delete uid_;
  }
  if (name_ != &_default_name_) {
    delete name_;
  }
  if (pic_ != &_default_pic_) {
    delete pic_;
  }
  if (guildname_ != &_default_guildname_) {
    delete guildname_;
  }
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* DB_C_WpcRankUnit::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DB_C_WpcRankUnit_descriptor_;
}

const DB_C_WpcRankUnit& DB_C_WpcRankUnit::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_countryDB_2eproto();  return *default_instance_;
}

DB_C_WpcRankUnit* DB_C_WpcRankUnit::default_instance_ = NULL;

DB_C_WpcRankUnit* DB_C_WpcRankUnit::New() const {
  return new DB_C_WpcRankUnit;
}

void DB_C_WpcRankUnit::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (uid_ != &_default_uid_) {
        uid_->clear();
      }
    }
    if (_has_bit(1)) {
      if (name_ != &_default_name_) {
        name_->clear();
      }
    }
    if (_has_bit(2)) {
      if (pic_ != &_default_pic_) {
        pic_->clear();
      }
    }
    countryid_ = 0;
    if (_has_bit(4)) {
      if (guildname_ != &_default_guildname_) {
        guildname_->clear();
      }
    }
    fightpoint_ = 0;
    level_ = 0;
    explorecnt_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DB_C_WpcRankUnit::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string uid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadString(
              input, this->mutable_uid()));
        ::google::protobuf::internal::WireFormat::VerifyUTF8String(
          this->uid().data(), this->uid().length(),
          ::google::protobuf::internal::WireFormat::PARSE);
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }
      
      // optional string name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_name:
        DO_(::google::protobuf::internal::WireFormatLite::ReadString(
              input, this->mutable_name()));
        ::google::protobuf::internal::WireFormat::VerifyUTF8String(
          this->name().data(), this->name().length(),
          ::google::protobuf::internal::WireFormat::PARSE);
        if (input->ExpectTag(26)) goto parse_pic;
        break;
      }
      
      // optional string pic = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_pic:
        DO_(::google::protobuf::internal::WireFormatLite::ReadString(
              input, this->mutable_pic()));
        ::google::protobuf::internal::WireFormat::VerifyUTF8String(
          this->pic().data(), this->pic().length(),
          ::google::protobuf::internal::WireFormat::PARSE);
        if (input->ExpectTag(32)) goto parse_countryid;
        break;
      }
      
      // optional int32 countryid = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_countryid:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &countryid_));
        _set_bit(3);
        if (input->ExpectTag(42)) goto parse_guildName;
        break;
      }
      
      // optional string guildName = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_guildName:
        DO_(::google::protobuf::internal::WireFormatLite::ReadString(
              input, this->mutable_guildname()));
        ::google::protobuf::internal::WireFormat::VerifyUTF8String(
          this->guildname().data(), this->guildname().length(),
          ::google::protobuf::internal::WireFormat::PARSE);
        if (input->ExpectTag(48)) goto parse_fightPoint;
        break;
      }
      
      // optional int32 fightPoint = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_fightPoint:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &fightpoint_));
        _set_bit(5);
        if (input->ExpectTag(56)) goto parse_level;
        break;
      }
      
      // optional int32 level = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_level:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &level_));
        _set_bit(6);
        if (input->ExpectTag(64)) goto parse_exploreCnt;
        break;
      }
      
      // optional int32 exploreCnt = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_exploreCnt:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &explorecnt_));
        _set_bit(7);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DB_C_WpcRankUnit::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    DB_C_WpcRankUnit::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional string uid = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->uid().data(), this->uid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->uid(), output);
  }
  
  // optional string name = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->name(), output);
  }
  
  // optional string pic = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->pic().data(), this->pic().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->pic(), output);
  }
  
  // optional int32 countryid = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->countryid(), output);
  }
  
  // optional string guildName = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->guildname().data(), this->guildname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->guildname(), output);
  }
  
  // optional int32 fightPoint = 6;
  if (_has_bit(5)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->fightpoint(), output);
  }
  
  // optional int32 level = 7;
  if (_has_bit(6)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->level(), output);
  }
  
  // optional int32 exploreCnt = 8;
  if (_has_bit(7)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->explorecnt(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DB_C_WpcRankUnit::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string uid = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->uid().data(), this->uid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->uid(), target);
  }
  
  // optional string name = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }
  
  // optional string pic = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->pic().data(), this->pic().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->pic(), target);
  }
  
  // optional int32 countryid = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->countryid(), target);
  }
  
  // optional string guildName = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->guildname().data(), this->guildname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->guildname(), target);
  }
  
  // optional int32 fightPoint = 6;
  if (_has_bit(5)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->fightpoint(), target);
  }
  
  // optional int32 level = 7;
  if (_has_bit(6)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->level(), target);
  }
  
  // optional int32 exploreCnt = 8;
  if (_has_bit(7)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->explorecnt(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DB_C_WpcRankUnit::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string uid = 1;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->uid());
    }
    
    // optional string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }
    
    // optional string pic = 3;
    if (has_pic()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->pic());
    }
    
    // optional int32 countryid = 4;
    if (has_countryid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->countryid());
    }
    
    // optional string guildName = 5;
    if (has_guildname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->guildname());
    }
    
    // optional int32 fightPoint = 6;
    if (has_fightpoint()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->fightpoint());
    }
    
    // optional int32 level = 7;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->level());
    }
    
    // optional int32 exploreCnt = 8;
    if (has_explorecnt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->explorecnt());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void DB_C_WpcRankUnit::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DB_C_WpcRankUnit* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DB_C_WpcRankUnit*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DB_C_WpcRankUnit::MergeFrom(const DB_C_WpcRankUnit& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_uid(from.uid());
    }
    if (from._has_bit(1)) {
      set_name(from.name());
    }
    if (from._has_bit(2)) {
      set_pic(from.pic());
    }
    if (from._has_bit(3)) {
      set_countryid(from.countryid());
    }
    if (from._has_bit(4)) {
      set_guildname(from.guildname());
    }
    if (from._has_bit(5)) {
      set_fightpoint(from.fightpoint());
    }
    if (from._has_bit(6)) {
      set_level(from.level());
    }
    if (from._has_bit(7)) {
      set_explorecnt(from.explorecnt());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DB_C_WpcRankUnit::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DB_C_WpcRankUnit::CopyFrom(const DB_C_WpcRankUnit& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DB_C_WpcRankUnit::IsInitialized() const {
  
  return true;
}

void DB_C_WpcRankUnit::Swap(DB_C_WpcRankUnit* other) {
  if (other != this) {
    std::swap(uid_, other->uid_);
    std::swap(name_, other->name_);
    std::swap(pic_, other->pic_);
    std::swap(countryid_, other->countryid_);
    std::swap(guildname_, other->guildname_);
    std::swap(fightpoint_, other->fightpoint_);
    std::swap(level_, other->level_);
    std::swap(explorecnt_, other->explorecnt_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DB_C_WpcRankUnit::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DB_C_WpcRankUnit_descriptor_;
  metadata.reflection = DB_C_WpcRankUnit_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DB_C_WarGameData::kKeyFieldNumber;
const int DB_C_WarGameData::kRegionFieldNumber;
const int DB_C_WarGameData::kSiteListFieldNumber;
const int DB_C_WarGameData::kLtSaveRevisionFieldNumber;
#endif  // !_MSC_VER

DB_C_WarGameData::DB_C_WarGameData() {
  SharedCtor();
}

void DB_C_WarGameData::InitAsDefaultInstance() {
}

DB_C_WarGameData::DB_C_WarGameData(const DB_C_WarGameData& from) {
  SharedCtor();
  MergeFrom(from);
}

void DB_C_WarGameData::SharedCtor() {
  _cached_size_ = 0;
  key_ = 0;
  region_ = 0;
  ltsaverevision_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DB_C_WarGameData::~DB_C_WarGameData() {
  SharedDtor();
}

void DB_C_WarGameData::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* DB_C_WarGameData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DB_C_WarGameData_descriptor_;
}

const DB_C_WarGameData& DB_C_WarGameData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_countryDB_2eproto();  return *default_instance_;
}

DB_C_WarGameData* DB_C_WarGameData::default_instance_ = NULL;

DB_C_WarGameData* DB_C_WarGameData::New() const {
  return new DB_C_WarGameData;
}

void DB_C_WarGameData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    key_ = 0;
    region_ = 0;
    ltsaverevision_ = GOOGLE_LONGLONG(0);
  }
  sitelist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DB_C_WarGameData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 key = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &key_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_region;
        break;
      }
      
      // required int32 region = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_region:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &region_));
        _set_bit(1);
        if (input->ExpectTag(26)) goto parse_siteList;
        break;
      }
      
      // repeated .DB_C_WarGameSite siteList = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_siteList:
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, add_sitelist()));
        if (input->ExpectTag(26)) goto parse_siteList;
        if (input->ExpectTag(32)) goto parse_ltSaveRevision;
        break;
      }
      
      // optional int64 ltSaveRevision = 4 [default = 0];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_ltSaveRevision:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt64(
              input, &ltsaverevision_));
        _set_bit(3);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DB_C_WarGameData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    DB_C_WarGameData::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // required int32 key = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->key(), output);
  }
  
  // required int32 region = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->region(), output);
  }
  
  // repeated .DB_C_WarGameSite siteList = 3;
  for (int i = 0; i < this->sitelist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      3, this->sitelist(i), output);
  }
  
  // optional int64 ltSaveRevision = 4 [default = 0];
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->ltsaverevision(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DB_C_WarGameData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 key = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->key(), target);
  }
  
  // required int32 region = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->region(), target);
  }
  
  // repeated .DB_C_WarGameSite siteList = 3;
  for (int i = 0; i < this->sitelist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->sitelist(i), target);
  }
  
  // optional int64 ltSaveRevision = 4 [default = 0];
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->ltsaverevision(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DB_C_WarGameData::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 key = 1;
    if (has_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->key());
    }
    
    // required int32 region = 2;
    if (has_region()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->region());
    }
    
    // optional int64 ltSaveRevision = 4 [default = 0];
    if (has_ltsaverevision()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->ltsaverevision());
    }
    
  }
  // repeated .DB_C_WarGameSite siteList = 3;
  total_size += 1 * this->sitelist_size();
  for (int i = 0; i < this->sitelist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->sitelist(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void DB_C_WarGameData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DB_C_WarGameData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DB_C_WarGameData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DB_C_WarGameData::MergeFrom(const DB_C_WarGameData& from) {
  GOOGLE_CHECK_NE(&from, this);
  sitelist_.MergeFrom(from.sitelist_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_key(from.key());
    }
    if (from._has_bit(1)) {
      set_region(from.region());
    }
    if (from._has_bit(3)) {
      set_ltsaverevision(from.ltsaverevision());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DB_C_WarGameData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DB_C_WarGameData::CopyFrom(const DB_C_WarGameData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DB_C_WarGameData::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  for (int i = 0; i < sitelist_size(); i++) {
    if (!this->sitelist(i).IsInitialized()) return false;
  }
  return true;
}

void DB_C_WarGameData::Swap(DB_C_WarGameData* other) {
  if (other != this) {
    std::swap(key_, other->key_);
    std::swap(region_, other->region_);
    sitelist_.Swap(&other->sitelist_);
    std::swap(ltsaverevision_, other->ltsaverevision_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DB_C_WarGameData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DB_C_WarGameData_descriptor_;
  metadata.reflection = DB_C_WarGameData_reflection_;
  return metadata;
}


// ===================================================================

const ::std::string DB_C_WarGameSite::_default_uid_;
const ::std::string DB_C_WarGameSite::_default_name_;
#ifndef _MSC_VER
const int DB_C_WarGameSite::kSitIDFieldNumber;
const int DB_C_WarGameSite::kSitLvFieldNumber;
const int DB_C_WarGameSite::kStartTimeFieldNumber;
const int DB_C_WarGameSite::kEndTimeFieldNumber;
const int DB_C_WarGameSite::kDelayNumFieldNumber;
const int DB_C_WarGameSite::kUidFieldNumber;
const int DB_C_WarGameSite::kNameFieldNumber;
const int DB_C_WarGameSite::kCountryIDFieldNumber;
const int DB_C_WarGameSite::kPowerFieldNumber;
const int DB_C_WarGameSite::kAdmiralListFieldNumber;
const int DB_C_WarGameSite::kTruceStartTimeFieldNumber;
const int DB_C_WarGameSite::kTruceEndTimeFieldNumber;
#endif  // !_MSC_VER

DB_C_WarGameSite::DB_C_WarGameSite() {
  SharedCtor();
}

void DB_C_WarGameSite::InitAsDefaultInstance() {
}

DB_C_WarGameSite::DB_C_WarGameSite(const DB_C_WarGameSite& from) {
  SharedCtor();
  MergeFrom(from);
}

void DB_C_WarGameSite::SharedCtor() {
  _cached_size_ = 0;
  sitid_ = 0;
  sitlv_ = 0;
  starttime_ = 0;
  endtime_ = 0;
  delaynum_ = 0;
  uid_ = const_cast< ::std::string*>(&_default_uid_);
  name_ = const_cast< ::std::string*>(&_default_name_);
  countryid_ = 0;
  power_ = 0;
  trucestarttime_ = 0;
  truceendtime_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DB_C_WarGameSite::~DB_C_WarGameSite() {
  SharedDtor();
}

void DB_C_WarGameSite::SharedDtor() {
  if (uid_ != &_default_uid_) {
    delete uid_;
  }
  if (name_ != &_default_name_) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* DB_C_WarGameSite::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DB_C_WarGameSite_descriptor_;
}

const DB_C_WarGameSite& DB_C_WarGameSite::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_countryDB_2eproto();  return *default_instance_;
}

DB_C_WarGameSite* DB_C_WarGameSite::default_instance_ = NULL;

DB_C_WarGameSite* DB_C_WarGameSite::New() const {
  return new DB_C_WarGameSite;
}

void DB_C_WarGameSite::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    sitid_ = 0;
    sitlv_ = 0;
    starttime_ = 0;
    endtime_ = 0;
    delaynum_ = 0;
    if (_has_bit(5)) {
      if (uid_ != &_default_uid_) {
        uid_->clear();
      }
    }
    if (_has_bit(6)) {
      if (name_ != &_default_name_) {
        name_->clear();
      }
    }
    countryid_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    power_ = 0;
    trucestarttime_ = 0;
    truceendtime_ = 0;
  }
  admirallist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DB_C_WarGameSite::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 sitID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &sitid_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_sitLv;
        break;
      }
      
      // optional int32 sitLv = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_sitLv:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &sitlv_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_startTime;
        break;
      }
      
      // optional int32 startTime = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_startTime:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &starttime_));
        _set_bit(2);
        if (input->ExpectTag(32)) goto parse_endTime;
        break;
      }
      
      // optional int32 endTime = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_endTime:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &endtime_));
        _set_bit(3);
        if (input->ExpectTag(40)) goto parse_delayNum;
        break;
      }
      
      // optional int32 delayNum = 5 [default = 0];
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_delayNum:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &delaynum_));
        _set_bit(4);
        if (input->ExpectTag(50)) goto parse_uid;
        break;
      }
      
      // optional string uid = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_uid:
        DO_(::google::protobuf::internal::WireFormatLite::ReadString(
              input, this->mutable_uid()));
        ::google::protobuf::internal::WireFormat::VerifyUTF8String(
          this->uid().data(), this->uid().length(),
          ::google::protobuf::internal::WireFormat::PARSE);
        if (input->ExpectTag(58)) goto parse_name;
        break;
      }
      
      // optional string name = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_name:
        DO_(::google::protobuf::internal::WireFormatLite::ReadString(
              input, this->mutable_name()));
        ::google::protobuf::internal::WireFormat::VerifyUTF8String(
          this->name().data(), this->name().length(),
          ::google::protobuf::internal::WireFormat::PARSE);
        if (input->ExpectTag(64)) goto parse_countryID;
        break;
      }
      
      // optional int32 countryID = 8 [default = 0];
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_countryID:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &countryid_));
        _set_bit(7);
        if (input->ExpectTag(72)) goto parse_power;
        break;
      }
      
      // optional int32 power = 9 [default = 0];
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_power:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &power_));
        _set_bit(8);
        if (input->ExpectTag(82)) goto parse_admiralList;
        break;
      }
      
      // repeated .DB_C_WarGameAdmiralInfo admiralList = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_admiralList:
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, add_admirallist()));
        if (input->ExpectTag(82)) goto parse_admiralList;
        if (input->ExpectTag(88)) goto parse_TruceStartTime;
        break;
      }
      
      // optional int32 TruceStartTime = 11 [default = 0];
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_TruceStartTime:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &trucestarttime_));
        _set_bit(10);
        if (input->ExpectTag(96)) goto parse_TruceEndTime;
        break;
      }
      
      // optional int32 TruceEndTime = 12 [default = 0];
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_TruceEndTime:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &truceendtime_));
        _set_bit(11);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DB_C_WarGameSite::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    DB_C_WarGameSite::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // required int32 sitID = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->sitid(), output);
  }
  
  // optional int32 sitLv = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->sitlv(), output);
  }
  
  // optional int32 startTime = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->starttime(), output);
  }
  
  // optional int32 endTime = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->endtime(), output);
  }
  
  // optional int32 delayNum = 5 [default = 0];
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->delaynum(), output);
  }
  
  // optional string uid = 6;
  if (_has_bit(5)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->uid().data(), this->uid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->uid(), output);
  }
  
  // optional string name = 7;
  if (_has_bit(6)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->name(), output);
  }
  
  // optional int32 countryID = 8 [default = 0];
  if (_has_bit(7)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->countryid(), output);
  }
  
  // optional int32 power = 9 [default = 0];
  if (_has_bit(8)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->power(), output);
  }
  
  // repeated .DB_C_WarGameAdmiralInfo admiralList = 10;
  for (int i = 0; i < this->admirallist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      10, this->admirallist(i), output);
  }
  
  // optional int32 TruceStartTime = 11 [default = 0];
  if (_has_bit(10)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->trucestarttime(), output);
  }
  
  // optional int32 TruceEndTime = 12 [default = 0];
  if (_has_bit(11)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->truceendtime(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DB_C_WarGameSite::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 sitID = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->sitid(), target);
  }
  
  // optional int32 sitLv = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->sitlv(), target);
  }
  
  // optional int32 startTime = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->starttime(), target);
  }
  
  // optional int32 endTime = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->endtime(), target);
  }
  
  // optional int32 delayNum = 5 [default = 0];
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->delaynum(), target);
  }
  
  // optional string uid = 6;
  if (_has_bit(5)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->uid().data(), this->uid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->uid(), target);
  }
  
  // optional string name = 7;
  if (_has_bit(6)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->name(), target);
  }
  
  // optional int32 countryID = 8 [default = 0];
  if (_has_bit(7)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->countryid(), target);
  }
  
  // optional int32 power = 9 [default = 0];
  if (_has_bit(8)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->power(), target);
  }
  
  // repeated .DB_C_WarGameAdmiralInfo admiralList = 10;
  for (int i = 0; i < this->admirallist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->admirallist(i), target);
  }
  
  // optional int32 TruceStartTime = 11 [default = 0];
  if (_has_bit(10)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->trucestarttime(), target);
  }
  
  // optional int32 TruceEndTime = 12 [default = 0];
  if (_has_bit(11)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->truceendtime(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DB_C_WarGameSite::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 sitID = 1;
    if (has_sitid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sitid());
    }
    
    // optional int32 sitLv = 2;
    if (has_sitlv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sitlv());
    }
    
    // optional int32 startTime = 3;
    if (has_starttime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->starttime());
    }
    
    // optional int32 endTime = 4;
    if (has_endtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->endtime());
    }
    
    // optional int32 delayNum = 5 [default = 0];
    if (has_delaynum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->delaynum());
    }
    
    // optional string uid = 6;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->uid());
    }
    
    // optional string name = 7;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }
    
    // optional int32 countryID = 8 [default = 0];
    if (has_countryid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->countryid());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 power = 9 [default = 0];
    if (has_power()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->power());
    }
    
    // optional int32 TruceStartTime = 11 [default = 0];
    if (has_trucestarttime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->trucestarttime());
    }
    
    // optional int32 TruceEndTime = 12 [default = 0];
    if (has_truceendtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->truceendtime());
    }
    
  }
  // repeated .DB_C_WarGameAdmiralInfo admiralList = 10;
  total_size += 1 * this->admirallist_size();
  for (int i = 0; i < this->admirallist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->admirallist(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void DB_C_WarGameSite::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DB_C_WarGameSite* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DB_C_WarGameSite*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DB_C_WarGameSite::MergeFrom(const DB_C_WarGameSite& from) {
  GOOGLE_CHECK_NE(&from, this);
  admirallist_.MergeFrom(from.admirallist_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_sitid(from.sitid());
    }
    if (from._has_bit(1)) {
      set_sitlv(from.sitlv());
    }
    if (from._has_bit(2)) {
      set_starttime(from.starttime());
    }
    if (from._has_bit(3)) {
      set_endtime(from.endtime());
    }
    if (from._has_bit(4)) {
      set_delaynum(from.delaynum());
    }
    if (from._has_bit(5)) {
      set_uid(from.uid());
    }
    if (from._has_bit(6)) {
      set_name(from.name());
    }
    if (from._has_bit(7)) {
      set_countryid(from.countryid());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from._has_bit(8)) {
      set_power(from.power());
    }
    if (from._has_bit(10)) {
      set_trucestarttime(from.trucestarttime());
    }
    if (from._has_bit(11)) {
      set_truceendtime(from.truceendtime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DB_C_WarGameSite::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DB_C_WarGameSite::CopyFrom(const DB_C_WarGameSite& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DB_C_WarGameSite::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void DB_C_WarGameSite::Swap(DB_C_WarGameSite* other) {
  if (other != this) {
    std::swap(sitid_, other->sitid_);
    std::swap(sitlv_, other->sitlv_);
    std::swap(starttime_, other->starttime_);
    std::swap(endtime_, other->endtime_);
    std::swap(delaynum_, other->delaynum_);
    std::swap(uid_, other->uid_);
    std::swap(name_, other->name_);
    std::swap(countryid_, other->countryid_);
    std::swap(power_, other->power_);
    admirallist_.Swap(&other->admirallist_);
    std::swap(trucestarttime_, other->trucestarttime_);
    std::swap(truceendtime_, other->truceendtime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DB_C_WarGameSite::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DB_C_WarGameSite_descriptor_;
  metadata.reflection = DB_C_WarGameSite_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DB_C_WarGameAdmiralInfo::kAdmiralIDFieldNumber;
const int DB_C_WarGameAdmiralInfo::kAdmiralLvFieldNumber;
const int DB_C_WarGameAdmiralInfo::kAdmiralTrainLvFieldNumber;
#endif  // !_MSC_VER

DB_C_WarGameAdmiralInfo::DB_C_WarGameAdmiralInfo() {
  SharedCtor();
}

void DB_C_WarGameAdmiralInfo::InitAsDefaultInstance() {
}

DB_C_WarGameAdmiralInfo::DB_C_WarGameAdmiralInfo(const DB_C_WarGameAdmiralInfo& from) {
  SharedCtor();
  MergeFrom(from);
}

void DB_C_WarGameAdmiralInfo::SharedCtor() {
  _cached_size_ = 0;
  admiralid_ = 0;
  admirallv_ = 0;
  admiraltrainlv_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DB_C_WarGameAdmiralInfo::~DB_C_WarGameAdmiralInfo() {
  SharedDtor();
}

void DB_C_WarGameAdmiralInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* DB_C_WarGameAdmiralInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DB_C_WarGameAdmiralInfo_descriptor_;
}

const DB_C_WarGameAdmiralInfo& DB_C_WarGameAdmiralInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_countryDB_2eproto();  return *default_instance_;
}

DB_C_WarGameAdmiralInfo* DB_C_WarGameAdmiralInfo::default_instance_ = NULL;

DB_C_WarGameAdmiralInfo* DB_C_WarGameAdmiralInfo::New() const {
  return new DB_C_WarGameAdmiralInfo;
}

void DB_C_WarGameAdmiralInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    admiralid_ = 0;
    admirallv_ = 0;
    admiraltrainlv_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DB_C_WarGameAdmiralInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 admiralID = 1 [default = 0];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &admiralid_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_admiralLv;
        break;
      }
      
      // optional int32 admiralLv = 2 [default = 0];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_admiralLv:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &admirallv_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_admiralTrainLv;
        break;
      }
      
      // optional int32 admiralTrainLv = 3 [default = 0];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_admiralTrainLv:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &admiraltrainlv_));
        _set_bit(2);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DB_C_WarGameAdmiralInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    DB_C_WarGameAdmiralInfo::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional int32 admiralID = 1 [default = 0];
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->admiralid(), output);
  }
  
  // optional int32 admiralLv = 2 [default = 0];
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->admirallv(), output);
  }
  
  // optional int32 admiralTrainLv = 3 [default = 0];
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->admiraltrainlv(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DB_C_WarGameAdmiralInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 admiralID = 1 [default = 0];
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->admiralid(), target);
  }
  
  // optional int32 admiralLv = 2 [default = 0];
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->admirallv(), target);
  }
  
  // optional int32 admiralTrainLv = 3 [default = 0];
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->admiraltrainlv(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DB_C_WarGameAdmiralInfo::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 admiralID = 1 [default = 0];
    if (has_admiralid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->admiralid());
    }
    
    // optional int32 admiralLv = 2 [default = 0];
    if (has_admirallv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->admirallv());
    }
    
    // optional int32 admiralTrainLv = 3 [default = 0];
    if (has_admiraltrainlv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->admiraltrainlv());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void DB_C_WarGameAdmiralInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DB_C_WarGameAdmiralInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DB_C_WarGameAdmiralInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DB_C_WarGameAdmiralInfo::MergeFrom(const DB_C_WarGameAdmiralInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_admiralid(from.admiralid());
    }
    if (from._has_bit(1)) {
      set_admirallv(from.admirallv());
    }
    if (from._has_bit(2)) {
      set_admiraltrainlv(from.admiraltrainlv());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DB_C_WarGameAdmiralInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DB_C_WarGameAdmiralInfo::CopyFrom(const DB_C_WarGameAdmiralInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DB_C_WarGameAdmiralInfo::IsInitialized() const {
  
  return true;
}

void DB_C_WarGameAdmiralInfo::Swap(DB_C_WarGameAdmiralInfo* other) {
  if (other != this) {
    std::swap(admiralid_, other->admiralid_);
    std::swap(admirallv_, other->admirallv_);
    std::swap(admiraltrainlv_, other->admiraltrainlv_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DB_C_WarGameAdmiralInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DB_C_WarGameAdmiralInfo_descriptor_;
  metadata.reflection = DB_C_WarGameAdmiralInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DB_C_ChatMsg::kBeginFieldNumber;
const int DB_C_ChatMsg::kEndFieldNumber;
const int DB_C_ChatMsg::kNumFieldNumber;
const int DB_C_ChatMsg::kMsgFieldNumber;
#endif  // !_MSC_VER

DB_C_ChatMsg::DB_C_ChatMsg() {
  SharedCtor();
}

void DB_C_ChatMsg::InitAsDefaultInstance() {
}

DB_C_ChatMsg::DB_C_ChatMsg(const DB_C_ChatMsg& from) {
  SharedCtor();
  MergeFrom(from);
}

void DB_C_ChatMsg::SharedCtor() {
  _cached_size_ = 0;
  begin_ = 0;
  end_ = 0;
  num_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DB_C_ChatMsg::~DB_C_ChatMsg() {
  SharedDtor();
}

void DB_C_ChatMsg::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* DB_C_ChatMsg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DB_C_ChatMsg_descriptor_;
}

const DB_C_ChatMsg& DB_C_ChatMsg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_countryDB_2eproto();  return *default_instance_;
}

DB_C_ChatMsg* DB_C_ChatMsg::default_instance_ = NULL;

DB_C_ChatMsg* DB_C_ChatMsg::New() const {
  return new DB_C_ChatMsg;
}

void DB_C_ChatMsg::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    begin_ = 0;
    end_ = 0;
    num_ = 0;
  }
  msg_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DB_C_ChatMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 begin = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &begin_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_end;
        break;
      }
      
      // optional int32 end = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_end:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &end_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_num;
        break;
      }
      
      // optional int32 num = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_num:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &num_));
        _set_bit(2);
        if (input->ExpectTag(34)) goto parse_msg;
        break;
      }
      
      // repeated .DB_C_ChatMsgOne msg = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_msg:
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, add_msg()));
        if (input->ExpectTag(34)) goto parse_msg;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DB_C_ChatMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    DB_C_ChatMsg::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional int32 begin = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->begin(), output);
  }
  
  // optional int32 end = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->end(), output);
  }
  
  // optional int32 num = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->num(), output);
  }
  
  // repeated .DB_C_ChatMsgOne msg = 4;
  for (int i = 0; i < this->msg_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      4, this->msg(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DB_C_ChatMsg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 begin = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->begin(), target);
  }
  
  // optional int32 end = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->end(), target);
  }
  
  // optional int32 num = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->num(), target);
  }
  
  // repeated .DB_C_ChatMsgOne msg = 4;
  for (int i = 0; i < this->msg_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->msg(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DB_C_ChatMsg::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 begin = 1;
    if (has_begin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->begin());
    }
    
    // optional int32 end = 2;
    if (has_end()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->end());
    }
    
    // optional int32 num = 3;
    if (has_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->num());
    }
    
  }
  // repeated .DB_C_ChatMsgOne msg = 4;
  total_size += 1 * this->msg_size();
  for (int i = 0; i < this->msg_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->msg(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void DB_C_ChatMsg::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DB_C_ChatMsg* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DB_C_ChatMsg*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DB_C_ChatMsg::MergeFrom(const DB_C_ChatMsg& from) {
  GOOGLE_CHECK_NE(&from, this);
  msg_.MergeFrom(from.msg_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_begin(from.begin());
    }
    if (from._has_bit(1)) {
      set_end(from.end());
    }
    if (from._has_bit(2)) {
      set_num(from.num());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DB_C_ChatMsg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DB_C_ChatMsg::CopyFrom(const DB_C_ChatMsg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DB_C_ChatMsg::IsInitialized() const {
  
  return true;
}

void DB_C_ChatMsg::Swap(DB_C_ChatMsg* other) {
  if (other != this) {
    std::swap(begin_, other->begin_);
    std::swap(end_, other->end_);
    std::swap(num_, other->num_);
    msg_.Swap(&other->msg_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DB_C_ChatMsg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DB_C_ChatMsg_descriptor_;
  metadata.reflection = DB_C_ChatMsg_reflection_;
  return metadata;
}


// ===================================================================

const ::std::string DB_C_ChatMsgOne::_default_name_;
const ::std::string DB_C_ChatMsgOne::_default_msg_;
#ifndef _MSC_VER
const int DB_C_ChatMsgOne::kCountryFieldNumber;
const int DB_C_ChatMsgOne::kTypeFieldNumber;
const int DB_C_ChatMsgOne::kUidFieldNumber;
const int DB_C_ChatMsgOne::kNameFieldNumber;
const int DB_C_ChatMsgOne::kMsgFieldNumber;
#endif  // !_MSC_VER

DB_C_ChatMsgOne::DB_C_ChatMsgOne() {
  SharedCtor();
}

void DB_C_ChatMsgOne::InitAsDefaultInstance() {
}

DB_C_ChatMsgOne::DB_C_ChatMsgOne(const DB_C_ChatMsgOne& from) {
  SharedCtor();
  MergeFrom(from);
}

void DB_C_ChatMsgOne::SharedCtor() {
  _cached_size_ = 0;
  country_ = 0;
  type_ = 0;
  uid_ = GOOGLE_LONGLONG(0);
  name_ = const_cast< ::std::string*>(&_default_name_);
  msg_ = const_cast< ::std::string*>(&_default_msg_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DB_C_ChatMsgOne::~DB_C_ChatMsgOne() {
  SharedDtor();
}

void DB_C_ChatMsgOne::SharedDtor() {
  if (name_ != &_default_name_) {
    delete name_;
  }
  if (msg_ != &_default_msg_) {
    delete msg_;
  }
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* DB_C_ChatMsgOne::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DB_C_ChatMsgOne_descriptor_;
}

const DB_C_ChatMsgOne& DB_C_ChatMsgOne::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_countryDB_2eproto();  return *default_instance_;
}

DB_C_ChatMsgOne* DB_C_ChatMsgOne::default_instance_ = NULL;

DB_C_ChatMsgOne* DB_C_ChatMsgOne::New() const {
  return new DB_C_ChatMsgOne;
}

void DB_C_ChatMsgOne::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    country_ = 0;
    type_ = 0;
    uid_ = GOOGLE_LONGLONG(0);
    if (_has_bit(3)) {
      if (name_ != &_default_name_) {
        name_->clear();
      }
    }
    if (_has_bit(4)) {
      if (msg_ != &_default_msg_) {
        msg_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DB_C_ChatMsgOne::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 country = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &country_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }
      
      // optional int32 type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_type:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &type_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_uid;
        break;
      }
      
      // optional int64 uid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_uid:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt64(
              input, &uid_));
        _set_bit(2);
        if (input->ExpectTag(34)) goto parse_name;
        break;
      }
      
      // optional string name = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_name:
        DO_(::google::protobuf::internal::WireFormatLite::ReadString(
              input, this->mutable_name()));
        ::google::protobuf::internal::WireFormat::VerifyUTF8String(
          this->name().data(), this->name().length(),
          ::google::protobuf::internal::WireFormat::PARSE);
        if (input->ExpectTag(42)) goto parse_msg;
        break;
      }
      
      // optional string msg = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_msg:
        DO_(::google::protobuf::internal::WireFormatLite::ReadString(
              input, this->mutable_msg()));
        ::google::protobuf::internal::WireFormat::VerifyUTF8String(
          this->msg().data(), this->msg().length(),
          ::google::protobuf::internal::WireFormat::PARSE);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DB_C_ChatMsgOne::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    DB_C_ChatMsgOne::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional int32 country = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->country(), output);
  }
  
  // optional int32 type = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->type(), output);
  }
  
  // optional int64 uid = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->uid(), output);
  }
  
  // optional string name = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->name(), output);
  }
  
  // optional string msg = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msg().data(), this->msg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->msg(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DB_C_ChatMsgOne::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 country = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->country(), target);
  }
  
  // optional int32 type = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->type(), target);
  }
  
  // optional int64 uid = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->uid(), target);
  }
  
  // optional string name = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->name(), target);
  }
  
  // optional string msg = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msg().data(), this->msg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->msg(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DB_C_ChatMsgOne::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 country = 1;
    if (has_country()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->country());
    }
    
    // optional int32 type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }
    
    // optional int64 uid = 3;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->uid());
    }
    
    // optional string name = 4;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }
    
    // optional string msg = 5;
    if (has_msg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->msg());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void DB_C_ChatMsgOne::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DB_C_ChatMsgOne* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DB_C_ChatMsgOne*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DB_C_ChatMsgOne::MergeFrom(const DB_C_ChatMsgOne& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_country(from.country());
    }
    if (from._has_bit(1)) {
      set_type(from.type());
    }
    if (from._has_bit(2)) {
      set_uid(from.uid());
    }
    if (from._has_bit(3)) {
      set_name(from.name());
    }
    if (from._has_bit(4)) {
      set_msg(from.msg());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DB_C_ChatMsgOne::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DB_C_ChatMsgOne::CopyFrom(const DB_C_ChatMsgOne& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DB_C_ChatMsgOne::IsInitialized() const {
  
  return true;
}

void DB_C_ChatMsgOne::Swap(DB_C_ChatMsgOne* other) {
  if (other != this) {
    std::swap(country_, other->country_);
    std::swap(type_, other->type_);
    std::swap(uid_, other->uid_);
    std::swap(name_, other->name_);
    std::swap(msg_, other->msg_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DB_C_ChatMsgOne::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DB_C_ChatMsgOne_descriptor_;
  metadata.reflection = DB_C_ChatMsgOne_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DB_C_BossBtlMsg::kKeyFieldNumber;
const int DB_C_BossBtlMsg::kRegionFieldNumber;
const int DB_C_BossBtlMsg::kNBossBtlFlagFieldNumber;
const int DB_C_BossBtlMsg::kBossInfoFieldNumber;
const int DB_C_BossBtlMsg::kRankListFieldNumber;
const int DB_C_BossBtlMsg::kKillerFieldNumber;
const int DB_C_BossBtlMsg::kStateFieldNumber;
const int DB_C_BossBtlMsg::kFightingBossMsgFieldNumber;
const int DB_C_BossBtlMsg::kLuckyListFieldNumber;
const int DB_C_BossBtlMsg::kLtSaveRevisionFieldNumber;
const int DB_C_BossBtlMsg::kLastRankListFieldNumber;
const int DB_C_BossBtlMsg::kHighPointListFieldNumber;
const int DB_C_BossBtlMsg::kUpListFieldNumber;
#endif  // !_MSC_VER

DB_C_BossBtlMsg::DB_C_BossBtlMsg() {
  SharedCtor();
}

void DB_C_BossBtlMsg::InitAsDefaultInstance() {
  killer_ = const_cast< ::DB_C_BossBtlRankUnit*>(&::DB_C_BossBtlRankUnit::default_instance());
  fightingbossmsg_ = const_cast< ::DB_C_BossMsg*>(&::DB_C_BossMsg::default_instance());
}

DB_C_BossBtlMsg::DB_C_BossBtlMsg(const DB_C_BossBtlMsg& from) {
  SharedCtor();
  MergeFrom(from);
}

void DB_C_BossBtlMsg::SharedCtor() {
  _cached_size_ = 0;
  key_ = 0;
  region_ = 0;
  nbossbtlflag_ = 0;
  killer_ = NULL;
  state_ = 0;
  fightingbossmsg_ = NULL;
  ltsaverevision_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DB_C_BossBtlMsg::~DB_C_BossBtlMsg() {
  SharedDtor();
}

void DB_C_BossBtlMsg::SharedDtor() {
  if (this != default_instance_) {
    delete killer_;
    delete fightingbossmsg_;
  }
}

const ::google::protobuf::Descriptor* DB_C_BossBtlMsg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DB_C_BossBtlMsg_descriptor_;
}

const DB_C_BossBtlMsg& DB_C_BossBtlMsg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_countryDB_2eproto();  return *default_instance_;
}

DB_C_BossBtlMsg* DB_C_BossBtlMsg::default_instance_ = NULL;

DB_C_BossBtlMsg* DB_C_BossBtlMsg::New() const {
  return new DB_C_BossBtlMsg;
}

void DB_C_BossBtlMsg::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    key_ = 0;
    region_ = 0;
    nbossbtlflag_ = 0;
    if (_has_bit(5)) {
      if (killer_ != NULL) killer_->::DB_C_BossBtlRankUnit::Clear();
    }
    state_ = 0;
    if (_has_bit(7)) {
      if (fightingbossmsg_ != NULL) fightingbossmsg_->::DB_C_BossMsg::Clear();
    }
  }
  if (_has_bits_[9 / 32] & (0xffu << (9 % 32))) {
    ltsaverevision_ = GOOGLE_LONGLONG(0);
  }
  bossinfo_.Clear();
  ranklist_.Clear();
  luckylist_.Clear();
  lastranklist_.Clear();
  highpointlist_.Clear();
  uplist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DB_C_BossBtlMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 key = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &key_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_region;
        break;
      }
      
      // optional int32 region = 2 [default = 0];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_region:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &region_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_nBossBtlFlag;
        break;
      }
      
      // optional int32 nBossBtlFlag = 3 [default = 0];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_nBossBtlFlag:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &nbossbtlflag_));
        _set_bit(2);
        if (input->ExpectTag(34)) goto parse_bossInfo;
        break;
      }
      
      // repeated .DB_C_BossInfo bossInfo = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_bossInfo:
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, add_bossinfo()));
        if (input->ExpectTag(34)) goto parse_bossInfo;
        if (input->ExpectTag(42)) goto parse_rankList;
        break;
      }
      
      // repeated .DB_C_BossBtlRankUnit rankList = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_rankList:
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, add_ranklist()));
        if (input->ExpectTag(42)) goto parse_rankList;
        if (input->ExpectTag(50)) goto parse_killer;
        break;
      }
      
      // optional .DB_C_BossBtlRankUnit killer = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_killer:
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
             input, mutable_killer()));
        if (input->ExpectTag(56)) goto parse_state;
        break;
      }
      
      // optional int32 state = 7 [default = 0];
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_state:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &state_));
        _set_bit(6);
        if (input->ExpectTag(66)) goto parse_fightingBossMsg;
        break;
      }
      
      // optional .DB_C_BossMsg fightingBossMsg = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_fightingBossMsg:
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
             input, mutable_fightingbossmsg()));
        if (input->ExpectTag(74)) goto parse_luckyList;
        break;
      }
      
      // repeated .DB_C_BossBtlRankUnit luckyList = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_luckyList:
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, add_luckylist()));
        if (input->ExpectTag(74)) goto parse_luckyList;
        if (input->ExpectTag(80)) goto parse_ltSaveRevision;
        break;
      }
      
      // optional int64 ltSaveRevision = 10 [default = 0];
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_ltSaveRevision:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt64(
              input, &ltsaverevision_));
        _set_bit(9);
        if (input->ExpectTag(90)) goto parse_lastRankList;
        break;
      }
      
      // repeated .DB_C_BossBtlRankUnit lastRankList = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_lastRankList:
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, add_lastranklist()));
        if (input->ExpectTag(90)) goto parse_lastRankList;
        if (input->ExpectTag(98)) goto parse_highPointList;
        break;
      }
      
      // repeated .DB_C_BossBtlRankUnit highPointList = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_highPointList:
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, add_highpointlist()));
        if (input->ExpectTag(98)) goto parse_highPointList;
        if (input->ExpectTag(106)) goto parse_upList;
        break;
      }
      
      // repeated .DB_C_BossBtlRankUnit upList = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_upList:
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, add_uplist()));
        if (input->ExpectTag(106)) goto parse_upList;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DB_C_BossBtlMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    DB_C_BossBtlMsg::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // required int32 key = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->key(), output);
  }
  
  // optional int32 region = 2 [default = 0];
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->region(), output);
  }
  
  // optional int32 nBossBtlFlag = 3 [default = 0];
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->nbossbtlflag(), output);
  }
  
  // repeated .DB_C_BossInfo bossInfo = 4;
  for (int i = 0; i < this->bossinfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      4, this->bossinfo(i), output);
  }
  
  // repeated .DB_C_BossBtlRankUnit rankList = 5;
  for (int i = 0; i < this->ranklist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      5, this->ranklist(i), output);
  }
  
  // optional .DB_C_BossBtlRankUnit killer = 6;
  if (_has_bit(5)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      6, this->killer(), output);
  }
  
  // optional int32 state = 7 [default = 0];
  if (_has_bit(6)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->state(), output);
  }
  
  // optional .DB_C_BossMsg fightingBossMsg = 8;
  if (_has_bit(7)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      8, this->fightingbossmsg(), output);
  }
  
  // repeated .DB_C_BossBtlRankUnit luckyList = 9;
  for (int i = 0; i < this->luckylist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      9, this->luckylist(i), output);
  }
  
  // optional int64 ltSaveRevision = 10 [default = 0];
  if (_has_bit(9)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(10, this->ltsaverevision(), output);
  }
  
  // repeated .DB_C_BossBtlRankUnit lastRankList = 11;
  for (int i = 0; i < this->lastranklist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      11, this->lastranklist(i), output);
  }
  
  // repeated .DB_C_BossBtlRankUnit highPointList = 12;
  for (int i = 0; i < this->highpointlist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      12, this->highpointlist(i), output);
  }
  
  // repeated .DB_C_BossBtlRankUnit upList = 13;
  for (int i = 0; i < this->uplist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      13, this->uplist(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DB_C_BossBtlMsg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 key = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->key(), target);
  }
  
  // optional int32 region = 2 [default = 0];
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->region(), target);
  }
  
  // optional int32 nBossBtlFlag = 3 [default = 0];
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->nbossbtlflag(), target);
  }
  
  // repeated .DB_C_BossInfo bossInfo = 4;
  for (int i = 0; i < this->bossinfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->bossinfo(i), target);
  }
  
  // repeated .DB_C_BossBtlRankUnit rankList = 5;
  for (int i = 0; i < this->ranklist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->ranklist(i), target);
  }
  
  // optional .DB_C_BossBtlRankUnit killer = 6;
  if (_has_bit(5)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->killer(), target);
  }
  
  // optional int32 state = 7 [default = 0];
  if (_has_bit(6)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->state(), target);
  }
  
  // optional .DB_C_BossMsg fightingBossMsg = 8;
  if (_has_bit(7)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->fightingbossmsg(), target);
  }
  
  // repeated .DB_C_BossBtlRankUnit luckyList = 9;
  for (int i = 0; i < this->luckylist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->luckylist(i), target);
  }
  
  // optional int64 ltSaveRevision = 10 [default = 0];
  if (_has_bit(9)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(10, this->ltsaverevision(), target);
  }
  
  // repeated .DB_C_BossBtlRankUnit lastRankList = 11;
  for (int i = 0; i < this->lastranklist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        11, this->lastranklist(i), target);
  }
  
  // repeated .DB_C_BossBtlRankUnit highPointList = 12;
  for (int i = 0; i < this->highpointlist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        12, this->highpointlist(i), target);
  }
  
  // repeated .DB_C_BossBtlRankUnit upList = 13;
  for (int i = 0; i < this->uplist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        13, this->uplist(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DB_C_BossBtlMsg::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 key = 1;
    if (has_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->key());
    }
    
    // optional int32 region = 2 [default = 0];
    if (has_region()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->region());
    }
    
    // optional int32 nBossBtlFlag = 3 [default = 0];
    if (has_nbossbtlflag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->nbossbtlflag());
    }
    
    // optional .DB_C_BossBtlRankUnit killer = 6;
    if (has_killer()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->killer());
    }
    
    // optional int32 state = 7 [default = 0];
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->state());
    }
    
    // optional .DB_C_BossMsg fightingBossMsg = 8;
    if (has_fightingbossmsg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->fightingbossmsg());
    }
    
  }
  if (_has_bits_[9 / 32] & (0xffu << (9 % 32))) {
    // optional int64 ltSaveRevision = 10 [default = 0];
    if (has_ltsaverevision()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->ltsaverevision());
    }
    
  }
  // repeated .DB_C_BossInfo bossInfo = 4;
  total_size += 1 * this->bossinfo_size();
  for (int i = 0; i < this->bossinfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->bossinfo(i));
  }
  
  // repeated .DB_C_BossBtlRankUnit rankList = 5;
  total_size += 1 * this->ranklist_size();
  for (int i = 0; i < this->ranklist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->ranklist(i));
  }
  
  // repeated .DB_C_BossBtlRankUnit luckyList = 9;
  total_size += 1 * this->luckylist_size();
  for (int i = 0; i < this->luckylist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->luckylist(i));
  }
  
  // repeated .DB_C_BossBtlRankUnit lastRankList = 11;
  total_size += 1 * this->lastranklist_size();
  for (int i = 0; i < this->lastranklist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->lastranklist(i));
  }
  
  // repeated .DB_C_BossBtlRankUnit highPointList = 12;
  total_size += 1 * this->highpointlist_size();
  for (int i = 0; i < this->highpointlist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->highpointlist(i));
  }
  
  // repeated .DB_C_BossBtlRankUnit upList = 13;
  total_size += 1 * this->uplist_size();
  for (int i = 0; i < this->uplist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->uplist(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void DB_C_BossBtlMsg::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DB_C_BossBtlMsg* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DB_C_BossBtlMsg*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DB_C_BossBtlMsg::MergeFrom(const DB_C_BossBtlMsg& from) {
  GOOGLE_CHECK_NE(&from, this);
  bossinfo_.MergeFrom(from.bossinfo_);
  ranklist_.MergeFrom(from.ranklist_);
  luckylist_.MergeFrom(from.luckylist_);
  lastranklist_.MergeFrom(from.lastranklist_);
  highpointlist_.MergeFrom(from.highpointlist_);
  uplist_.MergeFrom(from.uplist_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_key(from.key());
    }
    if (from._has_bit(1)) {
      set_region(from.region());
    }
    if (from._has_bit(2)) {
      set_nbossbtlflag(from.nbossbtlflag());
    }
    if (from._has_bit(5)) {
      mutable_killer()->::DB_C_BossBtlRankUnit::MergeFrom(from.killer());
    }
    if (from._has_bit(6)) {
      set_state(from.state());
    }
    if (from._has_bit(7)) {
      mutable_fightingbossmsg()->::DB_C_BossMsg::MergeFrom(from.fightingbossmsg());
    }
  }
  if (from._has_bits_[9 / 32] & (0xffu << (9 % 32))) {
    if (from._has_bit(9)) {
      set_ltsaverevision(from.ltsaverevision());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DB_C_BossBtlMsg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DB_C_BossBtlMsg::CopyFrom(const DB_C_BossBtlMsg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DB_C_BossBtlMsg::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void DB_C_BossBtlMsg::Swap(DB_C_BossBtlMsg* other) {
  if (other != this) {
    std::swap(key_, other->key_);
    std::swap(region_, other->region_);
    std::swap(nbossbtlflag_, other->nbossbtlflag_);
    bossinfo_.Swap(&other->bossinfo_);
    ranklist_.Swap(&other->ranklist_);
    std::swap(killer_, other->killer_);
    std::swap(state_, other->state_);
    std::swap(fightingbossmsg_, other->fightingbossmsg_);
    luckylist_.Swap(&other->luckylist_);
    std::swap(ltsaverevision_, other->ltsaverevision_);
    lastranklist_.Swap(&other->lastranklist_);
    highpointlist_.Swap(&other->highpointlist_);
    uplist_.Swap(&other->uplist_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DB_C_BossBtlMsg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DB_C_BossBtlMsg_descriptor_;
  metadata.reflection = DB_C_BossBtlMsg_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DB_C_BossInfo::kBossIDFieldNumber;
const int DB_C_BossInfo::kBossLvFieldNumber;
#endif  // !_MSC_VER

DB_C_BossInfo::DB_C_BossInfo() {
  SharedCtor();
}

void DB_C_BossInfo::InitAsDefaultInstance() {
}

DB_C_BossInfo::DB_C_BossInfo(const DB_C_BossInfo& from) {
  SharedCtor();
  MergeFrom(from);
}

void DB_C_BossInfo::SharedCtor() {
  _cached_size_ = 0;
  bossid_ = 0;
  bosslv_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DB_C_BossInfo::~DB_C_BossInfo() {
  SharedDtor();
}

void DB_C_BossInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* DB_C_BossInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DB_C_BossInfo_descriptor_;
}

const DB_C_BossInfo& DB_C_BossInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_countryDB_2eproto();  return *default_instance_;
}

DB_C_BossInfo* DB_C_BossInfo::default_instance_ = NULL;

DB_C_BossInfo* DB_C_BossInfo::New() const {
  return new DB_C_BossInfo;
}

void DB_C_BossInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    bossid_ = 0;
    bosslv_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DB_C_BossInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 bossID = 1 [default = 0];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &bossid_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_bossLv;
        break;
      }
      
      // optional int32 bossLv = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_bossLv:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &bosslv_));
        _set_bit(1);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DB_C_BossInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    DB_C_BossInfo::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional int32 bossID = 1 [default = 0];
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->bossid(), output);
  }
  
  // optional int32 bossLv = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->bosslv(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DB_C_BossInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 bossID = 1 [default = 0];
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->bossid(), target);
  }
  
  // optional int32 bossLv = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->bosslv(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DB_C_BossInfo::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 bossID = 1 [default = 0];
    if (has_bossid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bossid());
    }
    
    // optional int32 bossLv = 2;
    if (has_bosslv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bosslv());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void DB_C_BossInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DB_C_BossInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DB_C_BossInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DB_C_BossInfo::MergeFrom(const DB_C_BossInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_bossid(from.bossid());
    }
    if (from._has_bit(1)) {
      set_bosslv(from.bosslv());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DB_C_BossInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DB_C_BossInfo::CopyFrom(const DB_C_BossInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DB_C_BossInfo::IsInitialized() const {
  
  return true;
}

void DB_C_BossInfo::Swap(DB_C_BossInfo* other) {
  if (other != this) {
    std::swap(bossid_, other->bossid_);
    std::swap(bosslv_, other->bosslv_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DB_C_BossInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DB_C_BossInfo_descriptor_;
  metadata.reflection = DB_C_BossInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DB_C_BossMsg::kBossIDFieldNumber;
const int DB_C_BossMsg::kHpFieldNumber;
const int DB_C_BossMsg::kMaxHpFieldNumber;
#endif  // !_MSC_VER

DB_C_BossMsg::DB_C_BossMsg() {
  SharedCtor();
}

void DB_C_BossMsg::InitAsDefaultInstance() {
}

DB_C_BossMsg::DB_C_BossMsg(const DB_C_BossMsg& from) {
  SharedCtor();
  MergeFrom(from);
}

void DB_C_BossMsg::SharedCtor() {
  _cached_size_ = 0;
  bossid_ = 0;
  hp_ = GOOGLE_LONGLONG(-1);
  maxhp_ = GOOGLE_LONGLONG(-1);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DB_C_BossMsg::~DB_C_BossMsg() {
  SharedDtor();
}

void DB_C_BossMsg::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* DB_C_BossMsg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DB_C_BossMsg_descriptor_;
}

const DB_C_BossMsg& DB_C_BossMsg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_countryDB_2eproto();  return *default_instance_;
}

DB_C_BossMsg* DB_C_BossMsg::default_instance_ = NULL;

DB_C_BossMsg* DB_C_BossMsg::New() const {
  return new DB_C_BossMsg;
}

void DB_C_BossMsg::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    bossid_ = 0;
    hp_ = GOOGLE_LONGLONG(-1);
    maxhp_ = GOOGLE_LONGLONG(-1);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DB_C_BossMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 bossID = 1 [default = 0];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &bossid_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_hp;
        break;
      }
      
      // optional int64 hp = 2 [default = -1];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_hp:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt64(
              input, &hp_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_maxHp;
        break;
      }
      
      // optional int64 maxHp = 3 [default = -1];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_maxHp:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt64(
              input, &maxhp_));
        _set_bit(2);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DB_C_BossMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    DB_C_BossMsg::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional int32 bossID = 1 [default = 0];
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->bossid(), output);
  }
  
  // optional int64 hp = 2 [default = -1];
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->hp(), output);
  }
  
  // optional int64 maxHp = 3 [default = -1];
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->maxhp(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DB_C_BossMsg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 bossID = 1 [default = 0];
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->bossid(), target);
  }
  
  // optional int64 hp = 2 [default = -1];
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->hp(), target);
  }
  
  // optional int64 maxHp = 3 [default = -1];
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->maxhp(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DB_C_BossMsg::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 bossID = 1 [default = 0];
    if (has_bossid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bossid());
    }
    
    // optional int64 hp = 2 [default = -1];
    if (has_hp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->hp());
    }
    
    // optional int64 maxHp = 3 [default = -1];
    if (has_maxhp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->maxhp());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void DB_C_BossMsg::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DB_C_BossMsg* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DB_C_BossMsg*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DB_C_BossMsg::MergeFrom(const DB_C_BossMsg& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_bossid(from.bossid());
    }
    if (from._has_bit(1)) {
      set_hp(from.hp());
    }
    if (from._has_bit(2)) {
      set_maxhp(from.maxhp());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DB_C_BossMsg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DB_C_BossMsg::CopyFrom(const DB_C_BossMsg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DB_C_BossMsg::IsInitialized() const {
  
  return true;
}

void DB_C_BossMsg::Swap(DB_C_BossMsg* other) {
  if (other != this) {
    std::swap(bossid_, other->bossid_);
    std::swap(hp_, other->hp_);
    std::swap(maxhp_, other->maxhp_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DB_C_BossMsg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DB_C_BossMsg_descriptor_;
  metadata.reflection = DB_C_BossMsg_reflection_;
  return metadata;
}


// ===================================================================

const ::std::string DB_C_BossBtlRankUnit::_default_name_;
const ::std::string DB_C_BossBtlRankUnit::_default_pic_;
const ::std::string DB_C_BossBtlRankUnit::_default_words_;
const ::std::string DB_C_BossBtlRankUnit::_default_guildname_;
#ifndef _MSC_VER
const int DB_C_BossBtlRankUnit::kUidFieldNumber;
const int DB_C_BossBtlRankUnit::kNameFieldNumber;
const int DB_C_BossBtlRankUnit::kPicFieldNumber;
const int DB_C_BossBtlRankUnit::kDmgFieldNumber;
const int DB_C_BossBtlRankUnit::kCountFieldNumber;
const int DB_C_BossBtlRankUnit::kNameListFieldNumber;
const int DB_C_BossBtlRankUnit::kWordsFieldNumber;
const int DB_C_BossBtlRankUnit::kReportsFieldNumber;
const int DB_C_BossBtlRankUnit::kPowerFieldNumber;
const int DB_C_BossBtlRankUnit::kLevelFieldNumber;
const int DB_C_BossBtlRankUnit::kGuildnameFieldNumber;
const int DB_C_BossBtlRankUnit::kCountryIDFieldNumber;
#endif  // !_MSC_VER

DB_C_BossBtlRankUnit::DB_C_BossBtlRankUnit() {
  SharedCtor();
}

void DB_C_BossBtlRankUnit::InitAsDefaultInstance() {
}

DB_C_BossBtlRankUnit::DB_C_BossBtlRankUnit(const DB_C_BossBtlRankUnit& from) {
  SharedCtor();
  MergeFrom(from);
}

void DB_C_BossBtlRankUnit::SharedCtor() {
  _cached_size_ = 0;
  uid_ = GOOGLE_LONGLONG(0);
  name_ = const_cast< ::std::string*>(&_default_name_);
  pic_ = const_cast< ::std::string*>(&_default_pic_);
  dmg_ = GOOGLE_LONGLONG(0);
  count_ = 0;
  words_ = const_cast< ::std::string*>(&_default_words_);
  power_ = 0;
  level_ = 0;
  guildname_ = const_cast< ::std::string*>(&_default_guildname_);
  countryid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DB_C_BossBtlRankUnit::~DB_C_BossBtlRankUnit() {
  SharedDtor();
}

void DB_C_BossBtlRankUnit::SharedDtor() {
  if (name_ != &_default_name_) {
    delete name_;
  }
  if (pic_ != &_default_pic_) {
    delete pic_;
  }
  if (words_ != &_default_words_) {
    delete words_;
  }
  if (guildname_ != &_default_guildname_) {
    delete guildname_;
  }
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* DB_C_BossBtlRankUnit::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DB_C_BossBtlRankUnit_descriptor_;
}

const DB_C_BossBtlRankUnit& DB_C_BossBtlRankUnit::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_countryDB_2eproto();  return *default_instance_;
}

DB_C_BossBtlRankUnit* DB_C_BossBtlRankUnit::default_instance_ = NULL;

DB_C_BossBtlRankUnit* DB_C_BossBtlRankUnit::New() const {
  return new DB_C_BossBtlRankUnit;
}

void DB_C_BossBtlRankUnit::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    uid_ = GOOGLE_LONGLONG(0);
    if (_has_bit(1)) {
      if (name_ != &_default_name_) {
        name_->clear();
      }
    }
    if (_has_bit(2)) {
      if (pic_ != &_default_pic_) {
        pic_->clear();
      }
    }
    dmg_ = GOOGLE_LONGLONG(0);
    count_ = 0;
    if (_has_bit(6)) {
      if (words_ != &_default_words_) {
        words_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    power_ = 0;
    level_ = 0;
    if (_has_bit(10)) {
      if (guildname_ != &_default_guildname_) {
        guildname_->clear();
      }
    }
    countryid_ = 0;
  }
  namelist_.Clear();
  reports_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DB_C_BossBtlRankUnit::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 uid = 1 [default = 0];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt64(
              input, &uid_));
        _set_bit(0);
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }
      
      // optional string name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_name:
        DO_(::google::protobuf::internal::WireFormatLite::ReadString(
              input, this->mutable_name()));
        ::google::protobuf::internal::WireFormat::VerifyUTF8String(
          this->name().data(), this->name().length(),
          ::google::protobuf::internal::WireFormat::PARSE);
        if (input->ExpectTag(26)) goto parse_pic;
        break;
      }
      
      // optional string pic = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_pic:
        DO_(::google::protobuf::internal::WireFormatLite::ReadString(
              input, this->mutable_pic()));
        ::google::protobuf::internal::WireFormat::VerifyUTF8String(
          this->pic().data(), this->pic().length(),
          ::google::protobuf::internal::WireFormat::PARSE);
        if (input->ExpectTag(32)) goto parse_dmg;
        break;
      }
      
      // optional int64 dmg = 4 [default = 0];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_dmg:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt64(
              input, &dmg_));
        _set_bit(3);
        if (input->ExpectTag(40)) goto parse_count;
        break;
      }
      
      // optional int32 count = 5 [default = 0];
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_count:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &count_));
        _set_bit(4);
        if (input->ExpectTag(50)) goto parse_nameList;
        break;
      }
      
      // repeated string nameList = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_nameList:
        DO_(::google::protobuf::internal::WireFormatLite::ReadString(
              input, this->add_namelist()));
        ::google::protobuf::internal::WireFormat::VerifyUTF8String(
          this->namelist(0).data(), this->namelist(0).length(),
          ::google::protobuf::internal::WireFormat::PARSE);
        if (input->ExpectTag(50)) goto parse_nameList;
        if (input->ExpectTag(58)) goto parse_words;
        break;
      }
      
      // optional string words = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_words:
        DO_(::google::protobuf::internal::WireFormatLite::ReadString(
              input, this->mutable_words()));
        ::google::protobuf::internal::WireFormat::VerifyUTF8String(
          this->words().data(), this->words().length(),
          ::google::protobuf::internal::WireFormat::PARSE);
        if (input->ExpectTag(66)) goto parse_reports;
        break;
      }
      
      // repeated .DB_C_Report reports = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_reports:
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, add_reports()));
        if (input->ExpectTag(66)) goto parse_reports;
        if (input->ExpectTag(72)) goto parse_power;
        break;
      }
      
      // optional int32 power = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_power:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &power_));
        _set_bit(8);
        if (input->ExpectTag(80)) goto parse_level;
        break;
      }
      
      // optional int32 level = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_level:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &level_));
        _set_bit(9);
        if (input->ExpectTag(90)) goto parse_guildname;
        break;
      }
      
      // optional string guildname = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_guildname:
        DO_(::google::protobuf::internal::WireFormatLite::ReadString(
              input, this->mutable_guildname()));
        ::google::protobuf::internal::WireFormat::VerifyUTF8String(
          this->guildname().data(), this->guildname().length(),
          ::google::protobuf::internal::WireFormat::PARSE);
        if (input->ExpectTag(96)) goto parse_countryID;
        break;
      }
      
      // optional int32 countryID = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_countryID:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &countryid_));
        _set_bit(11);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DB_C_BossBtlRankUnit::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    DB_C_BossBtlRankUnit::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional int64 uid = 1 [default = 0];
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->uid(), output);
  }
  
  // optional string name = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->name(), output);
  }
  
  // optional string pic = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->pic().data(), this->pic().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->pic(), output);
  }
  
  // optional int64 dmg = 4 [default = 0];
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->dmg(), output);
  }
  
  // optional int32 count = 5 [default = 0];
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->count(), output);
  }
  
  // repeated string nameList = 6;
  for (int i = 0; i < this->namelist_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->namelist(i).data(), this->namelist(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->namelist(i), output);
  }
  
  // optional string words = 7;
  if (_has_bit(6)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->words().data(), this->words().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->words(), output);
  }
  
  // repeated .DB_C_Report reports = 8;
  for (int i = 0; i < this->reports_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      8, this->reports(i), output);
  }
  
  // optional int32 power = 9;
  if (_has_bit(8)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->power(), output);
  }
  
  // optional int32 level = 10;
  if (_has_bit(9)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->level(), output);
  }
  
  // optional string guildname = 11;
  if (_has_bit(10)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->guildname().data(), this->guildname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      11, this->guildname(), output);
  }
  
  // optional int32 countryID = 12;
  if (_has_bit(11)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->countryid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DB_C_BossBtlRankUnit::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int64 uid = 1 [default = 0];
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->uid(), target);
  }
  
  // optional string name = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }
  
  // optional string pic = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->pic().data(), this->pic().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->pic(), target);
  }
  
  // optional int64 dmg = 4 [default = 0];
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->dmg(), target);
  }
  
  // optional int32 count = 5 [default = 0];
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->count(), target);
  }
  
  // repeated string nameList = 6;
  for (int i = 0; i < this->namelist_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->namelist(i).data(), this->namelist(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(6, this->namelist(i), target);
  }
  
  // optional string words = 7;
  if (_has_bit(6)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->words().data(), this->words().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->words(), target);
  }
  
  // repeated .DB_C_Report reports = 8;
  for (int i = 0; i < this->reports_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->reports(i), target);
  }
  
  // optional int32 power = 9;
  if (_has_bit(8)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->power(), target);
  }
  
  // optional int32 level = 10;
  if (_has_bit(9)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->level(), target);
  }
  
  // optional string guildname = 11;
  if (_has_bit(10)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->guildname().data(), this->guildname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        11, this->guildname(), target);
  }
  
  // optional int32 countryID = 12;
  if (_has_bit(11)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->countryid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DB_C_BossBtlRankUnit::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 uid = 1 [default = 0];
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->uid());
    }
    
    // optional string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }
    
    // optional string pic = 3;
    if (has_pic()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->pic());
    }
    
    // optional int64 dmg = 4 [default = 0];
    if (has_dmg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->dmg());
    }
    
    // optional int32 count = 5 [default = 0];
    if (has_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->count());
    }
    
    // optional string words = 7;
    if (has_words()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->words());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 power = 9;
    if (has_power()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->power());
    }
    
    // optional int32 level = 10;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->level());
    }
    
    // optional string guildname = 11;
    if (has_guildname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->guildname());
    }
    
    // optional int32 countryID = 12;
    if (has_countryid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->countryid());
    }
    
  }
  // repeated string nameList = 6;
  total_size += 1 * this->namelist_size();
  for (int i = 0; i < this->namelist_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->namelist(i));
  }
  
  // repeated .DB_C_Report reports = 8;
  total_size += 1 * this->reports_size();
  for (int i = 0; i < this->reports_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->reports(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void DB_C_BossBtlRankUnit::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DB_C_BossBtlRankUnit* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DB_C_BossBtlRankUnit*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DB_C_BossBtlRankUnit::MergeFrom(const DB_C_BossBtlRankUnit& from) {
  GOOGLE_CHECK_NE(&from, this);
  namelist_.MergeFrom(from.namelist_);
  reports_.MergeFrom(from.reports_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_uid(from.uid());
    }
    if (from._has_bit(1)) {
      set_name(from.name());
    }
    if (from._has_bit(2)) {
      set_pic(from.pic());
    }
    if (from._has_bit(3)) {
      set_dmg(from.dmg());
    }
    if (from._has_bit(4)) {
      set_count(from.count());
    }
    if (from._has_bit(6)) {
      set_words(from.words());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from._has_bit(8)) {
      set_power(from.power());
    }
    if (from._has_bit(9)) {
      set_level(from.level());
    }
    if (from._has_bit(10)) {
      set_guildname(from.guildname());
    }
    if (from._has_bit(11)) {
      set_countryid(from.countryid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DB_C_BossBtlRankUnit::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DB_C_BossBtlRankUnit::CopyFrom(const DB_C_BossBtlRankUnit& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DB_C_BossBtlRankUnit::IsInitialized() const {
  
  return true;
}

void DB_C_BossBtlRankUnit::Swap(DB_C_BossBtlRankUnit* other) {
  if (other != this) {
    std::swap(uid_, other->uid_);
    std::swap(name_, other->name_);
    std::swap(pic_, other->pic_);
    std::swap(dmg_, other->dmg_);
    std::swap(count_, other->count_);
    namelist_.Swap(&other->namelist_);
    std::swap(words_, other->words_);
    reports_.Swap(&other->reports_);
    std::swap(power_, other->power_);
    std::swap(level_, other->level_);
    std::swap(guildname_, other->guildname_);
    std::swap(countryid_, other->countryid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DB_C_BossBtlRankUnit::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DB_C_BossBtlRankUnit_descriptor_;
  metadata.reflection = DB_C_BossBtlRankUnit_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DB_C_Report::kTypeFieldNumber;
const int DB_C_Report::kCountFieldNumber;
#endif  // !_MSC_VER

DB_C_Report::DB_C_Report() {
  SharedCtor();
}

void DB_C_Report::InitAsDefaultInstance() {
}

DB_C_Report::DB_C_Report(const DB_C_Report& from) {
  SharedCtor();
  MergeFrom(from);
}

void DB_C_Report::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  count_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DB_C_Report::~DB_C_Report() {
  SharedDtor();
}

void DB_C_Report::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* DB_C_Report::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DB_C_Report_descriptor_;
}

const DB_C_Report& DB_C_Report::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_countryDB_2eproto();  return *default_instance_;
}

DB_C_Report* DB_C_Report::default_instance_ = NULL;

DB_C_Report* DB_C_Report::New() const {
  return new DB_C_Report;
}

void DB_C_Report::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0;
    count_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DB_C_Report::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 type = 1 [default = 0];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &type_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_count;
        break;
      }
      
      // optional int32 count = 2 [default = 0];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_count:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &count_));
        _set_bit(1);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DB_C_Report::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    DB_C_Report::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional int32 type = 1 [default = 0];
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->type(), output);
  }
  
  // optional int32 count = 2 [default = 0];
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->count(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DB_C_Report::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 type = 1 [default = 0];
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->type(), target);
  }
  
  // optional int32 count = 2 [default = 0];
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->count(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DB_C_Report::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 type = 1 [default = 0];
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }
    
    // optional int32 count = 2 [default = 0];
    if (has_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->count());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void DB_C_Report::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DB_C_Report* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DB_C_Report*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DB_C_Report::MergeFrom(const DB_C_Report& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_type(from.type());
    }
    if (from._has_bit(1)) {
      set_count(from.count());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DB_C_Report::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DB_C_Report::CopyFrom(const DB_C_Report& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DB_C_Report::IsInitialized() const {
  
  return true;
}

void DB_C_Report::Swap(DB_C_Report* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(count_, other->count_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DB_C_Report::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DB_C_Report_descriptor_;
  metadata.reflection = DB_C_Report_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DB_C_NpcActiveRankItem::kCountryFieldNumber;
const int DB_C_NpcActiveRankItem::kWincntFieldNumber;
#endif  // !_MSC_VER

DB_C_NpcActiveRankItem::DB_C_NpcActiveRankItem() {
  SharedCtor();
}

void DB_C_NpcActiveRankItem::InitAsDefaultInstance() {
}

DB_C_NpcActiveRankItem::DB_C_NpcActiveRankItem(const DB_C_NpcActiveRankItem& from) {
  SharedCtor();
  MergeFrom(from);
}

void DB_C_NpcActiveRankItem::SharedCtor() {
  _cached_size_ = 0;
  country_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DB_C_NpcActiveRankItem::~DB_C_NpcActiveRankItem() {
  SharedDtor();
}

void DB_C_NpcActiveRankItem::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* DB_C_NpcActiveRankItem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DB_C_NpcActiveRankItem_descriptor_;
}

const DB_C_NpcActiveRankItem& DB_C_NpcActiveRankItem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_countryDB_2eproto();  return *default_instance_;
}

DB_C_NpcActiveRankItem* DB_C_NpcActiveRankItem::default_instance_ = NULL;

DB_C_NpcActiveRankItem* DB_C_NpcActiveRankItem::New() const {
  return new DB_C_NpcActiveRankItem;
}

void DB_C_NpcActiveRankItem::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    country_ = 0;
  }
  wincnt_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DB_C_NpcActiveRankItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 country = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &country_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_wincnt;
        break;
      }
      
      // repeated int32 wincnt = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_wincnt:
        ::google::protobuf::int32 value;
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &value));
        add_wincnt(value);
        if (input->ExpectTag(16)) goto parse_wincnt;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DB_C_NpcActiveRankItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    DB_C_NpcActiveRankItem::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional int32 country = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->country(), output);
  }
  
  // repeated int32 wincnt = 2;
  for (int i = 0; i < this->wincnt_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      2, this->wincnt(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DB_C_NpcActiveRankItem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 country = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->country(), target);
  }
  
  // repeated int32 wincnt = 2;
  for (int i = 0; i < this->wincnt_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(2, this->wincnt(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DB_C_NpcActiveRankItem::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 country = 1;
    if (has_country()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->country());
    }
    
  }
  // repeated int32 wincnt = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->wincnt_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->wincnt(i));
    }
    total_size += 1 * this->wincnt_size() + data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void DB_C_NpcActiveRankItem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DB_C_NpcActiveRankItem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DB_C_NpcActiveRankItem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DB_C_NpcActiveRankItem::MergeFrom(const DB_C_NpcActiveRankItem& from) {
  GOOGLE_CHECK_NE(&from, this);
  wincnt_.MergeFrom(from.wincnt_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_country(from.country());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DB_C_NpcActiveRankItem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DB_C_NpcActiveRankItem::CopyFrom(const DB_C_NpcActiveRankItem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DB_C_NpcActiveRankItem::IsInitialized() const {
  
  return true;
}

void DB_C_NpcActiveRankItem::Swap(DB_C_NpcActiveRankItem* other) {
  if (other != this) {
    std::swap(country_, other->country_);
    wincnt_.Swap(&other->wincnt_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DB_C_NpcActiveRankItem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DB_C_NpcActiveRankItem_descriptor_;
  metadata.reflection = DB_C_NpcActiveRankItem_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DB_C_NpcActiveRank::kRanktimeFieldNumber;
const int DB_C_NpcActiveRank::kRankFieldNumber;
#endif  // !_MSC_VER

DB_C_NpcActiveRank::DB_C_NpcActiveRank() {
  SharedCtor();
}

void DB_C_NpcActiveRank::InitAsDefaultInstance() {
}

DB_C_NpcActiveRank::DB_C_NpcActiveRank(const DB_C_NpcActiveRank& from) {
  SharedCtor();
  MergeFrom(from);
}

void DB_C_NpcActiveRank::SharedCtor() {
  _cached_size_ = 0;
  ranktime_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DB_C_NpcActiveRank::~DB_C_NpcActiveRank() {
  SharedDtor();
}

void DB_C_NpcActiveRank::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* DB_C_NpcActiveRank::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DB_C_NpcActiveRank_descriptor_;
}

const DB_C_NpcActiveRank& DB_C_NpcActiveRank::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_countryDB_2eproto();  return *default_instance_;
}

DB_C_NpcActiveRank* DB_C_NpcActiveRank::default_instance_ = NULL;

DB_C_NpcActiveRank* DB_C_NpcActiveRank::New() const {
  return new DB_C_NpcActiveRank;
}

void DB_C_NpcActiveRank::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ranktime_ = 0;
  }
  rank_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DB_C_NpcActiveRank::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 ranktime = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &ranktime_));
        _set_bit(0);
        if (input->ExpectTag(18)) goto parse_rank;
        break;
      }
      
      // repeated .DB_C_NpcActiveRankItem rank = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_rank:
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, add_rank()));
        if (input->ExpectTag(18)) goto parse_rank;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DB_C_NpcActiveRank::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    DB_C_NpcActiveRank::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional int32 ranktime = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ranktime(), output);
  }
  
  // repeated .DB_C_NpcActiveRankItem rank = 2;
  for (int i = 0; i < this->rank_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      2, this->rank(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DB_C_NpcActiveRank::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 ranktime = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ranktime(), target);
  }
  
  // repeated .DB_C_NpcActiveRankItem rank = 2;
  for (int i = 0; i < this->rank_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->rank(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DB_C_NpcActiveRank::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 ranktime = 1;
    if (has_ranktime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ranktime());
    }
    
  }
  // repeated .DB_C_NpcActiveRankItem rank = 2;
  total_size += 1 * this->rank_size();
  for (int i = 0; i < this->rank_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->rank(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void DB_C_NpcActiveRank::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DB_C_NpcActiveRank* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DB_C_NpcActiveRank*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DB_C_NpcActiveRank::MergeFrom(const DB_C_NpcActiveRank& from) {
  GOOGLE_CHECK_NE(&from, this);
  rank_.MergeFrom(from.rank_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_ranktime(from.ranktime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DB_C_NpcActiveRank::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DB_C_NpcActiveRank::CopyFrom(const DB_C_NpcActiveRank& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DB_C_NpcActiveRank::IsInitialized() const {
  
  return true;
}

void DB_C_NpcActiveRank::Swap(DB_C_NpcActiveRank* other) {
  if (other != this) {
    std::swap(ranktime_, other->ranktime_);
    rank_.Swap(&other->rank_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DB_C_NpcActiveRank::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DB_C_NpcActiveRank_descriptor_;
  metadata.reflection = DB_C_NpcActiveRank_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DB_C_GuildRedEnvelope::kNFlagFieldNumber;
const int DB_C_GuildRedEnvelope::kNTotalFieldNumber;
const int DB_C_GuildRedEnvelope::kNCurrentIDFieldNumber;
const int DB_C_GuildRedEnvelope::kListRedEnvelopeFieldNumber;
#endif  // !_MSC_VER

DB_C_GuildRedEnvelope::DB_C_GuildRedEnvelope() {
  SharedCtor();
}

void DB_C_GuildRedEnvelope::InitAsDefaultInstance() {
}

DB_C_GuildRedEnvelope::DB_C_GuildRedEnvelope(const DB_C_GuildRedEnvelope& from) {
  SharedCtor();
  MergeFrom(from);
}

void DB_C_GuildRedEnvelope::SharedCtor() {
  _cached_size_ = 0;
  nflag_ = 0;
  ntotal_ = 0;
  ncurrentid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DB_C_GuildRedEnvelope::~DB_C_GuildRedEnvelope() {
  SharedDtor();
}

void DB_C_GuildRedEnvelope::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* DB_C_GuildRedEnvelope::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DB_C_GuildRedEnvelope_descriptor_;
}

const DB_C_GuildRedEnvelope& DB_C_GuildRedEnvelope::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_countryDB_2eproto();  return *default_instance_;
}

DB_C_GuildRedEnvelope* DB_C_GuildRedEnvelope::default_instance_ = NULL;

DB_C_GuildRedEnvelope* DB_C_GuildRedEnvelope::New() const {
  return new DB_C_GuildRedEnvelope;
}

void DB_C_GuildRedEnvelope::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    nflag_ = 0;
    ntotal_ = 0;
    ncurrentid_ = 0;
  }
  listredenvelope_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DB_C_GuildRedEnvelope::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 nFlag = 1 [default = 0];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &nflag_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_nTotal;
        break;
      }
      
      // optional int32 nTotal = 2 [default = 0];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_nTotal:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &ntotal_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_nCurrentID;
        break;
      }
      
      // optional int32 nCurrentID = 3 [default = 0];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_nCurrentID:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &ncurrentid_));
        _set_bit(2);
        if (input->ExpectTag(34)) goto parse_listRedEnvelope;
        break;
      }
      
      // repeated .DB_C_RedEnvelopeInfo listRedEnvelope = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_listRedEnvelope:
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, add_listredenvelope()));
        if (input->ExpectTag(34)) goto parse_listRedEnvelope;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DB_C_GuildRedEnvelope::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    DB_C_GuildRedEnvelope::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional int32 nFlag = 1 [default = 0];
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->nflag(), output);
  }
  
  // optional int32 nTotal = 2 [default = 0];
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->ntotal(), output);
  }
  
  // optional int32 nCurrentID = 3 [default = 0];
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->ncurrentid(), output);
  }
  
  // repeated .DB_C_RedEnvelopeInfo listRedEnvelope = 4;
  for (int i = 0; i < this->listredenvelope_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      4, this->listredenvelope(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DB_C_GuildRedEnvelope::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 nFlag = 1 [default = 0];
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->nflag(), target);
  }
  
  // optional int32 nTotal = 2 [default = 0];
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->ntotal(), target);
  }
  
  // optional int32 nCurrentID = 3 [default = 0];
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->ncurrentid(), target);
  }
  
  // repeated .DB_C_RedEnvelopeInfo listRedEnvelope = 4;
  for (int i = 0; i < this->listredenvelope_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->listredenvelope(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DB_C_GuildRedEnvelope::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 nFlag = 1 [default = 0];
    if (has_nflag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->nflag());
    }
    
    // optional int32 nTotal = 2 [default = 0];
    if (has_ntotal()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ntotal());
    }
    
    // optional int32 nCurrentID = 3 [default = 0];
    if (has_ncurrentid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ncurrentid());
    }
    
  }
  // repeated .DB_C_RedEnvelopeInfo listRedEnvelope = 4;
  total_size += 1 * this->listredenvelope_size();
  for (int i = 0; i < this->listredenvelope_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->listredenvelope(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void DB_C_GuildRedEnvelope::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DB_C_GuildRedEnvelope* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DB_C_GuildRedEnvelope*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DB_C_GuildRedEnvelope::MergeFrom(const DB_C_GuildRedEnvelope& from) {
  GOOGLE_CHECK_NE(&from, this);
  listredenvelope_.MergeFrom(from.listredenvelope_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_nflag(from.nflag());
    }
    if (from._has_bit(1)) {
      set_ntotal(from.ntotal());
    }
    if (from._has_bit(2)) {
      set_ncurrentid(from.ncurrentid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DB_C_GuildRedEnvelope::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DB_C_GuildRedEnvelope::CopyFrom(const DB_C_GuildRedEnvelope& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DB_C_GuildRedEnvelope::IsInitialized() const {
  
  return true;
}

void DB_C_GuildRedEnvelope::Swap(DB_C_GuildRedEnvelope* other) {
  if (other != this) {
    std::swap(nflag_, other->nflag_);
    std::swap(ntotal_, other->ntotal_);
    std::swap(ncurrentid_, other->ncurrentid_);
    listredenvelope_.Swap(&other->listredenvelope_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DB_C_GuildRedEnvelope::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DB_C_GuildRedEnvelope_descriptor_;
  metadata.reflection = DB_C_GuildRedEnvelope_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DB_C_RedEnvelopeInfo::kNIDFieldNumber;
const int DB_C_RedEnvelopeInfo::kNTypeFieldNumber;
const int DB_C_RedEnvelopeInfo::kUidFieldNumber;
const int DB_C_RedEnvelopeInfo::kNTotalCreditFieldNumber;
const int DB_C_RedEnvelopeInfo::kNIssueTimeFieldNumber;
const int DB_C_RedEnvelopeInfo::kNOverdueTimeFieldNumber;
const int DB_C_RedEnvelopeInfo::kNGiveOutFieldNumber;
const int DB_C_RedEnvelopeInfo::kNTotalNumFieldNumber;
const int DB_C_RedEnvelopeInfo::kNAdjTypeFieldNumber;
const int DB_C_RedEnvelopeInfo::kBRefundFieldNumber;
const int DB_C_RedEnvelopeInfo::kListReportFieldNumber;
#endif  // !_MSC_VER

DB_C_RedEnvelopeInfo::DB_C_RedEnvelopeInfo() {
  SharedCtor();
}

void DB_C_RedEnvelopeInfo::InitAsDefaultInstance() {
}

DB_C_RedEnvelopeInfo::DB_C_RedEnvelopeInfo(const DB_C_RedEnvelopeInfo& from) {
  SharedCtor();
  MergeFrom(from);
}

void DB_C_RedEnvelopeInfo::SharedCtor() {
  _cached_size_ = 0;
  nid_ = 0;
  ntype_ = 0;
  uid_ = GOOGLE_LONGLONG(0);
  ntotalcredit_ = 0;
  nissuetime_ = 0;
  noverduetime_ = 0;
  ngiveout_ = 0;
  ntotalnum_ = 0;
  nadjtype_ = 0;
  brefund_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DB_C_RedEnvelopeInfo::~DB_C_RedEnvelopeInfo() {
  SharedDtor();
}

void DB_C_RedEnvelopeInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* DB_C_RedEnvelopeInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DB_C_RedEnvelopeInfo_descriptor_;
}

const DB_C_RedEnvelopeInfo& DB_C_RedEnvelopeInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_countryDB_2eproto();  return *default_instance_;
}

DB_C_RedEnvelopeInfo* DB_C_RedEnvelopeInfo::default_instance_ = NULL;

DB_C_RedEnvelopeInfo* DB_C_RedEnvelopeInfo::New() const {
  return new DB_C_RedEnvelopeInfo;
}

void DB_C_RedEnvelopeInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    nid_ = 0;
    ntype_ = 0;
    uid_ = GOOGLE_LONGLONG(0);
    ntotalcredit_ = 0;
    nissuetime_ = 0;
    noverduetime_ = 0;
    ngiveout_ = 0;
    ntotalnum_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    nadjtype_ = 0;
    brefund_ = false;
  }
  listreport_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DB_C_RedEnvelopeInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 nID = 1 [default = 0];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &nid_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_nType;
        break;
      }
      
      // optional int32 nType = 2 [default = 0];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_nType:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &ntype_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_uid;
        break;
      }
      
      // optional int64 uid = 3 [default = 0];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_uid:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt64(
              input, &uid_));
        _set_bit(2);
        if (input->ExpectTag(32)) goto parse_nTotalCredit;
        break;
      }
      
      // optional int32 nTotalCredit = 4 [default = 0];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_nTotalCredit:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &ntotalcredit_));
        _set_bit(3);
        if (input->ExpectTag(40)) goto parse_nIssueTime;
        break;
      }
      
      // optional int32 nIssueTime = 5 [default = 0];
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_nIssueTime:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &nissuetime_));
        _set_bit(4);
        if (input->ExpectTag(48)) goto parse_nOverdueTime;
        break;
      }
      
      // optional int32 nOverdueTime = 6 [default = 0];
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_nOverdueTime:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &noverduetime_));
        _set_bit(5);
        if (input->ExpectTag(56)) goto parse_nGiveOut;
        break;
      }
      
      // optional int32 nGiveOut = 7 [default = 0];
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_nGiveOut:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &ngiveout_));
        _set_bit(6);
        if (input->ExpectTag(64)) goto parse_nTotalNum;
        break;
      }
      
      // optional int32 nTotalNum = 8 [default = 0];
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_nTotalNum:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &ntotalnum_));
        _set_bit(7);
        if (input->ExpectTag(72)) goto parse_nAdjType;
        break;
      }
      
      // optional int32 nAdjType = 9 [default = 0];
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_nAdjType:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &nadjtype_));
        _set_bit(8);
        if (input->ExpectTag(80)) goto parse_bRefund;
        break;
      }
      
      // optional bool bRefund = 10 [default = false];
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_bRefund:
        DO_(::google::protobuf::internal::WireFormatLite::ReadBool(
              input, &brefund_));
        _set_bit(9);
        if (input->ExpectTag(90)) goto parse_listReport;
        break;
      }
      
      // repeated .DB_C_RedEnvelopeReport listReport = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_listReport:
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, add_listreport()));
        if (input->ExpectTag(90)) goto parse_listReport;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DB_C_RedEnvelopeInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    DB_C_RedEnvelopeInfo::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional int32 nID = 1 [default = 0];
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->nid(), output);
  }
  
  // optional int32 nType = 2 [default = 0];
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->ntype(), output);
  }
  
  // optional int64 uid = 3 [default = 0];
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->uid(), output);
  }
  
  // optional int32 nTotalCredit = 4 [default = 0];
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->ntotalcredit(), output);
  }
  
  // optional int32 nIssueTime = 5 [default = 0];
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->nissuetime(), output);
  }
  
  // optional int32 nOverdueTime = 6 [default = 0];
  if (_has_bit(5)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->noverduetime(), output);
  }
  
  // optional int32 nGiveOut = 7 [default = 0];
  if (_has_bit(6)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->ngiveout(), output);
  }
  
  // optional int32 nTotalNum = 8 [default = 0];
  if (_has_bit(7)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->ntotalnum(), output);
  }
  
  // optional int32 nAdjType = 9 [default = 0];
  if (_has_bit(8)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->nadjtype(), output);
  }
  
  // optional bool bRefund = 10 [default = false];
  if (_has_bit(9)) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(10, this->brefund(), output);
  }
  
  // repeated .DB_C_RedEnvelopeReport listReport = 11;
  for (int i = 0; i < this->listreport_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      11, this->listreport(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DB_C_RedEnvelopeInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 nID = 1 [default = 0];
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->nid(), target);
  }
  
  // optional int32 nType = 2 [default = 0];
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->ntype(), target);
  }
  
  // optional int64 uid = 3 [default = 0];
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->uid(), target);
  }
  
  // optional int32 nTotalCredit = 4 [default = 0];
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->ntotalcredit(), target);
  }
  
  // optional int32 nIssueTime = 5 [default = 0];
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->nissuetime(), target);
  }
  
  // optional int32 nOverdueTime = 6 [default = 0];
  if (_has_bit(5)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->noverduetime(), target);
  }
  
  // optional int32 nGiveOut = 7 [default = 0];
  if (_has_bit(6)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->ngiveout(), target);
  }
  
  // optional int32 nTotalNum = 8 [default = 0];
  if (_has_bit(7)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->ntotalnum(), target);
  }
  
  // optional int32 nAdjType = 9 [default = 0];
  if (_has_bit(8)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->nadjtype(), target);
  }
  
  // optional bool bRefund = 10 [default = false];
  if (_has_bit(9)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(10, this->brefund(), target);
  }
  
  // repeated .DB_C_RedEnvelopeReport listReport = 11;
  for (int i = 0; i < this->listreport_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        11, this->listreport(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DB_C_RedEnvelopeInfo::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 nID = 1 [default = 0];
    if (has_nid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->nid());
    }
    
    // optional int32 nType = 2 [default = 0];
    if (has_ntype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ntype());
    }
    
    // optional int64 uid = 3 [default = 0];
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->uid());
    }
    
    // optional int32 nTotalCredit = 4 [default = 0];
    if (has_ntotalcredit()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ntotalcredit());
    }
    
    // optional int32 nIssueTime = 5 [default = 0];
    if (has_nissuetime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->nissuetime());
    }
    
    // optional int32 nOverdueTime = 6 [default = 0];
    if (has_noverduetime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->noverduetime());
    }
    
    // optional int32 nGiveOut = 7 [default = 0];
    if (has_ngiveout()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ngiveout());
    }
    
    // optional int32 nTotalNum = 8 [default = 0];
    if (has_ntotalnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ntotalnum());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 nAdjType = 9 [default = 0];
    if (has_nadjtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->nadjtype());
    }
    
    // optional bool bRefund = 10 [default = false];
    if (has_brefund()) {
      total_size += 1 + 1;
    }
    
  }
  // repeated .DB_C_RedEnvelopeReport listReport = 11;
  total_size += 1 * this->listreport_size();
  for (int i = 0; i < this->listreport_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->listreport(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void DB_C_RedEnvelopeInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DB_C_RedEnvelopeInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DB_C_RedEnvelopeInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DB_C_RedEnvelopeInfo::MergeFrom(const DB_C_RedEnvelopeInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  listreport_.MergeFrom(from.listreport_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_nid(from.nid());
    }
    if (from._has_bit(1)) {
      set_ntype(from.ntype());
    }
    if (from._has_bit(2)) {
      set_uid(from.uid());
    }
    if (from._has_bit(3)) {
      set_ntotalcredit(from.ntotalcredit());
    }
    if (from._has_bit(4)) {
      set_nissuetime(from.nissuetime());
    }
    if (from._has_bit(5)) {
      set_noverduetime(from.noverduetime());
    }
    if (from._has_bit(6)) {
      set_ngiveout(from.ngiveout());
    }
    if (from._has_bit(7)) {
      set_ntotalnum(from.ntotalnum());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from._has_bit(8)) {
      set_nadjtype(from.nadjtype());
    }
    if (from._has_bit(9)) {
      set_brefund(from.brefund());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DB_C_RedEnvelopeInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DB_C_RedEnvelopeInfo::CopyFrom(const DB_C_RedEnvelopeInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DB_C_RedEnvelopeInfo::IsInitialized() const {
  
  return true;
}

void DB_C_RedEnvelopeInfo::Swap(DB_C_RedEnvelopeInfo* other) {
  if (other != this) {
    std::swap(nid_, other->nid_);
    std::swap(ntype_, other->ntype_);
    std::swap(uid_, other->uid_);
    std::swap(ntotalcredit_, other->ntotalcredit_);
    std::swap(nissuetime_, other->nissuetime_);
    std::swap(noverduetime_, other->noverduetime_);
    std::swap(ngiveout_, other->ngiveout_);
    std::swap(ntotalnum_, other->ntotalnum_);
    std::swap(nadjtype_, other->nadjtype_);
    std::swap(brefund_, other->brefund_);
    listreport_.Swap(&other->listreport_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DB_C_RedEnvelopeInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DB_C_RedEnvelopeInfo_descriptor_;
  metadata.reflection = DB_C_RedEnvelopeInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DB_C_RedEnvelopeReport::kNTimeFieldNumber;
const int DB_C_RedEnvelopeReport::kNUidFieldNumber;
const int DB_C_RedEnvelopeReport::kNGetNumFieldNumber;
#endif  // !_MSC_VER

DB_C_RedEnvelopeReport::DB_C_RedEnvelopeReport() {
  SharedCtor();
}

void DB_C_RedEnvelopeReport::InitAsDefaultInstance() {
}

DB_C_RedEnvelopeReport::DB_C_RedEnvelopeReport(const DB_C_RedEnvelopeReport& from) {
  SharedCtor();
  MergeFrom(from);
}

void DB_C_RedEnvelopeReport::SharedCtor() {
  _cached_size_ = 0;
  ntime_ = 0;
  nuid_ = GOOGLE_LONGLONG(0);
  ngetnum_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DB_C_RedEnvelopeReport::~DB_C_RedEnvelopeReport() {
  SharedDtor();
}

void DB_C_RedEnvelopeReport::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* DB_C_RedEnvelopeReport::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DB_C_RedEnvelopeReport_descriptor_;
}

const DB_C_RedEnvelopeReport& DB_C_RedEnvelopeReport::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_countryDB_2eproto();  return *default_instance_;
}

DB_C_RedEnvelopeReport* DB_C_RedEnvelopeReport::default_instance_ = NULL;

DB_C_RedEnvelopeReport* DB_C_RedEnvelopeReport::New() const {
  return new DB_C_RedEnvelopeReport;
}

void DB_C_RedEnvelopeReport::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ntime_ = 0;
    nuid_ = GOOGLE_LONGLONG(0);
    ngetnum_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DB_C_RedEnvelopeReport::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 nTime = 1 [default = 0];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &ntime_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_nUid;
        break;
      }
      
      // optional int64 nUid = 2 [default = 0];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_nUid:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt64(
              input, &nuid_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_nGetNum;
        break;
      }
      
      // optional int32 nGetNum = 3 [default = 0];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_nGetNum:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &ngetnum_));
        _set_bit(2);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DB_C_RedEnvelopeReport::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    DB_C_RedEnvelopeReport::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional int32 nTime = 1 [default = 0];
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ntime(), output);
  }
  
  // optional int64 nUid = 2 [default = 0];
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->nuid(), output);
  }
  
  // optional int32 nGetNum = 3 [default = 0];
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->ngetnum(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DB_C_RedEnvelopeReport::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 nTime = 1 [default = 0];
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ntime(), target);
  }
  
  // optional int64 nUid = 2 [default = 0];
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->nuid(), target);
  }
  
  // optional int32 nGetNum = 3 [default = 0];
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->ngetnum(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DB_C_RedEnvelopeReport::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 nTime = 1 [default = 0];
    if (has_ntime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ntime());
    }
    
    // optional int64 nUid = 2 [default = 0];
    if (has_nuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->nuid());
    }
    
    // optional int32 nGetNum = 3 [default = 0];
    if (has_ngetnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ngetnum());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void DB_C_RedEnvelopeReport::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DB_C_RedEnvelopeReport* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DB_C_RedEnvelopeReport*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DB_C_RedEnvelopeReport::MergeFrom(const DB_C_RedEnvelopeReport& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_ntime(from.ntime());
    }
    if (from._has_bit(1)) {
      set_nuid(from.nuid());
    }
    if (from._has_bit(2)) {
      set_ngetnum(from.ngetnum());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DB_C_RedEnvelopeReport::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DB_C_RedEnvelopeReport::CopyFrom(const DB_C_RedEnvelopeReport& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DB_C_RedEnvelopeReport::IsInitialized() const {
  
  return true;
}

void DB_C_RedEnvelopeReport::Swap(DB_C_RedEnvelopeReport* other) {
  if (other != this) {
    std::swap(ntime_, other->ntime_);
    std::swap(nuid_, other->nuid_);
    std::swap(ngetnum_, other->ngetnum_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DB_C_RedEnvelopeReport::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DB_C_RedEnvelopeReport_descriptor_;
  metadata.reflection = DB_C_RedEnvelopeReport_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DB_C_RedEnvelopeCount::kNFlagFieldNumber;
const int DB_C_RedEnvelopeCount::kNTotalNumFieldNumber;
const int DB_C_RedEnvelopeCount::kNSendTotalFieldNumber;
#endif  // !_MSC_VER

DB_C_RedEnvelopeCount::DB_C_RedEnvelopeCount() {
  SharedCtor();
}

void DB_C_RedEnvelopeCount::InitAsDefaultInstance() {
}

DB_C_RedEnvelopeCount::DB_C_RedEnvelopeCount(const DB_C_RedEnvelopeCount& from) {
  SharedCtor();
  MergeFrom(from);
}

void DB_C_RedEnvelopeCount::SharedCtor() {
  _cached_size_ = 0;
  nflag_ = 0;
  ntotalnum_ = GOOGLE_LONGLONG(0);
  nsendtotal_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DB_C_RedEnvelopeCount::~DB_C_RedEnvelopeCount() {
  SharedDtor();
}

void DB_C_RedEnvelopeCount::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* DB_C_RedEnvelopeCount::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DB_C_RedEnvelopeCount_descriptor_;
}

const DB_C_RedEnvelopeCount& DB_C_RedEnvelopeCount::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_countryDB_2eproto();  return *default_instance_;
}

DB_C_RedEnvelopeCount* DB_C_RedEnvelopeCount::default_instance_ = NULL;

DB_C_RedEnvelopeCount* DB_C_RedEnvelopeCount::New() const {
  return new DB_C_RedEnvelopeCount;
}

void DB_C_RedEnvelopeCount::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    nflag_ = 0;
    ntotalnum_ = GOOGLE_LONGLONG(0);
    nsendtotal_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DB_C_RedEnvelopeCount::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 nFlag = 1 [default = 0];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &nflag_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_nTotalNum;
        break;
      }
      
      // optional int64 nTotalNum = 2 [default = 0];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_nTotalNum:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt64(
              input, &ntotalnum_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_nSendTotal;
        break;
      }
      
      // optional int32 nSendTotal = 3 [default = 0];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_nSendTotal:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &nsendtotal_));
        _set_bit(2);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DB_C_RedEnvelopeCount::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    DB_C_RedEnvelopeCount::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional int32 nFlag = 1 [default = 0];
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->nflag(), output);
  }
  
  // optional int64 nTotalNum = 2 [default = 0];
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->ntotalnum(), output);
  }
  
  // optional int32 nSendTotal = 3 [default = 0];
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->nsendtotal(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DB_C_RedEnvelopeCount::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 nFlag = 1 [default = 0];
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->nflag(), target);
  }
  
  // optional int64 nTotalNum = 2 [default = 0];
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->ntotalnum(), target);
  }
  
  // optional int32 nSendTotal = 3 [default = 0];
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->nsendtotal(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DB_C_RedEnvelopeCount::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 nFlag = 1 [default = 0];
    if (has_nflag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->nflag());
    }
    
    // optional int64 nTotalNum = 2 [default = 0];
    if (has_ntotalnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->ntotalnum());
    }
    
    // optional int32 nSendTotal = 3 [default = 0];
    if (has_nsendtotal()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->nsendtotal());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void DB_C_RedEnvelopeCount::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DB_C_RedEnvelopeCount* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DB_C_RedEnvelopeCount*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DB_C_RedEnvelopeCount::MergeFrom(const DB_C_RedEnvelopeCount& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_nflag(from.nflag());
    }
    if (from._has_bit(1)) {
      set_ntotalnum(from.ntotalnum());
    }
    if (from._has_bit(2)) {
      set_nsendtotal(from.nsendtotal());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DB_C_RedEnvelopeCount::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DB_C_RedEnvelopeCount::CopyFrom(const DB_C_RedEnvelopeCount& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DB_C_RedEnvelopeCount::IsInitialized() const {
  
  return true;
}

void DB_C_RedEnvelopeCount::Swap(DB_C_RedEnvelopeCount* other) {
  if (other != this) {
    std::swap(nflag_, other->nflag_);
    std::swap(ntotalnum_, other->ntotalnum_);
    std::swap(nsendtotal_, other->nsendtotal_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DB_C_RedEnvelopeCount::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DB_C_RedEnvelopeCount_descriptor_;
  metadata.reflection = DB_C_RedEnvelopeCount_reflection_;
  return metadata;
}

