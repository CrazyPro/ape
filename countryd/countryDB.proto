/////////////////////////////////////////////////////////////////////////
//   基础结构                                                          //
/////////////////////////////////////////////////////////////////////////

message DB_C_User
{
	optional int64 userID 			= 1;
	optional int32 cityID 			= 2;
	optional int32 countryID		= 3;					//国家ID
	optional int32 ArenaIndex		= 4 [default = -1];		//竞技场排名
	optional int32 worldArenaIndex	= 5 [default = -1];		//世界竞技场排名
	optional int32 lastArenaIndex		= 6 [default = -1];		//上期竞技场排名
	optional int32 lastworldArenaIndex	= 7 [default = -1];		//上期世界竞技场排名
	optional int32 guildID 			= 8;		//工会ID，当game与country工会ID不一致时，以game为准，当game与country职位不一致时，以国家为准！
	optional int32 position			= 9;		//职位：0普通 1：会长 2：副会长 3：精英	
	optional int32 officerposition	= 10 [default = 0];		//官员职位
	
	//2014.01.08为了提高点击城市时，玩家列表的效率，将一些基本数据存入国家数据库，但该数据库需要注意，数据尽量越少越好！！！
	optional string name			= 11;
	optional string pic				= 12;
	optional int32  level 		= 13;
	optional int32  vipLevel	= 14;	//vip等级
	optional int32  vipType		= 15;	//vip类型	
	optional int32	gvepoint	= 16;
	optional int32	flag			= 17;
	optional int32  heroArenaIndex	= 18 [default = -1];		//英雄竞技场排名
	optional int32	wpcSearchTime = 19[default = 0];
	optional int32	leaguePoint = 20[default = 0];					//同盟战积分
	optional DB_C_RedEnvelopeCount redEnvelopeCount = 21;		//红包统计
	optional int32 tLastLeaveGuildTime = 22[default = 0];		//最后离开公会的时间 解决同时申请多个公会时存在的玩家退会无CD的BUG
	optional int64	bossBtlDmg = 23; //BOSS战伤害值
	optional int32  wpcLabSearchCnt = 24[default = 0]; //在军备竞赛活动期间实验室探索的次数
	repeated DB_One_Yuan  oneyuan   = 25;  //一元抽奖活动数据
}


message DB_One_Yuan_Reward_key
{
	optional int32 redwardkey = 1;
	optional int32 nIndex = 2;
}

//一元抽奖活动
message DB_One_Yuan
{
 optional int32 flag = 1;  //对应每档物品
	repeated DB_One_Yuan_Reward_key rewardKey = 2;
	
}

message DB_One_Yuan_Purchase_Winner
{
	optional int32 flag = 1;
	optional int64 userid = 2;
	optional bool  bFetch = 3[default=false];
}

//保存全区一元购的一些信息
message DB_Region_One_Yuan
{
	optional int32 oneYuanPurchaseClearTime    = 1[default = 0];;//一元购活动清除事件
	repeated DB_One_Yuan_Purchase_Winner win = 2; //求出一次便把结果保存到数据库中，省的重复计算
}

message DB_C_UserList    //###独立存储单元###
{//玩家信息,key: CUserLst_region*10000+index
	required int32 key				= 1;
	required int32 region			= 2;				//分区
	required int32 index			= 3;				//编号，0-9999
	optional int64 ltSaveRevision	= 4[default = 0];	//时间戳，用于DB数据存储，为提高速度而设的变量，数据可以不准
	repeated DB_C_User user			= 5;				//玩家列表，玩家ID%5000后，放入对应的DB_C_CountryUser存储
	optional DB_Region_One_Yuan regiononeyuan    = 6;////保存全区一元购的一些信息
}

message DB_C_NPC
{
	optional int32	npcID			= 1;		//NPCID，为配表中NPCID*1000 + 数量序号
	optional int32	morale			= 2;		//士气
}

message DB_C_CountryRank
{
	optional int32 nextTime			= 1[default = 0]; 	//下次排行榜生成时间	
	optional int32 rank				= 2[default = 0]; 	//排名
	optional int32 boom				= 3[default = 0]; 	//繁荣度
}

message DB_C_CountryLeagueBattle
{
	optional int32 activeFlag	= 1[default = 0]; 	//活动标记
	optional int32 rank				= 2[default = 0]; 	//排名
	optional int32 boom				= 3[default = 0]; 	//累计繁荣度
	optional int32 leagueID		= 4[default = 0]; 	//0:未初始化 1:一五六名 2:二三四名
	
	optional int32 winID		  = 5[default = 0];		//结果
	optional int32 activeState = 6[default = 0];	//活动进行过程
}

message DB_C_CountryLeagueMsg
{
	optional int32 leagueID		= 1[default = 0];
	repeated int32 countryID 	= 2;
	repeated DB_C_LeaguePlayerUnit playerRankList 		= 3; 
	repeated DB_C_LeaguePlayerUnit playerRankLastList = 4;
	repeated DB_C_LeagueGuildUnit guildList 		 = 5;
	repeated DB_C_LeagueGuildUnit guildLastList = 6;
	repeated int32 lastCountryID = 7;
	repeated int32 boomRecord	= 8;
}

message DB_C_LeaguePlayerUnit
{
	optional string uid	= 1;
	optional string name = 2;
	optional string pic	= 3;
	optional int32  countryid = 4;
	optional string guildName = 5;
	optional int32  fightPoint = 6;
	optional int32  level			 = 7;
	optional int32  leaguePoint = 8;
}

message DB_C_LeagueGuildUnit
{
	optional int32  guildID = 1;
	optional string guildName = 2;
	optional string leaderName = 3;
	optional int32  LeaguePoint = 4;
	optional int32  countryID	  = 5;
}

message DB_C_BtlRecord
{//国家战报
	optional int32  type			= 1;	//0:进攻 1：防守  6:连胜 7:终结连胜 8:占领
	optional int32  btlTime			= 2;	//战斗时间	
	
	optional string atkID 			= 3;	//攻击方ID
	optional string atkName 		= 4;	//攻击方名字
	optional int32  atkCountry		= 5;	//攻击方国家
	
	optional string defID 			= 6;	//防守方ID
	optional string defName 		= 7;	//防守方名字
	optional int32  defCountry		= 8;	//防守方国家
		
	optional int32  cityID			= 9;
	optional int32  winningCnt		= 10;	//连胜数
	
	optional int32  bloodAtkCity	= 11;	//血战攻击方城市
	optional int32  bloodDefCity	= 12;	//血战防守方城市
	optional int32  bloodWinCity	= 13;	//血战胜利方城市
}

message DB_C_BloodBtlStep
{//血战过程
	optional int32 time 					= 1;  
	
	optional string atkID 				= 2;  //攻击方ID
	optional string atkName 			= 3;  //攻击方名字
	optional int32 atkCountry			= 4;  //攻击方ID
	
	optional string defID 				= 5;  //防守方ID
	optional string defName 			= 6;  //防守方名字
	optional int32 defCountry			= 7;  //攻击方ID

	optional string	winID					= 8;	//获胜玩家ID
}

message DB_C_BloodBtl
{//血战
	optional int64  launchUserID	= 1;	//发起人ID
	optional string launchName		= 2;	//发起人姓名
	optional int32  launchTime		= 3;	//发起时间
		
	optional int32  atkCountry		= 4;
	optional int32  atkCity				= 5;	//攻击城市
	optional int32  atkTotalCnt		= 6;	//参战部队数
	optional int32  atkLeftCnt		= 7;	//剩余部队数
			
	optional int32  defCountry		= 8;		
	optional int32  defCity				= 9;	//防御城市
	optional int32  defTotalCnt		= 10;	//参战部队数	
	optional int32  defLeftCnt		= 11; //剩余部队数	
	
	repeated DB_C_BloodBtlStep btlStep	= 12;	//阶段信息
	optional int32  winCity				= 13;	//胜利城市 
	optional int32  overTime			= 14;	//战斗结束时间 
	
	optional int32 type						= 15[default = 0];	//血战类型：0：玩家发起 1:系统发起
}

message DB_C_OfficerRightUse
{
	optional int32	rightId  		= 1;		//权限ID
	optional int64	uid			    = 2;		//uid
	optional int32	endtime  		= 3;		//权限失效时间
	optional string name		    = 4;	    //发起人姓名
	optional int32	position  		= 5;		//发起人职位
}
message DB_C_City		//###独立存储单元###
{//城市信息,key: City_region*10000+cityid
	required int32  region					= 1;				//分区
	required int32  cityID 					= 2;				//城市ID
	required int32	countryID				= 3;				//国家ID
	
	repeated DB_C_NPC	npc						= 5;								//NPC城市的初始NPCID
	optional int32  npcInitTM				= 6[default = 0]; 	//NPC城市初始化时间	
	optional int64	ltSaveRevision	= 7 [default = 0];	//时间戳，用于DB数据存储，为提高速度而设的变量，数据可以不准
	optional DB_C_BloodBtl lastBloodBtl = 8;						//最后一次血战信息，仅记录在发起方
	repeated DB_C_OfficerRightUse   officerRightUseLst = 9;        //官员使用的权限列表 
}

message DB_C_CityBuffData
{
	optional int32 flag 			= 1[default = 0]; 		//buff标记,对应CityBuffTime表的ID
	repeated DB_C_RandomBuff randomBuffs = 2; 				//随机buff,包含城市ID，buffID，城防倒计时起点时间.目前只有4个buff城市
	optional int32  state    		= 3[default = 0];		//本次活动处于什么阶段
}

message DB_C_RandomBuff
{
	optional int32  cityID 			= 1;					//城市ID
	optional int32	buffID			= 2[default = 0];		//buffID,对应CItyBuff表里面ID，目前有8个
	optional int32 	activeTm 		= 3[default = 0];		//buff起效时间，影响城防，一旦起效每小时下降10%，50%触底
}

message DB_Arena_Rank_NPC
{
	optional int32	npcid			= 1;		//id
	optional int32	npcindex		= 2;		//index
}

message DB_Arena_Rank_List
{
	repeated int64	uidlist			= 1;		//id列表
}

message DB_Arena_Score_Unit
{
	optional int64					uid					= 1;	//uid
	optional int32					score				= 2;	//积分
}

message DB_Arena_Score_List
{
	repeated DB_Arena_Score_Unit	scorelist			= 1;	//列表
	optional int32					nActive				= 2;	//活动
}

message DB_Arena_Rank
{
	repeated DB_Arena_Rank_NPC		arenaRankNpc		= 1;	//竞技场NPC数据
	optional DB_Arena_Rank_List		arenaRankLast		= 2;	//竞技场玩家排名--昨天
	optional uint32 				nRankTimeLast		= 3 [default = 0];	//排榜时间
	optional DB_Arena_Score_List	arenaScoreList		= 4;	//竞技场积分排名列表 -- 当前
	optional DB_Arena_Score_List	arenaScoreListOld	= 5;	//竞技场积分排名列表 -- 之前
	optional DB_Arena_Score_List	currentScoreList	= 6;	//竞技场积分排名列表 -- 当前展示
}

message DB_WorldArena_Rank_Unit
{
	optional int64	uid			    = 1;		//id
}

message DB_WorldArena_Rank_List
{
	repeated DB_WorldArena_Rank_Unit	worldArenaRankList			= 1;		//玩家排行列表
	optional int32 				        rankTimeLast	         	= 2 [default = 0];	//排榜时间
	optional int32                      activityIndex			    = 3 [default = 0];	//竞技场活动期数
}

message DB_WorldArena_Rank
{
	repeated DB_Arena_Rank_NPC		        worldArenaRankNpc		= 1;	//世界竞技场NPC数据
	optional DB_WorldArena_Rank_List		worldArenaRankLast		= 2;	//世界竞技场玩家排名昨天
	repeated DB_WorldArena_Rank_List 		worldArenaRankAll		= 3;	//每期排行版
	optional int32                          currentActivityIndex	= 4 [default = 0];	//当前竞技场活动期数
	optional int32                          rankRecordIndex	        = 5 [default = 0];	//每期排行版索引
}


message DB_HeroArena_Rank_Unit
{
	optional int64	uid			    = 1;		//id
}

message DB_HeroArena_Rank_List
{
	repeated DB_HeroArena_Rank_Unit	    heroArenaRankList			= 1;		//玩家排行列表
	optional int32 				        rankTimeLast	         	= 2 [default = 0];	//排榜时间
	optional int32                      activityIndex			    = 3 [default = 0];	//竞技场活动期数
}

message DB_HeroArena_Rank
{
	repeated DB_Arena_Rank_NPC		        heroArenaRankNpc		= 1;	//英雄竞技场NPC数据
	optional DB_HeroArena_Rank_List 		heroArenaRankLast		= 2;	//英雄竞技场玩家排名昨天
	optional int32                          currentActivityIndex	= 3 [default = 0];	//当前竞技场活动期数
}

message DB_C_Officer
{
  optional int32	officerPosition			    = 1;		//官员类型
	optional int64	uid			                = 2;		//uid
}

message DB_C_OfficerInfo
{
  repeated DB_C_Officer	arenaofficers			    = 1;		//国家竞技场官员列表
	repeated DB_C_Officer	guildofficers			    = 2;		//工会战官员列表
	optional int32			officerRightUseFlag  	    = 3[default = 0];  //官员权限使用标志
	optional int32 		    updateTimeLast	            = 4[default = 0];	//最近一次更新时间
}

message DB_C_PubGuildPKGroup
{
	optional int32 guildID1 = 1;
	optional int32 guildID2 = 2;
}

message DB_C_PubGuildBtlInfo
{//公用工会战数据，目前仅保留在ID为0的世界国家结构中
	optional int32 curSession							= 1;	//当前工会战是第几期
	optional int32 btlDay									= 2;	//工会战日期，格式：20130921	
	optional int32 pkStep									= 3;	//当前进行的阶段	
	repeated bool  curPKOVer							= 4;	//场次计算是否结束	
	optional int32 pkLstIdx								= 5;
	repeated DB_C_PubGuildPKGroup pkLst		= 6;	//当前匹配队列
	optional bool curSesionBtlOver				= 7; 	//本届工会战是否已经结束		
	repeated bool curAddScore							= 8;	//场次计算是结算了积分
}

message DB_C_GuildBtl_Top_Guild
{//工会战上榜工会
	required int32	guildID				= 1;	
	required int32  countryID			= 2;
	optional int32  guildLV 			= 3;	
	optional string	guildName 		= 4;	
	optional int32  userCnt 			= 5;	
	optional int32  btlScore 			= 6;	
	optional string leaderName		= 7;	
		
}

message DB_C_GuildBtl_Record
{//工会战历史记录
	optional int32 seasons											= 1;	//第几期活动
	repeated DB_C_GuildBtl_Top_Guild guildData 	= 2;	//上榜工会
}


message DB_C_Country		//###独立存储单元###
{//国家数据库，国家数据与城市数据独立,key: Country_region*10000+countryid
	required int32  region									= 1;				//分区
	required int32	countryID								= 2;				//国家ID
	optional int32  userCnt									= 3[default = 0];		//国家总人数
	optional int64	ltSaveRevision					= 4[default = 0];		//时间戳，用于DB数据存储，为提高速度而设的变量，数据可以不准
	optional DB_C_CountryRank lastRank 			= 5;				//最后一天排行榜
	repeated DB_C_BtlRecord btlRecord 			= 6;				//国家战报,目前为公用数据，仅保存在ID为0的世界国家结构中
	optional int32 atkTargetCity						= 7;				//攻击目标城市
	optional int32 defTargetCity						= 8;				//防御目标城市	
	optional DB_Arena_Rank	arenaRank				= 9;				//竞技场玩家排名数据
	optional uint32  nActivityIndex					= 10 [default = 0];	//竞技场活动期数
	optional DB_WorldArena_Rank	worldArenaRank		= 11;		//世界竞技场玩家排名数据

    optional DB_C_OfficerInfo officerInfo           = 12;       //国家官员
	
	optional DB_C_PubGuildBtlInfo pubGuildBtlInfo	= 13;	//公用工会战数据，仅保存在ID为0的世界国家结构中
	repeated DB_C_GuildBtl_Record gBtlRecord 		= 14;	//历届工会战历史记录，世界国家保留总排行，其他国家保留各自排行
	
	optional int32 dataResetFlag						= 15[default = 0];	//仅保存在ID为0的世界国家结构中。数据重置标记，当该值变化时，清空很多数据，用于合服使用！！！
	repeated DB_GVE_FirstDown gveFirstDownList	=	16;	//GVE首杀数据,仅保存在ID为0的世界国家结构中
	optional int32 gveFlag	=	17;//GVE活动标记
	optional DB_HeroArena_Rank	heroArenaRank		= 18;		//英雄竞技场玩家排名数据
	optional DB_C_PubGvgBtlInfo pubGvgBtlInfo	= 19;	//公用GVG数据，仅保存在ID为0的世界国家结构中
	optional DB_C_WpcRank wpcrank = 20; //公用武器中心排行数据，仅保存在ID为0的世界国家结构中
	optional DB_C_CountryLeagueBattle lastLeagueBattle = 21;	//同盟战分配及国家繁荣度积分
	repeated DB_C_CountryLeagueMsg leagueAllMsg = 22;	//同盟战公用数据排名,仅保存在ID为0的世界国家结构中
	optional DB_C_ChatMsg	chatmsg = 23;	//会长在全国或世界的发言
	repeated int32 npcactivecnt = 24;		//本国在军团通缉令中击杀各档npc计数,按s/a/b顺序
	optional DB_C_NpcActiveRank npcactiverank = 25;	//军团通缉令排名,同上仅保存在earthcountry中
	optional DB_C_CityBuffData CityBuffData = 26; //城市buff信息
}

message DB_C_GuildBld
{//工会建筑物
	optional int32 id			= 1;
	optional int32 level 	= 2;
	optional int32 exp		= 3;

}

message DB_C_GuildLog
{//工会日志
	optional int32 time				= 1;	
	optional string userID			= 2;
	optional string userName	= 3;
	optional int32 logType 		= 4;	// 日志类型：0:加入工会 1:退出工会 2:职位编号 3:工会捐献 4:领取福利 5:升级建筑
	//职位变化
	optional int32 userPos		= 5;
	//建筑升级
	optional int32 bldID			= 6;	
	optional int32 bldLV			= 7;
	//工会捐献
	optional int32 payType		= 8;	//捐献类型	
	optional int32 gScore			= 9;	//捐献获得工会贡献
	//战利品
	optional int32 itemID			= 10;	
	optional int32 itemCnt		= 11;
	optional int32 bldValue		= 12;	//工会建设值
	//工会排名
	optional int32 pkRank			= 13;
	optional int32 pkRank1		= 14;	

}

message DB_C_GuildBuyRecord
{//工会商城购买记录
	optional int32 dayBuyShopID 		= 1;	//商品ID
	optional int32 dayBuyShopCnt		= 2;	//数量
} 

message DB_C_GuildShopPmt
{//工会商城购买权限
	optional int32 shopID 		= 1;	//商品ID
	optional int32 position		= 2;	//最低权限
}

message DB_C_GuildShop
{//工会商城
	optional int32 mysticShopUpdateTM 			= 1;	//神秘商城上次刷新时间
	repeated int32 mysticShopSaleID					= 2;	//神秘商城销售物品
	optional int32 buyRecordDay							= 3;	//购物记录日期
	repeated DB_C_GuildBuyRecord buyRecord 	= 4; 	//购物记录
	repeated DB_C_GuildShopPmt shopPmt 			= 5;	//购买权限
}

message DB_C_GuildBtlAddProp
{
	optional int64 userID			= 1;
	optional int32 addAtkPct	= 2;
	optional int32 addBloodPct= 3;
}

message DB_C_GuildBtlReward_Turns
{//工会战单场结果，用于领取奖励
	optional int32 result			= 1;	
	optional int32 winWay0		= 2;	//三路结果 0:未知 1:胜利 -1:失败
	optional int32 winWay1		= 3;	//三路结果
	optional int32 winWay2		= 4;	//三路结果
	optional int32 score			= 5;	//获得的总积分
	
	optional int32 		guildID 		= 6;
	optional int32 		guildLV 		= 7;
	optional string		guildName 	= 8;
	
	optional int32 		guildEnemyID 		= 9;
	optional int32 		guildEnemyLV 		= 10;
	optional string		guildEnemyName 	= 11;
	
}

message DB_C_GuildBtlReward
{//工会战结果，用于领取奖励,该结构在每天结算时，清除前一天数据
	optional int32 btlDay											= 1;	//工会战日期，格式：20130921
	repeated DB_C_GuildBtlReward_Turns turns	= 2;
}

message DB_C_GuildBtlResult
{//工会战结果

	optional int32 result			= 2;	
	optional int32 winWay0		= 3;	//三路结果 0:未知 1:胜利 -1:失败
	optional int32 winWay1		= 4;	//三路结果
	optional int32 winWay2		= 5;	//三路结果
	optional int32 score			= 6;	//获得的总积分
	
	optional int32 pkGuild		= 7;	//PK的工会ID		
	optional bool	 addFlag		= 8;	//标记本轮积分是否已经加到总积分
	
}

message DB_C_GuildStorage
{//公会仓库
	optional int32 itemID			= 1;	
	optional int32 itemCnt		= 2;
}

message DB_C_GuildBtl
{//工会战数据
	optional int32 btlDay			= 1;	//工会战日期，格式：20130921
	repeated int64 userWay0		=	2;	//队列中默认1、2位是两个道具，处于proto结构考虑，DB中保存顺序与显示相反！
	repeated int64 userWay1		=	3;
	repeated int64 userWay2		=	4;
	optional int32 signupCnt	= 5;	//报名人数
	repeated DB_C_GuildBtlAddProp addProp = 6;	//鼓舞加成
	
	repeated DB_C_GuildBtlResult	result	= 7;	//工会战结果
	optional DB_C_GuildBtlReward   reward = 8;	//工会战奖励
	optional int32 totalScore	= 9;	//本期获得总积分
	
	optional int32 lastBtlSession = 10; //上次参战届数
	optional int32 lastBtlRank 		= 11; //上次参战排名
	optional int32 btlCnt					= 12;	//本期参战次数
	
}

message DB_C_Guild
{//工会数据库
	required int32	guildID				= 1;		//分区*1000000+国家ID+5位随机数
	required int32  countryID			= 2;
	optional int32  guildLV 			= 3;	
	optional string	guildName 		= 4;	
	optional string guildSlogan 	= 5;		//工会口号
	optional string guildBulletin	= 6;		//工会公告
	optional int32  bldValue			= 7;		//工会建设值
	optional int32  guildUesrCnt	= 8;		//工会人数			
	
	optional int64  leaderID			= 9;		//会长ID	
	optional string leaderName		= 10;		//会长名称
	optional int32  delateTM			= 11; 	//弹劾会长时间
	optional int32  leaderLastTM	= 12;		//会长最后一次登录时间	

	repeated int64	applyUserID		= 13;		//申请加入工会玩家列表
	
	repeated DB_C_GuildBld build 	= 14;	//工会建筑
	repeated DB_C_GuildLog log		= 15;	//工会日志
	
	optional DB_C_GuildShop guildShop = 16; //工会商城
	optional int32  totalBldValue			= 17;		//工会累计建设值
	repeated DB_C_GuildLog coinLog	= 18;	//工会捐献日志
	
	optional int32 lastchgtime						= 19;	//上次计算新一天时间
	optional int32 dayKickUserCnt					= 20;	//每日踢出玩家数量
	optional int32 dayEnterCnt						= 21;	//每日加入玩家上限
	
	optional DB_C_GuildBtl btlInfo				= 22;	//工会战信息
	repeated DB_C_GuildStorage storage		= 23;	//工会仓库
	repeated DB_C_GuildLog rewardLog			= 24;	//工会战宝箱分配日志
	
	optional DB_GVE_City gveMsg						= 25; //GVE
	optional DB_C_GVG_Msg gvgMsg					=	26;	//GVG
	
	optional int64 delateID									= 27;//第一个弹劾会长的会员id,delate跟前面一致
	
	optional int32 leagueActiveID					= 28[default = 0];
	optional int32 leaguePoint						= 29[default = 0];
	repeated int64 leagueList							= 30;	//参与玩家 用于联盟战总分计算	
	optional int64 leagueLeaderUID				= 31; //本期领取公会奖励的会长ID
	optional int32	chgLeaderTM	= 32; //最近一次更换会长时间
	optional DB_C_GuildRedEnvelope redEnvelopeInfo = 33;	//公会红包信息
}

message DB_C_GuildList		//###独立存储单元###
{//工会数据库列表key:  CGuildLst_region*10000+index
	required int32 key						= 1;		
	required int32 region					= 2;							//分区
	required int32 index					= 3;							//编号，0-10
	optional int64 ltSaveRevision	= 4[default = 0];	//时间戳，用于DB数据存储，为提高速度而设的变量，数据可以不准
	repeated DB_C_Guild guild			= 5;							//工会列表，工会ID%50后，放入对应的DB_C_GuildList存储
}

//----------------------------------------------------------------------------
//工会战缓存数据库
//----------------------------------------------------------------------------

//双方战斗玩家数据
message DB_C_GuildBtlGeneral
{
	optional	int32				nGeneralID			= 1;	//将领ID
	optional	int32				nGeneralLvl			= 2;	//将领等级
	optional	int32				nGeneralTrainLvl= 3;	//将领培养等级
	optional	int32				nGeneralAtk			= 4;	//将领勇气
	optional	int32				nGeneralDef			= 5;	//将领魅力
	optional	int32				nGeneralHP			= 6;	//将领战略
	optional	int32				nGeneralCrt			= 7;	//将领统御
	optional	int32				nGeneralScore		= 8;	//将领评分
	repeated  DB_C_PVEFightMH       listGeneralMH   = 9;  //将领的荣誉勋章
}

message DB_C_PVEFightMH
{
	optional	int32				nMHID			= 1;	//荣誉勋章ID 配表中的ID
	optional	int32				nMHLv			= 2;	//荣誉勋章等级
}

message DB_C_GuildBtlUser
{
	optional string userID			= 1;
	optional string name				= 2;
	optional string pic					= 3;
	optional int32 level				= 6[default = 0];
	optional int32 combatValue	= 7[default = 0];
	optional int32 	addHPPct		= 8;
	optional int32  addAtkPct		= 9;	
	optional int32	winTime			= 10[default = 0];
	optional int32	maxWinTime	= 11[default = 0];
}

message DB_C_GuildBtlPosition
{
	optional	int32	nPosX		=	1;	//位置x
	optional	int32	nPosY		=	2;	//位置y
}

message DB_C_GuildBtlFightUnit 
{
	optional	int32	nID					=	1;	//ID
	optional	int32	nArmyType		=	2;	//兵种类型
	optional	int32	nHP					=	3;	//当前血量
	optional	int32	nGrade			=	4;	//突破
	optional	int32	nArmyGroup	=	5;	//兵种组
	optional	int32	nRestframe	=	6;	//间隔帧
	optional	DB_C_GuildBtlPosition Pos	=	7;	//位置
	optional	int32	nMaxHP			=	8;	//当前血量
	optional	int32	nHeroGrade 	= 9;	//英雄进阶
	optional	int32	nHeroLV 		= 10;	//英雄等级
	
}


message DB_C_GuildBtlArmyAtkProp
{
	optional	int32	nArmyType		=	1;	//兵种类型
	optional	int32	nHP					=	2;	//血量
	optional	int32	nDamage			=	3;	//伤害
	optional	int32	nDamageBase	=	4;	//伤害基础值
	optional	int32	nDamagePec	=	5;	//伤害加成万分比
	optional	int32	nRange			=	6;	//射程
	optional	int32	nCrt				=	7;	//暴击	万分比
	optional	int32	nSpeed			=	8;	//速度
	optional	int32	nTurnSpeed	=	9;	//转向速度
	repeated	int32	nRestraint	=	10;	//克制关系 万分比
	optional	int32	nCrtDamage	=	11;	//暴击伤害
	optional	int32	nCrtDef			=	12;	//暴击减免
	optional	int32	nDamageDef	=	13;	//伤害减免
	optional	int32	nTotalDamagePct	=	14;	//总伤害加成万分比
	optional	int32	nBuffDamagePct	=	15;	//buff伤害加成万分比
	optional	int32	nRangeBase		  =	16;	//射程
	optional	int32	nSpeedBase		  = 17;	//速度
	repeated	int32	nRestraintdef	=	18;	//防御关系 万分比
	optional	int32	nPropertyDamagePec	=	19;	//改造伤害加成万分比
	optional	int32	nPropertyDamageDefPec	=	20;	//改造伤害防御加成万分比
	repeated  int32 nDefAtkPec = 21;			//减少伤害万分比
	repeated  int32 nDefCritRate = 22;		//减少暴击万分比
	repeated  int32 nDefCritRange = 23;		//减少暴击幅度万分比
}

message DB_C_GuildBtlAdmiralAdd
{
	repeated	int32	nAddPctFoot		=	1;	//步兵加成属性
	repeated	int32	nAddPctTank		=	2;	//坦克加成属性
	repeated	int32	nAddPctPlane	=	3;	//飞机加成属性
	repeated	int32	nAddPctBuild	=	4;	//建筑加成属性
	optional	DB_C_GuildBtlGeneral	fightGeneral	= 5;	//出战将领
}


message Pve_GuildBtlHeroSkill
{//英雄技能，如果英雄挂了，heroid为0
	optional int32 heroId   	 	 	= 1[default = 0];//英雄配表ID
	optional int32 level					= 2[default = 0];//等级
	optional int32 skillID1				= 3[default = 0];//光环技能ID
	optional int32 skill1Grade  	= 4[default = 0];//阶级
	optional int32 skill1Quality 	= 5[default = 0];//品质

	optional int32 skillID2				= 6[default = 0];//合作技能ID		
	optional int32 skill2Grade  	= 7[default = 0];//阶级
	optional int32 skill2Quality  = 8[default = 0];//品质
	
}

message DB_C_GuildBtlSendDataUnit
{
	repeated	DB_C_GuildBtlArmyAtkProp 	pvecarmyatkprop	=	1;	//自己的战斗属性
	repeated	DB_C_GuildBtlFightUnit		pvefightunit		=	2;	//自己的战斗单元
	optional	DB_C_GuildBtlAdmiralAdd		pvefightadmiral	=	3;	//自己的将领属性
	optional	Pve_GuildBtlHeroSkill			pvefightheroskill=4;	//自己的英雄技能
	repeated  int32											nReduceSpeed = 5;			//削弱敌方移速	
	
}

message DB_C_Guild_FightSendData
{	//###独立存储单元###,格式：GuildBtl_User_userid
	optional DB_C_GuildBtlUser btlUser = 1;
	repeated DB_C_GuildBtlSendDataUnit	fightsenddata	=	2;	
}

//----------------------------------------------------------------------------
//工会战战报数据
//----------------------------------------------------------------------------

message DB_C_GuildBtlUserPK
{
	optional string userID1			= 1;
	optional string userID2			= 2;
	optional string winID				= 3;
	optional int32 	winLeftHP		= 4;
	optional bool 	bStreakLeave= 5;
}

message DB_C_GuidlBtlRetWay
{//工会战单路结果	//###独立存储单元###，格式： GuidlBtlRetWay_region_nGuildID_session_way
	optional int32 region 					= 1;
	optional int32 guildID1					= 2;
	optional int32 guildID2					= 3;
	optional int32 session 					= 4;
	optional int32 way		 					= 5;
	optional int32 winGuildID 			= 6;
	repeated DB_C_GuildBtlUser userLst1 	= 7;
	repeated DB_C_GuildBtlUser userLst2 	= 8;
	repeated DB_C_GuildBtlUserPK	pkLst		= 9;
}

message DB_GVE_City
{
	repeated DB_C_NPC	npc						= 1;								//初始NPCID
	optional int32  flag						= 2[default = 0]; 	//活动标记,不可重复

	repeated DB_GVE_Buff	buffList	=	3;
	
	repeated DB_GVE_List nowList		= 5;
	repeated DB_GVE_List LastList		= 6;
	
	optional DB_GVE_Msg	 		nowMsg					= 7;
	optional DB_GVE_Msg	 		lastMsg					= 8;
	optional DB_GVE_Msg	 		HighestMsg			= 9;
	repeated int64			playerList	= 10;	//参与玩家 用于数量计算	
	optional int32			lastRefreshTime = 11;	 //最后刷新、过关时间
	
	repeated DB_C_NPC spNpc					= 12;	//特殊据点NPC,NPC可复活
}

message DB_GVE_List
{
	optional string			uid						= 1;	
	optional string			name					= 2;
	optional int32			gvePoint    	= 3;
	optional int32			level					= 4;
	optional int32			officerPosition = 5;
	optional int32			vipType				= 6;
	optional int32			vipLevel			= 7;
}

message	DB_GVE_Msg
{
		optional int32			gveStep					= 1[default = -1];		//GVE关卡
		optional int32			point						= 2;		//积分
		optional int32			rank						= 3;		//排名
		optional int32			playerCnt				= 4;		//参与人数
		optional int32			overGuildStep		=	5;		//进度超过#v1#的公会
		optional int32			overGuildPoint	=	6;		//积分超过#v1#的公会
		optional int32			overGuildMem		=	7;		//成员超过#v1#的公会
		optional int32			flag						=	8;		//上一届ID
}

message DB_GVE_Buff
{
	optional int32	buffID					=	1;
	optional int32	buffEndTime			=	2;
}

message DB_GVE_FirstDown
{
	optional int32	stepID					=	1;//关卡ID
	optional int32	guildID					=	2;//公会ID
	optional int32	guildCountry		=	3;//所属国家
	optional string guildName				=	4;
}

message DB_C_ResourceData		//###独立存储单元###
{//工会数据库列表key:  CResourse_region*10000
	required int32 key						= 1;		
	required int32 region					= 2;							//分区
	
	repeated DB_C_Resource resourseList = 3;
	optional int64 ltSaveRevision	= 4[default = 0];	//时间戳，用于DB数据存储，为提高速度而设的变量，数据可以不准
}

message DB_C_Resource
{
	required int32 id = 1; //类型 * 100000 + 等级 * 10000 + 流水ID  
	optional int32 type = 2;
	optional int32 lv = 3;
	optional string uid = 4;
	optional string name = 5;
	optional int32 endTime = 6;
	repeated int32 admiralID = 7;
	repeated int32 admiralTrainLv = 8;
	optional int32 pow = 9;
}

//gvg
message DB_C_GvgCity		//###独立存储单元###
{//城市信息,key: GvgCity_region*10000+cityid
	required int32  key							= 1;
	optional int32  region					= 2;				//分区
	required int32  cityID 					= 3;				//城市ID
	optional int32	activeFlag			= 4;				//活动ID，不能重复
	
	optional int32	guildID					= 5 [default = 0];	//占领公会ID
	optional int64	ltSaveRevision	= 6 [default = 0];	//时间戳，用于DB数据存储，为提高速度而设的变量，数据可以不准
	repeated DB_C_GvgSignMsg signGuildList = 7;
	repeated DB_C_GvgBtlRet gvgBtl 	= 8;
	optional int32	step						= 9;	//当前状态
	optional int32	guildStreak			= 10;	//公会守城次数,用于判断是否减少城防
	optional int32	cityPoint				=	11;	//城防
}

message DB_C_GvgSignMsg
{
	optional int32 guildID = 1;
	optional int32 guildContribute = 2;
}

message DB_C_GvgBtlRet
{//工会战结果 
	optional int32 guildID1					= 1;
	optional int32 guildID2					= 2;
	optional int32 session 					= 3;
	optional int32 winGuildID 			= 4[default = -1];
	optional int32 cityID			 			= 5;
	optional int32 round						= 6;	//回合数
	optional bool  bWinByFight			= 7[default = true];	//是否通过战斗获胜
}

message DB_C_GvgBtlPlayerMsg
{
	optional int64 userID					=	1;
	optional int32 winTime				=	2;
	optional int32 leftHp					=	3;
	optional int32 way						=	4;
}

message DB_C_GvgBtlRetSave
{//工会战单路结果	//###独立存储单元###，格式： GvgBtlRet_region_city_session
	optional int32 winGuildID 			= 1;
	optional int32 guildID1					= 2;
	optional int32 guildID2					= 3;
	optional int32 session 					= 4;
	optional int32 cityID			 			= 5;
	optional int32 region			 			= 6;
	
	repeated DB_C_GvgBtlRetWay retWay = 7;
	optional int32 playerCnt1				=	8;
	optional int32 playerCnt2				=	9;
}

message DB_C_GvgBtlRetWay
{//GVG单路结果	
	optional int32 way		 					= 1;
	optional int32 winGuildID 			= 2;
	optional int32 guildID1					= 3;
	optional int32 guildID2					= 4;
	optional int32 session 					= 5;
	optional int32 cityID			 			= 6;

	repeated DB_C_GuildBtlUser userLst1 	= 7;
	repeated DB_C_GuildBtlUser userLst2 	= 8;
	repeated DB_C_GuildBtlUserPK	pkLst		= 9;
}

message DB_C_Gvg_FightSendData
{	//###独立存储单元###,格式：Gvg_User_userid
	optional DB_C_GuildBtlUser btlUser = 1;
	repeated DB_C_GuildBtlSendDataUnit	fightsenddata	=	2;
}

message DB_C_GVG_Msg
{
	optional int32  flag						= 1[default = 0]; 	//活动标记,不可重复

	repeated int32	signCity				=	2;
	optional int32	controlCity			= 3;
	optional int32	contribute			=	4;	//本轮贡献
	
	repeated DB_C_GvgBtlCityMsg 	userWay	=	5;	//报名玩家
	repeated DB_C_GvgBtlAddProp 	addProp = 6;	//鼓舞加成
	optional bool		fightEnd				=	7[default = false];
	optional int32	lastContributeTime = 8[default = 0];
	optional int32	state						= 9[default = 0];
	optional int32	contributeRecorcd	=	10;	//本轮贡献上次结束前的记录
	
	repeated DB_C_GVG_Reward_Record rewardRecord = 11; //玩家领取奖励数量记录,判断不同职位的领取次数
	repeated int64	playerID				=	12;	//上一期战斗玩家列表
}

message DB_C_GvgBtlCityMsg
{//GVG公会数据
	optional int32 cityID			= 1;	//城市ID
	repeated int64 userWay1		=	2;
	optional int32 signupCnt	= 3;	//参加人数
	optional int32 session		= 4;
}

message DB_C_GvgBtlAddProp
{
	optional int64 userID			= 1;
	optional int32 addAtkPct	= 2;
	optional int32 addBloodPct= 3;
	optional int32	maxWinTime	= 4; //最大连胜次数,GVG用数据
	optional int32	winTime			= 5; //连胜次数,GVG用数据
	optional int32	leftHP			=	6;	//剩余血量(百分比),GVG用数据
	optional int32	session			= 7;
	
	optional string name			= 8;
	optional string pic				= 9;
	optional bool		isOffLine = 10[default = false];
}

message DB_C_PubGvgBtlInfo
{//公用GVG数据，目前仅保留在ID为0的世界国家结构中
	optional int32 curSession							= 1;	//当前GVG场次
	optional int32 flag										=	2;
	optional bool  fightOver							= 3[default = false];
}

message DB_C_GVG_Reward_Record
{
	optional int32 pos = 1;
	optional int32 cnt = 2;
}

message DB_C_WpcRank
{
	repeated DB_C_WpcRankUnit nowRank = 1;
	repeated DB_C_WpcRankUnit lastRank = 2;
	optional int32	activeID = 3[default = 0];
}

message DB_C_WpcRankUnit
{
	optional string uid	= 1;
	optional string name = 2;
	optional string pic	= 3;
	optional int32  countryid = 4;
	optional string guildName = 5;
	optional int32  fightPoint = 6;
	optional int32  level			 = 7;
	optional int32  exploreCnt = 8;
}

///军事演习
message DB_C_WarGameData		//###独立存储单元###
{//演习场地列表key:	CWarGame_region*10000
	required int32 key						= 1;		
	required int32 region					= 2;							//分区
	
	repeated DB_C_WarGameSite siteList = 3;
	optional int64 ltSaveRevision	= 4[default = 0];	//时间戳，用于DB数据存储，为提高速度而设的变量，数据可以不准
}


message DB_C_WarGameSite
{
	required int32 sitID = 1; 										//流水ID（从配表中读取）
	optional int32 sitLv = 2;
	optional int32 startTime = 3;
	optional int32 endTime = 4;
	optional int32 delayNum = 5[default = 0];			//延时次数
	optional string uid = 6;
	optional string name = 7;											//占领者名称
	optional int32 countryID = 8[default = 0];		//占领者国家
	optional int32 power = 9[default = 0]; 			  //战斗力
	repeated DB_C_WarGameAdmiralInfo admiralList = 10;
	
	optional int32 TruceStartTime = 11[default = 0];
	optional int32 TruceEndTime = 12[default = 0];
}

message DB_C_WarGameAdmiralInfo
{
	optional int32 admiralID = 1[default = 0];
	optional int32 admiralLv = 2[default = 0];
	optional int32 admiralTrainLv = 3[default = 0];
}

message DB_C_ChatMsg
{//国战聊天 数组
	optional int32 begin = 1;		//数组起始
	optional int32 end = 2;			//数组结束
	optional int32 num = 3;			//消息数目
	repeated DB_C_ChatMsgOne msg = 4;//发言记录
	//repeated int32 country = 4;	//发言会长的国家
	//repeated int64 uid = 5;			//发言会长的uid
	//repeated string name = 6;		//会长的名字
	//repeated string msg = 7;		//发言内容
}

message DB_C_ChatMsgOne
{//国战聊天,单条
	optional int32 country = 1;	//发言会长的国家
	optional int32 type = 2;		//3:本国发言 4:世界发言
	optional int64 uid = 3;			//发言会长的uid
	optional string name = 4;		//会长的名字
	optional string msg = 5;		//发言内容
}

message DB_C_BossBtlMsg  //###独立存储单元###
{//Boss战信息key:	CBossBattle_region*10000
	required int32 key														= 1;	
	optional int32 region 												= 2[default = 0];
	optional int32 nBossBtlFlag 									= 3[default = 0];
	repeated DB_C_BossInfo bossInfo 							= 4;
	repeated DB_C_BossBtlRankUnit rankList 				= 5;
	optional DB_C_BossBtlRankUnit killer 					= 6;
	optional int32 state 													= 7[default = 0];
	optional DB_C_BossMsg fightingBossMsg 				= 8;
	repeated DB_C_BossBtlRankUnit luckyList 			= 9;
	optional int64 ltSaveRevision									= 10[default = 0];	//时间戳，用于DB数据存储，为提高速度而设的变量，数据可以不准
	repeated DB_C_BossBtlRankUnit lastRankList 		= 11;
	repeated DB_C_BossBtlRankUnit highPointList 	= 12;
	repeated DB_C_BossBtlRankUnit upList 					= 13;
}

message DB_C_BossInfo
{
	optional int32 bossID = 1[default = 0];
	optional int32 bossLv = 2;
}

message DB_C_BossMsg
{
	optional int32 bossID = 1[default = 0];
	optional int64 hp = 2[default = -1];// -1为未初始化
	optional int64 maxHp = 3[default = -1];
}

message DB_C_BossBtlRankUnit
{
	optional int64 uid = 1[default = 0];
	optional string name = 2;
	optional string pic = 3;
	optional int64 dmg = 4[default = 0];
	optional int32 count = 5[default = 0]; //点赞人数
	repeated string nameList = 6;	//点赞名称列表
	optional string words = 7;		//宣言
	repeated DB_C_Report reports = 8;
	optional int32 power = 9;	//战斗力
	optional int32 level = 10;
	optional string guildname = 11;
	optional int32 countryID = 12;
}

message DB_C_Report
{
	optional int32 type = 1[default = 0];
	optional int32 count = 2[default = 0];
}

message DB_C_NpcActiveRankItem
{//通缉令排行榜,单条数据
	optional int32 country = 1;	//国家id
	repeated int32 wincnt  = 2; //各档npc击杀次数
}
message DB_C_NpcActiveRank
{//军团通缉令排行榜
	optional int32 ranktime = 1;//上次排榜时间
	repeated DB_C_NpcActiveRankItem rank = 2;//榜单
}


message DB_C_GuildRedEnvelope
{
	optional int32 nFlag = 1[default = 0];				//活动标志
	optional int32 nTotal = 2[default = 0];				//红包总额
	optional int32 nCurrentID = 3[default = 0];		//当前红包ID
	repeated DB_C_RedEnvelopeInfo listRedEnvelope = 4;	//红包列表
}

message DB_C_RedEnvelopeInfo
{
	optional int32 nID = 1[default = 0]; 						//红包ID
	optional int32 nType = 2[default = 0];					//红包类型
	optional int64 uid = 3[default = 0]; 						//发放者ID
	optional int32 nTotalCredit = 4[default = 0];		//总勋章数
	optional int32 nIssueTime = 5[default = 0];			//红包生成时间
	optional int32 nOverdueTime = 6[default = 0];		//过期时间
	optional int32 nGiveOut = 7[default = 0];				//已经发放勋章数
	optional int32 nTotalNum = 8[default = 0];			//总共的可领取分数
	optional int32 nAdjType = 9[default = 0];				//红包形容词类型 0：大吉大利  1：壕气冲天: 2：一掷千金 3：挥金如土: 4：金玉满堂: 5：霸气外露
	optional bool  bRefund = 10[default = false];		//是否已经退还剩余金额
	repeated DB_C_RedEnvelopeReport listReport = 11;//领取日志
}

message DB_C_RedEnvelopeReport
{
	optional int32 nTime = 1[default = 0];		//领取时间
	optional int64 nUid	 = 2[default = 0];		//领取者的UID
	optional int32 nGetNum = 3[default = 0];	//领到的金额
}

message DB_C_RedEnvelopeCount
{
	optional int32 nFlag = 1[default = 0];
	optional int64 nTotalNum =2[default = 0]; 
	optional int32 nSendTotal = 3[default = 0];		//发送的总额
}