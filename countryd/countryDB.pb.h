// Generated by the protocol buffer compiler.  DO NOT EDIT!

#ifndef PROTOBUF_countryDB_2eproto__INCLUDED
#define PROTOBUF_countryDB_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2002000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2002000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_countryDB_2eproto();
void protobuf_AssignDesc_countryDB_2eproto();
void protobuf_ShutdownFile_countryDB_2eproto();

class DB_C_User;
class DB_One_Yuan_Reward_key;
class DB_One_Yuan;
class DB_One_Yuan_Purchase_Winner;
class DB_Region_One_Yuan;
class DB_C_UserList;
class DB_C_NPC;
class DB_C_CountryRank;
class DB_C_CountryLeagueBattle;
class DB_C_CountryLeagueMsg;
class DB_C_LeaguePlayerUnit;
class DB_C_LeagueGuildUnit;
class DB_C_BtlRecord;
class DB_C_BloodBtlStep;
class DB_C_BloodBtl;
class DB_C_OfficerRightUse;
class DB_C_City;
class DB_C_CityBuffData;
class DB_C_RandomBuff;
class DB_Arena_Rank_NPC;
class DB_Arena_Rank_List;
class DB_Arena_Score_Unit;
class DB_Arena_Score_List;
class DB_Arena_Rank;
class DB_WorldArena_Rank_Unit;
class DB_WorldArena_Rank_List;
class DB_WorldArena_Rank;
class DB_HeroArena_Rank_Unit;
class DB_HeroArena_Rank_List;
class DB_HeroArena_Rank;
class DB_C_Officer;
class DB_C_OfficerInfo;
class DB_C_PubGuildPKGroup;
class DB_C_PubGuildBtlInfo;
class DB_C_GuildBtl_Top_Guild;
class DB_C_GuildBtl_Record;
class DB_C_Country;
class DB_C_GuildBld;
class DB_C_GuildLog;
class DB_C_GuildBuyRecord;
class DB_C_GuildShopPmt;
class DB_C_GuildShop;
class DB_C_GuildBtlAddProp;
class DB_C_GuildBtlReward_Turns;
class DB_C_GuildBtlReward;
class DB_C_GuildBtlResult;
class DB_C_GuildStorage;
class DB_C_GuildBtl;
class DB_C_Guild;
class DB_C_GuildList;
class DB_C_GuildBtlGeneral;
class DB_C_PVEFightMH;
class DB_C_GuildBtlUser;
class DB_C_GuildBtlPosition;
class DB_C_GuildBtlFightUnit;
class DB_C_GuildBtlArmyAtkProp;
class DB_C_GuildBtlAdmiralAdd;
class Pve_GuildBtlHeroSkill;
class DB_C_GuildBtlSendDataUnit;
class DB_C_Guild_FightSendData;
class DB_C_GuildBtlUserPK;
class DB_C_GuidlBtlRetWay;
class DB_GVE_City;
class DB_GVE_List;
class DB_GVE_Msg;
class DB_GVE_Buff;
class DB_GVE_FirstDown;
class DB_C_ResourceData;
class DB_C_Resource;
class DB_C_GvgCity;
class DB_C_GvgSignMsg;
class DB_C_GvgBtlRet;
class DB_C_GvgBtlPlayerMsg;
class DB_C_GvgBtlRetSave;
class DB_C_GvgBtlRetWay;
class DB_C_Gvg_FightSendData;
class DB_C_GVG_Msg;
class DB_C_GvgBtlCityMsg;
class DB_C_GvgBtlAddProp;
class DB_C_PubGvgBtlInfo;
class DB_C_GVG_Reward_Record;
class DB_C_WpcRank;
class DB_C_WpcRankUnit;
class DB_C_WarGameData;
class DB_C_WarGameSite;
class DB_C_WarGameAdmiralInfo;
class DB_C_ChatMsg;
class DB_C_ChatMsgOne;
class DB_C_BossBtlMsg;
class DB_C_BossInfo;
class DB_C_BossMsg;
class DB_C_BossBtlRankUnit;
class DB_C_Report;
class DB_C_NpcActiveRankItem;
class DB_C_NpcActiveRank;
class DB_C_GuildRedEnvelope;
class DB_C_RedEnvelopeInfo;
class DB_C_RedEnvelopeReport;
class DB_C_RedEnvelopeCount;

// ===================================================================

class DB_C_User : public ::google::protobuf::Message {
 public:
  DB_C_User();
  virtual ~DB_C_User();
  
  DB_C_User(const DB_C_User& from);
  
  inline DB_C_User& operator=(const DB_C_User& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const DB_C_User& default_instance();
  void Swap(DB_C_User* other);
  
  // implements Message ----------------------------------------------
  
  DB_C_User* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DB_C_User& from);
  void MergeFrom(const DB_C_User& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const { _cached_size_ = size; }
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional int64 userID = 1;
  inline bool has_userid() const;
  inline void clear_userid();
  static const int kUserIDFieldNumber = 1;
  inline ::google::protobuf::int64 userid() const;
  inline void set_userid(::google::protobuf::int64 value);
  
  // optional int32 cityID = 2;
  inline bool has_cityid() const;
  inline void clear_cityid();
  static const int kCityIDFieldNumber = 2;
  inline ::google::protobuf::int32 cityid() const;
  inline void set_cityid(::google::protobuf::int32 value);
  
  // optional int32 countryID = 3;
  inline bool has_countryid() const;
  inline void clear_countryid();
  static const int kCountryIDFieldNumber = 3;
  inline ::google::protobuf::int32 countryid() const;
  inline void set_countryid(::google::protobuf::int32 value);
  
  // optional int32 ArenaIndex = 4 [default = -1];
  inline bool has_arenaindex() const;
  inline void clear_arenaindex();
  static const int kArenaIndexFieldNumber = 4;
  inline ::google::protobuf::int32 arenaindex() const;
  inline void set_arenaindex(::google::protobuf::int32 value);
  
  // optional int32 worldArenaIndex = 5 [default = -1];
  inline bool has_worldarenaindex() const;
  inline void clear_worldarenaindex();
  static const int kWorldArenaIndexFieldNumber = 5;
  inline ::google::protobuf::int32 worldarenaindex() const;
  inline void set_worldarenaindex(::google::protobuf::int32 value);
  
  // optional int32 lastArenaIndex = 6 [default = -1];
  inline bool has_lastarenaindex() const;
  inline void clear_lastarenaindex();
  static const int kLastArenaIndexFieldNumber = 6;
  inline ::google::protobuf::int32 lastarenaindex() const;
  inline void set_lastarenaindex(::google::protobuf::int32 value);
  
  // optional int32 lastworldArenaIndex = 7 [default = -1];
  inline bool has_lastworldarenaindex() const;
  inline void clear_lastworldarenaindex();
  static const int kLastworldArenaIndexFieldNumber = 7;
  inline ::google::protobuf::int32 lastworldarenaindex() const;
  inline void set_lastworldarenaindex(::google::protobuf::int32 value);
  
  // optional int32 guildID = 8;
  inline bool has_guildid() const;
  inline void clear_guildid();
  static const int kGuildIDFieldNumber = 8;
  inline ::google::protobuf::int32 guildid() const;
  inline void set_guildid(::google::protobuf::int32 value);
  
  // optional int32 position = 9;
  inline bool has_position() const;
  inline void clear_position();
  static const int kPositionFieldNumber = 9;
  inline ::google::protobuf::int32 position() const;
  inline void set_position(::google::protobuf::int32 value);
  
  // optional int32 officerposition = 10 [default = 0];
  inline bool has_officerposition() const;
  inline void clear_officerposition();
  static const int kOfficerpositionFieldNumber = 10;
  inline ::google::protobuf::int32 officerposition() const;
  inline void set_officerposition(::google::protobuf::int32 value);
  
  // optional string name = 11;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 11;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  
  // optional string pic = 12;
  inline bool has_pic() const;
  inline void clear_pic();
  static const int kPicFieldNumber = 12;
  inline const ::std::string& pic() const;
  inline void set_pic(const ::std::string& value);
  inline void set_pic(const char* value);
  inline void set_pic(const char* value, size_t size);
  inline ::std::string* mutable_pic();
  
  // optional int32 level = 13;
  inline bool has_level() const;
  inline void clear_level();
  static const int kLevelFieldNumber = 13;
  inline ::google::protobuf::int32 level() const;
  inline void set_level(::google::protobuf::int32 value);
  
  // optional int32 vipLevel = 14;
  inline bool has_viplevel() const;
  inline void clear_viplevel();
  static const int kVipLevelFieldNumber = 14;
  inline ::google::protobuf::int32 viplevel() const;
  inline void set_viplevel(::google::protobuf::int32 value);
  
  // optional int32 vipType = 15;
  inline bool has_viptype() const;
  inline void clear_viptype();
  static const int kVipTypeFieldNumber = 15;
  inline ::google::protobuf::int32 viptype() const;
  inline void set_viptype(::google::protobuf::int32 value);
  
  // optional int32 gvepoint = 16;
  inline bool has_gvepoint() const;
  inline void clear_gvepoint();
  static const int kGvepointFieldNumber = 16;
  inline ::google::protobuf::int32 gvepoint() const;
  inline void set_gvepoint(::google::protobuf::int32 value);
  
  // optional int32 flag = 17;
  inline bool has_flag() const;
  inline void clear_flag();
  static const int kFlagFieldNumber = 17;
  inline ::google::protobuf::int32 flag() const;
  inline void set_flag(::google::protobuf::int32 value);
  
  // optional int32 heroArenaIndex = 18 [default = -1];
  inline bool has_heroarenaindex() const;
  inline void clear_heroarenaindex();
  static const int kHeroArenaIndexFieldNumber = 18;
  inline ::google::protobuf::int32 heroarenaindex() const;
  inline void set_heroarenaindex(::google::protobuf::int32 value);
  
  // optional int32 wpcSearchTime = 19 [default = 0];
  inline bool has_wpcsearchtime() const;
  inline void clear_wpcsearchtime();
  static const int kWpcSearchTimeFieldNumber = 19;
  inline ::google::protobuf::int32 wpcsearchtime() const;
  inline void set_wpcsearchtime(::google::protobuf::int32 value);
  
  // optional int32 leaguePoint = 20 [default = 0];
  inline bool has_leaguepoint() const;
  inline void clear_leaguepoint();
  static const int kLeaguePointFieldNumber = 20;
  inline ::google::protobuf::int32 leaguepoint() const;
  inline void set_leaguepoint(::google::protobuf::int32 value);
  
  // optional .DB_C_RedEnvelopeCount redEnvelopeCount = 21;
  inline bool has_redenvelopecount() const;
  inline void clear_redenvelopecount();
  static const int kRedEnvelopeCountFieldNumber = 21;
  inline const ::DB_C_RedEnvelopeCount& redenvelopecount() const;
  inline ::DB_C_RedEnvelopeCount* mutable_redenvelopecount();
  
  // optional int32 tLastLeaveGuildTime = 22 [default = 0];
  inline bool has_tlastleaveguildtime() const;
  inline void clear_tlastleaveguildtime();
  static const int kTLastLeaveGuildTimeFieldNumber = 22;
  inline ::google::protobuf::int32 tlastleaveguildtime() const;
  inline void set_tlastleaveguildtime(::google::protobuf::int32 value);
  
  // optional int64 bossBtlDmg = 23;
  inline bool has_bossbtldmg() const;
  inline void clear_bossbtldmg();
  static const int kBossBtlDmgFieldNumber = 23;
  inline ::google::protobuf::int64 bossbtldmg() const;
  inline void set_bossbtldmg(::google::protobuf::int64 value);
  
  // optional int32 wpcLabSearchCnt = 24 [default = 0];
  inline bool has_wpclabsearchcnt() const;
  inline void clear_wpclabsearchcnt();
  static const int kWpcLabSearchCntFieldNumber = 24;
  inline ::google::protobuf::int32 wpclabsearchcnt() const;
  inline void set_wpclabsearchcnt(::google::protobuf::int32 value);
  
  // repeated .DB_One_Yuan oneyuan = 25;
  inline int oneyuan_size() const;
  inline void clear_oneyuan();
  static const int kOneyuanFieldNumber = 25;
  inline const ::google::protobuf::RepeatedPtrField< ::DB_One_Yuan >& oneyuan() const;
  inline ::google::protobuf::RepeatedPtrField< ::DB_One_Yuan >* mutable_oneyuan();
  inline const ::DB_One_Yuan& oneyuan(int index) const;
  inline ::DB_One_Yuan* mutable_oneyuan(int index);
  inline ::DB_One_Yuan* add_oneyuan();
  
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::google::protobuf::int64 userid_;
  ::google::protobuf::int32 cityid_;
  ::google::protobuf::int32 countryid_;
  ::google::protobuf::int32 arenaindex_;
  ::google::protobuf::int32 worldarenaindex_;
  ::google::protobuf::int32 lastarenaindex_;
  ::google::protobuf::int32 lastworldarenaindex_;
  ::google::protobuf::int32 guildid_;
  ::google::protobuf::int32 position_;
  ::google::protobuf::int32 officerposition_;
  ::std::string* name_;
  static const ::std::string _default_name_;
  ::std::string* pic_;
  static const ::std::string _default_pic_;
  ::google::protobuf::int32 level_;
  ::google::protobuf::int32 viplevel_;
  ::google::protobuf::int32 viptype_;
  ::google::protobuf::int32 gvepoint_;
  ::google::protobuf::int32 flag_;
  ::google::protobuf::int32 heroarenaindex_;
  ::google::protobuf::int32 wpcsearchtime_;
  ::google::protobuf::int32 leaguepoint_;
  ::DB_C_RedEnvelopeCount* redenvelopecount_;
  ::google::protobuf::int32 tlastleaveguildtime_;
  ::google::protobuf::int64 bossbtldmg_;
  ::google::protobuf::int32 wpclabsearchcnt_;
  ::google::protobuf::RepeatedPtrField< ::DB_One_Yuan > oneyuan_;
  friend void  protobuf_AddDesc_countryDB_2eproto();
  friend void protobuf_AssignDesc_countryDB_2eproto();
  friend void protobuf_ShutdownFile_countryDB_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(25 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static DB_C_User* default_instance_;
};
// -------------------------------------------------------------------

class DB_One_Yuan_Reward_key : public ::google::protobuf::Message {
 public:
  DB_One_Yuan_Reward_key();
  virtual ~DB_One_Yuan_Reward_key();
  
  DB_One_Yuan_Reward_key(const DB_One_Yuan_Reward_key& from);
  
  inline DB_One_Yuan_Reward_key& operator=(const DB_One_Yuan_Reward_key& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const DB_One_Yuan_Reward_key& default_instance();
  void Swap(DB_One_Yuan_Reward_key* other);
  
  // implements Message ----------------------------------------------
  
  DB_One_Yuan_Reward_key* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DB_One_Yuan_Reward_key& from);
  void MergeFrom(const DB_One_Yuan_Reward_key& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const { _cached_size_ = size; }
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional int32 redwardkey = 1;
  inline bool has_redwardkey() const;
  inline void clear_redwardkey();
  static const int kRedwardkeyFieldNumber = 1;
  inline ::google::protobuf::int32 redwardkey() const;
  inline void set_redwardkey(::google::protobuf::int32 value);
  
  // optional int32 nIndex = 2;
  inline bool has_nindex() const;
  inline void clear_nindex();
  static const int kNIndexFieldNumber = 2;
  inline ::google::protobuf::int32 nindex() const;
  inline void set_nindex(::google::protobuf::int32 value);
  
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::google::protobuf::int32 redwardkey_;
  ::google::protobuf::int32 nindex_;
  friend void  protobuf_AddDesc_countryDB_2eproto();
  friend void protobuf_AssignDesc_countryDB_2eproto();
  friend void protobuf_ShutdownFile_countryDB_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static DB_One_Yuan_Reward_key* default_instance_;
};
// -------------------------------------------------------------------

class DB_One_Yuan : public ::google::protobuf::Message {
 public:
  DB_One_Yuan();
  virtual ~DB_One_Yuan();
  
  DB_One_Yuan(const DB_One_Yuan& from);
  
  inline DB_One_Yuan& operator=(const DB_One_Yuan& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const DB_One_Yuan& default_instance();
  void Swap(DB_One_Yuan* other);
  
  // implements Message ----------------------------------------------
  
  DB_One_Yuan* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DB_One_Yuan& from);
  void MergeFrom(const DB_One_Yuan& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const { _cached_size_ = size; }
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional int32 flag = 1;
  inline bool has_flag() const;
  inline void clear_flag();
  static const int kFlagFieldNumber = 1;
  inline ::google::protobuf::int32 flag() const;
  inline void set_flag(::google::protobuf::int32 value);
  
  // repeated .DB_One_Yuan_Reward_key rewardKey = 2;
  inline int rewardkey_size() const;
  inline void clear_rewardkey();
  static const int kRewardKeyFieldNumber = 2;
  inline const ::google::protobuf::RepeatedPtrField< ::DB_One_Yuan_Reward_key >& rewardkey() const;
  inline ::google::protobuf::RepeatedPtrField< ::DB_One_Yuan_Reward_key >* mutable_rewardkey();
  inline const ::DB_One_Yuan_Reward_key& rewardkey(int index) const;
  inline ::DB_One_Yuan_Reward_key* mutable_rewardkey(int index);
  inline ::DB_One_Yuan_Reward_key* add_rewardkey();
  
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::google::protobuf::int32 flag_;
  ::google::protobuf::RepeatedPtrField< ::DB_One_Yuan_Reward_key > rewardkey_;
  friend void  protobuf_AddDesc_countryDB_2eproto();
  friend void protobuf_AssignDesc_countryDB_2eproto();
  friend void protobuf_ShutdownFile_countryDB_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static DB_One_Yuan* default_instance_;
};
// -------------------------------------------------------------------

class DB_One_Yuan_Purchase_Winner : public ::google::protobuf::Message {
 public:
  DB_One_Yuan_Purchase_Winner();
  virtual ~DB_One_Yuan_Purchase_Winner();
  
  DB_One_Yuan_Purchase_Winner(const DB_One_Yuan_Purchase_Winner& from);
  
  inline DB_One_Yuan_Purchase_Winner& operator=(const DB_One_Yuan_Purchase_Winner& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const DB_One_Yuan_Purchase_Winner& default_instance();
  void Swap(DB_One_Yuan_Purchase_Winner* other);
  
  // implements Message ----------------------------------------------
  
  DB_One_Yuan_Purchase_Winner* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DB_One_Yuan_Purchase_Winner& from);
  void MergeFrom(const DB_One_Yuan_Purchase_Winner& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const { _cached_size_ = size; }
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional int32 flag = 1;
  inline bool has_flag() const;
  inline void clear_flag();
  static const int kFlagFieldNumber = 1;
  inline ::google::protobuf::int32 flag() const;
  inline void set_flag(::google::protobuf::int32 value);
  
  // optional int64 userid = 2;
  inline bool has_userid() const;
  inline void clear_userid();
  static const int kUseridFieldNumber = 2;
  inline ::google::protobuf::int64 userid() const;
  inline void set_userid(::google::protobuf::int64 value);
  
  // optional bool bFetch = 3 [default = false];
  inline bool has_bfetch() const;
  inline void clear_bfetch();
  static const int kBFetchFieldNumber = 3;
  inline bool bfetch() const;
  inline void set_bfetch(bool value);
  
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::google::protobuf::int32 flag_;
  ::google::protobuf::int64 userid_;
  bool bfetch_;
  friend void  protobuf_AddDesc_countryDB_2eproto();
  friend void protobuf_AssignDesc_countryDB_2eproto();
  friend void protobuf_ShutdownFile_countryDB_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static DB_One_Yuan_Purchase_Winner* default_instance_;
};
// -------------------------------------------------------------------

class DB_Region_One_Yuan : public ::google::protobuf::Message {
 public:
  DB_Region_One_Yuan();
  virtual ~DB_Region_One_Yuan();
  
  DB_Region_One_Yuan(const DB_Region_One_Yuan& from);
  
  inline DB_Region_One_Yuan& operator=(const DB_Region_One_Yuan& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const DB_Region_One_Yuan& default_instance();
  void Swap(DB_Region_One_Yuan* other);
  
  // implements Message ----------------------------------------------
  
  DB_Region_One_Yuan* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DB_Region_One_Yuan& from);
  void MergeFrom(const DB_Region_One_Yuan& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const { _cached_size_ = size; }
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional int32 oneYuanPurchaseClearTime = 1 [default = 0];
  inline bool has_oneyuanpurchasecleartime() const;
  inline void clear_oneyuanpurchasecleartime();
  static const int kOneYuanPurchaseClearTimeFieldNumber = 1;
  inline ::google::protobuf::int32 oneyuanpurchasecleartime() const;
  inline void set_oneyuanpurchasecleartime(::google::protobuf::int32 value);
  
  // repeated .DB_One_Yuan_Purchase_Winner win = 2;
  inline int win_size() const;
  inline void clear_win();
  static const int kWinFieldNumber = 2;
  inline const ::google::protobuf::RepeatedPtrField< ::DB_One_Yuan_Purchase_Winner >& win() const;
  inline ::google::protobuf::RepeatedPtrField< ::DB_One_Yuan_Purchase_Winner >* mutable_win();
  inline const ::DB_One_Yuan_Purchase_Winner& win(int index) const;
  inline ::DB_One_Yuan_Purchase_Winner* mutable_win(int index);
  inline ::DB_One_Yuan_Purchase_Winner* add_win();
  
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::google::protobuf::int32 oneyuanpurchasecleartime_;
  ::google::protobuf::RepeatedPtrField< ::DB_One_Yuan_Purchase_Winner > win_;
  friend void  protobuf_AddDesc_countryDB_2eproto();
  friend void protobuf_AssignDesc_countryDB_2eproto();
  friend void protobuf_ShutdownFile_countryDB_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static DB_Region_One_Yuan* default_instance_;
};
// -------------------------------------------------------------------

class DB_C_UserList : public ::google::protobuf::Message {
 public:
  DB_C_UserList();
  virtual ~DB_C_UserList();
  
  DB_C_UserList(const DB_C_UserList& from);
  
  inline DB_C_UserList& operator=(const DB_C_UserList& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const DB_C_UserList& default_instance();
  void Swap(DB_C_UserList* other);
  
  // implements Message ----------------------------------------------
  
  DB_C_UserList* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DB_C_UserList& from);
  void MergeFrom(const DB_C_UserList& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const { _cached_size_ = size; }
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required int32 key = 1;
  inline bool has_key() const;
  inline void clear_key();
  static const int kKeyFieldNumber = 1;
  inline ::google::protobuf::int32 key() const;
  inline void set_key(::google::protobuf::int32 value);
  
  // required int32 region = 2;
  inline bool has_region() const;
  inline void clear_region();
  static const int kRegionFieldNumber = 2;
  inline ::google::protobuf::int32 region() const;
  inline void set_region(::google::protobuf::int32 value);
  
  // required int32 index = 3;
  inline bool has_index() const;
  inline void clear_index();
  static const int kIndexFieldNumber = 3;
  inline ::google::protobuf::int32 index() const;
  inline void set_index(::google::protobuf::int32 value);
  
  // optional int64 ltSaveRevision = 4 [default = 0];
  inline bool has_ltsaverevision() const;
  inline void clear_ltsaverevision();
  static const int kLtSaveRevisionFieldNumber = 4;
  inline ::google::protobuf::int64 ltsaverevision() const;
  inline void set_ltsaverevision(::google::protobuf::int64 value);
  
  // repeated .DB_C_User user = 5;
  inline int user_size() const;
  inline void clear_user();
  static const int kUserFieldNumber = 5;
  inline const ::google::protobuf::RepeatedPtrField< ::DB_C_User >& user() const;
  inline ::google::protobuf::RepeatedPtrField< ::DB_C_User >* mutable_user();
  inline const ::DB_C_User& user(int index) const;
  inline ::DB_C_User* mutable_user(int index);
  inline ::DB_C_User* add_user();
  
  // optional .DB_Region_One_Yuan regiononeyuan = 6;
  inline bool has_regiononeyuan() const;
  inline void clear_regiononeyuan();
  static const int kRegiononeyuanFieldNumber = 6;
  inline const ::DB_Region_One_Yuan& regiononeyuan() const;
  inline ::DB_Region_One_Yuan* mutable_regiononeyuan();
  
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::google::protobuf::int32 key_;
  ::google::protobuf::int32 region_;
  ::google::protobuf::int32 index_;
  ::google::protobuf::int64 ltsaverevision_;
  ::google::protobuf::RepeatedPtrField< ::DB_C_User > user_;
  ::DB_Region_One_Yuan* regiononeyuan_;
  friend void  protobuf_AddDesc_countryDB_2eproto();
  friend void protobuf_AssignDesc_countryDB_2eproto();
  friend void protobuf_ShutdownFile_countryDB_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static DB_C_UserList* default_instance_;
};
// -------------------------------------------------------------------

class DB_C_NPC : public ::google::protobuf::Message {
 public:
  DB_C_NPC();
  virtual ~DB_C_NPC();
  
  DB_C_NPC(const DB_C_NPC& from);
  
  inline DB_C_NPC& operator=(const DB_C_NPC& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const DB_C_NPC& default_instance();
  void Swap(DB_C_NPC* other);
  
  // implements Message ----------------------------------------------
  
  DB_C_NPC* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DB_C_NPC& from);
  void MergeFrom(const DB_C_NPC& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const { _cached_size_ = size; }
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional int32 npcID = 1;
  inline bool has_npcid() const;
  inline void clear_npcid();
  static const int kNpcIDFieldNumber = 1;
  inline ::google::protobuf::int32 npcid() const;
  inline void set_npcid(::google::protobuf::int32 value);
  
  // optional int32 morale = 2;
  inline bool has_morale() const;
  inline void clear_morale();
  static const int kMoraleFieldNumber = 2;
  inline ::google::protobuf::int32 morale() const;
  inline void set_morale(::google::protobuf::int32 value);
  
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::google::protobuf::int32 npcid_;
  ::google::protobuf::int32 morale_;
  friend void  protobuf_AddDesc_countryDB_2eproto();
  friend void protobuf_AssignDesc_countryDB_2eproto();
  friend void protobuf_ShutdownFile_countryDB_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static DB_C_NPC* default_instance_;
};
// -------------------------------------------------------------------

class DB_C_CountryRank : public ::google::protobuf::Message {
 public:
  DB_C_CountryRank();
  virtual ~DB_C_CountryRank();
  
  DB_C_CountryRank(const DB_C_CountryRank& from);
  
  inline DB_C_CountryRank& operator=(const DB_C_CountryRank& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const DB_C_CountryRank& default_instance();
  void Swap(DB_C_CountryRank* other);
  
  // implements Message ----------------------------------------------
  
  DB_C_CountryRank* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DB_C_CountryRank& from);
  void MergeFrom(const DB_C_CountryRank& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const { _cached_size_ = size; }
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional int32 nextTime = 1 [default = 0];
  inline bool has_nexttime() const;
  inline void clear_nexttime();
  static const int kNextTimeFieldNumber = 1;
  inline ::google::protobuf::int32 nexttime() const;
  inline void set_nexttime(::google::protobuf::int32 value);
  
  // optional int32 rank = 2 [default = 0];
  inline bool has_rank() const;
  inline void clear_rank();
  static const int kRankFieldNumber = 2;
  inline ::google::protobuf::int32 rank() const;
  inline void set_rank(::google::protobuf::int32 value);
  
  // optional int32 boom = 3 [default = 0];
  inline bool has_boom() const;
  inline void clear_boom();
  static const int kBoomFieldNumber = 3;
  inline ::google::protobuf::int32 boom() const;
  inline void set_boom(::google::protobuf::int32 value);
  
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::google::protobuf::int32 nexttime_;
  ::google::protobuf::int32 rank_;
  ::google::protobuf::int32 boom_;
  friend void  protobuf_AddDesc_countryDB_2eproto();
  friend void protobuf_AssignDesc_countryDB_2eproto();
  friend void protobuf_ShutdownFile_countryDB_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static DB_C_CountryRank* default_instance_;
};
// -------------------------------------------------------------------

class DB_C_CountryLeagueBattle : public ::google::protobuf::Message {
 public:
  DB_C_CountryLeagueBattle();
  virtual ~DB_C_CountryLeagueBattle();
  
  DB_C_CountryLeagueBattle(const DB_C_CountryLeagueBattle& from);
  
  inline DB_C_CountryLeagueBattle& operator=(const DB_C_CountryLeagueBattle& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const DB_C_CountryLeagueBattle& default_instance();
  void Swap(DB_C_CountryLeagueBattle* other);
  
  // implements Message ----------------------------------------------
  
  DB_C_CountryLeagueBattle* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DB_C_CountryLeagueBattle& from);
  void MergeFrom(const DB_C_CountryLeagueBattle& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const { _cached_size_ = size; }
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional int32 activeFlag = 1 [default = 0];
  inline bool has_activeflag() const;
  inline void clear_activeflag();
  static const int kActiveFlagFieldNumber = 1;
  inline ::google::protobuf::int32 activeflag() const;
  inline void set_activeflag(::google::protobuf::int32 value);
  
  // optional int32 rank = 2 [default = 0];
  inline bool has_rank() const;
  inline void clear_rank();
  static const int kRankFieldNumber = 2;
  inline ::google::protobuf::int32 rank() const;
  inline void set_rank(::google::protobuf::int32 value);
  
  // optional int32 boom = 3 [default = 0];
  inline bool has_boom() const;
  inline void clear_boom();
  static const int kBoomFieldNumber = 3;
  inline ::google::protobuf::int32 boom() const;
  inline void set_boom(::google::protobuf::int32 value);
  
  // optional int32 leagueID = 4 [default = 0];
  inline bool has_leagueid() const;
  inline void clear_leagueid();
  static const int kLeagueIDFieldNumber = 4;
  inline ::google::protobuf::int32 leagueid() const;
  inline void set_leagueid(::google::protobuf::int32 value);
  
  // optional int32 winID = 5 [default = 0];
  inline bool has_winid() const;
  inline void clear_winid();
  static const int kWinIDFieldNumber = 5;
  inline ::google::protobuf::int32 winid() const;
  inline void set_winid(::google::protobuf::int32 value);
  
  // optional int32 activeState = 6 [default = 0];
  inline bool has_activestate() const;
  inline void clear_activestate();
  static const int kActiveStateFieldNumber = 6;
  inline ::google::protobuf::int32 activestate() const;
  inline void set_activestate(::google::protobuf::int32 value);
  
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::google::protobuf::int32 activeflag_;
  ::google::protobuf::int32 rank_;
  ::google::protobuf::int32 boom_;
  ::google::protobuf::int32 leagueid_;
  ::google::protobuf::int32 winid_;
  ::google::protobuf::int32 activestate_;
  friend void  protobuf_AddDesc_countryDB_2eproto();
  friend void protobuf_AssignDesc_countryDB_2eproto();
  friend void protobuf_ShutdownFile_countryDB_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static DB_C_CountryLeagueBattle* default_instance_;
};
// -------------------------------------------------------------------

class DB_C_CountryLeagueMsg : public ::google::protobuf::Message {
 public:
  DB_C_CountryLeagueMsg();
  virtual ~DB_C_CountryLeagueMsg();
  
  DB_C_CountryLeagueMsg(const DB_C_CountryLeagueMsg& from);
  
  inline DB_C_CountryLeagueMsg& operator=(const DB_C_CountryLeagueMsg& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const DB_C_CountryLeagueMsg& default_instance();
  void Swap(DB_C_CountryLeagueMsg* other);
  
  // implements Message ----------------------------------------------
  
  DB_C_CountryLeagueMsg* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DB_C_CountryLeagueMsg& from);
  void MergeFrom(const DB_C_CountryLeagueMsg& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const { _cached_size_ = size; }
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional int32 leagueID = 1 [default = 0];
  inline bool has_leagueid() const;
  inline void clear_leagueid();
  static const int kLeagueIDFieldNumber = 1;
  inline ::google::protobuf::int32 leagueid() const;
  inline void set_leagueid(::google::protobuf::int32 value);
  
  // repeated int32 countryID = 2;
  inline int countryid_size() const;
  inline void clear_countryid();
  static const int kCountryIDFieldNumber = 2;
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >& countryid() const
      ;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >* mutable_countryid();
  inline ::google::protobuf::int32 countryid(int index) const;
  inline void set_countryid(int index, ::google::protobuf::int32 value);
  inline void add_countryid(::google::protobuf::int32 value);
  
  // repeated .DB_C_LeaguePlayerUnit playerRankList = 3;
  inline int playerranklist_size() const;
  inline void clear_playerranklist();
  static const int kPlayerRankListFieldNumber = 3;
  inline const ::google::protobuf::RepeatedPtrField< ::DB_C_LeaguePlayerUnit >& playerranklist() const;
  inline ::google::protobuf::RepeatedPtrField< ::DB_C_LeaguePlayerUnit >* mutable_playerranklist();
  inline const ::DB_C_LeaguePlayerUnit& playerranklist(int index) const;
  inline ::DB_C_LeaguePlayerUnit* mutable_playerranklist(int index);
  inline ::DB_C_LeaguePlayerUnit* add_playerranklist();
  
  // repeated .DB_C_LeaguePlayerUnit playerRankLastList = 4;
  inline int playerranklastlist_size() const;
  inline void clear_playerranklastlist();
  static const int kPlayerRankLastListFieldNumber = 4;
  inline const ::google::protobuf::RepeatedPtrField< ::DB_C_LeaguePlayerUnit >& playerranklastlist() const;
  inline ::google::protobuf::RepeatedPtrField< ::DB_C_LeaguePlayerUnit >* mutable_playerranklastlist();
  inline const ::DB_C_LeaguePlayerUnit& playerranklastlist(int index) const;
  inline ::DB_C_LeaguePlayerUnit* mutable_playerranklastlist(int index);
  inline ::DB_C_LeaguePlayerUnit* add_playerranklastlist();
  
  // repeated .DB_C_LeagueGuildUnit guildList = 5;
  inline int guildlist_size() const;
  inline void clear_guildlist();
  static const int kGuildListFieldNumber = 5;
  inline const ::google::protobuf::RepeatedPtrField< ::DB_C_LeagueGuildUnit >& guildlist() const;
  inline ::google::protobuf::RepeatedPtrField< ::DB_C_LeagueGuildUnit >* mutable_guildlist();
  inline const ::DB_C_LeagueGuildUnit& guildlist(int index) const;
  inline ::DB_C_LeagueGuildUnit* mutable_guildlist(int index);
  inline ::DB_C_LeagueGuildUnit* add_guildlist();
  
  // repeated .DB_C_LeagueGuildUnit guildLastList = 6;
  inline int guildlastlist_size() const;
  inline void clear_guildlastlist();
  static const int kGuildLastListFieldNumber = 6;
  inline const ::google::protobuf::RepeatedPtrField< ::DB_C_LeagueGuildUnit >& guildlastlist() const;
  inline ::google::protobuf::RepeatedPtrField< ::DB_C_LeagueGuildUnit >* mutable_guildlastlist();
  inline const ::DB_C_LeagueGuildUnit& guildlastlist(int index) const;
  inline ::DB_C_LeagueGuildUnit* mutable_guildlastlist(int index);
  inline ::DB_C_LeagueGuildUnit* add_guildlastlist();
  
  // repeated int32 lastCountryID = 7;
  inline int lastcountryid_size() const;
  inline void clear_lastcountryid();
  static const int kLastCountryIDFieldNumber = 7;
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >& lastcountryid() const
      ;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >* mutable_lastcountryid();
  inline ::google::protobuf::int32 lastcountryid(int index) const;
  inline void set_lastcountryid(int index, ::google::protobuf::int32 value);
  inline void add_lastcountryid(::google::protobuf::int32 value);
  
  // repeated int32 boomRecord = 8;
  inline int boomrecord_size() const;
  inline void clear_boomrecord();
  static const int kBoomRecordFieldNumber = 8;
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >& boomrecord() const
      ;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >* mutable_boomrecord();
  inline ::google::protobuf::int32 boomrecord(int index) const;
  inline void set_boomrecord(int index, ::google::protobuf::int32 value);
  inline void add_boomrecord(::google::protobuf::int32 value);
  
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::google::protobuf::int32 leagueid_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > countryid_;
  ::google::protobuf::RepeatedPtrField< ::DB_C_LeaguePlayerUnit > playerranklist_;
  ::google::protobuf::RepeatedPtrField< ::DB_C_LeaguePlayerUnit > playerranklastlist_;
  ::google::protobuf::RepeatedPtrField< ::DB_C_LeagueGuildUnit > guildlist_;
  ::google::protobuf::RepeatedPtrField< ::DB_C_LeagueGuildUnit > guildlastlist_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > lastcountryid_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > boomrecord_;
  friend void  protobuf_AddDesc_countryDB_2eproto();
  friend void protobuf_AssignDesc_countryDB_2eproto();
  friend void protobuf_ShutdownFile_countryDB_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(8 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static DB_C_CountryLeagueMsg* default_instance_;
};
// -------------------------------------------------------------------

class DB_C_LeaguePlayerUnit : public ::google::protobuf::Message {
 public:
  DB_C_LeaguePlayerUnit();
  virtual ~DB_C_LeaguePlayerUnit();
  
  DB_C_LeaguePlayerUnit(const DB_C_LeaguePlayerUnit& from);
  
  inline DB_C_LeaguePlayerUnit& operator=(const DB_C_LeaguePlayerUnit& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const DB_C_LeaguePlayerUnit& default_instance();
  void Swap(DB_C_LeaguePlayerUnit* other);
  
  // implements Message ----------------------------------------------
  
  DB_C_LeaguePlayerUnit* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DB_C_LeaguePlayerUnit& from);
  void MergeFrom(const DB_C_LeaguePlayerUnit& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const { _cached_size_ = size; }
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional string uid = 1;
  inline bool has_uid() const;
  inline void clear_uid();
  static const int kUidFieldNumber = 1;
  inline const ::std::string& uid() const;
  inline void set_uid(const ::std::string& value);
  inline void set_uid(const char* value);
  inline void set_uid(const char* value, size_t size);
  inline ::std::string* mutable_uid();
  
  // optional string name = 2;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 2;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  
  // optional string pic = 3;
  inline bool has_pic() const;
  inline void clear_pic();
  static const int kPicFieldNumber = 3;
  inline const ::std::string& pic() const;
  inline void set_pic(const ::std::string& value);
  inline void set_pic(const char* value);
  inline void set_pic(const char* value, size_t size);
  inline ::std::string* mutable_pic();
  
  // optional int32 countryid = 4;
  inline bool has_countryid() const;
  inline void clear_countryid();
  static const int kCountryidFieldNumber = 4;
  inline ::google::protobuf::int32 countryid() const;
  inline void set_countryid(::google::protobuf::int32 value);
  
  // optional string guildName = 5;
  inline bool has_guildname() const;
  inline void clear_guildname();
  static const int kGuildNameFieldNumber = 5;
  inline const ::std::string& guildname() const;
  inline void set_guildname(const ::std::string& value);
  inline void set_guildname(const char* value);
  inline void set_guildname(const char* value, size_t size);
  inline ::std::string* mutable_guildname();
  
  // optional int32 fightPoint = 6;
  inline bool has_fightpoint() const;
  inline void clear_fightpoint();
  static const int kFightPointFieldNumber = 6;
  inline ::google::protobuf::int32 fightpoint() const;
  inline void set_fightpoint(::google::protobuf::int32 value);
  
  // optional int32 level = 7;
  inline bool has_level() const;
  inline void clear_level();
  static const int kLevelFieldNumber = 7;
  inline ::google::protobuf::int32 level() const;
  inline void set_level(::google::protobuf::int32 value);
  
  // optional int32 leaguePoint = 8;
  inline bool has_leaguepoint() const;
  inline void clear_leaguepoint();
  static const int kLeaguePointFieldNumber = 8;
  inline ::google::protobuf::int32 leaguepoint() const;
  inline void set_leaguepoint(::google::protobuf::int32 value);
  
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::std::string* uid_;
  static const ::std::string _default_uid_;
  ::std::string* name_;
  static const ::std::string _default_name_;
  ::std::string* pic_;
  static const ::std::string _default_pic_;
  ::google::protobuf::int32 countryid_;
  ::std::string* guildname_;
  static const ::std::string _default_guildname_;
  ::google::protobuf::int32 fightpoint_;
  ::google::protobuf::int32 level_;
  ::google::protobuf::int32 leaguepoint_;
  friend void  protobuf_AddDesc_countryDB_2eproto();
  friend void protobuf_AssignDesc_countryDB_2eproto();
  friend void protobuf_ShutdownFile_countryDB_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(8 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static DB_C_LeaguePlayerUnit* default_instance_;
};
// -------------------------------------------------------------------

class DB_C_LeagueGuildUnit : public ::google::protobuf::Message {
 public:
  DB_C_LeagueGuildUnit();
  virtual ~DB_C_LeagueGuildUnit();
  
  DB_C_LeagueGuildUnit(const DB_C_LeagueGuildUnit& from);
  
  inline DB_C_LeagueGuildUnit& operator=(const DB_C_LeagueGuildUnit& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const DB_C_LeagueGuildUnit& default_instance();
  void Swap(DB_C_LeagueGuildUnit* other);
  
  // implements Message ----------------------------------------------
  
  DB_C_LeagueGuildUnit* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DB_C_LeagueGuildUnit& from);
  void MergeFrom(const DB_C_LeagueGuildUnit& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const { _cached_size_ = size; }
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional int32 guildID = 1;
  inline bool has_guildid() const;
  inline void clear_guildid();
  static const int kGuildIDFieldNumber = 1;
  inline ::google::protobuf::int32 guildid() const;
  inline void set_guildid(::google::protobuf::int32 value);
  
  // optional string guildName = 2;
  inline bool has_guildname() const;
  inline void clear_guildname();
  static const int kGuildNameFieldNumber = 2;
  inline const ::std::string& guildname() const;
  inline void set_guildname(const ::std::string& value);
  inline void set_guildname(const char* value);
  inline void set_guildname(const char* value, size_t size);
  inline ::std::string* mutable_guildname();
  
  // optional string leaderName = 3;
  inline bool has_leadername() const;
  inline void clear_leadername();
  static const int kLeaderNameFieldNumber = 3;
  inline const ::std::string& leadername() const;
  inline void set_leadername(const ::std::string& value);
  inline void set_leadername(const char* value);
  inline void set_leadername(const char* value, size_t size);
  inline ::std::string* mutable_leadername();
  
  // optional int32 LeaguePoint = 4;
  inline bool has_leaguepoint() const;
  inline void clear_leaguepoint();
  static const int kLeaguePointFieldNumber = 4;
  inline ::google::protobuf::int32 leaguepoint() const;
  inline void set_leaguepoint(::google::protobuf::int32 value);
  
  // optional int32 countryID = 5;
  inline bool has_countryid() const;
  inline void clear_countryid();
  static const int kCountryIDFieldNumber = 5;
  inline ::google::protobuf::int32 countryid() const;
  inline void set_countryid(::google::protobuf::int32 value);
  
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::google::protobuf::int32 guildid_;
  ::std::string* guildname_;
  static const ::std::string _default_guildname_;
  ::std::string* leadername_;
  static const ::std::string _default_leadername_;
  ::google::protobuf::int32 leaguepoint_;
  ::google::protobuf::int32 countryid_;
  friend void  protobuf_AddDesc_countryDB_2eproto();
  friend void protobuf_AssignDesc_countryDB_2eproto();
  friend void protobuf_ShutdownFile_countryDB_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static DB_C_LeagueGuildUnit* default_instance_;
};
// -------------------------------------------------------------------

class DB_C_BtlRecord : public ::google::protobuf::Message {
 public:
  DB_C_BtlRecord();
  virtual ~DB_C_BtlRecord();
  
  DB_C_BtlRecord(const DB_C_BtlRecord& from);
  
  inline DB_C_BtlRecord& operator=(const DB_C_BtlRecord& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const DB_C_BtlRecord& default_instance();
  void Swap(DB_C_BtlRecord* other);
  
  // implements Message ----------------------------------------------
  
  DB_C_BtlRecord* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DB_C_BtlRecord& from);
  void MergeFrom(const DB_C_BtlRecord& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const { _cached_size_ = size; }
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional int32 type = 1;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::google::protobuf::int32 type() const;
  inline void set_type(::google::protobuf::int32 value);
  
  // optional int32 btlTime = 2;
  inline bool has_btltime() const;
  inline void clear_btltime();
  static const int kBtlTimeFieldNumber = 2;
  inline ::google::protobuf::int32 btltime() const;
  inline void set_btltime(::google::protobuf::int32 value);
  
  // optional string atkID = 3;
  inline bool has_atkid() const;
  inline void clear_atkid();
  static const int kAtkIDFieldNumber = 3;
  inline const ::std::string& atkid() const;
  inline void set_atkid(const ::std::string& value);
  inline void set_atkid(const char* value);
  inline void set_atkid(const char* value, size_t size);
  inline ::std::string* mutable_atkid();
  
  // optional string atkName = 4;
  inline bool has_atkname() const;
  inline void clear_atkname();
  static const int kAtkNameFieldNumber = 4;
  inline const ::std::string& atkname() const;
  inline void set_atkname(const ::std::string& value);
  inline void set_atkname(const char* value);
  inline void set_atkname(const char* value, size_t size);
  inline ::std::string* mutable_atkname();
  
  // optional int32 atkCountry = 5;
  inline bool has_atkcountry() const;
  inline void clear_atkcountry();
  static const int kAtkCountryFieldNumber = 5;
  inline ::google::protobuf::int32 atkcountry() const;
  inline void set_atkcountry(::google::protobuf::int32 value);
  
  // optional string defID = 6;
  inline bool has_defid() const;
  inline void clear_defid();
  static const int kDefIDFieldNumber = 6;
  inline const ::std::string& defid() const;
  inline void set_defid(const ::std::string& value);
  inline void set_defid(const char* value);
  inline void set_defid(const char* value, size_t size);
  inline ::std::string* mutable_defid();
  
  // optional string defName = 7;
  inline bool has_defname() const;
  inline void clear_defname();
  static const int kDefNameFieldNumber = 7;
  inline const ::std::string& defname() const;
  inline void set_defname(const ::std::string& value);
  inline void set_defname(const char* value);
  inline void set_defname(const char* value, size_t size);
  inline ::std::string* mutable_defname();
  
  // optional int32 defCountry = 8;
  inline bool has_defcountry() const;
  inline void clear_defcountry();
  static const int kDefCountryFieldNumber = 8;
  inline ::google::protobuf::int32 defcountry() const;
  inline void set_defcountry(::google::protobuf::int32 value);
  
  // optional int32 cityID = 9;
  inline bool has_cityid() const;
  inline void clear_cityid();
  static const int kCityIDFieldNumber = 9;
  inline ::google::protobuf::int32 cityid() const;
  inline void set_cityid(::google::protobuf::int32 value);
  
  // optional int32 winningCnt = 10;
  inline bool has_winningcnt() const;
  inline void clear_winningcnt();
  static const int kWinningCntFieldNumber = 10;
  inline ::google::protobuf::int32 winningcnt() const;
  inline void set_winningcnt(::google::protobuf::int32 value);
  
  // optional int32 bloodAtkCity = 11;
  inline bool has_bloodatkcity() const;
  inline void clear_bloodatkcity();
  static const int kBloodAtkCityFieldNumber = 11;
  inline ::google::protobuf::int32 bloodatkcity() const;
  inline void set_bloodatkcity(::google::protobuf::int32 value);
  
  // optional int32 bloodDefCity = 12;
  inline bool has_blooddefcity() const;
  inline void clear_blooddefcity();
  static const int kBloodDefCityFieldNumber = 12;
  inline ::google::protobuf::int32 blooddefcity() const;
  inline void set_blooddefcity(::google::protobuf::int32 value);
  
  // optional int32 bloodWinCity = 13;
  inline bool has_bloodwincity() const;
  inline void clear_bloodwincity();
  static const int kBloodWinCityFieldNumber = 13;
  inline ::google::protobuf::int32 bloodwincity() const;
  inline void set_bloodwincity(::google::protobuf::int32 value);
  
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::google::protobuf::int32 type_;
  ::google::protobuf::int32 btltime_;
  ::std::string* atkid_;
  static const ::std::string _default_atkid_;
  ::std::string* atkname_;
  static const ::std::string _default_atkname_;
  ::google::protobuf::int32 atkcountry_;
  ::std::string* defid_;
  static const ::std::string _default_defid_;
  ::std::string* defname_;
  static const ::std::string _default_defname_;
  ::google::protobuf::int32 defcountry_;
  ::google::protobuf::int32 cityid_;
  ::google::protobuf::int32 winningcnt_;
  ::google::protobuf::int32 bloodatkcity_;
  ::google::protobuf::int32 blooddefcity_;
  ::google::protobuf::int32 bloodwincity_;
  friend void  protobuf_AddDesc_countryDB_2eproto();
  friend void protobuf_AssignDesc_countryDB_2eproto();
  friend void protobuf_ShutdownFile_countryDB_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(13 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static DB_C_BtlRecord* default_instance_;
};
// -------------------------------------------------------------------

class DB_C_BloodBtlStep : public ::google::protobuf::Message {
 public:
  DB_C_BloodBtlStep();
  virtual ~DB_C_BloodBtlStep();
  
  DB_C_BloodBtlStep(const DB_C_BloodBtlStep& from);
  
  inline DB_C_BloodBtlStep& operator=(const DB_C_BloodBtlStep& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const DB_C_BloodBtlStep& default_instance();
  void Swap(DB_C_BloodBtlStep* other);
  
  // implements Message ----------------------------------------------
  
  DB_C_BloodBtlStep* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DB_C_BloodBtlStep& from);
  void MergeFrom(const DB_C_BloodBtlStep& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const { _cached_size_ = size; }
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional int32 time = 1;
  inline bool has_time() const;
  inline void clear_time();
  static const int kTimeFieldNumber = 1;
  inline ::google::protobuf::int32 time() const;
  inline void set_time(::google::protobuf::int32 value);
  
  // optional string atkID = 2;
  inline bool has_atkid() const;
  inline void clear_atkid();
  static const int kAtkIDFieldNumber = 2;
  inline const ::std::string& atkid() const;
  inline void set_atkid(const ::std::string& value);
  inline void set_atkid(const char* value);
  inline void set_atkid(const char* value, size_t size);
  inline ::std::string* mutable_atkid();
  
  // optional string atkName = 3;
  inline bool has_atkname() const;
  inline void clear_atkname();
  static const int kAtkNameFieldNumber = 3;
  inline const ::std::string& atkname() const;
  inline void set_atkname(const ::std::string& value);
  inline void set_atkname(const char* value);
  inline void set_atkname(const char* value, size_t size);
  inline ::std::string* mutable_atkname();
  
  // optional int32 atkCountry = 4;
  inline bool has_atkcountry() const;
  inline void clear_atkcountry();
  static const int kAtkCountryFieldNumber = 4;
  inline ::google::protobuf::int32 atkcountry() const;
  inline void set_atkcountry(::google::protobuf::int32 value);
  
  // optional string defID = 5;
  inline bool has_defid() const;
  inline void clear_defid();
  static const int kDefIDFieldNumber = 5;
  inline const ::std::string& defid() const;
  inline void set_defid(const ::std::string& value);
  inline void set_defid(const char* value);
  inline void set_defid(const char* value, size_t size);
  inline ::std::string* mutable_defid();
  
  // optional string defName = 6;
  inline bool has_defname() const;
  inline void clear_defname();
  static const int kDefNameFieldNumber = 6;
  inline const ::std::string& defname() const;
  inline void set_defname(const ::std::string& value);
  inline void set_defname(const char* value);
  inline void set_defname(const char* value, size_t size);
  inline ::std::string* mutable_defname();
  
  // optional int32 defCountry = 7;
  inline bool has_defcountry() const;
  inline void clear_defcountry();
  static const int kDefCountryFieldNumber = 7;
  inline ::google::protobuf::int32 defcountry() const;
  inline void set_defcountry(::google::protobuf::int32 value);
  
  // optional string winID = 8;
  inline bool has_winid() const;
  inline void clear_winid();
  static const int kWinIDFieldNumber = 8;
  inline const ::std::string& winid() const;
  inline void set_winid(const ::std::string& value);
  inline void set_winid(const char* value);
  inline void set_winid(const char* value, size_t size);
  inline ::std::string* mutable_winid();
  
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::google::protobuf::int32 time_;
  ::std::string* atkid_;
  static const ::std::string _default_atkid_;
  ::std::string* atkname_;
  static const ::std::string _default_atkname_;
  ::google::protobuf::int32 atkcountry_;
  ::std::string* defid_;
  static const ::std::string _default_defid_;
  ::std::string* defname_;
  static const ::std::string _default_defname_;
  ::google::protobuf::int32 defcountry_;
  ::std::string* winid_;
  static const ::std::string _default_winid_;
  friend void  protobuf_AddDesc_countryDB_2eproto();
  friend void protobuf_AssignDesc_countryDB_2eproto();
  friend void protobuf_ShutdownFile_countryDB_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(8 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static DB_C_BloodBtlStep* default_instance_;
};
// -------------------------------------------------------------------

class DB_C_BloodBtl : public ::google::protobuf::Message {
 public:
  DB_C_BloodBtl();
  virtual ~DB_C_BloodBtl();
  
  DB_C_BloodBtl(const DB_C_BloodBtl& from);
  
  inline DB_C_BloodBtl& operator=(const DB_C_BloodBtl& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const DB_C_BloodBtl& default_instance();
  void Swap(DB_C_BloodBtl* other);
  
  // implements Message ----------------------------------------------
  
  DB_C_BloodBtl* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DB_C_BloodBtl& from);
  void MergeFrom(const DB_C_BloodBtl& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const { _cached_size_ = size; }
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional int64 launchUserID = 1;
  inline bool has_launchuserid() const;
  inline void clear_launchuserid();
  static const int kLaunchUserIDFieldNumber = 1;
  inline ::google::protobuf::int64 launchuserid() const;
  inline void set_launchuserid(::google::protobuf::int64 value);
  
  // optional string launchName = 2;
  inline bool has_launchname() const;
  inline void clear_launchname();
  static const int kLaunchNameFieldNumber = 2;
  inline const ::std::string& launchname() const;
  inline void set_launchname(const ::std::string& value);
  inline void set_launchname(const char* value);
  inline void set_launchname(const char* value, size_t size);
  inline ::std::string* mutable_launchname();
  
  // optional int32 launchTime = 3;
  inline bool has_launchtime() const;
  inline void clear_launchtime();
  static const int kLaunchTimeFieldNumber = 3;
  inline ::google::protobuf::int32 launchtime() const;
  inline void set_launchtime(::google::protobuf::int32 value);
  
  // optional int32 atkCountry = 4;
  inline bool has_atkcountry() const;
  inline void clear_atkcountry();
  static const int kAtkCountryFieldNumber = 4;
  inline ::google::protobuf::int32 atkcountry() const;
  inline void set_atkcountry(::google::protobuf::int32 value);
  
  // optional int32 atkCity = 5;
  inline bool has_atkcity() const;
  inline void clear_atkcity();
  static const int kAtkCityFieldNumber = 5;
  inline ::google::protobuf::int32 atkcity() const;
  inline void set_atkcity(::google::protobuf::int32 value);
  
  // optional int32 atkTotalCnt = 6;
  inline bool has_atktotalcnt() const;
  inline void clear_atktotalcnt();
  static const int kAtkTotalCntFieldNumber = 6;
  inline ::google::protobuf::int32 atktotalcnt() const;
  inline void set_atktotalcnt(::google::protobuf::int32 value);
  
  // optional int32 atkLeftCnt = 7;
  inline bool has_atkleftcnt() const;
  inline void clear_atkleftcnt();
  static const int kAtkLeftCntFieldNumber = 7;
  inline ::google::protobuf::int32 atkleftcnt() const;
  inline void set_atkleftcnt(::google::protobuf::int32 value);
  
  // optional int32 defCountry = 8;
  inline bool has_defcountry() const;
  inline void clear_defcountry();
  static const int kDefCountryFieldNumber = 8;
  inline ::google::protobuf::int32 defcountry() const;
  inline void set_defcountry(::google::protobuf::int32 value);
  
  // optional int32 defCity = 9;
  inline bool has_defcity() const;
  inline void clear_defcity();
  static const int kDefCityFieldNumber = 9;
  inline ::google::protobuf::int32 defcity() const;
  inline void set_defcity(::google::protobuf::int32 value);
  
  // optional int32 defTotalCnt = 10;
  inline bool has_deftotalcnt() const;
  inline void clear_deftotalcnt();
  static const int kDefTotalCntFieldNumber = 10;
  inline ::google::protobuf::int32 deftotalcnt() const;
  inline void set_deftotalcnt(::google::protobuf::int32 value);
  
  // optional int32 defLeftCnt = 11;
  inline bool has_defleftcnt() const;
  inline void clear_defleftcnt();
  static const int kDefLeftCntFieldNumber = 11;
  inline ::google::protobuf::int32 defleftcnt() const;
  inline void set_defleftcnt(::google::protobuf::int32 value);
  
  // repeated .DB_C_BloodBtlStep btlStep = 12;
  inline int btlstep_size() const;
  inline void clear_btlstep();
  static const int kBtlStepFieldNumber = 12;
  inline const ::google::protobuf::RepeatedPtrField< ::DB_C_BloodBtlStep >& btlstep() const;
  inline ::google::protobuf::RepeatedPtrField< ::DB_C_BloodBtlStep >* mutable_btlstep();
  inline const ::DB_C_BloodBtlStep& btlstep(int index) const;
  inline ::DB_C_BloodBtlStep* mutable_btlstep(int index);
  inline ::DB_C_BloodBtlStep* add_btlstep();
  
  // optional int32 winCity = 13;
  inline bool has_wincity() const;
  inline void clear_wincity();
  static const int kWinCityFieldNumber = 13;
  inline ::google::protobuf::int32 wincity() const;
  inline void set_wincity(::google::protobuf::int32 value);
  
  // optional int32 overTime = 14;
  inline bool has_overtime() const;
  inline void clear_overtime();
  static const int kOverTimeFieldNumber = 14;
  inline ::google::protobuf::int32 overtime() const;
  inline void set_overtime(::google::protobuf::int32 value);
  
  // optional int32 type = 15 [default = 0];
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 15;
  inline ::google::protobuf::int32 type() const;
  inline void set_type(::google::protobuf::int32 value);
  
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::google::protobuf::int64 launchuserid_;
  ::std::string* launchname_;
  static const ::std::string _default_launchname_;
  ::google::protobuf::int32 launchtime_;
  ::google::protobuf::int32 atkcountry_;
  ::google::protobuf::int32 atkcity_;
  ::google::protobuf::int32 atktotalcnt_;
  ::google::protobuf::int32 atkleftcnt_;
  ::google::protobuf::int32 defcountry_;
  ::google::protobuf::int32 defcity_;
  ::google::protobuf::int32 deftotalcnt_;
  ::google::protobuf::int32 defleftcnt_;
  ::google::protobuf::RepeatedPtrField< ::DB_C_BloodBtlStep > btlstep_;
  ::google::protobuf::int32 wincity_;
  ::google::protobuf::int32 overtime_;
  ::google::protobuf::int32 type_;
  friend void  protobuf_AddDesc_countryDB_2eproto();
  friend void protobuf_AssignDesc_countryDB_2eproto();
  friend void protobuf_ShutdownFile_countryDB_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(15 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static DB_C_BloodBtl* default_instance_;
};
// -------------------------------------------------------------------

class DB_C_OfficerRightUse : public ::google::protobuf::Message {
 public:
  DB_C_OfficerRightUse();
  virtual ~DB_C_OfficerRightUse();
  
  DB_C_OfficerRightUse(const DB_C_OfficerRightUse& from);
  
  inline DB_C_OfficerRightUse& operator=(const DB_C_OfficerRightUse& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const DB_C_OfficerRightUse& default_instance();
  void Swap(DB_C_OfficerRightUse* other);
  
  // implements Message ----------------------------------------------
  
  DB_C_OfficerRightUse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DB_C_OfficerRightUse& from);
  void MergeFrom(const DB_C_OfficerRightUse& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const { _cached_size_ = size; }
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional int32 rightId = 1;
  inline bool has_rightid() const;
  inline void clear_rightid();
  static const int kRightIdFieldNumber = 1;
  inline ::google::protobuf::int32 rightid() const;
  inline void set_rightid(::google::protobuf::int32 value);
  
  // optional int64 uid = 2;
  inline bool has_uid() const;
  inline void clear_uid();
  static const int kUidFieldNumber = 2;
  inline ::google::protobuf::int64 uid() const;
  inline void set_uid(::google::protobuf::int64 value);
  
  // optional int32 endtime = 3;
  inline bool has_endtime() const;
  inline void clear_endtime();
  static const int kEndtimeFieldNumber = 3;
  inline ::google::protobuf::int32 endtime() const;
  inline void set_endtime(::google::protobuf::int32 value);
  
  // optional string name = 4;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 4;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  
  // optional int32 position = 5;
  inline bool has_position() const;
  inline void clear_position();
  static const int kPositionFieldNumber = 5;
  inline ::google::protobuf::int32 position() const;
  inline void set_position(::google::protobuf::int32 value);
  
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::google::protobuf::int32 rightid_;
  ::google::protobuf::int64 uid_;
  ::google::protobuf::int32 endtime_;
  ::std::string* name_;
  static const ::std::string _default_name_;
  ::google::protobuf::int32 position_;
  friend void  protobuf_AddDesc_countryDB_2eproto();
  friend void protobuf_AssignDesc_countryDB_2eproto();
  friend void protobuf_ShutdownFile_countryDB_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static DB_C_OfficerRightUse* default_instance_;
};
// -------------------------------------------------------------------

class DB_C_City : public ::google::protobuf::Message {
 public:
  DB_C_City();
  virtual ~DB_C_City();
  
  DB_C_City(const DB_C_City& from);
  
  inline DB_C_City& operator=(const DB_C_City& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const DB_C_City& default_instance();
  void Swap(DB_C_City* other);
  
  // implements Message ----------------------------------------------
  
  DB_C_City* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DB_C_City& from);
  void MergeFrom(const DB_C_City& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const { _cached_size_ = size; }
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required int32 region = 1;
  inline bool has_region() const;
  inline void clear_region();
  static const int kRegionFieldNumber = 1;
  inline ::google::protobuf::int32 region() const;
  inline void set_region(::google::protobuf::int32 value);
  
  // required int32 cityID = 2;
  inline bool has_cityid() const;
  inline void clear_cityid();
  static const int kCityIDFieldNumber = 2;
  inline ::google::protobuf::int32 cityid() const;
  inline void set_cityid(::google::protobuf::int32 value);
  
  // required int32 countryID = 3;
  inline bool has_countryid() const;
  inline void clear_countryid();
  static const int kCountryIDFieldNumber = 3;
  inline ::google::protobuf::int32 countryid() const;
  inline void set_countryid(::google::protobuf::int32 value);
  
  // repeated .DB_C_NPC npc = 5;
  inline int npc_size() const;
  inline void clear_npc();
  static const int kNpcFieldNumber = 5;
  inline const ::google::protobuf::RepeatedPtrField< ::DB_C_NPC >& npc() const;
  inline ::google::protobuf::RepeatedPtrField< ::DB_C_NPC >* mutable_npc();
  inline const ::DB_C_NPC& npc(int index) const;
  inline ::DB_C_NPC* mutable_npc(int index);
  inline ::DB_C_NPC* add_npc();
  
  // optional int32 npcInitTM = 6 [default = 0];
  inline bool has_npcinittm() const;
  inline void clear_npcinittm();
  static const int kNpcInitTMFieldNumber = 6;
  inline ::google::protobuf::int32 npcinittm() const;
  inline void set_npcinittm(::google::protobuf::int32 value);
  
  // optional int64 ltSaveRevision = 7 [default = 0];
  inline bool has_ltsaverevision() const;
  inline void clear_ltsaverevision();
  static const int kLtSaveRevisionFieldNumber = 7;
  inline ::google::protobuf::int64 ltsaverevision() const;
  inline void set_ltsaverevision(::google::protobuf::int64 value);
  
  // optional .DB_C_BloodBtl lastBloodBtl = 8;
  inline bool has_lastbloodbtl() const;
  inline void clear_lastbloodbtl();
  static const int kLastBloodBtlFieldNumber = 8;
  inline const ::DB_C_BloodBtl& lastbloodbtl() const;
  inline ::DB_C_BloodBtl* mutable_lastbloodbtl();
  
  // repeated .DB_C_OfficerRightUse officerRightUseLst = 9;
  inline int officerrightuselst_size() const;
  inline void clear_officerrightuselst();
  static const int kOfficerRightUseLstFieldNumber = 9;
  inline const ::google::protobuf::RepeatedPtrField< ::DB_C_OfficerRightUse >& officerrightuselst() const;
  inline ::google::protobuf::RepeatedPtrField< ::DB_C_OfficerRightUse >* mutable_officerrightuselst();
  inline const ::DB_C_OfficerRightUse& officerrightuselst(int index) const;
  inline ::DB_C_OfficerRightUse* mutable_officerrightuselst(int index);
  inline ::DB_C_OfficerRightUse* add_officerrightuselst();
  
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::google::protobuf::int32 region_;
  ::google::protobuf::int32 cityid_;
  ::google::protobuf::int32 countryid_;
  ::google::protobuf::RepeatedPtrField< ::DB_C_NPC > npc_;
  ::google::protobuf::int32 npcinittm_;
  ::google::protobuf::int64 ltsaverevision_;
  ::DB_C_BloodBtl* lastbloodbtl_;
  ::google::protobuf::RepeatedPtrField< ::DB_C_OfficerRightUse > officerrightuselst_;
  friend void  protobuf_AddDesc_countryDB_2eproto();
  friend void protobuf_AssignDesc_countryDB_2eproto();
  friend void protobuf_ShutdownFile_countryDB_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(8 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static DB_C_City* default_instance_;
};
// -------------------------------------------------------------------

class DB_C_CityBuffData : public ::google::protobuf::Message {
 public:
  DB_C_CityBuffData();
  virtual ~DB_C_CityBuffData();
  
  DB_C_CityBuffData(const DB_C_CityBuffData& from);
  
  inline DB_C_CityBuffData& operator=(const DB_C_CityBuffData& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const DB_C_CityBuffData& default_instance();
  void Swap(DB_C_CityBuffData* other);
  
  // implements Message ----------------------------------------------
  
  DB_C_CityBuffData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DB_C_CityBuffData& from);
  void MergeFrom(const DB_C_CityBuffData& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const { _cached_size_ = size; }
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional int32 flag = 1 [default = 0];
  inline bool has_flag() const;
  inline void clear_flag();
  static const int kFlagFieldNumber = 1;
  inline ::google::protobuf::int32 flag() const;
  inline void set_flag(::google::protobuf::int32 value);
  
  // repeated .DB_C_RandomBuff randomBuffs = 2;
  inline int randombuffs_size() const;
  inline void clear_randombuffs();
  static const int kRandomBuffsFieldNumber = 2;
  inline const ::google::protobuf::RepeatedPtrField< ::DB_C_RandomBuff >& randombuffs() const;
  inline ::google::protobuf::RepeatedPtrField< ::DB_C_RandomBuff >* mutable_randombuffs();
  inline const ::DB_C_RandomBuff& randombuffs(int index) const;
  inline ::DB_C_RandomBuff* mutable_randombuffs(int index);
  inline ::DB_C_RandomBuff* add_randombuffs();
  
  // optional int32 state = 3 [default = 0];
  inline bool has_state() const;
  inline void clear_state();
  static const int kStateFieldNumber = 3;
  inline ::google::protobuf::int32 state() const;
  inline void set_state(::google::protobuf::int32 value);
  
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::google::protobuf::int32 flag_;
  ::google::protobuf::RepeatedPtrField< ::DB_C_RandomBuff > randombuffs_;
  ::google::protobuf::int32 state_;
  friend void  protobuf_AddDesc_countryDB_2eproto();
  friend void protobuf_AssignDesc_countryDB_2eproto();
  friend void protobuf_ShutdownFile_countryDB_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static DB_C_CityBuffData* default_instance_;
};
// -------------------------------------------------------------------

class DB_C_RandomBuff : public ::google::protobuf::Message {
 public:
  DB_C_RandomBuff();
  virtual ~DB_C_RandomBuff();
  
  DB_C_RandomBuff(const DB_C_RandomBuff& from);
  
  inline DB_C_RandomBuff& operator=(const DB_C_RandomBuff& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const DB_C_RandomBuff& default_instance();
  void Swap(DB_C_RandomBuff* other);
  
  // implements Message ----------------------------------------------
  
  DB_C_RandomBuff* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DB_C_RandomBuff& from);
  void MergeFrom(const DB_C_RandomBuff& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const { _cached_size_ = size; }
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional int32 cityID = 1;
  inline bool has_cityid() const;
  inline void clear_cityid();
  static const int kCityIDFieldNumber = 1;
  inline ::google::protobuf::int32 cityid() const;
  inline void set_cityid(::google::protobuf::int32 value);
  
  // optional int32 buffID = 2 [default = 0];
  inline bool has_buffid() const;
  inline void clear_buffid();
  static const int kBuffIDFieldNumber = 2;
  inline ::google::protobuf::int32 buffid() const;
  inline void set_buffid(::google::protobuf::int32 value);
  
  // optional int32 activeTm = 3 [default = 0];
  inline bool has_activetm() const;
  inline void clear_activetm();
  static const int kActiveTmFieldNumber = 3;
  inline ::google::protobuf::int32 activetm() const;
  inline void set_activetm(::google::protobuf::int32 value);
  
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::google::protobuf::int32 cityid_;
  ::google::protobuf::int32 buffid_;
  ::google::protobuf::int32 activetm_;
  friend void  protobuf_AddDesc_countryDB_2eproto();
  friend void protobuf_AssignDesc_countryDB_2eproto();
  friend void protobuf_ShutdownFile_countryDB_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static DB_C_RandomBuff* default_instance_;
};
// -------------------------------------------------------------------

class DB_Arena_Rank_NPC : public ::google::protobuf::Message {
 public:
  DB_Arena_Rank_NPC();
  virtual ~DB_Arena_Rank_NPC();
  
  DB_Arena_Rank_NPC(const DB_Arena_Rank_NPC& from);
  
  inline DB_Arena_Rank_NPC& operator=(const DB_Arena_Rank_NPC& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const DB_Arena_Rank_NPC& default_instance();
  void Swap(DB_Arena_Rank_NPC* other);
  
  // implements Message ----------------------------------------------
  
  DB_Arena_Rank_NPC* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DB_Arena_Rank_NPC& from);
  void MergeFrom(const DB_Arena_Rank_NPC& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const { _cached_size_ = size; }
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional int32 npcid = 1;
  inline bool has_npcid() const;
  inline void clear_npcid();
  static const int kNpcidFieldNumber = 1;
  inline ::google::protobuf::int32 npcid() const;
  inline void set_npcid(::google::protobuf::int32 value);
  
  // optional int32 npcindex = 2;
  inline bool has_npcindex() const;
  inline void clear_npcindex();
  static const int kNpcindexFieldNumber = 2;
  inline ::google::protobuf::int32 npcindex() const;
  inline void set_npcindex(::google::protobuf::int32 value);
  
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::google::protobuf::int32 npcid_;
  ::google::protobuf::int32 npcindex_;
  friend void  protobuf_AddDesc_countryDB_2eproto();
  friend void protobuf_AssignDesc_countryDB_2eproto();
  friend void protobuf_ShutdownFile_countryDB_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static DB_Arena_Rank_NPC* default_instance_;
};
// -------------------------------------------------------------------

class DB_Arena_Rank_List : public ::google::protobuf::Message {
 public:
  DB_Arena_Rank_List();
  virtual ~DB_Arena_Rank_List();
  
  DB_Arena_Rank_List(const DB_Arena_Rank_List& from);
  
  inline DB_Arena_Rank_List& operator=(const DB_Arena_Rank_List& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const DB_Arena_Rank_List& default_instance();
  void Swap(DB_Arena_Rank_List* other);
  
  // implements Message ----------------------------------------------
  
  DB_Arena_Rank_List* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DB_Arena_Rank_List& from);
  void MergeFrom(const DB_Arena_Rank_List& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const { _cached_size_ = size; }
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // repeated int64 uidlist = 1;
  inline int uidlist_size() const;
  inline void clear_uidlist();
  static const int kUidlistFieldNumber = 1;
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >& uidlist() const
      ;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >* mutable_uidlist();
  inline ::google::protobuf::int64 uidlist(int index) const;
  inline void set_uidlist(int index, ::google::protobuf::int64 value);
  inline void add_uidlist(::google::protobuf::int64 value);
  
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::google::protobuf::RepeatedField< ::google::protobuf::int64 > uidlist_;
  friend void  protobuf_AddDesc_countryDB_2eproto();
  friend void protobuf_AssignDesc_countryDB_2eproto();
  friend void protobuf_ShutdownFile_countryDB_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static DB_Arena_Rank_List* default_instance_;
};
// -------------------------------------------------------------------

class DB_Arena_Score_Unit : public ::google::protobuf::Message {
 public:
  DB_Arena_Score_Unit();
  virtual ~DB_Arena_Score_Unit();
  
  DB_Arena_Score_Unit(const DB_Arena_Score_Unit& from);
  
  inline DB_Arena_Score_Unit& operator=(const DB_Arena_Score_Unit& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const DB_Arena_Score_Unit& default_instance();
  void Swap(DB_Arena_Score_Unit* other);
  
  // implements Message ----------------------------------------------
  
  DB_Arena_Score_Unit* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DB_Arena_Score_Unit& from);
  void MergeFrom(const DB_Arena_Score_Unit& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const { _cached_size_ = size; }
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional int64 uid = 1;
  inline bool has_uid() const;
  inline void clear_uid();
  static const int kUidFieldNumber = 1;
  inline ::google::protobuf::int64 uid() const;
  inline void set_uid(::google::protobuf::int64 value);
  
  // optional int32 score = 2;
  inline bool has_score() const;
  inline void clear_score();
  static const int kScoreFieldNumber = 2;
  inline ::google::protobuf::int32 score() const;
  inline void set_score(::google::protobuf::int32 value);
  
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::google::protobuf::int64 uid_;
  ::google::protobuf::int32 score_;
  friend void  protobuf_AddDesc_countryDB_2eproto();
  friend void protobuf_AssignDesc_countryDB_2eproto();
  friend void protobuf_ShutdownFile_countryDB_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static DB_Arena_Score_Unit* default_instance_;
};
// -------------------------------------------------------------------

class DB_Arena_Score_List : public ::google::protobuf::Message {
 public:
  DB_Arena_Score_List();
  virtual ~DB_Arena_Score_List();
  
  DB_Arena_Score_List(const DB_Arena_Score_List& from);
  
  inline DB_Arena_Score_List& operator=(const DB_Arena_Score_List& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const DB_Arena_Score_List& default_instance();
  void Swap(DB_Arena_Score_List* other);
  
  // implements Message ----------------------------------------------
  
  DB_Arena_Score_List* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DB_Arena_Score_List& from);
  void MergeFrom(const DB_Arena_Score_List& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const { _cached_size_ = size; }
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // repeated .DB_Arena_Score_Unit scorelist = 1;
  inline int scorelist_size() const;
  inline void clear_scorelist();
  static const int kScorelistFieldNumber = 1;
  inline const ::google::protobuf::RepeatedPtrField< ::DB_Arena_Score_Unit >& scorelist() const;
  inline ::google::protobuf::RepeatedPtrField< ::DB_Arena_Score_Unit >* mutable_scorelist();
  inline const ::DB_Arena_Score_Unit& scorelist(int index) const;
  inline ::DB_Arena_Score_Unit* mutable_scorelist(int index);
  inline ::DB_Arena_Score_Unit* add_scorelist();
  
  // optional int32 nActive = 2;
  inline bool has_nactive() const;
  inline void clear_nactive();
  static const int kNActiveFieldNumber = 2;
  inline ::google::protobuf::int32 nactive() const;
  inline void set_nactive(::google::protobuf::int32 value);
  
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::google::protobuf::RepeatedPtrField< ::DB_Arena_Score_Unit > scorelist_;
  ::google::protobuf::int32 nactive_;
  friend void  protobuf_AddDesc_countryDB_2eproto();
  friend void protobuf_AssignDesc_countryDB_2eproto();
  friend void protobuf_ShutdownFile_countryDB_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static DB_Arena_Score_List* default_instance_;
};
// -------------------------------------------------------------------

class DB_Arena_Rank : public ::google::protobuf::Message {
 public:
  DB_Arena_Rank();
  virtual ~DB_Arena_Rank();
  
  DB_Arena_Rank(const DB_Arena_Rank& from);
  
  inline DB_Arena_Rank& operator=(const DB_Arena_Rank& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const DB_Arena_Rank& default_instance();
  void Swap(DB_Arena_Rank* other);
  
  // implements Message ----------------------------------------------
  
  DB_Arena_Rank* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DB_Arena_Rank& from);
  void MergeFrom(const DB_Arena_Rank& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const { _cached_size_ = size; }
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // repeated .DB_Arena_Rank_NPC arenaRankNpc = 1;
  inline int arenaranknpc_size() const;
  inline void clear_arenaranknpc();
  static const int kArenaRankNpcFieldNumber = 1;
  inline const ::google::protobuf::RepeatedPtrField< ::DB_Arena_Rank_NPC >& arenaranknpc() const;
  inline ::google::protobuf::RepeatedPtrField< ::DB_Arena_Rank_NPC >* mutable_arenaranknpc();
  inline const ::DB_Arena_Rank_NPC& arenaranknpc(int index) const;
  inline ::DB_Arena_Rank_NPC* mutable_arenaranknpc(int index);
  inline ::DB_Arena_Rank_NPC* add_arenaranknpc();
  
  // optional .DB_Arena_Rank_List arenaRankLast = 2;
  inline bool has_arenaranklast() const;
  inline void clear_arenaranklast();
  static const int kArenaRankLastFieldNumber = 2;
  inline const ::DB_Arena_Rank_List& arenaranklast() const;
  inline ::DB_Arena_Rank_List* mutable_arenaranklast();
  
  // optional uint32 nRankTimeLast = 3 [default = 0];
  inline bool has_nranktimelast() const;
  inline void clear_nranktimelast();
  static const int kNRankTimeLastFieldNumber = 3;
  inline ::google::protobuf::uint32 nranktimelast() const;
  inline void set_nranktimelast(::google::protobuf::uint32 value);
  
  // optional .DB_Arena_Score_List arenaScoreList = 4;
  inline bool has_arenascorelist() const;
  inline void clear_arenascorelist();
  static const int kArenaScoreListFieldNumber = 4;
  inline const ::DB_Arena_Score_List& arenascorelist() const;
  inline ::DB_Arena_Score_List* mutable_arenascorelist();
  
  // optional .DB_Arena_Score_List arenaScoreListOld = 5;
  inline bool has_arenascorelistold() const;
  inline void clear_arenascorelistold();
  static const int kArenaScoreListOldFieldNumber = 5;
  inline const ::DB_Arena_Score_List& arenascorelistold() const;
  inline ::DB_Arena_Score_List* mutable_arenascorelistold();
  
  // optional .DB_Arena_Score_List currentScoreList = 6;
  inline bool has_currentscorelist() const;
  inline void clear_currentscorelist();
  static const int kCurrentScoreListFieldNumber = 6;
  inline const ::DB_Arena_Score_List& currentscorelist() const;
  inline ::DB_Arena_Score_List* mutable_currentscorelist();
  
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::google::protobuf::RepeatedPtrField< ::DB_Arena_Rank_NPC > arenaranknpc_;
  ::DB_Arena_Rank_List* arenaranklast_;
  ::google::protobuf::uint32 nranktimelast_;
  ::DB_Arena_Score_List* arenascorelist_;
  ::DB_Arena_Score_List* arenascorelistold_;
  ::DB_Arena_Score_List* currentscorelist_;
  friend void  protobuf_AddDesc_countryDB_2eproto();
  friend void protobuf_AssignDesc_countryDB_2eproto();
  friend void protobuf_ShutdownFile_countryDB_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static DB_Arena_Rank* default_instance_;
};
// -------------------------------------------------------------------

class DB_WorldArena_Rank_Unit : public ::google::protobuf::Message {
 public:
  DB_WorldArena_Rank_Unit();
  virtual ~DB_WorldArena_Rank_Unit();
  
  DB_WorldArena_Rank_Unit(const DB_WorldArena_Rank_Unit& from);
  
  inline DB_WorldArena_Rank_Unit& operator=(const DB_WorldArena_Rank_Unit& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const DB_WorldArena_Rank_Unit& default_instance();
  void Swap(DB_WorldArena_Rank_Unit* other);
  
  // implements Message ----------------------------------------------
  
  DB_WorldArena_Rank_Unit* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DB_WorldArena_Rank_Unit& from);
  void MergeFrom(const DB_WorldArena_Rank_Unit& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const { _cached_size_ = size; }
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional int64 uid = 1;
  inline bool has_uid() const;
  inline void clear_uid();
  static const int kUidFieldNumber = 1;
  inline ::google::protobuf::int64 uid() const;
  inline void set_uid(::google::protobuf::int64 value);
  
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::google::protobuf::int64 uid_;
  friend void  protobuf_AddDesc_countryDB_2eproto();
  friend void protobuf_AssignDesc_countryDB_2eproto();
  friend void protobuf_ShutdownFile_countryDB_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static DB_WorldArena_Rank_Unit* default_instance_;
};
// -------------------------------------------------------------------

class DB_WorldArena_Rank_List : public ::google::protobuf::Message {
 public:
  DB_WorldArena_Rank_List();
  virtual ~DB_WorldArena_Rank_List();
  
  DB_WorldArena_Rank_List(const DB_WorldArena_Rank_List& from);
  
  inline DB_WorldArena_Rank_List& operator=(const DB_WorldArena_Rank_List& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const DB_WorldArena_Rank_List& default_instance();
  void Swap(DB_WorldArena_Rank_List* other);
  
  // implements Message ----------------------------------------------
  
  DB_WorldArena_Rank_List* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DB_WorldArena_Rank_List& from);
  void MergeFrom(const DB_WorldArena_Rank_List& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const { _cached_size_ = size; }
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // repeated .DB_WorldArena_Rank_Unit worldArenaRankList = 1;
  inline int worldarenaranklist_size() const;
  inline void clear_worldarenaranklist();
  static const int kWorldArenaRankListFieldNumber = 1;
  inline const ::google::protobuf::RepeatedPtrField< ::DB_WorldArena_Rank_Unit >& worldarenaranklist() const;
  inline ::google::protobuf::RepeatedPtrField< ::DB_WorldArena_Rank_Unit >* mutable_worldarenaranklist();
  inline const ::DB_WorldArena_Rank_Unit& worldarenaranklist(int index) const;
  inline ::DB_WorldArena_Rank_Unit* mutable_worldarenaranklist(int index);
  inline ::DB_WorldArena_Rank_Unit* add_worldarenaranklist();
  
  // optional int32 rankTimeLast = 2 [default = 0];
  inline bool has_ranktimelast() const;
  inline void clear_ranktimelast();
  static const int kRankTimeLastFieldNumber = 2;
  inline ::google::protobuf::int32 ranktimelast() const;
  inline void set_ranktimelast(::google::protobuf::int32 value);
  
  // optional int32 activityIndex = 3 [default = 0];
  inline bool has_activityindex() const;
  inline void clear_activityindex();
  static const int kActivityIndexFieldNumber = 3;
  inline ::google::protobuf::int32 activityindex() const;
  inline void set_activityindex(::google::protobuf::int32 value);
  
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::google::protobuf::RepeatedPtrField< ::DB_WorldArena_Rank_Unit > worldarenaranklist_;
  ::google::protobuf::int32 ranktimelast_;
  ::google::protobuf::int32 activityindex_;
  friend void  protobuf_AddDesc_countryDB_2eproto();
  friend void protobuf_AssignDesc_countryDB_2eproto();
  friend void protobuf_ShutdownFile_countryDB_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static DB_WorldArena_Rank_List* default_instance_;
};
// -------------------------------------------------------------------

class DB_WorldArena_Rank : public ::google::protobuf::Message {
 public:
  DB_WorldArena_Rank();
  virtual ~DB_WorldArena_Rank();
  
  DB_WorldArena_Rank(const DB_WorldArena_Rank& from);
  
  inline DB_WorldArena_Rank& operator=(const DB_WorldArena_Rank& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const DB_WorldArena_Rank& default_instance();
  void Swap(DB_WorldArena_Rank* other);
  
  // implements Message ----------------------------------------------
  
  DB_WorldArena_Rank* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DB_WorldArena_Rank& from);
  void MergeFrom(const DB_WorldArena_Rank& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const { _cached_size_ = size; }
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // repeated .DB_Arena_Rank_NPC worldArenaRankNpc = 1;
  inline int worldarenaranknpc_size() const;
  inline void clear_worldarenaranknpc();
  static const int kWorldArenaRankNpcFieldNumber = 1;
  inline const ::google::protobuf::RepeatedPtrField< ::DB_Arena_Rank_NPC >& worldarenaranknpc() const;
  inline ::google::protobuf::RepeatedPtrField< ::DB_Arena_Rank_NPC >* mutable_worldarenaranknpc();
  inline const ::DB_Arena_Rank_NPC& worldarenaranknpc(int index) const;
  inline ::DB_Arena_Rank_NPC* mutable_worldarenaranknpc(int index);
  inline ::DB_Arena_Rank_NPC* add_worldarenaranknpc();
  
  // optional .DB_WorldArena_Rank_List worldArenaRankLast = 2;
  inline bool has_worldarenaranklast() const;
  inline void clear_worldarenaranklast();
  static const int kWorldArenaRankLastFieldNumber = 2;
  inline const ::DB_WorldArena_Rank_List& worldarenaranklast() const;
  inline ::DB_WorldArena_Rank_List* mutable_worldarenaranklast();
  
  // repeated .DB_WorldArena_Rank_List worldArenaRankAll = 3;
  inline int worldarenarankall_size() const;
  inline void clear_worldarenarankall();
  static const int kWorldArenaRankAllFieldNumber = 3;
  inline const ::google::protobuf::RepeatedPtrField< ::DB_WorldArena_Rank_List >& worldarenarankall() const;
  inline ::google::protobuf::RepeatedPtrField< ::DB_WorldArena_Rank_List >* mutable_worldarenarankall();
  inline const ::DB_WorldArena_Rank_List& worldarenarankall(int index) const;
  inline ::DB_WorldArena_Rank_List* mutable_worldarenarankall(int index);
  inline ::DB_WorldArena_Rank_List* add_worldarenarankall();
  
  // optional int32 currentActivityIndex = 4 [default = 0];
  inline bool has_currentactivityindex() const;
  inline void clear_currentactivityindex();
  static const int kCurrentActivityIndexFieldNumber = 4;
  inline ::google::protobuf::int32 currentactivityindex() const;
  inline void set_currentactivityindex(::google::protobuf::int32 value);
  
  // optional int32 rankRecordIndex = 5 [default = 0];
  inline bool has_rankrecordindex() const;
  inline void clear_rankrecordindex();
  static const int kRankRecordIndexFieldNumber = 5;
  inline ::google::protobuf::int32 rankrecordindex() const;
  inline void set_rankrecordindex(::google::protobuf::int32 value);
  
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::google::protobuf::RepeatedPtrField< ::DB_Arena_Rank_NPC > worldarenaranknpc_;
  ::DB_WorldArena_Rank_List* worldarenaranklast_;
  ::google::protobuf::RepeatedPtrField< ::DB_WorldArena_Rank_List > worldarenarankall_;
  ::google::protobuf::int32 currentactivityindex_;
  ::google::protobuf::int32 rankrecordindex_;
  friend void  protobuf_AddDesc_countryDB_2eproto();
  friend void protobuf_AssignDesc_countryDB_2eproto();
  friend void protobuf_ShutdownFile_countryDB_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static DB_WorldArena_Rank* default_instance_;
};
// -------------------------------------------------------------------

class DB_HeroArena_Rank_Unit : public ::google::protobuf::Message {
 public:
  DB_HeroArena_Rank_Unit();
  virtual ~DB_HeroArena_Rank_Unit();
  
  DB_HeroArena_Rank_Unit(const DB_HeroArena_Rank_Unit& from);
  
  inline DB_HeroArena_Rank_Unit& operator=(const DB_HeroArena_Rank_Unit& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const DB_HeroArena_Rank_Unit& default_instance();
  void Swap(DB_HeroArena_Rank_Unit* other);
  
  // implements Message ----------------------------------------------
  
  DB_HeroArena_Rank_Unit* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DB_HeroArena_Rank_Unit& from);
  void MergeFrom(const DB_HeroArena_Rank_Unit& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const { _cached_size_ = size; }
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional int64 uid = 1;
  inline bool has_uid() const;
  inline void clear_uid();
  static const int kUidFieldNumber = 1;
  inline ::google::protobuf::int64 uid() const;
  inline void set_uid(::google::protobuf::int64 value);
  
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::google::protobuf::int64 uid_;
  friend void  protobuf_AddDesc_countryDB_2eproto();
  friend void protobuf_AssignDesc_countryDB_2eproto();
  friend void protobuf_ShutdownFile_countryDB_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static DB_HeroArena_Rank_Unit* default_instance_;
};
// -------------------------------------------------------------------

class DB_HeroArena_Rank_List : public ::google::protobuf::Message {
 public:
  DB_HeroArena_Rank_List();
  virtual ~DB_HeroArena_Rank_List();
  
  DB_HeroArena_Rank_List(const DB_HeroArena_Rank_List& from);
  
  inline DB_HeroArena_Rank_List& operator=(const DB_HeroArena_Rank_List& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const DB_HeroArena_Rank_List& default_instance();
  void Swap(DB_HeroArena_Rank_List* other);
  
  // implements Message ----------------------------------------------
  
  DB_HeroArena_Rank_List* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DB_HeroArena_Rank_List& from);
  void MergeFrom(const DB_HeroArena_Rank_List& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const { _cached_size_ = size; }
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // repeated .DB_HeroArena_Rank_Unit heroArenaRankList = 1;
  inline int heroarenaranklist_size() const;
  inline void clear_heroarenaranklist();
  static const int kHeroArenaRankListFieldNumber = 1;
  inline const ::google::protobuf::RepeatedPtrField< ::DB_HeroArena_Rank_Unit >& heroarenaranklist() const;
  inline ::google::protobuf::RepeatedPtrField< ::DB_HeroArena_Rank_Unit >* mutable_heroarenaranklist();
  inline const ::DB_HeroArena_Rank_Unit& heroarenaranklist(int index) const;
  inline ::DB_HeroArena_Rank_Unit* mutable_heroarenaranklist(int index);
  inline ::DB_HeroArena_Rank_Unit* add_heroarenaranklist();
  
  // optional int32 rankTimeLast = 2 [default = 0];
  inline bool has_ranktimelast() const;
  inline void clear_ranktimelast();
  static const int kRankTimeLastFieldNumber = 2;
  inline ::google::protobuf::int32 ranktimelast() const;
  inline void set_ranktimelast(::google::protobuf::int32 value);
  
  // optional int32 activityIndex = 3 [default = 0];
  inline bool has_activityindex() const;
  inline void clear_activityindex();
  static const int kActivityIndexFieldNumber = 3;
  inline ::google::protobuf::int32 activityindex() const;
  inline void set_activityindex(::google::protobuf::int32 value);
  
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::google::protobuf::RepeatedPtrField< ::DB_HeroArena_Rank_Unit > heroarenaranklist_;
  ::google::protobuf::int32 ranktimelast_;
  ::google::protobuf::int32 activityindex_;
  friend void  protobuf_AddDesc_countryDB_2eproto();
  friend void protobuf_AssignDesc_countryDB_2eproto();
  friend void protobuf_ShutdownFile_countryDB_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static DB_HeroArena_Rank_List* default_instance_;
};
// -------------------------------------------------------------------

class DB_HeroArena_Rank : public ::google::protobuf::Message {
 public:
  DB_HeroArena_Rank();
  virtual ~DB_HeroArena_Rank();
  
  DB_HeroArena_Rank(const DB_HeroArena_Rank& from);
  
  inline DB_HeroArena_Rank& operator=(const DB_HeroArena_Rank& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const DB_HeroArena_Rank& default_instance();
  void Swap(DB_HeroArena_Rank* other);
  
  // implements Message ----------------------------------------------
  
  DB_HeroArena_Rank* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DB_HeroArena_Rank& from);
  void MergeFrom(const DB_HeroArena_Rank& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const { _cached_size_ = size; }
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // repeated .DB_Arena_Rank_NPC heroArenaRankNpc = 1;
  inline int heroarenaranknpc_size() const;
  inline void clear_heroarenaranknpc();
  static const int kHeroArenaRankNpcFieldNumber = 1;
  inline const ::google::protobuf::RepeatedPtrField< ::DB_Arena_Rank_NPC >& heroarenaranknpc() const;
  inline ::google::protobuf::RepeatedPtrField< ::DB_Arena_Rank_NPC >* mutable_heroarenaranknpc();
  inline const ::DB_Arena_Rank_NPC& heroarenaranknpc(int index) const;
  inline ::DB_Arena_Rank_NPC* mutable_heroarenaranknpc(int index);
  inline ::DB_Arena_Rank_NPC* add_heroarenaranknpc();
  
  // optional .DB_HeroArena_Rank_List heroArenaRankLast = 2;
  inline bool has_heroarenaranklast() const;
  inline void clear_heroarenaranklast();
  static const int kHeroArenaRankLastFieldNumber = 2;
  inline const ::DB_HeroArena_Rank_List& heroarenaranklast() const;
  inline ::DB_HeroArena_Rank_List* mutable_heroarenaranklast();
  
  // optional int32 currentActivityIndex = 3 [default = 0];
  inline bool has_currentactivityindex() const;
  inline void clear_currentactivityindex();
  static const int kCurrentActivityIndexFieldNumber = 3;
  inline ::google::protobuf::int32 currentactivityindex() const;
  inline void set_currentactivityindex(::google::protobuf::int32 value);
  
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::google::protobuf::RepeatedPtrField< ::DB_Arena_Rank_NPC > heroarenaranknpc_;
  ::DB_HeroArena_Rank_List* heroarenaranklast_;
  ::google::protobuf::int32 currentactivityindex_;
  friend void  protobuf_AddDesc_countryDB_2eproto();
  friend void protobuf_AssignDesc_countryDB_2eproto();
  friend void protobuf_ShutdownFile_countryDB_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static DB_HeroArena_Rank* default_instance_;
};
// -------------------------------------------------------------------

class DB_C_Officer : public ::google::protobuf::Message {
 public:
  DB_C_Officer();
  virtual ~DB_C_Officer();
  
  DB_C_Officer(const DB_C_Officer& from);
  
  inline DB_C_Officer& operator=(const DB_C_Officer& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const DB_C_Officer& default_instance();
  void Swap(DB_C_Officer* other);
  
  // implements Message ----------------------------------------------
  
  DB_C_Officer* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DB_C_Officer& from);
  void MergeFrom(const DB_C_Officer& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const { _cached_size_ = size; }
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional int32 officerPosition = 1;
  inline bool has_officerposition() const;
  inline void clear_officerposition();
  static const int kOfficerPositionFieldNumber = 1;
  inline ::google::protobuf::int32 officerposition() const;
  inline void set_officerposition(::google::protobuf::int32 value);
  
  // optional int64 uid = 2;
  inline bool has_uid() const;
  inline void clear_uid();
  static const int kUidFieldNumber = 2;
  inline ::google::protobuf::int64 uid() const;
  inline void set_uid(::google::protobuf::int64 value);
  
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::google::protobuf::int32 officerposition_;
  ::google::protobuf::int64 uid_;
  friend void  protobuf_AddDesc_countryDB_2eproto();
  friend void protobuf_AssignDesc_countryDB_2eproto();
  friend void protobuf_ShutdownFile_countryDB_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static DB_C_Officer* default_instance_;
};
// -------------------------------------------------------------------

class DB_C_OfficerInfo : public ::google::protobuf::Message {
 public:
  DB_C_OfficerInfo();
  virtual ~DB_C_OfficerInfo();
  
  DB_C_OfficerInfo(const DB_C_OfficerInfo& from);
  
  inline DB_C_OfficerInfo& operator=(const DB_C_OfficerInfo& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const DB_C_OfficerInfo& default_instance();
  void Swap(DB_C_OfficerInfo* other);
  
  // implements Message ----------------------------------------------
  
  DB_C_OfficerInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DB_C_OfficerInfo& from);
  void MergeFrom(const DB_C_OfficerInfo& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const { _cached_size_ = size; }
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // repeated .DB_C_Officer arenaofficers = 1;
  inline int arenaofficers_size() const;
  inline void clear_arenaofficers();
  static const int kArenaofficersFieldNumber = 1;
  inline const ::google::protobuf::RepeatedPtrField< ::DB_C_Officer >& arenaofficers() const;
  inline ::google::protobuf::RepeatedPtrField< ::DB_C_Officer >* mutable_arenaofficers();
  inline const ::DB_C_Officer& arenaofficers(int index) const;
  inline ::DB_C_Officer* mutable_arenaofficers(int index);
  inline ::DB_C_Officer* add_arenaofficers();
  
  // repeated .DB_C_Officer guildofficers = 2;
  inline int guildofficers_size() const;
  inline void clear_guildofficers();
  static const int kGuildofficersFieldNumber = 2;
  inline const ::google::protobuf::RepeatedPtrField< ::DB_C_Officer >& guildofficers() const;
  inline ::google::protobuf::RepeatedPtrField< ::DB_C_Officer >* mutable_guildofficers();
  inline const ::DB_C_Officer& guildofficers(int index) const;
  inline ::DB_C_Officer* mutable_guildofficers(int index);
  inline ::DB_C_Officer* add_guildofficers();
  
  // optional int32 officerRightUseFlag = 3 [default = 0];
  inline bool has_officerrightuseflag() const;
  inline void clear_officerrightuseflag();
  static const int kOfficerRightUseFlagFieldNumber = 3;
  inline ::google::protobuf::int32 officerrightuseflag() const;
  inline void set_officerrightuseflag(::google::protobuf::int32 value);
  
  // optional int32 updateTimeLast = 4 [default = 0];
  inline bool has_updatetimelast() const;
  inline void clear_updatetimelast();
  static const int kUpdateTimeLastFieldNumber = 4;
  inline ::google::protobuf::int32 updatetimelast() const;
  inline void set_updatetimelast(::google::protobuf::int32 value);
  
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::google::protobuf::RepeatedPtrField< ::DB_C_Officer > arenaofficers_;
  ::google::protobuf::RepeatedPtrField< ::DB_C_Officer > guildofficers_;
  ::google::protobuf::int32 officerrightuseflag_;
  ::google::protobuf::int32 updatetimelast_;
  friend void  protobuf_AddDesc_countryDB_2eproto();
  friend void protobuf_AssignDesc_countryDB_2eproto();
  friend void protobuf_ShutdownFile_countryDB_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static DB_C_OfficerInfo* default_instance_;
};
// -------------------------------------------------------------------

class DB_C_PubGuildPKGroup : public ::google::protobuf::Message {
 public:
  DB_C_PubGuildPKGroup();
  virtual ~DB_C_PubGuildPKGroup();
  
  DB_C_PubGuildPKGroup(const DB_C_PubGuildPKGroup& from);
  
  inline DB_C_PubGuildPKGroup& operator=(const DB_C_PubGuildPKGroup& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const DB_C_PubGuildPKGroup& default_instance();
  void Swap(DB_C_PubGuildPKGroup* other);
  
  // implements Message ----------------------------------------------
  
  DB_C_PubGuildPKGroup* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DB_C_PubGuildPKGroup& from);
  void MergeFrom(const DB_C_PubGuildPKGroup& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const { _cached_size_ = size; }
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional int32 guildID1 = 1;
  inline bool has_guildid1() const;
  inline void clear_guildid1();
  static const int kGuildID1FieldNumber = 1;
  inline ::google::protobuf::int32 guildid1() const;
  inline void set_guildid1(::google::protobuf::int32 value);
  
  // optional int32 guildID2 = 2;
  inline bool has_guildid2() const;
  inline void clear_guildid2();
  static const int kGuildID2FieldNumber = 2;
  inline ::google::protobuf::int32 guildid2() const;
  inline void set_guildid2(::google::protobuf::int32 value);
  
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::google::protobuf::int32 guildid1_;
  ::google::protobuf::int32 guildid2_;
  friend void  protobuf_AddDesc_countryDB_2eproto();
  friend void protobuf_AssignDesc_countryDB_2eproto();
  friend void protobuf_ShutdownFile_countryDB_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static DB_C_PubGuildPKGroup* default_instance_;
};
// -------------------------------------------------------------------

class DB_C_PubGuildBtlInfo : public ::google::protobuf::Message {
 public:
  DB_C_PubGuildBtlInfo();
  virtual ~DB_C_PubGuildBtlInfo();
  
  DB_C_PubGuildBtlInfo(const DB_C_PubGuildBtlInfo& from);
  
  inline DB_C_PubGuildBtlInfo& operator=(const DB_C_PubGuildBtlInfo& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const DB_C_PubGuildBtlInfo& default_instance();
  void Swap(DB_C_PubGuildBtlInfo* other);
  
  // implements Message ----------------------------------------------
  
  DB_C_PubGuildBtlInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DB_C_PubGuildBtlInfo& from);
  void MergeFrom(const DB_C_PubGuildBtlInfo& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const { _cached_size_ = size; }
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional int32 curSession = 1;
  inline bool has_cursession() const;
  inline void clear_cursession();
  static const int kCurSessionFieldNumber = 1;
  inline ::google::protobuf::int32 cursession() const;
  inline void set_cursession(::google::protobuf::int32 value);
  
  // optional int32 btlDay = 2;
  inline bool has_btlday() const;
  inline void clear_btlday();
  static const int kBtlDayFieldNumber = 2;
  inline ::google::protobuf::int32 btlday() const;
  inline void set_btlday(::google::protobuf::int32 value);
  
  // optional int32 pkStep = 3;
  inline bool has_pkstep() const;
  inline void clear_pkstep();
  static const int kPkStepFieldNumber = 3;
  inline ::google::protobuf::int32 pkstep() const;
  inline void set_pkstep(::google::protobuf::int32 value);
  
  // repeated bool curPKOVer = 4;
  inline int curpkover_size() const;
  inline void clear_curpkover();
  static const int kCurPKOVerFieldNumber = 4;
  inline const ::google::protobuf::RepeatedField< bool >& curpkover() const
      ;
  inline ::google::protobuf::RepeatedField< bool >* mutable_curpkover();
  inline bool curpkover(int index) const;
  inline void set_curpkover(int index, bool value);
  inline void add_curpkover(bool value);
  
  // optional int32 pkLstIdx = 5;
  inline bool has_pklstidx() const;
  inline void clear_pklstidx();
  static const int kPkLstIdxFieldNumber = 5;
  inline ::google::protobuf::int32 pklstidx() const;
  inline void set_pklstidx(::google::protobuf::int32 value);
  
  // repeated .DB_C_PubGuildPKGroup pkLst = 6;
  inline int pklst_size() const;
  inline void clear_pklst();
  static const int kPkLstFieldNumber = 6;
  inline const ::google::protobuf::RepeatedPtrField< ::DB_C_PubGuildPKGroup >& pklst() const;
  inline ::google::protobuf::RepeatedPtrField< ::DB_C_PubGuildPKGroup >* mutable_pklst();
  inline const ::DB_C_PubGuildPKGroup& pklst(int index) const;
  inline ::DB_C_PubGuildPKGroup* mutable_pklst(int index);
  inline ::DB_C_PubGuildPKGroup* add_pklst();
  
  // optional bool curSesionBtlOver = 7;
  inline bool has_cursesionbtlover() const;
  inline void clear_cursesionbtlover();
  static const int kCurSesionBtlOverFieldNumber = 7;
  inline bool cursesionbtlover() const;
  inline void set_cursesionbtlover(bool value);
  
  // repeated bool curAddScore = 8;
  inline int curaddscore_size() const;
  inline void clear_curaddscore();
  static const int kCurAddScoreFieldNumber = 8;
  inline const ::google::protobuf::RepeatedField< bool >& curaddscore() const
      ;
  inline ::google::protobuf::RepeatedField< bool >* mutable_curaddscore();
  inline bool curaddscore(int index) const;
  inline void set_curaddscore(int index, bool value);
  inline void add_curaddscore(bool value);
  
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::google::protobuf::int32 cursession_;
  ::google::protobuf::int32 btlday_;
  ::google::protobuf::int32 pkstep_;
  ::google::protobuf::RepeatedField< bool > curpkover_;
  ::google::protobuf::int32 pklstidx_;
  ::google::protobuf::RepeatedPtrField< ::DB_C_PubGuildPKGroup > pklst_;
  bool cursesionbtlover_;
  ::google::protobuf::RepeatedField< bool > curaddscore_;
  friend void  protobuf_AddDesc_countryDB_2eproto();
  friend void protobuf_AssignDesc_countryDB_2eproto();
  friend void protobuf_ShutdownFile_countryDB_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(8 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static DB_C_PubGuildBtlInfo* default_instance_;
};
// -------------------------------------------------------------------

class DB_C_GuildBtl_Top_Guild : public ::google::protobuf::Message {
 public:
  DB_C_GuildBtl_Top_Guild();
  virtual ~DB_C_GuildBtl_Top_Guild();
  
  DB_C_GuildBtl_Top_Guild(const DB_C_GuildBtl_Top_Guild& from);
  
  inline DB_C_GuildBtl_Top_Guild& operator=(const DB_C_GuildBtl_Top_Guild& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const DB_C_GuildBtl_Top_Guild& default_instance();
  void Swap(DB_C_GuildBtl_Top_Guild* other);
  
  // implements Message ----------------------------------------------
  
  DB_C_GuildBtl_Top_Guild* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DB_C_GuildBtl_Top_Guild& from);
  void MergeFrom(const DB_C_GuildBtl_Top_Guild& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const { _cached_size_ = size; }
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required int32 guildID = 1;
  inline bool has_guildid() const;
  inline void clear_guildid();
  static const int kGuildIDFieldNumber = 1;
  inline ::google::protobuf::int32 guildid() const;
  inline void set_guildid(::google::protobuf::int32 value);
  
  // required int32 countryID = 2;
  inline bool has_countryid() const;
  inline void clear_countryid();
  static const int kCountryIDFieldNumber = 2;
  inline ::google::protobuf::int32 countryid() const;
  inline void set_countryid(::google::protobuf::int32 value);
  
  // optional int32 guildLV = 3;
  inline bool has_guildlv() const;
  inline void clear_guildlv();
  static const int kGuildLVFieldNumber = 3;
  inline ::google::protobuf::int32 guildlv() const;
  inline void set_guildlv(::google::protobuf::int32 value);
  
  // optional string guildName = 4;
  inline bool has_guildname() const;
  inline void clear_guildname();
  static const int kGuildNameFieldNumber = 4;
  inline const ::std::string& guildname() const;
  inline void set_guildname(const ::std::string& value);
  inline void set_guildname(const char* value);
  inline void set_guildname(const char* value, size_t size);
  inline ::std::string* mutable_guildname();
  
  // optional int32 userCnt = 5;
  inline bool has_usercnt() const;
  inline void clear_usercnt();
  static const int kUserCntFieldNumber = 5;
  inline ::google::protobuf::int32 usercnt() const;
  inline void set_usercnt(::google::protobuf::int32 value);
  
  // optional int32 btlScore = 6;
  inline bool has_btlscore() const;
  inline void clear_btlscore();
  static const int kBtlScoreFieldNumber = 6;
  inline ::google::protobuf::int32 btlscore() const;
  inline void set_btlscore(::google::protobuf::int32 value);
  
  // optional string leaderName = 7;
  inline bool has_leadername() const;
  inline void clear_leadername();
  static const int kLeaderNameFieldNumber = 7;
  inline const ::std::string& leadername() const;
  inline void set_leadername(const ::std::string& value);
  inline void set_leadername(const char* value);
  inline void set_leadername(const char* value, size_t size);
  inline ::std::string* mutable_leadername();
  
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::google::protobuf::int32 guildid_;
  ::google::protobuf::int32 countryid_;
  ::google::protobuf::int32 guildlv_;
  ::std::string* guildname_;
  static const ::std::string _default_guildname_;
  ::google::protobuf::int32 usercnt_;
  ::google::protobuf::int32 btlscore_;
  ::std::string* leadername_;
  static const ::std::string _default_leadername_;
  friend void  protobuf_AddDesc_countryDB_2eproto();
  friend void protobuf_AssignDesc_countryDB_2eproto();
  friend void protobuf_ShutdownFile_countryDB_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(7 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static DB_C_GuildBtl_Top_Guild* default_instance_;
};
// -------------------------------------------------------------------

class DB_C_GuildBtl_Record : public ::google::protobuf::Message {
 public:
  DB_C_GuildBtl_Record();
  virtual ~DB_C_GuildBtl_Record();
  
  DB_C_GuildBtl_Record(const DB_C_GuildBtl_Record& from);
  
  inline DB_C_GuildBtl_Record& operator=(const DB_C_GuildBtl_Record& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const DB_C_GuildBtl_Record& default_instance();
  void Swap(DB_C_GuildBtl_Record* other);
  
  // implements Message ----------------------------------------------
  
  DB_C_GuildBtl_Record* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DB_C_GuildBtl_Record& from);
  void MergeFrom(const DB_C_GuildBtl_Record& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const { _cached_size_ = size; }
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional int32 seasons = 1;
  inline bool has_seasons() const;
  inline void clear_seasons();
  static const int kSeasonsFieldNumber = 1;
  inline ::google::protobuf::int32 seasons() const;
  inline void set_seasons(::google::protobuf::int32 value);
  
  // repeated .DB_C_GuildBtl_Top_Guild guildData = 2;
  inline int guilddata_size() const;
  inline void clear_guilddata();
  static const int kGuildDataFieldNumber = 2;
  inline const ::google::protobuf::RepeatedPtrField< ::DB_C_GuildBtl_Top_Guild >& guilddata() const;
  inline ::google::protobuf::RepeatedPtrField< ::DB_C_GuildBtl_Top_Guild >* mutable_guilddata();
  inline const ::DB_C_GuildBtl_Top_Guild& guilddata(int index) const;
  inline ::DB_C_GuildBtl_Top_Guild* mutable_guilddata(int index);
  inline ::DB_C_GuildBtl_Top_Guild* add_guilddata();
  
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::google::protobuf::int32 seasons_;
  ::google::protobuf::RepeatedPtrField< ::DB_C_GuildBtl_Top_Guild > guilddata_;
  friend void  protobuf_AddDesc_countryDB_2eproto();
  friend void protobuf_AssignDesc_countryDB_2eproto();
  friend void protobuf_ShutdownFile_countryDB_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static DB_C_GuildBtl_Record* default_instance_;
};
// -------------------------------------------------------------------

class DB_C_Country : public ::google::protobuf::Message {
 public:
  DB_C_Country();
  virtual ~DB_C_Country();
  
  DB_C_Country(const DB_C_Country& from);
  
  inline DB_C_Country& operator=(const DB_C_Country& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const DB_C_Country& default_instance();
  void Swap(DB_C_Country* other);
  
  // implements Message ----------------------------------------------
  
  DB_C_Country* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DB_C_Country& from);
  void MergeFrom(const DB_C_Country& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const { _cached_size_ = size; }
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required int32 region = 1;
  inline bool has_region() const;
  inline void clear_region();
  static const int kRegionFieldNumber = 1;
  inline ::google::protobuf::int32 region() const;
  inline void set_region(::google::protobuf::int32 value);
  
  // required int32 countryID = 2;
  inline bool has_countryid() const;
  inline void clear_countryid();
  static const int kCountryIDFieldNumber = 2;
  inline ::google::protobuf::int32 countryid() const;
  inline void set_countryid(::google::protobuf::int32 value);
  
  // optional int32 userCnt = 3 [default = 0];
  inline bool has_usercnt() const;
  inline void clear_usercnt();
  static const int kUserCntFieldNumber = 3;
  inline ::google::protobuf::int32 usercnt() const;
  inline void set_usercnt(::google::protobuf::int32 value);
  
  // optional int64 ltSaveRevision = 4 [default = 0];
  inline bool has_ltsaverevision() const;
  inline void clear_ltsaverevision();
  static const int kLtSaveRevisionFieldNumber = 4;
  inline ::google::protobuf::int64 ltsaverevision() const;
  inline void set_ltsaverevision(::google::protobuf::int64 value);
  
  // optional .DB_C_CountryRank lastRank = 5;
  inline bool has_lastrank() const;
  inline void clear_lastrank();
  static const int kLastRankFieldNumber = 5;
  inline const ::DB_C_CountryRank& lastrank() const;
  inline ::DB_C_CountryRank* mutable_lastrank();
  
  // repeated .DB_C_BtlRecord btlRecord = 6;
  inline int btlrecord_size() const;
  inline void clear_btlrecord();
  static const int kBtlRecordFieldNumber = 6;
  inline const ::google::protobuf::RepeatedPtrField< ::DB_C_BtlRecord >& btlrecord() const;
  inline ::google::protobuf::RepeatedPtrField< ::DB_C_BtlRecord >* mutable_btlrecord();
  inline const ::DB_C_BtlRecord& btlrecord(int index) const;
  inline ::DB_C_BtlRecord* mutable_btlrecord(int index);
  inline ::DB_C_BtlRecord* add_btlrecord();
  
  // optional int32 atkTargetCity = 7;
  inline bool has_atktargetcity() const;
  inline void clear_atktargetcity();
  static const int kAtkTargetCityFieldNumber = 7;
  inline ::google::protobuf::int32 atktargetcity() const;
  inline void set_atktargetcity(::google::protobuf::int32 value);
  
  // optional int32 defTargetCity = 8;
  inline bool has_deftargetcity() const;
  inline void clear_deftargetcity();
  static const int kDefTargetCityFieldNumber = 8;
  inline ::google::protobuf::int32 deftargetcity() const;
  inline void set_deftargetcity(::google::protobuf::int32 value);
  
  // optional .DB_Arena_Rank arenaRank = 9;
  inline bool has_arenarank() const;
  inline void clear_arenarank();
  static const int kArenaRankFieldNumber = 9;
  inline const ::DB_Arena_Rank& arenarank() const;
  inline ::DB_Arena_Rank* mutable_arenarank();
  
  // optional uint32 nActivityIndex = 10 [default = 0];
  inline bool has_nactivityindex() const;
  inline void clear_nactivityindex();
  static const int kNActivityIndexFieldNumber = 10;
  inline ::google::protobuf::uint32 nactivityindex() const;
  inline void set_nactivityindex(::google::protobuf::uint32 value);
  
  // optional .DB_WorldArena_Rank worldArenaRank = 11;
  inline bool has_worldarenarank() const;
  inline void clear_worldarenarank();
  static const int kWorldArenaRankFieldNumber = 11;
  inline const ::DB_WorldArena_Rank& worldarenarank() const;
  inline ::DB_WorldArena_Rank* mutable_worldarenarank();
  
  // optional .DB_C_OfficerInfo officerInfo = 12;
  inline bool has_officerinfo() const;
  inline void clear_officerinfo();
  static const int kOfficerInfoFieldNumber = 12;
  inline const ::DB_C_OfficerInfo& officerinfo() const;
  inline ::DB_C_OfficerInfo* mutable_officerinfo();
  
  // optional .DB_C_PubGuildBtlInfo pubGuildBtlInfo = 13;
  inline bool has_pubguildbtlinfo() const;
  inline void clear_pubguildbtlinfo();
  static const int kPubGuildBtlInfoFieldNumber = 13;
  inline const ::DB_C_PubGuildBtlInfo& pubguildbtlinfo() const;
  inline ::DB_C_PubGuildBtlInfo* mutable_pubguildbtlinfo();
  
  // repeated .DB_C_GuildBtl_Record gBtlRecord = 14;
  inline int gbtlrecord_size() const;
  inline void clear_gbtlrecord();
  static const int kGBtlRecordFieldNumber = 14;
  inline const ::google::protobuf::RepeatedPtrField< ::DB_C_GuildBtl_Record >& gbtlrecord() const;
  inline ::google::protobuf::RepeatedPtrField< ::DB_C_GuildBtl_Record >* mutable_gbtlrecord();
  inline const ::DB_C_GuildBtl_Record& gbtlrecord(int index) const;
  inline ::DB_C_GuildBtl_Record* mutable_gbtlrecord(int index);
  inline ::DB_C_GuildBtl_Record* add_gbtlrecord();
  
  // optional int32 dataResetFlag = 15 [default = 0];
  inline bool has_dataresetflag() const;
  inline void clear_dataresetflag();
  static const int kDataResetFlagFieldNumber = 15;
  inline ::google::protobuf::int32 dataresetflag() const;
  inline void set_dataresetflag(::google::protobuf::int32 value);
  
  // repeated .DB_GVE_FirstDown gveFirstDownList = 16;
  inline int gvefirstdownlist_size() const;
  inline void clear_gvefirstdownlist();
  static const int kGveFirstDownListFieldNumber = 16;
  inline const ::google::protobuf::RepeatedPtrField< ::DB_GVE_FirstDown >& gvefirstdownlist() const;
  inline ::google::protobuf::RepeatedPtrField< ::DB_GVE_FirstDown >* mutable_gvefirstdownlist();
  inline const ::DB_GVE_FirstDown& gvefirstdownlist(int index) const;
  inline ::DB_GVE_FirstDown* mutable_gvefirstdownlist(int index);
  inline ::DB_GVE_FirstDown* add_gvefirstdownlist();
  
  // optional int32 gveFlag = 17;
  inline bool has_gveflag() const;
  inline void clear_gveflag();
  static const int kGveFlagFieldNumber = 17;
  inline ::google::protobuf::int32 gveflag() const;
  inline void set_gveflag(::google::protobuf::int32 value);
  
  // optional .DB_HeroArena_Rank heroArenaRank = 18;
  inline bool has_heroarenarank() const;
  inline void clear_heroarenarank();
  static const int kHeroArenaRankFieldNumber = 18;
  inline const ::DB_HeroArena_Rank& heroarenarank() const;
  inline ::DB_HeroArena_Rank* mutable_heroarenarank();
  
  // optional .DB_C_PubGvgBtlInfo pubGvgBtlInfo = 19;
  inline bool has_pubgvgbtlinfo() const;
  inline void clear_pubgvgbtlinfo();
  static const int kPubGvgBtlInfoFieldNumber = 19;
  inline const ::DB_C_PubGvgBtlInfo& pubgvgbtlinfo() const;
  inline ::DB_C_PubGvgBtlInfo* mutable_pubgvgbtlinfo();
  
  // optional .DB_C_WpcRank wpcrank = 20;
  inline bool has_wpcrank() const;
  inline void clear_wpcrank();
  static const int kWpcrankFieldNumber = 20;
  inline const ::DB_C_WpcRank& wpcrank() const;
  inline ::DB_C_WpcRank* mutable_wpcrank();
  
  // optional .DB_C_CountryLeagueBattle lastLeagueBattle = 21;
  inline bool has_lastleaguebattle() const;
  inline void clear_lastleaguebattle();
  static const int kLastLeagueBattleFieldNumber = 21;
  inline const ::DB_C_CountryLeagueBattle& lastleaguebattle() const;
  inline ::DB_C_CountryLeagueBattle* mutable_lastleaguebattle();
  
  // repeated .DB_C_CountryLeagueMsg leagueAllMsg = 22;
  inline int leagueallmsg_size() const;
  inline void clear_leagueallmsg();
  static const int kLeagueAllMsgFieldNumber = 22;
  inline const ::google::protobuf::RepeatedPtrField< ::DB_C_CountryLeagueMsg >& leagueallmsg() const;
  inline ::google::protobuf::RepeatedPtrField< ::DB_C_CountryLeagueMsg >* mutable_leagueallmsg();
  inline const ::DB_C_CountryLeagueMsg& leagueallmsg(int index) const;
  inline ::DB_C_CountryLeagueMsg* mutable_leagueallmsg(int index);
  inline ::DB_C_CountryLeagueMsg* add_leagueallmsg();
  
  // optional .DB_C_ChatMsg chatmsg = 23;
  inline bool has_chatmsg() const;
  inline void clear_chatmsg();
  static const int kChatmsgFieldNumber = 23;
  inline const ::DB_C_ChatMsg& chatmsg() const;
  inline ::DB_C_ChatMsg* mutable_chatmsg();
  
  // repeated int32 npcactivecnt = 24;
  inline int npcactivecnt_size() const;
  inline void clear_npcactivecnt();
  static const int kNpcactivecntFieldNumber = 24;
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >& npcactivecnt() const
      ;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >* mutable_npcactivecnt();
  inline ::google::protobuf::int32 npcactivecnt(int index) const;
  inline void set_npcactivecnt(int index, ::google::protobuf::int32 value);
  inline void add_npcactivecnt(::google::protobuf::int32 value);
  
  // optional .DB_C_NpcActiveRank npcactiverank = 25;
  inline bool has_npcactiverank() const;
  inline void clear_npcactiverank();
  static const int kNpcactiverankFieldNumber = 25;
  inline const ::DB_C_NpcActiveRank& npcactiverank() const;
  inline ::DB_C_NpcActiveRank* mutable_npcactiverank();
  
  // optional .DB_C_CityBuffData CityBuffData = 26;
  inline bool has_citybuffdata() const;
  inline void clear_citybuffdata();
  static const int kCityBuffDataFieldNumber = 26;
  inline const ::DB_C_CityBuffData& citybuffdata() const;
  inline ::DB_C_CityBuffData* mutable_citybuffdata();
  
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::google::protobuf::int32 region_;
  ::google::protobuf::int32 countryid_;
  ::google::protobuf::int32 usercnt_;
  ::google::protobuf::int64 ltsaverevision_;
  ::DB_C_CountryRank* lastrank_;
  ::google::protobuf::RepeatedPtrField< ::DB_C_BtlRecord > btlrecord_;
  ::google::protobuf::int32 atktargetcity_;
  ::google::protobuf::int32 deftargetcity_;
  ::DB_Arena_Rank* arenarank_;
  ::google::protobuf::uint32 nactivityindex_;
  ::DB_WorldArena_Rank* worldarenarank_;
  ::DB_C_OfficerInfo* officerinfo_;
  ::DB_C_PubGuildBtlInfo* pubguildbtlinfo_;
  ::google::protobuf::RepeatedPtrField< ::DB_C_GuildBtl_Record > gbtlrecord_;
  ::google::protobuf::int32 dataresetflag_;
  ::google::protobuf::RepeatedPtrField< ::DB_GVE_FirstDown > gvefirstdownlist_;
  ::google::protobuf::int32 gveflag_;
  ::DB_HeroArena_Rank* heroarenarank_;
  ::DB_C_PubGvgBtlInfo* pubgvgbtlinfo_;
  ::DB_C_WpcRank* wpcrank_;
  ::DB_C_CountryLeagueBattle* lastleaguebattle_;
  ::google::protobuf::RepeatedPtrField< ::DB_C_CountryLeagueMsg > leagueallmsg_;
  ::DB_C_ChatMsg* chatmsg_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > npcactivecnt_;
  ::DB_C_NpcActiveRank* npcactiverank_;
  ::DB_C_CityBuffData* citybuffdata_;
  friend void  protobuf_AddDesc_countryDB_2eproto();
  friend void protobuf_AssignDesc_countryDB_2eproto();
  friend void protobuf_ShutdownFile_countryDB_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(26 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static DB_C_Country* default_instance_;
};
// -------------------------------------------------------------------

class DB_C_GuildBld : public ::google::protobuf::Message {
 public:
  DB_C_GuildBld();
  virtual ~DB_C_GuildBld();
  
  DB_C_GuildBld(const DB_C_GuildBld& from);
  
  inline DB_C_GuildBld& operator=(const DB_C_GuildBld& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const DB_C_GuildBld& default_instance();
  void Swap(DB_C_GuildBld* other);
  
  // implements Message ----------------------------------------------
  
  DB_C_GuildBld* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DB_C_GuildBld& from);
  void MergeFrom(const DB_C_GuildBld& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const { _cached_size_ = size; }
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional int32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);
  
  // optional int32 level = 2;
  inline bool has_level() const;
  inline void clear_level();
  static const int kLevelFieldNumber = 2;
  inline ::google::protobuf::int32 level() const;
  inline void set_level(::google::protobuf::int32 value);
  
  // optional int32 exp = 3;
  inline bool has_exp() const;
  inline void clear_exp();
  static const int kExpFieldNumber = 3;
  inline ::google::protobuf::int32 exp() const;
  inline void set_exp(::google::protobuf::int32 value);
  
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::google::protobuf::int32 id_;
  ::google::protobuf::int32 level_;
  ::google::protobuf::int32 exp_;
  friend void  protobuf_AddDesc_countryDB_2eproto();
  friend void protobuf_AssignDesc_countryDB_2eproto();
  friend void protobuf_ShutdownFile_countryDB_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static DB_C_GuildBld* default_instance_;
};
// -------------------------------------------------------------------

class DB_C_GuildLog : public ::google::protobuf::Message {
 public:
  DB_C_GuildLog();
  virtual ~DB_C_GuildLog();
  
  DB_C_GuildLog(const DB_C_GuildLog& from);
  
  inline DB_C_GuildLog& operator=(const DB_C_GuildLog& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const DB_C_GuildLog& default_instance();
  void Swap(DB_C_GuildLog* other);
  
  // implements Message ----------------------------------------------
  
  DB_C_GuildLog* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DB_C_GuildLog& from);
  void MergeFrom(const DB_C_GuildLog& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const { _cached_size_ = size; }
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional int32 time = 1;
  inline bool has_time() const;
  inline void clear_time();
  static const int kTimeFieldNumber = 1;
  inline ::google::protobuf::int32 time() const;
  inline void set_time(::google::protobuf::int32 value);
  
  // optional string userID = 2;
  inline bool has_userid() const;
  inline void clear_userid();
  static const int kUserIDFieldNumber = 2;
  inline const ::std::string& userid() const;
  inline void set_userid(const ::std::string& value);
  inline void set_userid(const char* value);
  inline void set_userid(const char* value, size_t size);
  inline ::std::string* mutable_userid();
  
  // optional string userName = 3;
  inline bool has_username() const;
  inline void clear_username();
  static const int kUserNameFieldNumber = 3;
  inline const ::std::string& username() const;
  inline void set_username(const ::std::string& value);
  inline void set_username(const char* value);
  inline void set_username(const char* value, size_t size);
  inline ::std::string* mutable_username();
  
  // optional int32 logType = 4;
  inline bool has_logtype() const;
  inline void clear_logtype();
  static const int kLogTypeFieldNumber = 4;
  inline ::google::protobuf::int32 logtype() const;
  inline void set_logtype(::google::protobuf::int32 value);
  
  // optional int32 userPos = 5;
  inline bool has_userpos() const;
  inline void clear_userpos();
  static const int kUserPosFieldNumber = 5;
  inline ::google::protobuf::int32 userpos() const;
  inline void set_userpos(::google::protobuf::int32 value);
  
  // optional int32 bldID = 6;
  inline bool has_bldid() const;
  inline void clear_bldid();
  static const int kBldIDFieldNumber = 6;
  inline ::google::protobuf::int32 bldid() const;
  inline void set_bldid(::google::protobuf::int32 value);
  
  // optional int32 bldLV = 7;
  inline bool has_bldlv() const;
  inline void clear_bldlv();
  static const int kBldLVFieldNumber = 7;
  inline ::google::protobuf::int32 bldlv() const;
  inline void set_bldlv(::google::protobuf::int32 value);
  
  // optional int32 payType = 8;
  inline bool has_paytype() const;
  inline void clear_paytype();
  static const int kPayTypeFieldNumber = 8;
  inline ::google::protobuf::int32 paytype() const;
  inline void set_paytype(::google::protobuf::int32 value);
  
  // optional int32 gScore = 9;
  inline bool has_gscore() const;
  inline void clear_gscore();
  static const int kGScoreFieldNumber = 9;
  inline ::google::protobuf::int32 gscore() const;
  inline void set_gscore(::google::protobuf::int32 value);
  
  // optional int32 itemID = 10;
  inline bool has_itemid() const;
  inline void clear_itemid();
  static const int kItemIDFieldNumber = 10;
  inline ::google::protobuf::int32 itemid() const;
  inline void set_itemid(::google::protobuf::int32 value);
  
  // optional int32 itemCnt = 11;
  inline bool has_itemcnt() const;
  inline void clear_itemcnt();
  static const int kItemCntFieldNumber = 11;
  inline ::google::protobuf::int32 itemcnt() const;
  inline void set_itemcnt(::google::protobuf::int32 value);
  
  // optional int32 bldValue = 12;
  inline bool has_bldvalue() const;
  inline void clear_bldvalue();
  static const int kBldValueFieldNumber = 12;
  inline ::google::protobuf::int32 bldvalue() const;
  inline void set_bldvalue(::google::protobuf::int32 value);
  
  // optional int32 pkRank = 13;
  inline bool has_pkrank() const;
  inline void clear_pkrank();
  static const int kPkRankFieldNumber = 13;
  inline ::google::protobuf::int32 pkrank() const;
  inline void set_pkrank(::google::protobuf::int32 value);
  
  // optional int32 pkRank1 = 14;
  inline bool has_pkrank1() const;
  inline void clear_pkrank1();
  static const int kPkRank1FieldNumber = 14;
  inline ::google::protobuf::int32 pkrank1() const;
  inline void set_pkrank1(::google::protobuf::int32 value);
  
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::google::protobuf::int32 time_;
  ::std::string* userid_;
  static const ::std::string _default_userid_;
  ::std::string* username_;
  static const ::std::string _default_username_;
  ::google::protobuf::int32 logtype_;
  ::google::protobuf::int32 userpos_;
  ::google::protobuf::int32 bldid_;
  ::google::protobuf::int32 bldlv_;
  ::google::protobuf::int32 paytype_;
  ::google::protobuf::int32 gscore_;
  ::google::protobuf::int32 itemid_;
  ::google::protobuf::int32 itemcnt_;
  ::google::protobuf::int32 bldvalue_;
  ::google::protobuf::int32 pkrank_;
  ::google::protobuf::int32 pkrank1_;
  friend void  protobuf_AddDesc_countryDB_2eproto();
  friend void protobuf_AssignDesc_countryDB_2eproto();
  friend void protobuf_ShutdownFile_countryDB_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(14 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static DB_C_GuildLog* default_instance_;
};
// -------------------------------------------------------------------

class DB_C_GuildBuyRecord : public ::google::protobuf::Message {
 public:
  DB_C_GuildBuyRecord();
  virtual ~DB_C_GuildBuyRecord();
  
  DB_C_GuildBuyRecord(const DB_C_GuildBuyRecord& from);
  
  inline DB_C_GuildBuyRecord& operator=(const DB_C_GuildBuyRecord& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const DB_C_GuildBuyRecord& default_instance();
  void Swap(DB_C_GuildBuyRecord* other);
  
  // implements Message ----------------------------------------------
  
  DB_C_GuildBuyRecord* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DB_C_GuildBuyRecord& from);
  void MergeFrom(const DB_C_GuildBuyRecord& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const { _cached_size_ = size; }
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional int32 dayBuyShopID = 1;
  inline bool has_daybuyshopid() const;
  inline void clear_daybuyshopid();
  static const int kDayBuyShopIDFieldNumber = 1;
  inline ::google::protobuf::int32 daybuyshopid() const;
  inline void set_daybuyshopid(::google::protobuf::int32 value);
  
  // optional int32 dayBuyShopCnt = 2;
  inline bool has_daybuyshopcnt() const;
  inline void clear_daybuyshopcnt();
  static const int kDayBuyShopCntFieldNumber = 2;
  inline ::google::protobuf::int32 daybuyshopcnt() const;
  inline void set_daybuyshopcnt(::google::protobuf::int32 value);
  
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::google::protobuf::int32 daybuyshopid_;
  ::google::protobuf::int32 daybuyshopcnt_;
  friend void  protobuf_AddDesc_countryDB_2eproto();
  friend void protobuf_AssignDesc_countryDB_2eproto();
  friend void protobuf_ShutdownFile_countryDB_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static DB_C_GuildBuyRecord* default_instance_;
};
// -------------------------------------------------------------------

class DB_C_GuildShopPmt : public ::google::protobuf::Message {
 public:
  DB_C_GuildShopPmt();
  virtual ~DB_C_GuildShopPmt();
  
  DB_C_GuildShopPmt(const DB_C_GuildShopPmt& from);
  
  inline DB_C_GuildShopPmt& operator=(const DB_C_GuildShopPmt& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const DB_C_GuildShopPmt& default_instance();
  void Swap(DB_C_GuildShopPmt* other);
  
  // implements Message ----------------------------------------------
  
  DB_C_GuildShopPmt* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DB_C_GuildShopPmt& from);
  void MergeFrom(const DB_C_GuildShopPmt& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const { _cached_size_ = size; }
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional int32 shopID = 1;
  inline bool has_shopid() const;
  inline void clear_shopid();
  static const int kShopIDFieldNumber = 1;
  inline ::google::protobuf::int32 shopid() const;
  inline void set_shopid(::google::protobuf::int32 value);
  
  // optional int32 position = 2;
  inline bool has_position() const;
  inline void clear_position();
  static const int kPositionFieldNumber = 2;
  inline ::google::protobuf::int32 position() const;
  inline void set_position(::google::protobuf::int32 value);
  
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::google::protobuf::int32 shopid_;
  ::google::protobuf::int32 position_;
  friend void  protobuf_AddDesc_countryDB_2eproto();
  friend void protobuf_AssignDesc_countryDB_2eproto();
  friend void protobuf_ShutdownFile_countryDB_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static DB_C_GuildShopPmt* default_instance_;
};
// -------------------------------------------------------------------

class DB_C_GuildShop : public ::google::protobuf::Message {
 public:
  DB_C_GuildShop();
  virtual ~DB_C_GuildShop();
  
  DB_C_GuildShop(const DB_C_GuildShop& from);
  
  inline DB_C_GuildShop& operator=(const DB_C_GuildShop& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const DB_C_GuildShop& default_instance();
  void Swap(DB_C_GuildShop* other);
  
  // implements Message ----------------------------------------------
  
  DB_C_GuildShop* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DB_C_GuildShop& from);
  void MergeFrom(const DB_C_GuildShop& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const { _cached_size_ = size; }
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional int32 mysticShopUpdateTM = 1;
  inline bool has_mysticshopupdatetm() const;
  inline void clear_mysticshopupdatetm();
  static const int kMysticShopUpdateTMFieldNumber = 1;
  inline ::google::protobuf::int32 mysticshopupdatetm() const;
  inline void set_mysticshopupdatetm(::google::protobuf::int32 value);
  
  // repeated int32 mysticShopSaleID = 2;
  inline int mysticshopsaleid_size() const;
  inline void clear_mysticshopsaleid();
  static const int kMysticShopSaleIDFieldNumber = 2;
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >& mysticshopsaleid() const
      ;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >* mutable_mysticshopsaleid();
  inline ::google::protobuf::int32 mysticshopsaleid(int index) const;
  inline void set_mysticshopsaleid(int index, ::google::protobuf::int32 value);
  inline void add_mysticshopsaleid(::google::protobuf::int32 value);
  
  // optional int32 buyRecordDay = 3;
  inline bool has_buyrecordday() const;
  inline void clear_buyrecordday();
  static const int kBuyRecordDayFieldNumber = 3;
  inline ::google::protobuf::int32 buyrecordday() const;
  inline void set_buyrecordday(::google::protobuf::int32 value);
  
  // repeated .DB_C_GuildBuyRecord buyRecord = 4;
  inline int buyrecord_size() const;
  inline void clear_buyrecord();
  static const int kBuyRecordFieldNumber = 4;
  inline const ::google::protobuf::RepeatedPtrField< ::DB_C_GuildBuyRecord >& buyrecord() const;
  inline ::google::protobuf::RepeatedPtrField< ::DB_C_GuildBuyRecord >* mutable_buyrecord();
  inline const ::DB_C_GuildBuyRecord& buyrecord(int index) const;
  inline ::DB_C_GuildBuyRecord* mutable_buyrecord(int index);
  inline ::DB_C_GuildBuyRecord* add_buyrecord();
  
  // repeated .DB_C_GuildShopPmt shopPmt = 5;
  inline int shoppmt_size() const;
  inline void clear_shoppmt();
  static const int kShopPmtFieldNumber = 5;
  inline const ::google::protobuf::RepeatedPtrField< ::DB_C_GuildShopPmt >& shoppmt() const;
  inline ::google::protobuf::RepeatedPtrField< ::DB_C_GuildShopPmt >* mutable_shoppmt();
  inline const ::DB_C_GuildShopPmt& shoppmt(int index) const;
  inline ::DB_C_GuildShopPmt* mutable_shoppmt(int index);
  inline ::DB_C_GuildShopPmt* add_shoppmt();
  
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::google::protobuf::int32 mysticshopupdatetm_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > mysticshopsaleid_;
  ::google::protobuf::int32 buyrecordday_;
  ::google::protobuf::RepeatedPtrField< ::DB_C_GuildBuyRecord > buyrecord_;
  ::google::protobuf::RepeatedPtrField< ::DB_C_GuildShopPmt > shoppmt_;
  friend void  protobuf_AddDesc_countryDB_2eproto();
  friend void protobuf_AssignDesc_countryDB_2eproto();
  friend void protobuf_ShutdownFile_countryDB_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static DB_C_GuildShop* default_instance_;
};
// -------------------------------------------------------------------

class DB_C_GuildBtlAddProp : public ::google::protobuf::Message {
 public:
  DB_C_GuildBtlAddProp();
  virtual ~DB_C_GuildBtlAddProp();
  
  DB_C_GuildBtlAddProp(const DB_C_GuildBtlAddProp& from);
  
  inline DB_C_GuildBtlAddProp& operator=(const DB_C_GuildBtlAddProp& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const DB_C_GuildBtlAddProp& default_instance();
  void Swap(DB_C_GuildBtlAddProp* other);
  
  // implements Message ----------------------------------------------
  
  DB_C_GuildBtlAddProp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DB_C_GuildBtlAddProp& from);
  void MergeFrom(const DB_C_GuildBtlAddProp& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const { _cached_size_ = size; }
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional int64 userID = 1;
  inline bool has_userid() const;
  inline void clear_userid();
  static const int kUserIDFieldNumber = 1;
  inline ::google::protobuf::int64 userid() const;
  inline void set_userid(::google::protobuf::int64 value);
  
  // optional int32 addAtkPct = 2;
  inline bool has_addatkpct() const;
  inline void clear_addatkpct();
  static const int kAddAtkPctFieldNumber = 2;
  inline ::google::protobuf::int32 addatkpct() const;
  inline void set_addatkpct(::google::protobuf::int32 value);
  
  // optional int32 addBloodPct = 3;
  inline bool has_addbloodpct() const;
  inline void clear_addbloodpct();
  static const int kAddBloodPctFieldNumber = 3;
  inline ::google::protobuf::int32 addbloodpct() const;
  inline void set_addbloodpct(::google::protobuf::int32 value);
  
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::google::protobuf::int64 userid_;
  ::google::protobuf::int32 addatkpct_;
  ::google::protobuf::int32 addbloodpct_;
  friend void  protobuf_AddDesc_countryDB_2eproto();
  friend void protobuf_AssignDesc_countryDB_2eproto();
  friend void protobuf_ShutdownFile_countryDB_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static DB_C_GuildBtlAddProp* default_instance_;
};
// -------------------------------------------------------------------

class DB_C_GuildBtlReward_Turns : public ::google::protobuf::Message {
 public:
  DB_C_GuildBtlReward_Turns();
  virtual ~DB_C_GuildBtlReward_Turns();
  
  DB_C_GuildBtlReward_Turns(const DB_C_GuildBtlReward_Turns& from);
  
  inline DB_C_GuildBtlReward_Turns& operator=(const DB_C_GuildBtlReward_Turns& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const DB_C_GuildBtlReward_Turns& default_instance();
  void Swap(DB_C_GuildBtlReward_Turns* other);
  
  // implements Message ----------------------------------------------
  
  DB_C_GuildBtlReward_Turns* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DB_C_GuildBtlReward_Turns& from);
  void MergeFrom(const DB_C_GuildBtlReward_Turns& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const { _cached_size_ = size; }
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional int32 result = 1;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  inline ::google::protobuf::int32 result() const;
  inline void set_result(::google::protobuf::int32 value);
  
  // optional int32 winWay0 = 2;
  inline bool has_winway0() const;
  inline void clear_winway0();
  static const int kWinWay0FieldNumber = 2;
  inline ::google::protobuf::int32 winway0() const;
  inline void set_winway0(::google::protobuf::int32 value);
  
  // optional int32 winWay1 = 3;
  inline bool has_winway1() const;
  inline void clear_winway1();
  static const int kWinWay1FieldNumber = 3;
  inline ::google::protobuf::int32 winway1() const;
  inline void set_winway1(::google::protobuf::int32 value);
  
  // optional int32 winWay2 = 4;
  inline bool has_winway2() const;
  inline void clear_winway2();
  static const int kWinWay2FieldNumber = 4;
  inline ::google::protobuf::int32 winway2() const;
  inline void set_winway2(::google::protobuf::int32 value);
  
  // optional int32 score = 5;
  inline bool has_score() const;
  inline void clear_score();
  static const int kScoreFieldNumber = 5;
  inline ::google::protobuf::int32 score() const;
  inline void set_score(::google::protobuf::int32 value);
  
  // optional int32 guildID = 6;
  inline bool has_guildid() const;
  inline void clear_guildid();
  static const int kGuildIDFieldNumber = 6;
  inline ::google::protobuf::int32 guildid() const;
  inline void set_guildid(::google::protobuf::int32 value);
  
  // optional int32 guildLV = 7;
  inline bool has_guildlv() const;
  inline void clear_guildlv();
  static const int kGuildLVFieldNumber = 7;
  inline ::google::protobuf::int32 guildlv() const;
  inline void set_guildlv(::google::protobuf::int32 value);
  
  // optional string guildName = 8;
  inline bool has_guildname() const;
  inline void clear_guildname();
  static const int kGuildNameFieldNumber = 8;
  inline const ::std::string& guildname() const;
  inline void set_guildname(const ::std::string& value);
  inline void set_guildname(const char* value);
  inline void set_guildname(const char* value, size_t size);
  inline ::std::string* mutable_guildname();
  
  // optional int32 guildEnemyID = 9;
  inline bool has_guildenemyid() const;
  inline void clear_guildenemyid();
  static const int kGuildEnemyIDFieldNumber = 9;
  inline ::google::protobuf::int32 guildenemyid() const;
  inline void set_guildenemyid(::google::protobuf::int32 value);
  
  // optional int32 guildEnemyLV = 10;
  inline bool has_guildenemylv() const;
  inline void clear_guildenemylv();
  static const int kGuildEnemyLVFieldNumber = 10;
  inline ::google::protobuf::int32 guildenemylv() const;
  inline void set_guildenemylv(::google::protobuf::int32 value);
  
  // optional string guildEnemyName = 11;
  inline bool has_guildenemyname() const;
  inline void clear_guildenemyname();
  static const int kGuildEnemyNameFieldNumber = 11;
  inline const ::std::string& guildenemyname() const;
  inline void set_guildenemyname(const ::std::string& value);
  inline void set_guildenemyname(const char* value);
  inline void set_guildenemyname(const char* value, size_t size);
  inline ::std::string* mutable_guildenemyname();
  
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::google::protobuf::int32 result_;
  ::google::protobuf::int32 winway0_;
  ::google::protobuf::int32 winway1_;
  ::google::protobuf::int32 winway2_;
  ::google::protobuf::int32 score_;
  ::google::protobuf::int32 guildid_;
  ::google::protobuf::int32 guildlv_;
  ::std::string* guildname_;
  static const ::std::string _default_guildname_;
  ::google::protobuf::int32 guildenemyid_;
  ::google::protobuf::int32 guildenemylv_;
  ::std::string* guildenemyname_;
  static const ::std::string _default_guildenemyname_;
  friend void  protobuf_AddDesc_countryDB_2eproto();
  friend void protobuf_AssignDesc_countryDB_2eproto();
  friend void protobuf_ShutdownFile_countryDB_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(11 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static DB_C_GuildBtlReward_Turns* default_instance_;
};
// -------------------------------------------------------------------

class DB_C_GuildBtlReward : public ::google::protobuf::Message {
 public:
  DB_C_GuildBtlReward();
  virtual ~DB_C_GuildBtlReward();
  
  DB_C_GuildBtlReward(const DB_C_GuildBtlReward& from);
  
  inline DB_C_GuildBtlReward& operator=(const DB_C_GuildBtlReward& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const DB_C_GuildBtlReward& default_instance();
  void Swap(DB_C_GuildBtlReward* other);
  
  // implements Message ----------------------------------------------
  
  DB_C_GuildBtlReward* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DB_C_GuildBtlReward& from);
  void MergeFrom(const DB_C_GuildBtlReward& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const { _cached_size_ = size; }
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional int32 btlDay = 1;
  inline bool has_btlday() const;
  inline void clear_btlday();
  static const int kBtlDayFieldNumber = 1;
  inline ::google::protobuf::int32 btlday() const;
  inline void set_btlday(::google::protobuf::int32 value);
  
  // repeated .DB_C_GuildBtlReward_Turns turns = 2;
  inline int turns_size() const;
  inline void clear_turns();
  static const int kTurnsFieldNumber = 2;
  inline const ::google::protobuf::RepeatedPtrField< ::DB_C_GuildBtlReward_Turns >& turns() const;
  inline ::google::protobuf::RepeatedPtrField< ::DB_C_GuildBtlReward_Turns >* mutable_turns();
  inline const ::DB_C_GuildBtlReward_Turns& turns(int index) const;
  inline ::DB_C_GuildBtlReward_Turns* mutable_turns(int index);
  inline ::DB_C_GuildBtlReward_Turns* add_turns();
  
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::google::protobuf::int32 btlday_;
  ::google::protobuf::RepeatedPtrField< ::DB_C_GuildBtlReward_Turns > turns_;
  friend void  protobuf_AddDesc_countryDB_2eproto();
  friend void protobuf_AssignDesc_countryDB_2eproto();
  friend void protobuf_ShutdownFile_countryDB_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static DB_C_GuildBtlReward* default_instance_;
};
// -------------------------------------------------------------------

class DB_C_GuildBtlResult : public ::google::protobuf::Message {
 public:
  DB_C_GuildBtlResult();
  virtual ~DB_C_GuildBtlResult();
  
  DB_C_GuildBtlResult(const DB_C_GuildBtlResult& from);
  
  inline DB_C_GuildBtlResult& operator=(const DB_C_GuildBtlResult& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const DB_C_GuildBtlResult& default_instance();
  void Swap(DB_C_GuildBtlResult* other);
  
  // implements Message ----------------------------------------------
  
  DB_C_GuildBtlResult* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DB_C_GuildBtlResult& from);
  void MergeFrom(const DB_C_GuildBtlResult& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const { _cached_size_ = size; }
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional int32 result = 2;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 2;
  inline ::google::protobuf::int32 result() const;
  inline void set_result(::google::protobuf::int32 value);
  
  // optional int32 winWay0 = 3;
  inline bool has_winway0() const;
  inline void clear_winway0();
  static const int kWinWay0FieldNumber = 3;
  inline ::google::protobuf::int32 winway0() const;
  inline void set_winway0(::google::protobuf::int32 value);
  
  // optional int32 winWay1 = 4;
  inline bool has_winway1() const;
  inline void clear_winway1();
  static const int kWinWay1FieldNumber = 4;
  inline ::google::protobuf::int32 winway1() const;
  inline void set_winway1(::google::protobuf::int32 value);
  
  // optional int32 winWay2 = 5;
  inline bool has_winway2() const;
  inline void clear_winway2();
  static const int kWinWay2FieldNumber = 5;
  inline ::google::protobuf::int32 winway2() const;
  inline void set_winway2(::google::protobuf::int32 value);
  
  // optional int32 score = 6;
  inline bool has_score() const;
  inline void clear_score();
  static const int kScoreFieldNumber = 6;
  inline ::google::protobuf::int32 score() const;
  inline void set_score(::google::protobuf::int32 value);
  
  // optional int32 pkGuild = 7;
  inline bool has_pkguild() const;
  inline void clear_pkguild();
  static const int kPkGuildFieldNumber = 7;
  inline ::google::protobuf::int32 pkguild() const;
  inline void set_pkguild(::google::protobuf::int32 value);
  
  // optional bool addFlag = 8;
  inline bool has_addflag() const;
  inline void clear_addflag();
  static const int kAddFlagFieldNumber = 8;
  inline bool addflag() const;
  inline void set_addflag(bool value);
  
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::google::protobuf::int32 result_;
  ::google::protobuf::int32 winway0_;
  ::google::protobuf::int32 winway1_;
  ::google::protobuf::int32 winway2_;
  ::google::protobuf::int32 score_;
  ::google::protobuf::int32 pkguild_;
  bool addflag_;
  friend void  protobuf_AddDesc_countryDB_2eproto();
  friend void protobuf_AssignDesc_countryDB_2eproto();
  friend void protobuf_ShutdownFile_countryDB_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(7 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static DB_C_GuildBtlResult* default_instance_;
};
// -------------------------------------------------------------------

class DB_C_GuildStorage : public ::google::protobuf::Message {
 public:
  DB_C_GuildStorage();
  virtual ~DB_C_GuildStorage();
  
  DB_C_GuildStorage(const DB_C_GuildStorage& from);
  
  inline DB_C_GuildStorage& operator=(const DB_C_GuildStorage& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const DB_C_GuildStorage& default_instance();
  void Swap(DB_C_GuildStorage* other);
  
  // implements Message ----------------------------------------------
  
  DB_C_GuildStorage* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DB_C_GuildStorage& from);
  void MergeFrom(const DB_C_GuildStorage& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const { _cached_size_ = size; }
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional int32 itemID = 1;
  inline bool has_itemid() const;
  inline void clear_itemid();
  static const int kItemIDFieldNumber = 1;
  inline ::google::protobuf::int32 itemid() const;
  inline void set_itemid(::google::protobuf::int32 value);
  
  // optional int32 itemCnt = 2;
  inline bool has_itemcnt() const;
  inline void clear_itemcnt();
  static const int kItemCntFieldNumber = 2;
  inline ::google::protobuf::int32 itemcnt() const;
  inline void set_itemcnt(::google::protobuf::int32 value);
  
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::google::protobuf::int32 itemid_;
  ::google::protobuf::int32 itemcnt_;
  friend void  protobuf_AddDesc_countryDB_2eproto();
  friend void protobuf_AssignDesc_countryDB_2eproto();
  friend void protobuf_ShutdownFile_countryDB_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static DB_C_GuildStorage* default_instance_;
};
// -------------------------------------------------------------------

class DB_C_GuildBtl : public ::google::protobuf::Message {
 public:
  DB_C_GuildBtl();
  virtual ~DB_C_GuildBtl();
  
  DB_C_GuildBtl(const DB_C_GuildBtl& from);
  
  inline DB_C_GuildBtl& operator=(const DB_C_GuildBtl& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const DB_C_GuildBtl& default_instance();
  void Swap(DB_C_GuildBtl* other);
  
  // implements Message ----------------------------------------------
  
  DB_C_GuildBtl* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DB_C_GuildBtl& from);
  void MergeFrom(const DB_C_GuildBtl& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const { _cached_size_ = size; }
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional int32 btlDay = 1;
  inline bool has_btlday() const;
  inline void clear_btlday();
  static const int kBtlDayFieldNumber = 1;
  inline ::google::protobuf::int32 btlday() const;
  inline void set_btlday(::google::protobuf::int32 value);
  
  // repeated int64 userWay0 = 2;
  inline int userway0_size() const;
  inline void clear_userway0();
  static const int kUserWay0FieldNumber = 2;
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >& userway0() const
      ;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >* mutable_userway0();
  inline ::google::protobuf::int64 userway0(int index) const;
  inline void set_userway0(int index, ::google::protobuf::int64 value);
  inline void add_userway0(::google::protobuf::int64 value);
  
  // repeated int64 userWay1 = 3;
  inline int userway1_size() const;
  inline void clear_userway1();
  static const int kUserWay1FieldNumber = 3;
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >& userway1() const
      ;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >* mutable_userway1();
  inline ::google::protobuf::int64 userway1(int index) const;
  inline void set_userway1(int index, ::google::protobuf::int64 value);
  inline void add_userway1(::google::protobuf::int64 value);
  
  // repeated int64 userWay2 = 4;
  inline int userway2_size() const;
  inline void clear_userway2();
  static const int kUserWay2FieldNumber = 4;
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >& userway2() const
      ;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >* mutable_userway2();
  inline ::google::protobuf::int64 userway2(int index) const;
  inline void set_userway2(int index, ::google::protobuf::int64 value);
  inline void add_userway2(::google::protobuf::int64 value);
  
  // optional int32 signupCnt = 5;
  inline bool has_signupcnt() const;
  inline void clear_signupcnt();
  static const int kSignupCntFieldNumber = 5;
  inline ::google::protobuf::int32 signupcnt() const;
  inline void set_signupcnt(::google::protobuf::int32 value);
  
  // repeated .DB_C_GuildBtlAddProp addProp = 6;
  inline int addprop_size() const;
  inline void clear_addprop();
  static const int kAddPropFieldNumber = 6;
  inline const ::google::protobuf::RepeatedPtrField< ::DB_C_GuildBtlAddProp >& addprop() const;
  inline ::google::protobuf::RepeatedPtrField< ::DB_C_GuildBtlAddProp >* mutable_addprop();
  inline const ::DB_C_GuildBtlAddProp& addprop(int index) const;
  inline ::DB_C_GuildBtlAddProp* mutable_addprop(int index);
  inline ::DB_C_GuildBtlAddProp* add_addprop();
  
  // repeated .DB_C_GuildBtlResult result = 7;
  inline int result_size() const;
  inline void clear_result();
  static const int kResultFieldNumber = 7;
  inline const ::google::protobuf::RepeatedPtrField< ::DB_C_GuildBtlResult >& result() const;
  inline ::google::protobuf::RepeatedPtrField< ::DB_C_GuildBtlResult >* mutable_result();
  inline const ::DB_C_GuildBtlResult& result(int index) const;
  inline ::DB_C_GuildBtlResult* mutable_result(int index);
  inline ::DB_C_GuildBtlResult* add_result();
  
  // optional .DB_C_GuildBtlReward reward = 8;
  inline bool has_reward() const;
  inline void clear_reward();
  static const int kRewardFieldNumber = 8;
  inline const ::DB_C_GuildBtlReward& reward() const;
  inline ::DB_C_GuildBtlReward* mutable_reward();
  
  // optional int32 totalScore = 9;
  inline bool has_totalscore() const;
  inline void clear_totalscore();
  static const int kTotalScoreFieldNumber = 9;
  inline ::google::protobuf::int32 totalscore() const;
  inline void set_totalscore(::google::protobuf::int32 value);
  
  // optional int32 lastBtlSession = 10;
  inline bool has_lastbtlsession() const;
  inline void clear_lastbtlsession();
  static const int kLastBtlSessionFieldNumber = 10;
  inline ::google::protobuf::int32 lastbtlsession() const;
  inline void set_lastbtlsession(::google::protobuf::int32 value);
  
  // optional int32 lastBtlRank = 11;
  inline bool has_lastbtlrank() const;
  inline void clear_lastbtlrank();
  static const int kLastBtlRankFieldNumber = 11;
  inline ::google::protobuf::int32 lastbtlrank() const;
  inline void set_lastbtlrank(::google::protobuf::int32 value);
  
  // optional int32 btlCnt = 12;
  inline bool has_btlcnt() const;
  inline void clear_btlcnt();
  static const int kBtlCntFieldNumber = 12;
  inline ::google::protobuf::int32 btlcnt() const;
  inline void set_btlcnt(::google::protobuf::int32 value);
  
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::google::protobuf::int32 btlday_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int64 > userway0_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int64 > userway1_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int64 > userway2_;
  ::google::protobuf::int32 signupcnt_;
  ::google::protobuf::RepeatedPtrField< ::DB_C_GuildBtlAddProp > addprop_;
  ::google::protobuf::RepeatedPtrField< ::DB_C_GuildBtlResult > result_;
  ::DB_C_GuildBtlReward* reward_;
  ::google::protobuf::int32 totalscore_;
  ::google::protobuf::int32 lastbtlsession_;
  ::google::protobuf::int32 lastbtlrank_;
  ::google::protobuf::int32 btlcnt_;
  friend void  protobuf_AddDesc_countryDB_2eproto();
  friend void protobuf_AssignDesc_countryDB_2eproto();
  friend void protobuf_ShutdownFile_countryDB_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(12 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static DB_C_GuildBtl* default_instance_;
};
// -------------------------------------------------------------------

class DB_C_Guild : public ::google::protobuf::Message {
 public:
  DB_C_Guild();
  virtual ~DB_C_Guild();
  
  DB_C_Guild(const DB_C_Guild& from);
  
  inline DB_C_Guild& operator=(const DB_C_Guild& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const DB_C_Guild& default_instance();
  void Swap(DB_C_Guild* other);
  
  // implements Message ----------------------------------------------
  
  DB_C_Guild* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DB_C_Guild& from);
  void MergeFrom(const DB_C_Guild& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const { _cached_size_ = size; }
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required int32 guildID = 1;
  inline bool has_guildid() const;
  inline void clear_guildid();
  static const int kGuildIDFieldNumber = 1;
  inline ::google::protobuf::int32 guildid() const;
  inline void set_guildid(::google::protobuf::int32 value);
  
  // required int32 countryID = 2;
  inline bool has_countryid() const;
  inline void clear_countryid();
  static const int kCountryIDFieldNumber = 2;
  inline ::google::protobuf::int32 countryid() const;
  inline void set_countryid(::google::protobuf::int32 value);
  
  // optional int32 guildLV = 3;
  inline bool has_guildlv() const;
  inline void clear_guildlv();
  static const int kGuildLVFieldNumber = 3;
  inline ::google::protobuf::int32 guildlv() const;
  inline void set_guildlv(::google::protobuf::int32 value);
  
  // optional string guildName = 4;
  inline bool has_guildname() const;
  inline void clear_guildname();
  static const int kGuildNameFieldNumber = 4;
  inline const ::std::string& guildname() const;
  inline void set_guildname(const ::std::string& value);
  inline void set_guildname(const char* value);
  inline void set_guildname(const char* value, size_t size);
  inline ::std::string* mutable_guildname();
  
  // optional string guildSlogan = 5;
  inline bool has_guildslogan() const;
  inline void clear_guildslogan();
  static const int kGuildSloganFieldNumber = 5;
  inline const ::std::string& guildslogan() const;
  inline void set_guildslogan(const ::std::string& value);
  inline void set_guildslogan(const char* value);
  inline void set_guildslogan(const char* value, size_t size);
  inline ::std::string* mutable_guildslogan();
  
  // optional string guildBulletin = 6;
  inline bool has_guildbulletin() const;
  inline void clear_guildbulletin();
  static const int kGuildBulletinFieldNumber = 6;
  inline const ::std::string& guildbulletin() const;
  inline void set_guildbulletin(const ::std::string& value);
  inline void set_guildbulletin(const char* value);
  inline void set_guildbulletin(const char* value, size_t size);
  inline ::std::string* mutable_guildbulletin();
  
  // optional int32 bldValue = 7;
  inline bool has_bldvalue() const;
  inline void clear_bldvalue();
  static const int kBldValueFieldNumber = 7;
  inline ::google::protobuf::int32 bldvalue() const;
  inline void set_bldvalue(::google::protobuf::int32 value);
  
  // optional int32 guildUesrCnt = 8;
  inline bool has_guilduesrcnt() const;
  inline void clear_guilduesrcnt();
  static const int kGuildUesrCntFieldNumber = 8;
  inline ::google::protobuf::int32 guilduesrcnt() const;
  inline void set_guilduesrcnt(::google::protobuf::int32 value);
  
  // optional int64 leaderID = 9;
  inline bool has_leaderid() const;
  inline void clear_leaderid();
  static const int kLeaderIDFieldNumber = 9;
  inline ::google::protobuf::int64 leaderid() const;
  inline void set_leaderid(::google::protobuf::int64 value);
  
  // optional string leaderName = 10;
  inline bool has_leadername() const;
  inline void clear_leadername();
  static const int kLeaderNameFieldNumber = 10;
  inline const ::std::string& leadername() const;
  inline void set_leadername(const ::std::string& value);
  inline void set_leadername(const char* value);
  inline void set_leadername(const char* value, size_t size);
  inline ::std::string* mutable_leadername();
  
  // optional int32 delateTM = 11;
  inline bool has_delatetm() const;
  inline void clear_delatetm();
  static const int kDelateTMFieldNumber = 11;
  inline ::google::protobuf::int32 delatetm() const;
  inline void set_delatetm(::google::protobuf::int32 value);
  
  // optional int32 leaderLastTM = 12;
  inline bool has_leaderlasttm() const;
  inline void clear_leaderlasttm();
  static const int kLeaderLastTMFieldNumber = 12;
  inline ::google::protobuf::int32 leaderlasttm() const;
  inline void set_leaderlasttm(::google::protobuf::int32 value);
  
  // repeated int64 applyUserID = 13;
  inline int applyuserid_size() const;
  inline void clear_applyuserid();
  static const int kApplyUserIDFieldNumber = 13;
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >& applyuserid() const
      ;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >* mutable_applyuserid();
  inline ::google::protobuf::int64 applyuserid(int index) const;
  inline void set_applyuserid(int index, ::google::protobuf::int64 value);
  inline void add_applyuserid(::google::protobuf::int64 value);
  
  // repeated .DB_C_GuildBld build = 14;
  inline int build_size() const;
  inline void clear_build();
  static const int kBuildFieldNumber = 14;
  inline const ::google::protobuf::RepeatedPtrField< ::DB_C_GuildBld >& build() const;
  inline ::google::protobuf::RepeatedPtrField< ::DB_C_GuildBld >* mutable_build();
  inline const ::DB_C_GuildBld& build(int index) const;
  inline ::DB_C_GuildBld* mutable_build(int index);
  inline ::DB_C_GuildBld* add_build();
  
  // repeated .DB_C_GuildLog log = 15;
  inline int log_size() const;
  inline void clear_log();
  static const int kLogFieldNumber = 15;
  inline const ::google::protobuf::RepeatedPtrField< ::DB_C_GuildLog >& log() const;
  inline ::google::protobuf::RepeatedPtrField< ::DB_C_GuildLog >* mutable_log();
  inline const ::DB_C_GuildLog& log(int index) const;
  inline ::DB_C_GuildLog* mutable_log(int index);
  inline ::DB_C_GuildLog* add_log();
  
  // optional .DB_C_GuildShop guildShop = 16;
  inline bool has_guildshop() const;
  inline void clear_guildshop();
  static const int kGuildShopFieldNumber = 16;
  inline const ::DB_C_GuildShop& guildshop() const;
  inline ::DB_C_GuildShop* mutable_guildshop();
  
  // optional int32 totalBldValue = 17;
  inline bool has_totalbldvalue() const;
  inline void clear_totalbldvalue();
  static const int kTotalBldValueFieldNumber = 17;
  inline ::google::protobuf::int32 totalbldvalue() const;
  inline void set_totalbldvalue(::google::protobuf::int32 value);
  
  // repeated .DB_C_GuildLog coinLog = 18;
  inline int coinlog_size() const;
  inline void clear_coinlog();
  static const int kCoinLogFieldNumber = 18;
  inline const ::google::protobuf::RepeatedPtrField< ::DB_C_GuildLog >& coinlog() const;
  inline ::google::protobuf::RepeatedPtrField< ::DB_C_GuildLog >* mutable_coinlog();
  inline const ::DB_C_GuildLog& coinlog(int index) const;
  inline ::DB_C_GuildLog* mutable_coinlog(int index);
  inline ::DB_C_GuildLog* add_coinlog();
  
  // optional int32 lastchgtime = 19;
  inline bool has_lastchgtime() const;
  inline void clear_lastchgtime();
  static const int kLastchgtimeFieldNumber = 19;
  inline ::google::protobuf::int32 lastchgtime() const;
  inline void set_lastchgtime(::google::protobuf::int32 value);
  
  // optional int32 dayKickUserCnt = 20;
  inline bool has_daykickusercnt() const;
  inline void clear_daykickusercnt();
  static const int kDayKickUserCntFieldNumber = 20;
  inline ::google::protobuf::int32 daykickusercnt() const;
  inline void set_daykickusercnt(::google::protobuf::int32 value);
  
  // optional int32 dayEnterCnt = 21;
  inline bool has_dayentercnt() const;
  inline void clear_dayentercnt();
  static const int kDayEnterCntFieldNumber = 21;
  inline ::google::protobuf::int32 dayentercnt() const;
  inline void set_dayentercnt(::google::protobuf::int32 value);
  
  // optional .DB_C_GuildBtl btlInfo = 22;
  inline bool has_btlinfo() const;
  inline void clear_btlinfo();
  static const int kBtlInfoFieldNumber = 22;
  inline const ::DB_C_GuildBtl& btlinfo() const;
  inline ::DB_C_GuildBtl* mutable_btlinfo();
  
  // repeated .DB_C_GuildStorage storage = 23;
  inline int storage_size() const;
  inline void clear_storage();
  static const int kStorageFieldNumber = 23;
  inline const ::google::protobuf::RepeatedPtrField< ::DB_C_GuildStorage >& storage() const;
  inline ::google::protobuf::RepeatedPtrField< ::DB_C_GuildStorage >* mutable_storage();
  inline const ::DB_C_GuildStorage& storage(int index) const;
  inline ::DB_C_GuildStorage* mutable_storage(int index);
  inline ::DB_C_GuildStorage* add_storage();
  
  // repeated .DB_C_GuildLog rewardLog = 24;
  inline int rewardlog_size() const;
  inline void clear_rewardlog();
  static const int kRewardLogFieldNumber = 24;
  inline const ::google::protobuf::RepeatedPtrField< ::DB_C_GuildLog >& rewardlog() const;
  inline ::google::protobuf::RepeatedPtrField< ::DB_C_GuildLog >* mutable_rewardlog();
  inline const ::DB_C_GuildLog& rewardlog(int index) const;
  inline ::DB_C_GuildLog* mutable_rewardlog(int index);
  inline ::DB_C_GuildLog* add_rewardlog();
  
  // optional .DB_GVE_City gveMsg = 25;
  inline bool has_gvemsg() const;
  inline void clear_gvemsg();
  static const int kGveMsgFieldNumber = 25;
  inline const ::DB_GVE_City& gvemsg() const;
  inline ::DB_GVE_City* mutable_gvemsg();
  
  // optional .DB_C_GVG_Msg gvgMsg = 26;
  inline bool has_gvgmsg() const;
  inline void clear_gvgmsg();
  static const int kGvgMsgFieldNumber = 26;
  inline const ::DB_C_GVG_Msg& gvgmsg() const;
  inline ::DB_C_GVG_Msg* mutable_gvgmsg();
  
  // optional int64 delateID = 27;
  inline bool has_delateid() const;
  inline void clear_delateid();
  static const int kDelateIDFieldNumber = 27;
  inline ::google::protobuf::int64 delateid() const;
  inline void set_delateid(::google::protobuf::int64 value);
  
  // optional int32 leagueActiveID = 28 [default = 0];
  inline bool has_leagueactiveid() const;
  inline void clear_leagueactiveid();
  static const int kLeagueActiveIDFieldNumber = 28;
  inline ::google::protobuf::int32 leagueactiveid() const;
  inline void set_leagueactiveid(::google::protobuf::int32 value);
  
  // optional int32 leaguePoint = 29 [default = 0];
  inline bool has_leaguepoint() const;
  inline void clear_leaguepoint();
  static const int kLeaguePointFieldNumber = 29;
  inline ::google::protobuf::int32 leaguepoint() const;
  inline void set_leaguepoint(::google::protobuf::int32 value);
  
  // repeated int64 leagueList = 30;
  inline int leaguelist_size() const;
  inline void clear_leaguelist();
  static const int kLeagueListFieldNumber = 30;
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >& leaguelist() const
      ;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >* mutable_leaguelist();
  inline ::google::protobuf::int64 leaguelist(int index) const;
  inline void set_leaguelist(int index, ::google::protobuf::int64 value);
  inline void add_leaguelist(::google::protobuf::int64 value);
  
  // optional int64 leagueLeaderUID = 31;
  inline bool has_leagueleaderuid() const;
  inline void clear_leagueleaderuid();
  static const int kLeagueLeaderUIDFieldNumber = 31;
  inline ::google::protobuf::int64 leagueleaderuid() const;
  inline void set_leagueleaderuid(::google::protobuf::int64 value);
  
  // optional int32 chgLeaderTM = 32;
  inline bool has_chgleadertm() const;
  inline void clear_chgleadertm();
  static const int kChgLeaderTMFieldNumber = 32;
  inline ::google::protobuf::int32 chgleadertm() const;
  inline void set_chgleadertm(::google::protobuf::int32 value);
  
  // optional .DB_C_GuildRedEnvelope redEnvelopeInfo = 33;
  inline bool has_redenvelopeinfo() const;
  inline void clear_redenvelopeinfo();
  static const int kRedEnvelopeInfoFieldNumber = 33;
  inline const ::DB_C_GuildRedEnvelope& redenvelopeinfo() const;
  inline ::DB_C_GuildRedEnvelope* mutable_redenvelopeinfo();
  
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::google::protobuf::int32 guildid_;
  ::google::protobuf::int32 countryid_;
  ::google::protobuf::int32 guildlv_;
  ::std::string* guildname_;
  static const ::std::string _default_guildname_;
  ::std::string* guildslogan_;
  static const ::std::string _default_guildslogan_;
  ::std::string* guildbulletin_;
  static const ::std::string _default_guildbulletin_;
  ::google::protobuf::int32 bldvalue_;
  ::google::protobuf::int32 guilduesrcnt_;
  ::google::protobuf::int64 leaderid_;
  ::std::string* leadername_;
  static const ::std::string _default_leadername_;
  ::google::protobuf::int32 delatetm_;
  ::google::protobuf::int32 leaderlasttm_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int64 > applyuserid_;
  ::google::protobuf::RepeatedPtrField< ::DB_C_GuildBld > build_;
  ::google::protobuf::RepeatedPtrField< ::DB_C_GuildLog > log_;
  ::DB_C_GuildShop* guildshop_;
  ::google::protobuf::int32 totalbldvalue_;
  ::google::protobuf::RepeatedPtrField< ::DB_C_GuildLog > coinlog_;
  ::google::protobuf::int32 lastchgtime_;
  ::google::protobuf::int32 daykickusercnt_;
  ::google::protobuf::int32 dayentercnt_;
  ::DB_C_GuildBtl* btlinfo_;
  ::google::protobuf::RepeatedPtrField< ::DB_C_GuildStorage > storage_;
  ::google::protobuf::RepeatedPtrField< ::DB_C_GuildLog > rewardlog_;
  ::DB_GVE_City* gvemsg_;
  ::DB_C_GVG_Msg* gvgmsg_;
  ::google::protobuf::int64 delateid_;
  ::google::protobuf::int32 leagueactiveid_;
  ::google::protobuf::int32 leaguepoint_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int64 > leaguelist_;
  ::google::protobuf::int64 leagueleaderuid_;
  ::google::protobuf::int32 chgleadertm_;
  ::DB_C_GuildRedEnvelope* redenvelopeinfo_;
  friend void  protobuf_AddDesc_countryDB_2eproto();
  friend void protobuf_AssignDesc_countryDB_2eproto();
  friend void protobuf_ShutdownFile_countryDB_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(33 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static DB_C_Guild* default_instance_;
};
// -------------------------------------------------------------------

class DB_C_GuildList : public ::google::protobuf::Message {
 public:
  DB_C_GuildList();
  virtual ~DB_C_GuildList();
  
  DB_C_GuildList(const DB_C_GuildList& from);
  
  inline DB_C_GuildList& operator=(const DB_C_GuildList& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const DB_C_GuildList& default_instance();
  void Swap(DB_C_GuildList* other);
  
  // implements Message ----------------------------------------------
  
  DB_C_GuildList* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DB_C_GuildList& from);
  void MergeFrom(const DB_C_GuildList& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const { _cached_size_ = size; }
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required int32 key = 1;
  inline bool has_key() const;
  inline void clear_key();
  static const int kKeyFieldNumber = 1;
  inline ::google::protobuf::int32 key() const;
  inline void set_key(::google::protobuf::int32 value);
  
  // required int32 region = 2;
  inline bool has_region() const;
  inline void clear_region();
  static const int kRegionFieldNumber = 2;
  inline ::google::protobuf::int32 region() const;
  inline void set_region(::google::protobuf::int32 value);
  
  // required int32 index = 3;
  inline bool has_index() const;
  inline void clear_index();
  static const int kIndexFieldNumber = 3;
  inline ::google::protobuf::int32 index() const;
  inline void set_index(::google::protobuf::int32 value);
  
  // optional int64 ltSaveRevision = 4 [default = 0];
  inline bool has_ltsaverevision() const;
  inline void clear_ltsaverevision();
  static const int kLtSaveRevisionFieldNumber = 4;
  inline ::google::protobuf::int64 ltsaverevision() const;
  inline void set_ltsaverevision(::google::protobuf::int64 value);
  
  // repeated .DB_C_Guild guild = 5;
  inline int guild_size() const;
  inline void clear_guild();
  static const int kGuildFieldNumber = 5;
  inline const ::google::protobuf::RepeatedPtrField< ::DB_C_Guild >& guild() const;
  inline ::google::protobuf::RepeatedPtrField< ::DB_C_Guild >* mutable_guild();
  inline const ::DB_C_Guild& guild(int index) const;
  inline ::DB_C_Guild* mutable_guild(int index);
  inline ::DB_C_Guild* add_guild();
  
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::google::protobuf::int32 key_;
  ::google::protobuf::int32 region_;
  ::google::protobuf::int32 index_;
  ::google::protobuf::int64 ltsaverevision_;
  ::google::protobuf::RepeatedPtrField< ::DB_C_Guild > guild_;
  friend void  protobuf_AddDesc_countryDB_2eproto();
  friend void protobuf_AssignDesc_countryDB_2eproto();
  friend void protobuf_ShutdownFile_countryDB_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static DB_C_GuildList* default_instance_;
};
// -------------------------------------------------------------------

class DB_C_GuildBtlGeneral : public ::google::protobuf::Message {
 public:
  DB_C_GuildBtlGeneral();
  virtual ~DB_C_GuildBtlGeneral();
  
  DB_C_GuildBtlGeneral(const DB_C_GuildBtlGeneral& from);
  
  inline DB_C_GuildBtlGeneral& operator=(const DB_C_GuildBtlGeneral& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const DB_C_GuildBtlGeneral& default_instance();
  void Swap(DB_C_GuildBtlGeneral* other);
  
  // implements Message ----------------------------------------------
  
  DB_C_GuildBtlGeneral* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DB_C_GuildBtlGeneral& from);
  void MergeFrom(const DB_C_GuildBtlGeneral& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const { _cached_size_ = size; }
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional int32 nGeneralID = 1;
  inline bool has_ngeneralid() const;
  inline void clear_ngeneralid();
  static const int kNGeneralIDFieldNumber = 1;
  inline ::google::protobuf::int32 ngeneralid() const;
  inline void set_ngeneralid(::google::protobuf::int32 value);
  
  // optional int32 nGeneralLvl = 2;
  inline bool has_ngenerallvl() const;
  inline void clear_ngenerallvl();
  static const int kNGeneralLvlFieldNumber = 2;
  inline ::google::protobuf::int32 ngenerallvl() const;
  inline void set_ngenerallvl(::google::protobuf::int32 value);
  
  // optional int32 nGeneralTrainLvl = 3;
  inline bool has_ngeneraltrainlvl() const;
  inline void clear_ngeneraltrainlvl();
  static const int kNGeneralTrainLvlFieldNumber = 3;
  inline ::google::protobuf::int32 ngeneraltrainlvl() const;
  inline void set_ngeneraltrainlvl(::google::protobuf::int32 value);
  
  // optional int32 nGeneralAtk = 4;
  inline bool has_ngeneralatk() const;
  inline void clear_ngeneralatk();
  static const int kNGeneralAtkFieldNumber = 4;
  inline ::google::protobuf::int32 ngeneralatk() const;
  inline void set_ngeneralatk(::google::protobuf::int32 value);
  
  // optional int32 nGeneralDef = 5;
  inline bool has_ngeneraldef() const;
  inline void clear_ngeneraldef();
  static const int kNGeneralDefFieldNumber = 5;
  inline ::google::protobuf::int32 ngeneraldef() const;
  inline void set_ngeneraldef(::google::protobuf::int32 value);
  
  // optional int32 nGeneralHP = 6;
  inline bool has_ngeneralhp() const;
  inline void clear_ngeneralhp();
  static const int kNGeneralHPFieldNumber = 6;
  inline ::google::protobuf::int32 ngeneralhp() const;
  inline void set_ngeneralhp(::google::protobuf::int32 value);
  
  // optional int32 nGeneralCrt = 7;
  inline bool has_ngeneralcrt() const;
  inline void clear_ngeneralcrt();
  static const int kNGeneralCrtFieldNumber = 7;
  inline ::google::protobuf::int32 ngeneralcrt() const;
  inline void set_ngeneralcrt(::google::protobuf::int32 value);
  
  // optional int32 nGeneralScore = 8;
  inline bool has_ngeneralscore() const;
  inline void clear_ngeneralscore();
  static const int kNGeneralScoreFieldNumber = 8;
  inline ::google::protobuf::int32 ngeneralscore() const;
  inline void set_ngeneralscore(::google::protobuf::int32 value);
  
  // repeated .DB_C_PVEFightMH listGeneralMH = 9;
  inline int listgeneralmh_size() const;
  inline void clear_listgeneralmh();
  static const int kListGeneralMHFieldNumber = 9;
  inline const ::google::protobuf::RepeatedPtrField< ::DB_C_PVEFightMH >& listgeneralmh() const;
  inline ::google::protobuf::RepeatedPtrField< ::DB_C_PVEFightMH >* mutable_listgeneralmh();
  inline const ::DB_C_PVEFightMH& listgeneralmh(int index) const;
  inline ::DB_C_PVEFightMH* mutable_listgeneralmh(int index);
  inline ::DB_C_PVEFightMH* add_listgeneralmh();
  
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::google::protobuf::int32 ngeneralid_;
  ::google::protobuf::int32 ngenerallvl_;
  ::google::protobuf::int32 ngeneraltrainlvl_;
  ::google::protobuf::int32 ngeneralatk_;
  ::google::protobuf::int32 ngeneraldef_;
  ::google::protobuf::int32 ngeneralhp_;
  ::google::protobuf::int32 ngeneralcrt_;
  ::google::protobuf::int32 ngeneralscore_;
  ::google::protobuf::RepeatedPtrField< ::DB_C_PVEFightMH > listgeneralmh_;
  friend void  protobuf_AddDesc_countryDB_2eproto();
  friend void protobuf_AssignDesc_countryDB_2eproto();
  friend void protobuf_ShutdownFile_countryDB_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(9 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static DB_C_GuildBtlGeneral* default_instance_;
};
// -------------------------------------------------------------------

class DB_C_PVEFightMH : public ::google::protobuf::Message {
 public:
  DB_C_PVEFightMH();
  virtual ~DB_C_PVEFightMH();
  
  DB_C_PVEFightMH(const DB_C_PVEFightMH& from);
  
  inline DB_C_PVEFightMH& operator=(const DB_C_PVEFightMH& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const DB_C_PVEFightMH& default_instance();
  void Swap(DB_C_PVEFightMH* other);
  
  // implements Message ----------------------------------------------
  
  DB_C_PVEFightMH* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DB_C_PVEFightMH& from);
  void MergeFrom(const DB_C_PVEFightMH& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const { _cached_size_ = size; }
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional int32 nMHID = 1;
  inline bool has_nmhid() const;
  inline void clear_nmhid();
  static const int kNMHIDFieldNumber = 1;
  inline ::google::protobuf::int32 nmhid() const;
  inline void set_nmhid(::google::protobuf::int32 value);
  
  // optional int32 nMHLv = 2;
  inline bool has_nmhlv() const;
  inline void clear_nmhlv();
  static const int kNMHLvFieldNumber = 2;
  inline ::google::protobuf::int32 nmhlv() const;
  inline void set_nmhlv(::google::protobuf::int32 value);
  
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::google::protobuf::int32 nmhid_;
  ::google::protobuf::int32 nmhlv_;
  friend void  protobuf_AddDesc_countryDB_2eproto();
  friend void protobuf_AssignDesc_countryDB_2eproto();
  friend void protobuf_ShutdownFile_countryDB_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static DB_C_PVEFightMH* default_instance_;
};
// -------------------------------------------------------------------

class DB_C_GuildBtlUser : public ::google::protobuf::Message {
 public:
  DB_C_GuildBtlUser();
  virtual ~DB_C_GuildBtlUser();
  
  DB_C_GuildBtlUser(const DB_C_GuildBtlUser& from);
  
  inline DB_C_GuildBtlUser& operator=(const DB_C_GuildBtlUser& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const DB_C_GuildBtlUser& default_instance();
  void Swap(DB_C_GuildBtlUser* other);
  
  // implements Message ----------------------------------------------
  
  DB_C_GuildBtlUser* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DB_C_GuildBtlUser& from);
  void MergeFrom(const DB_C_GuildBtlUser& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const { _cached_size_ = size; }
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional string userID = 1;
  inline bool has_userid() const;
  inline void clear_userid();
  static const int kUserIDFieldNumber = 1;
  inline const ::std::string& userid() const;
  inline void set_userid(const ::std::string& value);
  inline void set_userid(const char* value);
  inline void set_userid(const char* value, size_t size);
  inline ::std::string* mutable_userid();
  
  // optional string name = 2;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 2;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  
  // optional string pic = 3;
  inline bool has_pic() const;
  inline void clear_pic();
  static const int kPicFieldNumber = 3;
  inline const ::std::string& pic() const;
  inline void set_pic(const ::std::string& value);
  inline void set_pic(const char* value);
  inline void set_pic(const char* value, size_t size);
  inline ::std::string* mutable_pic();
  
  // optional int32 level = 6 [default = 0];
  inline bool has_level() const;
  inline void clear_level();
  static const int kLevelFieldNumber = 6;
  inline ::google::protobuf::int32 level() const;
  inline void set_level(::google::protobuf::int32 value);
  
  // optional int32 combatValue = 7 [default = 0];
  inline bool has_combatvalue() const;
  inline void clear_combatvalue();
  static const int kCombatValueFieldNumber = 7;
  inline ::google::protobuf::int32 combatvalue() const;
  inline void set_combatvalue(::google::protobuf::int32 value);
  
  // optional int32 addHPPct = 8;
  inline bool has_addhppct() const;
  inline void clear_addhppct();
  static const int kAddHPPctFieldNumber = 8;
  inline ::google::protobuf::int32 addhppct() const;
  inline void set_addhppct(::google::protobuf::int32 value);
  
  // optional int32 addAtkPct = 9;
  inline bool has_addatkpct() const;
  inline void clear_addatkpct();
  static const int kAddAtkPctFieldNumber = 9;
  inline ::google::protobuf::int32 addatkpct() const;
  inline void set_addatkpct(::google::protobuf::int32 value);
  
  // optional int32 winTime = 10 [default = 0];
  inline bool has_wintime() const;
  inline void clear_wintime();
  static const int kWinTimeFieldNumber = 10;
  inline ::google::protobuf::int32 wintime() const;
  inline void set_wintime(::google::protobuf::int32 value);
  
  // optional int32 maxWinTime = 11 [default = 0];
  inline bool has_maxwintime() const;
  inline void clear_maxwintime();
  static const int kMaxWinTimeFieldNumber = 11;
  inline ::google::protobuf::int32 maxwintime() const;
  inline void set_maxwintime(::google::protobuf::int32 value);
  
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::std::string* userid_;
  static const ::std::string _default_userid_;
  ::std::string* name_;
  static const ::std::string _default_name_;
  ::std::string* pic_;
  static const ::std::string _default_pic_;
  ::google::protobuf::int32 level_;
  ::google::protobuf::int32 combatvalue_;
  ::google::protobuf::int32 addhppct_;
  ::google::protobuf::int32 addatkpct_;
  ::google::protobuf::int32 wintime_;
  ::google::protobuf::int32 maxwintime_;
  friend void  protobuf_AddDesc_countryDB_2eproto();
  friend void protobuf_AssignDesc_countryDB_2eproto();
  friend void protobuf_ShutdownFile_countryDB_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(9 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static DB_C_GuildBtlUser* default_instance_;
};
// -------------------------------------------------------------------

class DB_C_GuildBtlPosition : public ::google::protobuf::Message {
 public:
  DB_C_GuildBtlPosition();
  virtual ~DB_C_GuildBtlPosition();
  
  DB_C_GuildBtlPosition(const DB_C_GuildBtlPosition& from);
  
  inline DB_C_GuildBtlPosition& operator=(const DB_C_GuildBtlPosition& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const DB_C_GuildBtlPosition& default_instance();
  void Swap(DB_C_GuildBtlPosition* other);
  
  // implements Message ----------------------------------------------
  
  DB_C_GuildBtlPosition* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DB_C_GuildBtlPosition& from);
  void MergeFrom(const DB_C_GuildBtlPosition& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const { _cached_size_ = size; }
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional int32 nPosX = 1;
  inline bool has_nposx() const;
  inline void clear_nposx();
  static const int kNPosXFieldNumber = 1;
  inline ::google::protobuf::int32 nposx() const;
  inline void set_nposx(::google::protobuf::int32 value);
  
  // optional int32 nPosY = 2;
  inline bool has_nposy() const;
  inline void clear_nposy();
  static const int kNPosYFieldNumber = 2;
  inline ::google::protobuf::int32 nposy() const;
  inline void set_nposy(::google::protobuf::int32 value);
  
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::google::protobuf::int32 nposx_;
  ::google::protobuf::int32 nposy_;
  friend void  protobuf_AddDesc_countryDB_2eproto();
  friend void protobuf_AssignDesc_countryDB_2eproto();
  friend void protobuf_ShutdownFile_countryDB_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static DB_C_GuildBtlPosition* default_instance_;
};
// -------------------------------------------------------------------

class DB_C_GuildBtlFightUnit : public ::google::protobuf::Message {
 public:
  DB_C_GuildBtlFightUnit();
  virtual ~DB_C_GuildBtlFightUnit();
  
  DB_C_GuildBtlFightUnit(const DB_C_GuildBtlFightUnit& from);
  
  inline DB_C_GuildBtlFightUnit& operator=(const DB_C_GuildBtlFightUnit& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const DB_C_GuildBtlFightUnit& default_instance();
  void Swap(DB_C_GuildBtlFightUnit* other);
  
  // implements Message ----------------------------------------------
  
  DB_C_GuildBtlFightUnit* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DB_C_GuildBtlFightUnit& from);
  void MergeFrom(const DB_C_GuildBtlFightUnit& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const { _cached_size_ = size; }
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional int32 nID = 1;
  inline bool has_nid() const;
  inline void clear_nid();
  static const int kNIDFieldNumber = 1;
  inline ::google::protobuf::int32 nid() const;
  inline void set_nid(::google::protobuf::int32 value);
  
  // optional int32 nArmyType = 2;
  inline bool has_narmytype() const;
  inline void clear_narmytype();
  static const int kNArmyTypeFieldNumber = 2;
  inline ::google::protobuf::int32 narmytype() const;
  inline void set_narmytype(::google::protobuf::int32 value);
  
  // optional int32 nHP = 3;
  inline bool has_nhp() const;
  inline void clear_nhp();
  static const int kNHPFieldNumber = 3;
  inline ::google::protobuf::int32 nhp() const;
  inline void set_nhp(::google::protobuf::int32 value);
  
  // optional int32 nGrade = 4;
  inline bool has_ngrade() const;
  inline void clear_ngrade();
  static const int kNGradeFieldNumber = 4;
  inline ::google::protobuf::int32 ngrade() const;
  inline void set_ngrade(::google::protobuf::int32 value);
  
  // optional int32 nArmyGroup = 5;
  inline bool has_narmygroup() const;
  inline void clear_narmygroup();
  static const int kNArmyGroupFieldNumber = 5;
  inline ::google::protobuf::int32 narmygroup() const;
  inline void set_narmygroup(::google::protobuf::int32 value);
  
  // optional int32 nRestframe = 6;
  inline bool has_nrestframe() const;
  inline void clear_nrestframe();
  static const int kNRestframeFieldNumber = 6;
  inline ::google::protobuf::int32 nrestframe() const;
  inline void set_nrestframe(::google::protobuf::int32 value);
  
  // optional .DB_C_GuildBtlPosition Pos = 7;
  inline bool has_pos() const;
  inline void clear_pos();
  static const int kPosFieldNumber = 7;
  inline const ::DB_C_GuildBtlPosition& pos() const;
  inline ::DB_C_GuildBtlPosition* mutable_pos();
  
  // optional int32 nMaxHP = 8;
  inline bool has_nmaxhp() const;
  inline void clear_nmaxhp();
  static const int kNMaxHPFieldNumber = 8;
  inline ::google::protobuf::int32 nmaxhp() const;
  inline void set_nmaxhp(::google::protobuf::int32 value);
  
  // optional int32 nHeroGrade = 9;
  inline bool has_nherograde() const;
  inline void clear_nherograde();
  static const int kNHeroGradeFieldNumber = 9;
  inline ::google::protobuf::int32 nherograde() const;
  inline void set_nherograde(::google::protobuf::int32 value);
  
  // optional int32 nHeroLV = 10;
  inline bool has_nherolv() const;
  inline void clear_nherolv();
  static const int kNHeroLVFieldNumber = 10;
  inline ::google::protobuf::int32 nherolv() const;
  inline void set_nherolv(::google::protobuf::int32 value);
  
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::google::protobuf::int32 nid_;
  ::google::protobuf::int32 narmytype_;
  ::google::protobuf::int32 nhp_;
  ::google::protobuf::int32 ngrade_;
  ::google::protobuf::int32 narmygroup_;
  ::google::protobuf::int32 nrestframe_;
  ::DB_C_GuildBtlPosition* pos_;
  ::google::protobuf::int32 nmaxhp_;
  ::google::protobuf::int32 nherograde_;
  ::google::protobuf::int32 nherolv_;
  friend void  protobuf_AddDesc_countryDB_2eproto();
  friend void protobuf_AssignDesc_countryDB_2eproto();
  friend void protobuf_ShutdownFile_countryDB_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(10 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static DB_C_GuildBtlFightUnit* default_instance_;
};
// -------------------------------------------------------------------

class DB_C_GuildBtlArmyAtkProp : public ::google::protobuf::Message {
 public:
  DB_C_GuildBtlArmyAtkProp();
  virtual ~DB_C_GuildBtlArmyAtkProp();
  
  DB_C_GuildBtlArmyAtkProp(const DB_C_GuildBtlArmyAtkProp& from);
  
  inline DB_C_GuildBtlArmyAtkProp& operator=(const DB_C_GuildBtlArmyAtkProp& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const DB_C_GuildBtlArmyAtkProp& default_instance();
  void Swap(DB_C_GuildBtlArmyAtkProp* other);
  
  // implements Message ----------------------------------------------
  
  DB_C_GuildBtlArmyAtkProp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DB_C_GuildBtlArmyAtkProp& from);
  void MergeFrom(const DB_C_GuildBtlArmyAtkProp& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const { _cached_size_ = size; }
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional int32 nArmyType = 1;
  inline bool has_narmytype() const;
  inline void clear_narmytype();
  static const int kNArmyTypeFieldNumber = 1;
  inline ::google::protobuf::int32 narmytype() const;
  inline void set_narmytype(::google::protobuf::int32 value);
  
  // optional int32 nHP = 2;
  inline bool has_nhp() const;
  inline void clear_nhp();
  static const int kNHPFieldNumber = 2;
  inline ::google::protobuf::int32 nhp() const;
  inline void set_nhp(::google::protobuf::int32 value);
  
  // optional int32 nDamage = 3;
  inline bool has_ndamage() const;
  inline void clear_ndamage();
  static const int kNDamageFieldNumber = 3;
  inline ::google::protobuf::int32 ndamage() const;
  inline void set_ndamage(::google::protobuf::int32 value);
  
  // optional int32 nDamageBase = 4;
  inline bool has_ndamagebase() const;
  inline void clear_ndamagebase();
  static const int kNDamageBaseFieldNumber = 4;
  inline ::google::protobuf::int32 ndamagebase() const;
  inline void set_ndamagebase(::google::protobuf::int32 value);
  
  // optional int32 nDamagePec = 5;
  inline bool has_ndamagepec() const;
  inline void clear_ndamagepec();
  static const int kNDamagePecFieldNumber = 5;
  inline ::google::protobuf::int32 ndamagepec() const;
  inline void set_ndamagepec(::google::protobuf::int32 value);
  
  // optional int32 nRange = 6;
  inline bool has_nrange() const;
  inline void clear_nrange();
  static const int kNRangeFieldNumber = 6;
  inline ::google::protobuf::int32 nrange() const;
  inline void set_nrange(::google::protobuf::int32 value);
  
  // optional int32 nCrt = 7;
  inline bool has_ncrt() const;
  inline void clear_ncrt();
  static const int kNCrtFieldNumber = 7;
  inline ::google::protobuf::int32 ncrt() const;
  inline void set_ncrt(::google::protobuf::int32 value);
  
  // optional int32 nSpeed = 8;
  inline bool has_nspeed() const;
  inline void clear_nspeed();
  static const int kNSpeedFieldNumber = 8;
  inline ::google::protobuf::int32 nspeed() const;
  inline void set_nspeed(::google::protobuf::int32 value);
  
  // optional int32 nTurnSpeed = 9;
  inline bool has_nturnspeed() const;
  inline void clear_nturnspeed();
  static const int kNTurnSpeedFieldNumber = 9;
  inline ::google::protobuf::int32 nturnspeed() const;
  inline void set_nturnspeed(::google::protobuf::int32 value);
  
  // repeated int32 nRestraint = 10;
  inline int nrestraint_size() const;
  inline void clear_nrestraint();
  static const int kNRestraintFieldNumber = 10;
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >& nrestraint() const
      ;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >* mutable_nrestraint();
  inline ::google::protobuf::int32 nrestraint(int index) const;
  inline void set_nrestraint(int index, ::google::protobuf::int32 value);
  inline void add_nrestraint(::google::protobuf::int32 value);
  
  // optional int32 nCrtDamage = 11;
  inline bool has_ncrtdamage() const;
  inline void clear_ncrtdamage();
  static const int kNCrtDamageFieldNumber = 11;
  inline ::google::protobuf::int32 ncrtdamage() const;
  inline void set_ncrtdamage(::google::protobuf::int32 value);
  
  // optional int32 nCrtDef = 12;
  inline bool has_ncrtdef() const;
  inline void clear_ncrtdef();
  static const int kNCrtDefFieldNumber = 12;
  inline ::google::protobuf::int32 ncrtdef() const;
  inline void set_ncrtdef(::google::protobuf::int32 value);
  
  // optional int32 nDamageDef = 13;
  inline bool has_ndamagedef() const;
  inline void clear_ndamagedef();
  static const int kNDamageDefFieldNumber = 13;
  inline ::google::protobuf::int32 ndamagedef() const;
  inline void set_ndamagedef(::google::protobuf::int32 value);
  
  // optional int32 nTotalDamagePct = 14;
  inline bool has_ntotaldamagepct() const;
  inline void clear_ntotaldamagepct();
  static const int kNTotalDamagePctFieldNumber = 14;
  inline ::google::protobuf::int32 ntotaldamagepct() const;
  inline void set_ntotaldamagepct(::google::protobuf::int32 value);
  
  // optional int32 nBuffDamagePct = 15;
  inline bool has_nbuffdamagepct() const;
  inline void clear_nbuffdamagepct();
  static const int kNBuffDamagePctFieldNumber = 15;
  inline ::google::protobuf::int32 nbuffdamagepct() const;
  inline void set_nbuffdamagepct(::google::protobuf::int32 value);
  
  // optional int32 nRangeBase = 16;
  inline bool has_nrangebase() const;
  inline void clear_nrangebase();
  static const int kNRangeBaseFieldNumber = 16;
  inline ::google::protobuf::int32 nrangebase() const;
  inline void set_nrangebase(::google::protobuf::int32 value);
  
  // optional int32 nSpeedBase = 17;
  inline bool has_nspeedbase() const;
  inline void clear_nspeedbase();
  static const int kNSpeedBaseFieldNumber = 17;
  inline ::google::protobuf::int32 nspeedbase() const;
  inline void set_nspeedbase(::google::protobuf::int32 value);
  
  // repeated int32 nRestraintdef = 18;
  inline int nrestraintdef_size() const;
  inline void clear_nrestraintdef();
  static const int kNRestraintdefFieldNumber = 18;
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >& nrestraintdef() const
      ;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >* mutable_nrestraintdef();
  inline ::google::protobuf::int32 nrestraintdef(int index) const;
  inline void set_nrestraintdef(int index, ::google::protobuf::int32 value);
  inline void add_nrestraintdef(::google::protobuf::int32 value);
  
  // optional int32 nPropertyDamagePec = 19;
  inline bool has_npropertydamagepec() const;
  inline void clear_npropertydamagepec();
  static const int kNPropertyDamagePecFieldNumber = 19;
  inline ::google::protobuf::int32 npropertydamagepec() const;
  inline void set_npropertydamagepec(::google::protobuf::int32 value);
  
  // optional int32 nPropertyDamageDefPec = 20;
  inline bool has_npropertydamagedefpec() const;
  inline void clear_npropertydamagedefpec();
  static const int kNPropertyDamageDefPecFieldNumber = 20;
  inline ::google::protobuf::int32 npropertydamagedefpec() const;
  inline void set_npropertydamagedefpec(::google::protobuf::int32 value);
  
  // repeated int32 nDefAtkPec = 21;
  inline int ndefatkpec_size() const;
  inline void clear_ndefatkpec();
  static const int kNDefAtkPecFieldNumber = 21;
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >& ndefatkpec() const
      ;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >* mutable_ndefatkpec();
  inline ::google::protobuf::int32 ndefatkpec(int index) const;
  inline void set_ndefatkpec(int index, ::google::protobuf::int32 value);
  inline void add_ndefatkpec(::google::protobuf::int32 value);
  
  // repeated int32 nDefCritRate = 22;
  inline int ndefcritrate_size() const;
  inline void clear_ndefcritrate();
  static const int kNDefCritRateFieldNumber = 22;
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >& ndefcritrate() const
      ;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >* mutable_ndefcritrate();
  inline ::google::protobuf::int32 ndefcritrate(int index) const;
  inline void set_ndefcritrate(int index, ::google::protobuf::int32 value);
  inline void add_ndefcritrate(::google::protobuf::int32 value);
  
  // repeated int32 nDefCritRange = 23;
  inline int ndefcritrange_size() const;
  inline void clear_ndefcritrange();
  static const int kNDefCritRangeFieldNumber = 23;
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >& ndefcritrange() const
      ;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >* mutable_ndefcritrange();
  inline ::google::protobuf::int32 ndefcritrange(int index) const;
  inline void set_ndefcritrange(int index, ::google::protobuf::int32 value);
  inline void add_ndefcritrange(::google::protobuf::int32 value);
  
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::google::protobuf::int32 narmytype_;
  ::google::protobuf::int32 nhp_;
  ::google::protobuf::int32 ndamage_;
  ::google::protobuf::int32 ndamagebase_;
  ::google::protobuf::int32 ndamagepec_;
  ::google::protobuf::int32 nrange_;
  ::google::protobuf::int32 ncrt_;
  ::google::protobuf::int32 nspeed_;
  ::google::protobuf::int32 nturnspeed_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > nrestraint_;
  ::google::protobuf::int32 ncrtdamage_;
  ::google::protobuf::int32 ncrtdef_;
  ::google::protobuf::int32 ndamagedef_;
  ::google::protobuf::int32 ntotaldamagepct_;
  ::google::protobuf::int32 nbuffdamagepct_;
  ::google::protobuf::int32 nrangebase_;
  ::google::protobuf::int32 nspeedbase_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > nrestraintdef_;
  ::google::protobuf::int32 npropertydamagepec_;
  ::google::protobuf::int32 npropertydamagedefpec_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > ndefatkpec_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > ndefcritrate_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > ndefcritrange_;
  friend void  protobuf_AddDesc_countryDB_2eproto();
  friend void protobuf_AssignDesc_countryDB_2eproto();
  friend void protobuf_ShutdownFile_countryDB_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(23 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static DB_C_GuildBtlArmyAtkProp* default_instance_;
};
// -------------------------------------------------------------------

class DB_C_GuildBtlAdmiralAdd : public ::google::protobuf::Message {
 public:
  DB_C_GuildBtlAdmiralAdd();
  virtual ~DB_C_GuildBtlAdmiralAdd();
  
  DB_C_GuildBtlAdmiralAdd(const DB_C_GuildBtlAdmiralAdd& from);
  
  inline DB_C_GuildBtlAdmiralAdd& operator=(const DB_C_GuildBtlAdmiralAdd& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const DB_C_GuildBtlAdmiralAdd& default_instance();
  void Swap(DB_C_GuildBtlAdmiralAdd* other);
  
  // implements Message ----------------------------------------------
  
  DB_C_GuildBtlAdmiralAdd* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DB_C_GuildBtlAdmiralAdd& from);
  void MergeFrom(const DB_C_GuildBtlAdmiralAdd& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const { _cached_size_ = size; }
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // repeated int32 nAddPctFoot = 1;
  inline int naddpctfoot_size() const;
  inline void clear_naddpctfoot();
  static const int kNAddPctFootFieldNumber = 1;
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >& naddpctfoot() const
      ;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >* mutable_naddpctfoot();
  inline ::google::protobuf::int32 naddpctfoot(int index) const;
  inline void set_naddpctfoot(int index, ::google::protobuf::int32 value);
  inline void add_naddpctfoot(::google::protobuf::int32 value);
  
  // repeated int32 nAddPctTank = 2;
  inline int naddpcttank_size() const;
  inline void clear_naddpcttank();
  static const int kNAddPctTankFieldNumber = 2;
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >& naddpcttank() const
      ;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >* mutable_naddpcttank();
  inline ::google::protobuf::int32 naddpcttank(int index) const;
  inline void set_naddpcttank(int index, ::google::protobuf::int32 value);
  inline void add_naddpcttank(::google::protobuf::int32 value);
  
  // repeated int32 nAddPctPlane = 3;
  inline int naddpctplane_size() const;
  inline void clear_naddpctplane();
  static const int kNAddPctPlaneFieldNumber = 3;
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >& naddpctplane() const
      ;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >* mutable_naddpctplane();
  inline ::google::protobuf::int32 naddpctplane(int index) const;
  inline void set_naddpctplane(int index, ::google::protobuf::int32 value);
  inline void add_naddpctplane(::google::protobuf::int32 value);
  
  // repeated int32 nAddPctBuild = 4;
  inline int naddpctbuild_size() const;
  inline void clear_naddpctbuild();
  static const int kNAddPctBuildFieldNumber = 4;
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >& naddpctbuild() const
      ;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >* mutable_naddpctbuild();
  inline ::google::protobuf::int32 naddpctbuild(int index) const;
  inline void set_naddpctbuild(int index, ::google::protobuf::int32 value);
  inline void add_naddpctbuild(::google::protobuf::int32 value);
  
  // optional .DB_C_GuildBtlGeneral fightGeneral = 5;
  inline bool has_fightgeneral() const;
  inline void clear_fightgeneral();
  static const int kFightGeneralFieldNumber = 5;
  inline const ::DB_C_GuildBtlGeneral& fightgeneral() const;
  inline ::DB_C_GuildBtlGeneral* mutable_fightgeneral();
  
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > naddpctfoot_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > naddpcttank_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > naddpctplane_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > naddpctbuild_;
  ::DB_C_GuildBtlGeneral* fightgeneral_;
  friend void  protobuf_AddDesc_countryDB_2eproto();
  friend void protobuf_AssignDesc_countryDB_2eproto();
  friend void protobuf_ShutdownFile_countryDB_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static DB_C_GuildBtlAdmiralAdd* default_instance_;
};
// -------------------------------------------------------------------

class Pve_GuildBtlHeroSkill : public ::google::protobuf::Message {
 public:
  Pve_GuildBtlHeroSkill();
  virtual ~Pve_GuildBtlHeroSkill();
  
  Pve_GuildBtlHeroSkill(const Pve_GuildBtlHeroSkill& from);
  
  inline Pve_GuildBtlHeroSkill& operator=(const Pve_GuildBtlHeroSkill& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const Pve_GuildBtlHeroSkill& default_instance();
  void Swap(Pve_GuildBtlHeroSkill* other);
  
  // implements Message ----------------------------------------------
  
  Pve_GuildBtlHeroSkill* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Pve_GuildBtlHeroSkill& from);
  void MergeFrom(const Pve_GuildBtlHeroSkill& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const { _cached_size_ = size; }
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional int32 heroId = 1 [default = 0];
  inline bool has_heroid() const;
  inline void clear_heroid();
  static const int kHeroIdFieldNumber = 1;
  inline ::google::protobuf::int32 heroid() const;
  inline void set_heroid(::google::protobuf::int32 value);
  
  // optional int32 level = 2 [default = 0];
  inline bool has_level() const;
  inline void clear_level();
  static const int kLevelFieldNumber = 2;
  inline ::google::protobuf::int32 level() const;
  inline void set_level(::google::protobuf::int32 value);
  
  // optional int32 skillID1 = 3 [default = 0];
  inline bool has_skillid1() const;
  inline void clear_skillid1();
  static const int kSkillID1FieldNumber = 3;
  inline ::google::protobuf::int32 skillid1() const;
  inline void set_skillid1(::google::protobuf::int32 value);
  
  // optional int32 skill1Grade = 4 [default = 0];
  inline bool has_skill1grade() const;
  inline void clear_skill1grade();
  static const int kSkill1GradeFieldNumber = 4;
  inline ::google::protobuf::int32 skill1grade() const;
  inline void set_skill1grade(::google::protobuf::int32 value);
  
  // optional int32 skill1Quality = 5 [default = 0];
  inline bool has_skill1quality() const;
  inline void clear_skill1quality();
  static const int kSkill1QualityFieldNumber = 5;
  inline ::google::protobuf::int32 skill1quality() const;
  inline void set_skill1quality(::google::protobuf::int32 value);
  
  // optional int32 skillID2 = 6 [default = 0];
  inline bool has_skillid2() const;
  inline void clear_skillid2();
  static const int kSkillID2FieldNumber = 6;
  inline ::google::protobuf::int32 skillid2() const;
  inline void set_skillid2(::google::protobuf::int32 value);
  
  // optional int32 skill2Grade = 7 [default = 0];
  inline bool has_skill2grade() const;
  inline void clear_skill2grade();
  static const int kSkill2GradeFieldNumber = 7;
  inline ::google::protobuf::int32 skill2grade() const;
  inline void set_skill2grade(::google::protobuf::int32 value);
  
  // optional int32 skill2Quality = 8 [default = 0];
  inline bool has_skill2quality() const;
  inline void clear_skill2quality();
  static const int kSkill2QualityFieldNumber = 8;
  inline ::google::protobuf::int32 skill2quality() const;
  inline void set_skill2quality(::google::protobuf::int32 value);
  
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::google::protobuf::int32 heroid_;
  ::google::protobuf::int32 level_;
  ::google::protobuf::int32 skillid1_;
  ::google::protobuf::int32 skill1grade_;
  ::google::protobuf::int32 skill1quality_;
  ::google::protobuf::int32 skillid2_;
  ::google::protobuf::int32 skill2grade_;
  ::google::protobuf::int32 skill2quality_;
  friend void  protobuf_AddDesc_countryDB_2eproto();
  friend void protobuf_AssignDesc_countryDB_2eproto();
  friend void protobuf_ShutdownFile_countryDB_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(8 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static Pve_GuildBtlHeroSkill* default_instance_;
};
// -------------------------------------------------------------------

class DB_C_GuildBtlSendDataUnit : public ::google::protobuf::Message {
 public:
  DB_C_GuildBtlSendDataUnit();
  virtual ~DB_C_GuildBtlSendDataUnit();
  
  DB_C_GuildBtlSendDataUnit(const DB_C_GuildBtlSendDataUnit& from);
  
  inline DB_C_GuildBtlSendDataUnit& operator=(const DB_C_GuildBtlSendDataUnit& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const DB_C_GuildBtlSendDataUnit& default_instance();
  void Swap(DB_C_GuildBtlSendDataUnit* other);
  
  // implements Message ----------------------------------------------
  
  DB_C_GuildBtlSendDataUnit* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DB_C_GuildBtlSendDataUnit& from);
  void MergeFrom(const DB_C_GuildBtlSendDataUnit& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const { _cached_size_ = size; }
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // repeated .DB_C_GuildBtlArmyAtkProp pvecarmyatkprop = 1;
  inline int pvecarmyatkprop_size() const;
  inline void clear_pvecarmyatkprop();
  static const int kPvecarmyatkpropFieldNumber = 1;
  inline const ::google::protobuf::RepeatedPtrField< ::DB_C_GuildBtlArmyAtkProp >& pvecarmyatkprop() const;
  inline ::google::protobuf::RepeatedPtrField< ::DB_C_GuildBtlArmyAtkProp >* mutable_pvecarmyatkprop();
  inline const ::DB_C_GuildBtlArmyAtkProp& pvecarmyatkprop(int index) const;
  inline ::DB_C_GuildBtlArmyAtkProp* mutable_pvecarmyatkprop(int index);
  inline ::DB_C_GuildBtlArmyAtkProp* add_pvecarmyatkprop();
  
  // repeated .DB_C_GuildBtlFightUnit pvefightunit = 2;
  inline int pvefightunit_size() const;
  inline void clear_pvefightunit();
  static const int kPvefightunitFieldNumber = 2;
  inline const ::google::protobuf::RepeatedPtrField< ::DB_C_GuildBtlFightUnit >& pvefightunit() const;
  inline ::google::protobuf::RepeatedPtrField< ::DB_C_GuildBtlFightUnit >* mutable_pvefightunit();
  inline const ::DB_C_GuildBtlFightUnit& pvefightunit(int index) const;
  inline ::DB_C_GuildBtlFightUnit* mutable_pvefightunit(int index);
  inline ::DB_C_GuildBtlFightUnit* add_pvefightunit();
  
  // optional .DB_C_GuildBtlAdmiralAdd pvefightadmiral = 3;
  inline bool has_pvefightadmiral() const;
  inline void clear_pvefightadmiral();
  static const int kPvefightadmiralFieldNumber = 3;
  inline const ::DB_C_GuildBtlAdmiralAdd& pvefightadmiral() const;
  inline ::DB_C_GuildBtlAdmiralAdd* mutable_pvefightadmiral();
  
  // optional .Pve_GuildBtlHeroSkill pvefightheroskill = 4;
  inline bool has_pvefightheroskill() const;
  inline void clear_pvefightheroskill();
  static const int kPvefightheroskillFieldNumber = 4;
  inline const ::Pve_GuildBtlHeroSkill& pvefightheroskill() const;
  inline ::Pve_GuildBtlHeroSkill* mutable_pvefightheroskill();
  
  // repeated int32 nReduceSpeed = 5;
  inline int nreducespeed_size() const;
  inline void clear_nreducespeed();
  static const int kNReduceSpeedFieldNumber = 5;
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >& nreducespeed() const
      ;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >* mutable_nreducespeed();
  inline ::google::protobuf::int32 nreducespeed(int index) const;
  inline void set_nreducespeed(int index, ::google::protobuf::int32 value);
  inline void add_nreducespeed(::google::protobuf::int32 value);
  
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::google::protobuf::RepeatedPtrField< ::DB_C_GuildBtlArmyAtkProp > pvecarmyatkprop_;
  ::google::protobuf::RepeatedPtrField< ::DB_C_GuildBtlFightUnit > pvefightunit_;
  ::DB_C_GuildBtlAdmiralAdd* pvefightadmiral_;
  ::Pve_GuildBtlHeroSkill* pvefightheroskill_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > nreducespeed_;
  friend void  protobuf_AddDesc_countryDB_2eproto();
  friend void protobuf_AssignDesc_countryDB_2eproto();
  friend void protobuf_ShutdownFile_countryDB_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static DB_C_GuildBtlSendDataUnit* default_instance_;
};
// -------------------------------------------------------------------

class DB_C_Guild_FightSendData : public ::google::protobuf::Message {
 public:
  DB_C_Guild_FightSendData();
  virtual ~DB_C_Guild_FightSendData();
  
  DB_C_Guild_FightSendData(const DB_C_Guild_FightSendData& from);
  
  inline DB_C_Guild_FightSendData& operator=(const DB_C_Guild_FightSendData& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const DB_C_Guild_FightSendData& default_instance();
  void Swap(DB_C_Guild_FightSendData* other);
  
  // implements Message ----------------------------------------------
  
  DB_C_Guild_FightSendData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DB_C_Guild_FightSendData& from);
  void MergeFrom(const DB_C_Guild_FightSendData& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const { _cached_size_ = size; }
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional .DB_C_GuildBtlUser btlUser = 1;
  inline bool has_btluser() const;
  inline void clear_btluser();
  static const int kBtlUserFieldNumber = 1;
  inline const ::DB_C_GuildBtlUser& btluser() const;
  inline ::DB_C_GuildBtlUser* mutable_btluser();
  
  // repeated .DB_C_GuildBtlSendDataUnit fightsenddata = 2;
  inline int fightsenddata_size() const;
  inline void clear_fightsenddata();
  static const int kFightsenddataFieldNumber = 2;
  inline const ::google::protobuf::RepeatedPtrField< ::DB_C_GuildBtlSendDataUnit >& fightsenddata() const;
  inline ::google::protobuf::RepeatedPtrField< ::DB_C_GuildBtlSendDataUnit >* mutable_fightsenddata();
  inline const ::DB_C_GuildBtlSendDataUnit& fightsenddata(int index) const;
  inline ::DB_C_GuildBtlSendDataUnit* mutable_fightsenddata(int index);
  inline ::DB_C_GuildBtlSendDataUnit* add_fightsenddata();
  
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::DB_C_GuildBtlUser* btluser_;
  ::google::protobuf::RepeatedPtrField< ::DB_C_GuildBtlSendDataUnit > fightsenddata_;
  friend void  protobuf_AddDesc_countryDB_2eproto();
  friend void protobuf_AssignDesc_countryDB_2eproto();
  friend void protobuf_ShutdownFile_countryDB_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static DB_C_Guild_FightSendData* default_instance_;
};
// -------------------------------------------------------------------

class DB_C_GuildBtlUserPK : public ::google::protobuf::Message {
 public:
  DB_C_GuildBtlUserPK();
  virtual ~DB_C_GuildBtlUserPK();
  
  DB_C_GuildBtlUserPK(const DB_C_GuildBtlUserPK& from);
  
  inline DB_C_GuildBtlUserPK& operator=(const DB_C_GuildBtlUserPK& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const DB_C_GuildBtlUserPK& default_instance();
  void Swap(DB_C_GuildBtlUserPK* other);
  
  // implements Message ----------------------------------------------
  
  DB_C_GuildBtlUserPK* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DB_C_GuildBtlUserPK& from);
  void MergeFrom(const DB_C_GuildBtlUserPK& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const { _cached_size_ = size; }
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional string userID1 = 1;
  inline bool has_userid1() const;
  inline void clear_userid1();
  static const int kUserID1FieldNumber = 1;
  inline const ::std::string& userid1() const;
  inline void set_userid1(const ::std::string& value);
  inline void set_userid1(const char* value);
  inline void set_userid1(const char* value, size_t size);
  inline ::std::string* mutable_userid1();
  
  // optional string userID2 = 2;
  inline bool has_userid2() const;
  inline void clear_userid2();
  static const int kUserID2FieldNumber = 2;
  inline const ::std::string& userid2() const;
  inline void set_userid2(const ::std::string& value);
  inline void set_userid2(const char* value);
  inline void set_userid2(const char* value, size_t size);
  inline ::std::string* mutable_userid2();
  
  // optional string winID = 3;
  inline bool has_winid() const;
  inline void clear_winid();
  static const int kWinIDFieldNumber = 3;
  inline const ::std::string& winid() const;
  inline void set_winid(const ::std::string& value);
  inline void set_winid(const char* value);
  inline void set_winid(const char* value, size_t size);
  inline ::std::string* mutable_winid();
  
  // optional int32 winLeftHP = 4;
  inline bool has_winlefthp() const;
  inline void clear_winlefthp();
  static const int kWinLeftHPFieldNumber = 4;
  inline ::google::protobuf::int32 winlefthp() const;
  inline void set_winlefthp(::google::protobuf::int32 value);
  
  // optional bool bStreakLeave = 5;
  inline bool has_bstreakleave() const;
  inline void clear_bstreakleave();
  static const int kBStreakLeaveFieldNumber = 5;
  inline bool bstreakleave() const;
  inline void set_bstreakleave(bool value);
  
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::std::string* userid1_;
  static const ::std::string _default_userid1_;
  ::std::string* userid2_;
  static const ::std::string _default_userid2_;
  ::std::string* winid_;
  static const ::std::string _default_winid_;
  ::google::protobuf::int32 winlefthp_;
  bool bstreakleave_;
  friend void  protobuf_AddDesc_countryDB_2eproto();
  friend void protobuf_AssignDesc_countryDB_2eproto();
  friend void protobuf_ShutdownFile_countryDB_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static DB_C_GuildBtlUserPK* default_instance_;
};
// -------------------------------------------------------------------

class DB_C_GuidlBtlRetWay : public ::google::protobuf::Message {
 public:
  DB_C_GuidlBtlRetWay();
  virtual ~DB_C_GuidlBtlRetWay();
  
  DB_C_GuidlBtlRetWay(const DB_C_GuidlBtlRetWay& from);
  
  inline DB_C_GuidlBtlRetWay& operator=(const DB_C_GuidlBtlRetWay& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const DB_C_GuidlBtlRetWay& default_instance();
  void Swap(DB_C_GuidlBtlRetWay* other);
  
  // implements Message ----------------------------------------------
  
  DB_C_GuidlBtlRetWay* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DB_C_GuidlBtlRetWay& from);
  void MergeFrom(const DB_C_GuidlBtlRetWay& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const { _cached_size_ = size; }
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional int32 region = 1;
  inline bool has_region() const;
  inline void clear_region();
  static const int kRegionFieldNumber = 1;
  inline ::google::protobuf::int32 region() const;
  inline void set_region(::google::protobuf::int32 value);
  
  // optional int32 guildID1 = 2;
  inline bool has_guildid1() const;
  inline void clear_guildid1();
  static const int kGuildID1FieldNumber = 2;
  inline ::google::protobuf::int32 guildid1() const;
  inline void set_guildid1(::google::protobuf::int32 value);
  
  // optional int32 guildID2 = 3;
  inline bool has_guildid2() const;
  inline void clear_guildid2();
  static const int kGuildID2FieldNumber = 3;
  inline ::google::protobuf::int32 guildid2() const;
  inline void set_guildid2(::google::protobuf::int32 value);
  
  // optional int32 session = 4;
  inline bool has_session() const;
  inline void clear_session();
  static const int kSessionFieldNumber = 4;
  inline ::google::protobuf::int32 session() const;
  inline void set_session(::google::protobuf::int32 value);
  
  // optional int32 way = 5;
  inline bool has_way() const;
  inline void clear_way();
  static const int kWayFieldNumber = 5;
  inline ::google::protobuf::int32 way() const;
  inline void set_way(::google::protobuf::int32 value);
  
  // optional int32 winGuildID = 6;
  inline bool has_winguildid() const;
  inline void clear_winguildid();
  static const int kWinGuildIDFieldNumber = 6;
  inline ::google::protobuf::int32 winguildid() const;
  inline void set_winguildid(::google::protobuf::int32 value);
  
  // repeated .DB_C_GuildBtlUser userLst1 = 7;
  inline int userlst1_size() const;
  inline void clear_userlst1();
  static const int kUserLst1FieldNumber = 7;
  inline const ::google::protobuf::RepeatedPtrField< ::DB_C_GuildBtlUser >& userlst1() const;
  inline ::google::protobuf::RepeatedPtrField< ::DB_C_GuildBtlUser >* mutable_userlst1();
  inline const ::DB_C_GuildBtlUser& userlst1(int index) const;
  inline ::DB_C_GuildBtlUser* mutable_userlst1(int index);
  inline ::DB_C_GuildBtlUser* add_userlst1();
  
  // repeated .DB_C_GuildBtlUser userLst2 = 8;
  inline int userlst2_size() const;
  inline void clear_userlst2();
  static const int kUserLst2FieldNumber = 8;
  inline const ::google::protobuf::RepeatedPtrField< ::DB_C_GuildBtlUser >& userlst2() const;
  inline ::google::protobuf::RepeatedPtrField< ::DB_C_GuildBtlUser >* mutable_userlst2();
  inline const ::DB_C_GuildBtlUser& userlst2(int index) const;
  inline ::DB_C_GuildBtlUser* mutable_userlst2(int index);
  inline ::DB_C_GuildBtlUser* add_userlst2();
  
  // repeated .DB_C_GuildBtlUserPK pkLst = 9;
  inline int pklst_size() const;
  inline void clear_pklst();
  static const int kPkLstFieldNumber = 9;
  inline const ::google::protobuf::RepeatedPtrField< ::DB_C_GuildBtlUserPK >& pklst() const;
  inline ::google::protobuf::RepeatedPtrField< ::DB_C_GuildBtlUserPK >* mutable_pklst();
  inline const ::DB_C_GuildBtlUserPK& pklst(int index) const;
  inline ::DB_C_GuildBtlUserPK* mutable_pklst(int index);
  inline ::DB_C_GuildBtlUserPK* add_pklst();
  
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::google::protobuf::int32 region_;
  ::google::protobuf::int32 guildid1_;
  ::google::protobuf::int32 guildid2_;
  ::google::protobuf::int32 session_;
  ::google::protobuf::int32 way_;
  ::google::protobuf::int32 winguildid_;
  ::google::protobuf::RepeatedPtrField< ::DB_C_GuildBtlUser > userlst1_;
  ::google::protobuf::RepeatedPtrField< ::DB_C_GuildBtlUser > userlst2_;
  ::google::protobuf::RepeatedPtrField< ::DB_C_GuildBtlUserPK > pklst_;
  friend void  protobuf_AddDesc_countryDB_2eproto();
  friend void protobuf_AssignDesc_countryDB_2eproto();
  friend void protobuf_ShutdownFile_countryDB_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(9 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static DB_C_GuidlBtlRetWay* default_instance_;
};
// -------------------------------------------------------------------

class DB_GVE_City : public ::google::protobuf::Message {
 public:
  DB_GVE_City();
  virtual ~DB_GVE_City();
  
  DB_GVE_City(const DB_GVE_City& from);
  
  inline DB_GVE_City& operator=(const DB_GVE_City& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const DB_GVE_City& default_instance();
  void Swap(DB_GVE_City* other);
  
  // implements Message ----------------------------------------------
  
  DB_GVE_City* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DB_GVE_City& from);
  void MergeFrom(const DB_GVE_City& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const { _cached_size_ = size; }
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // repeated .DB_C_NPC npc = 1;
  inline int npc_size() const;
  inline void clear_npc();
  static const int kNpcFieldNumber = 1;
  inline const ::google::protobuf::RepeatedPtrField< ::DB_C_NPC >& npc() const;
  inline ::google::protobuf::RepeatedPtrField< ::DB_C_NPC >* mutable_npc();
  inline const ::DB_C_NPC& npc(int index) const;
  inline ::DB_C_NPC* mutable_npc(int index);
  inline ::DB_C_NPC* add_npc();
  
  // optional int32 flag = 2 [default = 0];
  inline bool has_flag() const;
  inline void clear_flag();
  static const int kFlagFieldNumber = 2;
  inline ::google::protobuf::int32 flag() const;
  inline void set_flag(::google::protobuf::int32 value);
  
  // repeated .DB_GVE_Buff buffList = 3;
  inline int bufflist_size() const;
  inline void clear_bufflist();
  static const int kBuffListFieldNumber = 3;
  inline const ::google::protobuf::RepeatedPtrField< ::DB_GVE_Buff >& bufflist() const;
  inline ::google::protobuf::RepeatedPtrField< ::DB_GVE_Buff >* mutable_bufflist();
  inline const ::DB_GVE_Buff& bufflist(int index) const;
  inline ::DB_GVE_Buff* mutable_bufflist(int index);
  inline ::DB_GVE_Buff* add_bufflist();
  
  // repeated .DB_GVE_List nowList = 5;
  inline int nowlist_size() const;
  inline void clear_nowlist();
  static const int kNowListFieldNumber = 5;
  inline const ::google::protobuf::RepeatedPtrField< ::DB_GVE_List >& nowlist() const;
  inline ::google::protobuf::RepeatedPtrField< ::DB_GVE_List >* mutable_nowlist();
  inline const ::DB_GVE_List& nowlist(int index) const;
  inline ::DB_GVE_List* mutable_nowlist(int index);
  inline ::DB_GVE_List* add_nowlist();
  
  // repeated .DB_GVE_List LastList = 6;
  inline int lastlist_size() const;
  inline void clear_lastlist();
  static const int kLastListFieldNumber = 6;
  inline const ::google::protobuf::RepeatedPtrField< ::DB_GVE_List >& lastlist() const;
  inline ::google::protobuf::RepeatedPtrField< ::DB_GVE_List >* mutable_lastlist();
  inline const ::DB_GVE_List& lastlist(int index) const;
  inline ::DB_GVE_List* mutable_lastlist(int index);
  inline ::DB_GVE_List* add_lastlist();
  
  // optional .DB_GVE_Msg nowMsg = 7;
  inline bool has_nowmsg() const;
  inline void clear_nowmsg();
  static const int kNowMsgFieldNumber = 7;
  inline const ::DB_GVE_Msg& nowmsg() const;
  inline ::DB_GVE_Msg* mutable_nowmsg();
  
  // optional .DB_GVE_Msg lastMsg = 8;
  inline bool has_lastmsg() const;
  inline void clear_lastmsg();
  static const int kLastMsgFieldNumber = 8;
  inline const ::DB_GVE_Msg& lastmsg() const;
  inline ::DB_GVE_Msg* mutable_lastmsg();
  
  // optional .DB_GVE_Msg HighestMsg = 9;
  inline bool has_highestmsg() const;
  inline void clear_highestmsg();
  static const int kHighestMsgFieldNumber = 9;
  inline const ::DB_GVE_Msg& highestmsg() const;
  inline ::DB_GVE_Msg* mutable_highestmsg();
  
  // repeated int64 playerList = 10;
  inline int playerlist_size() const;
  inline void clear_playerlist();
  static const int kPlayerListFieldNumber = 10;
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >& playerlist() const
      ;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >* mutable_playerlist();
  inline ::google::protobuf::int64 playerlist(int index) const;
  inline void set_playerlist(int index, ::google::protobuf::int64 value);
  inline void add_playerlist(::google::protobuf::int64 value);
  
  // optional int32 lastRefreshTime = 11;
  inline bool has_lastrefreshtime() const;
  inline void clear_lastrefreshtime();
  static const int kLastRefreshTimeFieldNumber = 11;
  inline ::google::protobuf::int32 lastrefreshtime() const;
  inline void set_lastrefreshtime(::google::protobuf::int32 value);
  
  // repeated .DB_C_NPC spNpc = 12;
  inline int spnpc_size() const;
  inline void clear_spnpc();
  static const int kSpNpcFieldNumber = 12;
  inline const ::google::protobuf::RepeatedPtrField< ::DB_C_NPC >& spnpc() const;
  inline ::google::protobuf::RepeatedPtrField< ::DB_C_NPC >* mutable_spnpc();
  inline const ::DB_C_NPC& spnpc(int index) const;
  inline ::DB_C_NPC* mutable_spnpc(int index);
  inline ::DB_C_NPC* add_spnpc();
  
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::google::protobuf::RepeatedPtrField< ::DB_C_NPC > npc_;
  ::google::protobuf::int32 flag_;
  ::google::protobuf::RepeatedPtrField< ::DB_GVE_Buff > bufflist_;
  ::google::protobuf::RepeatedPtrField< ::DB_GVE_List > nowlist_;
  ::google::protobuf::RepeatedPtrField< ::DB_GVE_List > lastlist_;
  ::DB_GVE_Msg* nowmsg_;
  ::DB_GVE_Msg* lastmsg_;
  ::DB_GVE_Msg* highestmsg_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int64 > playerlist_;
  ::google::protobuf::int32 lastrefreshtime_;
  ::google::protobuf::RepeatedPtrField< ::DB_C_NPC > spnpc_;
  friend void  protobuf_AddDesc_countryDB_2eproto();
  friend void protobuf_AssignDesc_countryDB_2eproto();
  friend void protobuf_ShutdownFile_countryDB_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(11 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static DB_GVE_City* default_instance_;
};
// -------------------------------------------------------------------

class DB_GVE_List : public ::google::protobuf::Message {
 public:
  DB_GVE_List();
  virtual ~DB_GVE_List();
  
  DB_GVE_List(const DB_GVE_List& from);
  
  inline DB_GVE_List& operator=(const DB_GVE_List& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const DB_GVE_List& default_instance();
  void Swap(DB_GVE_List* other);
  
  // implements Message ----------------------------------------------
  
  DB_GVE_List* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DB_GVE_List& from);
  void MergeFrom(const DB_GVE_List& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const { _cached_size_ = size; }
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional string uid = 1;
  inline bool has_uid() const;
  inline void clear_uid();
  static const int kUidFieldNumber = 1;
  inline const ::std::string& uid() const;
  inline void set_uid(const ::std::string& value);
  inline void set_uid(const char* value);
  inline void set_uid(const char* value, size_t size);
  inline ::std::string* mutable_uid();
  
  // optional string name = 2;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 2;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  
  // optional int32 gvePoint = 3;
  inline bool has_gvepoint() const;
  inline void clear_gvepoint();
  static const int kGvePointFieldNumber = 3;
  inline ::google::protobuf::int32 gvepoint() const;
  inline void set_gvepoint(::google::protobuf::int32 value);
  
  // optional int32 level = 4;
  inline bool has_level() const;
  inline void clear_level();
  static const int kLevelFieldNumber = 4;
  inline ::google::protobuf::int32 level() const;
  inline void set_level(::google::protobuf::int32 value);
  
  // optional int32 officerPosition = 5;
  inline bool has_officerposition() const;
  inline void clear_officerposition();
  static const int kOfficerPositionFieldNumber = 5;
  inline ::google::protobuf::int32 officerposition() const;
  inline void set_officerposition(::google::protobuf::int32 value);
  
  // optional int32 vipType = 6;
  inline bool has_viptype() const;
  inline void clear_viptype();
  static const int kVipTypeFieldNumber = 6;
  inline ::google::protobuf::int32 viptype() const;
  inline void set_viptype(::google::protobuf::int32 value);
  
  // optional int32 vipLevel = 7;
  inline bool has_viplevel() const;
  inline void clear_viplevel();
  static const int kVipLevelFieldNumber = 7;
  inline ::google::protobuf::int32 viplevel() const;
  inline void set_viplevel(::google::protobuf::int32 value);
  
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::std::string* uid_;
  static const ::std::string _default_uid_;
  ::std::string* name_;
  static const ::std::string _default_name_;
  ::google::protobuf::int32 gvepoint_;
  ::google::protobuf::int32 level_;
  ::google::protobuf::int32 officerposition_;
  ::google::protobuf::int32 viptype_;
  ::google::protobuf::int32 viplevel_;
  friend void  protobuf_AddDesc_countryDB_2eproto();
  friend void protobuf_AssignDesc_countryDB_2eproto();
  friend void protobuf_ShutdownFile_countryDB_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(7 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static DB_GVE_List* default_instance_;
};
// -------------------------------------------------------------------

class DB_GVE_Msg : public ::google::protobuf::Message {
 public:
  DB_GVE_Msg();
  virtual ~DB_GVE_Msg();
  
  DB_GVE_Msg(const DB_GVE_Msg& from);
  
  inline DB_GVE_Msg& operator=(const DB_GVE_Msg& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const DB_GVE_Msg& default_instance();
  void Swap(DB_GVE_Msg* other);
  
  // implements Message ----------------------------------------------
  
  DB_GVE_Msg* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DB_GVE_Msg& from);
  void MergeFrom(const DB_GVE_Msg& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const { _cached_size_ = size; }
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional int32 gveStep = 1 [default = -1];
  inline bool has_gvestep() const;
  inline void clear_gvestep();
  static const int kGveStepFieldNumber = 1;
  inline ::google::protobuf::int32 gvestep() const;
  inline void set_gvestep(::google::protobuf::int32 value);
  
  // optional int32 point = 2;
  inline bool has_point() const;
  inline void clear_point();
  static const int kPointFieldNumber = 2;
  inline ::google::protobuf::int32 point() const;
  inline void set_point(::google::protobuf::int32 value);
  
  // optional int32 rank = 3;
  inline bool has_rank() const;
  inline void clear_rank();
  static const int kRankFieldNumber = 3;
  inline ::google::protobuf::int32 rank() const;
  inline void set_rank(::google::protobuf::int32 value);
  
  // optional int32 playerCnt = 4;
  inline bool has_playercnt() const;
  inline void clear_playercnt();
  static const int kPlayerCntFieldNumber = 4;
  inline ::google::protobuf::int32 playercnt() const;
  inline void set_playercnt(::google::protobuf::int32 value);
  
  // optional int32 overGuildStep = 5;
  inline bool has_overguildstep() const;
  inline void clear_overguildstep();
  static const int kOverGuildStepFieldNumber = 5;
  inline ::google::protobuf::int32 overguildstep() const;
  inline void set_overguildstep(::google::protobuf::int32 value);
  
  // optional int32 overGuildPoint = 6;
  inline bool has_overguildpoint() const;
  inline void clear_overguildpoint();
  static const int kOverGuildPointFieldNumber = 6;
  inline ::google::protobuf::int32 overguildpoint() const;
  inline void set_overguildpoint(::google::protobuf::int32 value);
  
  // optional int32 overGuildMem = 7;
  inline bool has_overguildmem() const;
  inline void clear_overguildmem();
  static const int kOverGuildMemFieldNumber = 7;
  inline ::google::protobuf::int32 overguildmem() const;
  inline void set_overguildmem(::google::protobuf::int32 value);
  
  // optional int32 flag = 8;
  inline bool has_flag() const;
  inline void clear_flag();
  static const int kFlagFieldNumber = 8;
  inline ::google::protobuf::int32 flag() const;
  inline void set_flag(::google::protobuf::int32 value);
  
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::google::protobuf::int32 gvestep_;
  ::google::protobuf::int32 point_;
  ::google::protobuf::int32 rank_;
  ::google::protobuf::int32 playercnt_;
  ::google::protobuf::int32 overguildstep_;
  ::google::protobuf::int32 overguildpoint_;
  ::google::protobuf::int32 overguildmem_;
  ::google::protobuf::int32 flag_;
  friend void  protobuf_AddDesc_countryDB_2eproto();
  friend void protobuf_AssignDesc_countryDB_2eproto();
  friend void protobuf_ShutdownFile_countryDB_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(8 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static DB_GVE_Msg* default_instance_;
};
// -------------------------------------------------------------------

class DB_GVE_Buff : public ::google::protobuf::Message {
 public:
  DB_GVE_Buff();
  virtual ~DB_GVE_Buff();
  
  DB_GVE_Buff(const DB_GVE_Buff& from);
  
  inline DB_GVE_Buff& operator=(const DB_GVE_Buff& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const DB_GVE_Buff& default_instance();
  void Swap(DB_GVE_Buff* other);
  
  // implements Message ----------------------------------------------
  
  DB_GVE_Buff* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DB_GVE_Buff& from);
  void MergeFrom(const DB_GVE_Buff& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const { _cached_size_ = size; }
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional int32 buffID = 1;
  inline bool has_buffid() const;
  inline void clear_buffid();
  static const int kBuffIDFieldNumber = 1;
  inline ::google::protobuf::int32 buffid() const;
  inline void set_buffid(::google::protobuf::int32 value);
  
  // optional int32 buffEndTime = 2;
  inline bool has_buffendtime() const;
  inline void clear_buffendtime();
  static const int kBuffEndTimeFieldNumber = 2;
  inline ::google::protobuf::int32 buffendtime() const;
  inline void set_buffendtime(::google::protobuf::int32 value);
  
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::google::protobuf::int32 buffid_;
  ::google::protobuf::int32 buffendtime_;
  friend void  protobuf_AddDesc_countryDB_2eproto();
  friend void protobuf_AssignDesc_countryDB_2eproto();
  friend void protobuf_ShutdownFile_countryDB_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static DB_GVE_Buff* default_instance_;
};
// -------------------------------------------------------------------

class DB_GVE_FirstDown : public ::google::protobuf::Message {
 public:
  DB_GVE_FirstDown();
  virtual ~DB_GVE_FirstDown();
  
  DB_GVE_FirstDown(const DB_GVE_FirstDown& from);
  
  inline DB_GVE_FirstDown& operator=(const DB_GVE_FirstDown& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const DB_GVE_FirstDown& default_instance();
  void Swap(DB_GVE_FirstDown* other);
  
  // implements Message ----------------------------------------------
  
  DB_GVE_FirstDown* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DB_GVE_FirstDown& from);
  void MergeFrom(const DB_GVE_FirstDown& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const { _cached_size_ = size; }
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional int32 stepID = 1;
  inline bool has_stepid() const;
  inline void clear_stepid();
  static const int kStepIDFieldNumber = 1;
  inline ::google::protobuf::int32 stepid() const;
  inline void set_stepid(::google::protobuf::int32 value);
  
  // optional int32 guildID = 2;
  inline bool has_guildid() const;
  inline void clear_guildid();
  static const int kGuildIDFieldNumber = 2;
  inline ::google::protobuf::int32 guildid() const;
  inline void set_guildid(::google::protobuf::int32 value);
  
  // optional int32 guildCountry = 3;
  inline bool has_guildcountry() const;
  inline void clear_guildcountry();
  static const int kGuildCountryFieldNumber = 3;
  inline ::google::protobuf::int32 guildcountry() const;
  inline void set_guildcountry(::google::protobuf::int32 value);
  
  // optional string guildName = 4;
  inline bool has_guildname() const;
  inline void clear_guildname();
  static const int kGuildNameFieldNumber = 4;
  inline const ::std::string& guildname() const;
  inline void set_guildname(const ::std::string& value);
  inline void set_guildname(const char* value);
  inline void set_guildname(const char* value, size_t size);
  inline ::std::string* mutable_guildname();
  
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::google::protobuf::int32 stepid_;
  ::google::protobuf::int32 guildid_;
  ::google::protobuf::int32 guildcountry_;
  ::std::string* guildname_;
  static const ::std::string _default_guildname_;
  friend void  protobuf_AddDesc_countryDB_2eproto();
  friend void protobuf_AssignDesc_countryDB_2eproto();
  friend void protobuf_ShutdownFile_countryDB_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static DB_GVE_FirstDown* default_instance_;
};
// -------------------------------------------------------------------

class DB_C_ResourceData : public ::google::protobuf::Message {
 public:
  DB_C_ResourceData();
  virtual ~DB_C_ResourceData();
  
  DB_C_ResourceData(const DB_C_ResourceData& from);
  
  inline DB_C_ResourceData& operator=(const DB_C_ResourceData& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const DB_C_ResourceData& default_instance();
  void Swap(DB_C_ResourceData* other);
  
  // implements Message ----------------------------------------------
  
  DB_C_ResourceData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DB_C_ResourceData& from);
  void MergeFrom(const DB_C_ResourceData& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const { _cached_size_ = size; }
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required int32 key = 1;
  inline bool has_key() const;
  inline void clear_key();
  static const int kKeyFieldNumber = 1;
  inline ::google::protobuf::int32 key() const;
  inline void set_key(::google::protobuf::int32 value);
  
  // required int32 region = 2;
  inline bool has_region() const;
  inline void clear_region();
  static const int kRegionFieldNumber = 2;
  inline ::google::protobuf::int32 region() const;
  inline void set_region(::google::protobuf::int32 value);
  
  // repeated .DB_C_Resource resourseList = 3;
  inline int resourselist_size() const;
  inline void clear_resourselist();
  static const int kResourseListFieldNumber = 3;
  inline const ::google::protobuf::RepeatedPtrField< ::DB_C_Resource >& resourselist() const;
  inline ::google::protobuf::RepeatedPtrField< ::DB_C_Resource >* mutable_resourselist();
  inline const ::DB_C_Resource& resourselist(int index) const;
  inline ::DB_C_Resource* mutable_resourselist(int index);
  inline ::DB_C_Resource* add_resourselist();
  
  // optional int64 ltSaveRevision = 4 [default = 0];
  inline bool has_ltsaverevision() const;
  inline void clear_ltsaverevision();
  static const int kLtSaveRevisionFieldNumber = 4;
  inline ::google::protobuf::int64 ltsaverevision() const;
  inline void set_ltsaverevision(::google::protobuf::int64 value);
  
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::google::protobuf::int32 key_;
  ::google::protobuf::int32 region_;
  ::google::protobuf::RepeatedPtrField< ::DB_C_Resource > resourselist_;
  ::google::protobuf::int64 ltsaverevision_;
  friend void  protobuf_AddDesc_countryDB_2eproto();
  friend void protobuf_AssignDesc_countryDB_2eproto();
  friend void protobuf_ShutdownFile_countryDB_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static DB_C_ResourceData* default_instance_;
};
// -------------------------------------------------------------------

class DB_C_Resource : public ::google::protobuf::Message {
 public:
  DB_C_Resource();
  virtual ~DB_C_Resource();
  
  DB_C_Resource(const DB_C_Resource& from);
  
  inline DB_C_Resource& operator=(const DB_C_Resource& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const DB_C_Resource& default_instance();
  void Swap(DB_C_Resource* other);
  
  // implements Message ----------------------------------------------
  
  DB_C_Resource* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DB_C_Resource& from);
  void MergeFrom(const DB_C_Resource& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const { _cached_size_ = size; }
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required int32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);
  
  // optional int32 type = 2;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 2;
  inline ::google::protobuf::int32 type() const;
  inline void set_type(::google::protobuf::int32 value);
  
  // optional int32 lv = 3;
  inline bool has_lv() const;
  inline void clear_lv();
  static const int kLvFieldNumber = 3;
  inline ::google::protobuf::int32 lv() const;
  inline void set_lv(::google::protobuf::int32 value);
  
  // optional string uid = 4;
  inline bool has_uid() const;
  inline void clear_uid();
  static const int kUidFieldNumber = 4;
  inline const ::std::string& uid() const;
  inline void set_uid(const ::std::string& value);
  inline void set_uid(const char* value);
  inline void set_uid(const char* value, size_t size);
  inline ::std::string* mutable_uid();
  
  // optional string name = 5;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 5;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  
  // optional int32 endTime = 6;
  inline bool has_endtime() const;
  inline void clear_endtime();
  static const int kEndTimeFieldNumber = 6;
  inline ::google::protobuf::int32 endtime() const;
  inline void set_endtime(::google::protobuf::int32 value);
  
  // repeated int32 admiralID = 7;
  inline int admiralid_size() const;
  inline void clear_admiralid();
  static const int kAdmiralIDFieldNumber = 7;
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >& admiralid() const
      ;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >* mutable_admiralid();
  inline ::google::protobuf::int32 admiralid(int index) const;
  inline void set_admiralid(int index, ::google::protobuf::int32 value);
  inline void add_admiralid(::google::protobuf::int32 value);
  
  // repeated int32 admiralTrainLv = 8;
  inline int admiraltrainlv_size() const;
  inline void clear_admiraltrainlv();
  static const int kAdmiralTrainLvFieldNumber = 8;
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >& admiraltrainlv() const
      ;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >* mutable_admiraltrainlv();
  inline ::google::protobuf::int32 admiraltrainlv(int index) const;
  inline void set_admiraltrainlv(int index, ::google::protobuf::int32 value);
  inline void add_admiraltrainlv(::google::protobuf::int32 value);
  
  // optional int32 pow = 9;
  inline bool has_pow() const;
  inline void clear_pow();
  static const int kPowFieldNumber = 9;
  inline ::google::protobuf::int32 pow() const;
  inline void set_pow(::google::protobuf::int32 value);
  
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::google::protobuf::int32 id_;
  ::google::protobuf::int32 type_;
  ::google::protobuf::int32 lv_;
  ::std::string* uid_;
  static const ::std::string _default_uid_;
  ::std::string* name_;
  static const ::std::string _default_name_;
  ::google::protobuf::int32 endtime_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > admiralid_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > admiraltrainlv_;
  ::google::protobuf::int32 pow_;
  friend void  protobuf_AddDesc_countryDB_2eproto();
  friend void protobuf_AssignDesc_countryDB_2eproto();
  friend void protobuf_ShutdownFile_countryDB_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(9 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static DB_C_Resource* default_instance_;
};
// -------------------------------------------------------------------

class DB_C_GvgCity : public ::google::protobuf::Message {
 public:
  DB_C_GvgCity();
  virtual ~DB_C_GvgCity();
  
  DB_C_GvgCity(const DB_C_GvgCity& from);
  
  inline DB_C_GvgCity& operator=(const DB_C_GvgCity& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const DB_C_GvgCity& default_instance();
  void Swap(DB_C_GvgCity* other);
  
  // implements Message ----------------------------------------------
  
  DB_C_GvgCity* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DB_C_GvgCity& from);
  void MergeFrom(const DB_C_GvgCity& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const { _cached_size_ = size; }
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required int32 key = 1;
  inline bool has_key() const;
  inline void clear_key();
  static const int kKeyFieldNumber = 1;
  inline ::google::protobuf::int32 key() const;
  inline void set_key(::google::protobuf::int32 value);
  
  // optional int32 region = 2;
  inline bool has_region() const;
  inline void clear_region();
  static const int kRegionFieldNumber = 2;
  inline ::google::protobuf::int32 region() const;
  inline void set_region(::google::protobuf::int32 value);
  
  // required int32 cityID = 3;
  inline bool has_cityid() const;
  inline void clear_cityid();
  static const int kCityIDFieldNumber = 3;
  inline ::google::protobuf::int32 cityid() const;
  inline void set_cityid(::google::protobuf::int32 value);
  
  // optional int32 activeFlag = 4;
  inline bool has_activeflag() const;
  inline void clear_activeflag();
  static const int kActiveFlagFieldNumber = 4;
  inline ::google::protobuf::int32 activeflag() const;
  inline void set_activeflag(::google::protobuf::int32 value);
  
  // optional int32 guildID = 5 [default = 0];
  inline bool has_guildid() const;
  inline void clear_guildid();
  static const int kGuildIDFieldNumber = 5;
  inline ::google::protobuf::int32 guildid() const;
  inline void set_guildid(::google::protobuf::int32 value);
  
  // optional int64 ltSaveRevision = 6 [default = 0];
  inline bool has_ltsaverevision() const;
  inline void clear_ltsaverevision();
  static const int kLtSaveRevisionFieldNumber = 6;
  inline ::google::protobuf::int64 ltsaverevision() const;
  inline void set_ltsaverevision(::google::protobuf::int64 value);
  
  // repeated .DB_C_GvgSignMsg signGuildList = 7;
  inline int signguildlist_size() const;
  inline void clear_signguildlist();
  static const int kSignGuildListFieldNumber = 7;
  inline const ::google::protobuf::RepeatedPtrField< ::DB_C_GvgSignMsg >& signguildlist() const;
  inline ::google::protobuf::RepeatedPtrField< ::DB_C_GvgSignMsg >* mutable_signguildlist();
  inline const ::DB_C_GvgSignMsg& signguildlist(int index) const;
  inline ::DB_C_GvgSignMsg* mutable_signguildlist(int index);
  inline ::DB_C_GvgSignMsg* add_signguildlist();
  
  // repeated .DB_C_GvgBtlRet gvgBtl = 8;
  inline int gvgbtl_size() const;
  inline void clear_gvgbtl();
  static const int kGvgBtlFieldNumber = 8;
  inline const ::google::protobuf::RepeatedPtrField< ::DB_C_GvgBtlRet >& gvgbtl() const;
  inline ::google::protobuf::RepeatedPtrField< ::DB_C_GvgBtlRet >* mutable_gvgbtl();
  inline const ::DB_C_GvgBtlRet& gvgbtl(int index) const;
  inline ::DB_C_GvgBtlRet* mutable_gvgbtl(int index);
  inline ::DB_C_GvgBtlRet* add_gvgbtl();
  
  // optional int32 step = 9;
  inline bool has_step() const;
  inline void clear_step();
  static const int kStepFieldNumber = 9;
  inline ::google::protobuf::int32 step() const;
  inline void set_step(::google::protobuf::int32 value);
  
  // optional int32 guildStreak = 10;
  inline bool has_guildstreak() const;
  inline void clear_guildstreak();
  static const int kGuildStreakFieldNumber = 10;
  inline ::google::protobuf::int32 guildstreak() const;
  inline void set_guildstreak(::google::protobuf::int32 value);
  
  // optional int32 cityPoint = 11;
  inline bool has_citypoint() const;
  inline void clear_citypoint();
  static const int kCityPointFieldNumber = 11;
  inline ::google::protobuf::int32 citypoint() const;
  inline void set_citypoint(::google::protobuf::int32 value);
  
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::google::protobuf::int32 key_;
  ::google::protobuf::int32 region_;
  ::google::protobuf::int32 cityid_;
  ::google::protobuf::int32 activeflag_;
  ::google::protobuf::int32 guildid_;
  ::google::protobuf::int64 ltsaverevision_;
  ::google::protobuf::RepeatedPtrField< ::DB_C_GvgSignMsg > signguildlist_;
  ::google::protobuf::RepeatedPtrField< ::DB_C_GvgBtlRet > gvgbtl_;
  ::google::protobuf::int32 step_;
  ::google::protobuf::int32 guildstreak_;
  ::google::protobuf::int32 citypoint_;
  friend void  protobuf_AddDesc_countryDB_2eproto();
  friend void protobuf_AssignDesc_countryDB_2eproto();
  friend void protobuf_ShutdownFile_countryDB_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(11 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static DB_C_GvgCity* default_instance_;
};
// -------------------------------------------------------------------

class DB_C_GvgSignMsg : public ::google::protobuf::Message {
 public:
  DB_C_GvgSignMsg();
  virtual ~DB_C_GvgSignMsg();
  
  DB_C_GvgSignMsg(const DB_C_GvgSignMsg& from);
  
  inline DB_C_GvgSignMsg& operator=(const DB_C_GvgSignMsg& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const DB_C_GvgSignMsg& default_instance();
  void Swap(DB_C_GvgSignMsg* other);
  
  // implements Message ----------------------------------------------
  
  DB_C_GvgSignMsg* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DB_C_GvgSignMsg& from);
  void MergeFrom(const DB_C_GvgSignMsg& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const { _cached_size_ = size; }
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional int32 guildID = 1;
  inline bool has_guildid() const;
  inline void clear_guildid();
  static const int kGuildIDFieldNumber = 1;
  inline ::google::protobuf::int32 guildid() const;
  inline void set_guildid(::google::protobuf::int32 value);
  
  // optional int32 guildContribute = 2;
  inline bool has_guildcontribute() const;
  inline void clear_guildcontribute();
  static const int kGuildContributeFieldNumber = 2;
  inline ::google::protobuf::int32 guildcontribute() const;
  inline void set_guildcontribute(::google::protobuf::int32 value);
  
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::google::protobuf::int32 guildid_;
  ::google::protobuf::int32 guildcontribute_;
  friend void  protobuf_AddDesc_countryDB_2eproto();
  friend void protobuf_AssignDesc_countryDB_2eproto();
  friend void protobuf_ShutdownFile_countryDB_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static DB_C_GvgSignMsg* default_instance_;
};
// -------------------------------------------------------------------

class DB_C_GvgBtlRet : public ::google::protobuf::Message {
 public:
  DB_C_GvgBtlRet();
  virtual ~DB_C_GvgBtlRet();
  
  DB_C_GvgBtlRet(const DB_C_GvgBtlRet& from);
  
  inline DB_C_GvgBtlRet& operator=(const DB_C_GvgBtlRet& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const DB_C_GvgBtlRet& default_instance();
  void Swap(DB_C_GvgBtlRet* other);
  
  // implements Message ----------------------------------------------
  
  DB_C_GvgBtlRet* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DB_C_GvgBtlRet& from);
  void MergeFrom(const DB_C_GvgBtlRet& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const { _cached_size_ = size; }
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional int32 guildID1 = 1;
  inline bool has_guildid1() const;
  inline void clear_guildid1();
  static const int kGuildID1FieldNumber = 1;
  inline ::google::protobuf::int32 guildid1() const;
  inline void set_guildid1(::google::protobuf::int32 value);
  
  // optional int32 guildID2 = 2;
  inline bool has_guildid2() const;
  inline void clear_guildid2();
  static const int kGuildID2FieldNumber = 2;
  inline ::google::protobuf::int32 guildid2() const;
  inline void set_guildid2(::google::protobuf::int32 value);
  
  // optional int32 session = 3;
  inline bool has_session() const;
  inline void clear_session();
  static const int kSessionFieldNumber = 3;
  inline ::google::protobuf::int32 session() const;
  inline void set_session(::google::protobuf::int32 value);
  
  // optional int32 winGuildID = 4 [default = -1];
  inline bool has_winguildid() const;
  inline void clear_winguildid();
  static const int kWinGuildIDFieldNumber = 4;
  inline ::google::protobuf::int32 winguildid() const;
  inline void set_winguildid(::google::protobuf::int32 value);
  
  // optional int32 cityID = 5;
  inline bool has_cityid() const;
  inline void clear_cityid();
  static const int kCityIDFieldNumber = 5;
  inline ::google::protobuf::int32 cityid() const;
  inline void set_cityid(::google::protobuf::int32 value);
  
  // optional int32 round = 6;
  inline bool has_round() const;
  inline void clear_round();
  static const int kRoundFieldNumber = 6;
  inline ::google::protobuf::int32 round() const;
  inline void set_round(::google::protobuf::int32 value);
  
  // optional bool bWinByFight = 7 [default = true];
  inline bool has_bwinbyfight() const;
  inline void clear_bwinbyfight();
  static const int kBWinByFightFieldNumber = 7;
  inline bool bwinbyfight() const;
  inline void set_bwinbyfight(bool value);
  
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::google::protobuf::int32 guildid1_;
  ::google::protobuf::int32 guildid2_;
  ::google::protobuf::int32 session_;
  ::google::protobuf::int32 winguildid_;
  ::google::protobuf::int32 cityid_;
  ::google::protobuf::int32 round_;
  bool bwinbyfight_;
  friend void  protobuf_AddDesc_countryDB_2eproto();
  friend void protobuf_AssignDesc_countryDB_2eproto();
  friend void protobuf_ShutdownFile_countryDB_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(7 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static DB_C_GvgBtlRet* default_instance_;
};
// -------------------------------------------------------------------

class DB_C_GvgBtlPlayerMsg : public ::google::protobuf::Message {
 public:
  DB_C_GvgBtlPlayerMsg();
  virtual ~DB_C_GvgBtlPlayerMsg();
  
  DB_C_GvgBtlPlayerMsg(const DB_C_GvgBtlPlayerMsg& from);
  
  inline DB_C_GvgBtlPlayerMsg& operator=(const DB_C_GvgBtlPlayerMsg& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const DB_C_GvgBtlPlayerMsg& default_instance();
  void Swap(DB_C_GvgBtlPlayerMsg* other);
  
  // implements Message ----------------------------------------------
  
  DB_C_GvgBtlPlayerMsg* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DB_C_GvgBtlPlayerMsg& from);
  void MergeFrom(const DB_C_GvgBtlPlayerMsg& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const { _cached_size_ = size; }
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional int64 userID = 1;
  inline bool has_userid() const;
  inline void clear_userid();
  static const int kUserIDFieldNumber = 1;
  inline ::google::protobuf::int64 userid() const;
  inline void set_userid(::google::protobuf::int64 value);
  
  // optional int32 winTime = 2;
  inline bool has_wintime() const;
  inline void clear_wintime();
  static const int kWinTimeFieldNumber = 2;
  inline ::google::protobuf::int32 wintime() const;
  inline void set_wintime(::google::protobuf::int32 value);
  
  // optional int32 leftHp = 3;
  inline bool has_lefthp() const;
  inline void clear_lefthp();
  static const int kLeftHpFieldNumber = 3;
  inline ::google::protobuf::int32 lefthp() const;
  inline void set_lefthp(::google::protobuf::int32 value);
  
  // optional int32 way = 4;
  inline bool has_way() const;
  inline void clear_way();
  static const int kWayFieldNumber = 4;
  inline ::google::protobuf::int32 way() const;
  inline void set_way(::google::protobuf::int32 value);
  
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::google::protobuf::int64 userid_;
  ::google::protobuf::int32 wintime_;
  ::google::protobuf::int32 lefthp_;
  ::google::protobuf::int32 way_;
  friend void  protobuf_AddDesc_countryDB_2eproto();
  friend void protobuf_AssignDesc_countryDB_2eproto();
  friend void protobuf_ShutdownFile_countryDB_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static DB_C_GvgBtlPlayerMsg* default_instance_;
};
// -------------------------------------------------------------------

class DB_C_GvgBtlRetSave : public ::google::protobuf::Message {
 public:
  DB_C_GvgBtlRetSave();
  virtual ~DB_C_GvgBtlRetSave();
  
  DB_C_GvgBtlRetSave(const DB_C_GvgBtlRetSave& from);
  
  inline DB_C_GvgBtlRetSave& operator=(const DB_C_GvgBtlRetSave& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const DB_C_GvgBtlRetSave& default_instance();
  void Swap(DB_C_GvgBtlRetSave* other);
  
  // implements Message ----------------------------------------------
  
  DB_C_GvgBtlRetSave* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DB_C_GvgBtlRetSave& from);
  void MergeFrom(const DB_C_GvgBtlRetSave& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const { _cached_size_ = size; }
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional int32 winGuildID = 1;
  inline bool has_winguildid() const;
  inline void clear_winguildid();
  static const int kWinGuildIDFieldNumber = 1;
  inline ::google::protobuf::int32 winguildid() const;
  inline void set_winguildid(::google::protobuf::int32 value);
  
  // optional int32 guildID1 = 2;
  inline bool has_guildid1() const;
  inline void clear_guildid1();
  static const int kGuildID1FieldNumber = 2;
  inline ::google::protobuf::int32 guildid1() const;
  inline void set_guildid1(::google::protobuf::int32 value);
  
  // optional int32 guildID2 = 3;
  inline bool has_guildid2() const;
  inline void clear_guildid2();
  static const int kGuildID2FieldNumber = 3;
  inline ::google::protobuf::int32 guildid2() const;
  inline void set_guildid2(::google::protobuf::int32 value);
  
  // optional int32 session = 4;
  inline bool has_session() const;
  inline void clear_session();
  static const int kSessionFieldNumber = 4;
  inline ::google::protobuf::int32 session() const;
  inline void set_session(::google::protobuf::int32 value);
  
  // optional int32 cityID = 5;
  inline bool has_cityid() const;
  inline void clear_cityid();
  static const int kCityIDFieldNumber = 5;
  inline ::google::protobuf::int32 cityid() const;
  inline void set_cityid(::google::protobuf::int32 value);
  
  // optional int32 region = 6;
  inline bool has_region() const;
  inline void clear_region();
  static const int kRegionFieldNumber = 6;
  inline ::google::protobuf::int32 region() const;
  inline void set_region(::google::protobuf::int32 value);
  
  // repeated .DB_C_GvgBtlRetWay retWay = 7;
  inline int retway_size() const;
  inline void clear_retway();
  static const int kRetWayFieldNumber = 7;
  inline const ::google::protobuf::RepeatedPtrField< ::DB_C_GvgBtlRetWay >& retway() const;
  inline ::google::protobuf::RepeatedPtrField< ::DB_C_GvgBtlRetWay >* mutable_retway();
  inline const ::DB_C_GvgBtlRetWay& retway(int index) const;
  inline ::DB_C_GvgBtlRetWay* mutable_retway(int index);
  inline ::DB_C_GvgBtlRetWay* add_retway();
  
  // optional int32 playerCnt1 = 8;
  inline bool has_playercnt1() const;
  inline void clear_playercnt1();
  static const int kPlayerCnt1FieldNumber = 8;
  inline ::google::protobuf::int32 playercnt1() const;
  inline void set_playercnt1(::google::protobuf::int32 value);
  
  // optional int32 playerCnt2 = 9;
  inline bool has_playercnt2() const;
  inline void clear_playercnt2();
  static const int kPlayerCnt2FieldNumber = 9;
  inline ::google::protobuf::int32 playercnt2() const;
  inline void set_playercnt2(::google::protobuf::int32 value);
  
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::google::protobuf::int32 winguildid_;
  ::google::protobuf::int32 guildid1_;
  ::google::protobuf::int32 guildid2_;
  ::google::protobuf::int32 session_;
  ::google::protobuf::int32 cityid_;
  ::google::protobuf::int32 region_;
  ::google::protobuf::RepeatedPtrField< ::DB_C_GvgBtlRetWay > retway_;
  ::google::protobuf::int32 playercnt1_;
  ::google::protobuf::int32 playercnt2_;
  friend void  protobuf_AddDesc_countryDB_2eproto();
  friend void protobuf_AssignDesc_countryDB_2eproto();
  friend void protobuf_ShutdownFile_countryDB_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(9 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static DB_C_GvgBtlRetSave* default_instance_;
};
// -------------------------------------------------------------------

class DB_C_GvgBtlRetWay : public ::google::protobuf::Message {
 public:
  DB_C_GvgBtlRetWay();
  virtual ~DB_C_GvgBtlRetWay();
  
  DB_C_GvgBtlRetWay(const DB_C_GvgBtlRetWay& from);
  
  inline DB_C_GvgBtlRetWay& operator=(const DB_C_GvgBtlRetWay& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const DB_C_GvgBtlRetWay& default_instance();
  void Swap(DB_C_GvgBtlRetWay* other);
  
  // implements Message ----------------------------------------------
  
  DB_C_GvgBtlRetWay* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DB_C_GvgBtlRetWay& from);
  void MergeFrom(const DB_C_GvgBtlRetWay& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const { _cached_size_ = size; }
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional int32 way = 1;
  inline bool has_way() const;
  inline void clear_way();
  static const int kWayFieldNumber = 1;
  inline ::google::protobuf::int32 way() const;
  inline void set_way(::google::protobuf::int32 value);
  
  // optional int32 winGuildID = 2;
  inline bool has_winguildid() const;
  inline void clear_winguildid();
  static const int kWinGuildIDFieldNumber = 2;
  inline ::google::protobuf::int32 winguildid() const;
  inline void set_winguildid(::google::protobuf::int32 value);
  
  // optional int32 guildID1 = 3;
  inline bool has_guildid1() const;
  inline void clear_guildid1();
  static const int kGuildID1FieldNumber = 3;
  inline ::google::protobuf::int32 guildid1() const;
  inline void set_guildid1(::google::protobuf::int32 value);
  
  // optional int32 guildID2 = 4;
  inline bool has_guildid2() const;
  inline void clear_guildid2();
  static const int kGuildID2FieldNumber = 4;
  inline ::google::protobuf::int32 guildid2() const;
  inline void set_guildid2(::google::protobuf::int32 value);
  
  // optional int32 session = 5;
  inline bool has_session() const;
  inline void clear_session();
  static const int kSessionFieldNumber = 5;
  inline ::google::protobuf::int32 session() const;
  inline void set_session(::google::protobuf::int32 value);
  
  // optional int32 cityID = 6;
  inline bool has_cityid() const;
  inline void clear_cityid();
  static const int kCityIDFieldNumber = 6;
  inline ::google::protobuf::int32 cityid() const;
  inline void set_cityid(::google::protobuf::int32 value);
  
  // repeated .DB_C_GuildBtlUser userLst1 = 7;
  inline int userlst1_size() const;
  inline void clear_userlst1();
  static const int kUserLst1FieldNumber = 7;
  inline const ::google::protobuf::RepeatedPtrField< ::DB_C_GuildBtlUser >& userlst1() const;
  inline ::google::protobuf::RepeatedPtrField< ::DB_C_GuildBtlUser >* mutable_userlst1();
  inline const ::DB_C_GuildBtlUser& userlst1(int index) const;
  inline ::DB_C_GuildBtlUser* mutable_userlst1(int index);
  inline ::DB_C_GuildBtlUser* add_userlst1();
  
  // repeated .DB_C_GuildBtlUser userLst2 = 8;
  inline int userlst2_size() const;
  inline void clear_userlst2();
  static const int kUserLst2FieldNumber = 8;
  inline const ::google::protobuf::RepeatedPtrField< ::DB_C_GuildBtlUser >& userlst2() const;
  inline ::google::protobuf::RepeatedPtrField< ::DB_C_GuildBtlUser >* mutable_userlst2();
  inline const ::DB_C_GuildBtlUser& userlst2(int index) const;
  inline ::DB_C_GuildBtlUser* mutable_userlst2(int index);
  inline ::DB_C_GuildBtlUser* add_userlst2();
  
  // repeated .DB_C_GuildBtlUserPK pkLst = 9;
  inline int pklst_size() const;
  inline void clear_pklst();
  static const int kPkLstFieldNumber = 9;
  inline const ::google::protobuf::RepeatedPtrField< ::DB_C_GuildBtlUserPK >& pklst() const;
  inline ::google::protobuf::RepeatedPtrField< ::DB_C_GuildBtlUserPK >* mutable_pklst();
  inline const ::DB_C_GuildBtlUserPK& pklst(int index) const;
  inline ::DB_C_GuildBtlUserPK* mutable_pklst(int index);
  inline ::DB_C_GuildBtlUserPK* add_pklst();
  
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::google::protobuf::int32 way_;
  ::google::protobuf::int32 winguildid_;
  ::google::protobuf::int32 guildid1_;
  ::google::protobuf::int32 guildid2_;
  ::google::protobuf::int32 session_;
  ::google::protobuf::int32 cityid_;
  ::google::protobuf::RepeatedPtrField< ::DB_C_GuildBtlUser > userlst1_;
  ::google::protobuf::RepeatedPtrField< ::DB_C_GuildBtlUser > userlst2_;
  ::google::protobuf::RepeatedPtrField< ::DB_C_GuildBtlUserPK > pklst_;
  friend void  protobuf_AddDesc_countryDB_2eproto();
  friend void protobuf_AssignDesc_countryDB_2eproto();
  friend void protobuf_ShutdownFile_countryDB_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(9 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static DB_C_GvgBtlRetWay* default_instance_;
};
// -------------------------------------------------------------------

class DB_C_Gvg_FightSendData : public ::google::protobuf::Message {
 public:
  DB_C_Gvg_FightSendData();
  virtual ~DB_C_Gvg_FightSendData();
  
  DB_C_Gvg_FightSendData(const DB_C_Gvg_FightSendData& from);
  
  inline DB_C_Gvg_FightSendData& operator=(const DB_C_Gvg_FightSendData& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const DB_C_Gvg_FightSendData& default_instance();
  void Swap(DB_C_Gvg_FightSendData* other);
  
  // implements Message ----------------------------------------------
  
  DB_C_Gvg_FightSendData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DB_C_Gvg_FightSendData& from);
  void MergeFrom(const DB_C_Gvg_FightSendData& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const { _cached_size_ = size; }
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional .DB_C_GuildBtlUser btlUser = 1;
  inline bool has_btluser() const;
  inline void clear_btluser();
  static const int kBtlUserFieldNumber = 1;
  inline const ::DB_C_GuildBtlUser& btluser() const;
  inline ::DB_C_GuildBtlUser* mutable_btluser();
  
  // repeated .DB_C_GuildBtlSendDataUnit fightsenddata = 2;
  inline int fightsenddata_size() const;
  inline void clear_fightsenddata();
  static const int kFightsenddataFieldNumber = 2;
  inline const ::google::protobuf::RepeatedPtrField< ::DB_C_GuildBtlSendDataUnit >& fightsenddata() const;
  inline ::google::protobuf::RepeatedPtrField< ::DB_C_GuildBtlSendDataUnit >* mutable_fightsenddata();
  inline const ::DB_C_GuildBtlSendDataUnit& fightsenddata(int index) const;
  inline ::DB_C_GuildBtlSendDataUnit* mutable_fightsenddata(int index);
  inline ::DB_C_GuildBtlSendDataUnit* add_fightsenddata();
  
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::DB_C_GuildBtlUser* btluser_;
  ::google::protobuf::RepeatedPtrField< ::DB_C_GuildBtlSendDataUnit > fightsenddata_;
  friend void  protobuf_AddDesc_countryDB_2eproto();
  friend void protobuf_AssignDesc_countryDB_2eproto();
  friend void protobuf_ShutdownFile_countryDB_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static DB_C_Gvg_FightSendData* default_instance_;
};
// -------------------------------------------------------------------

class DB_C_GVG_Msg : public ::google::protobuf::Message {
 public:
  DB_C_GVG_Msg();
  virtual ~DB_C_GVG_Msg();
  
  DB_C_GVG_Msg(const DB_C_GVG_Msg& from);
  
  inline DB_C_GVG_Msg& operator=(const DB_C_GVG_Msg& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const DB_C_GVG_Msg& default_instance();
  void Swap(DB_C_GVG_Msg* other);
  
  // implements Message ----------------------------------------------
  
  DB_C_GVG_Msg* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DB_C_GVG_Msg& from);
  void MergeFrom(const DB_C_GVG_Msg& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const { _cached_size_ = size; }
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional int32 flag = 1 [default = 0];
  inline bool has_flag() const;
  inline void clear_flag();
  static const int kFlagFieldNumber = 1;
  inline ::google::protobuf::int32 flag() const;
  inline void set_flag(::google::protobuf::int32 value);
  
  // repeated int32 signCity = 2;
  inline int signcity_size() const;
  inline void clear_signcity();
  static const int kSignCityFieldNumber = 2;
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >& signcity() const
      ;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >* mutable_signcity();
  inline ::google::protobuf::int32 signcity(int index) const;
  inline void set_signcity(int index, ::google::protobuf::int32 value);
  inline void add_signcity(::google::protobuf::int32 value);
  
  // optional int32 controlCity = 3;
  inline bool has_controlcity() const;
  inline void clear_controlcity();
  static const int kControlCityFieldNumber = 3;
  inline ::google::protobuf::int32 controlcity() const;
  inline void set_controlcity(::google::protobuf::int32 value);
  
  // optional int32 contribute = 4;
  inline bool has_contribute() const;
  inline void clear_contribute();
  static const int kContributeFieldNumber = 4;
  inline ::google::protobuf::int32 contribute() const;
  inline void set_contribute(::google::protobuf::int32 value);
  
  // repeated .DB_C_GvgBtlCityMsg userWay = 5;
  inline int userway_size() const;
  inline void clear_userway();
  static const int kUserWayFieldNumber = 5;
  inline const ::google::protobuf::RepeatedPtrField< ::DB_C_GvgBtlCityMsg >& userway() const;
  inline ::google::protobuf::RepeatedPtrField< ::DB_C_GvgBtlCityMsg >* mutable_userway();
  inline const ::DB_C_GvgBtlCityMsg& userway(int index) const;
  inline ::DB_C_GvgBtlCityMsg* mutable_userway(int index);
  inline ::DB_C_GvgBtlCityMsg* add_userway();
  
  // repeated .DB_C_GvgBtlAddProp addProp = 6;
  inline int addprop_size() const;
  inline void clear_addprop();
  static const int kAddPropFieldNumber = 6;
  inline const ::google::protobuf::RepeatedPtrField< ::DB_C_GvgBtlAddProp >& addprop() const;
  inline ::google::protobuf::RepeatedPtrField< ::DB_C_GvgBtlAddProp >* mutable_addprop();
  inline const ::DB_C_GvgBtlAddProp& addprop(int index) const;
  inline ::DB_C_GvgBtlAddProp* mutable_addprop(int index);
  inline ::DB_C_GvgBtlAddProp* add_addprop();
  
  // optional bool fightEnd = 7 [default = false];
  inline bool has_fightend() const;
  inline void clear_fightend();
  static const int kFightEndFieldNumber = 7;
  inline bool fightend() const;
  inline void set_fightend(bool value);
  
  // optional int32 lastContributeTime = 8 [default = 0];
  inline bool has_lastcontributetime() const;
  inline void clear_lastcontributetime();
  static const int kLastContributeTimeFieldNumber = 8;
  inline ::google::protobuf::int32 lastcontributetime() const;
  inline void set_lastcontributetime(::google::protobuf::int32 value);
  
  // optional int32 state = 9 [default = 0];
  inline bool has_state() const;
  inline void clear_state();
  static const int kStateFieldNumber = 9;
  inline ::google::protobuf::int32 state() const;
  inline void set_state(::google::protobuf::int32 value);
  
  // optional int32 contributeRecorcd = 10;
  inline bool has_contributerecorcd() const;
  inline void clear_contributerecorcd();
  static const int kContributeRecorcdFieldNumber = 10;
  inline ::google::protobuf::int32 contributerecorcd() const;
  inline void set_contributerecorcd(::google::protobuf::int32 value);
  
  // repeated .DB_C_GVG_Reward_Record rewardRecord = 11;
  inline int rewardrecord_size() const;
  inline void clear_rewardrecord();
  static const int kRewardRecordFieldNumber = 11;
  inline const ::google::protobuf::RepeatedPtrField< ::DB_C_GVG_Reward_Record >& rewardrecord() const;
  inline ::google::protobuf::RepeatedPtrField< ::DB_C_GVG_Reward_Record >* mutable_rewardrecord();
  inline const ::DB_C_GVG_Reward_Record& rewardrecord(int index) const;
  inline ::DB_C_GVG_Reward_Record* mutable_rewardrecord(int index);
  inline ::DB_C_GVG_Reward_Record* add_rewardrecord();
  
  // repeated int64 playerID = 12;
  inline int playerid_size() const;
  inline void clear_playerid();
  static const int kPlayerIDFieldNumber = 12;
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >& playerid() const
      ;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >* mutable_playerid();
  inline ::google::protobuf::int64 playerid(int index) const;
  inline void set_playerid(int index, ::google::protobuf::int64 value);
  inline void add_playerid(::google::protobuf::int64 value);
  
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::google::protobuf::int32 flag_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > signcity_;
  ::google::protobuf::int32 controlcity_;
  ::google::protobuf::int32 contribute_;
  ::google::protobuf::RepeatedPtrField< ::DB_C_GvgBtlCityMsg > userway_;
  ::google::protobuf::RepeatedPtrField< ::DB_C_GvgBtlAddProp > addprop_;
  bool fightend_;
  ::google::protobuf::int32 lastcontributetime_;
  ::google::protobuf::int32 state_;
  ::google::protobuf::int32 contributerecorcd_;
  ::google::protobuf::RepeatedPtrField< ::DB_C_GVG_Reward_Record > rewardrecord_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int64 > playerid_;
  friend void  protobuf_AddDesc_countryDB_2eproto();
  friend void protobuf_AssignDesc_countryDB_2eproto();
  friend void protobuf_ShutdownFile_countryDB_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(12 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static DB_C_GVG_Msg* default_instance_;
};
// -------------------------------------------------------------------

class DB_C_GvgBtlCityMsg : public ::google::protobuf::Message {
 public:
  DB_C_GvgBtlCityMsg();
  virtual ~DB_C_GvgBtlCityMsg();
  
  DB_C_GvgBtlCityMsg(const DB_C_GvgBtlCityMsg& from);
  
  inline DB_C_GvgBtlCityMsg& operator=(const DB_C_GvgBtlCityMsg& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const DB_C_GvgBtlCityMsg& default_instance();
  void Swap(DB_C_GvgBtlCityMsg* other);
  
  // implements Message ----------------------------------------------
  
  DB_C_GvgBtlCityMsg* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DB_C_GvgBtlCityMsg& from);
  void MergeFrom(const DB_C_GvgBtlCityMsg& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const { _cached_size_ = size; }
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional int32 cityID = 1;
  inline bool has_cityid() const;
  inline void clear_cityid();
  static const int kCityIDFieldNumber = 1;
  inline ::google::protobuf::int32 cityid() const;
  inline void set_cityid(::google::protobuf::int32 value);
  
  // repeated int64 userWay1 = 2;
  inline int userway1_size() const;
  inline void clear_userway1();
  static const int kUserWay1FieldNumber = 2;
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >& userway1() const
      ;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >* mutable_userway1();
  inline ::google::protobuf::int64 userway1(int index) const;
  inline void set_userway1(int index, ::google::protobuf::int64 value);
  inline void add_userway1(::google::protobuf::int64 value);
  
  // optional int32 signupCnt = 3;
  inline bool has_signupcnt() const;
  inline void clear_signupcnt();
  static const int kSignupCntFieldNumber = 3;
  inline ::google::protobuf::int32 signupcnt() const;
  inline void set_signupcnt(::google::protobuf::int32 value);
  
  // optional int32 session = 4;
  inline bool has_session() const;
  inline void clear_session();
  static const int kSessionFieldNumber = 4;
  inline ::google::protobuf::int32 session() const;
  inline void set_session(::google::protobuf::int32 value);
  
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::google::protobuf::int32 cityid_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int64 > userway1_;
  ::google::protobuf::int32 signupcnt_;
  ::google::protobuf::int32 session_;
  friend void  protobuf_AddDesc_countryDB_2eproto();
  friend void protobuf_AssignDesc_countryDB_2eproto();
  friend void protobuf_ShutdownFile_countryDB_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static DB_C_GvgBtlCityMsg* default_instance_;
};
// -------------------------------------------------------------------

class DB_C_GvgBtlAddProp : public ::google::protobuf::Message {
 public:
  DB_C_GvgBtlAddProp();
  virtual ~DB_C_GvgBtlAddProp();
  
  DB_C_GvgBtlAddProp(const DB_C_GvgBtlAddProp& from);
  
  inline DB_C_GvgBtlAddProp& operator=(const DB_C_GvgBtlAddProp& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const DB_C_GvgBtlAddProp& default_instance();
  void Swap(DB_C_GvgBtlAddProp* other);
  
  // implements Message ----------------------------------------------
  
  DB_C_GvgBtlAddProp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DB_C_GvgBtlAddProp& from);
  void MergeFrom(const DB_C_GvgBtlAddProp& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const { _cached_size_ = size; }
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional int64 userID = 1;
  inline bool has_userid() const;
  inline void clear_userid();
  static const int kUserIDFieldNumber = 1;
  inline ::google::protobuf::int64 userid() const;
  inline void set_userid(::google::protobuf::int64 value);
  
  // optional int32 addAtkPct = 2;
  inline bool has_addatkpct() const;
  inline void clear_addatkpct();
  static const int kAddAtkPctFieldNumber = 2;
  inline ::google::protobuf::int32 addatkpct() const;
  inline void set_addatkpct(::google::protobuf::int32 value);
  
  // optional int32 addBloodPct = 3;
  inline bool has_addbloodpct() const;
  inline void clear_addbloodpct();
  static const int kAddBloodPctFieldNumber = 3;
  inline ::google::protobuf::int32 addbloodpct() const;
  inline void set_addbloodpct(::google::protobuf::int32 value);
  
  // optional int32 maxWinTime = 4;
  inline bool has_maxwintime() const;
  inline void clear_maxwintime();
  static const int kMaxWinTimeFieldNumber = 4;
  inline ::google::protobuf::int32 maxwintime() const;
  inline void set_maxwintime(::google::protobuf::int32 value);
  
  // optional int32 winTime = 5;
  inline bool has_wintime() const;
  inline void clear_wintime();
  static const int kWinTimeFieldNumber = 5;
  inline ::google::protobuf::int32 wintime() const;
  inline void set_wintime(::google::protobuf::int32 value);
  
  // optional int32 leftHP = 6;
  inline bool has_lefthp() const;
  inline void clear_lefthp();
  static const int kLeftHPFieldNumber = 6;
  inline ::google::protobuf::int32 lefthp() const;
  inline void set_lefthp(::google::protobuf::int32 value);
  
  // optional int32 session = 7;
  inline bool has_session() const;
  inline void clear_session();
  static const int kSessionFieldNumber = 7;
  inline ::google::protobuf::int32 session() const;
  inline void set_session(::google::protobuf::int32 value);
  
  // optional string name = 8;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 8;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  
  // optional string pic = 9;
  inline bool has_pic() const;
  inline void clear_pic();
  static const int kPicFieldNumber = 9;
  inline const ::std::string& pic() const;
  inline void set_pic(const ::std::string& value);
  inline void set_pic(const char* value);
  inline void set_pic(const char* value, size_t size);
  inline ::std::string* mutable_pic();
  
  // optional bool isOffLine = 10 [default = false];
  inline bool has_isoffline() const;
  inline void clear_isoffline();
  static const int kIsOffLineFieldNumber = 10;
  inline bool isoffline() const;
  inline void set_isoffline(bool value);
  
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::google::protobuf::int64 userid_;
  ::google::protobuf::int32 addatkpct_;
  ::google::protobuf::int32 addbloodpct_;
  ::google::protobuf::int32 maxwintime_;
  ::google::protobuf::int32 wintime_;
  ::google::protobuf::int32 lefthp_;
  ::google::protobuf::int32 session_;
  ::std::string* name_;
  static const ::std::string _default_name_;
  ::std::string* pic_;
  static const ::std::string _default_pic_;
  bool isoffline_;
  friend void  protobuf_AddDesc_countryDB_2eproto();
  friend void protobuf_AssignDesc_countryDB_2eproto();
  friend void protobuf_ShutdownFile_countryDB_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(10 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static DB_C_GvgBtlAddProp* default_instance_;
};
// -------------------------------------------------------------------

class DB_C_PubGvgBtlInfo : public ::google::protobuf::Message {
 public:
  DB_C_PubGvgBtlInfo();
  virtual ~DB_C_PubGvgBtlInfo();
  
  DB_C_PubGvgBtlInfo(const DB_C_PubGvgBtlInfo& from);
  
  inline DB_C_PubGvgBtlInfo& operator=(const DB_C_PubGvgBtlInfo& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const DB_C_PubGvgBtlInfo& default_instance();
  void Swap(DB_C_PubGvgBtlInfo* other);
  
  // implements Message ----------------------------------------------
  
  DB_C_PubGvgBtlInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DB_C_PubGvgBtlInfo& from);
  void MergeFrom(const DB_C_PubGvgBtlInfo& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const { _cached_size_ = size; }
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional int32 curSession = 1;
  inline bool has_cursession() const;
  inline void clear_cursession();
  static const int kCurSessionFieldNumber = 1;
  inline ::google::protobuf::int32 cursession() const;
  inline void set_cursession(::google::protobuf::int32 value);
  
  // optional int32 flag = 2;
  inline bool has_flag() const;
  inline void clear_flag();
  static const int kFlagFieldNumber = 2;
  inline ::google::protobuf::int32 flag() const;
  inline void set_flag(::google::protobuf::int32 value);
  
  // optional bool fightOver = 3 [default = false];
  inline bool has_fightover() const;
  inline void clear_fightover();
  static const int kFightOverFieldNumber = 3;
  inline bool fightover() const;
  inline void set_fightover(bool value);
  
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::google::protobuf::int32 cursession_;
  ::google::protobuf::int32 flag_;
  bool fightover_;
  friend void  protobuf_AddDesc_countryDB_2eproto();
  friend void protobuf_AssignDesc_countryDB_2eproto();
  friend void protobuf_ShutdownFile_countryDB_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static DB_C_PubGvgBtlInfo* default_instance_;
};
// -------------------------------------------------------------------

class DB_C_GVG_Reward_Record : public ::google::protobuf::Message {
 public:
  DB_C_GVG_Reward_Record();
  virtual ~DB_C_GVG_Reward_Record();
  
  DB_C_GVG_Reward_Record(const DB_C_GVG_Reward_Record& from);
  
  inline DB_C_GVG_Reward_Record& operator=(const DB_C_GVG_Reward_Record& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const DB_C_GVG_Reward_Record& default_instance();
  void Swap(DB_C_GVG_Reward_Record* other);
  
  // implements Message ----------------------------------------------
  
  DB_C_GVG_Reward_Record* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DB_C_GVG_Reward_Record& from);
  void MergeFrom(const DB_C_GVG_Reward_Record& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const { _cached_size_ = size; }
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional int32 pos = 1;
  inline bool has_pos() const;
  inline void clear_pos();
  static const int kPosFieldNumber = 1;
  inline ::google::protobuf::int32 pos() const;
  inline void set_pos(::google::protobuf::int32 value);
  
  // optional int32 cnt = 2;
  inline bool has_cnt() const;
  inline void clear_cnt();
  static const int kCntFieldNumber = 2;
  inline ::google::protobuf::int32 cnt() const;
  inline void set_cnt(::google::protobuf::int32 value);
  
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::google::protobuf::int32 pos_;
  ::google::protobuf::int32 cnt_;
  friend void  protobuf_AddDesc_countryDB_2eproto();
  friend void protobuf_AssignDesc_countryDB_2eproto();
  friend void protobuf_ShutdownFile_countryDB_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static DB_C_GVG_Reward_Record* default_instance_;
};
// -------------------------------------------------------------------

class DB_C_WpcRank : public ::google::protobuf::Message {
 public:
  DB_C_WpcRank();
  virtual ~DB_C_WpcRank();
  
  DB_C_WpcRank(const DB_C_WpcRank& from);
  
  inline DB_C_WpcRank& operator=(const DB_C_WpcRank& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const DB_C_WpcRank& default_instance();
  void Swap(DB_C_WpcRank* other);
  
  // implements Message ----------------------------------------------
  
  DB_C_WpcRank* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DB_C_WpcRank& from);
  void MergeFrom(const DB_C_WpcRank& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const { _cached_size_ = size; }
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // repeated .DB_C_WpcRankUnit nowRank = 1;
  inline int nowrank_size() const;
  inline void clear_nowrank();
  static const int kNowRankFieldNumber = 1;
  inline const ::google::protobuf::RepeatedPtrField< ::DB_C_WpcRankUnit >& nowrank() const;
  inline ::google::protobuf::RepeatedPtrField< ::DB_C_WpcRankUnit >* mutable_nowrank();
  inline const ::DB_C_WpcRankUnit& nowrank(int index) const;
  inline ::DB_C_WpcRankUnit* mutable_nowrank(int index);
  inline ::DB_C_WpcRankUnit* add_nowrank();
  
  // repeated .DB_C_WpcRankUnit lastRank = 2;
  inline int lastrank_size() const;
  inline void clear_lastrank();
  static const int kLastRankFieldNumber = 2;
  inline const ::google::protobuf::RepeatedPtrField< ::DB_C_WpcRankUnit >& lastrank() const;
  inline ::google::protobuf::RepeatedPtrField< ::DB_C_WpcRankUnit >* mutable_lastrank();
  inline const ::DB_C_WpcRankUnit& lastrank(int index) const;
  inline ::DB_C_WpcRankUnit* mutable_lastrank(int index);
  inline ::DB_C_WpcRankUnit* add_lastrank();
  
  // optional int32 activeID = 3 [default = 0];
  inline bool has_activeid() const;
  inline void clear_activeid();
  static const int kActiveIDFieldNumber = 3;
  inline ::google::protobuf::int32 activeid() const;
  inline void set_activeid(::google::protobuf::int32 value);
  
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::google::protobuf::RepeatedPtrField< ::DB_C_WpcRankUnit > nowrank_;
  ::google::protobuf::RepeatedPtrField< ::DB_C_WpcRankUnit > lastrank_;
  ::google::protobuf::int32 activeid_;
  friend void  protobuf_AddDesc_countryDB_2eproto();
  friend void protobuf_AssignDesc_countryDB_2eproto();
  friend void protobuf_ShutdownFile_countryDB_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static DB_C_WpcRank* default_instance_;
};
// -------------------------------------------------------------------

class DB_C_WpcRankUnit : public ::google::protobuf::Message {
 public:
  DB_C_WpcRankUnit();
  virtual ~DB_C_WpcRankUnit();
  
  DB_C_WpcRankUnit(const DB_C_WpcRankUnit& from);
  
  inline DB_C_WpcRankUnit& operator=(const DB_C_WpcRankUnit& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const DB_C_WpcRankUnit& default_instance();
  void Swap(DB_C_WpcRankUnit* other);
  
  // implements Message ----------------------------------------------
  
  DB_C_WpcRankUnit* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DB_C_WpcRankUnit& from);
  void MergeFrom(const DB_C_WpcRankUnit& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const { _cached_size_ = size; }
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional string uid = 1;
  inline bool has_uid() const;
  inline void clear_uid();
  static const int kUidFieldNumber = 1;
  inline const ::std::string& uid() const;
  inline void set_uid(const ::std::string& value);
  inline void set_uid(const char* value);
  inline void set_uid(const char* value, size_t size);
  inline ::std::string* mutable_uid();
  
  // optional string name = 2;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 2;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  
  // optional string pic = 3;
  inline bool has_pic() const;
  inline void clear_pic();
  static const int kPicFieldNumber = 3;
  inline const ::std::string& pic() const;
  inline void set_pic(const ::std::string& value);
  inline void set_pic(const char* value);
  inline void set_pic(const char* value, size_t size);
  inline ::std::string* mutable_pic();
  
  // optional int32 countryid = 4;
  inline bool has_countryid() const;
  inline void clear_countryid();
  static const int kCountryidFieldNumber = 4;
  inline ::google::protobuf::int32 countryid() const;
  inline void set_countryid(::google::protobuf::int32 value);
  
  // optional string guildName = 5;
  inline bool has_guildname() const;
  inline void clear_guildname();
  static const int kGuildNameFieldNumber = 5;
  inline const ::std::string& guildname() const;
  inline void set_guildname(const ::std::string& value);
  inline void set_guildname(const char* value);
  inline void set_guildname(const char* value, size_t size);
  inline ::std::string* mutable_guildname();
  
  // optional int32 fightPoint = 6;
  inline bool has_fightpoint() const;
  inline void clear_fightpoint();
  static const int kFightPointFieldNumber = 6;
  inline ::google::protobuf::int32 fightpoint() const;
  inline void set_fightpoint(::google::protobuf::int32 value);
  
  // optional int32 level = 7;
  inline bool has_level() const;
  inline void clear_level();
  static const int kLevelFieldNumber = 7;
  inline ::google::protobuf::int32 level() const;
  inline void set_level(::google::protobuf::int32 value);
  
  // optional int32 exploreCnt = 8;
  inline bool has_explorecnt() const;
  inline void clear_explorecnt();
  static const int kExploreCntFieldNumber = 8;
  inline ::google::protobuf::int32 explorecnt() const;
  inline void set_explorecnt(::google::protobuf::int32 value);
  
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::std::string* uid_;
  static const ::std::string _default_uid_;
  ::std::string* name_;
  static const ::std::string _default_name_;
  ::std::string* pic_;
  static const ::std::string _default_pic_;
  ::google::protobuf::int32 countryid_;
  ::std::string* guildname_;
  static const ::std::string _default_guildname_;
  ::google::protobuf::int32 fightpoint_;
  ::google::protobuf::int32 level_;
  ::google::protobuf::int32 explorecnt_;
  friend void  protobuf_AddDesc_countryDB_2eproto();
  friend void protobuf_AssignDesc_countryDB_2eproto();
  friend void protobuf_ShutdownFile_countryDB_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(8 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static DB_C_WpcRankUnit* default_instance_;
};
// -------------------------------------------------------------------

class DB_C_WarGameData : public ::google::protobuf::Message {
 public:
  DB_C_WarGameData();
  virtual ~DB_C_WarGameData();
  
  DB_C_WarGameData(const DB_C_WarGameData& from);
  
  inline DB_C_WarGameData& operator=(const DB_C_WarGameData& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const DB_C_WarGameData& default_instance();
  void Swap(DB_C_WarGameData* other);
  
  // implements Message ----------------------------------------------
  
  DB_C_WarGameData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DB_C_WarGameData& from);
  void MergeFrom(const DB_C_WarGameData& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const { _cached_size_ = size; }
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required int32 key = 1;
  inline bool has_key() const;
  inline void clear_key();
  static const int kKeyFieldNumber = 1;
  inline ::google::protobuf::int32 key() const;
  inline void set_key(::google::protobuf::int32 value);
  
  // required int32 region = 2;
  inline bool has_region() const;
  inline void clear_region();
  static const int kRegionFieldNumber = 2;
  inline ::google::protobuf::int32 region() const;
  inline void set_region(::google::protobuf::int32 value);
  
  // repeated .DB_C_WarGameSite siteList = 3;
  inline int sitelist_size() const;
  inline void clear_sitelist();
  static const int kSiteListFieldNumber = 3;
  inline const ::google::protobuf::RepeatedPtrField< ::DB_C_WarGameSite >& sitelist() const;
  inline ::google::protobuf::RepeatedPtrField< ::DB_C_WarGameSite >* mutable_sitelist();
  inline const ::DB_C_WarGameSite& sitelist(int index) const;
  inline ::DB_C_WarGameSite* mutable_sitelist(int index);
  inline ::DB_C_WarGameSite* add_sitelist();
  
  // optional int64 ltSaveRevision = 4 [default = 0];
  inline bool has_ltsaverevision() const;
  inline void clear_ltsaverevision();
  static const int kLtSaveRevisionFieldNumber = 4;
  inline ::google::protobuf::int64 ltsaverevision() const;
  inline void set_ltsaverevision(::google::protobuf::int64 value);
  
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::google::protobuf::int32 key_;
  ::google::protobuf::int32 region_;
  ::google::protobuf::RepeatedPtrField< ::DB_C_WarGameSite > sitelist_;
  ::google::protobuf::int64 ltsaverevision_;
  friend void  protobuf_AddDesc_countryDB_2eproto();
  friend void protobuf_AssignDesc_countryDB_2eproto();
  friend void protobuf_ShutdownFile_countryDB_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static DB_C_WarGameData* default_instance_;
};
// -------------------------------------------------------------------

class DB_C_WarGameSite : public ::google::protobuf::Message {
 public:
  DB_C_WarGameSite();
  virtual ~DB_C_WarGameSite();
  
  DB_C_WarGameSite(const DB_C_WarGameSite& from);
  
  inline DB_C_WarGameSite& operator=(const DB_C_WarGameSite& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const DB_C_WarGameSite& default_instance();
  void Swap(DB_C_WarGameSite* other);
  
  // implements Message ----------------------------------------------
  
  DB_C_WarGameSite* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DB_C_WarGameSite& from);
  void MergeFrom(const DB_C_WarGameSite& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const { _cached_size_ = size; }
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required int32 sitID = 1;
  inline bool has_sitid() const;
  inline void clear_sitid();
  static const int kSitIDFieldNumber = 1;
  inline ::google::protobuf::int32 sitid() const;
  inline void set_sitid(::google::protobuf::int32 value);
  
  // optional int32 sitLv = 2;
  inline bool has_sitlv() const;
  inline void clear_sitlv();
  static const int kSitLvFieldNumber = 2;
  inline ::google::protobuf::int32 sitlv() const;
  inline void set_sitlv(::google::protobuf::int32 value);
  
  // optional int32 startTime = 3;
  inline bool has_starttime() const;
  inline void clear_starttime();
  static const int kStartTimeFieldNumber = 3;
  inline ::google::protobuf::int32 starttime() const;
  inline void set_starttime(::google::protobuf::int32 value);
  
  // optional int32 endTime = 4;
  inline bool has_endtime() const;
  inline void clear_endtime();
  static const int kEndTimeFieldNumber = 4;
  inline ::google::protobuf::int32 endtime() const;
  inline void set_endtime(::google::protobuf::int32 value);
  
  // optional int32 delayNum = 5 [default = 0];
  inline bool has_delaynum() const;
  inline void clear_delaynum();
  static const int kDelayNumFieldNumber = 5;
  inline ::google::protobuf::int32 delaynum() const;
  inline void set_delaynum(::google::protobuf::int32 value);
  
  // optional string uid = 6;
  inline bool has_uid() const;
  inline void clear_uid();
  static const int kUidFieldNumber = 6;
  inline const ::std::string& uid() const;
  inline void set_uid(const ::std::string& value);
  inline void set_uid(const char* value);
  inline void set_uid(const char* value, size_t size);
  inline ::std::string* mutable_uid();
  
  // optional string name = 7;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 7;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  
  // optional int32 countryID = 8 [default = 0];
  inline bool has_countryid() const;
  inline void clear_countryid();
  static const int kCountryIDFieldNumber = 8;
  inline ::google::protobuf::int32 countryid() const;
  inline void set_countryid(::google::protobuf::int32 value);
  
  // optional int32 power = 9 [default = 0];
  inline bool has_power() const;
  inline void clear_power();
  static const int kPowerFieldNumber = 9;
  inline ::google::protobuf::int32 power() const;
  inline void set_power(::google::protobuf::int32 value);
  
  // repeated .DB_C_WarGameAdmiralInfo admiralList = 10;
  inline int admirallist_size() const;
  inline void clear_admirallist();
  static const int kAdmiralListFieldNumber = 10;
  inline const ::google::protobuf::RepeatedPtrField< ::DB_C_WarGameAdmiralInfo >& admirallist() const;
  inline ::google::protobuf::RepeatedPtrField< ::DB_C_WarGameAdmiralInfo >* mutable_admirallist();
  inline const ::DB_C_WarGameAdmiralInfo& admirallist(int index) const;
  inline ::DB_C_WarGameAdmiralInfo* mutable_admirallist(int index);
  inline ::DB_C_WarGameAdmiralInfo* add_admirallist();
  
  // optional int32 TruceStartTime = 11 [default = 0];
  inline bool has_trucestarttime() const;
  inline void clear_trucestarttime();
  static const int kTruceStartTimeFieldNumber = 11;
  inline ::google::protobuf::int32 trucestarttime() const;
  inline void set_trucestarttime(::google::protobuf::int32 value);
  
  // optional int32 TruceEndTime = 12 [default = 0];
  inline bool has_truceendtime() const;
  inline void clear_truceendtime();
  static const int kTruceEndTimeFieldNumber = 12;
  inline ::google::protobuf::int32 truceendtime() const;
  inline void set_truceendtime(::google::protobuf::int32 value);
  
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::google::protobuf::int32 sitid_;
  ::google::protobuf::int32 sitlv_;
  ::google::protobuf::int32 starttime_;
  ::google::protobuf::int32 endtime_;
  ::google::protobuf::int32 delaynum_;
  ::std::string* uid_;
  static const ::std::string _default_uid_;
  ::std::string* name_;
  static const ::std::string _default_name_;
  ::google::protobuf::int32 countryid_;
  ::google::protobuf::int32 power_;
  ::google::protobuf::RepeatedPtrField< ::DB_C_WarGameAdmiralInfo > admirallist_;
  ::google::protobuf::int32 trucestarttime_;
  ::google::protobuf::int32 truceendtime_;
  friend void  protobuf_AddDesc_countryDB_2eproto();
  friend void protobuf_AssignDesc_countryDB_2eproto();
  friend void protobuf_ShutdownFile_countryDB_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(12 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static DB_C_WarGameSite* default_instance_;
};
// -------------------------------------------------------------------

class DB_C_WarGameAdmiralInfo : public ::google::protobuf::Message {
 public:
  DB_C_WarGameAdmiralInfo();
  virtual ~DB_C_WarGameAdmiralInfo();
  
  DB_C_WarGameAdmiralInfo(const DB_C_WarGameAdmiralInfo& from);
  
  inline DB_C_WarGameAdmiralInfo& operator=(const DB_C_WarGameAdmiralInfo& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const DB_C_WarGameAdmiralInfo& default_instance();
  void Swap(DB_C_WarGameAdmiralInfo* other);
  
  // implements Message ----------------------------------------------
  
  DB_C_WarGameAdmiralInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DB_C_WarGameAdmiralInfo& from);
  void MergeFrom(const DB_C_WarGameAdmiralInfo& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const { _cached_size_ = size; }
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional int32 admiralID = 1 [default = 0];
  inline bool has_admiralid() const;
  inline void clear_admiralid();
  static const int kAdmiralIDFieldNumber = 1;
  inline ::google::protobuf::int32 admiralid() const;
  inline void set_admiralid(::google::protobuf::int32 value);
  
  // optional int32 admiralLv = 2 [default = 0];
  inline bool has_admirallv() const;
  inline void clear_admirallv();
  static const int kAdmiralLvFieldNumber = 2;
  inline ::google::protobuf::int32 admirallv() const;
  inline void set_admirallv(::google::protobuf::int32 value);
  
  // optional int32 admiralTrainLv = 3 [default = 0];
  inline bool has_admiraltrainlv() const;
  inline void clear_admiraltrainlv();
  static const int kAdmiralTrainLvFieldNumber = 3;
  inline ::google::protobuf::int32 admiraltrainlv() const;
  inline void set_admiraltrainlv(::google::protobuf::int32 value);
  
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::google::protobuf::int32 admiralid_;
  ::google::protobuf::int32 admirallv_;
  ::google::protobuf::int32 admiraltrainlv_;
  friend void  protobuf_AddDesc_countryDB_2eproto();
  friend void protobuf_AssignDesc_countryDB_2eproto();
  friend void protobuf_ShutdownFile_countryDB_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static DB_C_WarGameAdmiralInfo* default_instance_;
};
// -------------------------------------------------------------------

class DB_C_ChatMsg : public ::google::protobuf::Message {
 public:
  DB_C_ChatMsg();
  virtual ~DB_C_ChatMsg();
  
  DB_C_ChatMsg(const DB_C_ChatMsg& from);
  
  inline DB_C_ChatMsg& operator=(const DB_C_ChatMsg& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const DB_C_ChatMsg& default_instance();
  void Swap(DB_C_ChatMsg* other);
  
  // implements Message ----------------------------------------------
  
  DB_C_ChatMsg* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DB_C_ChatMsg& from);
  void MergeFrom(const DB_C_ChatMsg& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const { _cached_size_ = size; }
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional int32 begin = 1;
  inline bool has_begin() const;
  inline void clear_begin();
  static const int kBeginFieldNumber = 1;
  inline ::google::protobuf::int32 begin() const;
  inline void set_begin(::google::protobuf::int32 value);
  
  // optional int32 end = 2;
  inline bool has_end() const;
  inline void clear_end();
  static const int kEndFieldNumber = 2;
  inline ::google::protobuf::int32 end() const;
  inline void set_end(::google::protobuf::int32 value);
  
  // optional int32 num = 3;
  inline bool has_num() const;
  inline void clear_num();
  static const int kNumFieldNumber = 3;
  inline ::google::protobuf::int32 num() const;
  inline void set_num(::google::protobuf::int32 value);
  
  // repeated .DB_C_ChatMsgOne msg = 4;
  inline int msg_size() const;
  inline void clear_msg();
  static const int kMsgFieldNumber = 4;
  inline const ::google::protobuf::RepeatedPtrField< ::DB_C_ChatMsgOne >& msg() const;
  inline ::google::protobuf::RepeatedPtrField< ::DB_C_ChatMsgOne >* mutable_msg();
  inline const ::DB_C_ChatMsgOne& msg(int index) const;
  inline ::DB_C_ChatMsgOne* mutable_msg(int index);
  inline ::DB_C_ChatMsgOne* add_msg();
  
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::google::protobuf::int32 begin_;
  ::google::protobuf::int32 end_;
  ::google::protobuf::int32 num_;
  ::google::protobuf::RepeatedPtrField< ::DB_C_ChatMsgOne > msg_;
  friend void  protobuf_AddDesc_countryDB_2eproto();
  friend void protobuf_AssignDesc_countryDB_2eproto();
  friend void protobuf_ShutdownFile_countryDB_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static DB_C_ChatMsg* default_instance_;
};
// -------------------------------------------------------------------

class DB_C_ChatMsgOne : public ::google::protobuf::Message {
 public:
  DB_C_ChatMsgOne();
  virtual ~DB_C_ChatMsgOne();
  
  DB_C_ChatMsgOne(const DB_C_ChatMsgOne& from);
  
  inline DB_C_ChatMsgOne& operator=(const DB_C_ChatMsgOne& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const DB_C_ChatMsgOne& default_instance();
  void Swap(DB_C_ChatMsgOne* other);
  
  // implements Message ----------------------------------------------
  
  DB_C_ChatMsgOne* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DB_C_ChatMsgOne& from);
  void MergeFrom(const DB_C_ChatMsgOne& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const { _cached_size_ = size; }
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional int32 country = 1;
  inline bool has_country() const;
  inline void clear_country();
  static const int kCountryFieldNumber = 1;
  inline ::google::protobuf::int32 country() const;
  inline void set_country(::google::protobuf::int32 value);
  
  // optional int32 type = 2;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 2;
  inline ::google::protobuf::int32 type() const;
  inline void set_type(::google::protobuf::int32 value);
  
  // optional int64 uid = 3;
  inline bool has_uid() const;
  inline void clear_uid();
  static const int kUidFieldNumber = 3;
  inline ::google::protobuf::int64 uid() const;
  inline void set_uid(::google::protobuf::int64 value);
  
  // optional string name = 4;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 4;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  
  // optional string msg = 5;
  inline bool has_msg() const;
  inline void clear_msg();
  static const int kMsgFieldNumber = 5;
  inline const ::std::string& msg() const;
  inline void set_msg(const ::std::string& value);
  inline void set_msg(const char* value);
  inline void set_msg(const char* value, size_t size);
  inline ::std::string* mutable_msg();
  
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::google::protobuf::int32 country_;
  ::google::protobuf::int32 type_;
  ::google::protobuf::int64 uid_;
  ::std::string* name_;
  static const ::std::string _default_name_;
  ::std::string* msg_;
  static const ::std::string _default_msg_;
  friend void  protobuf_AddDesc_countryDB_2eproto();
  friend void protobuf_AssignDesc_countryDB_2eproto();
  friend void protobuf_ShutdownFile_countryDB_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static DB_C_ChatMsgOne* default_instance_;
};
// -------------------------------------------------------------------

class DB_C_BossBtlMsg : public ::google::protobuf::Message {
 public:
  DB_C_BossBtlMsg();
  virtual ~DB_C_BossBtlMsg();
  
  DB_C_BossBtlMsg(const DB_C_BossBtlMsg& from);
  
  inline DB_C_BossBtlMsg& operator=(const DB_C_BossBtlMsg& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const DB_C_BossBtlMsg& default_instance();
  void Swap(DB_C_BossBtlMsg* other);
  
  // implements Message ----------------------------------------------
  
  DB_C_BossBtlMsg* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DB_C_BossBtlMsg& from);
  void MergeFrom(const DB_C_BossBtlMsg& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const { _cached_size_ = size; }
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required int32 key = 1;
  inline bool has_key() const;
  inline void clear_key();
  static const int kKeyFieldNumber = 1;
  inline ::google::protobuf::int32 key() const;
  inline void set_key(::google::protobuf::int32 value);
  
  // optional int32 region = 2 [default = 0];
  inline bool has_region() const;
  inline void clear_region();
  static const int kRegionFieldNumber = 2;
  inline ::google::protobuf::int32 region() const;
  inline void set_region(::google::protobuf::int32 value);
  
  // optional int32 nBossBtlFlag = 3 [default = 0];
  inline bool has_nbossbtlflag() const;
  inline void clear_nbossbtlflag();
  static const int kNBossBtlFlagFieldNumber = 3;
  inline ::google::protobuf::int32 nbossbtlflag() const;
  inline void set_nbossbtlflag(::google::protobuf::int32 value);
  
  // repeated .DB_C_BossInfo bossInfo = 4;
  inline int bossinfo_size() const;
  inline void clear_bossinfo();
  static const int kBossInfoFieldNumber = 4;
  inline const ::google::protobuf::RepeatedPtrField< ::DB_C_BossInfo >& bossinfo() const;
  inline ::google::protobuf::RepeatedPtrField< ::DB_C_BossInfo >* mutable_bossinfo();
  inline const ::DB_C_BossInfo& bossinfo(int index) const;
  inline ::DB_C_BossInfo* mutable_bossinfo(int index);
  inline ::DB_C_BossInfo* add_bossinfo();
  
  // repeated .DB_C_BossBtlRankUnit rankList = 5;
  inline int ranklist_size() const;
  inline void clear_ranklist();
  static const int kRankListFieldNumber = 5;
  inline const ::google::protobuf::RepeatedPtrField< ::DB_C_BossBtlRankUnit >& ranklist() const;
  inline ::google::protobuf::RepeatedPtrField< ::DB_C_BossBtlRankUnit >* mutable_ranklist();
  inline const ::DB_C_BossBtlRankUnit& ranklist(int index) const;
  inline ::DB_C_BossBtlRankUnit* mutable_ranklist(int index);
  inline ::DB_C_BossBtlRankUnit* add_ranklist();
  
  // optional .DB_C_BossBtlRankUnit killer = 6;
  inline bool has_killer() const;
  inline void clear_killer();
  static const int kKillerFieldNumber = 6;
  inline const ::DB_C_BossBtlRankUnit& killer() const;
  inline ::DB_C_BossBtlRankUnit* mutable_killer();
  
  // optional int32 state = 7 [default = 0];
  inline bool has_state() const;
  inline void clear_state();
  static const int kStateFieldNumber = 7;
  inline ::google::protobuf::int32 state() const;
  inline void set_state(::google::protobuf::int32 value);
  
  // optional .DB_C_BossMsg fightingBossMsg = 8;
  inline bool has_fightingbossmsg() const;
  inline void clear_fightingbossmsg();
  static const int kFightingBossMsgFieldNumber = 8;
  inline const ::DB_C_BossMsg& fightingbossmsg() const;
  inline ::DB_C_BossMsg* mutable_fightingbossmsg();
  
  // repeated .DB_C_BossBtlRankUnit luckyList = 9;
  inline int luckylist_size() const;
  inline void clear_luckylist();
  static const int kLuckyListFieldNumber = 9;
  inline const ::google::protobuf::RepeatedPtrField< ::DB_C_BossBtlRankUnit >& luckylist() const;
  inline ::google::protobuf::RepeatedPtrField< ::DB_C_BossBtlRankUnit >* mutable_luckylist();
  inline const ::DB_C_BossBtlRankUnit& luckylist(int index) const;
  inline ::DB_C_BossBtlRankUnit* mutable_luckylist(int index);
  inline ::DB_C_BossBtlRankUnit* add_luckylist();
  
  // optional int64 ltSaveRevision = 10 [default = 0];
  inline bool has_ltsaverevision() const;
  inline void clear_ltsaverevision();
  static const int kLtSaveRevisionFieldNumber = 10;
  inline ::google::protobuf::int64 ltsaverevision() const;
  inline void set_ltsaverevision(::google::protobuf::int64 value);
  
  // repeated .DB_C_BossBtlRankUnit lastRankList = 11;
  inline int lastranklist_size() const;
  inline void clear_lastranklist();
  static const int kLastRankListFieldNumber = 11;
  inline const ::google::protobuf::RepeatedPtrField< ::DB_C_BossBtlRankUnit >& lastranklist() const;
  inline ::google::protobuf::RepeatedPtrField< ::DB_C_BossBtlRankUnit >* mutable_lastranklist();
  inline const ::DB_C_BossBtlRankUnit& lastranklist(int index) const;
  inline ::DB_C_BossBtlRankUnit* mutable_lastranklist(int index);
  inline ::DB_C_BossBtlRankUnit* add_lastranklist();
  
  // repeated .DB_C_BossBtlRankUnit highPointList = 12;
  inline int highpointlist_size() const;
  inline void clear_highpointlist();
  static const int kHighPointListFieldNumber = 12;
  inline const ::google::protobuf::RepeatedPtrField< ::DB_C_BossBtlRankUnit >& highpointlist() const;
  inline ::google::protobuf::RepeatedPtrField< ::DB_C_BossBtlRankUnit >* mutable_highpointlist();
  inline const ::DB_C_BossBtlRankUnit& highpointlist(int index) const;
  inline ::DB_C_BossBtlRankUnit* mutable_highpointlist(int index);
  inline ::DB_C_BossBtlRankUnit* add_highpointlist();
  
  // repeated .DB_C_BossBtlRankUnit upList = 13;
  inline int uplist_size() const;
  inline void clear_uplist();
  static const int kUpListFieldNumber = 13;
  inline const ::google::protobuf::RepeatedPtrField< ::DB_C_BossBtlRankUnit >& uplist() const;
  inline ::google::protobuf::RepeatedPtrField< ::DB_C_BossBtlRankUnit >* mutable_uplist();
  inline const ::DB_C_BossBtlRankUnit& uplist(int index) const;
  inline ::DB_C_BossBtlRankUnit* mutable_uplist(int index);
  inline ::DB_C_BossBtlRankUnit* add_uplist();
  
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::google::protobuf::int32 key_;
  ::google::protobuf::int32 region_;
  ::google::protobuf::int32 nbossbtlflag_;
  ::google::protobuf::RepeatedPtrField< ::DB_C_BossInfo > bossinfo_;
  ::google::protobuf::RepeatedPtrField< ::DB_C_BossBtlRankUnit > ranklist_;
  ::DB_C_BossBtlRankUnit* killer_;
  ::google::protobuf::int32 state_;
  ::DB_C_BossMsg* fightingbossmsg_;
  ::google::protobuf::RepeatedPtrField< ::DB_C_BossBtlRankUnit > luckylist_;
  ::google::protobuf::int64 ltsaverevision_;
  ::google::protobuf::RepeatedPtrField< ::DB_C_BossBtlRankUnit > lastranklist_;
  ::google::protobuf::RepeatedPtrField< ::DB_C_BossBtlRankUnit > highpointlist_;
  ::google::protobuf::RepeatedPtrField< ::DB_C_BossBtlRankUnit > uplist_;
  friend void  protobuf_AddDesc_countryDB_2eproto();
  friend void protobuf_AssignDesc_countryDB_2eproto();
  friend void protobuf_ShutdownFile_countryDB_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(13 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static DB_C_BossBtlMsg* default_instance_;
};
// -------------------------------------------------------------------

class DB_C_BossInfo : public ::google::protobuf::Message {
 public:
  DB_C_BossInfo();
  virtual ~DB_C_BossInfo();
  
  DB_C_BossInfo(const DB_C_BossInfo& from);
  
  inline DB_C_BossInfo& operator=(const DB_C_BossInfo& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const DB_C_BossInfo& default_instance();
  void Swap(DB_C_BossInfo* other);
  
  // implements Message ----------------------------------------------
  
  DB_C_BossInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DB_C_BossInfo& from);
  void MergeFrom(const DB_C_BossInfo& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const { _cached_size_ = size; }
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional int32 bossID = 1 [default = 0];
  inline bool has_bossid() const;
  inline void clear_bossid();
  static const int kBossIDFieldNumber = 1;
  inline ::google::protobuf::int32 bossid() const;
  inline void set_bossid(::google::protobuf::int32 value);
  
  // optional int32 bossLv = 2;
  inline bool has_bosslv() const;
  inline void clear_bosslv();
  static const int kBossLvFieldNumber = 2;
  inline ::google::protobuf::int32 bosslv() const;
  inline void set_bosslv(::google::protobuf::int32 value);
  
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::google::protobuf::int32 bossid_;
  ::google::protobuf::int32 bosslv_;
  friend void  protobuf_AddDesc_countryDB_2eproto();
  friend void protobuf_AssignDesc_countryDB_2eproto();
  friend void protobuf_ShutdownFile_countryDB_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static DB_C_BossInfo* default_instance_;
};
// -------------------------------------------------------------------

class DB_C_BossMsg : public ::google::protobuf::Message {
 public:
  DB_C_BossMsg();
  virtual ~DB_C_BossMsg();
  
  DB_C_BossMsg(const DB_C_BossMsg& from);
  
  inline DB_C_BossMsg& operator=(const DB_C_BossMsg& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const DB_C_BossMsg& default_instance();
  void Swap(DB_C_BossMsg* other);
  
  // implements Message ----------------------------------------------
  
  DB_C_BossMsg* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DB_C_BossMsg& from);
  void MergeFrom(const DB_C_BossMsg& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const { _cached_size_ = size; }
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional int32 bossID = 1 [default = 0];
  inline bool has_bossid() const;
  inline void clear_bossid();
  static const int kBossIDFieldNumber = 1;
  inline ::google::protobuf::int32 bossid() const;
  inline void set_bossid(::google::protobuf::int32 value);
  
  // optional int64 hp = 2 [default = -1];
  inline bool has_hp() const;
  inline void clear_hp();
  static const int kHpFieldNumber = 2;
  inline ::google::protobuf::int64 hp() const;
  inline void set_hp(::google::protobuf::int64 value);
  
  // optional int64 maxHp = 3 [default = -1];
  inline bool has_maxhp() const;
  inline void clear_maxhp();
  static const int kMaxHpFieldNumber = 3;
  inline ::google::protobuf::int64 maxhp() const;
  inline void set_maxhp(::google::protobuf::int64 value);
  
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::google::protobuf::int32 bossid_;
  ::google::protobuf::int64 hp_;
  ::google::protobuf::int64 maxhp_;
  friend void  protobuf_AddDesc_countryDB_2eproto();
  friend void protobuf_AssignDesc_countryDB_2eproto();
  friend void protobuf_ShutdownFile_countryDB_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static DB_C_BossMsg* default_instance_;
};
// -------------------------------------------------------------------

class DB_C_BossBtlRankUnit : public ::google::protobuf::Message {
 public:
  DB_C_BossBtlRankUnit();
  virtual ~DB_C_BossBtlRankUnit();
  
  DB_C_BossBtlRankUnit(const DB_C_BossBtlRankUnit& from);
  
  inline DB_C_BossBtlRankUnit& operator=(const DB_C_BossBtlRankUnit& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const DB_C_BossBtlRankUnit& default_instance();
  void Swap(DB_C_BossBtlRankUnit* other);
  
  // implements Message ----------------------------------------------
  
  DB_C_BossBtlRankUnit* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DB_C_BossBtlRankUnit& from);
  void MergeFrom(const DB_C_BossBtlRankUnit& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const { _cached_size_ = size; }
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional int64 uid = 1 [default = 0];
  inline bool has_uid() const;
  inline void clear_uid();
  static const int kUidFieldNumber = 1;
  inline ::google::protobuf::int64 uid() const;
  inline void set_uid(::google::protobuf::int64 value);
  
  // optional string name = 2;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 2;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  
  // optional string pic = 3;
  inline bool has_pic() const;
  inline void clear_pic();
  static const int kPicFieldNumber = 3;
  inline const ::std::string& pic() const;
  inline void set_pic(const ::std::string& value);
  inline void set_pic(const char* value);
  inline void set_pic(const char* value, size_t size);
  inline ::std::string* mutable_pic();
  
  // optional int64 dmg = 4 [default = 0];
  inline bool has_dmg() const;
  inline void clear_dmg();
  static const int kDmgFieldNumber = 4;
  inline ::google::protobuf::int64 dmg() const;
  inline void set_dmg(::google::protobuf::int64 value);
  
  // optional int32 count = 5 [default = 0];
  inline bool has_count() const;
  inline void clear_count();
  static const int kCountFieldNumber = 5;
  inline ::google::protobuf::int32 count() const;
  inline void set_count(::google::protobuf::int32 value);
  
  // repeated string nameList = 6;
  inline int namelist_size() const;
  inline void clear_namelist();
  static const int kNameListFieldNumber = 6;
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& namelist() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_namelist();
  inline const ::std::string& namelist(int index) const;
  inline ::std::string* mutable_namelist(int index);
  inline void set_namelist(int index, const ::std::string& value);
  inline void set_namelist(int index, const char* value);
  inline void set_namelist(int index, const char* value, size_t size);
  inline ::std::string* add_namelist();
  inline void add_namelist(const ::std::string& value);
  inline void add_namelist(const char* value);
  inline void add_namelist(const char* value, size_t size);
  
  // optional string words = 7;
  inline bool has_words() const;
  inline void clear_words();
  static const int kWordsFieldNumber = 7;
  inline const ::std::string& words() const;
  inline void set_words(const ::std::string& value);
  inline void set_words(const char* value);
  inline void set_words(const char* value, size_t size);
  inline ::std::string* mutable_words();
  
  // repeated .DB_C_Report reports = 8;
  inline int reports_size() const;
  inline void clear_reports();
  static const int kReportsFieldNumber = 8;
  inline const ::google::protobuf::RepeatedPtrField< ::DB_C_Report >& reports() const;
  inline ::google::protobuf::RepeatedPtrField< ::DB_C_Report >* mutable_reports();
  inline const ::DB_C_Report& reports(int index) const;
  inline ::DB_C_Report* mutable_reports(int index);
  inline ::DB_C_Report* add_reports();
  
  // optional int32 power = 9;
  inline bool has_power() const;
  inline void clear_power();
  static const int kPowerFieldNumber = 9;
  inline ::google::protobuf::int32 power() const;
  inline void set_power(::google::protobuf::int32 value);
  
  // optional int32 level = 10;
  inline bool has_level() const;
  inline void clear_level();
  static const int kLevelFieldNumber = 10;
  inline ::google::protobuf::int32 level() const;
  inline void set_level(::google::protobuf::int32 value);
  
  // optional string guildname = 11;
  inline bool has_guildname() const;
  inline void clear_guildname();
  static const int kGuildnameFieldNumber = 11;
  inline const ::std::string& guildname() const;
  inline void set_guildname(const ::std::string& value);
  inline void set_guildname(const char* value);
  inline void set_guildname(const char* value, size_t size);
  inline ::std::string* mutable_guildname();
  
  // optional int32 countryID = 12;
  inline bool has_countryid() const;
  inline void clear_countryid();
  static const int kCountryIDFieldNumber = 12;
  inline ::google::protobuf::int32 countryid() const;
  inline void set_countryid(::google::protobuf::int32 value);
  
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::google::protobuf::int64 uid_;
  ::std::string* name_;
  static const ::std::string _default_name_;
  ::std::string* pic_;
  static const ::std::string _default_pic_;
  ::google::protobuf::int64 dmg_;
  ::google::protobuf::int32 count_;
  ::google::protobuf::RepeatedPtrField< ::std::string> namelist_;
  ::std::string* words_;
  static const ::std::string _default_words_;
  ::google::protobuf::RepeatedPtrField< ::DB_C_Report > reports_;
  ::google::protobuf::int32 power_;
  ::google::protobuf::int32 level_;
  ::std::string* guildname_;
  static const ::std::string _default_guildname_;
  ::google::protobuf::int32 countryid_;
  friend void  protobuf_AddDesc_countryDB_2eproto();
  friend void protobuf_AssignDesc_countryDB_2eproto();
  friend void protobuf_ShutdownFile_countryDB_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(12 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static DB_C_BossBtlRankUnit* default_instance_;
};
// -------------------------------------------------------------------

class DB_C_Report : public ::google::protobuf::Message {
 public:
  DB_C_Report();
  virtual ~DB_C_Report();
  
  DB_C_Report(const DB_C_Report& from);
  
  inline DB_C_Report& operator=(const DB_C_Report& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const DB_C_Report& default_instance();
  void Swap(DB_C_Report* other);
  
  // implements Message ----------------------------------------------
  
  DB_C_Report* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DB_C_Report& from);
  void MergeFrom(const DB_C_Report& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const { _cached_size_ = size; }
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional int32 type = 1 [default = 0];
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::google::protobuf::int32 type() const;
  inline void set_type(::google::protobuf::int32 value);
  
  // optional int32 count = 2 [default = 0];
  inline bool has_count() const;
  inline void clear_count();
  static const int kCountFieldNumber = 2;
  inline ::google::protobuf::int32 count() const;
  inline void set_count(::google::protobuf::int32 value);
  
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::google::protobuf::int32 type_;
  ::google::protobuf::int32 count_;
  friend void  protobuf_AddDesc_countryDB_2eproto();
  friend void protobuf_AssignDesc_countryDB_2eproto();
  friend void protobuf_ShutdownFile_countryDB_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static DB_C_Report* default_instance_;
};
// -------------------------------------------------------------------

class DB_C_NpcActiveRankItem : public ::google::protobuf::Message {
 public:
  DB_C_NpcActiveRankItem();
  virtual ~DB_C_NpcActiveRankItem();
  
  DB_C_NpcActiveRankItem(const DB_C_NpcActiveRankItem& from);
  
  inline DB_C_NpcActiveRankItem& operator=(const DB_C_NpcActiveRankItem& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const DB_C_NpcActiveRankItem& default_instance();
  void Swap(DB_C_NpcActiveRankItem* other);
  
  // implements Message ----------------------------------------------
  
  DB_C_NpcActiveRankItem* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DB_C_NpcActiveRankItem& from);
  void MergeFrom(const DB_C_NpcActiveRankItem& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const { _cached_size_ = size; }
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional int32 country = 1;
  inline bool has_country() const;
  inline void clear_country();
  static const int kCountryFieldNumber = 1;
  inline ::google::protobuf::int32 country() const;
  inline void set_country(::google::protobuf::int32 value);
  
  // repeated int32 wincnt = 2;
  inline int wincnt_size() const;
  inline void clear_wincnt();
  static const int kWincntFieldNumber = 2;
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >& wincnt() const
      ;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >* mutable_wincnt();
  inline ::google::protobuf::int32 wincnt(int index) const;
  inline void set_wincnt(int index, ::google::protobuf::int32 value);
  inline void add_wincnt(::google::protobuf::int32 value);
  
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::google::protobuf::int32 country_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > wincnt_;
  friend void  protobuf_AddDesc_countryDB_2eproto();
  friend void protobuf_AssignDesc_countryDB_2eproto();
  friend void protobuf_ShutdownFile_countryDB_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static DB_C_NpcActiveRankItem* default_instance_;
};
// -------------------------------------------------------------------

class DB_C_NpcActiveRank : public ::google::protobuf::Message {
 public:
  DB_C_NpcActiveRank();
  virtual ~DB_C_NpcActiveRank();
  
  DB_C_NpcActiveRank(const DB_C_NpcActiveRank& from);
  
  inline DB_C_NpcActiveRank& operator=(const DB_C_NpcActiveRank& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const DB_C_NpcActiveRank& default_instance();
  void Swap(DB_C_NpcActiveRank* other);
  
  // implements Message ----------------------------------------------
  
  DB_C_NpcActiveRank* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DB_C_NpcActiveRank& from);
  void MergeFrom(const DB_C_NpcActiveRank& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const { _cached_size_ = size; }
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional int32 ranktime = 1;
  inline bool has_ranktime() const;
  inline void clear_ranktime();
  static const int kRanktimeFieldNumber = 1;
  inline ::google::protobuf::int32 ranktime() const;
  inline void set_ranktime(::google::protobuf::int32 value);
  
  // repeated .DB_C_NpcActiveRankItem rank = 2;
  inline int rank_size() const;
  inline void clear_rank();
  static const int kRankFieldNumber = 2;
  inline const ::google::protobuf::RepeatedPtrField< ::DB_C_NpcActiveRankItem >& rank() const;
  inline ::google::protobuf::RepeatedPtrField< ::DB_C_NpcActiveRankItem >* mutable_rank();
  inline const ::DB_C_NpcActiveRankItem& rank(int index) const;
  inline ::DB_C_NpcActiveRankItem* mutable_rank(int index);
  inline ::DB_C_NpcActiveRankItem* add_rank();
  
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::google::protobuf::int32 ranktime_;
  ::google::protobuf::RepeatedPtrField< ::DB_C_NpcActiveRankItem > rank_;
  friend void  protobuf_AddDesc_countryDB_2eproto();
  friend void protobuf_AssignDesc_countryDB_2eproto();
  friend void protobuf_ShutdownFile_countryDB_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static DB_C_NpcActiveRank* default_instance_;
};
// -------------------------------------------------------------------

class DB_C_GuildRedEnvelope : public ::google::protobuf::Message {
 public:
  DB_C_GuildRedEnvelope();
  virtual ~DB_C_GuildRedEnvelope();
  
  DB_C_GuildRedEnvelope(const DB_C_GuildRedEnvelope& from);
  
  inline DB_C_GuildRedEnvelope& operator=(const DB_C_GuildRedEnvelope& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const DB_C_GuildRedEnvelope& default_instance();
  void Swap(DB_C_GuildRedEnvelope* other);
  
  // implements Message ----------------------------------------------
  
  DB_C_GuildRedEnvelope* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DB_C_GuildRedEnvelope& from);
  void MergeFrom(const DB_C_GuildRedEnvelope& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const { _cached_size_ = size; }
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional int32 nFlag = 1 [default = 0];
  inline bool has_nflag() const;
  inline void clear_nflag();
  static const int kNFlagFieldNumber = 1;
  inline ::google::protobuf::int32 nflag() const;
  inline void set_nflag(::google::protobuf::int32 value);
  
  // optional int32 nTotal = 2 [default = 0];
  inline bool has_ntotal() const;
  inline void clear_ntotal();
  static const int kNTotalFieldNumber = 2;
  inline ::google::protobuf::int32 ntotal() const;
  inline void set_ntotal(::google::protobuf::int32 value);
  
  // optional int32 nCurrentID = 3 [default = 0];
  inline bool has_ncurrentid() const;
  inline void clear_ncurrentid();
  static const int kNCurrentIDFieldNumber = 3;
  inline ::google::protobuf::int32 ncurrentid() const;
  inline void set_ncurrentid(::google::protobuf::int32 value);
  
  // repeated .DB_C_RedEnvelopeInfo listRedEnvelope = 4;
  inline int listredenvelope_size() const;
  inline void clear_listredenvelope();
  static const int kListRedEnvelopeFieldNumber = 4;
  inline const ::google::protobuf::RepeatedPtrField< ::DB_C_RedEnvelopeInfo >& listredenvelope() const;
  inline ::google::protobuf::RepeatedPtrField< ::DB_C_RedEnvelopeInfo >* mutable_listredenvelope();
  inline const ::DB_C_RedEnvelopeInfo& listredenvelope(int index) const;
  inline ::DB_C_RedEnvelopeInfo* mutable_listredenvelope(int index);
  inline ::DB_C_RedEnvelopeInfo* add_listredenvelope();
  
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::google::protobuf::int32 nflag_;
  ::google::protobuf::int32 ntotal_;
  ::google::protobuf::int32 ncurrentid_;
  ::google::protobuf::RepeatedPtrField< ::DB_C_RedEnvelopeInfo > listredenvelope_;
  friend void  protobuf_AddDesc_countryDB_2eproto();
  friend void protobuf_AssignDesc_countryDB_2eproto();
  friend void protobuf_ShutdownFile_countryDB_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static DB_C_GuildRedEnvelope* default_instance_;
};
// -------------------------------------------------------------------

class DB_C_RedEnvelopeInfo : public ::google::protobuf::Message {
 public:
  DB_C_RedEnvelopeInfo();
  virtual ~DB_C_RedEnvelopeInfo();
  
  DB_C_RedEnvelopeInfo(const DB_C_RedEnvelopeInfo& from);
  
  inline DB_C_RedEnvelopeInfo& operator=(const DB_C_RedEnvelopeInfo& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const DB_C_RedEnvelopeInfo& default_instance();
  void Swap(DB_C_RedEnvelopeInfo* other);
  
  // implements Message ----------------------------------------------
  
  DB_C_RedEnvelopeInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DB_C_RedEnvelopeInfo& from);
  void MergeFrom(const DB_C_RedEnvelopeInfo& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const { _cached_size_ = size; }
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional int32 nID = 1 [default = 0];
  inline bool has_nid() const;
  inline void clear_nid();
  static const int kNIDFieldNumber = 1;
  inline ::google::protobuf::int32 nid() const;
  inline void set_nid(::google::protobuf::int32 value);
  
  // optional int32 nType = 2 [default = 0];
  inline bool has_ntype() const;
  inline void clear_ntype();
  static const int kNTypeFieldNumber = 2;
  inline ::google::protobuf::int32 ntype() const;
  inline void set_ntype(::google::protobuf::int32 value);
  
  // optional int64 uid = 3 [default = 0];
  inline bool has_uid() const;
  inline void clear_uid();
  static const int kUidFieldNumber = 3;
  inline ::google::protobuf::int64 uid() const;
  inline void set_uid(::google::protobuf::int64 value);
  
  // optional int32 nTotalCredit = 4 [default = 0];
  inline bool has_ntotalcredit() const;
  inline void clear_ntotalcredit();
  static const int kNTotalCreditFieldNumber = 4;
  inline ::google::protobuf::int32 ntotalcredit() const;
  inline void set_ntotalcredit(::google::protobuf::int32 value);
  
  // optional int32 nIssueTime = 5 [default = 0];
  inline bool has_nissuetime() const;
  inline void clear_nissuetime();
  static const int kNIssueTimeFieldNumber = 5;
  inline ::google::protobuf::int32 nissuetime() const;
  inline void set_nissuetime(::google::protobuf::int32 value);
  
  // optional int32 nOverdueTime = 6 [default = 0];
  inline bool has_noverduetime() const;
  inline void clear_noverduetime();
  static const int kNOverdueTimeFieldNumber = 6;
  inline ::google::protobuf::int32 noverduetime() const;
  inline void set_noverduetime(::google::protobuf::int32 value);
  
  // optional int32 nGiveOut = 7 [default = 0];
  inline bool has_ngiveout() const;
  inline void clear_ngiveout();
  static const int kNGiveOutFieldNumber = 7;
  inline ::google::protobuf::int32 ngiveout() const;
  inline void set_ngiveout(::google::protobuf::int32 value);
  
  // optional int32 nTotalNum = 8 [default = 0];
  inline bool has_ntotalnum() const;
  inline void clear_ntotalnum();
  static const int kNTotalNumFieldNumber = 8;
  inline ::google::protobuf::int32 ntotalnum() const;
  inline void set_ntotalnum(::google::protobuf::int32 value);
  
  // optional int32 nAdjType = 9 [default = 0];
  inline bool has_nadjtype() const;
  inline void clear_nadjtype();
  static const int kNAdjTypeFieldNumber = 9;
  inline ::google::protobuf::int32 nadjtype() const;
  inline void set_nadjtype(::google::protobuf::int32 value);
  
  // optional bool bRefund = 10 [default = false];
  inline bool has_brefund() const;
  inline void clear_brefund();
  static const int kBRefundFieldNumber = 10;
  inline bool brefund() const;
  inline void set_brefund(bool value);
  
  // repeated .DB_C_RedEnvelopeReport listReport = 11;
  inline int listreport_size() const;
  inline void clear_listreport();
  static const int kListReportFieldNumber = 11;
  inline const ::google::protobuf::RepeatedPtrField< ::DB_C_RedEnvelopeReport >& listreport() const;
  inline ::google::protobuf::RepeatedPtrField< ::DB_C_RedEnvelopeReport >* mutable_listreport();
  inline const ::DB_C_RedEnvelopeReport& listreport(int index) const;
  inline ::DB_C_RedEnvelopeReport* mutable_listreport(int index);
  inline ::DB_C_RedEnvelopeReport* add_listreport();
  
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::google::protobuf::int32 nid_;
  ::google::protobuf::int32 ntype_;
  ::google::protobuf::int64 uid_;
  ::google::protobuf::int32 ntotalcredit_;
  ::google::protobuf::int32 nissuetime_;
  ::google::protobuf::int32 noverduetime_;
  ::google::protobuf::int32 ngiveout_;
  ::google::protobuf::int32 ntotalnum_;
  ::google::protobuf::int32 nadjtype_;
  bool brefund_;
  ::google::protobuf::RepeatedPtrField< ::DB_C_RedEnvelopeReport > listreport_;
  friend void  protobuf_AddDesc_countryDB_2eproto();
  friend void protobuf_AssignDesc_countryDB_2eproto();
  friend void protobuf_ShutdownFile_countryDB_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(11 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static DB_C_RedEnvelopeInfo* default_instance_;
};
// -------------------------------------------------------------------

class DB_C_RedEnvelopeReport : public ::google::protobuf::Message {
 public:
  DB_C_RedEnvelopeReport();
  virtual ~DB_C_RedEnvelopeReport();
  
  DB_C_RedEnvelopeReport(const DB_C_RedEnvelopeReport& from);
  
  inline DB_C_RedEnvelopeReport& operator=(const DB_C_RedEnvelopeReport& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const DB_C_RedEnvelopeReport& default_instance();
  void Swap(DB_C_RedEnvelopeReport* other);
  
  // implements Message ----------------------------------------------
  
  DB_C_RedEnvelopeReport* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DB_C_RedEnvelopeReport& from);
  void MergeFrom(const DB_C_RedEnvelopeReport& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const { _cached_size_ = size; }
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional int32 nTime = 1 [default = 0];
  inline bool has_ntime() const;
  inline void clear_ntime();
  static const int kNTimeFieldNumber = 1;
  inline ::google::protobuf::int32 ntime() const;
  inline void set_ntime(::google::protobuf::int32 value);
  
  // optional int64 nUid = 2 [default = 0];
  inline bool has_nuid() const;
  inline void clear_nuid();
  static const int kNUidFieldNumber = 2;
  inline ::google::protobuf::int64 nuid() const;
  inline void set_nuid(::google::protobuf::int64 value);
  
  // optional int32 nGetNum = 3 [default = 0];
  inline bool has_ngetnum() const;
  inline void clear_ngetnum();
  static const int kNGetNumFieldNumber = 3;
  inline ::google::protobuf::int32 ngetnum() const;
  inline void set_ngetnum(::google::protobuf::int32 value);
  
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::google::protobuf::int32 ntime_;
  ::google::protobuf::int64 nuid_;
  ::google::protobuf::int32 ngetnum_;
  friend void  protobuf_AddDesc_countryDB_2eproto();
  friend void protobuf_AssignDesc_countryDB_2eproto();
  friend void protobuf_ShutdownFile_countryDB_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static DB_C_RedEnvelopeReport* default_instance_;
};
// -------------------------------------------------------------------

class DB_C_RedEnvelopeCount : public ::google::protobuf::Message {
 public:
  DB_C_RedEnvelopeCount();
  virtual ~DB_C_RedEnvelopeCount();
  
  DB_C_RedEnvelopeCount(const DB_C_RedEnvelopeCount& from);
  
  inline DB_C_RedEnvelopeCount& operator=(const DB_C_RedEnvelopeCount& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const DB_C_RedEnvelopeCount& default_instance();
  void Swap(DB_C_RedEnvelopeCount* other);
  
  // implements Message ----------------------------------------------
  
  DB_C_RedEnvelopeCount* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DB_C_RedEnvelopeCount& from);
  void MergeFrom(const DB_C_RedEnvelopeCount& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const { _cached_size_ = size; }
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional int32 nFlag = 1 [default = 0];
  inline bool has_nflag() const;
  inline void clear_nflag();
  static const int kNFlagFieldNumber = 1;
  inline ::google::protobuf::int32 nflag() const;
  inline void set_nflag(::google::protobuf::int32 value);
  
  // optional int64 nTotalNum = 2 [default = 0];
  inline bool has_ntotalnum() const;
  inline void clear_ntotalnum();
  static const int kNTotalNumFieldNumber = 2;
  inline ::google::protobuf::int64 ntotalnum() const;
  inline void set_ntotalnum(::google::protobuf::int64 value);
  
  // optional int32 nSendTotal = 3 [default = 0];
  inline bool has_nsendtotal() const;
  inline void clear_nsendtotal();
  static const int kNSendTotalFieldNumber = 3;
  inline ::google::protobuf::int32 nsendtotal() const;
  inline void set_nsendtotal(::google::protobuf::int32 value);
  
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::google::protobuf::int32 nflag_;
  ::google::protobuf::int64 ntotalnum_;
  ::google::protobuf::int32 nsendtotal_;
  friend void  protobuf_AddDesc_countryDB_2eproto();
  friend void protobuf_AssignDesc_countryDB_2eproto();
  friend void protobuf_ShutdownFile_countryDB_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static DB_C_RedEnvelopeCount* default_instance_;
};
// ===================================================================


// ===================================================================


// ===================================================================

// DB_C_User

// optional int64 userID = 1;
inline bool DB_C_User::has_userid() const {
  return _has_bit(0);
}
inline void DB_C_User::clear_userid() {
  userid_ = GOOGLE_LONGLONG(0);
  _clear_bit(0);
}
inline ::google::protobuf::int64 DB_C_User::userid() const {
  return userid_;
}
inline void DB_C_User::set_userid(::google::protobuf::int64 value) {
  _set_bit(0);
  userid_ = value;
}

// optional int32 cityID = 2;
inline bool DB_C_User::has_cityid() const {
  return _has_bit(1);
}
inline void DB_C_User::clear_cityid() {
  cityid_ = 0;
  _clear_bit(1);
}
inline ::google::protobuf::int32 DB_C_User::cityid() const {
  return cityid_;
}
inline void DB_C_User::set_cityid(::google::protobuf::int32 value) {
  _set_bit(1);
  cityid_ = value;
}

// optional int32 countryID = 3;
inline bool DB_C_User::has_countryid() const {
  return _has_bit(2);
}
inline void DB_C_User::clear_countryid() {
  countryid_ = 0;
  _clear_bit(2);
}
inline ::google::protobuf::int32 DB_C_User::countryid() const {
  return countryid_;
}
inline void DB_C_User::set_countryid(::google::protobuf::int32 value) {
  _set_bit(2);
  countryid_ = value;
}

// optional int32 ArenaIndex = 4 [default = -1];
inline bool DB_C_User::has_arenaindex() const {
  return _has_bit(3);
}
inline void DB_C_User::clear_arenaindex() {
  arenaindex_ = -1;
  _clear_bit(3);
}
inline ::google::protobuf::int32 DB_C_User::arenaindex() const {
  return arenaindex_;
}
inline void DB_C_User::set_arenaindex(::google::protobuf::int32 value) {
  _set_bit(3);
  arenaindex_ = value;
}

// optional int32 worldArenaIndex = 5 [default = -1];
inline bool DB_C_User::has_worldarenaindex() const {
  return _has_bit(4);
}
inline void DB_C_User::clear_worldarenaindex() {
  worldarenaindex_ = -1;
  _clear_bit(4);
}
inline ::google::protobuf::int32 DB_C_User::worldarenaindex() const {
  return worldarenaindex_;
}
inline void DB_C_User::set_worldarenaindex(::google::protobuf::int32 value) {
  _set_bit(4);
  worldarenaindex_ = value;
}

// optional int32 lastArenaIndex = 6 [default = -1];
inline bool DB_C_User::has_lastarenaindex() const {
  return _has_bit(5);
}
inline void DB_C_User::clear_lastarenaindex() {
  lastarenaindex_ = -1;
  _clear_bit(5);
}
inline ::google::protobuf::int32 DB_C_User::lastarenaindex() const {
  return lastarenaindex_;
}
inline void DB_C_User::set_lastarenaindex(::google::protobuf::int32 value) {
  _set_bit(5);
  lastarenaindex_ = value;
}

// optional int32 lastworldArenaIndex = 7 [default = -1];
inline bool DB_C_User::has_lastworldarenaindex() const {
  return _has_bit(6);
}
inline void DB_C_User::clear_lastworldarenaindex() {
  lastworldarenaindex_ = -1;
  _clear_bit(6);
}
inline ::google::protobuf::int32 DB_C_User::lastworldarenaindex() const {
  return lastworldarenaindex_;
}
inline void DB_C_User::set_lastworldarenaindex(::google::protobuf::int32 value) {
  _set_bit(6);
  lastworldarenaindex_ = value;
}

// optional int32 guildID = 8;
inline bool DB_C_User::has_guildid() const {
  return _has_bit(7);
}
inline void DB_C_User::clear_guildid() {
  guildid_ = 0;
  _clear_bit(7);
}
inline ::google::protobuf::int32 DB_C_User::guildid() const {
  return guildid_;
}
inline void DB_C_User::set_guildid(::google::protobuf::int32 value) {
  _set_bit(7);
  guildid_ = value;
}

// optional int32 position = 9;
inline bool DB_C_User::has_position() const {
  return _has_bit(8);
}
inline void DB_C_User::clear_position() {
  position_ = 0;
  _clear_bit(8);
}
inline ::google::protobuf::int32 DB_C_User::position() const {
  return position_;
}
inline void DB_C_User::set_position(::google::protobuf::int32 value) {
  _set_bit(8);
  position_ = value;
}

// optional int32 officerposition = 10 [default = 0];
inline bool DB_C_User::has_officerposition() const {
  return _has_bit(9);
}
inline void DB_C_User::clear_officerposition() {
  officerposition_ = 0;
  _clear_bit(9);
}
inline ::google::protobuf::int32 DB_C_User::officerposition() const {
  return officerposition_;
}
inline void DB_C_User::set_officerposition(::google::protobuf::int32 value) {
  _set_bit(9);
  officerposition_ = value;
}

// optional string name = 11;
inline bool DB_C_User::has_name() const {
  return _has_bit(10);
}
inline void DB_C_User::clear_name() {
  if (name_ != &_default_name_) {
    name_->clear();
  }
  _clear_bit(10);
}
inline const ::std::string& DB_C_User::name() const {
  return *name_;
}
inline void DB_C_User::set_name(const ::std::string& value) {
  _set_bit(10);
  if (name_ == &_default_name_) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void DB_C_User::set_name(const char* value) {
  _set_bit(10);
  if (name_ == &_default_name_) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void DB_C_User::set_name(const char* value, size_t size) {
  _set_bit(10);
  if (name_ == &_default_name_) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* DB_C_User::mutable_name() {
  _set_bit(10);
  if (name_ == &_default_name_) {
    name_ = new ::std::string;
  }
  return name_;
}

// optional string pic = 12;
inline bool DB_C_User::has_pic() const {
  return _has_bit(11);
}
inline void DB_C_User::clear_pic() {
  if (pic_ != &_default_pic_) {
    pic_->clear();
  }
  _clear_bit(11);
}
inline const ::std::string& DB_C_User::pic() const {
  return *pic_;
}
inline void DB_C_User::set_pic(const ::std::string& value) {
  _set_bit(11);
  if (pic_ == &_default_pic_) {
    pic_ = new ::std::string;
  }
  pic_->assign(value);
}
inline void DB_C_User::set_pic(const char* value) {
  _set_bit(11);
  if (pic_ == &_default_pic_) {
    pic_ = new ::std::string;
  }
  pic_->assign(value);
}
inline void DB_C_User::set_pic(const char* value, size_t size) {
  _set_bit(11);
  if (pic_ == &_default_pic_) {
    pic_ = new ::std::string;
  }
  pic_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* DB_C_User::mutable_pic() {
  _set_bit(11);
  if (pic_ == &_default_pic_) {
    pic_ = new ::std::string;
  }
  return pic_;
}

// optional int32 level = 13;
inline bool DB_C_User::has_level() const {
  return _has_bit(12);
}
inline void DB_C_User::clear_level() {
  level_ = 0;
  _clear_bit(12);
}
inline ::google::protobuf::int32 DB_C_User::level() const {
  return level_;
}
inline void DB_C_User::set_level(::google::protobuf::int32 value) {
  _set_bit(12);
  level_ = value;
}

// optional int32 vipLevel = 14;
inline bool DB_C_User::has_viplevel() const {
  return _has_bit(13);
}
inline void DB_C_User::clear_viplevel() {
  viplevel_ = 0;
  _clear_bit(13);
}
inline ::google::protobuf::int32 DB_C_User::viplevel() const {
  return viplevel_;
}
inline void DB_C_User::set_viplevel(::google::protobuf::int32 value) {
  _set_bit(13);
  viplevel_ = value;
}

// optional int32 vipType = 15;
inline bool DB_C_User::has_viptype() const {
  return _has_bit(14);
}
inline void DB_C_User::clear_viptype() {
  viptype_ = 0;
  _clear_bit(14);
}
inline ::google::protobuf::int32 DB_C_User::viptype() const {
  return viptype_;
}
inline void DB_C_User::set_viptype(::google::protobuf::int32 value) {
  _set_bit(14);
  viptype_ = value;
}

// optional int32 gvepoint = 16;
inline bool DB_C_User::has_gvepoint() const {
  return _has_bit(15);
}
inline void DB_C_User::clear_gvepoint() {
  gvepoint_ = 0;
  _clear_bit(15);
}
inline ::google::protobuf::int32 DB_C_User::gvepoint() const {
  return gvepoint_;
}
inline void DB_C_User::set_gvepoint(::google::protobuf::int32 value) {
  _set_bit(15);
  gvepoint_ = value;
}

// optional int32 flag = 17;
inline bool DB_C_User::has_flag() const {
  return _has_bit(16);
}
inline void DB_C_User::clear_flag() {
  flag_ = 0;
  _clear_bit(16);
}
inline ::google::protobuf::int32 DB_C_User::flag() const {
  return flag_;
}
inline void DB_C_User::set_flag(::google::protobuf::int32 value) {
  _set_bit(16);
  flag_ = value;
}

// optional int32 heroArenaIndex = 18 [default = -1];
inline bool DB_C_User::has_heroarenaindex() const {
  return _has_bit(17);
}
inline void DB_C_User::clear_heroarenaindex() {
  heroarenaindex_ = -1;
  _clear_bit(17);
}
inline ::google::protobuf::int32 DB_C_User::heroarenaindex() const {
  return heroarenaindex_;
}
inline void DB_C_User::set_heroarenaindex(::google::protobuf::int32 value) {
  _set_bit(17);
  heroarenaindex_ = value;
}

// optional int32 wpcSearchTime = 19 [default = 0];
inline bool DB_C_User::has_wpcsearchtime() const {
  return _has_bit(18);
}
inline void DB_C_User::clear_wpcsearchtime() {
  wpcsearchtime_ = 0;
  _clear_bit(18);
}
inline ::google::protobuf::int32 DB_C_User::wpcsearchtime() const {
  return wpcsearchtime_;
}
inline void DB_C_User::set_wpcsearchtime(::google::protobuf::int32 value) {
  _set_bit(18);
  wpcsearchtime_ = value;
}

// optional int32 leaguePoint = 20 [default = 0];
inline bool DB_C_User::has_leaguepoint() const {
  return _has_bit(19);
}
inline void DB_C_User::clear_leaguepoint() {
  leaguepoint_ = 0;
  _clear_bit(19);
}
inline ::google::protobuf::int32 DB_C_User::leaguepoint() const {
  return leaguepoint_;
}
inline void DB_C_User::set_leaguepoint(::google::protobuf::int32 value) {
  _set_bit(19);
  leaguepoint_ = value;
}

// optional .DB_C_RedEnvelopeCount redEnvelopeCount = 21;
inline bool DB_C_User::has_redenvelopecount() const {
  return _has_bit(20);
}
inline void DB_C_User::clear_redenvelopecount() {
  if (redenvelopecount_ != NULL) redenvelopecount_->::DB_C_RedEnvelopeCount::Clear();
  _clear_bit(20);
}
inline const ::DB_C_RedEnvelopeCount& DB_C_User::redenvelopecount() const {
  return redenvelopecount_ != NULL ? *redenvelopecount_ : *default_instance_->redenvelopecount_;
}
inline ::DB_C_RedEnvelopeCount* DB_C_User::mutable_redenvelopecount() {
  _set_bit(20);
  if (redenvelopecount_ == NULL) redenvelopecount_ = new ::DB_C_RedEnvelopeCount;
  return redenvelopecount_;
}

// optional int32 tLastLeaveGuildTime = 22 [default = 0];
inline bool DB_C_User::has_tlastleaveguildtime() const {
  return _has_bit(21);
}
inline void DB_C_User::clear_tlastleaveguildtime() {
  tlastleaveguildtime_ = 0;
  _clear_bit(21);
}
inline ::google::protobuf::int32 DB_C_User::tlastleaveguildtime() const {
  return tlastleaveguildtime_;
}
inline void DB_C_User::set_tlastleaveguildtime(::google::protobuf::int32 value) {
  _set_bit(21);
  tlastleaveguildtime_ = value;
}

// optional int64 bossBtlDmg = 23;
inline bool DB_C_User::has_bossbtldmg() const {
  return _has_bit(22);
}
inline void DB_C_User::clear_bossbtldmg() {
  bossbtldmg_ = GOOGLE_LONGLONG(0);
  _clear_bit(22);
}
inline ::google::protobuf::int64 DB_C_User::bossbtldmg() const {
  return bossbtldmg_;
}
inline void DB_C_User::set_bossbtldmg(::google::protobuf::int64 value) {
  _set_bit(22);
  bossbtldmg_ = value;
}

// optional int32 wpcLabSearchCnt = 24 [default = 0];
inline bool DB_C_User::has_wpclabsearchcnt() const {
  return _has_bit(23);
}
inline void DB_C_User::clear_wpclabsearchcnt() {
  wpclabsearchcnt_ = 0;
  _clear_bit(23);
}
inline ::google::protobuf::int32 DB_C_User::wpclabsearchcnt() const {
  return wpclabsearchcnt_;
}
inline void DB_C_User::set_wpclabsearchcnt(::google::protobuf::int32 value) {
  _set_bit(23);
  wpclabsearchcnt_ = value;
}

// repeated .DB_One_Yuan oneyuan = 25;
inline int DB_C_User::oneyuan_size() const {
  return oneyuan_.size();
}
inline void DB_C_User::clear_oneyuan() {
  oneyuan_.Clear();
}
inline const ::google::protobuf::RepeatedPtrField< ::DB_One_Yuan >&
DB_C_User::oneyuan() const {
  return oneyuan_;
}
inline ::google::protobuf::RepeatedPtrField< ::DB_One_Yuan >*
DB_C_User::mutable_oneyuan() {
  return &oneyuan_;
}
inline const ::DB_One_Yuan& DB_C_User::oneyuan(int index) const {
  return oneyuan_.Get(index);
}
inline ::DB_One_Yuan* DB_C_User::mutable_oneyuan(int index) {
  return oneyuan_.Mutable(index);
}
inline ::DB_One_Yuan* DB_C_User::add_oneyuan() {
  return oneyuan_.Add();
}

// -------------------------------------------------------------------

// DB_One_Yuan_Reward_key

// optional int32 redwardkey = 1;
inline bool DB_One_Yuan_Reward_key::has_redwardkey() const {
  return _has_bit(0);
}
inline void DB_One_Yuan_Reward_key::clear_redwardkey() {
  redwardkey_ = 0;
  _clear_bit(0);
}
inline ::google::protobuf::int32 DB_One_Yuan_Reward_key::redwardkey() const {
  return redwardkey_;
}
inline void DB_One_Yuan_Reward_key::set_redwardkey(::google::protobuf::int32 value) {
  _set_bit(0);
  redwardkey_ = value;
}

// optional int32 nIndex = 2;
inline bool DB_One_Yuan_Reward_key::has_nindex() const {
  return _has_bit(1);
}
inline void DB_One_Yuan_Reward_key::clear_nindex() {
  nindex_ = 0;
  _clear_bit(1);
}
inline ::google::protobuf::int32 DB_One_Yuan_Reward_key::nindex() const {
  return nindex_;
}
inline void DB_One_Yuan_Reward_key::set_nindex(::google::protobuf::int32 value) {
  _set_bit(1);
  nindex_ = value;
}

// -------------------------------------------------------------------

// DB_One_Yuan

// optional int32 flag = 1;
inline bool DB_One_Yuan::has_flag() const {
  return _has_bit(0);
}
inline void DB_One_Yuan::clear_flag() {
  flag_ = 0;
  _clear_bit(0);
}
inline ::google::protobuf::int32 DB_One_Yuan::flag() const {
  return flag_;
}
inline void DB_One_Yuan::set_flag(::google::protobuf::int32 value) {
  _set_bit(0);
  flag_ = value;
}

// repeated .DB_One_Yuan_Reward_key rewardKey = 2;
inline int DB_One_Yuan::rewardkey_size() const {
  return rewardkey_.size();
}
inline void DB_One_Yuan::clear_rewardkey() {
  rewardkey_.Clear();
}
inline const ::google::protobuf::RepeatedPtrField< ::DB_One_Yuan_Reward_key >&
DB_One_Yuan::rewardkey() const {
  return rewardkey_;
}
inline ::google::protobuf::RepeatedPtrField< ::DB_One_Yuan_Reward_key >*
DB_One_Yuan::mutable_rewardkey() {
  return &rewardkey_;
}
inline const ::DB_One_Yuan_Reward_key& DB_One_Yuan::rewardkey(int index) const {
  return rewardkey_.Get(index);
}
inline ::DB_One_Yuan_Reward_key* DB_One_Yuan::mutable_rewardkey(int index) {
  return rewardkey_.Mutable(index);
}
inline ::DB_One_Yuan_Reward_key* DB_One_Yuan::add_rewardkey() {
  return rewardkey_.Add();
}

// -------------------------------------------------------------------

// DB_One_Yuan_Purchase_Winner

// optional int32 flag = 1;
inline bool DB_One_Yuan_Purchase_Winner::has_flag() const {
  return _has_bit(0);
}
inline void DB_One_Yuan_Purchase_Winner::clear_flag() {
  flag_ = 0;
  _clear_bit(0);
}
inline ::google::protobuf::int32 DB_One_Yuan_Purchase_Winner::flag() const {
  return flag_;
}
inline void DB_One_Yuan_Purchase_Winner::set_flag(::google::protobuf::int32 value) {
  _set_bit(0);
  flag_ = value;
}

// optional int64 userid = 2;
inline bool DB_One_Yuan_Purchase_Winner::has_userid() const {
  return _has_bit(1);
}
inline void DB_One_Yuan_Purchase_Winner::clear_userid() {
  userid_ = GOOGLE_LONGLONG(0);
  _clear_bit(1);
}
inline ::google::protobuf::int64 DB_One_Yuan_Purchase_Winner::userid() const {
  return userid_;
}
inline void DB_One_Yuan_Purchase_Winner::set_userid(::google::protobuf::int64 value) {
  _set_bit(1);
  userid_ = value;
}

// optional bool bFetch = 3 [default = false];
inline bool DB_One_Yuan_Purchase_Winner::has_bfetch() const {
  return _has_bit(2);
}
inline void DB_One_Yuan_Purchase_Winner::clear_bfetch() {
  bfetch_ = false;
  _clear_bit(2);
}
inline bool DB_One_Yuan_Purchase_Winner::bfetch() const {
  return bfetch_;
}
inline void DB_One_Yuan_Purchase_Winner::set_bfetch(bool value) {
  _set_bit(2);
  bfetch_ = value;
}

// -------------------------------------------------------------------

// DB_Region_One_Yuan

// optional int32 oneYuanPurchaseClearTime = 1 [default = 0];
inline bool DB_Region_One_Yuan::has_oneyuanpurchasecleartime() const {
  return _has_bit(0);
}
inline void DB_Region_One_Yuan::clear_oneyuanpurchasecleartime() {
  oneyuanpurchasecleartime_ = 0;
  _clear_bit(0);
}
inline ::google::protobuf::int32 DB_Region_One_Yuan::oneyuanpurchasecleartime() const {
  return oneyuanpurchasecleartime_;
}
inline void DB_Region_One_Yuan::set_oneyuanpurchasecleartime(::google::protobuf::int32 value) {
  _set_bit(0);
  oneyuanpurchasecleartime_ = value;
}

// repeated .DB_One_Yuan_Purchase_Winner win = 2;
inline int DB_Region_One_Yuan::win_size() const {
  return win_.size();
}
inline void DB_Region_One_Yuan::clear_win() {
  win_.Clear();
}
inline const ::google::protobuf::RepeatedPtrField< ::DB_One_Yuan_Purchase_Winner >&
DB_Region_One_Yuan::win() const {
  return win_;
}
inline ::google::protobuf::RepeatedPtrField< ::DB_One_Yuan_Purchase_Winner >*
DB_Region_One_Yuan::mutable_win() {
  return &win_;
}
inline const ::DB_One_Yuan_Purchase_Winner& DB_Region_One_Yuan::win(int index) const {
  return win_.Get(index);
}
inline ::DB_One_Yuan_Purchase_Winner* DB_Region_One_Yuan::mutable_win(int index) {
  return win_.Mutable(index);
}
inline ::DB_One_Yuan_Purchase_Winner* DB_Region_One_Yuan::add_win() {
  return win_.Add();
}

// -------------------------------------------------------------------

// DB_C_UserList

// required int32 key = 1;
inline bool DB_C_UserList::has_key() const {
  return _has_bit(0);
}
inline void DB_C_UserList::clear_key() {
  key_ = 0;
  _clear_bit(0);
}
inline ::google::protobuf::int32 DB_C_UserList::key() const {
  return key_;
}
inline void DB_C_UserList::set_key(::google::protobuf::int32 value) {
  _set_bit(0);
  key_ = value;
}

// required int32 region = 2;
inline bool DB_C_UserList::has_region() const {
  return _has_bit(1);
}
inline void DB_C_UserList::clear_region() {
  region_ = 0;
  _clear_bit(1);
}
inline ::google::protobuf::int32 DB_C_UserList::region() const {
  return region_;
}
inline void DB_C_UserList::set_region(::google::protobuf::int32 value) {
  _set_bit(1);
  region_ = value;
}

// required int32 index = 3;
inline bool DB_C_UserList::has_index() const {
  return _has_bit(2);
}
inline void DB_C_UserList::clear_index() {
  index_ = 0;
  _clear_bit(2);
}
inline ::google::protobuf::int32 DB_C_UserList::index() const {
  return index_;
}
inline void DB_C_UserList::set_index(::google::protobuf::int32 value) {
  _set_bit(2);
  index_ = value;
}

// optional int64 ltSaveRevision = 4 [default = 0];
inline bool DB_C_UserList::has_ltsaverevision() const {
  return _has_bit(3);
}
inline void DB_C_UserList::clear_ltsaverevision() {
  ltsaverevision_ = GOOGLE_LONGLONG(0);
  _clear_bit(3);
}
inline ::google::protobuf::int64 DB_C_UserList::ltsaverevision() const {
  return ltsaverevision_;
}
inline void DB_C_UserList::set_ltsaverevision(::google::protobuf::int64 value) {
  _set_bit(3);
  ltsaverevision_ = value;
}

// repeated .DB_C_User user = 5;
inline int DB_C_UserList::user_size() const {
  return user_.size();
}
inline void DB_C_UserList::clear_user() {
  user_.Clear();
}
inline const ::google::protobuf::RepeatedPtrField< ::DB_C_User >&
DB_C_UserList::user() const {
  return user_;
}
inline ::google::protobuf::RepeatedPtrField< ::DB_C_User >*
DB_C_UserList::mutable_user() {
  return &user_;
}
inline const ::DB_C_User& DB_C_UserList::user(int index) const {
  return user_.Get(index);
}
inline ::DB_C_User* DB_C_UserList::mutable_user(int index) {
  return user_.Mutable(index);
}
inline ::DB_C_User* DB_C_UserList::add_user() {
  return user_.Add();
}

// optional .DB_Region_One_Yuan regiononeyuan = 6;
inline bool DB_C_UserList::has_regiononeyuan() const {
  return _has_bit(5);
}
inline void DB_C_UserList::clear_regiononeyuan() {
  if (regiononeyuan_ != NULL) regiononeyuan_->::DB_Region_One_Yuan::Clear();
  _clear_bit(5);
}
inline const ::DB_Region_One_Yuan& DB_C_UserList::regiononeyuan() const {
  return regiononeyuan_ != NULL ? *regiononeyuan_ : *default_instance_->regiononeyuan_;
}
inline ::DB_Region_One_Yuan* DB_C_UserList::mutable_regiononeyuan() {
  _set_bit(5);
  if (regiononeyuan_ == NULL) regiononeyuan_ = new ::DB_Region_One_Yuan;
  return regiononeyuan_;
}

// -------------------------------------------------------------------

// DB_C_NPC

// optional int32 npcID = 1;
inline bool DB_C_NPC::has_npcid() const {
  return _has_bit(0);
}
inline void DB_C_NPC::clear_npcid() {
  npcid_ = 0;
  _clear_bit(0);
}
inline ::google::protobuf::int32 DB_C_NPC::npcid() const {
  return npcid_;
}
inline void DB_C_NPC::set_npcid(::google::protobuf::int32 value) {
  _set_bit(0);
  npcid_ = value;
}

// optional int32 morale = 2;
inline bool DB_C_NPC::has_morale() const {
  return _has_bit(1);
}
inline void DB_C_NPC::clear_morale() {
  morale_ = 0;
  _clear_bit(1);
}
inline ::google::protobuf::int32 DB_C_NPC::morale() const {
  return morale_;
}
inline void DB_C_NPC::set_morale(::google::protobuf::int32 value) {
  _set_bit(1);
  morale_ = value;
}

// -------------------------------------------------------------------

// DB_C_CountryRank

// optional int32 nextTime = 1 [default = 0];
inline bool DB_C_CountryRank::has_nexttime() const {
  return _has_bit(0);
}
inline void DB_C_CountryRank::clear_nexttime() {
  nexttime_ = 0;
  _clear_bit(0);
}
inline ::google::protobuf::int32 DB_C_CountryRank::nexttime() const {
  return nexttime_;
}
inline void DB_C_CountryRank::set_nexttime(::google::protobuf::int32 value) {
  _set_bit(0);
  nexttime_ = value;
}

// optional int32 rank = 2 [default = 0];
inline bool DB_C_CountryRank::has_rank() const {
  return _has_bit(1);
}
inline void DB_C_CountryRank::clear_rank() {
  rank_ = 0;
  _clear_bit(1);
}
inline ::google::protobuf::int32 DB_C_CountryRank::rank() const {
  return rank_;
}
inline void DB_C_CountryRank::set_rank(::google::protobuf::int32 value) {
  _set_bit(1);
  rank_ = value;
}

// optional int32 boom = 3 [default = 0];
inline bool DB_C_CountryRank::has_boom() const {
  return _has_bit(2);
}
inline void DB_C_CountryRank::clear_boom() {
  boom_ = 0;
  _clear_bit(2);
}
inline ::google::protobuf::int32 DB_C_CountryRank::boom() const {
  return boom_;
}
inline void DB_C_CountryRank::set_boom(::google::protobuf::int32 value) {
  _set_bit(2);
  boom_ = value;
}

// -------------------------------------------------------------------

// DB_C_CountryLeagueBattle

// optional int32 activeFlag = 1 [default = 0];
inline bool DB_C_CountryLeagueBattle::has_activeflag() const {
  return _has_bit(0);
}
inline void DB_C_CountryLeagueBattle::clear_activeflag() {
  activeflag_ = 0;
  _clear_bit(0);
}
inline ::google::protobuf::int32 DB_C_CountryLeagueBattle::activeflag() const {
  return activeflag_;
}
inline void DB_C_CountryLeagueBattle::set_activeflag(::google::protobuf::int32 value) {
  _set_bit(0);
  activeflag_ = value;
}

// optional int32 rank = 2 [default = 0];
inline bool DB_C_CountryLeagueBattle::has_rank() const {
  return _has_bit(1);
}
inline void DB_C_CountryLeagueBattle::clear_rank() {
  rank_ = 0;
  _clear_bit(1);
}
inline ::google::protobuf::int32 DB_C_CountryLeagueBattle::rank() const {
  return rank_;
}
inline void DB_C_CountryLeagueBattle::set_rank(::google::protobuf::int32 value) {
  _set_bit(1);
  rank_ = value;
}

// optional int32 boom = 3 [default = 0];
inline bool DB_C_CountryLeagueBattle::has_boom() const {
  return _has_bit(2);
}
inline void DB_C_CountryLeagueBattle::clear_boom() {
  boom_ = 0;
  _clear_bit(2);
}
inline ::google::protobuf::int32 DB_C_CountryLeagueBattle::boom() const {
  return boom_;
}
inline void DB_C_CountryLeagueBattle::set_boom(::google::protobuf::int32 value) {
  _set_bit(2);
  boom_ = value;
}

// optional int32 leagueID = 4 [default = 0];
inline bool DB_C_CountryLeagueBattle::has_leagueid() const {
  return _has_bit(3);
}
inline void DB_C_CountryLeagueBattle::clear_leagueid() {
  leagueid_ = 0;
  _clear_bit(3);
}
inline ::google::protobuf::int32 DB_C_CountryLeagueBattle::leagueid() const {
  return leagueid_;
}
inline void DB_C_CountryLeagueBattle::set_leagueid(::google::protobuf::int32 value) {
  _set_bit(3);
  leagueid_ = value;
}

// optional int32 winID = 5 [default = 0];
inline bool DB_C_CountryLeagueBattle::has_winid() const {
  return _has_bit(4);
}
inline void DB_C_CountryLeagueBattle::clear_winid() {
  winid_ = 0;
  _clear_bit(4);
}
inline ::google::protobuf::int32 DB_C_CountryLeagueBattle::winid() const {
  return winid_;
}
inline void DB_C_CountryLeagueBattle::set_winid(::google::protobuf::int32 value) {
  _set_bit(4);
  winid_ = value;
}

// optional int32 activeState = 6 [default = 0];
inline bool DB_C_CountryLeagueBattle::has_activestate() const {
  return _has_bit(5);
}
inline void DB_C_CountryLeagueBattle::clear_activestate() {
  activestate_ = 0;
  _clear_bit(5);
}
inline ::google::protobuf::int32 DB_C_CountryLeagueBattle::activestate() const {
  return activestate_;
}
inline void DB_C_CountryLeagueBattle::set_activestate(::google::protobuf::int32 value) {
  _set_bit(5);
  activestate_ = value;
}

// -------------------------------------------------------------------

// DB_C_CountryLeagueMsg

// optional int32 leagueID = 1 [default = 0];
inline bool DB_C_CountryLeagueMsg::has_leagueid() const {
  return _has_bit(0);
}
inline void DB_C_CountryLeagueMsg::clear_leagueid() {
  leagueid_ = 0;
  _clear_bit(0);
}
inline ::google::protobuf::int32 DB_C_CountryLeagueMsg::leagueid() const {
  return leagueid_;
}
inline void DB_C_CountryLeagueMsg::set_leagueid(::google::protobuf::int32 value) {
  _set_bit(0);
  leagueid_ = value;
}

// repeated int32 countryID = 2;
inline int DB_C_CountryLeagueMsg::countryid_size() const {
  return countryid_.size();
}
inline void DB_C_CountryLeagueMsg::clear_countryid() {
  countryid_.Clear();
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
DB_C_CountryLeagueMsg::countryid() const {
  return countryid_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
DB_C_CountryLeagueMsg::mutable_countryid() {
  return &countryid_;
}
inline ::google::protobuf::int32 DB_C_CountryLeagueMsg::countryid(int index) const {
  return countryid_.Get(index);
}
inline void DB_C_CountryLeagueMsg::set_countryid(int index, ::google::protobuf::int32 value) {
  countryid_.Set(index, value);
}
inline void DB_C_CountryLeagueMsg::add_countryid(::google::protobuf::int32 value) {
  countryid_.Add(value);
}

// repeated .DB_C_LeaguePlayerUnit playerRankList = 3;
inline int DB_C_CountryLeagueMsg::playerranklist_size() const {
  return playerranklist_.size();
}
inline void DB_C_CountryLeagueMsg::clear_playerranklist() {
  playerranklist_.Clear();
}
inline const ::google::protobuf::RepeatedPtrField< ::DB_C_LeaguePlayerUnit >&
DB_C_CountryLeagueMsg::playerranklist() const {
  return playerranklist_;
}
inline ::google::protobuf::RepeatedPtrField< ::DB_C_LeaguePlayerUnit >*
DB_C_CountryLeagueMsg::mutable_playerranklist() {
  return &playerranklist_;
}
inline const ::DB_C_LeaguePlayerUnit& DB_C_CountryLeagueMsg::playerranklist(int index) const {
  return playerranklist_.Get(index);
}
inline ::DB_C_LeaguePlayerUnit* DB_C_CountryLeagueMsg::mutable_playerranklist(int index) {
  return playerranklist_.Mutable(index);
}
inline ::DB_C_LeaguePlayerUnit* DB_C_CountryLeagueMsg::add_playerranklist() {
  return playerranklist_.Add();
}

// repeated .DB_C_LeaguePlayerUnit playerRankLastList = 4;
inline int DB_C_CountryLeagueMsg::playerranklastlist_size() const {
  return playerranklastlist_.size();
}
inline void DB_C_CountryLeagueMsg::clear_playerranklastlist() {
  playerranklastlist_.Clear();
}
inline const ::google::protobuf::RepeatedPtrField< ::DB_C_LeaguePlayerUnit >&
DB_C_CountryLeagueMsg::playerranklastlist() const {
  return playerranklastlist_;
}
inline ::google::protobuf::RepeatedPtrField< ::DB_C_LeaguePlayerUnit >*
DB_C_CountryLeagueMsg::mutable_playerranklastlist() {
  return &playerranklastlist_;
}
inline const ::DB_C_LeaguePlayerUnit& DB_C_CountryLeagueMsg::playerranklastlist(int index) const {
  return playerranklastlist_.Get(index);
}
inline ::DB_C_LeaguePlayerUnit* DB_C_CountryLeagueMsg::mutable_playerranklastlist(int index) {
  return playerranklastlist_.Mutable(index);
}
inline ::DB_C_LeaguePlayerUnit* DB_C_CountryLeagueMsg::add_playerranklastlist() {
  return playerranklastlist_.Add();
}

// repeated .DB_C_LeagueGuildUnit guildList = 5;
inline int DB_C_CountryLeagueMsg::guildlist_size() const {
  return guildlist_.size();
}
inline void DB_C_CountryLeagueMsg::clear_guildlist() {
  guildlist_.Clear();
}
inline const ::google::protobuf::RepeatedPtrField< ::DB_C_LeagueGuildUnit >&
DB_C_CountryLeagueMsg::guildlist() const {
  return guildlist_;
}
inline ::google::protobuf::RepeatedPtrField< ::DB_C_LeagueGuildUnit >*
DB_C_CountryLeagueMsg::mutable_guildlist() {
  return &guildlist_;
}
inline const ::DB_C_LeagueGuildUnit& DB_C_CountryLeagueMsg::guildlist(int index) const {
  return guildlist_.Get(index);
}
inline ::DB_C_LeagueGuildUnit* DB_C_CountryLeagueMsg::mutable_guildlist(int index) {
  return guildlist_.Mutable(index);
}
inline ::DB_C_LeagueGuildUnit* DB_C_CountryLeagueMsg::add_guildlist() {
  return guildlist_.Add();
}

// repeated .DB_C_LeagueGuildUnit guildLastList = 6;
inline int DB_C_CountryLeagueMsg::guildlastlist_size() const {
  return guildlastlist_.size();
}
inline void DB_C_CountryLeagueMsg::clear_guildlastlist() {
  guildlastlist_.Clear();
}
inline const ::google::protobuf::RepeatedPtrField< ::DB_C_LeagueGuildUnit >&
DB_C_CountryLeagueMsg::guildlastlist() const {
  return guildlastlist_;
}
inline ::google::protobuf::RepeatedPtrField< ::DB_C_LeagueGuildUnit >*
DB_C_CountryLeagueMsg::mutable_guildlastlist() {
  return &guildlastlist_;
}
inline const ::DB_C_LeagueGuildUnit& DB_C_CountryLeagueMsg::guildlastlist(int index) const {
  return guildlastlist_.Get(index);
}
inline ::DB_C_LeagueGuildUnit* DB_C_CountryLeagueMsg::mutable_guildlastlist(int index) {
  return guildlastlist_.Mutable(index);
}
inline ::DB_C_LeagueGuildUnit* DB_C_CountryLeagueMsg::add_guildlastlist() {
  return guildlastlist_.Add();
}

// repeated int32 lastCountryID = 7;
inline int DB_C_CountryLeagueMsg::lastcountryid_size() const {
  return lastcountryid_.size();
}
inline void DB_C_CountryLeagueMsg::clear_lastcountryid() {
  lastcountryid_.Clear();
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
DB_C_CountryLeagueMsg::lastcountryid() const {
  return lastcountryid_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
DB_C_CountryLeagueMsg::mutable_lastcountryid() {
  return &lastcountryid_;
}
inline ::google::protobuf::int32 DB_C_CountryLeagueMsg::lastcountryid(int index) const {
  return lastcountryid_.Get(index);
}
inline void DB_C_CountryLeagueMsg::set_lastcountryid(int index, ::google::protobuf::int32 value) {
  lastcountryid_.Set(index, value);
}
inline void DB_C_CountryLeagueMsg::add_lastcountryid(::google::protobuf::int32 value) {
  lastcountryid_.Add(value);
}

// repeated int32 boomRecord = 8;
inline int DB_C_CountryLeagueMsg::boomrecord_size() const {
  return boomrecord_.size();
}
inline void DB_C_CountryLeagueMsg::clear_boomrecord() {
  boomrecord_.Clear();
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
DB_C_CountryLeagueMsg::boomrecord() const {
  return boomrecord_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
DB_C_CountryLeagueMsg::mutable_boomrecord() {
  return &boomrecord_;
}
inline ::google::protobuf::int32 DB_C_CountryLeagueMsg::boomrecord(int index) const {
  return boomrecord_.Get(index);
}
inline void DB_C_CountryLeagueMsg::set_boomrecord(int index, ::google::protobuf::int32 value) {
  boomrecord_.Set(index, value);
}
inline void DB_C_CountryLeagueMsg::add_boomrecord(::google::protobuf::int32 value) {
  boomrecord_.Add(value);
}

// -------------------------------------------------------------------

// DB_C_LeaguePlayerUnit

// optional string uid = 1;
inline bool DB_C_LeaguePlayerUnit::has_uid() const {
  return _has_bit(0);
}
inline void DB_C_LeaguePlayerUnit::clear_uid() {
  if (uid_ != &_default_uid_) {
    uid_->clear();
  }
  _clear_bit(0);
}
inline const ::std::string& DB_C_LeaguePlayerUnit::uid() const {
  return *uid_;
}
inline void DB_C_LeaguePlayerUnit::set_uid(const ::std::string& value) {
  _set_bit(0);
  if (uid_ == &_default_uid_) {
    uid_ = new ::std::string;
  }
  uid_->assign(value);
}
inline void DB_C_LeaguePlayerUnit::set_uid(const char* value) {
  _set_bit(0);
  if (uid_ == &_default_uid_) {
    uid_ = new ::std::string;
  }
  uid_->assign(value);
}
inline void DB_C_LeaguePlayerUnit::set_uid(const char* value, size_t size) {
  _set_bit(0);
  if (uid_ == &_default_uid_) {
    uid_ = new ::std::string;
  }
  uid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* DB_C_LeaguePlayerUnit::mutable_uid() {
  _set_bit(0);
  if (uid_ == &_default_uid_) {
    uid_ = new ::std::string;
  }
  return uid_;
}

// optional string name = 2;
inline bool DB_C_LeaguePlayerUnit::has_name() const {
  return _has_bit(1);
}
inline void DB_C_LeaguePlayerUnit::clear_name() {
  if (name_ != &_default_name_) {
    name_->clear();
  }
  _clear_bit(1);
}
inline const ::std::string& DB_C_LeaguePlayerUnit::name() const {
  return *name_;
}
inline void DB_C_LeaguePlayerUnit::set_name(const ::std::string& value) {
  _set_bit(1);
  if (name_ == &_default_name_) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void DB_C_LeaguePlayerUnit::set_name(const char* value) {
  _set_bit(1);
  if (name_ == &_default_name_) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void DB_C_LeaguePlayerUnit::set_name(const char* value, size_t size) {
  _set_bit(1);
  if (name_ == &_default_name_) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* DB_C_LeaguePlayerUnit::mutable_name() {
  _set_bit(1);
  if (name_ == &_default_name_) {
    name_ = new ::std::string;
  }
  return name_;
}

// optional string pic = 3;
inline bool DB_C_LeaguePlayerUnit::has_pic() const {
  return _has_bit(2);
}
inline void DB_C_LeaguePlayerUnit::clear_pic() {
  if (pic_ != &_default_pic_) {
    pic_->clear();
  }
  _clear_bit(2);
}
inline const ::std::string& DB_C_LeaguePlayerUnit::pic() const {
  return *pic_;
}
inline void DB_C_LeaguePlayerUnit::set_pic(const ::std::string& value) {
  _set_bit(2);
  if (pic_ == &_default_pic_) {
    pic_ = new ::std::string;
  }
  pic_->assign(value);
}
inline void DB_C_LeaguePlayerUnit::set_pic(const char* value) {
  _set_bit(2);
  if (pic_ == &_default_pic_) {
    pic_ = new ::std::string;
  }
  pic_->assign(value);
}
inline void DB_C_LeaguePlayerUnit::set_pic(const char* value, size_t size) {
  _set_bit(2);
  if (pic_ == &_default_pic_) {
    pic_ = new ::std::string;
  }
  pic_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* DB_C_LeaguePlayerUnit::mutable_pic() {
  _set_bit(2);
  if (pic_ == &_default_pic_) {
    pic_ = new ::std::string;
  }
  return pic_;
}

// optional int32 countryid = 4;
inline bool DB_C_LeaguePlayerUnit::has_countryid() const {
  return _has_bit(3);
}
inline void DB_C_LeaguePlayerUnit::clear_countryid() {
  countryid_ = 0;
  _clear_bit(3);
}
inline ::google::protobuf::int32 DB_C_LeaguePlayerUnit::countryid() const {
  return countryid_;
}
inline void DB_C_LeaguePlayerUnit::set_countryid(::google::protobuf::int32 value) {
  _set_bit(3);
  countryid_ = value;
}

// optional string guildName = 5;
inline bool DB_C_LeaguePlayerUnit::has_guildname() const {
  return _has_bit(4);
}
inline void DB_C_LeaguePlayerUnit::clear_guildname() {
  if (guildname_ != &_default_guildname_) {
    guildname_->clear();
  }
  _clear_bit(4);
}
inline const ::std::string& DB_C_LeaguePlayerUnit::guildname() const {
  return *guildname_;
}
inline void DB_C_LeaguePlayerUnit::set_guildname(const ::std::string& value) {
  _set_bit(4);
  if (guildname_ == &_default_guildname_) {
    guildname_ = new ::std::string;
  }
  guildname_->assign(value);
}
inline void DB_C_LeaguePlayerUnit::set_guildname(const char* value) {
  _set_bit(4);
  if (guildname_ == &_default_guildname_) {
    guildname_ = new ::std::string;
  }
  guildname_->assign(value);
}
inline void DB_C_LeaguePlayerUnit::set_guildname(const char* value, size_t size) {
  _set_bit(4);
  if (guildname_ == &_default_guildname_) {
    guildname_ = new ::std::string;
  }
  guildname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* DB_C_LeaguePlayerUnit::mutable_guildname() {
  _set_bit(4);
  if (guildname_ == &_default_guildname_) {
    guildname_ = new ::std::string;
  }
  return guildname_;
}

// optional int32 fightPoint = 6;
inline bool DB_C_LeaguePlayerUnit::has_fightpoint() const {
  return _has_bit(5);
}
inline void DB_C_LeaguePlayerUnit::clear_fightpoint() {
  fightpoint_ = 0;
  _clear_bit(5);
}
inline ::google::protobuf::int32 DB_C_LeaguePlayerUnit::fightpoint() const {
  return fightpoint_;
}
inline void DB_C_LeaguePlayerUnit::set_fightpoint(::google::protobuf::int32 value) {
  _set_bit(5);
  fightpoint_ = value;
}

// optional int32 level = 7;
inline bool DB_C_LeaguePlayerUnit::has_level() const {
  return _has_bit(6);
}
inline void DB_C_LeaguePlayerUnit::clear_level() {
  level_ = 0;
  _clear_bit(6);
}
inline ::google::protobuf::int32 DB_C_LeaguePlayerUnit::level() const {
  return level_;
}
inline void DB_C_LeaguePlayerUnit::set_level(::google::protobuf::int32 value) {
  _set_bit(6);
  level_ = value;
}

// optional int32 leaguePoint = 8;
inline bool DB_C_LeaguePlayerUnit::has_leaguepoint() const {
  return _has_bit(7);
}
inline void DB_C_LeaguePlayerUnit::clear_leaguepoint() {
  leaguepoint_ = 0;
  _clear_bit(7);
}
inline ::google::protobuf::int32 DB_C_LeaguePlayerUnit::leaguepoint() const {
  return leaguepoint_;
}
inline void DB_C_LeaguePlayerUnit::set_leaguepoint(::google::protobuf::int32 value) {
  _set_bit(7);
  leaguepoint_ = value;
}

// -------------------------------------------------------------------

// DB_C_LeagueGuildUnit

// optional int32 guildID = 1;
inline bool DB_C_LeagueGuildUnit::has_guildid() const {
  return _has_bit(0);
}
inline void DB_C_LeagueGuildUnit::clear_guildid() {
  guildid_ = 0;
  _clear_bit(0);
}
inline ::google::protobuf::int32 DB_C_LeagueGuildUnit::guildid() const {
  return guildid_;
}
inline void DB_C_LeagueGuildUnit::set_guildid(::google::protobuf::int32 value) {
  _set_bit(0);
  guildid_ = value;
}

// optional string guildName = 2;
inline bool DB_C_LeagueGuildUnit::has_guildname() const {
  return _has_bit(1);
}
inline void DB_C_LeagueGuildUnit::clear_guildname() {
  if (guildname_ != &_default_guildname_) {
    guildname_->clear();
  }
  _clear_bit(1);
}
inline const ::std::string& DB_C_LeagueGuildUnit::guildname() const {
  return *guildname_;
}
inline void DB_C_LeagueGuildUnit::set_guildname(const ::std::string& value) {
  _set_bit(1);
  if (guildname_ == &_default_guildname_) {
    guildname_ = new ::std::string;
  }
  guildname_->assign(value);
}
inline void DB_C_LeagueGuildUnit::set_guildname(const char* value) {
  _set_bit(1);
  if (guildname_ == &_default_guildname_) {
    guildname_ = new ::std::string;
  }
  guildname_->assign(value);
}
inline void DB_C_LeagueGuildUnit::set_guildname(const char* value, size_t size) {
  _set_bit(1);
  if (guildname_ == &_default_guildname_) {
    guildname_ = new ::std::string;
  }
  guildname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* DB_C_LeagueGuildUnit::mutable_guildname() {
  _set_bit(1);
  if (guildname_ == &_default_guildname_) {
    guildname_ = new ::std::string;
  }
  return guildname_;
}

// optional string leaderName = 3;
inline bool DB_C_LeagueGuildUnit::has_leadername() const {
  return _has_bit(2);
}
inline void DB_C_LeagueGuildUnit::clear_leadername() {
  if (leadername_ != &_default_leadername_) {
    leadername_->clear();
  }
  _clear_bit(2);
}
inline const ::std::string& DB_C_LeagueGuildUnit::leadername() const {
  return *leadername_;
}
inline void DB_C_LeagueGuildUnit::set_leadername(const ::std::string& value) {
  _set_bit(2);
  if (leadername_ == &_default_leadername_) {
    leadername_ = new ::std::string;
  }
  leadername_->assign(value);
}
inline void DB_C_LeagueGuildUnit::set_leadername(const char* value) {
  _set_bit(2);
  if (leadername_ == &_default_leadername_) {
    leadername_ = new ::std::string;
  }
  leadername_->assign(value);
}
inline void DB_C_LeagueGuildUnit::set_leadername(const char* value, size_t size) {
  _set_bit(2);
  if (leadername_ == &_default_leadername_) {
    leadername_ = new ::std::string;
  }
  leadername_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* DB_C_LeagueGuildUnit::mutable_leadername() {
  _set_bit(2);
  if (leadername_ == &_default_leadername_) {
    leadername_ = new ::std::string;
  }
  return leadername_;
}

// optional int32 LeaguePoint = 4;
inline bool DB_C_LeagueGuildUnit::has_leaguepoint() const {
  return _has_bit(3);
}
inline void DB_C_LeagueGuildUnit::clear_leaguepoint() {
  leaguepoint_ = 0;
  _clear_bit(3);
}
inline ::google::protobuf::int32 DB_C_LeagueGuildUnit::leaguepoint() const {
  return leaguepoint_;
}
inline void DB_C_LeagueGuildUnit::set_leaguepoint(::google::protobuf::int32 value) {
  _set_bit(3);
  leaguepoint_ = value;
}

// optional int32 countryID = 5;
inline bool DB_C_LeagueGuildUnit::has_countryid() const {
  return _has_bit(4);
}
inline void DB_C_LeagueGuildUnit::clear_countryid() {
  countryid_ = 0;
  _clear_bit(4);
}
inline ::google::protobuf::int32 DB_C_LeagueGuildUnit::countryid() const {
  return countryid_;
}
inline void DB_C_LeagueGuildUnit::set_countryid(::google::protobuf::int32 value) {
  _set_bit(4);
  countryid_ = value;
}

// -------------------------------------------------------------------

// DB_C_BtlRecord

// optional int32 type = 1;
inline bool DB_C_BtlRecord::has_type() const {
  return _has_bit(0);
}
inline void DB_C_BtlRecord::clear_type() {
  type_ = 0;
  _clear_bit(0);
}
inline ::google::protobuf::int32 DB_C_BtlRecord::type() const {
  return type_;
}
inline void DB_C_BtlRecord::set_type(::google::protobuf::int32 value) {
  _set_bit(0);
  type_ = value;
}

// optional int32 btlTime = 2;
inline bool DB_C_BtlRecord::has_btltime() const {
  return _has_bit(1);
}
inline void DB_C_BtlRecord::clear_btltime() {
  btltime_ = 0;
  _clear_bit(1);
}
inline ::google::protobuf::int32 DB_C_BtlRecord::btltime() const {
  return btltime_;
}
inline void DB_C_BtlRecord::set_btltime(::google::protobuf::int32 value) {
  _set_bit(1);
  btltime_ = value;
}

// optional string atkID = 3;
inline bool DB_C_BtlRecord::has_atkid() const {
  return _has_bit(2);
}
inline void DB_C_BtlRecord::clear_atkid() {
  if (atkid_ != &_default_atkid_) {
    atkid_->clear();
  }
  _clear_bit(2);
}
inline const ::std::string& DB_C_BtlRecord::atkid() const {
  return *atkid_;
}
inline void DB_C_BtlRecord::set_atkid(const ::std::string& value) {
  _set_bit(2);
  if (atkid_ == &_default_atkid_) {
    atkid_ = new ::std::string;
  }
  atkid_->assign(value);
}
inline void DB_C_BtlRecord::set_atkid(const char* value) {
  _set_bit(2);
  if (atkid_ == &_default_atkid_) {
    atkid_ = new ::std::string;
  }
  atkid_->assign(value);
}
inline void DB_C_BtlRecord::set_atkid(const char* value, size_t size) {
  _set_bit(2);
  if (atkid_ == &_default_atkid_) {
    atkid_ = new ::std::string;
  }
  atkid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* DB_C_BtlRecord::mutable_atkid() {
  _set_bit(2);
  if (atkid_ == &_default_atkid_) {
    atkid_ = new ::std::string;
  }
  return atkid_;
}

// optional string atkName = 4;
inline bool DB_C_BtlRecord::has_atkname() const {
  return _has_bit(3);
}
inline void DB_C_BtlRecord::clear_atkname() {
  if (atkname_ != &_default_atkname_) {
    atkname_->clear();
  }
  _clear_bit(3);
}
inline const ::std::string& DB_C_BtlRecord::atkname() const {
  return *atkname_;
}
inline void DB_C_BtlRecord::set_atkname(const ::std::string& value) {
  _set_bit(3);
  if (atkname_ == &_default_atkname_) {
    atkname_ = new ::std::string;
  }
  atkname_->assign(value);
}
inline void DB_C_BtlRecord::set_atkname(const char* value) {
  _set_bit(3);
  if (atkname_ == &_default_atkname_) {
    atkname_ = new ::std::string;
  }
  atkname_->assign(value);
}
inline void DB_C_BtlRecord::set_atkname(const char* value, size_t size) {
  _set_bit(3);
  if (atkname_ == &_default_atkname_) {
    atkname_ = new ::std::string;
  }
  atkname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* DB_C_BtlRecord::mutable_atkname() {
  _set_bit(3);
  if (atkname_ == &_default_atkname_) {
    atkname_ = new ::std::string;
  }
  return atkname_;
}

// optional int32 atkCountry = 5;
inline bool DB_C_BtlRecord::has_atkcountry() const {
  return _has_bit(4);
}
inline void DB_C_BtlRecord::clear_atkcountry() {
  atkcountry_ = 0;
  _clear_bit(4);
}
inline ::google::protobuf::int32 DB_C_BtlRecord::atkcountry() const {
  return atkcountry_;
}
inline void DB_C_BtlRecord::set_atkcountry(::google::protobuf::int32 value) {
  _set_bit(4);
  atkcountry_ = value;
}

// optional string defID = 6;
inline bool DB_C_BtlRecord::has_defid() const {
  return _has_bit(5);
}
inline void DB_C_BtlRecord::clear_defid() {
  if (defid_ != &_default_defid_) {
    defid_->clear();
  }
  _clear_bit(5);
}
inline const ::std::string& DB_C_BtlRecord::defid() const {
  return *defid_;
}
inline void DB_C_BtlRecord::set_defid(const ::std::string& value) {
  _set_bit(5);
  if (defid_ == &_default_defid_) {
    defid_ = new ::std::string;
  }
  defid_->assign(value);
}
inline void DB_C_BtlRecord::set_defid(const char* value) {
  _set_bit(5);
  if (defid_ == &_default_defid_) {
    defid_ = new ::std::string;
  }
  defid_->assign(value);
}
inline void DB_C_BtlRecord::set_defid(const char* value, size_t size) {
  _set_bit(5);
  if (defid_ == &_default_defid_) {
    defid_ = new ::std::string;
  }
  defid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* DB_C_BtlRecord::mutable_defid() {
  _set_bit(5);
  if (defid_ == &_default_defid_) {
    defid_ = new ::std::string;
  }
  return defid_;
}

// optional string defName = 7;
inline bool DB_C_BtlRecord::has_defname() const {
  return _has_bit(6);
}
inline void DB_C_BtlRecord::clear_defname() {
  if (defname_ != &_default_defname_) {
    defname_->clear();
  }
  _clear_bit(6);
}
inline const ::std::string& DB_C_BtlRecord::defname() const {
  return *defname_;
}
inline void DB_C_BtlRecord::set_defname(const ::std::string& value) {
  _set_bit(6);
  if (defname_ == &_default_defname_) {
    defname_ = new ::std::string;
  }
  defname_->assign(value);
}
inline void DB_C_BtlRecord::set_defname(const char* value) {
  _set_bit(6);
  if (defname_ == &_default_defname_) {
    defname_ = new ::std::string;
  }
  defname_->assign(value);
}
inline void DB_C_BtlRecord::set_defname(const char* value, size_t size) {
  _set_bit(6);
  if (defname_ == &_default_defname_) {
    defname_ = new ::std::string;
  }
  defname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* DB_C_BtlRecord::mutable_defname() {
  _set_bit(6);
  if (defname_ == &_default_defname_) {
    defname_ = new ::std::string;
  }
  return defname_;
}

// optional int32 defCountry = 8;
inline bool DB_C_BtlRecord::has_defcountry() const {
  return _has_bit(7);
}
inline void DB_C_BtlRecord::clear_defcountry() {
  defcountry_ = 0;
  _clear_bit(7);
}
inline ::google::protobuf::int32 DB_C_BtlRecord::defcountry() const {
  return defcountry_;
}
inline void DB_C_BtlRecord::set_defcountry(::google::protobuf::int32 value) {
  _set_bit(7);
  defcountry_ = value;
}

// optional int32 cityID = 9;
inline bool DB_C_BtlRecord::has_cityid() const {
  return _has_bit(8);
}
inline void DB_C_BtlRecord::clear_cityid() {
  cityid_ = 0;
  _clear_bit(8);
}
inline ::google::protobuf::int32 DB_C_BtlRecord::cityid() const {
  return cityid_;
}
inline void DB_C_BtlRecord::set_cityid(::google::protobuf::int32 value) {
  _set_bit(8);
  cityid_ = value;
}

// optional int32 winningCnt = 10;
inline bool DB_C_BtlRecord::has_winningcnt() const {
  return _has_bit(9);
}
inline void DB_C_BtlRecord::clear_winningcnt() {
  winningcnt_ = 0;
  _clear_bit(9);
}
inline ::google::protobuf::int32 DB_C_BtlRecord::winningcnt() const {
  return winningcnt_;
}
inline void DB_C_BtlRecord::set_winningcnt(::google::protobuf::int32 value) {
  _set_bit(9);
  winningcnt_ = value;
}

// optional int32 bloodAtkCity = 11;
inline bool DB_C_BtlRecord::has_bloodatkcity() const {
  return _has_bit(10);
}
inline void DB_C_BtlRecord::clear_bloodatkcity() {
  bloodatkcity_ = 0;
  _clear_bit(10);
}
inline ::google::protobuf::int32 DB_C_BtlRecord::bloodatkcity() const {
  return bloodatkcity_;
}
inline void DB_C_BtlRecord::set_bloodatkcity(::google::protobuf::int32 value) {
  _set_bit(10);
  bloodatkcity_ = value;
}

// optional int32 bloodDefCity = 12;
inline bool DB_C_BtlRecord::has_blooddefcity() const {
  return _has_bit(11);
}
inline void DB_C_BtlRecord::clear_blooddefcity() {
  blooddefcity_ = 0;
  _clear_bit(11);
}
inline ::google::protobuf::int32 DB_C_BtlRecord::blooddefcity() const {
  return blooddefcity_;
}
inline void DB_C_BtlRecord::set_blooddefcity(::google::protobuf::int32 value) {
  _set_bit(11);
  blooddefcity_ = value;
}

// optional int32 bloodWinCity = 13;
inline bool DB_C_BtlRecord::has_bloodwincity() const {
  return _has_bit(12);
}
inline void DB_C_BtlRecord::clear_bloodwincity() {
  bloodwincity_ = 0;
  _clear_bit(12);
}
inline ::google::protobuf::int32 DB_C_BtlRecord::bloodwincity() const {
  return bloodwincity_;
}
inline void DB_C_BtlRecord::set_bloodwincity(::google::protobuf::int32 value) {
  _set_bit(12);
  bloodwincity_ = value;
}

// -------------------------------------------------------------------

// DB_C_BloodBtlStep

// optional int32 time = 1;
inline bool DB_C_BloodBtlStep::has_time() const {
  return _has_bit(0);
}
inline void DB_C_BloodBtlStep::clear_time() {
  time_ = 0;
  _clear_bit(0);
}
inline ::google::protobuf::int32 DB_C_BloodBtlStep::time() const {
  return time_;
}
inline void DB_C_BloodBtlStep::set_time(::google::protobuf::int32 value) {
  _set_bit(0);
  time_ = value;
}

// optional string atkID = 2;
inline bool DB_C_BloodBtlStep::has_atkid() const {
  return _has_bit(1);
}
inline void DB_C_BloodBtlStep::clear_atkid() {
  if (atkid_ != &_default_atkid_) {
    atkid_->clear();
  }
  _clear_bit(1);
}
inline const ::std::string& DB_C_BloodBtlStep::atkid() const {
  return *atkid_;
}
inline void DB_C_BloodBtlStep::set_atkid(const ::std::string& value) {
  _set_bit(1);
  if (atkid_ == &_default_atkid_) {
    atkid_ = new ::std::string;
  }
  atkid_->assign(value);
}
inline void DB_C_BloodBtlStep::set_atkid(const char* value) {
  _set_bit(1);
  if (atkid_ == &_default_atkid_) {
    atkid_ = new ::std::string;
  }
  atkid_->assign(value);
}
inline void DB_C_BloodBtlStep::set_atkid(const char* value, size_t size) {
  _set_bit(1);
  if (atkid_ == &_default_atkid_) {
    atkid_ = new ::std::string;
  }
  atkid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* DB_C_BloodBtlStep::mutable_atkid() {
  _set_bit(1);
  if (atkid_ == &_default_atkid_) {
    atkid_ = new ::std::string;
  }
  return atkid_;
}

// optional string atkName = 3;
inline bool DB_C_BloodBtlStep::has_atkname() const {
  return _has_bit(2);
}
inline void DB_C_BloodBtlStep::clear_atkname() {
  if (atkname_ != &_default_atkname_) {
    atkname_->clear();
  }
  _clear_bit(2);
}
inline const ::std::string& DB_C_BloodBtlStep::atkname() const {
  return *atkname_;
}
inline void DB_C_BloodBtlStep::set_atkname(const ::std::string& value) {
  _set_bit(2);
  if (atkname_ == &_default_atkname_) {
    atkname_ = new ::std::string;
  }
  atkname_->assign(value);
}
inline void DB_C_BloodBtlStep::set_atkname(const char* value) {
  _set_bit(2);
  if (atkname_ == &_default_atkname_) {
    atkname_ = new ::std::string;
  }
  atkname_->assign(value);
}
inline void DB_C_BloodBtlStep::set_atkname(const char* value, size_t size) {
  _set_bit(2);
  if (atkname_ == &_default_atkname_) {
    atkname_ = new ::std::string;
  }
  atkname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* DB_C_BloodBtlStep::mutable_atkname() {
  _set_bit(2);
  if (atkname_ == &_default_atkname_) {
    atkname_ = new ::std::string;
  }
  return atkname_;
}

// optional int32 atkCountry = 4;
inline bool DB_C_BloodBtlStep::has_atkcountry() const {
  return _has_bit(3);
}
inline void DB_C_BloodBtlStep::clear_atkcountry() {
  atkcountry_ = 0;
  _clear_bit(3);
}
inline ::google::protobuf::int32 DB_C_BloodBtlStep::atkcountry() const {
  return atkcountry_;
}
inline void DB_C_BloodBtlStep::set_atkcountry(::google::protobuf::int32 value) {
  _set_bit(3);
  atkcountry_ = value;
}

// optional string defID = 5;
inline bool DB_C_BloodBtlStep::has_defid() const {
  return _has_bit(4);
}
inline void DB_C_BloodBtlStep::clear_defid() {
  if (defid_ != &_default_defid_) {
    defid_->clear();
  }
  _clear_bit(4);
}
inline const ::std::string& DB_C_BloodBtlStep::defid() const {
  return *defid_;
}
inline void DB_C_BloodBtlStep::set_defid(const ::std::string& value) {
  _set_bit(4);
  if (defid_ == &_default_defid_) {
    defid_ = new ::std::string;
  }
  defid_->assign(value);
}
inline void DB_C_BloodBtlStep::set_defid(const char* value) {
  _set_bit(4);
  if (defid_ == &_default_defid_) {
    defid_ = new ::std::string;
  }
  defid_->assign(value);
}
inline void DB_C_BloodBtlStep::set_defid(const char* value, size_t size) {
  _set_bit(4);
  if (defid_ == &_default_defid_) {
    defid_ = new ::std::string;
  }
  defid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* DB_C_BloodBtlStep::mutable_defid() {
  _set_bit(4);
  if (defid_ == &_default_defid_) {
    defid_ = new ::std::string;
  }
  return defid_;
}

// optional string defName = 6;
inline bool DB_C_BloodBtlStep::has_defname() const {
  return _has_bit(5);
}
inline void DB_C_BloodBtlStep::clear_defname() {
  if (defname_ != &_default_defname_) {
    defname_->clear();
  }
  _clear_bit(5);
}
inline const ::std::string& DB_C_BloodBtlStep::defname() const {
  return *defname_;
}
inline void DB_C_BloodBtlStep::set_defname(const ::std::string& value) {
  _set_bit(5);
  if (defname_ == &_default_defname_) {
    defname_ = new ::std::string;
  }
  defname_->assign(value);
}
inline void DB_C_BloodBtlStep::set_defname(const char* value) {
  _set_bit(5);
  if (defname_ == &_default_defname_) {
    defname_ = new ::std::string;
  }
  defname_->assign(value);
}
inline void DB_C_BloodBtlStep::set_defname(const char* value, size_t size) {
  _set_bit(5);
  if (defname_ == &_default_defname_) {
    defname_ = new ::std::string;
  }
  defname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* DB_C_BloodBtlStep::mutable_defname() {
  _set_bit(5);
  if (defname_ == &_default_defname_) {
    defname_ = new ::std::string;
  }
  return defname_;
}

// optional int32 defCountry = 7;
inline bool DB_C_BloodBtlStep::has_defcountry() const {
  return _has_bit(6);
}
inline void DB_C_BloodBtlStep::clear_defcountry() {
  defcountry_ = 0;
  _clear_bit(6);
}
inline ::google::protobuf::int32 DB_C_BloodBtlStep::defcountry() const {
  return defcountry_;
}
inline void DB_C_BloodBtlStep::set_defcountry(::google::protobuf::int32 value) {
  _set_bit(6);
  defcountry_ = value;
}

// optional string winID = 8;
inline bool DB_C_BloodBtlStep::has_winid() const {
  return _has_bit(7);
}
inline void DB_C_BloodBtlStep::clear_winid() {
  if (winid_ != &_default_winid_) {
    winid_->clear();
  }
  _clear_bit(7);
}
inline const ::std::string& DB_C_BloodBtlStep::winid() const {
  return *winid_;
}
inline void DB_C_BloodBtlStep::set_winid(const ::std::string& value) {
  _set_bit(7);
  if (winid_ == &_default_winid_) {
    winid_ = new ::std::string;
  }
  winid_->assign(value);
}
inline void DB_C_BloodBtlStep::set_winid(const char* value) {
  _set_bit(7);
  if (winid_ == &_default_winid_) {
    winid_ = new ::std::string;
  }
  winid_->assign(value);
}
inline void DB_C_BloodBtlStep::set_winid(const char* value, size_t size) {
  _set_bit(7);
  if (winid_ == &_default_winid_) {
    winid_ = new ::std::string;
  }
  winid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* DB_C_BloodBtlStep::mutable_winid() {
  _set_bit(7);
  if (winid_ == &_default_winid_) {
    winid_ = new ::std::string;
  }
  return winid_;
}

// -------------------------------------------------------------------

// DB_C_BloodBtl

// optional int64 launchUserID = 1;
inline bool DB_C_BloodBtl::has_launchuserid() const {
  return _has_bit(0);
}
inline void DB_C_BloodBtl::clear_launchuserid() {
  launchuserid_ = GOOGLE_LONGLONG(0);
  _clear_bit(0);
}
inline ::google::protobuf::int64 DB_C_BloodBtl::launchuserid() const {
  return launchuserid_;
}
inline void DB_C_BloodBtl::set_launchuserid(::google::protobuf::int64 value) {
  _set_bit(0);
  launchuserid_ = value;
}

// optional string launchName = 2;
inline bool DB_C_BloodBtl::has_launchname() const {
  return _has_bit(1);
}
inline void DB_C_BloodBtl::clear_launchname() {
  if (launchname_ != &_default_launchname_) {
    launchname_->clear();
  }
  _clear_bit(1);
}
inline const ::std::string& DB_C_BloodBtl::launchname() const {
  return *launchname_;
}
inline void DB_C_BloodBtl::set_launchname(const ::std::string& value) {
  _set_bit(1);
  if (launchname_ == &_default_launchname_) {
    launchname_ = new ::std::string;
  }
  launchname_->assign(value);
}
inline void DB_C_BloodBtl::set_launchname(const char* value) {
  _set_bit(1);
  if (launchname_ == &_default_launchname_) {
    launchname_ = new ::std::string;
  }
  launchname_->assign(value);
}
inline void DB_C_BloodBtl::set_launchname(const char* value, size_t size) {
  _set_bit(1);
  if (launchname_ == &_default_launchname_) {
    launchname_ = new ::std::string;
  }
  launchname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* DB_C_BloodBtl::mutable_launchname() {
  _set_bit(1);
  if (launchname_ == &_default_launchname_) {
    launchname_ = new ::std::string;
  }
  return launchname_;
}

// optional int32 launchTime = 3;
inline bool DB_C_BloodBtl::has_launchtime() const {
  return _has_bit(2);
}
inline void DB_C_BloodBtl::clear_launchtime() {
  launchtime_ = 0;
  _clear_bit(2);
}
inline ::google::protobuf::int32 DB_C_BloodBtl::launchtime() const {
  return launchtime_;
}
inline void DB_C_BloodBtl::set_launchtime(::google::protobuf::int32 value) {
  _set_bit(2);
  launchtime_ = value;
}

// optional int32 atkCountry = 4;
inline bool DB_C_BloodBtl::has_atkcountry() const {
  return _has_bit(3);
}
inline void DB_C_BloodBtl::clear_atkcountry() {
  atkcountry_ = 0;
  _clear_bit(3);
}
inline ::google::protobuf::int32 DB_C_BloodBtl::atkcountry() const {
  return atkcountry_;
}
inline void DB_C_BloodBtl::set_atkcountry(::google::protobuf::int32 value) {
  _set_bit(3);
  atkcountry_ = value;
}

// optional int32 atkCity = 5;
inline bool DB_C_BloodBtl::has_atkcity() const {
  return _has_bit(4);
}
inline void DB_C_BloodBtl::clear_atkcity() {
  atkcity_ = 0;
  _clear_bit(4);
}
inline ::google::protobuf::int32 DB_C_BloodBtl::atkcity() const {
  return atkcity_;
}
inline void DB_C_BloodBtl::set_atkcity(::google::protobuf::int32 value) {
  _set_bit(4);
  atkcity_ = value;
}

// optional int32 atkTotalCnt = 6;
inline bool DB_C_BloodBtl::has_atktotalcnt() const {
  return _has_bit(5);
}
inline void DB_C_BloodBtl::clear_atktotalcnt() {
  atktotalcnt_ = 0;
  _clear_bit(5);
}
inline ::google::protobuf::int32 DB_C_BloodBtl::atktotalcnt() const {
  return atktotalcnt_;
}
inline void DB_C_BloodBtl::set_atktotalcnt(::google::protobuf::int32 value) {
  _set_bit(5);
  atktotalcnt_ = value;
}

// optional int32 atkLeftCnt = 7;
inline bool DB_C_BloodBtl::has_atkleftcnt() const {
  return _has_bit(6);
}
inline void DB_C_BloodBtl::clear_atkleftcnt() {
  atkleftcnt_ = 0;
  _clear_bit(6);
}
inline ::google::protobuf::int32 DB_C_BloodBtl::atkleftcnt() const {
  return atkleftcnt_;
}
inline void DB_C_BloodBtl::set_atkleftcnt(::google::protobuf::int32 value) {
  _set_bit(6);
  atkleftcnt_ = value;
}

// optional int32 defCountry = 8;
inline bool DB_C_BloodBtl::has_defcountry() const {
  return _has_bit(7);
}
inline void DB_C_BloodBtl::clear_defcountry() {
  defcountry_ = 0;
  _clear_bit(7);
}
inline ::google::protobuf::int32 DB_C_BloodBtl::defcountry() const {
  return defcountry_;
}
inline void DB_C_BloodBtl::set_defcountry(::google::protobuf::int32 value) {
  _set_bit(7);
  defcountry_ = value;
}

// optional int32 defCity = 9;
inline bool DB_C_BloodBtl::has_defcity() const {
  return _has_bit(8);
}
inline void DB_C_BloodBtl::clear_defcity() {
  defcity_ = 0;
  _clear_bit(8);
}
inline ::google::protobuf::int32 DB_C_BloodBtl::defcity() const {
  return defcity_;
}
inline void DB_C_BloodBtl::set_defcity(::google::protobuf::int32 value) {
  _set_bit(8);
  defcity_ = value;
}

// optional int32 defTotalCnt = 10;
inline bool DB_C_BloodBtl::has_deftotalcnt() const {
  return _has_bit(9);
}
inline void DB_C_BloodBtl::clear_deftotalcnt() {
  deftotalcnt_ = 0;
  _clear_bit(9);
}
inline ::google::protobuf::int32 DB_C_BloodBtl::deftotalcnt() const {
  return deftotalcnt_;
}
inline void DB_C_BloodBtl::set_deftotalcnt(::google::protobuf::int32 value) {
  _set_bit(9);
  deftotalcnt_ = value;
}

// optional int32 defLeftCnt = 11;
inline bool DB_C_BloodBtl::has_defleftcnt() const {
  return _has_bit(10);
}
inline void DB_C_BloodBtl::clear_defleftcnt() {
  defleftcnt_ = 0;
  _clear_bit(10);
}
inline ::google::protobuf::int32 DB_C_BloodBtl::defleftcnt() const {
  return defleftcnt_;
}
inline void DB_C_BloodBtl::set_defleftcnt(::google::protobuf::int32 value) {
  _set_bit(10);
  defleftcnt_ = value;
}

// repeated .DB_C_BloodBtlStep btlStep = 12;
inline int DB_C_BloodBtl::btlstep_size() const {
  return btlstep_.size();
}
inline void DB_C_BloodBtl::clear_btlstep() {
  btlstep_.Clear();
}
inline const ::google::protobuf::RepeatedPtrField< ::DB_C_BloodBtlStep >&
DB_C_BloodBtl::btlstep() const {
  return btlstep_;
}
inline ::google::protobuf::RepeatedPtrField< ::DB_C_BloodBtlStep >*
DB_C_BloodBtl::mutable_btlstep() {
  return &btlstep_;
}
inline const ::DB_C_BloodBtlStep& DB_C_BloodBtl::btlstep(int index) const {
  return btlstep_.Get(index);
}
inline ::DB_C_BloodBtlStep* DB_C_BloodBtl::mutable_btlstep(int index) {
  return btlstep_.Mutable(index);
}
inline ::DB_C_BloodBtlStep* DB_C_BloodBtl::add_btlstep() {
  return btlstep_.Add();
}

// optional int32 winCity = 13;
inline bool DB_C_BloodBtl::has_wincity() const {
  return _has_bit(12);
}
inline void DB_C_BloodBtl::clear_wincity() {
  wincity_ = 0;
  _clear_bit(12);
}
inline ::google::protobuf::int32 DB_C_BloodBtl::wincity() const {
  return wincity_;
}
inline void DB_C_BloodBtl::set_wincity(::google::protobuf::int32 value) {
  _set_bit(12);
  wincity_ = value;
}

// optional int32 overTime = 14;
inline bool DB_C_BloodBtl::has_overtime() const {
  return _has_bit(13);
}
inline void DB_C_BloodBtl::clear_overtime() {
  overtime_ = 0;
  _clear_bit(13);
}
inline ::google::protobuf::int32 DB_C_BloodBtl::overtime() const {
  return overtime_;
}
inline void DB_C_BloodBtl::set_overtime(::google::protobuf::int32 value) {
  _set_bit(13);
  overtime_ = value;
}

// optional int32 type = 15 [default = 0];
inline bool DB_C_BloodBtl::has_type() const {
  return _has_bit(14);
}
inline void DB_C_BloodBtl::clear_type() {
  type_ = 0;
  _clear_bit(14);
}
inline ::google::protobuf::int32 DB_C_BloodBtl::type() const {
  return type_;
}
inline void DB_C_BloodBtl::set_type(::google::protobuf::int32 value) {
  _set_bit(14);
  type_ = value;
}

// -------------------------------------------------------------------

// DB_C_OfficerRightUse

// optional int32 rightId = 1;
inline bool DB_C_OfficerRightUse::has_rightid() const {
  return _has_bit(0);
}
inline void DB_C_OfficerRightUse::clear_rightid() {
  rightid_ = 0;
  _clear_bit(0);
}
inline ::google::protobuf::int32 DB_C_OfficerRightUse::rightid() const {
  return rightid_;
}
inline void DB_C_OfficerRightUse::set_rightid(::google::protobuf::int32 value) {
  _set_bit(0);
  rightid_ = value;
}

// optional int64 uid = 2;
inline bool DB_C_OfficerRightUse::has_uid() const {
  return _has_bit(1);
}
inline void DB_C_OfficerRightUse::clear_uid() {
  uid_ = GOOGLE_LONGLONG(0);
  _clear_bit(1);
}
inline ::google::protobuf::int64 DB_C_OfficerRightUse::uid() const {
  return uid_;
}
inline void DB_C_OfficerRightUse::set_uid(::google::protobuf::int64 value) {
  _set_bit(1);
  uid_ = value;
}

// optional int32 endtime = 3;
inline bool DB_C_OfficerRightUse::has_endtime() const {
  return _has_bit(2);
}
inline void DB_C_OfficerRightUse::clear_endtime() {
  endtime_ = 0;
  _clear_bit(2);
}
inline ::google::protobuf::int32 DB_C_OfficerRightUse::endtime() const {
  return endtime_;
}
inline void DB_C_OfficerRightUse::set_endtime(::google::protobuf::int32 value) {
  _set_bit(2);
  endtime_ = value;
}

// optional string name = 4;
inline bool DB_C_OfficerRightUse::has_name() const {
  return _has_bit(3);
}
inline void DB_C_OfficerRightUse::clear_name() {
  if (name_ != &_default_name_) {
    name_->clear();
  }
  _clear_bit(3);
}
inline const ::std::string& DB_C_OfficerRightUse::name() const {
  return *name_;
}
inline void DB_C_OfficerRightUse::set_name(const ::std::string& value) {
  _set_bit(3);
  if (name_ == &_default_name_) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void DB_C_OfficerRightUse::set_name(const char* value) {
  _set_bit(3);
  if (name_ == &_default_name_) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void DB_C_OfficerRightUse::set_name(const char* value, size_t size) {
  _set_bit(3);
  if (name_ == &_default_name_) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* DB_C_OfficerRightUse::mutable_name() {
  _set_bit(3);
  if (name_ == &_default_name_) {
    name_ = new ::std::string;
  }
  return name_;
}

// optional int32 position = 5;
inline bool DB_C_OfficerRightUse::has_position() const {
  return _has_bit(4);
}
inline void DB_C_OfficerRightUse::clear_position() {
  position_ = 0;
  _clear_bit(4);
}
inline ::google::protobuf::int32 DB_C_OfficerRightUse::position() const {
  return position_;
}
inline void DB_C_OfficerRightUse::set_position(::google::protobuf::int32 value) {
  _set_bit(4);
  position_ = value;
}

// -------------------------------------------------------------------

// DB_C_City

// required int32 region = 1;
inline bool DB_C_City::has_region() const {
  return _has_bit(0);
}
inline void DB_C_City::clear_region() {
  region_ = 0;
  _clear_bit(0);
}
inline ::google::protobuf::int32 DB_C_City::region() const {
  return region_;
}
inline void DB_C_City::set_region(::google::protobuf::int32 value) {
  _set_bit(0);
  region_ = value;
}

// required int32 cityID = 2;
inline bool DB_C_City::has_cityid() const {
  return _has_bit(1);
}
inline void DB_C_City::clear_cityid() {
  cityid_ = 0;
  _clear_bit(1);
}
inline ::google::protobuf::int32 DB_C_City::cityid() const {
  return cityid_;
}
inline void DB_C_City::set_cityid(::google::protobuf::int32 value) {
  _set_bit(1);
  cityid_ = value;
}

// required int32 countryID = 3;
inline bool DB_C_City::has_countryid() const {
  return _has_bit(2);
}
inline void DB_C_City::clear_countryid() {
  countryid_ = 0;
  _clear_bit(2);
}
inline ::google::protobuf::int32 DB_C_City::countryid() const {
  return countryid_;
}
inline void DB_C_City::set_countryid(::google::protobuf::int32 value) {
  _set_bit(2);
  countryid_ = value;
}

// repeated .DB_C_NPC npc = 5;
inline int DB_C_City::npc_size() const {
  return npc_.size();
}
inline void DB_C_City::clear_npc() {
  npc_.Clear();
}
inline const ::google::protobuf::RepeatedPtrField< ::DB_C_NPC >&
DB_C_City::npc() const {
  return npc_;
}
inline ::google::protobuf::RepeatedPtrField< ::DB_C_NPC >*
DB_C_City::mutable_npc() {
  return &npc_;
}
inline const ::DB_C_NPC& DB_C_City::npc(int index) const {
  return npc_.Get(index);
}
inline ::DB_C_NPC* DB_C_City::mutable_npc(int index) {
  return npc_.Mutable(index);
}
inline ::DB_C_NPC* DB_C_City::add_npc() {
  return npc_.Add();
}

// optional int32 npcInitTM = 6 [default = 0];
inline bool DB_C_City::has_npcinittm() const {
  return _has_bit(4);
}
inline void DB_C_City::clear_npcinittm() {
  npcinittm_ = 0;
  _clear_bit(4);
}
inline ::google::protobuf::int32 DB_C_City::npcinittm() const {
  return npcinittm_;
}
inline void DB_C_City::set_npcinittm(::google::protobuf::int32 value) {
  _set_bit(4);
  npcinittm_ = value;
}

// optional int64 ltSaveRevision = 7 [default = 0];
inline bool DB_C_City::has_ltsaverevision() const {
  return _has_bit(5);
}
inline void DB_C_City::clear_ltsaverevision() {
  ltsaverevision_ = GOOGLE_LONGLONG(0);
  _clear_bit(5);
}
inline ::google::protobuf::int64 DB_C_City::ltsaverevision() const {
  return ltsaverevision_;
}
inline void DB_C_City::set_ltsaverevision(::google::protobuf::int64 value) {
  _set_bit(5);
  ltsaverevision_ = value;
}

// optional .DB_C_BloodBtl lastBloodBtl = 8;
inline bool DB_C_City::has_lastbloodbtl() const {
  return _has_bit(6);
}
inline void DB_C_City::clear_lastbloodbtl() {
  if (lastbloodbtl_ != NULL) lastbloodbtl_->::DB_C_BloodBtl::Clear();
  _clear_bit(6);
}
inline const ::DB_C_BloodBtl& DB_C_City::lastbloodbtl() const {
  return lastbloodbtl_ != NULL ? *lastbloodbtl_ : *default_instance_->lastbloodbtl_;
}
inline ::DB_C_BloodBtl* DB_C_City::mutable_lastbloodbtl() {
  _set_bit(6);
  if (lastbloodbtl_ == NULL) lastbloodbtl_ = new ::DB_C_BloodBtl;
  return lastbloodbtl_;
}

// repeated .DB_C_OfficerRightUse officerRightUseLst = 9;
inline int DB_C_City::officerrightuselst_size() const {
  return officerrightuselst_.size();
}
inline void DB_C_City::clear_officerrightuselst() {
  officerrightuselst_.Clear();
}
inline const ::google::protobuf::RepeatedPtrField< ::DB_C_OfficerRightUse >&
DB_C_City::officerrightuselst() const {
  return officerrightuselst_;
}
inline ::google::protobuf::RepeatedPtrField< ::DB_C_OfficerRightUse >*
DB_C_City::mutable_officerrightuselst() {
  return &officerrightuselst_;
}
inline const ::DB_C_OfficerRightUse& DB_C_City::officerrightuselst(int index) const {
  return officerrightuselst_.Get(index);
}
inline ::DB_C_OfficerRightUse* DB_C_City::mutable_officerrightuselst(int index) {
  return officerrightuselst_.Mutable(index);
}
inline ::DB_C_OfficerRightUse* DB_C_City::add_officerrightuselst() {
  return officerrightuselst_.Add();
}

// -------------------------------------------------------------------

// DB_C_CityBuffData

// optional int32 flag = 1 [default = 0];
inline bool DB_C_CityBuffData::has_flag() const {
  return _has_bit(0);
}
inline void DB_C_CityBuffData::clear_flag() {
  flag_ = 0;
  _clear_bit(0);
}
inline ::google::protobuf::int32 DB_C_CityBuffData::flag() const {
  return flag_;
}
inline void DB_C_CityBuffData::set_flag(::google::protobuf::int32 value) {
  _set_bit(0);
  flag_ = value;
}

// repeated .DB_C_RandomBuff randomBuffs = 2;
inline int DB_C_CityBuffData::randombuffs_size() const {
  return randombuffs_.size();
}
inline void DB_C_CityBuffData::clear_randombuffs() {
  randombuffs_.Clear();
}
inline const ::google::protobuf::RepeatedPtrField< ::DB_C_RandomBuff >&
DB_C_CityBuffData::randombuffs() const {
  return randombuffs_;
}
inline ::google::protobuf::RepeatedPtrField< ::DB_C_RandomBuff >*
DB_C_CityBuffData::mutable_randombuffs() {
  return &randombuffs_;
}
inline const ::DB_C_RandomBuff& DB_C_CityBuffData::randombuffs(int index) const {
  return randombuffs_.Get(index);
}
inline ::DB_C_RandomBuff* DB_C_CityBuffData::mutable_randombuffs(int index) {
  return randombuffs_.Mutable(index);
}
inline ::DB_C_RandomBuff* DB_C_CityBuffData::add_randombuffs() {
  return randombuffs_.Add();
}

// optional int32 state = 3 [default = 0];
inline bool DB_C_CityBuffData::has_state() const {
  return _has_bit(2);
}
inline void DB_C_CityBuffData::clear_state() {
  state_ = 0;
  _clear_bit(2);
}
inline ::google::protobuf::int32 DB_C_CityBuffData::state() const {
  return state_;
}
inline void DB_C_CityBuffData::set_state(::google::protobuf::int32 value) {
  _set_bit(2);
  state_ = value;
}

// -------------------------------------------------------------------

// DB_C_RandomBuff

// optional int32 cityID = 1;
inline bool DB_C_RandomBuff::has_cityid() const {
  return _has_bit(0);
}
inline void DB_C_RandomBuff::clear_cityid() {
  cityid_ = 0;
  _clear_bit(0);
}
inline ::google::protobuf::int32 DB_C_RandomBuff::cityid() const {
  return cityid_;
}
inline void DB_C_RandomBuff::set_cityid(::google::protobuf::int32 value) {
  _set_bit(0);
  cityid_ = value;
}

// optional int32 buffID = 2 [default = 0];
inline bool DB_C_RandomBuff::has_buffid() const {
  return _has_bit(1);
}
inline void DB_C_RandomBuff::clear_buffid() {
  buffid_ = 0;
  _clear_bit(1);
}
inline ::google::protobuf::int32 DB_C_RandomBuff::buffid() const {
  return buffid_;
}
inline void DB_C_RandomBuff::set_buffid(::google::protobuf::int32 value) {
  _set_bit(1);
  buffid_ = value;
}

// optional int32 activeTm = 3 [default = 0];
inline bool DB_C_RandomBuff::has_activetm() const {
  return _has_bit(2);
}
inline void DB_C_RandomBuff::clear_activetm() {
  activetm_ = 0;
  _clear_bit(2);
}
inline ::google::protobuf::int32 DB_C_RandomBuff::activetm() const {
  return activetm_;
}
inline void DB_C_RandomBuff::set_activetm(::google::protobuf::int32 value) {
  _set_bit(2);
  activetm_ = value;
}

// -------------------------------------------------------------------

// DB_Arena_Rank_NPC

// optional int32 npcid = 1;
inline bool DB_Arena_Rank_NPC::has_npcid() const {
  return _has_bit(0);
}
inline void DB_Arena_Rank_NPC::clear_npcid() {
  npcid_ = 0;
  _clear_bit(0);
}
inline ::google::protobuf::int32 DB_Arena_Rank_NPC::npcid() const {
  return npcid_;
}
inline void DB_Arena_Rank_NPC::set_npcid(::google::protobuf::int32 value) {
  _set_bit(0);
  npcid_ = value;
}

// optional int32 npcindex = 2;
inline bool DB_Arena_Rank_NPC::has_npcindex() const {
  return _has_bit(1);
}
inline void DB_Arena_Rank_NPC::clear_npcindex() {
  npcindex_ = 0;
  _clear_bit(1);
}
inline ::google::protobuf::int32 DB_Arena_Rank_NPC::npcindex() const {
  return npcindex_;
}
inline void DB_Arena_Rank_NPC::set_npcindex(::google::protobuf::int32 value) {
  _set_bit(1);
  npcindex_ = value;
}

// -------------------------------------------------------------------

// DB_Arena_Rank_List

// repeated int64 uidlist = 1;
inline int DB_Arena_Rank_List::uidlist_size() const {
  return uidlist_.size();
}
inline void DB_Arena_Rank_List::clear_uidlist() {
  uidlist_.Clear();
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
DB_Arena_Rank_List::uidlist() const {
  return uidlist_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
DB_Arena_Rank_List::mutable_uidlist() {
  return &uidlist_;
}
inline ::google::protobuf::int64 DB_Arena_Rank_List::uidlist(int index) const {
  return uidlist_.Get(index);
}
inline void DB_Arena_Rank_List::set_uidlist(int index, ::google::protobuf::int64 value) {
  uidlist_.Set(index, value);
}
inline void DB_Arena_Rank_List::add_uidlist(::google::protobuf::int64 value) {
  uidlist_.Add(value);
}

// -------------------------------------------------------------------

// DB_Arena_Score_Unit

// optional int64 uid = 1;
inline bool DB_Arena_Score_Unit::has_uid() const {
  return _has_bit(0);
}
inline void DB_Arena_Score_Unit::clear_uid() {
  uid_ = GOOGLE_LONGLONG(0);
  _clear_bit(0);
}
inline ::google::protobuf::int64 DB_Arena_Score_Unit::uid() const {
  return uid_;
}
inline void DB_Arena_Score_Unit::set_uid(::google::protobuf::int64 value) {
  _set_bit(0);
  uid_ = value;
}

// optional int32 score = 2;
inline bool DB_Arena_Score_Unit::has_score() const {
  return _has_bit(1);
}
inline void DB_Arena_Score_Unit::clear_score() {
  score_ = 0;
  _clear_bit(1);
}
inline ::google::protobuf::int32 DB_Arena_Score_Unit::score() const {
  return score_;
}
inline void DB_Arena_Score_Unit::set_score(::google::protobuf::int32 value) {
  _set_bit(1);
  score_ = value;
}

// -------------------------------------------------------------------

// DB_Arena_Score_List

// repeated .DB_Arena_Score_Unit scorelist = 1;
inline int DB_Arena_Score_List::scorelist_size() const {
  return scorelist_.size();
}
inline void DB_Arena_Score_List::clear_scorelist() {
  scorelist_.Clear();
}
inline const ::google::protobuf::RepeatedPtrField< ::DB_Arena_Score_Unit >&
DB_Arena_Score_List::scorelist() const {
  return scorelist_;
}
inline ::google::protobuf::RepeatedPtrField< ::DB_Arena_Score_Unit >*
DB_Arena_Score_List::mutable_scorelist() {
  return &scorelist_;
}
inline const ::DB_Arena_Score_Unit& DB_Arena_Score_List::scorelist(int index) const {
  return scorelist_.Get(index);
}
inline ::DB_Arena_Score_Unit* DB_Arena_Score_List::mutable_scorelist(int index) {
  return scorelist_.Mutable(index);
}
inline ::DB_Arena_Score_Unit* DB_Arena_Score_List::add_scorelist() {
  return scorelist_.Add();
}

// optional int32 nActive = 2;
inline bool DB_Arena_Score_List::has_nactive() const {
  return _has_bit(1);
}
inline void DB_Arena_Score_List::clear_nactive() {
  nactive_ = 0;
  _clear_bit(1);
}
inline ::google::protobuf::int32 DB_Arena_Score_List::nactive() const {
  return nactive_;
}
inline void DB_Arena_Score_List::set_nactive(::google::protobuf::int32 value) {
  _set_bit(1);
  nactive_ = value;
}

// -------------------------------------------------------------------

// DB_Arena_Rank

// repeated .DB_Arena_Rank_NPC arenaRankNpc = 1;
inline int DB_Arena_Rank::arenaranknpc_size() const {
  return arenaranknpc_.size();
}
inline void DB_Arena_Rank::clear_arenaranknpc() {
  arenaranknpc_.Clear();
}
inline const ::google::protobuf::RepeatedPtrField< ::DB_Arena_Rank_NPC >&
DB_Arena_Rank::arenaranknpc() const {
  return arenaranknpc_;
}
inline ::google::protobuf::RepeatedPtrField< ::DB_Arena_Rank_NPC >*
DB_Arena_Rank::mutable_arenaranknpc() {
  return &arenaranknpc_;
}
inline const ::DB_Arena_Rank_NPC& DB_Arena_Rank::arenaranknpc(int index) const {
  return arenaranknpc_.Get(index);
}
inline ::DB_Arena_Rank_NPC* DB_Arena_Rank::mutable_arenaranknpc(int index) {
  return arenaranknpc_.Mutable(index);
}
inline ::DB_Arena_Rank_NPC* DB_Arena_Rank::add_arenaranknpc() {
  return arenaranknpc_.Add();
}

// optional .DB_Arena_Rank_List arenaRankLast = 2;
inline bool DB_Arena_Rank::has_arenaranklast() const {
  return _has_bit(1);
}
inline void DB_Arena_Rank::clear_arenaranklast() {
  if (arenaranklast_ != NULL) arenaranklast_->::DB_Arena_Rank_List::Clear();
  _clear_bit(1);
}
inline const ::DB_Arena_Rank_List& DB_Arena_Rank::arenaranklast() const {
  return arenaranklast_ != NULL ? *arenaranklast_ : *default_instance_->arenaranklast_;
}
inline ::DB_Arena_Rank_List* DB_Arena_Rank::mutable_arenaranklast() {
  _set_bit(1);
  if (arenaranklast_ == NULL) arenaranklast_ = new ::DB_Arena_Rank_List;
  return arenaranklast_;
}

// optional uint32 nRankTimeLast = 3 [default = 0];
inline bool DB_Arena_Rank::has_nranktimelast() const {
  return _has_bit(2);
}
inline void DB_Arena_Rank::clear_nranktimelast() {
  nranktimelast_ = 0u;
  _clear_bit(2);
}
inline ::google::protobuf::uint32 DB_Arena_Rank::nranktimelast() const {
  return nranktimelast_;
}
inline void DB_Arena_Rank::set_nranktimelast(::google::protobuf::uint32 value) {
  _set_bit(2);
  nranktimelast_ = value;
}

// optional .DB_Arena_Score_List arenaScoreList = 4;
inline bool DB_Arena_Rank::has_arenascorelist() const {
  return _has_bit(3);
}
inline void DB_Arena_Rank::clear_arenascorelist() {
  if (arenascorelist_ != NULL) arenascorelist_->::DB_Arena_Score_List::Clear();
  _clear_bit(3);
}
inline const ::DB_Arena_Score_List& DB_Arena_Rank::arenascorelist() const {
  return arenascorelist_ != NULL ? *arenascorelist_ : *default_instance_->arenascorelist_;
}
inline ::DB_Arena_Score_List* DB_Arena_Rank::mutable_arenascorelist() {
  _set_bit(3);
  if (arenascorelist_ == NULL) arenascorelist_ = new ::DB_Arena_Score_List;
  return arenascorelist_;
}

// optional .DB_Arena_Score_List arenaScoreListOld = 5;
inline bool DB_Arena_Rank::has_arenascorelistold() const {
  return _has_bit(4);
}
inline void DB_Arena_Rank::clear_arenascorelistold() {
  if (arenascorelistold_ != NULL) arenascorelistold_->::DB_Arena_Score_List::Clear();
  _clear_bit(4);
}
inline const ::DB_Arena_Score_List& DB_Arena_Rank::arenascorelistold() const {
  return arenascorelistold_ != NULL ? *arenascorelistold_ : *default_instance_->arenascorelistold_;
}
inline ::DB_Arena_Score_List* DB_Arena_Rank::mutable_arenascorelistold() {
  _set_bit(4);
  if (arenascorelistold_ == NULL) arenascorelistold_ = new ::DB_Arena_Score_List;
  return arenascorelistold_;
}

// optional .DB_Arena_Score_List currentScoreList = 6;
inline bool DB_Arena_Rank::has_currentscorelist() const {
  return _has_bit(5);
}
inline void DB_Arena_Rank::clear_currentscorelist() {
  if (currentscorelist_ != NULL) currentscorelist_->::DB_Arena_Score_List::Clear();
  _clear_bit(5);
}
inline const ::DB_Arena_Score_List& DB_Arena_Rank::currentscorelist() const {
  return currentscorelist_ != NULL ? *currentscorelist_ : *default_instance_->currentscorelist_;
}
inline ::DB_Arena_Score_List* DB_Arena_Rank::mutable_currentscorelist() {
  _set_bit(5);
  if (currentscorelist_ == NULL) currentscorelist_ = new ::DB_Arena_Score_List;
  return currentscorelist_;
}

// -------------------------------------------------------------------

// DB_WorldArena_Rank_Unit

// optional int64 uid = 1;
inline bool DB_WorldArena_Rank_Unit::has_uid() const {
  return _has_bit(0);
}
inline void DB_WorldArena_Rank_Unit::clear_uid() {
  uid_ = GOOGLE_LONGLONG(0);
  _clear_bit(0);
}
inline ::google::protobuf::int64 DB_WorldArena_Rank_Unit::uid() const {
  return uid_;
}
inline void DB_WorldArena_Rank_Unit::set_uid(::google::protobuf::int64 value) {
  _set_bit(0);
  uid_ = value;
}

// -------------------------------------------------------------------

// DB_WorldArena_Rank_List

// repeated .DB_WorldArena_Rank_Unit worldArenaRankList = 1;
inline int DB_WorldArena_Rank_List::worldarenaranklist_size() const {
  return worldarenaranklist_.size();
}
inline void DB_WorldArena_Rank_List::clear_worldarenaranklist() {
  worldarenaranklist_.Clear();
}
inline const ::google::protobuf::RepeatedPtrField< ::DB_WorldArena_Rank_Unit >&
DB_WorldArena_Rank_List::worldarenaranklist() const {
  return worldarenaranklist_;
}
inline ::google::protobuf::RepeatedPtrField< ::DB_WorldArena_Rank_Unit >*
DB_WorldArena_Rank_List::mutable_worldarenaranklist() {
  return &worldarenaranklist_;
}
inline const ::DB_WorldArena_Rank_Unit& DB_WorldArena_Rank_List::worldarenaranklist(int index) const {
  return worldarenaranklist_.Get(index);
}
inline ::DB_WorldArena_Rank_Unit* DB_WorldArena_Rank_List::mutable_worldarenaranklist(int index) {
  return worldarenaranklist_.Mutable(index);
}
inline ::DB_WorldArena_Rank_Unit* DB_WorldArena_Rank_List::add_worldarenaranklist() {
  return worldarenaranklist_.Add();
}

// optional int32 rankTimeLast = 2 [default = 0];
inline bool DB_WorldArena_Rank_List::has_ranktimelast() const {
  return _has_bit(1);
}
inline void DB_WorldArena_Rank_List::clear_ranktimelast() {
  ranktimelast_ = 0;
  _clear_bit(1);
}
inline ::google::protobuf::int32 DB_WorldArena_Rank_List::ranktimelast() const {
  return ranktimelast_;
}
inline void DB_WorldArena_Rank_List::set_ranktimelast(::google::protobuf::int32 value) {
  _set_bit(1);
  ranktimelast_ = value;
}

// optional int32 activityIndex = 3 [default = 0];
inline bool DB_WorldArena_Rank_List::has_activityindex() const {
  return _has_bit(2);
}
inline void DB_WorldArena_Rank_List::clear_activityindex() {
  activityindex_ = 0;
  _clear_bit(2);
}
inline ::google::protobuf::int32 DB_WorldArena_Rank_List::activityindex() const {
  return activityindex_;
}
inline void DB_WorldArena_Rank_List::set_activityindex(::google::protobuf::int32 value) {
  _set_bit(2);
  activityindex_ = value;
}

// -------------------------------------------------------------------

// DB_WorldArena_Rank

// repeated .DB_Arena_Rank_NPC worldArenaRankNpc = 1;
inline int DB_WorldArena_Rank::worldarenaranknpc_size() const {
  return worldarenaranknpc_.size();
}
inline void DB_WorldArena_Rank::clear_worldarenaranknpc() {
  worldarenaranknpc_.Clear();
}
inline const ::google::protobuf::RepeatedPtrField< ::DB_Arena_Rank_NPC >&
DB_WorldArena_Rank::worldarenaranknpc() const {
  return worldarenaranknpc_;
}
inline ::google::protobuf::RepeatedPtrField< ::DB_Arena_Rank_NPC >*
DB_WorldArena_Rank::mutable_worldarenaranknpc() {
  return &worldarenaranknpc_;
}
inline const ::DB_Arena_Rank_NPC& DB_WorldArena_Rank::worldarenaranknpc(int index) const {
  return worldarenaranknpc_.Get(index);
}
inline ::DB_Arena_Rank_NPC* DB_WorldArena_Rank::mutable_worldarenaranknpc(int index) {
  return worldarenaranknpc_.Mutable(index);
}
inline ::DB_Arena_Rank_NPC* DB_WorldArena_Rank::add_worldarenaranknpc() {
  return worldarenaranknpc_.Add();
}

// optional .DB_WorldArena_Rank_List worldArenaRankLast = 2;
inline bool DB_WorldArena_Rank::has_worldarenaranklast() const {
  return _has_bit(1);
}
inline void DB_WorldArena_Rank::clear_worldarenaranklast() {
  if (worldarenaranklast_ != NULL) worldarenaranklast_->::DB_WorldArena_Rank_List::Clear();
  _clear_bit(1);
}
inline const ::DB_WorldArena_Rank_List& DB_WorldArena_Rank::worldarenaranklast() const {
  return worldarenaranklast_ != NULL ? *worldarenaranklast_ : *default_instance_->worldarenaranklast_;
}
inline ::DB_WorldArena_Rank_List* DB_WorldArena_Rank::mutable_worldarenaranklast() {
  _set_bit(1);
  if (worldarenaranklast_ == NULL) worldarenaranklast_ = new ::DB_WorldArena_Rank_List;
  return worldarenaranklast_;
}

// repeated .DB_WorldArena_Rank_List worldArenaRankAll = 3;
inline int DB_WorldArena_Rank::worldarenarankall_size() const {
  return worldarenarankall_.size();
}
inline void DB_WorldArena_Rank::clear_worldarenarankall() {
  worldarenarankall_.Clear();
}
inline const ::google::protobuf::RepeatedPtrField< ::DB_WorldArena_Rank_List >&
DB_WorldArena_Rank::worldarenarankall() const {
  return worldarenarankall_;
}
inline ::google::protobuf::RepeatedPtrField< ::DB_WorldArena_Rank_List >*
DB_WorldArena_Rank::mutable_worldarenarankall() {
  return &worldarenarankall_;
}
inline const ::DB_WorldArena_Rank_List& DB_WorldArena_Rank::worldarenarankall(int index) const {
  return worldarenarankall_.Get(index);
}
inline ::DB_WorldArena_Rank_List* DB_WorldArena_Rank::mutable_worldarenarankall(int index) {
  return worldarenarankall_.Mutable(index);
}
inline ::DB_WorldArena_Rank_List* DB_WorldArena_Rank::add_worldarenarankall() {
  return worldarenarankall_.Add();
}

// optional int32 currentActivityIndex = 4 [default = 0];
inline bool DB_WorldArena_Rank::has_currentactivityindex() const {
  return _has_bit(3);
}
inline void DB_WorldArena_Rank::clear_currentactivityindex() {
  currentactivityindex_ = 0;
  _clear_bit(3);
}
inline ::google::protobuf::int32 DB_WorldArena_Rank::currentactivityindex() const {
  return currentactivityindex_;
}
inline void DB_WorldArena_Rank::set_currentactivityindex(::google::protobuf::int32 value) {
  _set_bit(3);
  currentactivityindex_ = value;
}

// optional int32 rankRecordIndex = 5 [default = 0];
inline bool DB_WorldArena_Rank::has_rankrecordindex() const {
  return _has_bit(4);
}
inline void DB_WorldArena_Rank::clear_rankrecordindex() {
  rankrecordindex_ = 0;
  _clear_bit(4);
}
inline ::google::protobuf::int32 DB_WorldArena_Rank::rankrecordindex() const {
  return rankrecordindex_;
}
inline void DB_WorldArena_Rank::set_rankrecordindex(::google::protobuf::int32 value) {
  _set_bit(4);
  rankrecordindex_ = value;
}

// -------------------------------------------------------------------

// DB_HeroArena_Rank_Unit

// optional int64 uid = 1;
inline bool DB_HeroArena_Rank_Unit::has_uid() const {
  return _has_bit(0);
}
inline void DB_HeroArena_Rank_Unit::clear_uid() {
  uid_ = GOOGLE_LONGLONG(0);
  _clear_bit(0);
}
inline ::google::protobuf::int64 DB_HeroArena_Rank_Unit::uid() const {
  return uid_;
}
inline void DB_HeroArena_Rank_Unit::set_uid(::google::protobuf::int64 value) {
  _set_bit(0);
  uid_ = value;
}

// -------------------------------------------------------------------

// DB_HeroArena_Rank_List

// repeated .DB_HeroArena_Rank_Unit heroArenaRankList = 1;
inline int DB_HeroArena_Rank_List::heroarenaranklist_size() const {
  return heroarenaranklist_.size();
}
inline void DB_HeroArena_Rank_List::clear_heroarenaranklist() {
  heroarenaranklist_.Clear();
}
inline const ::google::protobuf::RepeatedPtrField< ::DB_HeroArena_Rank_Unit >&
DB_HeroArena_Rank_List::heroarenaranklist() const {
  return heroarenaranklist_;
}
inline ::google::protobuf::RepeatedPtrField< ::DB_HeroArena_Rank_Unit >*
DB_HeroArena_Rank_List::mutable_heroarenaranklist() {
  return &heroarenaranklist_;
}
inline const ::DB_HeroArena_Rank_Unit& DB_HeroArena_Rank_List::heroarenaranklist(int index) const {
  return heroarenaranklist_.Get(index);
}
inline ::DB_HeroArena_Rank_Unit* DB_HeroArena_Rank_List::mutable_heroarenaranklist(int index) {
  return heroarenaranklist_.Mutable(index);
}
inline ::DB_HeroArena_Rank_Unit* DB_HeroArena_Rank_List::add_heroarenaranklist() {
  return heroarenaranklist_.Add();
}

// optional int32 rankTimeLast = 2 [default = 0];
inline bool DB_HeroArena_Rank_List::has_ranktimelast() const {
  return _has_bit(1);
}
inline void DB_HeroArena_Rank_List::clear_ranktimelast() {
  ranktimelast_ = 0;
  _clear_bit(1);
}
inline ::google::protobuf::int32 DB_HeroArena_Rank_List::ranktimelast() const {
  return ranktimelast_;
}
inline void DB_HeroArena_Rank_List::set_ranktimelast(::google::protobuf::int32 value) {
  _set_bit(1);
  ranktimelast_ = value;
}

// optional int32 activityIndex = 3 [default = 0];
inline bool DB_HeroArena_Rank_List::has_activityindex() const {
  return _has_bit(2);
}
inline void DB_HeroArena_Rank_List::clear_activityindex() {
  activityindex_ = 0;
  _clear_bit(2);
}
inline ::google::protobuf::int32 DB_HeroArena_Rank_List::activityindex() const {
  return activityindex_;
}
inline void DB_HeroArena_Rank_List::set_activityindex(::google::protobuf::int32 value) {
  _set_bit(2);
  activityindex_ = value;
}

// -------------------------------------------------------------------

// DB_HeroArena_Rank

// repeated .DB_Arena_Rank_NPC heroArenaRankNpc = 1;
inline int DB_HeroArena_Rank::heroarenaranknpc_size() const {
  return heroarenaranknpc_.size();
}
inline void DB_HeroArena_Rank::clear_heroarenaranknpc() {
  heroarenaranknpc_.Clear();
}
inline const ::google::protobuf::RepeatedPtrField< ::DB_Arena_Rank_NPC >&
DB_HeroArena_Rank::heroarenaranknpc() const {
  return heroarenaranknpc_;
}
inline ::google::protobuf::RepeatedPtrField< ::DB_Arena_Rank_NPC >*
DB_HeroArena_Rank::mutable_heroarenaranknpc() {
  return &heroarenaranknpc_;
}
inline const ::DB_Arena_Rank_NPC& DB_HeroArena_Rank::heroarenaranknpc(int index) const {
  return heroarenaranknpc_.Get(index);
}
inline ::DB_Arena_Rank_NPC* DB_HeroArena_Rank::mutable_heroarenaranknpc(int index) {
  return heroarenaranknpc_.Mutable(index);
}
inline ::DB_Arena_Rank_NPC* DB_HeroArena_Rank::add_heroarenaranknpc() {
  return heroarenaranknpc_.Add();
}

// optional .DB_HeroArena_Rank_List heroArenaRankLast = 2;
inline bool DB_HeroArena_Rank::has_heroarenaranklast() const {
  return _has_bit(1);
}
inline void DB_HeroArena_Rank::clear_heroarenaranklast() {
  if (heroarenaranklast_ != NULL) heroarenaranklast_->::DB_HeroArena_Rank_List::Clear();
  _clear_bit(1);
}
inline const ::DB_HeroArena_Rank_List& DB_HeroArena_Rank::heroarenaranklast() const {
  return heroarenaranklast_ != NULL ? *heroarenaranklast_ : *default_instance_->heroarenaranklast_;
}
inline ::DB_HeroArena_Rank_List* DB_HeroArena_Rank::mutable_heroarenaranklast() {
  _set_bit(1);
  if (heroarenaranklast_ == NULL) heroarenaranklast_ = new ::DB_HeroArena_Rank_List;
  return heroarenaranklast_;
}

// optional int32 currentActivityIndex = 3 [default = 0];
inline bool DB_HeroArena_Rank::has_currentactivityindex() const {
  return _has_bit(2);
}
inline void DB_HeroArena_Rank::clear_currentactivityindex() {
  currentactivityindex_ = 0;
  _clear_bit(2);
}
inline ::google::protobuf::int32 DB_HeroArena_Rank::currentactivityindex() const {
  return currentactivityindex_;
}
inline void DB_HeroArena_Rank::set_currentactivityindex(::google::protobuf::int32 value) {
  _set_bit(2);
  currentactivityindex_ = value;
}

// -------------------------------------------------------------------

// DB_C_Officer

// optional int32 officerPosition = 1;
inline bool DB_C_Officer::has_officerposition() const {
  return _has_bit(0);
}
inline void DB_C_Officer::clear_officerposition() {
  officerposition_ = 0;
  _clear_bit(0);
}
inline ::google::protobuf::int32 DB_C_Officer::officerposition() const {
  return officerposition_;
}
inline void DB_C_Officer::set_officerposition(::google::protobuf::int32 value) {
  _set_bit(0);
  officerposition_ = value;
}

// optional int64 uid = 2;
inline bool DB_C_Officer::has_uid() const {
  return _has_bit(1);
}
inline void DB_C_Officer::clear_uid() {
  uid_ = GOOGLE_LONGLONG(0);
  _clear_bit(1);
}
inline ::google::protobuf::int64 DB_C_Officer::uid() const {
  return uid_;
}
inline void DB_C_Officer::set_uid(::google::protobuf::int64 value) {
  _set_bit(1);
  uid_ = value;
}

// -------------------------------------------------------------------

// DB_C_OfficerInfo

// repeated .DB_C_Officer arenaofficers = 1;
inline int DB_C_OfficerInfo::arenaofficers_size() const {
  return arenaofficers_.size();
}
inline void DB_C_OfficerInfo::clear_arenaofficers() {
  arenaofficers_.Clear();
}
inline const ::google::protobuf::RepeatedPtrField< ::DB_C_Officer >&
DB_C_OfficerInfo::arenaofficers() const {
  return arenaofficers_;
}
inline ::google::protobuf::RepeatedPtrField< ::DB_C_Officer >*
DB_C_OfficerInfo::mutable_arenaofficers() {
  return &arenaofficers_;
}
inline const ::DB_C_Officer& DB_C_OfficerInfo::arenaofficers(int index) const {
  return arenaofficers_.Get(index);
}
inline ::DB_C_Officer* DB_C_OfficerInfo::mutable_arenaofficers(int index) {
  return arenaofficers_.Mutable(index);
}
inline ::DB_C_Officer* DB_C_OfficerInfo::add_arenaofficers() {
  return arenaofficers_.Add();
}

// repeated .DB_C_Officer guildofficers = 2;
inline int DB_C_OfficerInfo::guildofficers_size() const {
  return guildofficers_.size();
}
inline void DB_C_OfficerInfo::clear_guildofficers() {
  guildofficers_.Clear();
}
inline const ::google::protobuf::RepeatedPtrField< ::DB_C_Officer >&
DB_C_OfficerInfo::guildofficers() const {
  return guildofficers_;
}
inline ::google::protobuf::RepeatedPtrField< ::DB_C_Officer >*
DB_C_OfficerInfo::mutable_guildofficers() {
  return &guildofficers_;
}
inline const ::DB_C_Officer& DB_C_OfficerInfo::guildofficers(int index) const {
  return guildofficers_.Get(index);
}
inline ::DB_C_Officer* DB_C_OfficerInfo::mutable_guildofficers(int index) {
  return guildofficers_.Mutable(index);
}
inline ::DB_C_Officer* DB_C_OfficerInfo::add_guildofficers() {
  return guildofficers_.Add();
}

// optional int32 officerRightUseFlag = 3 [default = 0];
inline bool DB_C_OfficerInfo::has_officerrightuseflag() const {
  return _has_bit(2);
}
inline void DB_C_OfficerInfo::clear_officerrightuseflag() {
  officerrightuseflag_ = 0;
  _clear_bit(2);
}
inline ::google::protobuf::int32 DB_C_OfficerInfo::officerrightuseflag() const {
  return officerrightuseflag_;
}
inline void DB_C_OfficerInfo::set_officerrightuseflag(::google::protobuf::int32 value) {
  _set_bit(2);
  officerrightuseflag_ = value;
}

// optional int32 updateTimeLast = 4 [default = 0];
inline bool DB_C_OfficerInfo::has_updatetimelast() const {
  return _has_bit(3);
}
inline void DB_C_OfficerInfo::clear_updatetimelast() {
  updatetimelast_ = 0;
  _clear_bit(3);
}
inline ::google::protobuf::int32 DB_C_OfficerInfo::updatetimelast() const {
  return updatetimelast_;
}
inline void DB_C_OfficerInfo::set_updatetimelast(::google::protobuf::int32 value) {
  _set_bit(3);
  updatetimelast_ = value;
}

// -------------------------------------------------------------------

// DB_C_PubGuildPKGroup

// optional int32 guildID1 = 1;
inline bool DB_C_PubGuildPKGroup::has_guildid1() const {
  return _has_bit(0);
}
inline void DB_C_PubGuildPKGroup::clear_guildid1() {
  guildid1_ = 0;
  _clear_bit(0);
}
inline ::google::protobuf::int32 DB_C_PubGuildPKGroup::guildid1() const {
  return guildid1_;
}
inline void DB_C_PubGuildPKGroup::set_guildid1(::google::protobuf::int32 value) {
  _set_bit(0);
  guildid1_ = value;
}

// optional int32 guildID2 = 2;
inline bool DB_C_PubGuildPKGroup::has_guildid2() const {
  return _has_bit(1);
}
inline void DB_C_PubGuildPKGroup::clear_guildid2() {
  guildid2_ = 0;
  _clear_bit(1);
}
inline ::google::protobuf::int32 DB_C_PubGuildPKGroup::guildid2() const {
  return guildid2_;
}
inline void DB_C_PubGuildPKGroup::set_guildid2(::google::protobuf::int32 value) {
  _set_bit(1);
  guildid2_ = value;
}

// -------------------------------------------------------------------

// DB_C_PubGuildBtlInfo

// optional int32 curSession = 1;
inline bool DB_C_PubGuildBtlInfo::has_cursession() const {
  return _has_bit(0);
}
inline void DB_C_PubGuildBtlInfo::clear_cursession() {
  cursession_ = 0;
  _clear_bit(0);
}
inline ::google::protobuf::int32 DB_C_PubGuildBtlInfo::cursession() const {
  return cursession_;
}
inline void DB_C_PubGuildBtlInfo::set_cursession(::google::protobuf::int32 value) {
  _set_bit(0);
  cursession_ = value;
}

// optional int32 btlDay = 2;
inline bool DB_C_PubGuildBtlInfo::has_btlday() const {
  return _has_bit(1);
}
inline void DB_C_PubGuildBtlInfo::clear_btlday() {
  btlday_ = 0;
  _clear_bit(1);
}
inline ::google::protobuf::int32 DB_C_PubGuildBtlInfo::btlday() const {
  return btlday_;
}
inline void DB_C_PubGuildBtlInfo::set_btlday(::google::protobuf::int32 value) {
  _set_bit(1);
  btlday_ = value;
}

// optional int32 pkStep = 3;
inline bool DB_C_PubGuildBtlInfo::has_pkstep() const {
  return _has_bit(2);
}
inline void DB_C_PubGuildBtlInfo::clear_pkstep() {
  pkstep_ = 0;
  _clear_bit(2);
}
inline ::google::protobuf::int32 DB_C_PubGuildBtlInfo::pkstep() const {
  return pkstep_;
}
inline void DB_C_PubGuildBtlInfo::set_pkstep(::google::protobuf::int32 value) {
  _set_bit(2);
  pkstep_ = value;
}

// repeated bool curPKOVer = 4;
inline int DB_C_PubGuildBtlInfo::curpkover_size() const {
  return curpkover_.size();
}
inline void DB_C_PubGuildBtlInfo::clear_curpkover() {
  curpkover_.Clear();
}
inline const ::google::protobuf::RepeatedField< bool >&
DB_C_PubGuildBtlInfo::curpkover() const {
  return curpkover_;
}
inline ::google::protobuf::RepeatedField< bool >*
DB_C_PubGuildBtlInfo::mutable_curpkover() {
  return &curpkover_;
}
inline bool DB_C_PubGuildBtlInfo::curpkover(int index) const {
  return curpkover_.Get(index);
}
inline void DB_C_PubGuildBtlInfo::set_curpkover(int index, bool value) {
  curpkover_.Set(index, value);
}
inline void DB_C_PubGuildBtlInfo::add_curpkover(bool value) {
  curpkover_.Add(value);
}

// optional int32 pkLstIdx = 5;
inline bool DB_C_PubGuildBtlInfo::has_pklstidx() const {
  return _has_bit(4);
}
inline void DB_C_PubGuildBtlInfo::clear_pklstidx() {
  pklstidx_ = 0;
  _clear_bit(4);
}
inline ::google::protobuf::int32 DB_C_PubGuildBtlInfo::pklstidx() const {
  return pklstidx_;
}
inline void DB_C_PubGuildBtlInfo::set_pklstidx(::google::protobuf::int32 value) {
  _set_bit(4);
  pklstidx_ = value;
}

// repeated .DB_C_PubGuildPKGroup pkLst = 6;
inline int DB_C_PubGuildBtlInfo::pklst_size() const {
  return pklst_.size();
}
inline void DB_C_PubGuildBtlInfo::clear_pklst() {
  pklst_.Clear();
}
inline const ::google::protobuf::RepeatedPtrField< ::DB_C_PubGuildPKGroup >&
DB_C_PubGuildBtlInfo::pklst() const {
  return pklst_;
}
inline ::google::protobuf::RepeatedPtrField< ::DB_C_PubGuildPKGroup >*
DB_C_PubGuildBtlInfo::mutable_pklst() {
  return &pklst_;
}
inline const ::DB_C_PubGuildPKGroup& DB_C_PubGuildBtlInfo::pklst(int index) const {
  return pklst_.Get(index);
}
inline ::DB_C_PubGuildPKGroup* DB_C_PubGuildBtlInfo::mutable_pklst(int index) {
  return pklst_.Mutable(index);
}
inline ::DB_C_PubGuildPKGroup* DB_C_PubGuildBtlInfo::add_pklst() {
  return pklst_.Add();
}

// optional bool curSesionBtlOver = 7;
inline bool DB_C_PubGuildBtlInfo::has_cursesionbtlover() const {
  return _has_bit(6);
}
inline void DB_C_PubGuildBtlInfo::clear_cursesionbtlover() {
  cursesionbtlover_ = false;
  _clear_bit(6);
}
inline bool DB_C_PubGuildBtlInfo::cursesionbtlover() const {
  return cursesionbtlover_;
}
inline void DB_C_PubGuildBtlInfo::set_cursesionbtlover(bool value) {
  _set_bit(6);
  cursesionbtlover_ = value;
}

// repeated bool curAddScore = 8;
inline int DB_C_PubGuildBtlInfo::curaddscore_size() const {
  return curaddscore_.size();
}
inline void DB_C_PubGuildBtlInfo::clear_curaddscore() {
  curaddscore_.Clear();
}
inline const ::google::protobuf::RepeatedField< bool >&
DB_C_PubGuildBtlInfo::curaddscore() const {
  return curaddscore_;
}
inline ::google::protobuf::RepeatedField< bool >*
DB_C_PubGuildBtlInfo::mutable_curaddscore() {
  return &curaddscore_;
}
inline bool DB_C_PubGuildBtlInfo::curaddscore(int index) const {
  return curaddscore_.Get(index);
}
inline void DB_C_PubGuildBtlInfo::set_curaddscore(int index, bool value) {
  curaddscore_.Set(index, value);
}
inline void DB_C_PubGuildBtlInfo::add_curaddscore(bool value) {
  curaddscore_.Add(value);
}

// -------------------------------------------------------------------

// DB_C_GuildBtl_Top_Guild

// required int32 guildID = 1;
inline bool DB_C_GuildBtl_Top_Guild::has_guildid() const {
  return _has_bit(0);
}
inline void DB_C_GuildBtl_Top_Guild::clear_guildid() {
  guildid_ = 0;
  _clear_bit(0);
}
inline ::google::protobuf::int32 DB_C_GuildBtl_Top_Guild::guildid() const {
  return guildid_;
}
inline void DB_C_GuildBtl_Top_Guild::set_guildid(::google::protobuf::int32 value) {
  _set_bit(0);
  guildid_ = value;
}

// required int32 countryID = 2;
inline bool DB_C_GuildBtl_Top_Guild::has_countryid() const {
  return _has_bit(1);
}
inline void DB_C_GuildBtl_Top_Guild::clear_countryid() {
  countryid_ = 0;
  _clear_bit(1);
}
inline ::google::protobuf::int32 DB_C_GuildBtl_Top_Guild::countryid() const {
  return countryid_;
}
inline void DB_C_GuildBtl_Top_Guild::set_countryid(::google::protobuf::int32 value) {
  _set_bit(1);
  countryid_ = value;
}

// optional int32 guildLV = 3;
inline bool DB_C_GuildBtl_Top_Guild::has_guildlv() const {
  return _has_bit(2);
}
inline void DB_C_GuildBtl_Top_Guild::clear_guildlv() {
  guildlv_ = 0;
  _clear_bit(2);
}
inline ::google::protobuf::int32 DB_C_GuildBtl_Top_Guild::guildlv() const {
  return guildlv_;
}
inline void DB_C_GuildBtl_Top_Guild::set_guildlv(::google::protobuf::int32 value) {
  _set_bit(2);
  guildlv_ = value;
}

// optional string guildName = 4;
inline bool DB_C_GuildBtl_Top_Guild::has_guildname() const {
  return _has_bit(3);
}
inline void DB_C_GuildBtl_Top_Guild::clear_guildname() {
  if (guildname_ != &_default_guildname_) {
    guildname_->clear();
  }
  _clear_bit(3);
}
inline const ::std::string& DB_C_GuildBtl_Top_Guild::guildname() const {
  return *guildname_;
}
inline void DB_C_GuildBtl_Top_Guild::set_guildname(const ::std::string& value) {
  _set_bit(3);
  if (guildname_ == &_default_guildname_) {
    guildname_ = new ::std::string;
  }
  guildname_->assign(value);
}
inline void DB_C_GuildBtl_Top_Guild::set_guildname(const char* value) {
  _set_bit(3);
  if (guildname_ == &_default_guildname_) {
    guildname_ = new ::std::string;
  }
  guildname_->assign(value);
}
inline void DB_C_GuildBtl_Top_Guild::set_guildname(const char* value, size_t size) {
  _set_bit(3);
  if (guildname_ == &_default_guildname_) {
    guildname_ = new ::std::string;
  }
  guildname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* DB_C_GuildBtl_Top_Guild::mutable_guildname() {
  _set_bit(3);
  if (guildname_ == &_default_guildname_) {
    guildname_ = new ::std::string;
  }
  return guildname_;
}

// optional int32 userCnt = 5;
inline bool DB_C_GuildBtl_Top_Guild::has_usercnt() const {
  return _has_bit(4);
}
inline void DB_C_GuildBtl_Top_Guild::clear_usercnt() {
  usercnt_ = 0;
  _clear_bit(4);
}
inline ::google::protobuf::int32 DB_C_GuildBtl_Top_Guild::usercnt() const {
  return usercnt_;
}
inline void DB_C_GuildBtl_Top_Guild::set_usercnt(::google::protobuf::int32 value) {
  _set_bit(4);
  usercnt_ = value;
}

// optional int32 btlScore = 6;
inline bool DB_C_GuildBtl_Top_Guild::has_btlscore() const {
  return _has_bit(5);
}
inline void DB_C_GuildBtl_Top_Guild::clear_btlscore() {
  btlscore_ = 0;
  _clear_bit(5);
}
inline ::google::protobuf::int32 DB_C_GuildBtl_Top_Guild::btlscore() const {
  return btlscore_;
}
inline void DB_C_GuildBtl_Top_Guild::set_btlscore(::google::protobuf::int32 value) {
  _set_bit(5);
  btlscore_ = value;
}

// optional string leaderName = 7;
inline bool DB_C_GuildBtl_Top_Guild::has_leadername() const {
  return _has_bit(6);
}
inline void DB_C_GuildBtl_Top_Guild::clear_leadername() {
  if (leadername_ != &_default_leadername_) {
    leadername_->clear();
  }
  _clear_bit(6);
}
inline const ::std::string& DB_C_GuildBtl_Top_Guild::leadername() const {
  return *leadername_;
}
inline void DB_C_GuildBtl_Top_Guild::set_leadername(const ::std::string& value) {
  _set_bit(6);
  if (leadername_ == &_default_leadername_) {
    leadername_ = new ::std::string;
  }
  leadername_->assign(value);
}
inline void DB_C_GuildBtl_Top_Guild::set_leadername(const char* value) {
  _set_bit(6);
  if (leadername_ == &_default_leadername_) {
    leadername_ = new ::std::string;
  }
  leadername_->assign(value);
}
inline void DB_C_GuildBtl_Top_Guild::set_leadername(const char* value, size_t size) {
  _set_bit(6);
  if (leadername_ == &_default_leadername_) {
    leadername_ = new ::std::string;
  }
  leadername_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* DB_C_GuildBtl_Top_Guild::mutable_leadername() {
  _set_bit(6);
  if (leadername_ == &_default_leadername_) {
    leadername_ = new ::std::string;
  }
  return leadername_;
}

// -------------------------------------------------------------------

// DB_C_GuildBtl_Record

// optional int32 seasons = 1;
inline bool DB_C_GuildBtl_Record::has_seasons() const {
  return _has_bit(0);
}
inline void DB_C_GuildBtl_Record::clear_seasons() {
  seasons_ = 0;
  _clear_bit(0);
}
inline ::google::protobuf::int32 DB_C_GuildBtl_Record::seasons() const {
  return seasons_;
}
inline void DB_C_GuildBtl_Record::set_seasons(::google::protobuf::int32 value) {
  _set_bit(0);
  seasons_ = value;
}

// repeated .DB_C_GuildBtl_Top_Guild guildData = 2;
inline int DB_C_GuildBtl_Record::guilddata_size() const {
  return guilddata_.size();
}
inline void DB_C_GuildBtl_Record::clear_guilddata() {
  guilddata_.Clear();
}
inline const ::google::protobuf::RepeatedPtrField< ::DB_C_GuildBtl_Top_Guild >&
DB_C_GuildBtl_Record::guilddata() const {
  return guilddata_;
}
inline ::google::protobuf::RepeatedPtrField< ::DB_C_GuildBtl_Top_Guild >*
DB_C_GuildBtl_Record::mutable_guilddata() {
  return &guilddata_;
}
inline const ::DB_C_GuildBtl_Top_Guild& DB_C_GuildBtl_Record::guilddata(int index) const {
  return guilddata_.Get(index);
}
inline ::DB_C_GuildBtl_Top_Guild* DB_C_GuildBtl_Record::mutable_guilddata(int index) {
  return guilddata_.Mutable(index);
}
inline ::DB_C_GuildBtl_Top_Guild* DB_C_GuildBtl_Record::add_guilddata() {
  return guilddata_.Add();
}

// -------------------------------------------------------------------

// DB_C_Country

// required int32 region = 1;
inline bool DB_C_Country::has_region() const {
  return _has_bit(0);
}
inline void DB_C_Country::clear_region() {
  region_ = 0;
  _clear_bit(0);
}
inline ::google::protobuf::int32 DB_C_Country::region() const {
  return region_;
}
inline void DB_C_Country::set_region(::google::protobuf::int32 value) {
  _set_bit(0);
  region_ = value;
}

// required int32 countryID = 2;
inline bool DB_C_Country::has_countryid() const {
  return _has_bit(1);
}
inline void DB_C_Country::clear_countryid() {
  countryid_ = 0;
  _clear_bit(1);
}
inline ::google::protobuf::int32 DB_C_Country::countryid() const {
  return countryid_;
}
inline void DB_C_Country::set_countryid(::google::protobuf::int32 value) {
  _set_bit(1);
  countryid_ = value;
}

// optional int32 userCnt = 3 [default = 0];
inline bool DB_C_Country::has_usercnt() const {
  return _has_bit(2);
}
inline void DB_C_Country::clear_usercnt() {
  usercnt_ = 0;
  _clear_bit(2);
}
inline ::google::protobuf::int32 DB_C_Country::usercnt() const {
  return usercnt_;
}
inline void DB_C_Country::set_usercnt(::google::protobuf::int32 value) {
  _set_bit(2);
  usercnt_ = value;
}

// optional int64 ltSaveRevision = 4 [default = 0];
inline bool DB_C_Country::has_ltsaverevision() const {
  return _has_bit(3);
}
inline void DB_C_Country::clear_ltsaverevision() {
  ltsaverevision_ = GOOGLE_LONGLONG(0);
  _clear_bit(3);
}
inline ::google::protobuf::int64 DB_C_Country::ltsaverevision() const {
  return ltsaverevision_;
}
inline void DB_C_Country::set_ltsaverevision(::google::protobuf::int64 value) {
  _set_bit(3);
  ltsaverevision_ = value;
}

// optional .DB_C_CountryRank lastRank = 5;
inline bool DB_C_Country::has_lastrank() const {
  return _has_bit(4);
}
inline void DB_C_Country::clear_lastrank() {
  if (lastrank_ != NULL) lastrank_->::DB_C_CountryRank::Clear();
  _clear_bit(4);
}
inline const ::DB_C_CountryRank& DB_C_Country::lastrank() const {
  return lastrank_ != NULL ? *lastrank_ : *default_instance_->lastrank_;
}
inline ::DB_C_CountryRank* DB_C_Country::mutable_lastrank() {
  _set_bit(4);
  if (lastrank_ == NULL) lastrank_ = new ::DB_C_CountryRank;
  return lastrank_;
}

// repeated .DB_C_BtlRecord btlRecord = 6;
inline int DB_C_Country::btlrecord_size() const {
  return btlrecord_.size();
}
inline void DB_C_Country::clear_btlrecord() {
  btlrecord_.Clear();
}
inline const ::google::protobuf::RepeatedPtrField< ::DB_C_BtlRecord >&
DB_C_Country::btlrecord() const {
  return btlrecord_;
}
inline ::google::protobuf::RepeatedPtrField< ::DB_C_BtlRecord >*
DB_C_Country::mutable_btlrecord() {
  return &btlrecord_;
}
inline const ::DB_C_BtlRecord& DB_C_Country::btlrecord(int index) const {
  return btlrecord_.Get(index);
}
inline ::DB_C_BtlRecord* DB_C_Country::mutable_btlrecord(int index) {
  return btlrecord_.Mutable(index);
}
inline ::DB_C_BtlRecord* DB_C_Country::add_btlrecord() {
  return btlrecord_.Add();
}

// optional int32 atkTargetCity = 7;
inline bool DB_C_Country::has_atktargetcity() const {
  return _has_bit(6);
}
inline void DB_C_Country::clear_atktargetcity() {
  atktargetcity_ = 0;
  _clear_bit(6);
}
inline ::google::protobuf::int32 DB_C_Country::atktargetcity() const {
  return atktargetcity_;
}
inline void DB_C_Country::set_atktargetcity(::google::protobuf::int32 value) {
  _set_bit(6);
  atktargetcity_ = value;
}

// optional int32 defTargetCity = 8;
inline bool DB_C_Country::has_deftargetcity() const {
  return _has_bit(7);
}
inline void DB_C_Country::clear_deftargetcity() {
  deftargetcity_ = 0;
  _clear_bit(7);
}
inline ::google::protobuf::int32 DB_C_Country::deftargetcity() const {
  return deftargetcity_;
}
inline void DB_C_Country::set_deftargetcity(::google::protobuf::int32 value) {
  _set_bit(7);
  deftargetcity_ = value;
}

// optional .DB_Arena_Rank arenaRank = 9;
inline bool DB_C_Country::has_arenarank() const {
  return _has_bit(8);
}
inline void DB_C_Country::clear_arenarank() {
  if (arenarank_ != NULL) arenarank_->::DB_Arena_Rank::Clear();
  _clear_bit(8);
}
inline const ::DB_Arena_Rank& DB_C_Country::arenarank() const {
  return arenarank_ != NULL ? *arenarank_ : *default_instance_->arenarank_;
}
inline ::DB_Arena_Rank* DB_C_Country::mutable_arenarank() {
  _set_bit(8);
  if (arenarank_ == NULL) arenarank_ = new ::DB_Arena_Rank;
  return arenarank_;
}

// optional uint32 nActivityIndex = 10 [default = 0];
inline bool DB_C_Country::has_nactivityindex() const {
  return _has_bit(9);
}
inline void DB_C_Country::clear_nactivityindex() {
  nactivityindex_ = 0u;
  _clear_bit(9);
}
inline ::google::protobuf::uint32 DB_C_Country::nactivityindex() const {
  return nactivityindex_;
}
inline void DB_C_Country::set_nactivityindex(::google::protobuf::uint32 value) {
  _set_bit(9);
  nactivityindex_ = value;
}

// optional .DB_WorldArena_Rank worldArenaRank = 11;
inline bool DB_C_Country::has_worldarenarank() const {
  return _has_bit(10);
}
inline void DB_C_Country::clear_worldarenarank() {
  if (worldarenarank_ != NULL) worldarenarank_->::DB_WorldArena_Rank::Clear();
  _clear_bit(10);
}
inline const ::DB_WorldArena_Rank& DB_C_Country::worldarenarank() const {
  return worldarenarank_ != NULL ? *worldarenarank_ : *default_instance_->worldarenarank_;
}
inline ::DB_WorldArena_Rank* DB_C_Country::mutable_worldarenarank() {
  _set_bit(10);
  if (worldarenarank_ == NULL) worldarenarank_ = new ::DB_WorldArena_Rank;
  return worldarenarank_;
}

// optional .DB_C_OfficerInfo officerInfo = 12;
inline bool DB_C_Country::has_officerinfo() const {
  return _has_bit(11);
}
inline void DB_C_Country::clear_officerinfo() {
  if (officerinfo_ != NULL) officerinfo_->::DB_C_OfficerInfo::Clear();
  _clear_bit(11);
}
inline const ::DB_C_OfficerInfo& DB_C_Country::officerinfo() const {
  return officerinfo_ != NULL ? *officerinfo_ : *default_instance_->officerinfo_;
}
inline ::DB_C_OfficerInfo* DB_C_Country::mutable_officerinfo() {
  _set_bit(11);
  if (officerinfo_ == NULL) officerinfo_ = new ::DB_C_OfficerInfo;
  return officerinfo_;
}

// optional .DB_C_PubGuildBtlInfo pubGuildBtlInfo = 13;
inline bool DB_C_Country::has_pubguildbtlinfo() const {
  return _has_bit(12);
}
inline void DB_C_Country::clear_pubguildbtlinfo() {
  if (pubguildbtlinfo_ != NULL) pubguildbtlinfo_->::DB_C_PubGuildBtlInfo::Clear();
  _clear_bit(12);
}
inline const ::DB_C_PubGuildBtlInfo& DB_C_Country::pubguildbtlinfo() const {
  return pubguildbtlinfo_ != NULL ? *pubguildbtlinfo_ : *default_instance_->pubguildbtlinfo_;
}
inline ::DB_C_PubGuildBtlInfo* DB_C_Country::mutable_pubguildbtlinfo() {
  _set_bit(12);
  if (pubguildbtlinfo_ == NULL) pubguildbtlinfo_ = new ::DB_C_PubGuildBtlInfo;
  return pubguildbtlinfo_;
}

// repeated .DB_C_GuildBtl_Record gBtlRecord = 14;
inline int DB_C_Country::gbtlrecord_size() const {
  return gbtlrecord_.size();
}
inline void DB_C_Country::clear_gbtlrecord() {
  gbtlrecord_.Clear();
}
inline const ::google::protobuf::RepeatedPtrField< ::DB_C_GuildBtl_Record >&
DB_C_Country::gbtlrecord() const {
  return gbtlrecord_;
}
inline ::google::protobuf::RepeatedPtrField< ::DB_C_GuildBtl_Record >*
DB_C_Country::mutable_gbtlrecord() {
  return &gbtlrecord_;
}
inline const ::DB_C_GuildBtl_Record& DB_C_Country::gbtlrecord(int index) const {
  return gbtlrecord_.Get(index);
}
inline ::DB_C_GuildBtl_Record* DB_C_Country::mutable_gbtlrecord(int index) {
  return gbtlrecord_.Mutable(index);
}
inline ::DB_C_GuildBtl_Record* DB_C_Country::add_gbtlrecord() {
  return gbtlrecord_.Add();
}

// optional int32 dataResetFlag = 15 [default = 0];
inline bool DB_C_Country::has_dataresetflag() const {
  return _has_bit(14);
}
inline void DB_C_Country::clear_dataresetflag() {
  dataresetflag_ = 0;
  _clear_bit(14);
}
inline ::google::protobuf::int32 DB_C_Country::dataresetflag() const {
  return dataresetflag_;
}
inline void DB_C_Country::set_dataresetflag(::google::protobuf::int32 value) {
  _set_bit(14);
  dataresetflag_ = value;
}

// repeated .DB_GVE_FirstDown gveFirstDownList = 16;
inline int DB_C_Country::gvefirstdownlist_size() const {
  return gvefirstdownlist_.size();
}
inline void DB_C_Country::clear_gvefirstdownlist() {
  gvefirstdownlist_.Clear();
}
inline const ::google::protobuf::RepeatedPtrField< ::DB_GVE_FirstDown >&
DB_C_Country::gvefirstdownlist() const {
  return gvefirstdownlist_;
}
inline ::google::protobuf::RepeatedPtrField< ::DB_GVE_FirstDown >*
DB_C_Country::mutable_gvefirstdownlist() {
  return &gvefirstdownlist_;
}
inline const ::DB_GVE_FirstDown& DB_C_Country::gvefirstdownlist(int index) const {
  return gvefirstdownlist_.Get(index);
}
inline ::DB_GVE_FirstDown* DB_C_Country::mutable_gvefirstdownlist(int index) {
  return gvefirstdownlist_.Mutable(index);
}
inline ::DB_GVE_FirstDown* DB_C_Country::add_gvefirstdownlist() {
  return gvefirstdownlist_.Add();
}

// optional int32 gveFlag = 17;
inline bool DB_C_Country::has_gveflag() const {
  return _has_bit(16);
}
inline void DB_C_Country::clear_gveflag() {
  gveflag_ = 0;
  _clear_bit(16);
}
inline ::google::protobuf::int32 DB_C_Country::gveflag() const {
  return gveflag_;
}
inline void DB_C_Country::set_gveflag(::google::protobuf::int32 value) {
  _set_bit(16);
  gveflag_ = value;
}

// optional .DB_HeroArena_Rank heroArenaRank = 18;
inline bool DB_C_Country::has_heroarenarank() const {
  return _has_bit(17);
}
inline void DB_C_Country::clear_heroarenarank() {
  if (heroarenarank_ != NULL) heroarenarank_->::DB_HeroArena_Rank::Clear();
  _clear_bit(17);
}
inline const ::DB_HeroArena_Rank& DB_C_Country::heroarenarank() const {
  return heroarenarank_ != NULL ? *heroarenarank_ : *default_instance_->heroarenarank_;
}
inline ::DB_HeroArena_Rank* DB_C_Country::mutable_heroarenarank() {
  _set_bit(17);
  if (heroarenarank_ == NULL) heroarenarank_ = new ::DB_HeroArena_Rank;
  return heroarenarank_;
}

// optional .DB_C_PubGvgBtlInfo pubGvgBtlInfo = 19;
inline bool DB_C_Country::has_pubgvgbtlinfo() const {
  return _has_bit(18);
}
inline void DB_C_Country::clear_pubgvgbtlinfo() {
  if (pubgvgbtlinfo_ != NULL) pubgvgbtlinfo_->::DB_C_PubGvgBtlInfo::Clear();
  _clear_bit(18);
}
inline const ::DB_C_PubGvgBtlInfo& DB_C_Country::pubgvgbtlinfo() const {
  return pubgvgbtlinfo_ != NULL ? *pubgvgbtlinfo_ : *default_instance_->pubgvgbtlinfo_;
}
inline ::DB_C_PubGvgBtlInfo* DB_C_Country::mutable_pubgvgbtlinfo() {
  _set_bit(18);
  if (pubgvgbtlinfo_ == NULL) pubgvgbtlinfo_ = new ::DB_C_PubGvgBtlInfo;
  return pubgvgbtlinfo_;
}

// optional .DB_C_WpcRank wpcrank = 20;
inline bool DB_C_Country::has_wpcrank() const {
  return _has_bit(19);
}
inline void DB_C_Country::clear_wpcrank() {
  if (wpcrank_ != NULL) wpcrank_->::DB_C_WpcRank::Clear();
  _clear_bit(19);
}
inline const ::DB_C_WpcRank& DB_C_Country::wpcrank() const {
  return wpcrank_ != NULL ? *wpcrank_ : *default_instance_->wpcrank_;
}
inline ::DB_C_WpcRank* DB_C_Country::mutable_wpcrank() {
  _set_bit(19);
  if (wpcrank_ == NULL) wpcrank_ = new ::DB_C_WpcRank;
  return wpcrank_;
}

// optional .DB_C_CountryLeagueBattle lastLeagueBattle = 21;
inline bool DB_C_Country::has_lastleaguebattle() const {
  return _has_bit(20);
}
inline void DB_C_Country::clear_lastleaguebattle() {
  if (lastleaguebattle_ != NULL) lastleaguebattle_->::DB_C_CountryLeagueBattle::Clear();
  _clear_bit(20);
}
inline const ::DB_C_CountryLeagueBattle& DB_C_Country::lastleaguebattle() const {
  return lastleaguebattle_ != NULL ? *lastleaguebattle_ : *default_instance_->lastleaguebattle_;
}
inline ::DB_C_CountryLeagueBattle* DB_C_Country::mutable_lastleaguebattle() {
  _set_bit(20);
  if (lastleaguebattle_ == NULL) lastleaguebattle_ = new ::DB_C_CountryLeagueBattle;
  return lastleaguebattle_;
}

// repeated .DB_C_CountryLeagueMsg leagueAllMsg = 22;
inline int DB_C_Country::leagueallmsg_size() const {
  return leagueallmsg_.size();
}
inline void DB_C_Country::clear_leagueallmsg() {
  leagueallmsg_.Clear();
}
inline const ::google::protobuf::RepeatedPtrField< ::DB_C_CountryLeagueMsg >&
DB_C_Country::leagueallmsg() const {
  return leagueallmsg_;
}
inline ::google::protobuf::RepeatedPtrField< ::DB_C_CountryLeagueMsg >*
DB_C_Country::mutable_leagueallmsg() {
  return &leagueallmsg_;
}
inline const ::DB_C_CountryLeagueMsg& DB_C_Country::leagueallmsg(int index) const {
  return leagueallmsg_.Get(index);
}
inline ::DB_C_CountryLeagueMsg* DB_C_Country::mutable_leagueallmsg(int index) {
  return leagueallmsg_.Mutable(index);
}
inline ::DB_C_CountryLeagueMsg* DB_C_Country::add_leagueallmsg() {
  return leagueallmsg_.Add();
}

// optional .DB_C_ChatMsg chatmsg = 23;
inline bool DB_C_Country::has_chatmsg() const {
  return _has_bit(22);
}
inline void DB_C_Country::clear_chatmsg() {
  if (chatmsg_ != NULL) chatmsg_->::DB_C_ChatMsg::Clear();
  _clear_bit(22);
}
inline const ::DB_C_ChatMsg& DB_C_Country::chatmsg() const {
  return chatmsg_ != NULL ? *chatmsg_ : *default_instance_->chatmsg_;
}
inline ::DB_C_ChatMsg* DB_C_Country::mutable_chatmsg() {
  _set_bit(22);
  if (chatmsg_ == NULL) chatmsg_ = new ::DB_C_ChatMsg;
  return chatmsg_;
}

// repeated int32 npcactivecnt = 24;
inline int DB_C_Country::npcactivecnt_size() const {
  return npcactivecnt_.size();
}
inline void DB_C_Country::clear_npcactivecnt() {
  npcactivecnt_.Clear();
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
DB_C_Country::npcactivecnt() const {
  return npcactivecnt_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
DB_C_Country::mutable_npcactivecnt() {
  return &npcactivecnt_;
}
inline ::google::protobuf::int32 DB_C_Country::npcactivecnt(int index) const {
  return npcactivecnt_.Get(index);
}
inline void DB_C_Country::set_npcactivecnt(int index, ::google::protobuf::int32 value) {
  npcactivecnt_.Set(index, value);
}
inline void DB_C_Country::add_npcactivecnt(::google::protobuf::int32 value) {
  npcactivecnt_.Add(value);
}

// optional .DB_C_NpcActiveRank npcactiverank = 25;
inline bool DB_C_Country::has_npcactiverank() const {
  return _has_bit(24);
}
inline void DB_C_Country::clear_npcactiverank() {
  if (npcactiverank_ != NULL) npcactiverank_->::DB_C_NpcActiveRank::Clear();
  _clear_bit(24);
}
inline const ::DB_C_NpcActiveRank& DB_C_Country::npcactiverank() const {
  return npcactiverank_ != NULL ? *npcactiverank_ : *default_instance_->npcactiverank_;
}
inline ::DB_C_NpcActiveRank* DB_C_Country::mutable_npcactiverank() {
  _set_bit(24);
  if (npcactiverank_ == NULL) npcactiverank_ = new ::DB_C_NpcActiveRank;
  return npcactiverank_;
}

// optional .DB_C_CityBuffData CityBuffData = 26;
inline bool DB_C_Country::has_citybuffdata() const {
  return _has_bit(25);
}
inline void DB_C_Country::clear_citybuffdata() {
  if (citybuffdata_ != NULL) citybuffdata_->::DB_C_CityBuffData::Clear();
  _clear_bit(25);
}
inline const ::DB_C_CityBuffData& DB_C_Country::citybuffdata() const {
  return citybuffdata_ != NULL ? *citybuffdata_ : *default_instance_->citybuffdata_;
}
inline ::DB_C_CityBuffData* DB_C_Country::mutable_citybuffdata() {
  _set_bit(25);
  if (citybuffdata_ == NULL) citybuffdata_ = new ::DB_C_CityBuffData;
  return citybuffdata_;
}

// -------------------------------------------------------------------

// DB_C_GuildBld

// optional int32 id = 1;
inline bool DB_C_GuildBld::has_id() const {
  return _has_bit(0);
}
inline void DB_C_GuildBld::clear_id() {
  id_ = 0;
  _clear_bit(0);
}
inline ::google::protobuf::int32 DB_C_GuildBld::id() const {
  return id_;
}
inline void DB_C_GuildBld::set_id(::google::protobuf::int32 value) {
  _set_bit(0);
  id_ = value;
}

// optional int32 level = 2;
inline bool DB_C_GuildBld::has_level() const {
  return _has_bit(1);
}
inline void DB_C_GuildBld::clear_level() {
  level_ = 0;
  _clear_bit(1);
}
inline ::google::protobuf::int32 DB_C_GuildBld::level() const {
  return level_;
}
inline void DB_C_GuildBld::set_level(::google::protobuf::int32 value) {
  _set_bit(1);
  level_ = value;
}

// optional int32 exp = 3;
inline bool DB_C_GuildBld::has_exp() const {
  return _has_bit(2);
}
inline void DB_C_GuildBld::clear_exp() {
  exp_ = 0;
  _clear_bit(2);
}
inline ::google::protobuf::int32 DB_C_GuildBld::exp() const {
  return exp_;
}
inline void DB_C_GuildBld::set_exp(::google::protobuf::int32 value) {
  _set_bit(2);
  exp_ = value;
}

// -------------------------------------------------------------------

// DB_C_GuildLog

// optional int32 time = 1;
inline bool DB_C_GuildLog::has_time() const {
  return _has_bit(0);
}
inline void DB_C_GuildLog::clear_time() {
  time_ = 0;
  _clear_bit(0);
}
inline ::google::protobuf::int32 DB_C_GuildLog::time() const {
  return time_;
}
inline void DB_C_GuildLog::set_time(::google::protobuf::int32 value) {
  _set_bit(0);
  time_ = value;
}

// optional string userID = 2;
inline bool DB_C_GuildLog::has_userid() const {
  return _has_bit(1);
}
inline void DB_C_GuildLog::clear_userid() {
  if (userid_ != &_default_userid_) {
    userid_->clear();
  }
  _clear_bit(1);
}
inline const ::std::string& DB_C_GuildLog::userid() const {
  return *userid_;
}
inline void DB_C_GuildLog::set_userid(const ::std::string& value) {
  _set_bit(1);
  if (userid_ == &_default_userid_) {
    userid_ = new ::std::string;
  }
  userid_->assign(value);
}
inline void DB_C_GuildLog::set_userid(const char* value) {
  _set_bit(1);
  if (userid_ == &_default_userid_) {
    userid_ = new ::std::string;
  }
  userid_->assign(value);
}
inline void DB_C_GuildLog::set_userid(const char* value, size_t size) {
  _set_bit(1);
  if (userid_ == &_default_userid_) {
    userid_ = new ::std::string;
  }
  userid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* DB_C_GuildLog::mutable_userid() {
  _set_bit(1);
  if (userid_ == &_default_userid_) {
    userid_ = new ::std::string;
  }
  return userid_;
}

// optional string userName = 3;
inline bool DB_C_GuildLog::has_username() const {
  return _has_bit(2);
}
inline void DB_C_GuildLog::clear_username() {
  if (username_ != &_default_username_) {
    username_->clear();
  }
  _clear_bit(2);
}
inline const ::std::string& DB_C_GuildLog::username() const {
  return *username_;
}
inline void DB_C_GuildLog::set_username(const ::std::string& value) {
  _set_bit(2);
  if (username_ == &_default_username_) {
    username_ = new ::std::string;
  }
  username_->assign(value);
}
inline void DB_C_GuildLog::set_username(const char* value) {
  _set_bit(2);
  if (username_ == &_default_username_) {
    username_ = new ::std::string;
  }
  username_->assign(value);
}
inline void DB_C_GuildLog::set_username(const char* value, size_t size) {
  _set_bit(2);
  if (username_ == &_default_username_) {
    username_ = new ::std::string;
  }
  username_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* DB_C_GuildLog::mutable_username() {
  _set_bit(2);
  if (username_ == &_default_username_) {
    username_ = new ::std::string;
  }
  return username_;
}

// optional int32 logType = 4;
inline bool DB_C_GuildLog::has_logtype() const {
  return _has_bit(3);
}
inline void DB_C_GuildLog::clear_logtype() {
  logtype_ = 0;
  _clear_bit(3);
}
inline ::google::protobuf::int32 DB_C_GuildLog::logtype() const {
  return logtype_;
}
inline void DB_C_GuildLog::set_logtype(::google::protobuf::int32 value) {
  _set_bit(3);
  logtype_ = value;
}

// optional int32 userPos = 5;
inline bool DB_C_GuildLog::has_userpos() const {
  return _has_bit(4);
}
inline void DB_C_GuildLog::clear_userpos() {
  userpos_ = 0;
  _clear_bit(4);
}
inline ::google::protobuf::int32 DB_C_GuildLog::userpos() const {
  return userpos_;
}
inline void DB_C_GuildLog::set_userpos(::google::protobuf::int32 value) {
  _set_bit(4);
  userpos_ = value;
}

// optional int32 bldID = 6;
inline bool DB_C_GuildLog::has_bldid() const {
  return _has_bit(5);
}
inline void DB_C_GuildLog::clear_bldid() {
  bldid_ = 0;
  _clear_bit(5);
}
inline ::google::protobuf::int32 DB_C_GuildLog::bldid() const {
  return bldid_;
}
inline void DB_C_GuildLog::set_bldid(::google::protobuf::int32 value) {
  _set_bit(5);
  bldid_ = value;
}

// optional int32 bldLV = 7;
inline bool DB_C_GuildLog::has_bldlv() const {
  return _has_bit(6);
}
inline void DB_C_GuildLog::clear_bldlv() {
  bldlv_ = 0;
  _clear_bit(6);
}
inline ::google::protobuf::int32 DB_C_GuildLog::bldlv() const {
  return bldlv_;
}
inline void DB_C_GuildLog::set_bldlv(::google::protobuf::int32 value) {
  _set_bit(6);
  bldlv_ = value;
}

// optional int32 payType = 8;
inline bool DB_C_GuildLog::has_paytype() const {
  return _has_bit(7);
}
inline void DB_C_GuildLog::clear_paytype() {
  paytype_ = 0;
  _clear_bit(7);
}
inline ::google::protobuf::int32 DB_C_GuildLog::paytype() const {
  return paytype_;
}
inline void DB_C_GuildLog::set_paytype(::google::protobuf::int32 value) {
  _set_bit(7);
  paytype_ = value;
}

// optional int32 gScore = 9;
inline bool DB_C_GuildLog::has_gscore() const {
  return _has_bit(8);
}
inline void DB_C_GuildLog::clear_gscore() {
  gscore_ = 0;
  _clear_bit(8);
}
inline ::google::protobuf::int32 DB_C_GuildLog::gscore() const {
  return gscore_;
}
inline void DB_C_GuildLog::set_gscore(::google::protobuf::int32 value) {
  _set_bit(8);
  gscore_ = value;
}

// optional int32 itemID = 10;
inline bool DB_C_GuildLog::has_itemid() const {
  return _has_bit(9);
}
inline void DB_C_GuildLog::clear_itemid() {
  itemid_ = 0;
  _clear_bit(9);
}
inline ::google::protobuf::int32 DB_C_GuildLog::itemid() const {
  return itemid_;
}
inline void DB_C_GuildLog::set_itemid(::google::protobuf::int32 value) {
  _set_bit(9);
  itemid_ = value;
}

// optional int32 itemCnt = 11;
inline bool DB_C_GuildLog::has_itemcnt() const {
  return _has_bit(10);
}
inline void DB_C_GuildLog::clear_itemcnt() {
  itemcnt_ = 0;
  _clear_bit(10);
}
inline ::google::protobuf::int32 DB_C_GuildLog::itemcnt() const {
  return itemcnt_;
}
inline void DB_C_GuildLog::set_itemcnt(::google::protobuf::int32 value) {
  _set_bit(10);
  itemcnt_ = value;
}

// optional int32 bldValue = 12;
inline bool DB_C_GuildLog::has_bldvalue() const {
  return _has_bit(11);
}
inline void DB_C_GuildLog::clear_bldvalue() {
  bldvalue_ = 0;
  _clear_bit(11);
}
inline ::google::protobuf::int32 DB_C_GuildLog::bldvalue() const {
  return bldvalue_;
}
inline void DB_C_GuildLog::set_bldvalue(::google::protobuf::int32 value) {
  _set_bit(11);
  bldvalue_ = value;
}

// optional int32 pkRank = 13;
inline bool DB_C_GuildLog::has_pkrank() const {
  return _has_bit(12);
}
inline void DB_C_GuildLog::clear_pkrank() {
  pkrank_ = 0;
  _clear_bit(12);
}
inline ::google::protobuf::int32 DB_C_GuildLog::pkrank() const {
  return pkrank_;
}
inline void DB_C_GuildLog::set_pkrank(::google::protobuf::int32 value) {
  _set_bit(12);
  pkrank_ = value;
}

// optional int32 pkRank1 = 14;
inline bool DB_C_GuildLog::has_pkrank1() const {
  return _has_bit(13);
}
inline void DB_C_GuildLog::clear_pkrank1() {
  pkrank1_ = 0;
  _clear_bit(13);
}
inline ::google::protobuf::int32 DB_C_GuildLog::pkrank1() const {
  return pkrank1_;
}
inline void DB_C_GuildLog::set_pkrank1(::google::protobuf::int32 value) {
  _set_bit(13);
  pkrank1_ = value;
}

// -------------------------------------------------------------------

// DB_C_GuildBuyRecord

// optional int32 dayBuyShopID = 1;
inline bool DB_C_GuildBuyRecord::has_daybuyshopid() const {
  return _has_bit(0);
}
inline void DB_C_GuildBuyRecord::clear_daybuyshopid() {
  daybuyshopid_ = 0;
  _clear_bit(0);
}
inline ::google::protobuf::int32 DB_C_GuildBuyRecord::daybuyshopid() const {
  return daybuyshopid_;
}
inline void DB_C_GuildBuyRecord::set_daybuyshopid(::google::protobuf::int32 value) {
  _set_bit(0);
  daybuyshopid_ = value;
}

// optional int32 dayBuyShopCnt = 2;
inline bool DB_C_GuildBuyRecord::has_daybuyshopcnt() const {
  return _has_bit(1);
}
inline void DB_C_GuildBuyRecord::clear_daybuyshopcnt() {
  daybuyshopcnt_ = 0;
  _clear_bit(1);
}
inline ::google::protobuf::int32 DB_C_GuildBuyRecord::daybuyshopcnt() const {
  return daybuyshopcnt_;
}
inline void DB_C_GuildBuyRecord::set_daybuyshopcnt(::google::protobuf::int32 value) {
  _set_bit(1);
  daybuyshopcnt_ = value;
}

// -------------------------------------------------------------------

// DB_C_GuildShopPmt

// optional int32 shopID = 1;
inline bool DB_C_GuildShopPmt::has_shopid() const {
  return _has_bit(0);
}
inline void DB_C_GuildShopPmt::clear_shopid() {
  shopid_ = 0;
  _clear_bit(0);
}
inline ::google::protobuf::int32 DB_C_GuildShopPmt::shopid() const {
  return shopid_;
}
inline void DB_C_GuildShopPmt::set_shopid(::google::protobuf::int32 value) {
  _set_bit(0);
  shopid_ = value;
}

// optional int32 position = 2;
inline bool DB_C_GuildShopPmt::has_position() const {
  return _has_bit(1);
}
inline void DB_C_GuildShopPmt::clear_position() {
  position_ = 0;
  _clear_bit(1);
}
inline ::google::protobuf::int32 DB_C_GuildShopPmt::position() const {
  return position_;
}
inline void DB_C_GuildShopPmt::set_position(::google::protobuf::int32 value) {
  _set_bit(1);
  position_ = value;
}

// -------------------------------------------------------------------

// DB_C_GuildShop

// optional int32 mysticShopUpdateTM = 1;
inline bool DB_C_GuildShop::has_mysticshopupdatetm() const {
  return _has_bit(0);
}
inline void DB_C_GuildShop::clear_mysticshopupdatetm() {
  mysticshopupdatetm_ = 0;
  _clear_bit(0);
}
inline ::google::protobuf::int32 DB_C_GuildShop::mysticshopupdatetm() const {
  return mysticshopupdatetm_;
}
inline void DB_C_GuildShop::set_mysticshopupdatetm(::google::protobuf::int32 value) {
  _set_bit(0);
  mysticshopupdatetm_ = value;
}

// repeated int32 mysticShopSaleID = 2;
inline int DB_C_GuildShop::mysticshopsaleid_size() const {
  return mysticshopsaleid_.size();
}
inline void DB_C_GuildShop::clear_mysticshopsaleid() {
  mysticshopsaleid_.Clear();
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
DB_C_GuildShop::mysticshopsaleid() const {
  return mysticshopsaleid_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
DB_C_GuildShop::mutable_mysticshopsaleid() {
  return &mysticshopsaleid_;
}
inline ::google::protobuf::int32 DB_C_GuildShop::mysticshopsaleid(int index) const {
  return mysticshopsaleid_.Get(index);
}
inline void DB_C_GuildShop::set_mysticshopsaleid(int index, ::google::protobuf::int32 value) {
  mysticshopsaleid_.Set(index, value);
}
inline void DB_C_GuildShop::add_mysticshopsaleid(::google::protobuf::int32 value) {
  mysticshopsaleid_.Add(value);
}

// optional int32 buyRecordDay = 3;
inline bool DB_C_GuildShop::has_buyrecordday() const {
  return _has_bit(2);
}
inline void DB_C_GuildShop::clear_buyrecordday() {
  buyrecordday_ = 0;
  _clear_bit(2);
}
inline ::google::protobuf::int32 DB_C_GuildShop::buyrecordday() const {
  return buyrecordday_;
}
inline void DB_C_GuildShop::set_buyrecordday(::google::protobuf::int32 value) {
  _set_bit(2);
  buyrecordday_ = value;
}

// repeated .DB_C_GuildBuyRecord buyRecord = 4;
inline int DB_C_GuildShop::buyrecord_size() const {
  return buyrecord_.size();
}
inline void DB_C_GuildShop::clear_buyrecord() {
  buyrecord_.Clear();
}
inline const ::google::protobuf::RepeatedPtrField< ::DB_C_GuildBuyRecord >&
DB_C_GuildShop::buyrecord() const {
  return buyrecord_;
}
inline ::google::protobuf::RepeatedPtrField< ::DB_C_GuildBuyRecord >*
DB_C_GuildShop::mutable_buyrecord() {
  return &buyrecord_;
}
inline const ::DB_C_GuildBuyRecord& DB_C_GuildShop::buyrecord(int index) const {
  return buyrecord_.Get(index);
}
inline ::DB_C_GuildBuyRecord* DB_C_GuildShop::mutable_buyrecord(int index) {
  return buyrecord_.Mutable(index);
}
inline ::DB_C_GuildBuyRecord* DB_C_GuildShop::add_buyrecord() {
  return buyrecord_.Add();
}

// repeated .DB_C_GuildShopPmt shopPmt = 5;
inline int DB_C_GuildShop::shoppmt_size() const {
  return shoppmt_.size();
}
inline void DB_C_GuildShop::clear_shoppmt() {
  shoppmt_.Clear();
}
inline const ::google::protobuf::RepeatedPtrField< ::DB_C_GuildShopPmt >&
DB_C_GuildShop::shoppmt() const {
  return shoppmt_;
}
inline ::google::protobuf::RepeatedPtrField< ::DB_C_GuildShopPmt >*
DB_C_GuildShop::mutable_shoppmt() {
  return &shoppmt_;
}
inline const ::DB_C_GuildShopPmt& DB_C_GuildShop::shoppmt(int index) const {
  return shoppmt_.Get(index);
}
inline ::DB_C_GuildShopPmt* DB_C_GuildShop::mutable_shoppmt(int index) {
  return shoppmt_.Mutable(index);
}
inline ::DB_C_GuildShopPmt* DB_C_GuildShop::add_shoppmt() {
  return shoppmt_.Add();
}

// -------------------------------------------------------------------

// DB_C_GuildBtlAddProp

// optional int64 userID = 1;
inline bool DB_C_GuildBtlAddProp::has_userid() const {
  return _has_bit(0);
}
inline void DB_C_GuildBtlAddProp::clear_userid() {
  userid_ = GOOGLE_LONGLONG(0);
  _clear_bit(0);
}
inline ::google::protobuf::int64 DB_C_GuildBtlAddProp::userid() const {
  return userid_;
}
inline void DB_C_GuildBtlAddProp::set_userid(::google::protobuf::int64 value) {
  _set_bit(0);
  userid_ = value;
}

// optional int32 addAtkPct = 2;
inline bool DB_C_GuildBtlAddProp::has_addatkpct() const {
  return _has_bit(1);
}
inline void DB_C_GuildBtlAddProp::clear_addatkpct() {
  addatkpct_ = 0;
  _clear_bit(1);
}
inline ::google::protobuf::int32 DB_C_GuildBtlAddProp::addatkpct() const {
  return addatkpct_;
}
inline void DB_C_GuildBtlAddProp::set_addatkpct(::google::protobuf::int32 value) {
  _set_bit(1);
  addatkpct_ = value;
}

// optional int32 addBloodPct = 3;
inline bool DB_C_GuildBtlAddProp::has_addbloodpct() const {
  return _has_bit(2);
}
inline void DB_C_GuildBtlAddProp::clear_addbloodpct() {
  addbloodpct_ = 0;
  _clear_bit(2);
}
inline ::google::protobuf::int32 DB_C_GuildBtlAddProp::addbloodpct() const {
  return addbloodpct_;
}
inline void DB_C_GuildBtlAddProp::set_addbloodpct(::google::protobuf::int32 value) {
  _set_bit(2);
  addbloodpct_ = value;
}

// -------------------------------------------------------------------

// DB_C_GuildBtlReward_Turns

// optional int32 result = 1;
inline bool DB_C_GuildBtlReward_Turns::has_result() const {
  return _has_bit(0);
}
inline void DB_C_GuildBtlReward_Turns::clear_result() {
  result_ = 0;
  _clear_bit(0);
}
inline ::google::protobuf::int32 DB_C_GuildBtlReward_Turns::result() const {
  return result_;
}
inline void DB_C_GuildBtlReward_Turns::set_result(::google::protobuf::int32 value) {
  _set_bit(0);
  result_ = value;
}

// optional int32 winWay0 = 2;
inline bool DB_C_GuildBtlReward_Turns::has_winway0() const {
  return _has_bit(1);
}
inline void DB_C_GuildBtlReward_Turns::clear_winway0() {
  winway0_ = 0;
  _clear_bit(1);
}
inline ::google::protobuf::int32 DB_C_GuildBtlReward_Turns::winway0() const {
  return winway0_;
}
inline void DB_C_GuildBtlReward_Turns::set_winway0(::google::protobuf::int32 value) {
  _set_bit(1);
  winway0_ = value;
}

// optional int32 winWay1 = 3;
inline bool DB_C_GuildBtlReward_Turns::has_winway1() const {
  return _has_bit(2);
}
inline void DB_C_GuildBtlReward_Turns::clear_winway1() {
  winway1_ = 0;
  _clear_bit(2);
}
inline ::google::protobuf::int32 DB_C_GuildBtlReward_Turns::winway1() const {
  return winway1_;
}
inline void DB_C_GuildBtlReward_Turns::set_winway1(::google::protobuf::int32 value) {
  _set_bit(2);
  winway1_ = value;
}

// optional int32 winWay2 = 4;
inline bool DB_C_GuildBtlReward_Turns::has_winway2() const {
  return _has_bit(3);
}
inline void DB_C_GuildBtlReward_Turns::clear_winway2() {
  winway2_ = 0;
  _clear_bit(3);
}
inline ::google::protobuf::int32 DB_C_GuildBtlReward_Turns::winway2() const {
  return winway2_;
}
inline void DB_C_GuildBtlReward_Turns::set_winway2(::google::protobuf::int32 value) {
  _set_bit(3);
  winway2_ = value;
}

// optional int32 score = 5;
inline bool DB_C_GuildBtlReward_Turns::has_score() const {
  return _has_bit(4);
}
inline void DB_C_GuildBtlReward_Turns::clear_score() {
  score_ = 0;
  _clear_bit(4);
}
inline ::google::protobuf::int32 DB_C_GuildBtlReward_Turns::score() const {
  return score_;
}
inline void DB_C_GuildBtlReward_Turns::set_score(::google::protobuf::int32 value) {
  _set_bit(4);
  score_ = value;
}

// optional int32 guildID = 6;
inline bool DB_C_GuildBtlReward_Turns::has_guildid() const {
  return _has_bit(5);
}
inline void DB_C_GuildBtlReward_Turns::clear_guildid() {
  guildid_ = 0;
  _clear_bit(5);
}
inline ::google::protobuf::int32 DB_C_GuildBtlReward_Turns::guildid() const {
  return guildid_;
}
inline void DB_C_GuildBtlReward_Turns::set_guildid(::google::protobuf::int32 value) {
  _set_bit(5);
  guildid_ = value;
}

// optional int32 guildLV = 7;
inline bool DB_C_GuildBtlReward_Turns::has_guildlv() const {
  return _has_bit(6);
}
inline void DB_C_GuildBtlReward_Turns::clear_guildlv() {
  guildlv_ = 0;
  _clear_bit(6);
}
inline ::google::protobuf::int32 DB_C_GuildBtlReward_Turns::guildlv() const {
  return guildlv_;
}
inline void DB_C_GuildBtlReward_Turns::set_guildlv(::google::protobuf::int32 value) {
  _set_bit(6);
  guildlv_ = value;
}

// optional string guildName = 8;
inline bool DB_C_GuildBtlReward_Turns::has_guildname() const {
  return _has_bit(7);
}
inline void DB_C_GuildBtlReward_Turns::clear_guildname() {
  if (guildname_ != &_default_guildname_) {
    guildname_->clear();
  }
  _clear_bit(7);
}
inline const ::std::string& DB_C_GuildBtlReward_Turns::guildname() const {
  return *guildname_;
}
inline void DB_C_GuildBtlReward_Turns::set_guildname(const ::std::string& value) {
  _set_bit(7);
  if (guildname_ == &_default_guildname_) {
    guildname_ = new ::std::string;
  }
  guildname_->assign(value);
}
inline void DB_C_GuildBtlReward_Turns::set_guildname(const char* value) {
  _set_bit(7);
  if (guildname_ == &_default_guildname_) {
    guildname_ = new ::std::string;
  }
  guildname_->assign(value);
}
inline void DB_C_GuildBtlReward_Turns::set_guildname(const char* value, size_t size) {
  _set_bit(7);
  if (guildname_ == &_default_guildname_) {
    guildname_ = new ::std::string;
  }
  guildname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* DB_C_GuildBtlReward_Turns::mutable_guildname() {
  _set_bit(7);
  if (guildname_ == &_default_guildname_) {
    guildname_ = new ::std::string;
  }
  return guildname_;
}

// optional int32 guildEnemyID = 9;
inline bool DB_C_GuildBtlReward_Turns::has_guildenemyid() const {
  return _has_bit(8);
}
inline void DB_C_GuildBtlReward_Turns::clear_guildenemyid() {
  guildenemyid_ = 0;
  _clear_bit(8);
}
inline ::google::protobuf::int32 DB_C_GuildBtlReward_Turns::guildenemyid() const {
  return guildenemyid_;
}
inline void DB_C_GuildBtlReward_Turns::set_guildenemyid(::google::protobuf::int32 value) {
  _set_bit(8);
  guildenemyid_ = value;
}

// optional int32 guildEnemyLV = 10;
inline bool DB_C_GuildBtlReward_Turns::has_guildenemylv() const {
  return _has_bit(9);
}
inline void DB_C_GuildBtlReward_Turns::clear_guildenemylv() {
  guildenemylv_ = 0;
  _clear_bit(9);
}
inline ::google::protobuf::int32 DB_C_GuildBtlReward_Turns::guildenemylv() const {
  return guildenemylv_;
}
inline void DB_C_GuildBtlReward_Turns::set_guildenemylv(::google::protobuf::int32 value) {
  _set_bit(9);
  guildenemylv_ = value;
}

// optional string guildEnemyName = 11;
inline bool DB_C_GuildBtlReward_Turns::has_guildenemyname() const {
  return _has_bit(10);
}
inline void DB_C_GuildBtlReward_Turns::clear_guildenemyname() {
  if (guildenemyname_ != &_default_guildenemyname_) {
    guildenemyname_->clear();
  }
  _clear_bit(10);
}
inline const ::std::string& DB_C_GuildBtlReward_Turns::guildenemyname() const {
  return *guildenemyname_;
}
inline void DB_C_GuildBtlReward_Turns::set_guildenemyname(const ::std::string& value) {
  _set_bit(10);
  if (guildenemyname_ == &_default_guildenemyname_) {
    guildenemyname_ = new ::std::string;
  }
  guildenemyname_->assign(value);
}
inline void DB_C_GuildBtlReward_Turns::set_guildenemyname(const char* value) {
  _set_bit(10);
  if (guildenemyname_ == &_default_guildenemyname_) {
    guildenemyname_ = new ::std::string;
  }
  guildenemyname_->assign(value);
}
inline void DB_C_GuildBtlReward_Turns::set_guildenemyname(const char* value, size_t size) {
  _set_bit(10);
  if (guildenemyname_ == &_default_guildenemyname_) {
    guildenemyname_ = new ::std::string;
  }
  guildenemyname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* DB_C_GuildBtlReward_Turns::mutable_guildenemyname() {
  _set_bit(10);
  if (guildenemyname_ == &_default_guildenemyname_) {
    guildenemyname_ = new ::std::string;
  }
  return guildenemyname_;
}

// -------------------------------------------------------------------

// DB_C_GuildBtlReward

// optional int32 btlDay = 1;
inline bool DB_C_GuildBtlReward::has_btlday() const {
  return _has_bit(0);
}
inline void DB_C_GuildBtlReward::clear_btlday() {
  btlday_ = 0;
  _clear_bit(0);
}
inline ::google::protobuf::int32 DB_C_GuildBtlReward::btlday() const {
  return btlday_;
}
inline void DB_C_GuildBtlReward::set_btlday(::google::protobuf::int32 value) {
  _set_bit(0);
  btlday_ = value;
}

// repeated .DB_C_GuildBtlReward_Turns turns = 2;
inline int DB_C_GuildBtlReward::turns_size() const {
  return turns_.size();
}
inline void DB_C_GuildBtlReward::clear_turns() {
  turns_.Clear();
}
inline const ::google::protobuf::RepeatedPtrField< ::DB_C_GuildBtlReward_Turns >&
DB_C_GuildBtlReward::turns() const {
  return turns_;
}
inline ::google::protobuf::RepeatedPtrField< ::DB_C_GuildBtlReward_Turns >*
DB_C_GuildBtlReward::mutable_turns() {
  return &turns_;
}
inline const ::DB_C_GuildBtlReward_Turns& DB_C_GuildBtlReward::turns(int index) const {
  return turns_.Get(index);
}
inline ::DB_C_GuildBtlReward_Turns* DB_C_GuildBtlReward::mutable_turns(int index) {
  return turns_.Mutable(index);
}
inline ::DB_C_GuildBtlReward_Turns* DB_C_GuildBtlReward::add_turns() {
  return turns_.Add();
}

// -------------------------------------------------------------------

// DB_C_GuildBtlResult

// optional int32 result = 2;
inline bool DB_C_GuildBtlResult::has_result() const {
  return _has_bit(0);
}
inline void DB_C_GuildBtlResult::clear_result() {
  result_ = 0;
  _clear_bit(0);
}
inline ::google::protobuf::int32 DB_C_GuildBtlResult::result() const {
  return result_;
}
inline void DB_C_GuildBtlResult::set_result(::google::protobuf::int32 value) {
  _set_bit(0);
  result_ = value;
}

// optional int32 winWay0 = 3;
inline bool DB_C_GuildBtlResult::has_winway0() const {
  return _has_bit(1);
}
inline void DB_C_GuildBtlResult::clear_winway0() {
  winway0_ = 0;
  _clear_bit(1);
}
inline ::google::protobuf::int32 DB_C_GuildBtlResult::winway0() const {
  return winway0_;
}
inline void DB_C_GuildBtlResult::set_winway0(::google::protobuf::int32 value) {
  _set_bit(1);
  winway0_ = value;
}

// optional int32 winWay1 = 4;
inline bool DB_C_GuildBtlResult::has_winway1() const {
  return _has_bit(2);
}
inline void DB_C_GuildBtlResult::clear_winway1() {
  winway1_ = 0;
  _clear_bit(2);
}
inline ::google::protobuf::int32 DB_C_GuildBtlResult::winway1() const {
  return winway1_;
}
inline void DB_C_GuildBtlResult::set_winway1(::google::protobuf::int32 value) {
  _set_bit(2);
  winway1_ = value;
}

// optional int32 winWay2 = 5;
inline bool DB_C_GuildBtlResult::has_winway2() const {
  return _has_bit(3);
}
inline void DB_C_GuildBtlResult::clear_winway2() {
  winway2_ = 0;
  _clear_bit(3);
}
inline ::google::protobuf::int32 DB_C_GuildBtlResult::winway2() const {
  return winway2_;
}
inline void DB_C_GuildBtlResult::set_winway2(::google::protobuf::int32 value) {
  _set_bit(3);
  winway2_ = value;
}

// optional int32 score = 6;
inline bool DB_C_GuildBtlResult::has_score() const {
  return _has_bit(4);
}
inline void DB_C_GuildBtlResult::clear_score() {
  score_ = 0;
  _clear_bit(4);
}
inline ::google::protobuf::int32 DB_C_GuildBtlResult::score() const {
  return score_;
}
inline void DB_C_GuildBtlResult::set_score(::google::protobuf::int32 value) {
  _set_bit(4);
  score_ = value;
}

// optional int32 pkGuild = 7;
inline bool DB_C_GuildBtlResult::has_pkguild() const {
  return _has_bit(5);
}
inline void DB_C_GuildBtlResult::clear_pkguild() {
  pkguild_ = 0;
  _clear_bit(5);
}
inline ::google::protobuf::int32 DB_C_GuildBtlResult::pkguild() const {
  return pkguild_;
}
inline void DB_C_GuildBtlResult::set_pkguild(::google::protobuf::int32 value) {
  _set_bit(5);
  pkguild_ = value;
}

// optional bool addFlag = 8;
inline bool DB_C_GuildBtlResult::has_addflag() const {
  return _has_bit(6);
}
inline void DB_C_GuildBtlResult::clear_addflag() {
  addflag_ = false;
  _clear_bit(6);
}
inline bool DB_C_GuildBtlResult::addflag() const {
  return addflag_;
}
inline void DB_C_GuildBtlResult::set_addflag(bool value) {
  _set_bit(6);
  addflag_ = value;
}

// -------------------------------------------------------------------

// DB_C_GuildStorage

// optional int32 itemID = 1;
inline bool DB_C_GuildStorage::has_itemid() const {
  return _has_bit(0);
}
inline void DB_C_GuildStorage::clear_itemid() {
  itemid_ = 0;
  _clear_bit(0);
}
inline ::google::protobuf::int32 DB_C_GuildStorage::itemid() const {
  return itemid_;
}
inline void DB_C_GuildStorage::set_itemid(::google::protobuf::int32 value) {
  _set_bit(0);
  itemid_ = value;
}

// optional int32 itemCnt = 2;
inline bool DB_C_GuildStorage::has_itemcnt() const {
  return _has_bit(1);
}
inline void DB_C_GuildStorage::clear_itemcnt() {
  itemcnt_ = 0;
  _clear_bit(1);
}
inline ::google::protobuf::int32 DB_C_GuildStorage::itemcnt() const {
  return itemcnt_;
}
inline void DB_C_GuildStorage::set_itemcnt(::google::protobuf::int32 value) {
  _set_bit(1);
  itemcnt_ = value;
}

// -------------------------------------------------------------------

// DB_C_GuildBtl

// optional int32 btlDay = 1;
inline bool DB_C_GuildBtl::has_btlday() const {
  return _has_bit(0);
}
inline void DB_C_GuildBtl::clear_btlday() {
  btlday_ = 0;
  _clear_bit(0);
}
inline ::google::protobuf::int32 DB_C_GuildBtl::btlday() const {
  return btlday_;
}
inline void DB_C_GuildBtl::set_btlday(::google::protobuf::int32 value) {
  _set_bit(0);
  btlday_ = value;
}

// repeated int64 userWay0 = 2;
inline int DB_C_GuildBtl::userway0_size() const {
  return userway0_.size();
}
inline void DB_C_GuildBtl::clear_userway0() {
  userway0_.Clear();
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
DB_C_GuildBtl::userway0() const {
  return userway0_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
DB_C_GuildBtl::mutable_userway0() {
  return &userway0_;
}
inline ::google::protobuf::int64 DB_C_GuildBtl::userway0(int index) const {
  return userway0_.Get(index);
}
inline void DB_C_GuildBtl::set_userway0(int index, ::google::protobuf::int64 value) {
  userway0_.Set(index, value);
}
inline void DB_C_GuildBtl::add_userway0(::google::protobuf::int64 value) {
  userway0_.Add(value);
}

// repeated int64 userWay1 = 3;
inline int DB_C_GuildBtl::userway1_size() const {
  return userway1_.size();
}
inline void DB_C_GuildBtl::clear_userway1() {
  userway1_.Clear();
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
DB_C_GuildBtl::userway1() const {
  return userway1_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
DB_C_GuildBtl::mutable_userway1() {
  return &userway1_;
}
inline ::google::protobuf::int64 DB_C_GuildBtl::userway1(int index) const {
  return userway1_.Get(index);
}
inline void DB_C_GuildBtl::set_userway1(int index, ::google::protobuf::int64 value) {
  userway1_.Set(index, value);
}
inline void DB_C_GuildBtl::add_userway1(::google::protobuf::int64 value) {
  userway1_.Add(value);
}

// repeated int64 userWay2 = 4;
inline int DB_C_GuildBtl::userway2_size() const {
  return userway2_.size();
}
inline void DB_C_GuildBtl::clear_userway2() {
  userway2_.Clear();
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
DB_C_GuildBtl::userway2() const {
  return userway2_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
DB_C_GuildBtl::mutable_userway2() {
  return &userway2_;
}
inline ::google::protobuf::int64 DB_C_GuildBtl::userway2(int index) const {
  return userway2_.Get(index);
}
inline void DB_C_GuildBtl::set_userway2(int index, ::google::protobuf::int64 value) {
  userway2_.Set(index, value);
}
inline void DB_C_GuildBtl::add_userway2(::google::protobuf::int64 value) {
  userway2_.Add(value);
}

// optional int32 signupCnt = 5;
inline bool DB_C_GuildBtl::has_signupcnt() const {
  return _has_bit(4);
}
inline void DB_C_GuildBtl::clear_signupcnt() {
  signupcnt_ = 0;
  _clear_bit(4);
}
inline ::google::protobuf::int32 DB_C_GuildBtl::signupcnt() const {
  return signupcnt_;
}
inline void DB_C_GuildBtl::set_signupcnt(::google::protobuf::int32 value) {
  _set_bit(4);
  signupcnt_ = value;
}

// repeated .DB_C_GuildBtlAddProp addProp = 6;
inline int DB_C_GuildBtl::addprop_size() const {
  return addprop_.size();
}
inline void DB_C_GuildBtl::clear_addprop() {
  addprop_.Clear();
}
inline const ::google::protobuf::RepeatedPtrField< ::DB_C_GuildBtlAddProp >&
DB_C_GuildBtl::addprop() const {
  return addprop_;
}
inline ::google::protobuf::RepeatedPtrField< ::DB_C_GuildBtlAddProp >*
DB_C_GuildBtl::mutable_addprop() {
  return &addprop_;
}
inline const ::DB_C_GuildBtlAddProp& DB_C_GuildBtl::addprop(int index) const {
  return addprop_.Get(index);
}
inline ::DB_C_GuildBtlAddProp* DB_C_GuildBtl::mutable_addprop(int index) {
  return addprop_.Mutable(index);
}
inline ::DB_C_GuildBtlAddProp* DB_C_GuildBtl::add_addprop() {
  return addprop_.Add();
}

// repeated .DB_C_GuildBtlResult result = 7;
inline int DB_C_GuildBtl::result_size() const {
  return result_.size();
}
inline void DB_C_GuildBtl::clear_result() {
  result_.Clear();
}
inline const ::google::protobuf::RepeatedPtrField< ::DB_C_GuildBtlResult >&
DB_C_GuildBtl::result() const {
  return result_;
}
inline ::google::protobuf::RepeatedPtrField< ::DB_C_GuildBtlResult >*
DB_C_GuildBtl::mutable_result() {
  return &result_;
}
inline const ::DB_C_GuildBtlResult& DB_C_GuildBtl::result(int index) const {
  return result_.Get(index);
}
inline ::DB_C_GuildBtlResult* DB_C_GuildBtl::mutable_result(int index) {
  return result_.Mutable(index);
}
inline ::DB_C_GuildBtlResult* DB_C_GuildBtl::add_result() {
  return result_.Add();
}

// optional .DB_C_GuildBtlReward reward = 8;
inline bool DB_C_GuildBtl::has_reward() const {
  return _has_bit(7);
}
inline void DB_C_GuildBtl::clear_reward() {
  if (reward_ != NULL) reward_->::DB_C_GuildBtlReward::Clear();
  _clear_bit(7);
}
inline const ::DB_C_GuildBtlReward& DB_C_GuildBtl::reward() const {
  return reward_ != NULL ? *reward_ : *default_instance_->reward_;
}
inline ::DB_C_GuildBtlReward* DB_C_GuildBtl::mutable_reward() {
  _set_bit(7);
  if (reward_ == NULL) reward_ = new ::DB_C_GuildBtlReward;
  return reward_;
}

// optional int32 totalScore = 9;
inline bool DB_C_GuildBtl::has_totalscore() const {
  return _has_bit(8);
}
inline void DB_C_GuildBtl::clear_totalscore() {
  totalscore_ = 0;
  _clear_bit(8);
}
inline ::google::protobuf::int32 DB_C_GuildBtl::totalscore() const {
  return totalscore_;
}
inline void DB_C_GuildBtl::set_totalscore(::google::protobuf::int32 value) {
  _set_bit(8);
  totalscore_ = value;
}

// optional int32 lastBtlSession = 10;
inline bool DB_C_GuildBtl::has_lastbtlsession() const {
  return _has_bit(9);
}
inline void DB_C_GuildBtl::clear_lastbtlsession() {
  lastbtlsession_ = 0;
  _clear_bit(9);
}
inline ::google::protobuf::int32 DB_C_GuildBtl::lastbtlsession() const {
  return lastbtlsession_;
}
inline void DB_C_GuildBtl::set_lastbtlsession(::google::protobuf::int32 value) {
  _set_bit(9);
  lastbtlsession_ = value;
}

// optional int32 lastBtlRank = 11;
inline bool DB_C_GuildBtl::has_lastbtlrank() const {
  return _has_bit(10);
}
inline void DB_C_GuildBtl::clear_lastbtlrank() {
  lastbtlrank_ = 0;
  _clear_bit(10);
}
inline ::google::protobuf::int32 DB_C_GuildBtl::lastbtlrank() const {
  return lastbtlrank_;
}
inline void DB_C_GuildBtl::set_lastbtlrank(::google::protobuf::int32 value) {
  _set_bit(10);
  lastbtlrank_ = value;
}

// optional int32 btlCnt = 12;
inline bool DB_C_GuildBtl::has_btlcnt() const {
  return _has_bit(11);
}
inline void DB_C_GuildBtl::clear_btlcnt() {
  btlcnt_ = 0;
  _clear_bit(11);
}
inline ::google::protobuf::int32 DB_C_GuildBtl::btlcnt() const {
  return btlcnt_;
}
inline void DB_C_GuildBtl::set_btlcnt(::google::protobuf::int32 value) {
  _set_bit(11);
  btlcnt_ = value;
}

// -------------------------------------------------------------------

// DB_C_Guild

// required int32 guildID = 1;
inline bool DB_C_Guild::has_guildid() const {
  return _has_bit(0);
}
inline void DB_C_Guild::clear_guildid() {
  guildid_ = 0;
  _clear_bit(0);
}
inline ::google::protobuf::int32 DB_C_Guild::guildid() const {
  return guildid_;
}
inline void DB_C_Guild::set_guildid(::google::protobuf::int32 value) {
  _set_bit(0);
  guildid_ = value;
}

// required int32 countryID = 2;
inline bool DB_C_Guild::has_countryid() const {
  return _has_bit(1);
}
inline void DB_C_Guild::clear_countryid() {
  countryid_ = 0;
  _clear_bit(1);
}
inline ::google::protobuf::int32 DB_C_Guild::countryid() const {
  return countryid_;
}
inline void DB_C_Guild::set_countryid(::google::protobuf::int32 value) {
  _set_bit(1);
  countryid_ = value;
}

// optional int32 guildLV = 3;
inline bool DB_C_Guild::has_guildlv() const {
  return _has_bit(2);
}
inline void DB_C_Guild::clear_guildlv() {
  guildlv_ = 0;
  _clear_bit(2);
}
inline ::google::protobuf::int32 DB_C_Guild::guildlv() const {
  return guildlv_;
}
inline void DB_C_Guild::set_guildlv(::google::protobuf::int32 value) {
  _set_bit(2);
  guildlv_ = value;
}

// optional string guildName = 4;
inline bool DB_C_Guild::has_guildname() const {
  return _has_bit(3);
}
inline void DB_C_Guild::clear_guildname() {
  if (guildname_ != &_default_guildname_) {
    guildname_->clear();
  }
  _clear_bit(3);
}
inline const ::std::string& DB_C_Guild::guildname() const {
  return *guildname_;
}
inline void DB_C_Guild::set_guildname(const ::std::string& value) {
  _set_bit(3);
  if (guildname_ == &_default_guildname_) {
    guildname_ = new ::std::string;
  }
  guildname_->assign(value);
}
inline void DB_C_Guild::set_guildname(const char* value) {
  _set_bit(3);
  if (guildname_ == &_default_guildname_) {
    guildname_ = new ::std::string;
  }
  guildname_->assign(value);
}
inline void DB_C_Guild::set_guildname(const char* value, size_t size) {
  _set_bit(3);
  if (guildname_ == &_default_guildname_) {
    guildname_ = new ::std::string;
  }
  guildname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* DB_C_Guild::mutable_guildname() {
  _set_bit(3);
  if (guildname_ == &_default_guildname_) {
    guildname_ = new ::std::string;
  }
  return guildname_;
}

// optional string guildSlogan = 5;
inline bool DB_C_Guild::has_guildslogan() const {
  return _has_bit(4);
}
inline void DB_C_Guild::clear_guildslogan() {
  if (guildslogan_ != &_default_guildslogan_) {
    guildslogan_->clear();
  }
  _clear_bit(4);
}
inline const ::std::string& DB_C_Guild::guildslogan() const {
  return *guildslogan_;
}
inline void DB_C_Guild::set_guildslogan(const ::std::string& value) {
  _set_bit(4);
  if (guildslogan_ == &_default_guildslogan_) {
    guildslogan_ = new ::std::string;
  }
  guildslogan_->assign(value);
}
inline void DB_C_Guild::set_guildslogan(const char* value) {
  _set_bit(4);
  if (guildslogan_ == &_default_guildslogan_) {
    guildslogan_ = new ::std::string;
  }
  guildslogan_->assign(value);
}
inline void DB_C_Guild::set_guildslogan(const char* value, size_t size) {
  _set_bit(4);
  if (guildslogan_ == &_default_guildslogan_) {
    guildslogan_ = new ::std::string;
  }
  guildslogan_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* DB_C_Guild::mutable_guildslogan() {
  _set_bit(4);
  if (guildslogan_ == &_default_guildslogan_) {
    guildslogan_ = new ::std::string;
  }
  return guildslogan_;
}

// optional string guildBulletin = 6;
inline bool DB_C_Guild::has_guildbulletin() const {
  return _has_bit(5);
}
inline void DB_C_Guild::clear_guildbulletin() {
  if (guildbulletin_ != &_default_guildbulletin_) {
    guildbulletin_->clear();
  }
  _clear_bit(5);
}
inline const ::std::string& DB_C_Guild::guildbulletin() const {
  return *guildbulletin_;
}
inline void DB_C_Guild::set_guildbulletin(const ::std::string& value) {
  _set_bit(5);
  if (guildbulletin_ == &_default_guildbulletin_) {
    guildbulletin_ = new ::std::string;
  }
  guildbulletin_->assign(value);
}
inline void DB_C_Guild::set_guildbulletin(const char* value) {
  _set_bit(5);
  if (guildbulletin_ == &_default_guildbulletin_) {
    guildbulletin_ = new ::std::string;
  }
  guildbulletin_->assign(value);
}
inline void DB_C_Guild::set_guildbulletin(const char* value, size_t size) {
  _set_bit(5);
  if (guildbulletin_ == &_default_guildbulletin_) {
    guildbulletin_ = new ::std::string;
  }
  guildbulletin_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* DB_C_Guild::mutable_guildbulletin() {
  _set_bit(5);
  if (guildbulletin_ == &_default_guildbulletin_) {
    guildbulletin_ = new ::std::string;
  }
  return guildbulletin_;
}

// optional int32 bldValue = 7;
inline bool DB_C_Guild::has_bldvalue() const {
  return _has_bit(6);
}
inline void DB_C_Guild::clear_bldvalue() {
  bldvalue_ = 0;
  _clear_bit(6);
}
inline ::google::protobuf::int32 DB_C_Guild::bldvalue() const {
  return bldvalue_;
}
inline void DB_C_Guild::set_bldvalue(::google::protobuf::int32 value) {
  _set_bit(6);
  bldvalue_ = value;
}

// optional int32 guildUesrCnt = 8;
inline bool DB_C_Guild::has_guilduesrcnt() const {
  return _has_bit(7);
}
inline void DB_C_Guild::clear_guilduesrcnt() {
  guilduesrcnt_ = 0;
  _clear_bit(7);
}
inline ::google::protobuf::int32 DB_C_Guild::guilduesrcnt() const {
  return guilduesrcnt_;
}
inline void DB_C_Guild::set_guilduesrcnt(::google::protobuf::int32 value) {
  _set_bit(7);
  guilduesrcnt_ = value;
}

// optional int64 leaderID = 9;
inline bool DB_C_Guild::has_leaderid() const {
  return _has_bit(8);
}
inline void DB_C_Guild::clear_leaderid() {
  leaderid_ = GOOGLE_LONGLONG(0);
  _clear_bit(8);
}
inline ::google::protobuf::int64 DB_C_Guild::leaderid() const {
  return leaderid_;
}
inline void DB_C_Guild::set_leaderid(::google::protobuf::int64 value) {
  _set_bit(8);
  leaderid_ = value;
}

// optional string leaderName = 10;
inline bool DB_C_Guild::has_leadername() const {
  return _has_bit(9);
}
inline void DB_C_Guild::clear_leadername() {
  if (leadername_ != &_default_leadername_) {
    leadername_->clear();
  }
  _clear_bit(9);
}
inline const ::std::string& DB_C_Guild::leadername() const {
  return *leadername_;
}
inline void DB_C_Guild::set_leadername(const ::std::string& value) {
  _set_bit(9);
  if (leadername_ == &_default_leadername_) {
    leadername_ = new ::std::string;
  }
  leadername_->assign(value);
}
inline void DB_C_Guild::set_leadername(const char* value) {
  _set_bit(9);
  if (leadername_ == &_default_leadername_) {
    leadername_ = new ::std::string;
  }
  leadername_->assign(value);
}
inline void DB_C_Guild::set_leadername(const char* value, size_t size) {
  _set_bit(9);
  if (leadername_ == &_default_leadername_) {
    leadername_ = new ::std::string;
  }
  leadername_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* DB_C_Guild::mutable_leadername() {
  _set_bit(9);
  if (leadername_ == &_default_leadername_) {
    leadername_ = new ::std::string;
  }
  return leadername_;
}

// optional int32 delateTM = 11;
inline bool DB_C_Guild::has_delatetm() const {
  return _has_bit(10);
}
inline void DB_C_Guild::clear_delatetm() {
  delatetm_ = 0;
  _clear_bit(10);
}
inline ::google::protobuf::int32 DB_C_Guild::delatetm() const {
  return delatetm_;
}
inline void DB_C_Guild::set_delatetm(::google::protobuf::int32 value) {
  _set_bit(10);
  delatetm_ = value;
}

// optional int32 leaderLastTM = 12;
inline bool DB_C_Guild::has_leaderlasttm() const {
  return _has_bit(11);
}
inline void DB_C_Guild::clear_leaderlasttm() {
  leaderlasttm_ = 0;
  _clear_bit(11);
}
inline ::google::protobuf::int32 DB_C_Guild::leaderlasttm() const {
  return leaderlasttm_;
}
inline void DB_C_Guild::set_leaderlasttm(::google::protobuf::int32 value) {
  _set_bit(11);
  leaderlasttm_ = value;
}

// repeated int64 applyUserID = 13;
inline int DB_C_Guild::applyuserid_size() const {
  return applyuserid_.size();
}
inline void DB_C_Guild::clear_applyuserid() {
  applyuserid_.Clear();
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
DB_C_Guild::applyuserid() const {
  return applyuserid_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
DB_C_Guild::mutable_applyuserid() {
  return &applyuserid_;
}
inline ::google::protobuf::int64 DB_C_Guild::applyuserid(int index) const {
  return applyuserid_.Get(index);
}
inline void DB_C_Guild::set_applyuserid(int index, ::google::protobuf::int64 value) {
  applyuserid_.Set(index, value);
}
inline void DB_C_Guild::add_applyuserid(::google::protobuf::int64 value) {
  applyuserid_.Add(value);
}

// repeated .DB_C_GuildBld build = 14;
inline int DB_C_Guild::build_size() const {
  return build_.size();
}
inline void DB_C_Guild::clear_build() {
  build_.Clear();
}
inline const ::google::protobuf::RepeatedPtrField< ::DB_C_GuildBld >&
DB_C_Guild::build() const {
  return build_;
}
inline ::google::protobuf::RepeatedPtrField< ::DB_C_GuildBld >*
DB_C_Guild::mutable_build() {
  return &build_;
}
inline const ::DB_C_GuildBld& DB_C_Guild::build(int index) const {
  return build_.Get(index);
}
inline ::DB_C_GuildBld* DB_C_Guild::mutable_build(int index) {
  return build_.Mutable(index);
}
inline ::DB_C_GuildBld* DB_C_Guild::add_build() {
  return build_.Add();
}

// repeated .DB_C_GuildLog log = 15;
inline int DB_C_Guild::log_size() const {
  return log_.size();
}
inline void DB_C_Guild::clear_log() {
  log_.Clear();
}
inline const ::google::protobuf::RepeatedPtrField< ::DB_C_GuildLog >&
DB_C_Guild::log() const {
  return log_;
}
inline ::google::protobuf::RepeatedPtrField< ::DB_C_GuildLog >*
DB_C_Guild::mutable_log() {
  return &log_;
}
inline const ::DB_C_GuildLog& DB_C_Guild::log(int index) const {
  return log_.Get(index);
}
inline ::DB_C_GuildLog* DB_C_Guild::mutable_log(int index) {
  return log_.Mutable(index);
}
inline ::DB_C_GuildLog* DB_C_Guild::add_log() {
  return log_.Add();
}

// optional .DB_C_GuildShop guildShop = 16;
inline bool DB_C_Guild::has_guildshop() const {
  return _has_bit(15);
}
inline void DB_C_Guild::clear_guildshop() {
  if (guildshop_ != NULL) guildshop_->::DB_C_GuildShop::Clear();
  _clear_bit(15);
}
inline const ::DB_C_GuildShop& DB_C_Guild::guildshop() const {
  return guildshop_ != NULL ? *guildshop_ : *default_instance_->guildshop_;
}
inline ::DB_C_GuildShop* DB_C_Guild::mutable_guildshop() {
  _set_bit(15);
  if (guildshop_ == NULL) guildshop_ = new ::DB_C_GuildShop;
  return guildshop_;
}

// optional int32 totalBldValue = 17;
inline bool DB_C_Guild::has_totalbldvalue() const {
  return _has_bit(16);
}
inline void DB_C_Guild::clear_totalbldvalue() {
  totalbldvalue_ = 0;
  _clear_bit(16);
}
inline ::google::protobuf::int32 DB_C_Guild::totalbldvalue() const {
  return totalbldvalue_;
}
inline void DB_C_Guild::set_totalbldvalue(::google::protobuf::int32 value) {
  _set_bit(16);
  totalbldvalue_ = value;
}

// repeated .DB_C_GuildLog coinLog = 18;
inline int DB_C_Guild::coinlog_size() const {
  return coinlog_.size();
}
inline void DB_C_Guild::clear_coinlog() {
  coinlog_.Clear();
}
inline const ::google::protobuf::RepeatedPtrField< ::DB_C_GuildLog >&
DB_C_Guild::coinlog() const {
  return coinlog_;
}
inline ::google::protobuf::RepeatedPtrField< ::DB_C_GuildLog >*
DB_C_Guild::mutable_coinlog() {
  return &coinlog_;
}
inline const ::DB_C_GuildLog& DB_C_Guild::coinlog(int index) const {
  return coinlog_.Get(index);
}
inline ::DB_C_GuildLog* DB_C_Guild::mutable_coinlog(int index) {
  return coinlog_.Mutable(index);
}
inline ::DB_C_GuildLog* DB_C_Guild::add_coinlog() {
  return coinlog_.Add();
}

// optional int32 lastchgtime = 19;
inline bool DB_C_Guild::has_lastchgtime() const {
  return _has_bit(18);
}
inline void DB_C_Guild::clear_lastchgtime() {
  lastchgtime_ = 0;
  _clear_bit(18);
}
inline ::google::protobuf::int32 DB_C_Guild::lastchgtime() const {
  return lastchgtime_;
}
inline void DB_C_Guild::set_lastchgtime(::google::protobuf::int32 value) {
  _set_bit(18);
  lastchgtime_ = value;
}

// optional int32 dayKickUserCnt = 20;
inline bool DB_C_Guild::has_daykickusercnt() const {
  return _has_bit(19);
}
inline void DB_C_Guild::clear_daykickusercnt() {
  daykickusercnt_ = 0;
  _clear_bit(19);
}
inline ::google::protobuf::int32 DB_C_Guild::daykickusercnt() const {
  return daykickusercnt_;
}
inline void DB_C_Guild::set_daykickusercnt(::google::protobuf::int32 value) {
  _set_bit(19);
  daykickusercnt_ = value;
}

// optional int32 dayEnterCnt = 21;
inline bool DB_C_Guild::has_dayentercnt() const {
  return _has_bit(20);
}
inline void DB_C_Guild::clear_dayentercnt() {
  dayentercnt_ = 0;
  _clear_bit(20);
}
inline ::google::protobuf::int32 DB_C_Guild::dayentercnt() const {
  return dayentercnt_;
}
inline void DB_C_Guild::set_dayentercnt(::google::protobuf::int32 value) {
  _set_bit(20);
  dayentercnt_ = value;
}

// optional .DB_C_GuildBtl btlInfo = 22;
inline bool DB_C_Guild::has_btlinfo() const {
  return _has_bit(21);
}
inline void DB_C_Guild::clear_btlinfo() {
  if (btlinfo_ != NULL) btlinfo_->::DB_C_GuildBtl::Clear();
  _clear_bit(21);
}
inline const ::DB_C_GuildBtl& DB_C_Guild::btlinfo() const {
  return btlinfo_ != NULL ? *btlinfo_ : *default_instance_->btlinfo_;
}
inline ::DB_C_GuildBtl* DB_C_Guild::mutable_btlinfo() {
  _set_bit(21);
  if (btlinfo_ == NULL) btlinfo_ = new ::DB_C_GuildBtl;
  return btlinfo_;
}

// repeated .DB_C_GuildStorage storage = 23;
inline int DB_C_Guild::storage_size() const {
  return storage_.size();
}
inline void DB_C_Guild::clear_storage() {
  storage_.Clear();
}
inline const ::google::protobuf::RepeatedPtrField< ::DB_C_GuildStorage >&
DB_C_Guild::storage() const {
  return storage_;
}
inline ::google::protobuf::RepeatedPtrField< ::DB_C_GuildStorage >*
DB_C_Guild::mutable_storage() {
  return &storage_;
}
inline const ::DB_C_GuildStorage& DB_C_Guild::storage(int index) const {
  return storage_.Get(index);
}
inline ::DB_C_GuildStorage* DB_C_Guild::mutable_storage(int index) {
  return storage_.Mutable(index);
}
inline ::DB_C_GuildStorage* DB_C_Guild::add_storage() {
  return storage_.Add();
}

// repeated .DB_C_GuildLog rewardLog = 24;
inline int DB_C_Guild::rewardlog_size() const {
  return rewardlog_.size();
}
inline void DB_C_Guild::clear_rewardlog() {
  rewardlog_.Clear();
}
inline const ::google::protobuf::RepeatedPtrField< ::DB_C_GuildLog >&
DB_C_Guild::rewardlog() const {
  return rewardlog_;
}
inline ::google::protobuf::RepeatedPtrField< ::DB_C_GuildLog >*
DB_C_Guild::mutable_rewardlog() {
  return &rewardlog_;
}
inline const ::DB_C_GuildLog& DB_C_Guild::rewardlog(int index) const {
  return rewardlog_.Get(index);
}
inline ::DB_C_GuildLog* DB_C_Guild::mutable_rewardlog(int index) {
  return rewardlog_.Mutable(index);
}
inline ::DB_C_GuildLog* DB_C_Guild::add_rewardlog() {
  return rewardlog_.Add();
}

// optional .DB_GVE_City gveMsg = 25;
inline bool DB_C_Guild::has_gvemsg() const {
  return _has_bit(24);
}
inline void DB_C_Guild::clear_gvemsg() {
  if (gvemsg_ != NULL) gvemsg_->::DB_GVE_City::Clear();
  _clear_bit(24);
}
inline const ::DB_GVE_City& DB_C_Guild::gvemsg() const {
  return gvemsg_ != NULL ? *gvemsg_ : *default_instance_->gvemsg_;
}
inline ::DB_GVE_City* DB_C_Guild::mutable_gvemsg() {
  _set_bit(24);
  if (gvemsg_ == NULL) gvemsg_ = new ::DB_GVE_City;
  return gvemsg_;
}

// optional .DB_C_GVG_Msg gvgMsg = 26;
inline bool DB_C_Guild::has_gvgmsg() const {
  return _has_bit(25);
}
inline void DB_C_Guild::clear_gvgmsg() {
  if (gvgmsg_ != NULL) gvgmsg_->::DB_C_GVG_Msg::Clear();
  _clear_bit(25);
}
inline const ::DB_C_GVG_Msg& DB_C_Guild::gvgmsg() const {
  return gvgmsg_ != NULL ? *gvgmsg_ : *default_instance_->gvgmsg_;
}
inline ::DB_C_GVG_Msg* DB_C_Guild::mutable_gvgmsg() {
  _set_bit(25);
  if (gvgmsg_ == NULL) gvgmsg_ = new ::DB_C_GVG_Msg;
  return gvgmsg_;
}

// optional int64 delateID = 27;
inline bool DB_C_Guild::has_delateid() const {
  return _has_bit(26);
}
inline void DB_C_Guild::clear_delateid() {
  delateid_ = GOOGLE_LONGLONG(0);
  _clear_bit(26);
}
inline ::google::protobuf::int64 DB_C_Guild::delateid() const {
  return delateid_;
}
inline void DB_C_Guild::set_delateid(::google::protobuf::int64 value) {
  _set_bit(26);
  delateid_ = value;
}

// optional int32 leagueActiveID = 28 [default = 0];
inline bool DB_C_Guild::has_leagueactiveid() const {
  return _has_bit(27);
}
inline void DB_C_Guild::clear_leagueactiveid() {
  leagueactiveid_ = 0;
  _clear_bit(27);
}
inline ::google::protobuf::int32 DB_C_Guild::leagueactiveid() const {
  return leagueactiveid_;
}
inline void DB_C_Guild::set_leagueactiveid(::google::protobuf::int32 value) {
  _set_bit(27);
  leagueactiveid_ = value;
}

// optional int32 leaguePoint = 29 [default = 0];
inline bool DB_C_Guild::has_leaguepoint() const {
  return _has_bit(28);
}
inline void DB_C_Guild::clear_leaguepoint() {
  leaguepoint_ = 0;
  _clear_bit(28);
}
inline ::google::protobuf::int32 DB_C_Guild::leaguepoint() const {
  return leaguepoint_;
}
inline void DB_C_Guild::set_leaguepoint(::google::protobuf::int32 value) {
  _set_bit(28);
  leaguepoint_ = value;
}

// repeated int64 leagueList = 30;
inline int DB_C_Guild::leaguelist_size() const {
  return leaguelist_.size();
}
inline void DB_C_Guild::clear_leaguelist() {
  leaguelist_.Clear();
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
DB_C_Guild::leaguelist() const {
  return leaguelist_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
DB_C_Guild::mutable_leaguelist() {
  return &leaguelist_;
}
inline ::google::protobuf::int64 DB_C_Guild::leaguelist(int index) const {
  return leaguelist_.Get(index);
}
inline void DB_C_Guild::set_leaguelist(int index, ::google::protobuf::int64 value) {
  leaguelist_.Set(index, value);
}
inline void DB_C_Guild::add_leaguelist(::google::protobuf::int64 value) {
  leaguelist_.Add(value);
}

// optional int64 leagueLeaderUID = 31;
inline bool DB_C_Guild::has_leagueleaderuid() const {
  return _has_bit(30);
}
inline void DB_C_Guild::clear_leagueleaderuid() {
  leagueleaderuid_ = GOOGLE_LONGLONG(0);
  _clear_bit(30);
}
inline ::google::protobuf::int64 DB_C_Guild::leagueleaderuid() const {
  return leagueleaderuid_;
}
inline void DB_C_Guild::set_leagueleaderuid(::google::protobuf::int64 value) {
  _set_bit(30);
  leagueleaderuid_ = value;
}

// optional int32 chgLeaderTM = 32;
inline bool DB_C_Guild::has_chgleadertm() const {
  return _has_bit(31);
}
inline void DB_C_Guild::clear_chgleadertm() {
  chgleadertm_ = 0;
  _clear_bit(31);
}
inline ::google::protobuf::int32 DB_C_Guild::chgleadertm() const {
  return chgleadertm_;
}
inline void DB_C_Guild::set_chgleadertm(::google::protobuf::int32 value) {
  _set_bit(31);
  chgleadertm_ = value;
}

// optional .DB_C_GuildRedEnvelope redEnvelopeInfo = 33;
inline bool DB_C_Guild::has_redenvelopeinfo() const {
  return _has_bit(32);
}
inline void DB_C_Guild::clear_redenvelopeinfo() {
  if (redenvelopeinfo_ != NULL) redenvelopeinfo_->::DB_C_GuildRedEnvelope::Clear();
  _clear_bit(32);
}
inline const ::DB_C_GuildRedEnvelope& DB_C_Guild::redenvelopeinfo() const {
  return redenvelopeinfo_ != NULL ? *redenvelopeinfo_ : *default_instance_->redenvelopeinfo_;
}
inline ::DB_C_GuildRedEnvelope* DB_C_Guild::mutable_redenvelopeinfo() {
  _set_bit(32);
  if (redenvelopeinfo_ == NULL) redenvelopeinfo_ = new ::DB_C_GuildRedEnvelope;
  return redenvelopeinfo_;
}

// -------------------------------------------------------------------

// DB_C_GuildList

// required int32 key = 1;
inline bool DB_C_GuildList::has_key() const {
  return _has_bit(0);
}
inline void DB_C_GuildList::clear_key() {
  key_ = 0;
  _clear_bit(0);
}
inline ::google::protobuf::int32 DB_C_GuildList::key() const {
  return key_;
}
inline void DB_C_GuildList::set_key(::google::protobuf::int32 value) {
  _set_bit(0);
  key_ = value;
}

// required int32 region = 2;
inline bool DB_C_GuildList::has_region() const {
  return _has_bit(1);
}
inline void DB_C_GuildList::clear_region() {
  region_ = 0;
  _clear_bit(1);
}
inline ::google::protobuf::int32 DB_C_GuildList::region() const {
  return region_;
}
inline void DB_C_GuildList::set_region(::google::protobuf::int32 value) {
  _set_bit(1);
  region_ = value;
}

// required int32 index = 3;
inline bool DB_C_GuildList::has_index() const {
  return _has_bit(2);
}
inline void DB_C_GuildList::clear_index() {
  index_ = 0;
  _clear_bit(2);
}
inline ::google::protobuf::int32 DB_C_GuildList::index() const {
  return index_;
}
inline void DB_C_GuildList::set_index(::google::protobuf::int32 value) {
  _set_bit(2);
  index_ = value;
}

// optional int64 ltSaveRevision = 4 [default = 0];
inline bool DB_C_GuildList::has_ltsaverevision() const {
  return _has_bit(3);
}
inline void DB_C_GuildList::clear_ltsaverevision() {
  ltsaverevision_ = GOOGLE_LONGLONG(0);
  _clear_bit(3);
}
inline ::google::protobuf::int64 DB_C_GuildList::ltsaverevision() const {
  return ltsaverevision_;
}
inline void DB_C_GuildList::set_ltsaverevision(::google::protobuf::int64 value) {
  _set_bit(3);
  ltsaverevision_ = value;
}

// repeated .DB_C_Guild guild = 5;
inline int DB_C_GuildList::guild_size() const {
  return guild_.size();
}
inline void DB_C_GuildList::clear_guild() {
  guild_.Clear();
}
inline const ::google::protobuf::RepeatedPtrField< ::DB_C_Guild >&
DB_C_GuildList::guild() const {
  return guild_;
}
inline ::google::protobuf::RepeatedPtrField< ::DB_C_Guild >*
DB_C_GuildList::mutable_guild() {
  return &guild_;
}
inline const ::DB_C_Guild& DB_C_GuildList::guild(int index) const {
  return guild_.Get(index);
}
inline ::DB_C_Guild* DB_C_GuildList::mutable_guild(int index) {
  return guild_.Mutable(index);
}
inline ::DB_C_Guild* DB_C_GuildList::add_guild() {
  return guild_.Add();
}

// -------------------------------------------------------------------

// DB_C_GuildBtlGeneral

// optional int32 nGeneralID = 1;
inline bool DB_C_GuildBtlGeneral::has_ngeneralid() const {
  return _has_bit(0);
}
inline void DB_C_GuildBtlGeneral::clear_ngeneralid() {
  ngeneralid_ = 0;
  _clear_bit(0);
}
inline ::google::protobuf::int32 DB_C_GuildBtlGeneral::ngeneralid() const {
  return ngeneralid_;
}
inline void DB_C_GuildBtlGeneral::set_ngeneralid(::google::protobuf::int32 value) {
  _set_bit(0);
  ngeneralid_ = value;
}

// optional int32 nGeneralLvl = 2;
inline bool DB_C_GuildBtlGeneral::has_ngenerallvl() const {
  return _has_bit(1);
}
inline void DB_C_GuildBtlGeneral::clear_ngenerallvl() {
  ngenerallvl_ = 0;
  _clear_bit(1);
}
inline ::google::protobuf::int32 DB_C_GuildBtlGeneral::ngenerallvl() const {
  return ngenerallvl_;
}
inline void DB_C_GuildBtlGeneral::set_ngenerallvl(::google::protobuf::int32 value) {
  _set_bit(1);
  ngenerallvl_ = value;
}

// optional int32 nGeneralTrainLvl = 3;
inline bool DB_C_GuildBtlGeneral::has_ngeneraltrainlvl() const {
  return _has_bit(2);
}
inline void DB_C_GuildBtlGeneral::clear_ngeneraltrainlvl() {
  ngeneraltrainlvl_ = 0;
  _clear_bit(2);
}
inline ::google::protobuf::int32 DB_C_GuildBtlGeneral::ngeneraltrainlvl() const {
  return ngeneraltrainlvl_;
}
inline void DB_C_GuildBtlGeneral::set_ngeneraltrainlvl(::google::protobuf::int32 value) {
  _set_bit(2);
  ngeneraltrainlvl_ = value;
}

// optional int32 nGeneralAtk = 4;
inline bool DB_C_GuildBtlGeneral::has_ngeneralatk() const {
  return _has_bit(3);
}
inline void DB_C_GuildBtlGeneral::clear_ngeneralatk() {
  ngeneralatk_ = 0;
  _clear_bit(3);
}
inline ::google::protobuf::int32 DB_C_GuildBtlGeneral::ngeneralatk() const {
  return ngeneralatk_;
}
inline void DB_C_GuildBtlGeneral::set_ngeneralatk(::google::protobuf::int32 value) {
  _set_bit(3);
  ngeneralatk_ = value;
}

// optional int32 nGeneralDef = 5;
inline bool DB_C_GuildBtlGeneral::has_ngeneraldef() const {
  return _has_bit(4);
}
inline void DB_C_GuildBtlGeneral::clear_ngeneraldef() {
  ngeneraldef_ = 0;
  _clear_bit(4);
}
inline ::google::protobuf::int32 DB_C_GuildBtlGeneral::ngeneraldef() const {
  return ngeneraldef_;
}
inline void DB_C_GuildBtlGeneral::set_ngeneraldef(::google::protobuf::int32 value) {
  _set_bit(4);
  ngeneraldef_ = value;
}

// optional int32 nGeneralHP = 6;
inline bool DB_C_GuildBtlGeneral::has_ngeneralhp() const {
  return _has_bit(5);
}
inline void DB_C_GuildBtlGeneral::clear_ngeneralhp() {
  ngeneralhp_ = 0;
  _clear_bit(5);
}
inline ::google::protobuf::int32 DB_C_GuildBtlGeneral::ngeneralhp() const {
  return ngeneralhp_;
}
inline void DB_C_GuildBtlGeneral::set_ngeneralhp(::google::protobuf::int32 value) {
  _set_bit(5);
  ngeneralhp_ = value;
}

// optional int32 nGeneralCrt = 7;
inline bool DB_C_GuildBtlGeneral::has_ngeneralcrt() const {
  return _has_bit(6);
}
inline void DB_C_GuildBtlGeneral::clear_ngeneralcrt() {
  ngeneralcrt_ = 0;
  _clear_bit(6);
}
inline ::google::protobuf::int32 DB_C_GuildBtlGeneral::ngeneralcrt() const {
  return ngeneralcrt_;
}
inline void DB_C_GuildBtlGeneral::set_ngeneralcrt(::google::protobuf::int32 value) {
  _set_bit(6);
  ngeneralcrt_ = value;
}

// optional int32 nGeneralScore = 8;
inline bool DB_C_GuildBtlGeneral::has_ngeneralscore() const {
  return _has_bit(7);
}
inline void DB_C_GuildBtlGeneral::clear_ngeneralscore() {
  ngeneralscore_ = 0;
  _clear_bit(7);
}
inline ::google::protobuf::int32 DB_C_GuildBtlGeneral::ngeneralscore() const {
  return ngeneralscore_;
}
inline void DB_C_GuildBtlGeneral::set_ngeneralscore(::google::protobuf::int32 value) {
  _set_bit(7);
  ngeneralscore_ = value;
}

// repeated .DB_C_PVEFightMH listGeneralMH = 9;
inline int DB_C_GuildBtlGeneral::listgeneralmh_size() const {
  return listgeneralmh_.size();
}
inline void DB_C_GuildBtlGeneral::clear_listgeneralmh() {
  listgeneralmh_.Clear();
}
inline const ::google::protobuf::RepeatedPtrField< ::DB_C_PVEFightMH >&
DB_C_GuildBtlGeneral::listgeneralmh() const {
  return listgeneralmh_;
}
inline ::google::protobuf::RepeatedPtrField< ::DB_C_PVEFightMH >*
DB_C_GuildBtlGeneral::mutable_listgeneralmh() {
  return &listgeneralmh_;
}
inline const ::DB_C_PVEFightMH& DB_C_GuildBtlGeneral::listgeneralmh(int index) const {
  return listgeneralmh_.Get(index);
}
inline ::DB_C_PVEFightMH* DB_C_GuildBtlGeneral::mutable_listgeneralmh(int index) {
  return listgeneralmh_.Mutable(index);
}
inline ::DB_C_PVEFightMH* DB_C_GuildBtlGeneral::add_listgeneralmh() {
  return listgeneralmh_.Add();
}

// -------------------------------------------------------------------

// DB_C_PVEFightMH

// optional int32 nMHID = 1;
inline bool DB_C_PVEFightMH::has_nmhid() const {
  return _has_bit(0);
}
inline void DB_C_PVEFightMH::clear_nmhid() {
  nmhid_ = 0;
  _clear_bit(0);
}
inline ::google::protobuf::int32 DB_C_PVEFightMH::nmhid() const {
  return nmhid_;
}
inline void DB_C_PVEFightMH::set_nmhid(::google::protobuf::int32 value) {
  _set_bit(0);
  nmhid_ = value;
}

// optional int32 nMHLv = 2;
inline bool DB_C_PVEFightMH::has_nmhlv() const {
  return _has_bit(1);
}
inline void DB_C_PVEFightMH::clear_nmhlv() {
  nmhlv_ = 0;
  _clear_bit(1);
}
inline ::google::protobuf::int32 DB_C_PVEFightMH::nmhlv() const {
  return nmhlv_;
}
inline void DB_C_PVEFightMH::set_nmhlv(::google::protobuf::int32 value) {
  _set_bit(1);
  nmhlv_ = value;
}

// -------------------------------------------------------------------

// DB_C_GuildBtlUser

// optional string userID = 1;
inline bool DB_C_GuildBtlUser::has_userid() const {
  return _has_bit(0);
}
inline void DB_C_GuildBtlUser::clear_userid() {
  if (userid_ != &_default_userid_) {
    userid_->clear();
  }
  _clear_bit(0);
}
inline const ::std::string& DB_C_GuildBtlUser::userid() const {
  return *userid_;
}
inline void DB_C_GuildBtlUser::set_userid(const ::std::string& value) {
  _set_bit(0);
  if (userid_ == &_default_userid_) {
    userid_ = new ::std::string;
  }
  userid_->assign(value);
}
inline void DB_C_GuildBtlUser::set_userid(const char* value) {
  _set_bit(0);
  if (userid_ == &_default_userid_) {
    userid_ = new ::std::string;
  }
  userid_->assign(value);
}
inline void DB_C_GuildBtlUser::set_userid(const char* value, size_t size) {
  _set_bit(0);
  if (userid_ == &_default_userid_) {
    userid_ = new ::std::string;
  }
  userid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* DB_C_GuildBtlUser::mutable_userid() {
  _set_bit(0);
  if (userid_ == &_default_userid_) {
    userid_ = new ::std::string;
  }
  return userid_;
}

// optional string name = 2;
inline bool DB_C_GuildBtlUser::has_name() const {
  return _has_bit(1);
}
inline void DB_C_GuildBtlUser::clear_name() {
  if (name_ != &_default_name_) {
    name_->clear();
  }
  _clear_bit(1);
}
inline const ::std::string& DB_C_GuildBtlUser::name() const {
  return *name_;
}
inline void DB_C_GuildBtlUser::set_name(const ::std::string& value) {
  _set_bit(1);
  if (name_ == &_default_name_) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void DB_C_GuildBtlUser::set_name(const char* value) {
  _set_bit(1);
  if (name_ == &_default_name_) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void DB_C_GuildBtlUser::set_name(const char* value, size_t size) {
  _set_bit(1);
  if (name_ == &_default_name_) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* DB_C_GuildBtlUser::mutable_name() {
  _set_bit(1);
  if (name_ == &_default_name_) {
    name_ = new ::std::string;
  }
  return name_;
}

// optional string pic = 3;
inline bool DB_C_GuildBtlUser::has_pic() const {
  return _has_bit(2);
}
inline void DB_C_GuildBtlUser::clear_pic() {
  if (pic_ != &_default_pic_) {
    pic_->clear();
  }
  _clear_bit(2);
}
inline const ::std::string& DB_C_GuildBtlUser::pic() const {
  return *pic_;
}
inline void DB_C_GuildBtlUser::set_pic(const ::std::string& value) {
  _set_bit(2);
  if (pic_ == &_default_pic_) {
    pic_ = new ::std::string;
  }
  pic_->assign(value);
}
inline void DB_C_GuildBtlUser::set_pic(const char* value) {
  _set_bit(2);
  if (pic_ == &_default_pic_) {
    pic_ = new ::std::string;
  }
  pic_->assign(value);
}
inline void DB_C_GuildBtlUser::set_pic(const char* value, size_t size) {
  _set_bit(2);
  if (pic_ == &_default_pic_) {
    pic_ = new ::std::string;
  }
  pic_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* DB_C_GuildBtlUser::mutable_pic() {
  _set_bit(2);
  if (pic_ == &_default_pic_) {
    pic_ = new ::std::string;
  }
  return pic_;
}

// optional int32 level = 6 [default = 0];
inline bool DB_C_GuildBtlUser::has_level() const {
  return _has_bit(3);
}
inline void DB_C_GuildBtlUser::clear_level() {
  level_ = 0;
  _clear_bit(3);
}
inline ::google::protobuf::int32 DB_C_GuildBtlUser::level() const {
  return level_;
}
inline void DB_C_GuildBtlUser::set_level(::google::protobuf::int32 value) {
  _set_bit(3);
  level_ = value;
}

// optional int32 combatValue = 7 [default = 0];
inline bool DB_C_GuildBtlUser::has_combatvalue() const {
  return _has_bit(4);
}
inline void DB_C_GuildBtlUser::clear_combatvalue() {
  combatvalue_ = 0;
  _clear_bit(4);
}
inline ::google::protobuf::int32 DB_C_GuildBtlUser::combatvalue() const {
  return combatvalue_;
}
inline void DB_C_GuildBtlUser::set_combatvalue(::google::protobuf::int32 value) {
  _set_bit(4);
  combatvalue_ = value;
}

// optional int32 addHPPct = 8;
inline bool DB_C_GuildBtlUser::has_addhppct() const {
  return _has_bit(5);
}
inline void DB_C_GuildBtlUser::clear_addhppct() {
  addhppct_ = 0;
  _clear_bit(5);
}
inline ::google::protobuf::int32 DB_C_GuildBtlUser::addhppct() const {
  return addhppct_;
}
inline void DB_C_GuildBtlUser::set_addhppct(::google::protobuf::int32 value) {
  _set_bit(5);
  addhppct_ = value;
}

// optional int32 addAtkPct = 9;
inline bool DB_C_GuildBtlUser::has_addatkpct() const {
  return _has_bit(6);
}
inline void DB_C_GuildBtlUser::clear_addatkpct() {
  addatkpct_ = 0;
  _clear_bit(6);
}
inline ::google::protobuf::int32 DB_C_GuildBtlUser::addatkpct() const {
  return addatkpct_;
}
inline void DB_C_GuildBtlUser::set_addatkpct(::google::protobuf::int32 value) {
  _set_bit(6);
  addatkpct_ = value;
}

// optional int32 winTime = 10 [default = 0];
inline bool DB_C_GuildBtlUser::has_wintime() const {
  return _has_bit(7);
}
inline void DB_C_GuildBtlUser::clear_wintime() {
  wintime_ = 0;
  _clear_bit(7);
}
inline ::google::protobuf::int32 DB_C_GuildBtlUser::wintime() const {
  return wintime_;
}
inline void DB_C_GuildBtlUser::set_wintime(::google::protobuf::int32 value) {
  _set_bit(7);
  wintime_ = value;
}

// optional int32 maxWinTime = 11 [default = 0];
inline bool DB_C_GuildBtlUser::has_maxwintime() const {
  return _has_bit(8);
}
inline void DB_C_GuildBtlUser::clear_maxwintime() {
  maxwintime_ = 0;
  _clear_bit(8);
}
inline ::google::protobuf::int32 DB_C_GuildBtlUser::maxwintime() const {
  return maxwintime_;
}
inline void DB_C_GuildBtlUser::set_maxwintime(::google::protobuf::int32 value) {
  _set_bit(8);
  maxwintime_ = value;
}

// -------------------------------------------------------------------

// DB_C_GuildBtlPosition

// optional int32 nPosX = 1;
inline bool DB_C_GuildBtlPosition::has_nposx() const {
  return _has_bit(0);
}
inline void DB_C_GuildBtlPosition::clear_nposx() {
  nposx_ = 0;
  _clear_bit(0);
}
inline ::google::protobuf::int32 DB_C_GuildBtlPosition::nposx() const {
  return nposx_;
}
inline void DB_C_GuildBtlPosition::set_nposx(::google::protobuf::int32 value) {
  _set_bit(0);
  nposx_ = value;
}

// optional int32 nPosY = 2;
inline bool DB_C_GuildBtlPosition::has_nposy() const {
  return _has_bit(1);
}
inline void DB_C_GuildBtlPosition::clear_nposy() {
  nposy_ = 0;
  _clear_bit(1);
}
inline ::google::protobuf::int32 DB_C_GuildBtlPosition::nposy() const {
  return nposy_;
}
inline void DB_C_GuildBtlPosition::set_nposy(::google::protobuf::int32 value) {
  _set_bit(1);
  nposy_ = value;
}

// -------------------------------------------------------------------

// DB_C_GuildBtlFightUnit

// optional int32 nID = 1;
inline bool DB_C_GuildBtlFightUnit::has_nid() const {
  return _has_bit(0);
}
inline void DB_C_GuildBtlFightUnit::clear_nid() {
  nid_ = 0;
  _clear_bit(0);
}
inline ::google::protobuf::int32 DB_C_GuildBtlFightUnit::nid() const {
  return nid_;
}
inline void DB_C_GuildBtlFightUnit::set_nid(::google::protobuf::int32 value) {
  _set_bit(0);
  nid_ = value;
}

// optional int32 nArmyType = 2;
inline bool DB_C_GuildBtlFightUnit::has_narmytype() const {
  return _has_bit(1);
}
inline void DB_C_GuildBtlFightUnit::clear_narmytype() {
  narmytype_ = 0;
  _clear_bit(1);
}
inline ::google::protobuf::int32 DB_C_GuildBtlFightUnit::narmytype() const {
  return narmytype_;
}
inline void DB_C_GuildBtlFightUnit::set_narmytype(::google::protobuf::int32 value) {
  _set_bit(1);
  narmytype_ = value;
}

// optional int32 nHP = 3;
inline bool DB_C_GuildBtlFightUnit::has_nhp() const {
  return _has_bit(2);
}
inline void DB_C_GuildBtlFightUnit::clear_nhp() {
  nhp_ = 0;
  _clear_bit(2);
}
inline ::google::protobuf::int32 DB_C_GuildBtlFightUnit::nhp() const {
  return nhp_;
}
inline void DB_C_GuildBtlFightUnit::set_nhp(::google::protobuf::int32 value) {
  _set_bit(2);
  nhp_ = value;
}

// optional int32 nGrade = 4;
inline bool DB_C_GuildBtlFightUnit::has_ngrade() const {
  return _has_bit(3);
}
inline void DB_C_GuildBtlFightUnit::clear_ngrade() {
  ngrade_ = 0;
  _clear_bit(3);
}
inline ::google::protobuf::int32 DB_C_GuildBtlFightUnit::ngrade() const {
  return ngrade_;
}
inline void DB_C_GuildBtlFightUnit::set_ngrade(::google::protobuf::int32 value) {
  _set_bit(3);
  ngrade_ = value;
}

// optional int32 nArmyGroup = 5;
inline bool DB_C_GuildBtlFightUnit::has_narmygroup() const {
  return _has_bit(4);
}
inline void DB_C_GuildBtlFightUnit::clear_narmygroup() {
  narmygroup_ = 0;
  _clear_bit(4);
}
inline ::google::protobuf::int32 DB_C_GuildBtlFightUnit::narmygroup() const {
  return narmygroup_;
}
inline void DB_C_GuildBtlFightUnit::set_narmygroup(::google::protobuf::int32 value) {
  _set_bit(4);
  narmygroup_ = value;
}

// optional int32 nRestframe = 6;
inline bool DB_C_GuildBtlFightUnit::has_nrestframe() const {
  return _has_bit(5);
}
inline void DB_C_GuildBtlFightUnit::clear_nrestframe() {
  nrestframe_ = 0;
  _clear_bit(5);
}
inline ::google::protobuf::int32 DB_C_GuildBtlFightUnit::nrestframe() const {
  return nrestframe_;
}
inline void DB_C_GuildBtlFightUnit::set_nrestframe(::google::protobuf::int32 value) {
  _set_bit(5);
  nrestframe_ = value;
}

// optional .DB_C_GuildBtlPosition Pos = 7;
inline bool DB_C_GuildBtlFightUnit::has_pos() const {
  return _has_bit(6);
}
inline void DB_C_GuildBtlFightUnit::clear_pos() {
  if (pos_ != NULL) pos_->::DB_C_GuildBtlPosition::Clear();
  _clear_bit(6);
}
inline const ::DB_C_GuildBtlPosition& DB_C_GuildBtlFightUnit::pos() const {
  return pos_ != NULL ? *pos_ : *default_instance_->pos_;
}
inline ::DB_C_GuildBtlPosition* DB_C_GuildBtlFightUnit::mutable_pos() {
  _set_bit(6);
  if (pos_ == NULL) pos_ = new ::DB_C_GuildBtlPosition;
  return pos_;
}

// optional int32 nMaxHP = 8;
inline bool DB_C_GuildBtlFightUnit::has_nmaxhp() const {
  return _has_bit(7);
}
inline void DB_C_GuildBtlFightUnit::clear_nmaxhp() {
  nmaxhp_ = 0;
  _clear_bit(7);
}
inline ::google::protobuf::int32 DB_C_GuildBtlFightUnit::nmaxhp() const {
  return nmaxhp_;
}
inline void DB_C_GuildBtlFightUnit::set_nmaxhp(::google::protobuf::int32 value) {
  _set_bit(7);
  nmaxhp_ = value;
}

// optional int32 nHeroGrade = 9;
inline bool DB_C_GuildBtlFightUnit::has_nherograde() const {
  return _has_bit(8);
}
inline void DB_C_GuildBtlFightUnit::clear_nherograde() {
  nherograde_ = 0;
  _clear_bit(8);
}
inline ::google::protobuf::int32 DB_C_GuildBtlFightUnit::nherograde() const {
  return nherograde_;
}
inline void DB_C_GuildBtlFightUnit::set_nherograde(::google::protobuf::int32 value) {
  _set_bit(8);
  nherograde_ = value;
}

// optional int32 nHeroLV = 10;
inline bool DB_C_GuildBtlFightUnit::has_nherolv() const {
  return _has_bit(9);
}
inline void DB_C_GuildBtlFightUnit::clear_nherolv() {
  nherolv_ = 0;
  _clear_bit(9);
}
inline ::google::protobuf::int32 DB_C_GuildBtlFightUnit::nherolv() const {
  return nherolv_;
}
inline void DB_C_GuildBtlFightUnit::set_nherolv(::google::protobuf::int32 value) {
  _set_bit(9);
  nherolv_ = value;
}

// -------------------------------------------------------------------

// DB_C_GuildBtlArmyAtkProp

// optional int32 nArmyType = 1;
inline bool DB_C_GuildBtlArmyAtkProp::has_narmytype() const {
  return _has_bit(0);
}
inline void DB_C_GuildBtlArmyAtkProp::clear_narmytype() {
  narmytype_ = 0;
  _clear_bit(0);
}
inline ::google::protobuf::int32 DB_C_GuildBtlArmyAtkProp::narmytype() const {
  return narmytype_;
}
inline void DB_C_GuildBtlArmyAtkProp::set_narmytype(::google::protobuf::int32 value) {
  _set_bit(0);
  narmytype_ = value;
}

// optional int32 nHP = 2;
inline bool DB_C_GuildBtlArmyAtkProp::has_nhp() const {
  return _has_bit(1);
}
inline void DB_C_GuildBtlArmyAtkProp::clear_nhp() {
  nhp_ = 0;
  _clear_bit(1);
}
inline ::google::protobuf::int32 DB_C_GuildBtlArmyAtkProp::nhp() const {
  return nhp_;
}
inline void DB_C_GuildBtlArmyAtkProp::set_nhp(::google::protobuf::int32 value) {
  _set_bit(1);
  nhp_ = value;
}

// optional int32 nDamage = 3;
inline bool DB_C_GuildBtlArmyAtkProp::has_ndamage() const {
  return _has_bit(2);
}
inline void DB_C_GuildBtlArmyAtkProp::clear_ndamage() {
  ndamage_ = 0;
  _clear_bit(2);
}
inline ::google::protobuf::int32 DB_C_GuildBtlArmyAtkProp::ndamage() const {
  return ndamage_;
}
inline void DB_C_GuildBtlArmyAtkProp::set_ndamage(::google::protobuf::int32 value) {
  _set_bit(2);
  ndamage_ = value;
}

// optional int32 nDamageBase = 4;
inline bool DB_C_GuildBtlArmyAtkProp::has_ndamagebase() const {
  return _has_bit(3);
}
inline void DB_C_GuildBtlArmyAtkProp::clear_ndamagebase() {
  ndamagebase_ = 0;
  _clear_bit(3);
}
inline ::google::protobuf::int32 DB_C_GuildBtlArmyAtkProp::ndamagebase() const {
  return ndamagebase_;
}
inline void DB_C_GuildBtlArmyAtkProp::set_ndamagebase(::google::protobuf::int32 value) {
  _set_bit(3);
  ndamagebase_ = value;
}

// optional int32 nDamagePec = 5;
inline bool DB_C_GuildBtlArmyAtkProp::has_ndamagepec() const {
  return _has_bit(4);
}
inline void DB_C_GuildBtlArmyAtkProp::clear_ndamagepec() {
  ndamagepec_ = 0;
  _clear_bit(4);
}
inline ::google::protobuf::int32 DB_C_GuildBtlArmyAtkProp::ndamagepec() const {
  return ndamagepec_;
}
inline void DB_C_GuildBtlArmyAtkProp::set_ndamagepec(::google::protobuf::int32 value) {
  _set_bit(4);
  ndamagepec_ = value;
}

// optional int32 nRange = 6;
inline bool DB_C_GuildBtlArmyAtkProp::has_nrange() const {
  return _has_bit(5);
}
inline void DB_C_GuildBtlArmyAtkProp::clear_nrange() {
  nrange_ = 0;
  _clear_bit(5);
}
inline ::google::protobuf::int32 DB_C_GuildBtlArmyAtkProp::nrange() const {
  return nrange_;
}
inline void DB_C_GuildBtlArmyAtkProp::set_nrange(::google::protobuf::int32 value) {
  _set_bit(5);
  nrange_ = value;
}

// optional int32 nCrt = 7;
inline bool DB_C_GuildBtlArmyAtkProp::has_ncrt() const {
  return _has_bit(6);
}
inline void DB_C_GuildBtlArmyAtkProp::clear_ncrt() {
  ncrt_ = 0;
  _clear_bit(6);
}
inline ::google::protobuf::int32 DB_C_GuildBtlArmyAtkProp::ncrt() const {
  return ncrt_;
}
inline void DB_C_GuildBtlArmyAtkProp::set_ncrt(::google::protobuf::int32 value) {
  _set_bit(6);
  ncrt_ = value;
}

// optional int32 nSpeed = 8;
inline bool DB_C_GuildBtlArmyAtkProp::has_nspeed() const {
  return _has_bit(7);
}
inline void DB_C_GuildBtlArmyAtkProp::clear_nspeed() {
  nspeed_ = 0;
  _clear_bit(7);
}
inline ::google::protobuf::int32 DB_C_GuildBtlArmyAtkProp::nspeed() const {
  return nspeed_;
}
inline void DB_C_GuildBtlArmyAtkProp::set_nspeed(::google::protobuf::int32 value) {
  _set_bit(7);
  nspeed_ = value;
}

// optional int32 nTurnSpeed = 9;
inline bool DB_C_GuildBtlArmyAtkProp::has_nturnspeed() const {
  return _has_bit(8);
}
inline void DB_C_GuildBtlArmyAtkProp::clear_nturnspeed() {
  nturnspeed_ = 0;
  _clear_bit(8);
}
inline ::google::protobuf::int32 DB_C_GuildBtlArmyAtkProp::nturnspeed() const {
  return nturnspeed_;
}
inline void DB_C_GuildBtlArmyAtkProp::set_nturnspeed(::google::protobuf::int32 value) {
  _set_bit(8);
  nturnspeed_ = value;
}

// repeated int32 nRestraint = 10;
inline int DB_C_GuildBtlArmyAtkProp::nrestraint_size() const {
  return nrestraint_.size();
}
inline void DB_C_GuildBtlArmyAtkProp::clear_nrestraint() {
  nrestraint_.Clear();
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
DB_C_GuildBtlArmyAtkProp::nrestraint() const {
  return nrestraint_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
DB_C_GuildBtlArmyAtkProp::mutable_nrestraint() {
  return &nrestraint_;
}
inline ::google::protobuf::int32 DB_C_GuildBtlArmyAtkProp::nrestraint(int index) const {
  return nrestraint_.Get(index);
}
inline void DB_C_GuildBtlArmyAtkProp::set_nrestraint(int index, ::google::protobuf::int32 value) {
  nrestraint_.Set(index, value);
}
inline void DB_C_GuildBtlArmyAtkProp::add_nrestraint(::google::protobuf::int32 value) {
  nrestraint_.Add(value);
}

// optional int32 nCrtDamage = 11;
inline bool DB_C_GuildBtlArmyAtkProp::has_ncrtdamage() const {
  return _has_bit(10);
}
inline void DB_C_GuildBtlArmyAtkProp::clear_ncrtdamage() {
  ncrtdamage_ = 0;
  _clear_bit(10);
}
inline ::google::protobuf::int32 DB_C_GuildBtlArmyAtkProp::ncrtdamage() const {
  return ncrtdamage_;
}
inline void DB_C_GuildBtlArmyAtkProp::set_ncrtdamage(::google::protobuf::int32 value) {
  _set_bit(10);
  ncrtdamage_ = value;
}

// optional int32 nCrtDef = 12;
inline bool DB_C_GuildBtlArmyAtkProp::has_ncrtdef() const {
  return _has_bit(11);
}
inline void DB_C_GuildBtlArmyAtkProp::clear_ncrtdef() {
  ncrtdef_ = 0;
  _clear_bit(11);
}
inline ::google::protobuf::int32 DB_C_GuildBtlArmyAtkProp::ncrtdef() const {
  return ncrtdef_;
}
inline void DB_C_GuildBtlArmyAtkProp::set_ncrtdef(::google::protobuf::int32 value) {
  _set_bit(11);
  ncrtdef_ = value;
}

// optional int32 nDamageDef = 13;
inline bool DB_C_GuildBtlArmyAtkProp::has_ndamagedef() const {
  return _has_bit(12);
}
inline void DB_C_GuildBtlArmyAtkProp::clear_ndamagedef() {
  ndamagedef_ = 0;
  _clear_bit(12);
}
inline ::google::protobuf::int32 DB_C_GuildBtlArmyAtkProp::ndamagedef() const {
  return ndamagedef_;
}
inline void DB_C_GuildBtlArmyAtkProp::set_ndamagedef(::google::protobuf::int32 value) {
  _set_bit(12);
  ndamagedef_ = value;
}

// optional int32 nTotalDamagePct = 14;
inline bool DB_C_GuildBtlArmyAtkProp::has_ntotaldamagepct() const {
  return _has_bit(13);
}
inline void DB_C_GuildBtlArmyAtkProp::clear_ntotaldamagepct() {
  ntotaldamagepct_ = 0;
  _clear_bit(13);
}
inline ::google::protobuf::int32 DB_C_GuildBtlArmyAtkProp::ntotaldamagepct() const {
  return ntotaldamagepct_;
}
inline void DB_C_GuildBtlArmyAtkProp::set_ntotaldamagepct(::google::protobuf::int32 value) {
  _set_bit(13);
  ntotaldamagepct_ = value;
}

// optional int32 nBuffDamagePct = 15;
inline bool DB_C_GuildBtlArmyAtkProp::has_nbuffdamagepct() const {
  return _has_bit(14);
}
inline void DB_C_GuildBtlArmyAtkProp::clear_nbuffdamagepct() {
  nbuffdamagepct_ = 0;
  _clear_bit(14);
}
inline ::google::protobuf::int32 DB_C_GuildBtlArmyAtkProp::nbuffdamagepct() const {
  return nbuffdamagepct_;
}
inline void DB_C_GuildBtlArmyAtkProp::set_nbuffdamagepct(::google::protobuf::int32 value) {
  _set_bit(14);
  nbuffdamagepct_ = value;
}

// optional int32 nRangeBase = 16;
inline bool DB_C_GuildBtlArmyAtkProp::has_nrangebase() const {
  return _has_bit(15);
}
inline void DB_C_GuildBtlArmyAtkProp::clear_nrangebase() {
  nrangebase_ = 0;
  _clear_bit(15);
}
inline ::google::protobuf::int32 DB_C_GuildBtlArmyAtkProp::nrangebase() const {
  return nrangebase_;
}
inline void DB_C_GuildBtlArmyAtkProp::set_nrangebase(::google::protobuf::int32 value) {
  _set_bit(15);
  nrangebase_ = value;
}

// optional int32 nSpeedBase = 17;
inline bool DB_C_GuildBtlArmyAtkProp::has_nspeedbase() const {
  return _has_bit(16);
}
inline void DB_C_GuildBtlArmyAtkProp::clear_nspeedbase() {
  nspeedbase_ = 0;
  _clear_bit(16);
}
inline ::google::protobuf::int32 DB_C_GuildBtlArmyAtkProp::nspeedbase() const {
  return nspeedbase_;
}
inline void DB_C_GuildBtlArmyAtkProp::set_nspeedbase(::google::protobuf::int32 value) {
  _set_bit(16);
  nspeedbase_ = value;
}

// repeated int32 nRestraintdef = 18;
inline int DB_C_GuildBtlArmyAtkProp::nrestraintdef_size() const {
  return nrestraintdef_.size();
}
inline void DB_C_GuildBtlArmyAtkProp::clear_nrestraintdef() {
  nrestraintdef_.Clear();
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
DB_C_GuildBtlArmyAtkProp::nrestraintdef() const {
  return nrestraintdef_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
DB_C_GuildBtlArmyAtkProp::mutable_nrestraintdef() {
  return &nrestraintdef_;
}
inline ::google::protobuf::int32 DB_C_GuildBtlArmyAtkProp::nrestraintdef(int index) const {
  return nrestraintdef_.Get(index);
}
inline void DB_C_GuildBtlArmyAtkProp::set_nrestraintdef(int index, ::google::protobuf::int32 value) {
  nrestraintdef_.Set(index, value);
}
inline void DB_C_GuildBtlArmyAtkProp::add_nrestraintdef(::google::protobuf::int32 value) {
  nrestraintdef_.Add(value);
}

// optional int32 nPropertyDamagePec = 19;
inline bool DB_C_GuildBtlArmyAtkProp::has_npropertydamagepec() const {
  return _has_bit(18);
}
inline void DB_C_GuildBtlArmyAtkProp::clear_npropertydamagepec() {
  npropertydamagepec_ = 0;
  _clear_bit(18);
}
inline ::google::protobuf::int32 DB_C_GuildBtlArmyAtkProp::npropertydamagepec() const {
  return npropertydamagepec_;
}
inline void DB_C_GuildBtlArmyAtkProp::set_npropertydamagepec(::google::protobuf::int32 value) {
  _set_bit(18);
  npropertydamagepec_ = value;
}

// optional int32 nPropertyDamageDefPec = 20;
inline bool DB_C_GuildBtlArmyAtkProp::has_npropertydamagedefpec() const {
  return _has_bit(19);
}
inline void DB_C_GuildBtlArmyAtkProp::clear_npropertydamagedefpec() {
  npropertydamagedefpec_ = 0;
  _clear_bit(19);
}
inline ::google::protobuf::int32 DB_C_GuildBtlArmyAtkProp::npropertydamagedefpec() const {
  return npropertydamagedefpec_;
}
inline void DB_C_GuildBtlArmyAtkProp::set_npropertydamagedefpec(::google::protobuf::int32 value) {
  _set_bit(19);
  npropertydamagedefpec_ = value;
}

// repeated int32 nDefAtkPec = 21;
inline int DB_C_GuildBtlArmyAtkProp::ndefatkpec_size() const {
  return ndefatkpec_.size();
}
inline void DB_C_GuildBtlArmyAtkProp::clear_ndefatkpec() {
  ndefatkpec_.Clear();
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
DB_C_GuildBtlArmyAtkProp::ndefatkpec() const {
  return ndefatkpec_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
DB_C_GuildBtlArmyAtkProp::mutable_ndefatkpec() {
  return &ndefatkpec_;
}
inline ::google::protobuf::int32 DB_C_GuildBtlArmyAtkProp::ndefatkpec(int index) const {
  return ndefatkpec_.Get(index);
}
inline void DB_C_GuildBtlArmyAtkProp::set_ndefatkpec(int index, ::google::protobuf::int32 value) {
  ndefatkpec_.Set(index, value);
}
inline void DB_C_GuildBtlArmyAtkProp::add_ndefatkpec(::google::protobuf::int32 value) {
  ndefatkpec_.Add(value);
}

// repeated int32 nDefCritRate = 22;
inline int DB_C_GuildBtlArmyAtkProp::ndefcritrate_size() const {
  return ndefcritrate_.size();
}
inline void DB_C_GuildBtlArmyAtkProp::clear_ndefcritrate() {
  ndefcritrate_.Clear();
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
DB_C_GuildBtlArmyAtkProp::ndefcritrate() const {
  return ndefcritrate_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
DB_C_GuildBtlArmyAtkProp::mutable_ndefcritrate() {
  return &ndefcritrate_;
}
inline ::google::protobuf::int32 DB_C_GuildBtlArmyAtkProp::ndefcritrate(int index) const {
  return ndefcritrate_.Get(index);
}
inline void DB_C_GuildBtlArmyAtkProp::set_ndefcritrate(int index, ::google::protobuf::int32 value) {
  ndefcritrate_.Set(index, value);
}
inline void DB_C_GuildBtlArmyAtkProp::add_ndefcritrate(::google::protobuf::int32 value) {
  ndefcritrate_.Add(value);
}

// repeated int32 nDefCritRange = 23;
inline int DB_C_GuildBtlArmyAtkProp::ndefcritrange_size() const {
  return ndefcritrange_.size();
}
inline void DB_C_GuildBtlArmyAtkProp::clear_ndefcritrange() {
  ndefcritrange_.Clear();
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
DB_C_GuildBtlArmyAtkProp::ndefcritrange() const {
  return ndefcritrange_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
DB_C_GuildBtlArmyAtkProp::mutable_ndefcritrange() {
  return &ndefcritrange_;
}
inline ::google::protobuf::int32 DB_C_GuildBtlArmyAtkProp::ndefcritrange(int index) const {
  return ndefcritrange_.Get(index);
}
inline void DB_C_GuildBtlArmyAtkProp::set_ndefcritrange(int index, ::google::protobuf::int32 value) {
  ndefcritrange_.Set(index, value);
}
inline void DB_C_GuildBtlArmyAtkProp::add_ndefcritrange(::google::protobuf::int32 value) {
  ndefcritrange_.Add(value);
}

// -------------------------------------------------------------------

// DB_C_GuildBtlAdmiralAdd

// repeated int32 nAddPctFoot = 1;
inline int DB_C_GuildBtlAdmiralAdd::naddpctfoot_size() const {
  return naddpctfoot_.size();
}
inline void DB_C_GuildBtlAdmiralAdd::clear_naddpctfoot() {
  naddpctfoot_.Clear();
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
DB_C_GuildBtlAdmiralAdd::naddpctfoot() const {
  return naddpctfoot_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
DB_C_GuildBtlAdmiralAdd::mutable_naddpctfoot() {
  return &naddpctfoot_;
}
inline ::google::protobuf::int32 DB_C_GuildBtlAdmiralAdd::naddpctfoot(int index) const {
  return naddpctfoot_.Get(index);
}
inline void DB_C_GuildBtlAdmiralAdd::set_naddpctfoot(int index, ::google::protobuf::int32 value) {
  naddpctfoot_.Set(index, value);
}
inline void DB_C_GuildBtlAdmiralAdd::add_naddpctfoot(::google::protobuf::int32 value) {
  naddpctfoot_.Add(value);
}

// repeated int32 nAddPctTank = 2;
inline int DB_C_GuildBtlAdmiralAdd::naddpcttank_size() const {
  return naddpcttank_.size();
}
inline void DB_C_GuildBtlAdmiralAdd::clear_naddpcttank() {
  naddpcttank_.Clear();
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
DB_C_GuildBtlAdmiralAdd::naddpcttank() const {
  return naddpcttank_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
DB_C_GuildBtlAdmiralAdd::mutable_naddpcttank() {
  return &naddpcttank_;
}
inline ::google::protobuf::int32 DB_C_GuildBtlAdmiralAdd::naddpcttank(int index) const {
  return naddpcttank_.Get(index);
}
inline void DB_C_GuildBtlAdmiralAdd::set_naddpcttank(int index, ::google::protobuf::int32 value) {
  naddpcttank_.Set(index, value);
}
inline void DB_C_GuildBtlAdmiralAdd::add_naddpcttank(::google::protobuf::int32 value) {
  naddpcttank_.Add(value);
}

// repeated int32 nAddPctPlane = 3;
inline int DB_C_GuildBtlAdmiralAdd::naddpctplane_size() const {
  return naddpctplane_.size();
}
inline void DB_C_GuildBtlAdmiralAdd::clear_naddpctplane() {
  naddpctplane_.Clear();
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
DB_C_GuildBtlAdmiralAdd::naddpctplane() const {
  return naddpctplane_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
DB_C_GuildBtlAdmiralAdd::mutable_naddpctplane() {
  return &naddpctplane_;
}
inline ::google::protobuf::int32 DB_C_GuildBtlAdmiralAdd::naddpctplane(int index) const {
  return naddpctplane_.Get(index);
}
inline void DB_C_GuildBtlAdmiralAdd::set_naddpctplane(int index, ::google::protobuf::int32 value) {
  naddpctplane_.Set(index, value);
}
inline void DB_C_GuildBtlAdmiralAdd::add_naddpctplane(::google::protobuf::int32 value) {
  naddpctplane_.Add(value);
}

// repeated int32 nAddPctBuild = 4;
inline int DB_C_GuildBtlAdmiralAdd::naddpctbuild_size() const {
  return naddpctbuild_.size();
}
inline void DB_C_GuildBtlAdmiralAdd::clear_naddpctbuild() {
  naddpctbuild_.Clear();
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
DB_C_GuildBtlAdmiralAdd::naddpctbuild() const {
  return naddpctbuild_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
DB_C_GuildBtlAdmiralAdd::mutable_naddpctbuild() {
  return &naddpctbuild_;
}
inline ::google::protobuf::int32 DB_C_GuildBtlAdmiralAdd::naddpctbuild(int index) const {
  return naddpctbuild_.Get(index);
}
inline void DB_C_GuildBtlAdmiralAdd::set_naddpctbuild(int index, ::google::protobuf::int32 value) {
  naddpctbuild_.Set(index, value);
}
inline void DB_C_GuildBtlAdmiralAdd::add_naddpctbuild(::google::protobuf::int32 value) {
  naddpctbuild_.Add(value);
}

// optional .DB_C_GuildBtlGeneral fightGeneral = 5;
inline bool DB_C_GuildBtlAdmiralAdd::has_fightgeneral() const {
  return _has_bit(4);
}
inline void DB_C_GuildBtlAdmiralAdd::clear_fightgeneral() {
  if (fightgeneral_ != NULL) fightgeneral_->::DB_C_GuildBtlGeneral::Clear();
  _clear_bit(4);
}
inline const ::DB_C_GuildBtlGeneral& DB_C_GuildBtlAdmiralAdd::fightgeneral() const {
  return fightgeneral_ != NULL ? *fightgeneral_ : *default_instance_->fightgeneral_;
}
inline ::DB_C_GuildBtlGeneral* DB_C_GuildBtlAdmiralAdd::mutable_fightgeneral() {
  _set_bit(4);
  if (fightgeneral_ == NULL) fightgeneral_ = new ::DB_C_GuildBtlGeneral;
  return fightgeneral_;
}

// -------------------------------------------------------------------

// Pve_GuildBtlHeroSkill

// optional int32 heroId = 1 [default = 0];
inline bool Pve_GuildBtlHeroSkill::has_heroid() const {
  return _has_bit(0);
}
inline void Pve_GuildBtlHeroSkill::clear_heroid() {
  heroid_ = 0;
  _clear_bit(0);
}
inline ::google::protobuf::int32 Pve_GuildBtlHeroSkill::heroid() const {
  return heroid_;
}
inline void Pve_GuildBtlHeroSkill::set_heroid(::google::protobuf::int32 value) {
  _set_bit(0);
  heroid_ = value;
}

// optional int32 level = 2 [default = 0];
inline bool Pve_GuildBtlHeroSkill::has_level() const {
  return _has_bit(1);
}
inline void Pve_GuildBtlHeroSkill::clear_level() {
  level_ = 0;
  _clear_bit(1);
}
inline ::google::protobuf::int32 Pve_GuildBtlHeroSkill::level() const {
  return level_;
}
inline void Pve_GuildBtlHeroSkill::set_level(::google::protobuf::int32 value) {
  _set_bit(1);
  level_ = value;
}

// optional int32 skillID1 = 3 [default = 0];
inline bool Pve_GuildBtlHeroSkill::has_skillid1() const {
  return _has_bit(2);
}
inline void Pve_GuildBtlHeroSkill::clear_skillid1() {
  skillid1_ = 0;
  _clear_bit(2);
}
inline ::google::protobuf::int32 Pve_GuildBtlHeroSkill::skillid1() const {
  return skillid1_;
}
inline void Pve_GuildBtlHeroSkill::set_skillid1(::google::protobuf::int32 value) {
  _set_bit(2);
  skillid1_ = value;
}

// optional int32 skill1Grade = 4 [default = 0];
inline bool Pve_GuildBtlHeroSkill::has_skill1grade() const {
  return _has_bit(3);
}
inline void Pve_GuildBtlHeroSkill::clear_skill1grade() {
  skill1grade_ = 0;
  _clear_bit(3);
}
inline ::google::protobuf::int32 Pve_GuildBtlHeroSkill::skill1grade() const {
  return skill1grade_;
}
inline void Pve_GuildBtlHeroSkill::set_skill1grade(::google::protobuf::int32 value) {
  _set_bit(3);
  skill1grade_ = value;
}

// optional int32 skill1Quality = 5 [default = 0];
inline bool Pve_GuildBtlHeroSkill::has_skill1quality() const {
  return _has_bit(4);
}
inline void Pve_GuildBtlHeroSkill::clear_skill1quality() {
  skill1quality_ = 0;
  _clear_bit(4);
}
inline ::google::protobuf::int32 Pve_GuildBtlHeroSkill::skill1quality() const {
  return skill1quality_;
}
inline void Pve_GuildBtlHeroSkill::set_skill1quality(::google::protobuf::int32 value) {
  _set_bit(4);
  skill1quality_ = value;
}

// optional int32 skillID2 = 6 [default = 0];
inline bool Pve_GuildBtlHeroSkill::has_skillid2() const {
  return _has_bit(5);
}
inline void Pve_GuildBtlHeroSkill::clear_skillid2() {
  skillid2_ = 0;
  _clear_bit(5);
}
inline ::google::protobuf::int32 Pve_GuildBtlHeroSkill::skillid2() const {
  return skillid2_;
}
inline void Pve_GuildBtlHeroSkill::set_skillid2(::google::protobuf::int32 value) {
  _set_bit(5);
  skillid2_ = value;
}

// optional int32 skill2Grade = 7 [default = 0];
inline bool Pve_GuildBtlHeroSkill::has_skill2grade() const {
  return _has_bit(6);
}
inline void Pve_GuildBtlHeroSkill::clear_skill2grade() {
  skill2grade_ = 0;
  _clear_bit(6);
}
inline ::google::protobuf::int32 Pve_GuildBtlHeroSkill::skill2grade() const {
  return skill2grade_;
}
inline void Pve_GuildBtlHeroSkill::set_skill2grade(::google::protobuf::int32 value) {
  _set_bit(6);
  skill2grade_ = value;
}

// optional int32 skill2Quality = 8 [default = 0];
inline bool Pve_GuildBtlHeroSkill::has_skill2quality() const {
  return _has_bit(7);
}
inline void Pve_GuildBtlHeroSkill::clear_skill2quality() {
  skill2quality_ = 0;
  _clear_bit(7);
}
inline ::google::protobuf::int32 Pve_GuildBtlHeroSkill::skill2quality() const {
  return skill2quality_;
}
inline void Pve_GuildBtlHeroSkill::set_skill2quality(::google::protobuf::int32 value) {
  _set_bit(7);
  skill2quality_ = value;
}

// -------------------------------------------------------------------

// DB_C_GuildBtlSendDataUnit

// repeated .DB_C_GuildBtlArmyAtkProp pvecarmyatkprop = 1;
inline int DB_C_GuildBtlSendDataUnit::pvecarmyatkprop_size() const {
  return pvecarmyatkprop_.size();
}
inline void DB_C_GuildBtlSendDataUnit::clear_pvecarmyatkprop() {
  pvecarmyatkprop_.Clear();
}
inline const ::google::protobuf::RepeatedPtrField< ::DB_C_GuildBtlArmyAtkProp >&
DB_C_GuildBtlSendDataUnit::pvecarmyatkprop() const {
  return pvecarmyatkprop_;
}
inline ::google::protobuf::RepeatedPtrField< ::DB_C_GuildBtlArmyAtkProp >*
DB_C_GuildBtlSendDataUnit::mutable_pvecarmyatkprop() {
  return &pvecarmyatkprop_;
}
inline const ::DB_C_GuildBtlArmyAtkProp& DB_C_GuildBtlSendDataUnit::pvecarmyatkprop(int index) const {
  return pvecarmyatkprop_.Get(index);
}
inline ::DB_C_GuildBtlArmyAtkProp* DB_C_GuildBtlSendDataUnit::mutable_pvecarmyatkprop(int index) {
  return pvecarmyatkprop_.Mutable(index);
}
inline ::DB_C_GuildBtlArmyAtkProp* DB_C_GuildBtlSendDataUnit::add_pvecarmyatkprop() {
  return pvecarmyatkprop_.Add();
}

// repeated .DB_C_GuildBtlFightUnit pvefightunit = 2;
inline int DB_C_GuildBtlSendDataUnit::pvefightunit_size() const {
  return pvefightunit_.size();
}
inline void DB_C_GuildBtlSendDataUnit::clear_pvefightunit() {
  pvefightunit_.Clear();
}
inline const ::google::protobuf::RepeatedPtrField< ::DB_C_GuildBtlFightUnit >&
DB_C_GuildBtlSendDataUnit::pvefightunit() const {
  return pvefightunit_;
}
inline ::google::protobuf::RepeatedPtrField< ::DB_C_GuildBtlFightUnit >*
DB_C_GuildBtlSendDataUnit::mutable_pvefightunit() {
  return &pvefightunit_;
}
inline const ::DB_C_GuildBtlFightUnit& DB_C_GuildBtlSendDataUnit::pvefightunit(int index) const {
  return pvefightunit_.Get(index);
}
inline ::DB_C_GuildBtlFightUnit* DB_C_GuildBtlSendDataUnit::mutable_pvefightunit(int index) {
  return pvefightunit_.Mutable(index);
}
inline ::DB_C_GuildBtlFightUnit* DB_C_GuildBtlSendDataUnit::add_pvefightunit() {
  return pvefightunit_.Add();
}

// optional .DB_C_GuildBtlAdmiralAdd pvefightadmiral = 3;
inline bool DB_C_GuildBtlSendDataUnit::has_pvefightadmiral() const {
  return _has_bit(2);
}
inline void DB_C_GuildBtlSendDataUnit::clear_pvefightadmiral() {
  if (pvefightadmiral_ != NULL) pvefightadmiral_->::DB_C_GuildBtlAdmiralAdd::Clear();
  _clear_bit(2);
}
inline const ::DB_C_GuildBtlAdmiralAdd& DB_C_GuildBtlSendDataUnit::pvefightadmiral() const {
  return pvefightadmiral_ != NULL ? *pvefightadmiral_ : *default_instance_->pvefightadmiral_;
}
inline ::DB_C_GuildBtlAdmiralAdd* DB_C_GuildBtlSendDataUnit::mutable_pvefightadmiral() {
  _set_bit(2);
  if (pvefightadmiral_ == NULL) pvefightadmiral_ = new ::DB_C_GuildBtlAdmiralAdd;
  return pvefightadmiral_;
}

// optional .Pve_GuildBtlHeroSkill pvefightheroskill = 4;
inline bool DB_C_GuildBtlSendDataUnit::has_pvefightheroskill() const {
  return _has_bit(3);
}
inline void DB_C_GuildBtlSendDataUnit::clear_pvefightheroskill() {
  if (pvefightheroskill_ != NULL) pvefightheroskill_->::Pve_GuildBtlHeroSkill::Clear();
  _clear_bit(3);
}
inline const ::Pve_GuildBtlHeroSkill& DB_C_GuildBtlSendDataUnit::pvefightheroskill() const {
  return pvefightheroskill_ != NULL ? *pvefightheroskill_ : *default_instance_->pvefightheroskill_;
}
inline ::Pve_GuildBtlHeroSkill* DB_C_GuildBtlSendDataUnit::mutable_pvefightheroskill() {
  _set_bit(3);
  if (pvefightheroskill_ == NULL) pvefightheroskill_ = new ::Pve_GuildBtlHeroSkill;
  return pvefightheroskill_;
}

// repeated int32 nReduceSpeed = 5;
inline int DB_C_GuildBtlSendDataUnit::nreducespeed_size() const {
  return nreducespeed_.size();
}
inline void DB_C_GuildBtlSendDataUnit::clear_nreducespeed() {
  nreducespeed_.Clear();
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
DB_C_GuildBtlSendDataUnit::nreducespeed() const {
  return nreducespeed_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
DB_C_GuildBtlSendDataUnit::mutable_nreducespeed() {
  return &nreducespeed_;
}
inline ::google::protobuf::int32 DB_C_GuildBtlSendDataUnit::nreducespeed(int index) const {
  return nreducespeed_.Get(index);
}
inline void DB_C_GuildBtlSendDataUnit::set_nreducespeed(int index, ::google::protobuf::int32 value) {
  nreducespeed_.Set(index, value);
}
inline void DB_C_GuildBtlSendDataUnit::add_nreducespeed(::google::protobuf::int32 value) {
  nreducespeed_.Add(value);
}

// -------------------------------------------------------------------

// DB_C_Guild_FightSendData

// optional .DB_C_GuildBtlUser btlUser = 1;
inline bool DB_C_Guild_FightSendData::has_btluser() const {
  return _has_bit(0);
}
inline void DB_C_Guild_FightSendData::clear_btluser() {
  if (btluser_ != NULL) btluser_->::DB_C_GuildBtlUser::Clear();
  _clear_bit(0);
}
inline const ::DB_C_GuildBtlUser& DB_C_Guild_FightSendData::btluser() const {
  return btluser_ != NULL ? *btluser_ : *default_instance_->btluser_;
}
inline ::DB_C_GuildBtlUser* DB_C_Guild_FightSendData::mutable_btluser() {
  _set_bit(0);
  if (btluser_ == NULL) btluser_ = new ::DB_C_GuildBtlUser;
  return btluser_;
}

// repeated .DB_C_GuildBtlSendDataUnit fightsenddata = 2;
inline int DB_C_Guild_FightSendData::fightsenddata_size() const {
  return fightsenddata_.size();
}
inline void DB_C_Guild_FightSendData::clear_fightsenddata() {
  fightsenddata_.Clear();
}
inline const ::google::protobuf::RepeatedPtrField< ::DB_C_GuildBtlSendDataUnit >&
DB_C_Guild_FightSendData::fightsenddata() const {
  return fightsenddata_;
}
inline ::google::protobuf::RepeatedPtrField< ::DB_C_GuildBtlSendDataUnit >*
DB_C_Guild_FightSendData::mutable_fightsenddata() {
  return &fightsenddata_;
}
inline const ::DB_C_GuildBtlSendDataUnit& DB_C_Guild_FightSendData::fightsenddata(int index) const {
  return fightsenddata_.Get(index);
}
inline ::DB_C_GuildBtlSendDataUnit* DB_C_Guild_FightSendData::mutable_fightsenddata(int index) {
  return fightsenddata_.Mutable(index);
}
inline ::DB_C_GuildBtlSendDataUnit* DB_C_Guild_FightSendData::add_fightsenddata() {
  return fightsenddata_.Add();
}

// -------------------------------------------------------------------

// DB_C_GuildBtlUserPK

// optional string userID1 = 1;
inline bool DB_C_GuildBtlUserPK::has_userid1() const {
  return _has_bit(0);
}
inline void DB_C_GuildBtlUserPK::clear_userid1() {
  if (userid1_ != &_default_userid1_) {
    userid1_->clear();
  }
  _clear_bit(0);
}
inline const ::std::string& DB_C_GuildBtlUserPK::userid1() const {
  return *userid1_;
}
inline void DB_C_GuildBtlUserPK::set_userid1(const ::std::string& value) {
  _set_bit(0);
  if (userid1_ == &_default_userid1_) {
    userid1_ = new ::std::string;
  }
  userid1_->assign(value);
}
inline void DB_C_GuildBtlUserPK::set_userid1(const char* value) {
  _set_bit(0);
  if (userid1_ == &_default_userid1_) {
    userid1_ = new ::std::string;
  }
  userid1_->assign(value);
}
inline void DB_C_GuildBtlUserPK::set_userid1(const char* value, size_t size) {
  _set_bit(0);
  if (userid1_ == &_default_userid1_) {
    userid1_ = new ::std::string;
  }
  userid1_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* DB_C_GuildBtlUserPK::mutable_userid1() {
  _set_bit(0);
  if (userid1_ == &_default_userid1_) {
    userid1_ = new ::std::string;
  }
  return userid1_;
}

// optional string userID2 = 2;
inline bool DB_C_GuildBtlUserPK::has_userid2() const {
  return _has_bit(1);
}
inline void DB_C_GuildBtlUserPK::clear_userid2() {
  if (userid2_ != &_default_userid2_) {
    userid2_->clear();
  }
  _clear_bit(1);
}
inline const ::std::string& DB_C_GuildBtlUserPK::userid2() const {
  return *userid2_;
}
inline void DB_C_GuildBtlUserPK::set_userid2(const ::std::string& value) {
  _set_bit(1);
  if (userid2_ == &_default_userid2_) {
    userid2_ = new ::std::string;
  }
  userid2_->assign(value);
}
inline void DB_C_GuildBtlUserPK::set_userid2(const char* value) {
  _set_bit(1);
  if (userid2_ == &_default_userid2_) {
    userid2_ = new ::std::string;
  }
  userid2_->assign(value);
}
inline void DB_C_GuildBtlUserPK::set_userid2(const char* value, size_t size) {
  _set_bit(1);
  if (userid2_ == &_default_userid2_) {
    userid2_ = new ::std::string;
  }
  userid2_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* DB_C_GuildBtlUserPK::mutable_userid2() {
  _set_bit(1);
  if (userid2_ == &_default_userid2_) {
    userid2_ = new ::std::string;
  }
  return userid2_;
}

// optional string winID = 3;
inline bool DB_C_GuildBtlUserPK::has_winid() const {
  return _has_bit(2);
}
inline void DB_C_GuildBtlUserPK::clear_winid() {
  if (winid_ != &_default_winid_) {
    winid_->clear();
  }
  _clear_bit(2);
}
inline const ::std::string& DB_C_GuildBtlUserPK::winid() const {
  return *winid_;
}
inline void DB_C_GuildBtlUserPK::set_winid(const ::std::string& value) {
  _set_bit(2);
  if (winid_ == &_default_winid_) {
    winid_ = new ::std::string;
  }
  winid_->assign(value);
}
inline void DB_C_GuildBtlUserPK::set_winid(const char* value) {
  _set_bit(2);
  if (winid_ == &_default_winid_) {
    winid_ = new ::std::string;
  }
  winid_->assign(value);
}
inline void DB_C_GuildBtlUserPK::set_winid(const char* value, size_t size) {
  _set_bit(2);
  if (winid_ == &_default_winid_) {
    winid_ = new ::std::string;
  }
  winid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* DB_C_GuildBtlUserPK::mutable_winid() {
  _set_bit(2);
  if (winid_ == &_default_winid_) {
    winid_ = new ::std::string;
  }
  return winid_;
}

// optional int32 winLeftHP = 4;
inline bool DB_C_GuildBtlUserPK::has_winlefthp() const {
  return _has_bit(3);
}
inline void DB_C_GuildBtlUserPK::clear_winlefthp() {
  winlefthp_ = 0;
  _clear_bit(3);
}
inline ::google::protobuf::int32 DB_C_GuildBtlUserPK::winlefthp() const {
  return winlefthp_;
}
inline void DB_C_GuildBtlUserPK::set_winlefthp(::google::protobuf::int32 value) {
  _set_bit(3);
  winlefthp_ = value;
}

// optional bool bStreakLeave = 5;
inline bool DB_C_GuildBtlUserPK::has_bstreakleave() const {
  return _has_bit(4);
}
inline void DB_C_GuildBtlUserPK::clear_bstreakleave() {
  bstreakleave_ = false;
  _clear_bit(4);
}
inline bool DB_C_GuildBtlUserPK::bstreakleave() const {
  return bstreakleave_;
}
inline void DB_C_GuildBtlUserPK::set_bstreakleave(bool value) {
  _set_bit(4);
  bstreakleave_ = value;
}

// -------------------------------------------------------------------

// DB_C_GuidlBtlRetWay

// optional int32 region = 1;
inline bool DB_C_GuidlBtlRetWay::has_region() const {
  return _has_bit(0);
}
inline void DB_C_GuidlBtlRetWay::clear_region() {
  region_ = 0;
  _clear_bit(0);
}
inline ::google::protobuf::int32 DB_C_GuidlBtlRetWay::region() const {
  return region_;
}
inline void DB_C_GuidlBtlRetWay::set_region(::google::protobuf::int32 value) {
  _set_bit(0);
  region_ = value;
}

// optional int32 guildID1 = 2;
inline bool DB_C_GuidlBtlRetWay::has_guildid1() const {
  return _has_bit(1);
}
inline void DB_C_GuidlBtlRetWay::clear_guildid1() {
  guildid1_ = 0;
  _clear_bit(1);
}
inline ::google::protobuf::int32 DB_C_GuidlBtlRetWay::guildid1() const {
  return guildid1_;
}
inline void DB_C_GuidlBtlRetWay::set_guildid1(::google::protobuf::int32 value) {
  _set_bit(1);
  guildid1_ = value;
}

// optional int32 guildID2 = 3;
inline bool DB_C_GuidlBtlRetWay::has_guildid2() const {
  return _has_bit(2);
}
inline void DB_C_GuidlBtlRetWay::clear_guildid2() {
  guildid2_ = 0;
  _clear_bit(2);
}
inline ::google::protobuf::int32 DB_C_GuidlBtlRetWay::guildid2() const {
  return guildid2_;
}
inline void DB_C_GuidlBtlRetWay::set_guildid2(::google::protobuf::int32 value) {
  _set_bit(2);
  guildid2_ = value;
}

// optional int32 session = 4;
inline bool DB_C_GuidlBtlRetWay::has_session() const {
  return _has_bit(3);
}
inline void DB_C_GuidlBtlRetWay::clear_session() {
  session_ = 0;
  _clear_bit(3);
}
inline ::google::protobuf::int32 DB_C_GuidlBtlRetWay::session() const {
  return session_;
}
inline void DB_C_GuidlBtlRetWay::set_session(::google::protobuf::int32 value) {
  _set_bit(3);
  session_ = value;
}

// optional int32 way = 5;
inline bool DB_C_GuidlBtlRetWay::has_way() const {
  return _has_bit(4);
}
inline void DB_C_GuidlBtlRetWay::clear_way() {
  way_ = 0;
  _clear_bit(4);
}
inline ::google::protobuf::int32 DB_C_GuidlBtlRetWay::way() const {
  return way_;
}
inline void DB_C_GuidlBtlRetWay::set_way(::google::protobuf::int32 value) {
  _set_bit(4);
  way_ = value;
}

// optional int32 winGuildID = 6;
inline bool DB_C_GuidlBtlRetWay::has_winguildid() const {
  return _has_bit(5);
}
inline void DB_C_GuidlBtlRetWay::clear_winguildid() {
  winguildid_ = 0;
  _clear_bit(5);
}
inline ::google::protobuf::int32 DB_C_GuidlBtlRetWay::winguildid() const {
  return winguildid_;
}
inline void DB_C_GuidlBtlRetWay::set_winguildid(::google::protobuf::int32 value) {
  _set_bit(5);
  winguildid_ = value;
}

// repeated .DB_C_GuildBtlUser userLst1 = 7;
inline int DB_C_GuidlBtlRetWay::userlst1_size() const {
  return userlst1_.size();
}
inline void DB_C_GuidlBtlRetWay::clear_userlst1() {
  userlst1_.Clear();
}
inline const ::google::protobuf::RepeatedPtrField< ::DB_C_GuildBtlUser >&
DB_C_GuidlBtlRetWay::userlst1() const {
  return userlst1_;
}
inline ::google::protobuf::RepeatedPtrField< ::DB_C_GuildBtlUser >*
DB_C_GuidlBtlRetWay::mutable_userlst1() {
  return &userlst1_;
}
inline const ::DB_C_GuildBtlUser& DB_C_GuidlBtlRetWay::userlst1(int index) const {
  return userlst1_.Get(index);
}
inline ::DB_C_GuildBtlUser* DB_C_GuidlBtlRetWay::mutable_userlst1(int index) {
  return userlst1_.Mutable(index);
}
inline ::DB_C_GuildBtlUser* DB_C_GuidlBtlRetWay::add_userlst1() {
  return userlst1_.Add();
}

// repeated .DB_C_GuildBtlUser userLst2 = 8;
inline int DB_C_GuidlBtlRetWay::userlst2_size() const {
  return userlst2_.size();
}
inline void DB_C_GuidlBtlRetWay::clear_userlst2() {
  userlst2_.Clear();
}
inline const ::google::protobuf::RepeatedPtrField< ::DB_C_GuildBtlUser >&
DB_C_GuidlBtlRetWay::userlst2() const {
  return userlst2_;
}
inline ::google::protobuf::RepeatedPtrField< ::DB_C_GuildBtlUser >*
DB_C_GuidlBtlRetWay::mutable_userlst2() {
  return &userlst2_;
}
inline const ::DB_C_GuildBtlUser& DB_C_GuidlBtlRetWay::userlst2(int index) const {
  return userlst2_.Get(index);
}
inline ::DB_C_GuildBtlUser* DB_C_GuidlBtlRetWay::mutable_userlst2(int index) {
  return userlst2_.Mutable(index);
}
inline ::DB_C_GuildBtlUser* DB_C_GuidlBtlRetWay::add_userlst2() {
  return userlst2_.Add();
}

// repeated .DB_C_GuildBtlUserPK pkLst = 9;
inline int DB_C_GuidlBtlRetWay::pklst_size() const {
  return pklst_.size();
}
inline void DB_C_GuidlBtlRetWay::clear_pklst() {
  pklst_.Clear();
}
inline const ::google::protobuf::RepeatedPtrField< ::DB_C_GuildBtlUserPK >&
DB_C_GuidlBtlRetWay::pklst() const {
  return pklst_;
}
inline ::google::protobuf::RepeatedPtrField< ::DB_C_GuildBtlUserPK >*
DB_C_GuidlBtlRetWay::mutable_pklst() {
  return &pklst_;
}
inline const ::DB_C_GuildBtlUserPK& DB_C_GuidlBtlRetWay::pklst(int index) const {
  return pklst_.Get(index);
}
inline ::DB_C_GuildBtlUserPK* DB_C_GuidlBtlRetWay::mutable_pklst(int index) {
  return pklst_.Mutable(index);
}
inline ::DB_C_GuildBtlUserPK* DB_C_GuidlBtlRetWay::add_pklst() {
  return pklst_.Add();
}

// -------------------------------------------------------------------

// DB_GVE_City

// repeated .DB_C_NPC npc = 1;
inline int DB_GVE_City::npc_size() const {
  return npc_.size();
}
inline void DB_GVE_City::clear_npc() {
  npc_.Clear();
}
inline const ::google::protobuf::RepeatedPtrField< ::DB_C_NPC >&
DB_GVE_City::npc() const {
  return npc_;
}
inline ::google::protobuf::RepeatedPtrField< ::DB_C_NPC >*
DB_GVE_City::mutable_npc() {
  return &npc_;
}
inline const ::DB_C_NPC& DB_GVE_City::npc(int index) const {
  return npc_.Get(index);
}
inline ::DB_C_NPC* DB_GVE_City::mutable_npc(int index) {
  return npc_.Mutable(index);
}
inline ::DB_C_NPC* DB_GVE_City::add_npc() {
  return npc_.Add();
}

// optional int32 flag = 2 [default = 0];
inline bool DB_GVE_City::has_flag() const {
  return _has_bit(1);
}
inline void DB_GVE_City::clear_flag() {
  flag_ = 0;
  _clear_bit(1);
}
inline ::google::protobuf::int32 DB_GVE_City::flag() const {
  return flag_;
}
inline void DB_GVE_City::set_flag(::google::protobuf::int32 value) {
  _set_bit(1);
  flag_ = value;
}

// repeated .DB_GVE_Buff buffList = 3;
inline int DB_GVE_City::bufflist_size() const {
  return bufflist_.size();
}
inline void DB_GVE_City::clear_bufflist() {
  bufflist_.Clear();
}
inline const ::google::protobuf::RepeatedPtrField< ::DB_GVE_Buff >&
DB_GVE_City::bufflist() const {
  return bufflist_;
}
inline ::google::protobuf::RepeatedPtrField< ::DB_GVE_Buff >*
DB_GVE_City::mutable_bufflist() {
  return &bufflist_;
}
inline const ::DB_GVE_Buff& DB_GVE_City::bufflist(int index) const {
  return bufflist_.Get(index);
}
inline ::DB_GVE_Buff* DB_GVE_City::mutable_bufflist(int index) {
  return bufflist_.Mutable(index);
}
inline ::DB_GVE_Buff* DB_GVE_City::add_bufflist() {
  return bufflist_.Add();
}

// repeated .DB_GVE_List nowList = 5;
inline int DB_GVE_City::nowlist_size() const {
  return nowlist_.size();
}
inline void DB_GVE_City::clear_nowlist() {
  nowlist_.Clear();
}
inline const ::google::protobuf::RepeatedPtrField< ::DB_GVE_List >&
DB_GVE_City::nowlist() const {
  return nowlist_;
}
inline ::google::protobuf::RepeatedPtrField< ::DB_GVE_List >*
DB_GVE_City::mutable_nowlist() {
  return &nowlist_;
}
inline const ::DB_GVE_List& DB_GVE_City::nowlist(int index) const {
  return nowlist_.Get(index);
}
inline ::DB_GVE_List* DB_GVE_City::mutable_nowlist(int index) {
  return nowlist_.Mutable(index);
}
inline ::DB_GVE_List* DB_GVE_City::add_nowlist() {
  return nowlist_.Add();
}

// repeated .DB_GVE_List LastList = 6;
inline int DB_GVE_City::lastlist_size() const {
  return lastlist_.size();
}
inline void DB_GVE_City::clear_lastlist() {
  lastlist_.Clear();
}
inline const ::google::protobuf::RepeatedPtrField< ::DB_GVE_List >&
DB_GVE_City::lastlist() const {
  return lastlist_;
}
inline ::google::protobuf::RepeatedPtrField< ::DB_GVE_List >*
DB_GVE_City::mutable_lastlist() {
  return &lastlist_;
}
inline const ::DB_GVE_List& DB_GVE_City::lastlist(int index) const {
  return lastlist_.Get(index);
}
inline ::DB_GVE_List* DB_GVE_City::mutable_lastlist(int index) {
  return lastlist_.Mutable(index);
}
inline ::DB_GVE_List* DB_GVE_City::add_lastlist() {
  return lastlist_.Add();
}

// optional .DB_GVE_Msg nowMsg = 7;
inline bool DB_GVE_City::has_nowmsg() const {
  return _has_bit(5);
}
inline void DB_GVE_City::clear_nowmsg() {
  if (nowmsg_ != NULL) nowmsg_->::DB_GVE_Msg::Clear();
  _clear_bit(5);
}
inline const ::DB_GVE_Msg& DB_GVE_City::nowmsg() const {
  return nowmsg_ != NULL ? *nowmsg_ : *default_instance_->nowmsg_;
}
inline ::DB_GVE_Msg* DB_GVE_City::mutable_nowmsg() {
  _set_bit(5);
  if (nowmsg_ == NULL) nowmsg_ = new ::DB_GVE_Msg;
  return nowmsg_;
}

// optional .DB_GVE_Msg lastMsg = 8;
inline bool DB_GVE_City::has_lastmsg() const {
  return _has_bit(6);
}
inline void DB_GVE_City::clear_lastmsg() {
  if (lastmsg_ != NULL) lastmsg_->::DB_GVE_Msg::Clear();
  _clear_bit(6);
}
inline const ::DB_GVE_Msg& DB_GVE_City::lastmsg() const {
  return lastmsg_ != NULL ? *lastmsg_ : *default_instance_->lastmsg_;
}
inline ::DB_GVE_Msg* DB_GVE_City::mutable_lastmsg() {
  _set_bit(6);
  if (lastmsg_ == NULL) lastmsg_ = new ::DB_GVE_Msg;
  return lastmsg_;
}

// optional .DB_GVE_Msg HighestMsg = 9;
inline bool DB_GVE_City::has_highestmsg() const {
  return _has_bit(7);
}
inline void DB_GVE_City::clear_highestmsg() {
  if (highestmsg_ != NULL) highestmsg_->::DB_GVE_Msg::Clear();
  _clear_bit(7);
}
inline const ::DB_GVE_Msg& DB_GVE_City::highestmsg() const {
  return highestmsg_ != NULL ? *highestmsg_ : *default_instance_->highestmsg_;
}
inline ::DB_GVE_Msg* DB_GVE_City::mutable_highestmsg() {
  _set_bit(7);
  if (highestmsg_ == NULL) highestmsg_ = new ::DB_GVE_Msg;
  return highestmsg_;
}

// repeated int64 playerList = 10;
inline int DB_GVE_City::playerlist_size() const {
  return playerlist_.size();
}
inline void DB_GVE_City::clear_playerlist() {
  playerlist_.Clear();
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
DB_GVE_City::playerlist() const {
  return playerlist_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
DB_GVE_City::mutable_playerlist() {
  return &playerlist_;
}
inline ::google::protobuf::int64 DB_GVE_City::playerlist(int index) const {
  return playerlist_.Get(index);
}
inline void DB_GVE_City::set_playerlist(int index, ::google::protobuf::int64 value) {
  playerlist_.Set(index, value);
}
inline void DB_GVE_City::add_playerlist(::google::protobuf::int64 value) {
  playerlist_.Add(value);
}

// optional int32 lastRefreshTime = 11;
inline bool DB_GVE_City::has_lastrefreshtime() const {
  return _has_bit(9);
}
inline void DB_GVE_City::clear_lastrefreshtime() {
  lastrefreshtime_ = 0;
  _clear_bit(9);
}
inline ::google::protobuf::int32 DB_GVE_City::lastrefreshtime() const {
  return lastrefreshtime_;
}
inline void DB_GVE_City::set_lastrefreshtime(::google::protobuf::int32 value) {
  _set_bit(9);
  lastrefreshtime_ = value;
}

// repeated .DB_C_NPC spNpc = 12;
inline int DB_GVE_City::spnpc_size() const {
  return spnpc_.size();
}
inline void DB_GVE_City::clear_spnpc() {
  spnpc_.Clear();
}
inline const ::google::protobuf::RepeatedPtrField< ::DB_C_NPC >&
DB_GVE_City::spnpc() const {
  return spnpc_;
}
inline ::google::protobuf::RepeatedPtrField< ::DB_C_NPC >*
DB_GVE_City::mutable_spnpc() {
  return &spnpc_;
}
inline const ::DB_C_NPC& DB_GVE_City::spnpc(int index) const {
  return spnpc_.Get(index);
}
inline ::DB_C_NPC* DB_GVE_City::mutable_spnpc(int index) {
  return spnpc_.Mutable(index);
}
inline ::DB_C_NPC* DB_GVE_City::add_spnpc() {
  return spnpc_.Add();
}

// -------------------------------------------------------------------

// DB_GVE_List

// optional string uid = 1;
inline bool DB_GVE_List::has_uid() const {
  return _has_bit(0);
}
inline void DB_GVE_List::clear_uid() {
  if (uid_ != &_default_uid_) {
    uid_->clear();
  }
  _clear_bit(0);
}
inline const ::std::string& DB_GVE_List::uid() const {
  return *uid_;
}
inline void DB_GVE_List::set_uid(const ::std::string& value) {
  _set_bit(0);
  if (uid_ == &_default_uid_) {
    uid_ = new ::std::string;
  }
  uid_->assign(value);
}
inline void DB_GVE_List::set_uid(const char* value) {
  _set_bit(0);
  if (uid_ == &_default_uid_) {
    uid_ = new ::std::string;
  }
  uid_->assign(value);
}
inline void DB_GVE_List::set_uid(const char* value, size_t size) {
  _set_bit(0);
  if (uid_ == &_default_uid_) {
    uid_ = new ::std::string;
  }
  uid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* DB_GVE_List::mutable_uid() {
  _set_bit(0);
  if (uid_ == &_default_uid_) {
    uid_ = new ::std::string;
  }
  return uid_;
}

// optional string name = 2;
inline bool DB_GVE_List::has_name() const {
  return _has_bit(1);
}
inline void DB_GVE_List::clear_name() {
  if (name_ != &_default_name_) {
    name_->clear();
  }
  _clear_bit(1);
}
inline const ::std::string& DB_GVE_List::name() const {
  return *name_;
}
inline void DB_GVE_List::set_name(const ::std::string& value) {
  _set_bit(1);
  if (name_ == &_default_name_) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void DB_GVE_List::set_name(const char* value) {
  _set_bit(1);
  if (name_ == &_default_name_) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void DB_GVE_List::set_name(const char* value, size_t size) {
  _set_bit(1);
  if (name_ == &_default_name_) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* DB_GVE_List::mutable_name() {
  _set_bit(1);
  if (name_ == &_default_name_) {
    name_ = new ::std::string;
  }
  return name_;
}

// optional int32 gvePoint = 3;
inline bool DB_GVE_List::has_gvepoint() const {
  return _has_bit(2);
}
inline void DB_GVE_List::clear_gvepoint() {
  gvepoint_ = 0;
  _clear_bit(2);
}
inline ::google::protobuf::int32 DB_GVE_List::gvepoint() const {
  return gvepoint_;
}
inline void DB_GVE_List::set_gvepoint(::google::protobuf::int32 value) {
  _set_bit(2);
  gvepoint_ = value;
}

// optional int32 level = 4;
inline bool DB_GVE_List::has_level() const {
  return _has_bit(3);
}
inline void DB_GVE_List::clear_level() {
  level_ = 0;
  _clear_bit(3);
}
inline ::google::protobuf::int32 DB_GVE_List::level() const {
  return level_;
}
inline void DB_GVE_List::set_level(::google::protobuf::int32 value) {
  _set_bit(3);
  level_ = value;
}

// optional int32 officerPosition = 5;
inline bool DB_GVE_List::has_officerposition() const {
  return _has_bit(4);
}
inline void DB_GVE_List::clear_officerposition() {
  officerposition_ = 0;
  _clear_bit(4);
}
inline ::google::protobuf::int32 DB_GVE_List::officerposition() const {
  return officerposition_;
}
inline void DB_GVE_List::set_officerposition(::google::protobuf::int32 value) {
  _set_bit(4);
  officerposition_ = value;
}

// optional int32 vipType = 6;
inline bool DB_GVE_List::has_viptype() const {
  return _has_bit(5);
}
inline void DB_GVE_List::clear_viptype() {
  viptype_ = 0;
  _clear_bit(5);
}
inline ::google::protobuf::int32 DB_GVE_List::viptype() const {
  return viptype_;
}
inline void DB_GVE_List::set_viptype(::google::protobuf::int32 value) {
  _set_bit(5);
  viptype_ = value;
}

// optional int32 vipLevel = 7;
inline bool DB_GVE_List::has_viplevel() const {
  return _has_bit(6);
}
inline void DB_GVE_List::clear_viplevel() {
  viplevel_ = 0;
  _clear_bit(6);
}
inline ::google::protobuf::int32 DB_GVE_List::viplevel() const {
  return viplevel_;
}
inline void DB_GVE_List::set_viplevel(::google::protobuf::int32 value) {
  _set_bit(6);
  viplevel_ = value;
}

// -------------------------------------------------------------------

// DB_GVE_Msg

// optional int32 gveStep = 1 [default = -1];
inline bool DB_GVE_Msg::has_gvestep() const {
  return _has_bit(0);
}
inline void DB_GVE_Msg::clear_gvestep() {
  gvestep_ = -1;
  _clear_bit(0);
}
inline ::google::protobuf::int32 DB_GVE_Msg::gvestep() const {
  return gvestep_;
}
inline void DB_GVE_Msg::set_gvestep(::google::protobuf::int32 value) {
  _set_bit(0);
  gvestep_ = value;
}

// optional int32 point = 2;
inline bool DB_GVE_Msg::has_point() const {
  return _has_bit(1);
}
inline void DB_GVE_Msg::clear_point() {
  point_ = 0;
  _clear_bit(1);
}
inline ::google::protobuf::int32 DB_GVE_Msg::point() const {
  return point_;
}
inline void DB_GVE_Msg::set_point(::google::protobuf::int32 value) {
  _set_bit(1);
  point_ = value;
}

// optional int32 rank = 3;
inline bool DB_GVE_Msg::has_rank() const {
  return _has_bit(2);
}
inline void DB_GVE_Msg::clear_rank() {
  rank_ = 0;
  _clear_bit(2);
}
inline ::google::protobuf::int32 DB_GVE_Msg::rank() const {
  return rank_;
}
inline void DB_GVE_Msg::set_rank(::google::protobuf::int32 value) {
  _set_bit(2);
  rank_ = value;
}

// optional int32 playerCnt = 4;
inline bool DB_GVE_Msg::has_playercnt() const {
  return _has_bit(3);
}
inline void DB_GVE_Msg::clear_playercnt() {
  playercnt_ = 0;
  _clear_bit(3);
}
inline ::google::protobuf::int32 DB_GVE_Msg::playercnt() const {
  return playercnt_;
}
inline void DB_GVE_Msg::set_playercnt(::google::protobuf::int32 value) {
  _set_bit(3);
  playercnt_ = value;
}

// optional int32 overGuildStep = 5;
inline bool DB_GVE_Msg::has_overguildstep() const {
  return _has_bit(4);
}
inline void DB_GVE_Msg::clear_overguildstep() {
  overguildstep_ = 0;
  _clear_bit(4);
}
inline ::google::protobuf::int32 DB_GVE_Msg::overguildstep() const {
  return overguildstep_;
}
inline void DB_GVE_Msg::set_overguildstep(::google::protobuf::int32 value) {
  _set_bit(4);
  overguildstep_ = value;
}

// optional int32 overGuildPoint = 6;
inline bool DB_GVE_Msg::has_overguildpoint() const {
  return _has_bit(5);
}
inline void DB_GVE_Msg::clear_overguildpoint() {
  overguildpoint_ = 0;
  _clear_bit(5);
}
inline ::google::protobuf::int32 DB_GVE_Msg::overguildpoint() const {
  return overguildpoint_;
}
inline void DB_GVE_Msg::set_overguildpoint(::google::protobuf::int32 value) {
  _set_bit(5);
  overguildpoint_ = value;
}

// optional int32 overGuildMem = 7;
inline bool DB_GVE_Msg::has_overguildmem() const {
  return _has_bit(6);
}
inline void DB_GVE_Msg::clear_overguildmem() {
  overguildmem_ = 0;
  _clear_bit(6);
}
inline ::google::protobuf::int32 DB_GVE_Msg::overguildmem() const {
  return overguildmem_;
}
inline void DB_GVE_Msg::set_overguildmem(::google::protobuf::int32 value) {
  _set_bit(6);
  overguildmem_ = value;
}

// optional int32 flag = 8;
inline bool DB_GVE_Msg::has_flag() const {
  return _has_bit(7);
}
inline void DB_GVE_Msg::clear_flag() {
  flag_ = 0;
  _clear_bit(7);
}
inline ::google::protobuf::int32 DB_GVE_Msg::flag() const {
  return flag_;
}
inline void DB_GVE_Msg::set_flag(::google::protobuf::int32 value) {
  _set_bit(7);
  flag_ = value;
}

// -------------------------------------------------------------------

// DB_GVE_Buff

// optional int32 buffID = 1;
inline bool DB_GVE_Buff::has_buffid() const {
  return _has_bit(0);
}
inline void DB_GVE_Buff::clear_buffid() {
  buffid_ = 0;
  _clear_bit(0);
}
inline ::google::protobuf::int32 DB_GVE_Buff::buffid() const {
  return buffid_;
}
inline void DB_GVE_Buff::set_buffid(::google::protobuf::int32 value) {
  _set_bit(0);
  buffid_ = value;
}

// optional int32 buffEndTime = 2;
inline bool DB_GVE_Buff::has_buffendtime() const {
  return _has_bit(1);
}
inline void DB_GVE_Buff::clear_buffendtime() {
  buffendtime_ = 0;
  _clear_bit(1);
}
inline ::google::protobuf::int32 DB_GVE_Buff::buffendtime() const {
  return buffendtime_;
}
inline void DB_GVE_Buff::set_buffendtime(::google::protobuf::int32 value) {
  _set_bit(1);
  buffendtime_ = value;
}

// -------------------------------------------------------------------

// DB_GVE_FirstDown

// optional int32 stepID = 1;
inline bool DB_GVE_FirstDown::has_stepid() const {
  return _has_bit(0);
}
inline void DB_GVE_FirstDown::clear_stepid() {
  stepid_ = 0;
  _clear_bit(0);
}
inline ::google::protobuf::int32 DB_GVE_FirstDown::stepid() const {
  return stepid_;
}
inline void DB_GVE_FirstDown::set_stepid(::google::protobuf::int32 value) {
  _set_bit(0);
  stepid_ = value;
}

// optional int32 guildID = 2;
inline bool DB_GVE_FirstDown::has_guildid() const {
  return _has_bit(1);
}
inline void DB_GVE_FirstDown::clear_guildid() {
  guildid_ = 0;
  _clear_bit(1);
}
inline ::google::protobuf::int32 DB_GVE_FirstDown::guildid() const {
  return guildid_;
}
inline void DB_GVE_FirstDown::set_guildid(::google::protobuf::int32 value) {
  _set_bit(1);
  guildid_ = value;
}

// optional int32 guildCountry = 3;
inline bool DB_GVE_FirstDown::has_guildcountry() const {
  return _has_bit(2);
}
inline void DB_GVE_FirstDown::clear_guildcountry() {
  guildcountry_ = 0;
  _clear_bit(2);
}
inline ::google::protobuf::int32 DB_GVE_FirstDown::guildcountry() const {
  return guildcountry_;
}
inline void DB_GVE_FirstDown::set_guildcountry(::google::protobuf::int32 value) {
  _set_bit(2);
  guildcountry_ = value;
}

// optional string guildName = 4;
inline bool DB_GVE_FirstDown::has_guildname() const {
  return _has_bit(3);
}
inline void DB_GVE_FirstDown::clear_guildname() {
  if (guildname_ != &_default_guildname_) {
    guildname_->clear();
  }
  _clear_bit(3);
}
inline const ::std::string& DB_GVE_FirstDown::guildname() const {
  return *guildname_;
}
inline void DB_GVE_FirstDown::set_guildname(const ::std::string& value) {
  _set_bit(3);
  if (guildname_ == &_default_guildname_) {
    guildname_ = new ::std::string;
  }
  guildname_->assign(value);
}
inline void DB_GVE_FirstDown::set_guildname(const char* value) {
  _set_bit(3);
  if (guildname_ == &_default_guildname_) {
    guildname_ = new ::std::string;
  }
  guildname_->assign(value);
}
inline void DB_GVE_FirstDown::set_guildname(const char* value, size_t size) {
  _set_bit(3);
  if (guildname_ == &_default_guildname_) {
    guildname_ = new ::std::string;
  }
  guildname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* DB_GVE_FirstDown::mutable_guildname() {
  _set_bit(3);
  if (guildname_ == &_default_guildname_) {
    guildname_ = new ::std::string;
  }
  return guildname_;
}

// -------------------------------------------------------------------

// DB_C_ResourceData

// required int32 key = 1;
inline bool DB_C_ResourceData::has_key() const {
  return _has_bit(0);
}
inline void DB_C_ResourceData::clear_key() {
  key_ = 0;
  _clear_bit(0);
}
inline ::google::protobuf::int32 DB_C_ResourceData::key() const {
  return key_;
}
inline void DB_C_ResourceData::set_key(::google::protobuf::int32 value) {
  _set_bit(0);
  key_ = value;
}

// required int32 region = 2;
inline bool DB_C_ResourceData::has_region() const {
  return _has_bit(1);
}
inline void DB_C_ResourceData::clear_region() {
  region_ = 0;
  _clear_bit(1);
}
inline ::google::protobuf::int32 DB_C_ResourceData::region() const {
  return region_;
}
inline void DB_C_ResourceData::set_region(::google::protobuf::int32 value) {
  _set_bit(1);
  region_ = value;
}

// repeated .DB_C_Resource resourseList = 3;
inline int DB_C_ResourceData::resourselist_size() const {
  return resourselist_.size();
}
inline void DB_C_ResourceData::clear_resourselist() {
  resourselist_.Clear();
}
inline const ::google::protobuf::RepeatedPtrField< ::DB_C_Resource >&
DB_C_ResourceData::resourselist() const {
  return resourselist_;
}
inline ::google::protobuf::RepeatedPtrField< ::DB_C_Resource >*
DB_C_ResourceData::mutable_resourselist() {
  return &resourselist_;
}
inline const ::DB_C_Resource& DB_C_ResourceData::resourselist(int index) const {
  return resourselist_.Get(index);
}
inline ::DB_C_Resource* DB_C_ResourceData::mutable_resourselist(int index) {
  return resourselist_.Mutable(index);
}
inline ::DB_C_Resource* DB_C_ResourceData::add_resourselist() {
  return resourselist_.Add();
}

// optional int64 ltSaveRevision = 4 [default = 0];
inline bool DB_C_ResourceData::has_ltsaverevision() const {
  return _has_bit(3);
}
inline void DB_C_ResourceData::clear_ltsaverevision() {
  ltsaverevision_ = GOOGLE_LONGLONG(0);
  _clear_bit(3);
}
inline ::google::protobuf::int64 DB_C_ResourceData::ltsaverevision() const {
  return ltsaverevision_;
}
inline void DB_C_ResourceData::set_ltsaverevision(::google::protobuf::int64 value) {
  _set_bit(3);
  ltsaverevision_ = value;
}

// -------------------------------------------------------------------

// DB_C_Resource

// required int32 id = 1;
inline bool DB_C_Resource::has_id() const {
  return _has_bit(0);
}
inline void DB_C_Resource::clear_id() {
  id_ = 0;
  _clear_bit(0);
}
inline ::google::protobuf::int32 DB_C_Resource::id() const {
  return id_;
}
inline void DB_C_Resource::set_id(::google::protobuf::int32 value) {
  _set_bit(0);
  id_ = value;
}

// optional int32 type = 2;
inline bool DB_C_Resource::has_type() const {
  return _has_bit(1);
}
inline void DB_C_Resource::clear_type() {
  type_ = 0;
  _clear_bit(1);
}
inline ::google::protobuf::int32 DB_C_Resource::type() const {
  return type_;
}
inline void DB_C_Resource::set_type(::google::protobuf::int32 value) {
  _set_bit(1);
  type_ = value;
}

// optional int32 lv = 3;
inline bool DB_C_Resource::has_lv() const {
  return _has_bit(2);
}
inline void DB_C_Resource::clear_lv() {
  lv_ = 0;
  _clear_bit(2);
}
inline ::google::protobuf::int32 DB_C_Resource::lv() const {
  return lv_;
}
inline void DB_C_Resource::set_lv(::google::protobuf::int32 value) {
  _set_bit(2);
  lv_ = value;
}

// optional string uid = 4;
inline bool DB_C_Resource::has_uid() const {
  return _has_bit(3);
}
inline void DB_C_Resource::clear_uid() {
  if (uid_ != &_default_uid_) {
    uid_->clear();
  }
  _clear_bit(3);
}
inline const ::std::string& DB_C_Resource::uid() const {
  return *uid_;
}
inline void DB_C_Resource::set_uid(const ::std::string& value) {
  _set_bit(3);
  if (uid_ == &_default_uid_) {
    uid_ = new ::std::string;
  }
  uid_->assign(value);
}
inline void DB_C_Resource::set_uid(const char* value) {
  _set_bit(3);
  if (uid_ == &_default_uid_) {
    uid_ = new ::std::string;
  }
  uid_->assign(value);
}
inline void DB_C_Resource::set_uid(const char* value, size_t size) {
  _set_bit(3);
  if (uid_ == &_default_uid_) {
    uid_ = new ::std::string;
  }
  uid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* DB_C_Resource::mutable_uid() {
  _set_bit(3);
  if (uid_ == &_default_uid_) {
    uid_ = new ::std::string;
  }
  return uid_;
}

// optional string name = 5;
inline bool DB_C_Resource::has_name() const {
  return _has_bit(4);
}
inline void DB_C_Resource::clear_name() {
  if (name_ != &_default_name_) {
    name_->clear();
  }
  _clear_bit(4);
}
inline const ::std::string& DB_C_Resource::name() const {
  return *name_;
}
inline void DB_C_Resource::set_name(const ::std::string& value) {
  _set_bit(4);
  if (name_ == &_default_name_) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void DB_C_Resource::set_name(const char* value) {
  _set_bit(4);
  if (name_ == &_default_name_) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void DB_C_Resource::set_name(const char* value, size_t size) {
  _set_bit(4);
  if (name_ == &_default_name_) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* DB_C_Resource::mutable_name() {
  _set_bit(4);
  if (name_ == &_default_name_) {
    name_ = new ::std::string;
  }
  return name_;
}

// optional int32 endTime = 6;
inline bool DB_C_Resource::has_endtime() const {
  return _has_bit(5);
}
inline void DB_C_Resource::clear_endtime() {
  endtime_ = 0;
  _clear_bit(5);
}
inline ::google::protobuf::int32 DB_C_Resource::endtime() const {
  return endtime_;
}
inline void DB_C_Resource::set_endtime(::google::protobuf::int32 value) {
  _set_bit(5);
  endtime_ = value;
}

// repeated int32 admiralID = 7;
inline int DB_C_Resource::admiralid_size() const {
  return admiralid_.size();
}
inline void DB_C_Resource::clear_admiralid() {
  admiralid_.Clear();
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
DB_C_Resource::admiralid() const {
  return admiralid_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
DB_C_Resource::mutable_admiralid() {
  return &admiralid_;
}
inline ::google::protobuf::int32 DB_C_Resource::admiralid(int index) const {
  return admiralid_.Get(index);
}
inline void DB_C_Resource::set_admiralid(int index, ::google::protobuf::int32 value) {
  admiralid_.Set(index, value);
}
inline void DB_C_Resource::add_admiralid(::google::protobuf::int32 value) {
  admiralid_.Add(value);
}

// repeated int32 admiralTrainLv = 8;
inline int DB_C_Resource::admiraltrainlv_size() const {
  return admiraltrainlv_.size();
}
inline void DB_C_Resource::clear_admiraltrainlv() {
  admiraltrainlv_.Clear();
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
DB_C_Resource::admiraltrainlv() const {
  return admiraltrainlv_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
DB_C_Resource::mutable_admiraltrainlv() {
  return &admiraltrainlv_;
}
inline ::google::protobuf::int32 DB_C_Resource::admiraltrainlv(int index) const {
  return admiraltrainlv_.Get(index);
}
inline void DB_C_Resource::set_admiraltrainlv(int index, ::google::protobuf::int32 value) {
  admiraltrainlv_.Set(index, value);
}
inline void DB_C_Resource::add_admiraltrainlv(::google::protobuf::int32 value) {
  admiraltrainlv_.Add(value);
}

// optional int32 pow = 9;
inline bool DB_C_Resource::has_pow() const {
  return _has_bit(8);
}
inline void DB_C_Resource::clear_pow() {
  pow_ = 0;
  _clear_bit(8);
}
inline ::google::protobuf::int32 DB_C_Resource::pow() const {
  return pow_;
}
inline void DB_C_Resource::set_pow(::google::protobuf::int32 value) {
  _set_bit(8);
  pow_ = value;
}

// -------------------------------------------------------------------

// DB_C_GvgCity

// required int32 key = 1;
inline bool DB_C_GvgCity::has_key() const {
  return _has_bit(0);
}
inline void DB_C_GvgCity::clear_key() {
  key_ = 0;
  _clear_bit(0);
}
inline ::google::protobuf::int32 DB_C_GvgCity::key() const {
  return key_;
}
inline void DB_C_GvgCity::set_key(::google::protobuf::int32 value) {
  _set_bit(0);
  key_ = value;
}

// optional int32 region = 2;
inline bool DB_C_GvgCity::has_region() const {
  return _has_bit(1);
}
inline void DB_C_GvgCity::clear_region() {
  region_ = 0;
  _clear_bit(1);
}
inline ::google::protobuf::int32 DB_C_GvgCity::region() const {
  return region_;
}
inline void DB_C_GvgCity::set_region(::google::protobuf::int32 value) {
  _set_bit(1);
  region_ = value;
}

// required int32 cityID = 3;
inline bool DB_C_GvgCity::has_cityid() const {
  return _has_bit(2);
}
inline void DB_C_GvgCity::clear_cityid() {
  cityid_ = 0;
  _clear_bit(2);
}
inline ::google::protobuf::int32 DB_C_GvgCity::cityid() const {
  return cityid_;
}
inline void DB_C_GvgCity::set_cityid(::google::protobuf::int32 value) {
  _set_bit(2);
  cityid_ = value;
}

// optional int32 activeFlag = 4;
inline bool DB_C_GvgCity::has_activeflag() const {
  return _has_bit(3);
}
inline void DB_C_GvgCity::clear_activeflag() {
  activeflag_ = 0;
  _clear_bit(3);
}
inline ::google::protobuf::int32 DB_C_GvgCity::activeflag() const {
  return activeflag_;
}
inline void DB_C_GvgCity::set_activeflag(::google::protobuf::int32 value) {
  _set_bit(3);
  activeflag_ = value;
}

// optional int32 guildID = 5 [default = 0];
inline bool DB_C_GvgCity::has_guildid() const {
  return _has_bit(4);
}
inline void DB_C_GvgCity::clear_guildid() {
  guildid_ = 0;
  _clear_bit(4);
}
inline ::google::protobuf::int32 DB_C_GvgCity::guildid() const {
  return guildid_;
}
inline void DB_C_GvgCity::set_guildid(::google::protobuf::int32 value) {
  _set_bit(4);
  guildid_ = value;
}

// optional int64 ltSaveRevision = 6 [default = 0];
inline bool DB_C_GvgCity::has_ltsaverevision() const {
  return _has_bit(5);
}
inline void DB_C_GvgCity::clear_ltsaverevision() {
  ltsaverevision_ = GOOGLE_LONGLONG(0);
  _clear_bit(5);
}
inline ::google::protobuf::int64 DB_C_GvgCity::ltsaverevision() const {
  return ltsaverevision_;
}
inline void DB_C_GvgCity::set_ltsaverevision(::google::protobuf::int64 value) {
  _set_bit(5);
  ltsaverevision_ = value;
}

// repeated .DB_C_GvgSignMsg signGuildList = 7;
inline int DB_C_GvgCity::signguildlist_size() const {
  return signguildlist_.size();
}
inline void DB_C_GvgCity::clear_signguildlist() {
  signguildlist_.Clear();
}
inline const ::google::protobuf::RepeatedPtrField< ::DB_C_GvgSignMsg >&
DB_C_GvgCity::signguildlist() const {
  return signguildlist_;
}
inline ::google::protobuf::RepeatedPtrField< ::DB_C_GvgSignMsg >*
DB_C_GvgCity::mutable_signguildlist() {
  return &signguildlist_;
}
inline const ::DB_C_GvgSignMsg& DB_C_GvgCity::signguildlist(int index) const {
  return signguildlist_.Get(index);
}
inline ::DB_C_GvgSignMsg* DB_C_GvgCity::mutable_signguildlist(int index) {
  return signguildlist_.Mutable(index);
}
inline ::DB_C_GvgSignMsg* DB_C_GvgCity::add_signguildlist() {
  return signguildlist_.Add();
}

// repeated .DB_C_GvgBtlRet gvgBtl = 8;
inline int DB_C_GvgCity::gvgbtl_size() const {
  return gvgbtl_.size();
}
inline void DB_C_GvgCity::clear_gvgbtl() {
  gvgbtl_.Clear();
}
inline const ::google::protobuf::RepeatedPtrField< ::DB_C_GvgBtlRet >&
DB_C_GvgCity::gvgbtl() const {
  return gvgbtl_;
}
inline ::google::protobuf::RepeatedPtrField< ::DB_C_GvgBtlRet >*
DB_C_GvgCity::mutable_gvgbtl() {
  return &gvgbtl_;
}
inline const ::DB_C_GvgBtlRet& DB_C_GvgCity::gvgbtl(int index) const {
  return gvgbtl_.Get(index);
}
inline ::DB_C_GvgBtlRet* DB_C_GvgCity::mutable_gvgbtl(int index) {
  return gvgbtl_.Mutable(index);
}
inline ::DB_C_GvgBtlRet* DB_C_GvgCity::add_gvgbtl() {
  return gvgbtl_.Add();
}

// optional int32 step = 9;
inline bool DB_C_GvgCity::has_step() const {
  return _has_bit(8);
}
inline void DB_C_GvgCity::clear_step() {
  step_ = 0;
  _clear_bit(8);
}
inline ::google::protobuf::int32 DB_C_GvgCity::step() const {
  return step_;
}
inline void DB_C_GvgCity::set_step(::google::protobuf::int32 value) {
  _set_bit(8);
  step_ = value;
}

// optional int32 guildStreak = 10;
inline bool DB_C_GvgCity::has_guildstreak() const {
  return _has_bit(9);
}
inline void DB_C_GvgCity::clear_guildstreak() {
  guildstreak_ = 0;
  _clear_bit(9);
}
inline ::google::protobuf::int32 DB_C_GvgCity::guildstreak() const {
  return guildstreak_;
}
inline void DB_C_GvgCity::set_guildstreak(::google::protobuf::int32 value) {
  _set_bit(9);
  guildstreak_ = value;
}

// optional int32 cityPoint = 11;
inline bool DB_C_GvgCity::has_citypoint() const {
  return _has_bit(10);
}
inline void DB_C_GvgCity::clear_citypoint() {
  citypoint_ = 0;
  _clear_bit(10);
}
inline ::google::protobuf::int32 DB_C_GvgCity::citypoint() const {
  return citypoint_;
}
inline void DB_C_GvgCity::set_citypoint(::google::protobuf::int32 value) {
  _set_bit(10);
  citypoint_ = value;
}

// -------------------------------------------------------------------

// DB_C_GvgSignMsg

// optional int32 guildID = 1;
inline bool DB_C_GvgSignMsg::has_guildid() const {
  return _has_bit(0);
}
inline void DB_C_GvgSignMsg::clear_guildid() {
  guildid_ = 0;
  _clear_bit(0);
}
inline ::google::protobuf::int32 DB_C_GvgSignMsg::guildid() const {
  return guildid_;
}
inline void DB_C_GvgSignMsg::set_guildid(::google::protobuf::int32 value) {
  _set_bit(0);
  guildid_ = value;
}

// optional int32 guildContribute = 2;
inline bool DB_C_GvgSignMsg::has_guildcontribute() const {
  return _has_bit(1);
}
inline void DB_C_GvgSignMsg::clear_guildcontribute() {
  guildcontribute_ = 0;
  _clear_bit(1);
}
inline ::google::protobuf::int32 DB_C_GvgSignMsg::guildcontribute() const {
  return guildcontribute_;
}
inline void DB_C_GvgSignMsg::set_guildcontribute(::google::protobuf::int32 value) {
  _set_bit(1);
  guildcontribute_ = value;
}

// -------------------------------------------------------------------

// DB_C_GvgBtlRet

// optional int32 guildID1 = 1;
inline bool DB_C_GvgBtlRet::has_guildid1() const {
  return _has_bit(0);
}
inline void DB_C_GvgBtlRet::clear_guildid1() {
  guildid1_ = 0;
  _clear_bit(0);
}
inline ::google::protobuf::int32 DB_C_GvgBtlRet::guildid1() const {
  return guildid1_;
}
inline void DB_C_GvgBtlRet::set_guildid1(::google::protobuf::int32 value) {
  _set_bit(0);
  guildid1_ = value;
}

// optional int32 guildID2 = 2;
inline bool DB_C_GvgBtlRet::has_guildid2() const {
  return _has_bit(1);
}
inline void DB_C_GvgBtlRet::clear_guildid2() {
  guildid2_ = 0;
  _clear_bit(1);
}
inline ::google::protobuf::int32 DB_C_GvgBtlRet::guildid2() const {
  return guildid2_;
}
inline void DB_C_GvgBtlRet::set_guildid2(::google::protobuf::int32 value) {
  _set_bit(1);
  guildid2_ = value;
}

// optional int32 session = 3;
inline bool DB_C_GvgBtlRet::has_session() const {
  return _has_bit(2);
}
inline void DB_C_GvgBtlRet::clear_session() {
  session_ = 0;
  _clear_bit(2);
}
inline ::google::protobuf::int32 DB_C_GvgBtlRet::session() const {
  return session_;
}
inline void DB_C_GvgBtlRet::set_session(::google::protobuf::int32 value) {
  _set_bit(2);
  session_ = value;
}

// optional int32 winGuildID = 4 [default = -1];
inline bool DB_C_GvgBtlRet::has_winguildid() const {
  return _has_bit(3);
}
inline void DB_C_GvgBtlRet::clear_winguildid() {
  winguildid_ = -1;
  _clear_bit(3);
}
inline ::google::protobuf::int32 DB_C_GvgBtlRet::winguildid() const {
  return winguildid_;
}
inline void DB_C_GvgBtlRet::set_winguildid(::google::protobuf::int32 value) {
  _set_bit(3);
  winguildid_ = value;
}

// optional int32 cityID = 5;
inline bool DB_C_GvgBtlRet::has_cityid() const {
  return _has_bit(4);
}
inline void DB_C_GvgBtlRet::clear_cityid() {
  cityid_ = 0;
  _clear_bit(4);
}
inline ::google::protobuf::int32 DB_C_GvgBtlRet::cityid() const {
  return cityid_;
}
inline void DB_C_GvgBtlRet::set_cityid(::google::protobuf::int32 value) {
  _set_bit(4);
  cityid_ = value;
}

// optional int32 round = 6;
inline bool DB_C_GvgBtlRet::has_round() const {
  return _has_bit(5);
}
inline void DB_C_GvgBtlRet::clear_round() {
  round_ = 0;
  _clear_bit(5);
}
inline ::google::protobuf::int32 DB_C_GvgBtlRet::round() const {
  return round_;
}
inline void DB_C_GvgBtlRet::set_round(::google::protobuf::int32 value) {
  _set_bit(5);
  round_ = value;
}

// optional bool bWinByFight = 7 [default = true];
inline bool DB_C_GvgBtlRet::has_bwinbyfight() const {
  return _has_bit(6);
}
inline void DB_C_GvgBtlRet::clear_bwinbyfight() {
  bwinbyfight_ = true;
  _clear_bit(6);
}
inline bool DB_C_GvgBtlRet::bwinbyfight() const {
  return bwinbyfight_;
}
inline void DB_C_GvgBtlRet::set_bwinbyfight(bool value) {
  _set_bit(6);
  bwinbyfight_ = value;
}

// -------------------------------------------------------------------

// DB_C_GvgBtlPlayerMsg

// optional int64 userID = 1;
inline bool DB_C_GvgBtlPlayerMsg::has_userid() const {
  return _has_bit(0);
}
inline void DB_C_GvgBtlPlayerMsg::clear_userid() {
  userid_ = GOOGLE_LONGLONG(0);
  _clear_bit(0);
}
inline ::google::protobuf::int64 DB_C_GvgBtlPlayerMsg::userid() const {
  return userid_;
}
inline void DB_C_GvgBtlPlayerMsg::set_userid(::google::protobuf::int64 value) {
  _set_bit(0);
  userid_ = value;
}

// optional int32 winTime = 2;
inline bool DB_C_GvgBtlPlayerMsg::has_wintime() const {
  return _has_bit(1);
}
inline void DB_C_GvgBtlPlayerMsg::clear_wintime() {
  wintime_ = 0;
  _clear_bit(1);
}
inline ::google::protobuf::int32 DB_C_GvgBtlPlayerMsg::wintime() const {
  return wintime_;
}
inline void DB_C_GvgBtlPlayerMsg::set_wintime(::google::protobuf::int32 value) {
  _set_bit(1);
  wintime_ = value;
}

// optional int32 leftHp = 3;
inline bool DB_C_GvgBtlPlayerMsg::has_lefthp() const {
  return _has_bit(2);
}
inline void DB_C_GvgBtlPlayerMsg::clear_lefthp() {
  lefthp_ = 0;
  _clear_bit(2);
}
inline ::google::protobuf::int32 DB_C_GvgBtlPlayerMsg::lefthp() const {
  return lefthp_;
}
inline void DB_C_GvgBtlPlayerMsg::set_lefthp(::google::protobuf::int32 value) {
  _set_bit(2);
  lefthp_ = value;
}

// optional int32 way = 4;
inline bool DB_C_GvgBtlPlayerMsg::has_way() const {
  return _has_bit(3);
}
inline void DB_C_GvgBtlPlayerMsg::clear_way() {
  way_ = 0;
  _clear_bit(3);
}
inline ::google::protobuf::int32 DB_C_GvgBtlPlayerMsg::way() const {
  return way_;
}
inline void DB_C_GvgBtlPlayerMsg::set_way(::google::protobuf::int32 value) {
  _set_bit(3);
  way_ = value;
}

// -------------------------------------------------------------------

// DB_C_GvgBtlRetSave

// optional int32 winGuildID = 1;
inline bool DB_C_GvgBtlRetSave::has_winguildid() const {
  return _has_bit(0);
}
inline void DB_C_GvgBtlRetSave::clear_winguildid() {
  winguildid_ = 0;
  _clear_bit(0);
}
inline ::google::protobuf::int32 DB_C_GvgBtlRetSave::winguildid() const {
  return winguildid_;
}
inline void DB_C_GvgBtlRetSave::set_winguildid(::google::protobuf::int32 value) {
  _set_bit(0);
  winguildid_ = value;
}

// optional int32 guildID1 = 2;
inline bool DB_C_GvgBtlRetSave::has_guildid1() const {
  return _has_bit(1);
}
inline void DB_C_GvgBtlRetSave::clear_guildid1() {
  guildid1_ = 0;
  _clear_bit(1);
}
inline ::google::protobuf::int32 DB_C_GvgBtlRetSave::guildid1() const {
  return guildid1_;
}
inline void DB_C_GvgBtlRetSave::set_guildid1(::google::protobuf::int32 value) {
  _set_bit(1);
  guildid1_ = value;
}

// optional int32 guildID2 = 3;
inline bool DB_C_GvgBtlRetSave::has_guildid2() const {
  return _has_bit(2);
}
inline void DB_C_GvgBtlRetSave::clear_guildid2() {
  guildid2_ = 0;
  _clear_bit(2);
}
inline ::google::protobuf::int32 DB_C_GvgBtlRetSave::guildid2() const {
  return guildid2_;
}
inline void DB_C_GvgBtlRetSave::set_guildid2(::google::protobuf::int32 value) {
  _set_bit(2);
  guildid2_ = value;
}

// optional int32 session = 4;
inline bool DB_C_GvgBtlRetSave::has_session() const {
  return _has_bit(3);
}
inline void DB_C_GvgBtlRetSave::clear_session() {
  session_ = 0;
  _clear_bit(3);
}
inline ::google::protobuf::int32 DB_C_GvgBtlRetSave::session() const {
  return session_;
}
inline void DB_C_GvgBtlRetSave::set_session(::google::protobuf::int32 value) {
  _set_bit(3);
  session_ = value;
}

// optional int32 cityID = 5;
inline bool DB_C_GvgBtlRetSave::has_cityid() const {
  return _has_bit(4);
}
inline void DB_C_GvgBtlRetSave::clear_cityid() {
  cityid_ = 0;
  _clear_bit(4);
}
inline ::google::protobuf::int32 DB_C_GvgBtlRetSave::cityid() const {
  return cityid_;
}
inline void DB_C_GvgBtlRetSave::set_cityid(::google::protobuf::int32 value) {
  _set_bit(4);
  cityid_ = value;
}

// optional int32 region = 6;
inline bool DB_C_GvgBtlRetSave::has_region() const {
  return _has_bit(5);
}
inline void DB_C_GvgBtlRetSave::clear_region() {
  region_ = 0;
  _clear_bit(5);
}
inline ::google::protobuf::int32 DB_C_GvgBtlRetSave::region() const {
  return region_;
}
inline void DB_C_GvgBtlRetSave::set_region(::google::protobuf::int32 value) {
  _set_bit(5);
  region_ = value;
}

// repeated .DB_C_GvgBtlRetWay retWay = 7;
inline int DB_C_GvgBtlRetSave::retway_size() const {
  return retway_.size();
}
inline void DB_C_GvgBtlRetSave::clear_retway() {
  retway_.Clear();
}
inline const ::google::protobuf::RepeatedPtrField< ::DB_C_GvgBtlRetWay >&
DB_C_GvgBtlRetSave::retway() const {
  return retway_;
}
inline ::google::protobuf::RepeatedPtrField< ::DB_C_GvgBtlRetWay >*
DB_C_GvgBtlRetSave::mutable_retway() {
  return &retway_;
}
inline const ::DB_C_GvgBtlRetWay& DB_C_GvgBtlRetSave::retway(int index) const {
  return retway_.Get(index);
}
inline ::DB_C_GvgBtlRetWay* DB_C_GvgBtlRetSave::mutable_retway(int index) {
  return retway_.Mutable(index);
}
inline ::DB_C_GvgBtlRetWay* DB_C_GvgBtlRetSave::add_retway() {
  return retway_.Add();
}

// optional int32 playerCnt1 = 8;
inline bool DB_C_GvgBtlRetSave::has_playercnt1() const {
  return _has_bit(7);
}
inline void DB_C_GvgBtlRetSave::clear_playercnt1() {
  playercnt1_ = 0;
  _clear_bit(7);
}
inline ::google::protobuf::int32 DB_C_GvgBtlRetSave::playercnt1() const {
  return playercnt1_;
}
inline void DB_C_GvgBtlRetSave::set_playercnt1(::google::protobuf::int32 value) {
  _set_bit(7);
  playercnt1_ = value;
}

// optional int32 playerCnt2 = 9;
inline bool DB_C_GvgBtlRetSave::has_playercnt2() const {
  return _has_bit(8);
}
inline void DB_C_GvgBtlRetSave::clear_playercnt2() {
  playercnt2_ = 0;
  _clear_bit(8);
}
inline ::google::protobuf::int32 DB_C_GvgBtlRetSave::playercnt2() const {
  return playercnt2_;
}
inline void DB_C_GvgBtlRetSave::set_playercnt2(::google::protobuf::int32 value) {
  _set_bit(8);
  playercnt2_ = value;
}

// -------------------------------------------------------------------

// DB_C_GvgBtlRetWay

// optional int32 way = 1;
inline bool DB_C_GvgBtlRetWay::has_way() const {
  return _has_bit(0);
}
inline void DB_C_GvgBtlRetWay::clear_way() {
  way_ = 0;
  _clear_bit(0);
}
inline ::google::protobuf::int32 DB_C_GvgBtlRetWay::way() const {
  return way_;
}
inline void DB_C_GvgBtlRetWay::set_way(::google::protobuf::int32 value) {
  _set_bit(0);
  way_ = value;
}

// optional int32 winGuildID = 2;
inline bool DB_C_GvgBtlRetWay::has_winguildid() const {
  return _has_bit(1);
}
inline void DB_C_GvgBtlRetWay::clear_winguildid() {
  winguildid_ = 0;
  _clear_bit(1);
}
inline ::google::protobuf::int32 DB_C_GvgBtlRetWay::winguildid() const {
  return winguildid_;
}
inline void DB_C_GvgBtlRetWay::set_winguildid(::google::protobuf::int32 value) {
  _set_bit(1);
  winguildid_ = value;
}

// optional int32 guildID1 = 3;
inline bool DB_C_GvgBtlRetWay::has_guildid1() const {
  return _has_bit(2);
}
inline void DB_C_GvgBtlRetWay::clear_guildid1() {
  guildid1_ = 0;
  _clear_bit(2);
}
inline ::google::protobuf::int32 DB_C_GvgBtlRetWay::guildid1() const {
  return guildid1_;
}
inline void DB_C_GvgBtlRetWay::set_guildid1(::google::protobuf::int32 value) {
  _set_bit(2);
  guildid1_ = value;
}

// optional int32 guildID2 = 4;
inline bool DB_C_GvgBtlRetWay::has_guildid2() const {
  return _has_bit(3);
}
inline void DB_C_GvgBtlRetWay::clear_guildid2() {
  guildid2_ = 0;
  _clear_bit(3);
}
inline ::google::protobuf::int32 DB_C_GvgBtlRetWay::guildid2() const {
  return guildid2_;
}
inline void DB_C_GvgBtlRetWay::set_guildid2(::google::protobuf::int32 value) {
  _set_bit(3);
  guildid2_ = value;
}

// optional int32 session = 5;
inline bool DB_C_GvgBtlRetWay::has_session() const {
  return _has_bit(4);
}
inline void DB_C_GvgBtlRetWay::clear_session() {
  session_ = 0;
  _clear_bit(4);
}
inline ::google::protobuf::int32 DB_C_GvgBtlRetWay::session() const {
  return session_;
}
inline void DB_C_GvgBtlRetWay::set_session(::google::protobuf::int32 value) {
  _set_bit(4);
  session_ = value;
}

// optional int32 cityID = 6;
inline bool DB_C_GvgBtlRetWay::has_cityid() const {
  return _has_bit(5);
}
inline void DB_C_GvgBtlRetWay::clear_cityid() {
  cityid_ = 0;
  _clear_bit(5);
}
inline ::google::protobuf::int32 DB_C_GvgBtlRetWay::cityid() const {
  return cityid_;
}
inline void DB_C_GvgBtlRetWay::set_cityid(::google::protobuf::int32 value) {
  _set_bit(5);
  cityid_ = value;
}

// repeated .DB_C_GuildBtlUser userLst1 = 7;
inline int DB_C_GvgBtlRetWay::userlst1_size() const {
  return userlst1_.size();
}
inline void DB_C_GvgBtlRetWay::clear_userlst1() {
  userlst1_.Clear();
}
inline const ::google::protobuf::RepeatedPtrField< ::DB_C_GuildBtlUser >&
DB_C_GvgBtlRetWay::userlst1() const {
  return userlst1_;
}
inline ::google::protobuf::RepeatedPtrField< ::DB_C_GuildBtlUser >*
DB_C_GvgBtlRetWay::mutable_userlst1() {
  return &userlst1_;
}
inline const ::DB_C_GuildBtlUser& DB_C_GvgBtlRetWay::userlst1(int index) const {
  return userlst1_.Get(index);
}
inline ::DB_C_GuildBtlUser* DB_C_GvgBtlRetWay::mutable_userlst1(int index) {
  return userlst1_.Mutable(index);
}
inline ::DB_C_GuildBtlUser* DB_C_GvgBtlRetWay::add_userlst1() {
  return userlst1_.Add();
}

// repeated .DB_C_GuildBtlUser userLst2 = 8;
inline int DB_C_GvgBtlRetWay::userlst2_size() const {
  return userlst2_.size();
}
inline void DB_C_GvgBtlRetWay::clear_userlst2() {
  userlst2_.Clear();
}
inline const ::google::protobuf::RepeatedPtrField< ::DB_C_GuildBtlUser >&
DB_C_GvgBtlRetWay::userlst2() const {
  return userlst2_;
}
inline ::google::protobuf::RepeatedPtrField< ::DB_C_GuildBtlUser >*
DB_C_GvgBtlRetWay::mutable_userlst2() {
  return &userlst2_;
}
inline const ::DB_C_GuildBtlUser& DB_C_GvgBtlRetWay::userlst2(int index) const {
  return userlst2_.Get(index);
}
inline ::DB_C_GuildBtlUser* DB_C_GvgBtlRetWay::mutable_userlst2(int index) {
  return userlst2_.Mutable(index);
}
inline ::DB_C_GuildBtlUser* DB_C_GvgBtlRetWay::add_userlst2() {
  return userlst2_.Add();
}

// repeated .DB_C_GuildBtlUserPK pkLst = 9;
inline int DB_C_GvgBtlRetWay::pklst_size() const {
  return pklst_.size();
}
inline void DB_C_GvgBtlRetWay::clear_pklst() {
  pklst_.Clear();
}
inline const ::google::protobuf::RepeatedPtrField< ::DB_C_GuildBtlUserPK >&
DB_C_GvgBtlRetWay::pklst() const {
  return pklst_;
}
inline ::google::protobuf::RepeatedPtrField< ::DB_C_GuildBtlUserPK >*
DB_C_GvgBtlRetWay::mutable_pklst() {
  return &pklst_;
}
inline const ::DB_C_GuildBtlUserPK& DB_C_GvgBtlRetWay::pklst(int index) const {
  return pklst_.Get(index);
}
inline ::DB_C_GuildBtlUserPK* DB_C_GvgBtlRetWay::mutable_pklst(int index) {
  return pklst_.Mutable(index);
}
inline ::DB_C_GuildBtlUserPK* DB_C_GvgBtlRetWay::add_pklst() {
  return pklst_.Add();
}

// -------------------------------------------------------------------

// DB_C_Gvg_FightSendData

// optional .DB_C_GuildBtlUser btlUser = 1;
inline bool DB_C_Gvg_FightSendData::has_btluser() const {
  return _has_bit(0);
}
inline void DB_C_Gvg_FightSendData::clear_btluser() {
  if (btluser_ != NULL) btluser_->::DB_C_GuildBtlUser::Clear();
  _clear_bit(0);
}
inline const ::DB_C_GuildBtlUser& DB_C_Gvg_FightSendData::btluser() const {
  return btluser_ != NULL ? *btluser_ : *default_instance_->btluser_;
}
inline ::DB_C_GuildBtlUser* DB_C_Gvg_FightSendData::mutable_btluser() {
  _set_bit(0);
  if (btluser_ == NULL) btluser_ = new ::DB_C_GuildBtlUser;
  return btluser_;
}

// repeated .DB_C_GuildBtlSendDataUnit fightsenddata = 2;
inline int DB_C_Gvg_FightSendData::fightsenddata_size() const {
  return fightsenddata_.size();
}
inline void DB_C_Gvg_FightSendData::clear_fightsenddata() {
  fightsenddata_.Clear();
}
inline const ::google::protobuf::RepeatedPtrField< ::DB_C_GuildBtlSendDataUnit >&
DB_C_Gvg_FightSendData::fightsenddata() const {
  return fightsenddata_;
}
inline ::google::protobuf::RepeatedPtrField< ::DB_C_GuildBtlSendDataUnit >*
DB_C_Gvg_FightSendData::mutable_fightsenddata() {
  return &fightsenddata_;
}
inline const ::DB_C_GuildBtlSendDataUnit& DB_C_Gvg_FightSendData::fightsenddata(int index) const {
  return fightsenddata_.Get(index);
}
inline ::DB_C_GuildBtlSendDataUnit* DB_C_Gvg_FightSendData::mutable_fightsenddata(int index) {
  return fightsenddata_.Mutable(index);
}
inline ::DB_C_GuildBtlSendDataUnit* DB_C_Gvg_FightSendData::add_fightsenddata() {
  return fightsenddata_.Add();
}

// -------------------------------------------------------------------

// DB_C_GVG_Msg

// optional int32 flag = 1 [default = 0];
inline bool DB_C_GVG_Msg::has_flag() const {
  return _has_bit(0);
}
inline void DB_C_GVG_Msg::clear_flag() {
  flag_ = 0;
  _clear_bit(0);
}
inline ::google::protobuf::int32 DB_C_GVG_Msg::flag() const {
  return flag_;
}
inline void DB_C_GVG_Msg::set_flag(::google::protobuf::int32 value) {
  _set_bit(0);
  flag_ = value;
}

// repeated int32 signCity = 2;
inline int DB_C_GVG_Msg::signcity_size() const {
  return signcity_.size();
}
inline void DB_C_GVG_Msg::clear_signcity() {
  signcity_.Clear();
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
DB_C_GVG_Msg::signcity() const {
  return signcity_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
DB_C_GVG_Msg::mutable_signcity() {
  return &signcity_;
}
inline ::google::protobuf::int32 DB_C_GVG_Msg::signcity(int index) const {
  return signcity_.Get(index);
}
inline void DB_C_GVG_Msg::set_signcity(int index, ::google::protobuf::int32 value) {
  signcity_.Set(index, value);
}
inline void DB_C_GVG_Msg::add_signcity(::google::protobuf::int32 value) {
  signcity_.Add(value);
}

// optional int32 controlCity = 3;
inline bool DB_C_GVG_Msg::has_controlcity() const {
  return _has_bit(2);
}
inline void DB_C_GVG_Msg::clear_controlcity() {
  controlcity_ = 0;
  _clear_bit(2);
}
inline ::google::protobuf::int32 DB_C_GVG_Msg::controlcity() const {
  return controlcity_;
}
inline void DB_C_GVG_Msg::set_controlcity(::google::protobuf::int32 value) {
  _set_bit(2);
  controlcity_ = value;
}

// optional int32 contribute = 4;
inline bool DB_C_GVG_Msg::has_contribute() const {
  return _has_bit(3);
}
inline void DB_C_GVG_Msg::clear_contribute() {
  contribute_ = 0;
  _clear_bit(3);
}
inline ::google::protobuf::int32 DB_C_GVG_Msg::contribute() const {
  return contribute_;
}
inline void DB_C_GVG_Msg::set_contribute(::google::protobuf::int32 value) {
  _set_bit(3);
  contribute_ = value;
}

// repeated .DB_C_GvgBtlCityMsg userWay = 5;
inline int DB_C_GVG_Msg::userway_size() const {
  return userway_.size();
}
inline void DB_C_GVG_Msg::clear_userway() {
  userway_.Clear();
}
inline const ::google::protobuf::RepeatedPtrField< ::DB_C_GvgBtlCityMsg >&
DB_C_GVG_Msg::userway() const {
  return userway_;
}
inline ::google::protobuf::RepeatedPtrField< ::DB_C_GvgBtlCityMsg >*
DB_C_GVG_Msg::mutable_userway() {
  return &userway_;
}
inline const ::DB_C_GvgBtlCityMsg& DB_C_GVG_Msg::userway(int index) const {
  return userway_.Get(index);
}
inline ::DB_C_GvgBtlCityMsg* DB_C_GVG_Msg::mutable_userway(int index) {
  return userway_.Mutable(index);
}
inline ::DB_C_GvgBtlCityMsg* DB_C_GVG_Msg::add_userway() {
  return userway_.Add();
}

// repeated .DB_C_GvgBtlAddProp addProp = 6;
inline int DB_C_GVG_Msg::addprop_size() const {
  return addprop_.size();
}
inline void DB_C_GVG_Msg::clear_addprop() {
  addprop_.Clear();
}
inline const ::google::protobuf::RepeatedPtrField< ::DB_C_GvgBtlAddProp >&
DB_C_GVG_Msg::addprop() const {
  return addprop_;
}
inline ::google::protobuf::RepeatedPtrField< ::DB_C_GvgBtlAddProp >*
DB_C_GVG_Msg::mutable_addprop() {
  return &addprop_;
}
inline const ::DB_C_GvgBtlAddProp& DB_C_GVG_Msg::addprop(int index) const {
  return addprop_.Get(index);
}
inline ::DB_C_GvgBtlAddProp* DB_C_GVG_Msg::mutable_addprop(int index) {
  return addprop_.Mutable(index);
}
inline ::DB_C_GvgBtlAddProp* DB_C_GVG_Msg::add_addprop() {
  return addprop_.Add();
}

// optional bool fightEnd = 7 [default = false];
inline bool DB_C_GVG_Msg::has_fightend() const {
  return _has_bit(6);
}
inline void DB_C_GVG_Msg::clear_fightend() {
  fightend_ = false;
  _clear_bit(6);
}
inline bool DB_C_GVG_Msg::fightend() const {
  return fightend_;
}
inline void DB_C_GVG_Msg::set_fightend(bool value) {
  _set_bit(6);
  fightend_ = value;
}

// optional int32 lastContributeTime = 8 [default = 0];
inline bool DB_C_GVG_Msg::has_lastcontributetime() const {
  return _has_bit(7);
}
inline void DB_C_GVG_Msg::clear_lastcontributetime() {
  lastcontributetime_ = 0;
  _clear_bit(7);
}
inline ::google::protobuf::int32 DB_C_GVG_Msg::lastcontributetime() const {
  return lastcontributetime_;
}
inline void DB_C_GVG_Msg::set_lastcontributetime(::google::protobuf::int32 value) {
  _set_bit(7);
  lastcontributetime_ = value;
}

// optional int32 state = 9 [default = 0];
inline bool DB_C_GVG_Msg::has_state() const {
  return _has_bit(8);
}
inline void DB_C_GVG_Msg::clear_state() {
  state_ = 0;
  _clear_bit(8);
}
inline ::google::protobuf::int32 DB_C_GVG_Msg::state() const {
  return state_;
}
inline void DB_C_GVG_Msg::set_state(::google::protobuf::int32 value) {
  _set_bit(8);
  state_ = value;
}

// optional int32 contributeRecorcd = 10;
inline bool DB_C_GVG_Msg::has_contributerecorcd() const {
  return _has_bit(9);
}
inline void DB_C_GVG_Msg::clear_contributerecorcd() {
  contributerecorcd_ = 0;
  _clear_bit(9);
}
inline ::google::protobuf::int32 DB_C_GVG_Msg::contributerecorcd() const {
  return contributerecorcd_;
}
inline void DB_C_GVG_Msg::set_contributerecorcd(::google::protobuf::int32 value) {
  _set_bit(9);
  contributerecorcd_ = value;
}

// repeated .DB_C_GVG_Reward_Record rewardRecord = 11;
inline int DB_C_GVG_Msg::rewardrecord_size() const {
  return rewardrecord_.size();
}
inline void DB_C_GVG_Msg::clear_rewardrecord() {
  rewardrecord_.Clear();
}
inline const ::google::protobuf::RepeatedPtrField< ::DB_C_GVG_Reward_Record >&
DB_C_GVG_Msg::rewardrecord() const {
  return rewardrecord_;
}
inline ::google::protobuf::RepeatedPtrField< ::DB_C_GVG_Reward_Record >*
DB_C_GVG_Msg::mutable_rewardrecord() {
  return &rewardrecord_;
}
inline const ::DB_C_GVG_Reward_Record& DB_C_GVG_Msg::rewardrecord(int index) const {
  return rewardrecord_.Get(index);
}
inline ::DB_C_GVG_Reward_Record* DB_C_GVG_Msg::mutable_rewardrecord(int index) {
  return rewardrecord_.Mutable(index);
}
inline ::DB_C_GVG_Reward_Record* DB_C_GVG_Msg::add_rewardrecord() {
  return rewardrecord_.Add();
}

// repeated int64 playerID = 12;
inline int DB_C_GVG_Msg::playerid_size() const {
  return playerid_.size();
}
inline void DB_C_GVG_Msg::clear_playerid() {
  playerid_.Clear();
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
DB_C_GVG_Msg::playerid() const {
  return playerid_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
DB_C_GVG_Msg::mutable_playerid() {
  return &playerid_;
}
inline ::google::protobuf::int64 DB_C_GVG_Msg::playerid(int index) const {
  return playerid_.Get(index);
}
inline void DB_C_GVG_Msg::set_playerid(int index, ::google::protobuf::int64 value) {
  playerid_.Set(index, value);
}
inline void DB_C_GVG_Msg::add_playerid(::google::protobuf::int64 value) {
  playerid_.Add(value);
}

// -------------------------------------------------------------------

// DB_C_GvgBtlCityMsg

// optional int32 cityID = 1;
inline bool DB_C_GvgBtlCityMsg::has_cityid() const {
  return _has_bit(0);
}
inline void DB_C_GvgBtlCityMsg::clear_cityid() {
  cityid_ = 0;
  _clear_bit(0);
}
inline ::google::protobuf::int32 DB_C_GvgBtlCityMsg::cityid() const {
  return cityid_;
}
inline void DB_C_GvgBtlCityMsg::set_cityid(::google::protobuf::int32 value) {
  _set_bit(0);
  cityid_ = value;
}

// repeated int64 userWay1 = 2;
inline int DB_C_GvgBtlCityMsg::userway1_size() const {
  return userway1_.size();
}
inline void DB_C_GvgBtlCityMsg::clear_userway1() {
  userway1_.Clear();
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
DB_C_GvgBtlCityMsg::userway1() const {
  return userway1_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
DB_C_GvgBtlCityMsg::mutable_userway1() {
  return &userway1_;
}
inline ::google::protobuf::int64 DB_C_GvgBtlCityMsg::userway1(int index) const {
  return userway1_.Get(index);
}
inline void DB_C_GvgBtlCityMsg::set_userway1(int index, ::google::protobuf::int64 value) {
  userway1_.Set(index, value);
}
inline void DB_C_GvgBtlCityMsg::add_userway1(::google::protobuf::int64 value) {
  userway1_.Add(value);
}

// optional int32 signupCnt = 3;
inline bool DB_C_GvgBtlCityMsg::has_signupcnt() const {
  return _has_bit(2);
}
inline void DB_C_GvgBtlCityMsg::clear_signupcnt() {
  signupcnt_ = 0;
  _clear_bit(2);
}
inline ::google::protobuf::int32 DB_C_GvgBtlCityMsg::signupcnt() const {
  return signupcnt_;
}
inline void DB_C_GvgBtlCityMsg::set_signupcnt(::google::protobuf::int32 value) {
  _set_bit(2);
  signupcnt_ = value;
}

// optional int32 session = 4;
inline bool DB_C_GvgBtlCityMsg::has_session() const {
  return _has_bit(3);
}
inline void DB_C_GvgBtlCityMsg::clear_session() {
  session_ = 0;
  _clear_bit(3);
}
inline ::google::protobuf::int32 DB_C_GvgBtlCityMsg::session() const {
  return session_;
}
inline void DB_C_GvgBtlCityMsg::set_session(::google::protobuf::int32 value) {
  _set_bit(3);
  session_ = value;
}

// -------------------------------------------------------------------

// DB_C_GvgBtlAddProp

// optional int64 userID = 1;
inline bool DB_C_GvgBtlAddProp::has_userid() const {
  return _has_bit(0);
}
inline void DB_C_GvgBtlAddProp::clear_userid() {
  userid_ = GOOGLE_LONGLONG(0);
  _clear_bit(0);
}
inline ::google::protobuf::int64 DB_C_GvgBtlAddProp::userid() const {
  return userid_;
}
inline void DB_C_GvgBtlAddProp::set_userid(::google::protobuf::int64 value) {
  _set_bit(0);
  userid_ = value;
}

// optional int32 addAtkPct = 2;
inline bool DB_C_GvgBtlAddProp::has_addatkpct() const {
  return _has_bit(1);
}
inline void DB_C_GvgBtlAddProp::clear_addatkpct() {
  addatkpct_ = 0;
  _clear_bit(1);
}
inline ::google::protobuf::int32 DB_C_GvgBtlAddProp::addatkpct() const {
  return addatkpct_;
}
inline void DB_C_GvgBtlAddProp::set_addatkpct(::google::protobuf::int32 value) {
  _set_bit(1);
  addatkpct_ = value;
}

// optional int32 addBloodPct = 3;
inline bool DB_C_GvgBtlAddProp::has_addbloodpct() const {
  return _has_bit(2);
}
inline void DB_C_GvgBtlAddProp::clear_addbloodpct() {
  addbloodpct_ = 0;
  _clear_bit(2);
}
inline ::google::protobuf::int32 DB_C_GvgBtlAddProp::addbloodpct() const {
  return addbloodpct_;
}
inline void DB_C_GvgBtlAddProp::set_addbloodpct(::google::protobuf::int32 value) {
  _set_bit(2);
  addbloodpct_ = value;
}

// optional int32 maxWinTime = 4;
inline bool DB_C_GvgBtlAddProp::has_maxwintime() const {
  return _has_bit(3);
}
inline void DB_C_GvgBtlAddProp::clear_maxwintime() {
  maxwintime_ = 0;
  _clear_bit(3);
}
inline ::google::protobuf::int32 DB_C_GvgBtlAddProp::maxwintime() const {
  return maxwintime_;
}
inline void DB_C_GvgBtlAddProp::set_maxwintime(::google::protobuf::int32 value) {
  _set_bit(3);
  maxwintime_ = value;
}

// optional int32 winTime = 5;
inline bool DB_C_GvgBtlAddProp::has_wintime() const {
  return _has_bit(4);
}
inline void DB_C_GvgBtlAddProp::clear_wintime() {
  wintime_ = 0;
  _clear_bit(4);
}
inline ::google::protobuf::int32 DB_C_GvgBtlAddProp::wintime() const {
  return wintime_;
}
inline void DB_C_GvgBtlAddProp::set_wintime(::google::protobuf::int32 value) {
  _set_bit(4);
  wintime_ = value;
}

// optional int32 leftHP = 6;
inline bool DB_C_GvgBtlAddProp::has_lefthp() const {
  return _has_bit(5);
}
inline void DB_C_GvgBtlAddProp::clear_lefthp() {
  lefthp_ = 0;
  _clear_bit(5);
}
inline ::google::protobuf::int32 DB_C_GvgBtlAddProp::lefthp() const {
  return lefthp_;
}
inline void DB_C_GvgBtlAddProp::set_lefthp(::google::protobuf::int32 value) {
  _set_bit(5);
  lefthp_ = value;
}

// optional int32 session = 7;
inline bool DB_C_GvgBtlAddProp::has_session() const {
  return _has_bit(6);
}
inline void DB_C_GvgBtlAddProp::clear_session() {
  session_ = 0;
  _clear_bit(6);
}
inline ::google::protobuf::int32 DB_C_GvgBtlAddProp::session() const {
  return session_;
}
inline void DB_C_GvgBtlAddProp::set_session(::google::protobuf::int32 value) {
  _set_bit(6);
  session_ = value;
}

// optional string name = 8;
inline bool DB_C_GvgBtlAddProp::has_name() const {
  return _has_bit(7);
}
inline void DB_C_GvgBtlAddProp::clear_name() {
  if (name_ != &_default_name_) {
    name_->clear();
  }
  _clear_bit(7);
}
inline const ::std::string& DB_C_GvgBtlAddProp::name() const {
  return *name_;
}
inline void DB_C_GvgBtlAddProp::set_name(const ::std::string& value) {
  _set_bit(7);
  if (name_ == &_default_name_) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void DB_C_GvgBtlAddProp::set_name(const char* value) {
  _set_bit(7);
  if (name_ == &_default_name_) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void DB_C_GvgBtlAddProp::set_name(const char* value, size_t size) {
  _set_bit(7);
  if (name_ == &_default_name_) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* DB_C_GvgBtlAddProp::mutable_name() {
  _set_bit(7);
  if (name_ == &_default_name_) {
    name_ = new ::std::string;
  }
  return name_;
}

// optional string pic = 9;
inline bool DB_C_GvgBtlAddProp::has_pic() const {
  return _has_bit(8);
}
inline void DB_C_GvgBtlAddProp::clear_pic() {
  if (pic_ != &_default_pic_) {
    pic_->clear();
  }
  _clear_bit(8);
}
inline const ::std::string& DB_C_GvgBtlAddProp::pic() const {
  return *pic_;
}
inline void DB_C_GvgBtlAddProp::set_pic(const ::std::string& value) {
  _set_bit(8);
  if (pic_ == &_default_pic_) {
    pic_ = new ::std::string;
  }
  pic_->assign(value);
}
inline void DB_C_GvgBtlAddProp::set_pic(const char* value) {
  _set_bit(8);
  if (pic_ == &_default_pic_) {
    pic_ = new ::std::string;
  }
  pic_->assign(value);
}
inline void DB_C_GvgBtlAddProp::set_pic(const char* value, size_t size) {
  _set_bit(8);
  if (pic_ == &_default_pic_) {
    pic_ = new ::std::string;
  }
  pic_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* DB_C_GvgBtlAddProp::mutable_pic() {
  _set_bit(8);
  if (pic_ == &_default_pic_) {
    pic_ = new ::std::string;
  }
  return pic_;
}

// optional bool isOffLine = 10 [default = false];
inline bool DB_C_GvgBtlAddProp::has_isoffline() const {
  return _has_bit(9);
}
inline void DB_C_GvgBtlAddProp::clear_isoffline() {
  isoffline_ = false;
  _clear_bit(9);
}
inline bool DB_C_GvgBtlAddProp::isoffline() const {
  return isoffline_;
}
inline void DB_C_GvgBtlAddProp::set_isoffline(bool value) {
  _set_bit(9);
  isoffline_ = value;
}

// -------------------------------------------------------------------

// DB_C_PubGvgBtlInfo

// optional int32 curSession = 1;
inline bool DB_C_PubGvgBtlInfo::has_cursession() const {
  return _has_bit(0);
}
inline void DB_C_PubGvgBtlInfo::clear_cursession() {
  cursession_ = 0;
  _clear_bit(0);
}
inline ::google::protobuf::int32 DB_C_PubGvgBtlInfo::cursession() const {
  return cursession_;
}
inline void DB_C_PubGvgBtlInfo::set_cursession(::google::protobuf::int32 value) {
  _set_bit(0);
  cursession_ = value;
}

// optional int32 flag = 2;
inline bool DB_C_PubGvgBtlInfo::has_flag() const {
  return _has_bit(1);
}
inline void DB_C_PubGvgBtlInfo::clear_flag() {
  flag_ = 0;
  _clear_bit(1);
}
inline ::google::protobuf::int32 DB_C_PubGvgBtlInfo::flag() const {
  return flag_;
}
inline void DB_C_PubGvgBtlInfo::set_flag(::google::protobuf::int32 value) {
  _set_bit(1);
  flag_ = value;
}

// optional bool fightOver = 3 [default = false];
inline bool DB_C_PubGvgBtlInfo::has_fightover() const {
  return _has_bit(2);
}
inline void DB_C_PubGvgBtlInfo::clear_fightover() {
  fightover_ = false;
  _clear_bit(2);
}
inline bool DB_C_PubGvgBtlInfo::fightover() const {
  return fightover_;
}
inline void DB_C_PubGvgBtlInfo::set_fightover(bool value) {
  _set_bit(2);
  fightover_ = value;
}

// -------------------------------------------------------------------

// DB_C_GVG_Reward_Record

// optional int32 pos = 1;
inline bool DB_C_GVG_Reward_Record::has_pos() const {
  return _has_bit(0);
}
inline void DB_C_GVG_Reward_Record::clear_pos() {
  pos_ = 0;
  _clear_bit(0);
}
inline ::google::protobuf::int32 DB_C_GVG_Reward_Record::pos() const {
  return pos_;
}
inline void DB_C_GVG_Reward_Record::set_pos(::google::protobuf::int32 value) {
  _set_bit(0);
  pos_ = value;
}

// optional int32 cnt = 2;
inline bool DB_C_GVG_Reward_Record::has_cnt() const {
  return _has_bit(1);
}
inline void DB_C_GVG_Reward_Record::clear_cnt() {
  cnt_ = 0;
  _clear_bit(1);
}
inline ::google::protobuf::int32 DB_C_GVG_Reward_Record::cnt() const {
  return cnt_;
}
inline void DB_C_GVG_Reward_Record::set_cnt(::google::protobuf::int32 value) {
  _set_bit(1);
  cnt_ = value;
}

// -------------------------------------------------------------------

// DB_C_WpcRank

// repeated .DB_C_WpcRankUnit nowRank = 1;
inline int DB_C_WpcRank::nowrank_size() const {
  return nowrank_.size();
}
inline void DB_C_WpcRank::clear_nowrank() {
  nowrank_.Clear();
}
inline const ::google::protobuf::RepeatedPtrField< ::DB_C_WpcRankUnit >&
DB_C_WpcRank::nowrank() const {
  return nowrank_;
}
inline ::google::protobuf::RepeatedPtrField< ::DB_C_WpcRankUnit >*
DB_C_WpcRank::mutable_nowrank() {
  return &nowrank_;
}
inline const ::DB_C_WpcRankUnit& DB_C_WpcRank::nowrank(int index) const {
  return nowrank_.Get(index);
}
inline ::DB_C_WpcRankUnit* DB_C_WpcRank::mutable_nowrank(int index) {
  return nowrank_.Mutable(index);
}
inline ::DB_C_WpcRankUnit* DB_C_WpcRank::add_nowrank() {
  return nowrank_.Add();
}

// repeated .DB_C_WpcRankUnit lastRank = 2;
inline int DB_C_WpcRank::lastrank_size() const {
  return lastrank_.size();
}
inline void DB_C_WpcRank::clear_lastrank() {
  lastrank_.Clear();
}
inline const ::google::protobuf::RepeatedPtrField< ::DB_C_WpcRankUnit >&
DB_C_WpcRank::lastrank() const {
  return lastrank_;
}
inline ::google::protobuf::RepeatedPtrField< ::DB_C_WpcRankUnit >*
DB_C_WpcRank::mutable_lastrank() {
  return &lastrank_;
}
inline const ::DB_C_WpcRankUnit& DB_C_WpcRank::lastrank(int index) const {
  return lastrank_.Get(index);
}
inline ::DB_C_WpcRankUnit* DB_C_WpcRank::mutable_lastrank(int index) {
  return lastrank_.Mutable(index);
}
inline ::DB_C_WpcRankUnit* DB_C_WpcRank::add_lastrank() {
  return lastrank_.Add();
}

// optional int32 activeID = 3 [default = 0];
inline bool DB_C_WpcRank::has_activeid() const {
  return _has_bit(2);
}
inline void DB_C_WpcRank::clear_activeid() {
  activeid_ = 0;
  _clear_bit(2);
}
inline ::google::protobuf::int32 DB_C_WpcRank::activeid() const {
  return activeid_;
}
inline void DB_C_WpcRank::set_activeid(::google::protobuf::int32 value) {
  _set_bit(2);
  activeid_ = value;
}

// -------------------------------------------------------------------

// DB_C_WpcRankUnit

// optional string uid = 1;
inline bool DB_C_WpcRankUnit::has_uid() const {
  return _has_bit(0);
}
inline void DB_C_WpcRankUnit::clear_uid() {
  if (uid_ != &_default_uid_) {
    uid_->clear();
  }
  _clear_bit(0);
}
inline const ::std::string& DB_C_WpcRankUnit::uid() const {
  return *uid_;
}
inline void DB_C_WpcRankUnit::set_uid(const ::std::string& value) {
  _set_bit(0);
  if (uid_ == &_default_uid_) {
    uid_ = new ::std::string;
  }
  uid_->assign(value);
}
inline void DB_C_WpcRankUnit::set_uid(const char* value) {
  _set_bit(0);
  if (uid_ == &_default_uid_) {
    uid_ = new ::std::string;
  }
  uid_->assign(value);
}
inline void DB_C_WpcRankUnit::set_uid(const char* value, size_t size) {
  _set_bit(0);
  if (uid_ == &_default_uid_) {
    uid_ = new ::std::string;
  }
  uid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* DB_C_WpcRankUnit::mutable_uid() {
  _set_bit(0);
  if (uid_ == &_default_uid_) {
    uid_ = new ::std::string;
  }
  return uid_;
}

// optional string name = 2;
inline bool DB_C_WpcRankUnit::has_name() const {
  return _has_bit(1);
}
inline void DB_C_WpcRankUnit::clear_name() {
  if (name_ != &_default_name_) {
    name_->clear();
  }
  _clear_bit(1);
}
inline const ::std::string& DB_C_WpcRankUnit::name() const {
  return *name_;
}
inline void DB_C_WpcRankUnit::set_name(const ::std::string& value) {
  _set_bit(1);
  if (name_ == &_default_name_) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void DB_C_WpcRankUnit::set_name(const char* value) {
  _set_bit(1);
  if (name_ == &_default_name_) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void DB_C_WpcRankUnit::set_name(const char* value, size_t size) {
  _set_bit(1);
  if (name_ == &_default_name_) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* DB_C_WpcRankUnit::mutable_name() {
  _set_bit(1);
  if (name_ == &_default_name_) {
    name_ = new ::std::string;
  }
  return name_;
}

// optional string pic = 3;
inline bool DB_C_WpcRankUnit::has_pic() const {
  return _has_bit(2);
}
inline void DB_C_WpcRankUnit::clear_pic() {
  if (pic_ != &_default_pic_) {
    pic_->clear();
  }
  _clear_bit(2);
}
inline const ::std::string& DB_C_WpcRankUnit::pic() const {
  return *pic_;
}
inline void DB_C_WpcRankUnit::set_pic(const ::std::string& value) {
  _set_bit(2);
  if (pic_ == &_default_pic_) {
    pic_ = new ::std::string;
  }
  pic_->assign(value);
}
inline void DB_C_WpcRankUnit::set_pic(const char* value) {
  _set_bit(2);
  if (pic_ == &_default_pic_) {
    pic_ = new ::std::string;
  }
  pic_->assign(value);
}
inline void DB_C_WpcRankUnit::set_pic(const char* value, size_t size) {
  _set_bit(2);
  if (pic_ == &_default_pic_) {
    pic_ = new ::std::string;
  }
  pic_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* DB_C_WpcRankUnit::mutable_pic() {
  _set_bit(2);
  if (pic_ == &_default_pic_) {
    pic_ = new ::std::string;
  }
  return pic_;
}

// optional int32 countryid = 4;
inline bool DB_C_WpcRankUnit::has_countryid() const {
  return _has_bit(3);
}
inline void DB_C_WpcRankUnit::clear_countryid() {
  countryid_ = 0;
  _clear_bit(3);
}
inline ::google::protobuf::int32 DB_C_WpcRankUnit::countryid() const {
  return countryid_;
}
inline void DB_C_WpcRankUnit::set_countryid(::google::protobuf::int32 value) {
  _set_bit(3);
  countryid_ = value;
}

// optional string guildName = 5;
inline bool DB_C_WpcRankUnit::has_guildname() const {
  return _has_bit(4);
}
inline void DB_C_WpcRankUnit::clear_guildname() {
  if (guildname_ != &_default_guildname_) {
    guildname_->clear();
  }
  _clear_bit(4);
}
inline const ::std::string& DB_C_WpcRankUnit::guildname() const {
  return *guildname_;
}
inline void DB_C_WpcRankUnit::set_guildname(const ::std::string& value) {
  _set_bit(4);
  if (guildname_ == &_default_guildname_) {
    guildname_ = new ::std::string;
  }
  guildname_->assign(value);
}
inline void DB_C_WpcRankUnit::set_guildname(const char* value) {
  _set_bit(4);
  if (guildname_ == &_default_guildname_) {
    guildname_ = new ::std::string;
  }
  guildname_->assign(value);
}
inline void DB_C_WpcRankUnit::set_guildname(const char* value, size_t size) {
  _set_bit(4);
  if (guildname_ == &_default_guildname_) {
    guildname_ = new ::std::string;
  }
  guildname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* DB_C_WpcRankUnit::mutable_guildname() {
  _set_bit(4);
  if (guildname_ == &_default_guildname_) {
    guildname_ = new ::std::string;
  }
  return guildname_;
}

// optional int32 fightPoint = 6;
inline bool DB_C_WpcRankUnit::has_fightpoint() const {
  return _has_bit(5);
}
inline void DB_C_WpcRankUnit::clear_fightpoint() {
  fightpoint_ = 0;
  _clear_bit(5);
}
inline ::google::protobuf::int32 DB_C_WpcRankUnit::fightpoint() const {
  return fightpoint_;
}
inline void DB_C_WpcRankUnit::set_fightpoint(::google::protobuf::int32 value) {
  _set_bit(5);
  fightpoint_ = value;
}

// optional int32 level = 7;
inline bool DB_C_WpcRankUnit::has_level() const {
  return _has_bit(6);
}
inline void DB_C_WpcRankUnit::clear_level() {
  level_ = 0;
  _clear_bit(6);
}
inline ::google::protobuf::int32 DB_C_WpcRankUnit::level() const {
  return level_;
}
inline void DB_C_WpcRankUnit::set_level(::google::protobuf::int32 value) {
  _set_bit(6);
  level_ = value;
}

// optional int32 exploreCnt = 8;
inline bool DB_C_WpcRankUnit::has_explorecnt() const {
  return _has_bit(7);
}
inline void DB_C_WpcRankUnit::clear_explorecnt() {
  explorecnt_ = 0;
  _clear_bit(7);
}
inline ::google::protobuf::int32 DB_C_WpcRankUnit::explorecnt() const {
  return explorecnt_;
}
inline void DB_C_WpcRankUnit::set_explorecnt(::google::protobuf::int32 value) {
  _set_bit(7);
  explorecnt_ = value;
}

// -------------------------------------------------------------------

// DB_C_WarGameData

// required int32 key = 1;
inline bool DB_C_WarGameData::has_key() const {
  return _has_bit(0);
}
inline void DB_C_WarGameData::clear_key() {
  key_ = 0;
  _clear_bit(0);
}
inline ::google::protobuf::int32 DB_C_WarGameData::key() const {
  return key_;
}
inline void DB_C_WarGameData::set_key(::google::protobuf::int32 value) {
  _set_bit(0);
  key_ = value;
}

// required int32 region = 2;
inline bool DB_C_WarGameData::has_region() const {
  return _has_bit(1);
}
inline void DB_C_WarGameData::clear_region() {
  region_ = 0;
  _clear_bit(1);
}
inline ::google::protobuf::int32 DB_C_WarGameData::region() const {
  return region_;
}
inline void DB_C_WarGameData::set_region(::google::protobuf::int32 value) {
  _set_bit(1);
  region_ = value;
}

// repeated .DB_C_WarGameSite siteList = 3;
inline int DB_C_WarGameData::sitelist_size() const {
  return sitelist_.size();
}
inline void DB_C_WarGameData::clear_sitelist() {
  sitelist_.Clear();
}
inline const ::google::protobuf::RepeatedPtrField< ::DB_C_WarGameSite >&
DB_C_WarGameData::sitelist() const {
  return sitelist_;
}
inline ::google::protobuf::RepeatedPtrField< ::DB_C_WarGameSite >*
DB_C_WarGameData::mutable_sitelist() {
  return &sitelist_;
}
inline const ::DB_C_WarGameSite& DB_C_WarGameData::sitelist(int index) const {
  return sitelist_.Get(index);
}
inline ::DB_C_WarGameSite* DB_C_WarGameData::mutable_sitelist(int index) {
  return sitelist_.Mutable(index);
}
inline ::DB_C_WarGameSite* DB_C_WarGameData::add_sitelist() {
  return sitelist_.Add();
}

// optional int64 ltSaveRevision = 4 [default = 0];
inline bool DB_C_WarGameData::has_ltsaverevision() const {
  return _has_bit(3);
}
inline void DB_C_WarGameData::clear_ltsaverevision() {
  ltsaverevision_ = GOOGLE_LONGLONG(0);
  _clear_bit(3);
}
inline ::google::protobuf::int64 DB_C_WarGameData::ltsaverevision() const {
  return ltsaverevision_;
}
inline void DB_C_WarGameData::set_ltsaverevision(::google::protobuf::int64 value) {
  _set_bit(3);
  ltsaverevision_ = value;
}

// -------------------------------------------------------------------

// DB_C_WarGameSite

// required int32 sitID = 1;
inline bool DB_C_WarGameSite::has_sitid() const {
  return _has_bit(0);
}
inline void DB_C_WarGameSite::clear_sitid() {
  sitid_ = 0;
  _clear_bit(0);
}
inline ::google::protobuf::int32 DB_C_WarGameSite::sitid() const {
  return sitid_;
}
inline void DB_C_WarGameSite::set_sitid(::google::protobuf::int32 value) {
  _set_bit(0);
  sitid_ = value;
}

// optional int32 sitLv = 2;
inline bool DB_C_WarGameSite::has_sitlv() const {
  return _has_bit(1);
}
inline void DB_C_WarGameSite::clear_sitlv() {
  sitlv_ = 0;
  _clear_bit(1);
}
inline ::google::protobuf::int32 DB_C_WarGameSite::sitlv() const {
  return sitlv_;
}
inline void DB_C_WarGameSite::set_sitlv(::google::protobuf::int32 value) {
  _set_bit(1);
  sitlv_ = value;
}

// optional int32 startTime = 3;
inline bool DB_C_WarGameSite::has_starttime() const {
  return _has_bit(2);
}
inline void DB_C_WarGameSite::clear_starttime() {
  starttime_ = 0;
  _clear_bit(2);
}
inline ::google::protobuf::int32 DB_C_WarGameSite::starttime() const {
  return starttime_;
}
inline void DB_C_WarGameSite::set_starttime(::google::protobuf::int32 value) {
  _set_bit(2);
  starttime_ = value;
}

// optional int32 endTime = 4;
inline bool DB_C_WarGameSite::has_endtime() const {
  return _has_bit(3);
}
inline void DB_C_WarGameSite::clear_endtime() {
  endtime_ = 0;
  _clear_bit(3);
}
inline ::google::protobuf::int32 DB_C_WarGameSite::endtime() const {
  return endtime_;
}
inline void DB_C_WarGameSite::set_endtime(::google::protobuf::int32 value) {
  _set_bit(3);
  endtime_ = value;
}

// optional int32 delayNum = 5 [default = 0];
inline bool DB_C_WarGameSite::has_delaynum() const {
  return _has_bit(4);
}
inline void DB_C_WarGameSite::clear_delaynum() {
  delaynum_ = 0;
  _clear_bit(4);
}
inline ::google::protobuf::int32 DB_C_WarGameSite::delaynum() const {
  return delaynum_;
}
inline void DB_C_WarGameSite::set_delaynum(::google::protobuf::int32 value) {
  _set_bit(4);
  delaynum_ = value;
}

// optional string uid = 6;
inline bool DB_C_WarGameSite::has_uid() const {
  return _has_bit(5);
}
inline void DB_C_WarGameSite::clear_uid() {
  if (uid_ != &_default_uid_) {
    uid_->clear();
  }
  _clear_bit(5);
}
inline const ::std::string& DB_C_WarGameSite::uid() const {
  return *uid_;
}
inline void DB_C_WarGameSite::set_uid(const ::std::string& value) {
  _set_bit(5);
  if (uid_ == &_default_uid_) {
    uid_ = new ::std::string;
  }
  uid_->assign(value);
}
inline void DB_C_WarGameSite::set_uid(const char* value) {
  _set_bit(5);
  if (uid_ == &_default_uid_) {
    uid_ = new ::std::string;
  }
  uid_->assign(value);
}
inline void DB_C_WarGameSite::set_uid(const char* value, size_t size) {
  _set_bit(5);
  if (uid_ == &_default_uid_) {
    uid_ = new ::std::string;
  }
  uid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* DB_C_WarGameSite::mutable_uid() {
  _set_bit(5);
  if (uid_ == &_default_uid_) {
    uid_ = new ::std::string;
  }
  return uid_;
}

// optional string name = 7;
inline bool DB_C_WarGameSite::has_name() const {
  return _has_bit(6);
}
inline void DB_C_WarGameSite::clear_name() {
  if (name_ != &_default_name_) {
    name_->clear();
  }
  _clear_bit(6);
}
inline const ::std::string& DB_C_WarGameSite::name() const {
  return *name_;
}
inline void DB_C_WarGameSite::set_name(const ::std::string& value) {
  _set_bit(6);
  if (name_ == &_default_name_) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void DB_C_WarGameSite::set_name(const char* value) {
  _set_bit(6);
  if (name_ == &_default_name_) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void DB_C_WarGameSite::set_name(const char* value, size_t size) {
  _set_bit(6);
  if (name_ == &_default_name_) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* DB_C_WarGameSite::mutable_name() {
  _set_bit(6);
  if (name_ == &_default_name_) {
    name_ = new ::std::string;
  }
  return name_;
}

// optional int32 countryID = 8 [default = 0];
inline bool DB_C_WarGameSite::has_countryid() const {
  return _has_bit(7);
}
inline void DB_C_WarGameSite::clear_countryid() {
  countryid_ = 0;
  _clear_bit(7);
}
inline ::google::protobuf::int32 DB_C_WarGameSite::countryid() const {
  return countryid_;
}
inline void DB_C_WarGameSite::set_countryid(::google::protobuf::int32 value) {
  _set_bit(7);
  countryid_ = value;
}

// optional int32 power = 9 [default = 0];
inline bool DB_C_WarGameSite::has_power() const {
  return _has_bit(8);
}
inline void DB_C_WarGameSite::clear_power() {
  power_ = 0;
  _clear_bit(8);
}
inline ::google::protobuf::int32 DB_C_WarGameSite::power() const {
  return power_;
}
inline void DB_C_WarGameSite::set_power(::google::protobuf::int32 value) {
  _set_bit(8);
  power_ = value;
}

// repeated .DB_C_WarGameAdmiralInfo admiralList = 10;
inline int DB_C_WarGameSite::admirallist_size() const {
  return admirallist_.size();
}
inline void DB_C_WarGameSite::clear_admirallist() {
  admirallist_.Clear();
}
inline const ::google::protobuf::RepeatedPtrField< ::DB_C_WarGameAdmiralInfo >&
DB_C_WarGameSite::admirallist() const {
  return admirallist_;
}
inline ::google::protobuf::RepeatedPtrField< ::DB_C_WarGameAdmiralInfo >*
DB_C_WarGameSite::mutable_admirallist() {
  return &admirallist_;
}
inline const ::DB_C_WarGameAdmiralInfo& DB_C_WarGameSite::admirallist(int index) const {
  return admirallist_.Get(index);
}
inline ::DB_C_WarGameAdmiralInfo* DB_C_WarGameSite::mutable_admirallist(int index) {
  return admirallist_.Mutable(index);
}
inline ::DB_C_WarGameAdmiralInfo* DB_C_WarGameSite::add_admirallist() {
  return admirallist_.Add();
}

// optional int32 TruceStartTime = 11 [default = 0];
inline bool DB_C_WarGameSite::has_trucestarttime() const {
  return _has_bit(10);
}
inline void DB_C_WarGameSite::clear_trucestarttime() {
  trucestarttime_ = 0;
  _clear_bit(10);
}
inline ::google::protobuf::int32 DB_C_WarGameSite::trucestarttime() const {
  return trucestarttime_;
}
inline void DB_C_WarGameSite::set_trucestarttime(::google::protobuf::int32 value) {
  _set_bit(10);
  trucestarttime_ = value;
}

// optional int32 TruceEndTime = 12 [default = 0];
inline bool DB_C_WarGameSite::has_truceendtime() const {
  return _has_bit(11);
}
inline void DB_C_WarGameSite::clear_truceendtime() {
  truceendtime_ = 0;
  _clear_bit(11);
}
inline ::google::protobuf::int32 DB_C_WarGameSite::truceendtime() const {
  return truceendtime_;
}
inline void DB_C_WarGameSite::set_truceendtime(::google::protobuf::int32 value) {
  _set_bit(11);
  truceendtime_ = value;
}

// -------------------------------------------------------------------

// DB_C_WarGameAdmiralInfo

// optional int32 admiralID = 1 [default = 0];
inline bool DB_C_WarGameAdmiralInfo::has_admiralid() const {
  return _has_bit(0);
}
inline void DB_C_WarGameAdmiralInfo::clear_admiralid() {
  admiralid_ = 0;
  _clear_bit(0);
}
inline ::google::protobuf::int32 DB_C_WarGameAdmiralInfo::admiralid() const {
  return admiralid_;
}
inline void DB_C_WarGameAdmiralInfo::set_admiralid(::google::protobuf::int32 value) {
  _set_bit(0);
  admiralid_ = value;
}

// optional int32 admiralLv = 2 [default = 0];
inline bool DB_C_WarGameAdmiralInfo::has_admirallv() const {
  return _has_bit(1);
}
inline void DB_C_WarGameAdmiralInfo::clear_admirallv() {
  admirallv_ = 0;
  _clear_bit(1);
}
inline ::google::protobuf::int32 DB_C_WarGameAdmiralInfo::admirallv() const {
  return admirallv_;
}
inline void DB_C_WarGameAdmiralInfo::set_admirallv(::google::protobuf::int32 value) {
  _set_bit(1);
  admirallv_ = value;
}

// optional int32 admiralTrainLv = 3 [default = 0];
inline bool DB_C_WarGameAdmiralInfo::has_admiraltrainlv() const {
  return _has_bit(2);
}
inline void DB_C_WarGameAdmiralInfo::clear_admiraltrainlv() {
  admiraltrainlv_ = 0;
  _clear_bit(2);
}
inline ::google::protobuf::int32 DB_C_WarGameAdmiralInfo::admiraltrainlv() const {
  return admiraltrainlv_;
}
inline void DB_C_WarGameAdmiralInfo::set_admiraltrainlv(::google::protobuf::int32 value) {
  _set_bit(2);
  admiraltrainlv_ = value;
}

// -------------------------------------------------------------------

// DB_C_ChatMsg

// optional int32 begin = 1;
inline bool DB_C_ChatMsg::has_begin() const {
  return _has_bit(0);
}
inline void DB_C_ChatMsg::clear_begin() {
  begin_ = 0;
  _clear_bit(0);
}
inline ::google::protobuf::int32 DB_C_ChatMsg::begin() const {
  return begin_;
}
inline void DB_C_ChatMsg::set_begin(::google::protobuf::int32 value) {
  _set_bit(0);
  begin_ = value;
}

// optional int32 end = 2;
inline bool DB_C_ChatMsg::has_end() const {
  return _has_bit(1);
}
inline void DB_C_ChatMsg::clear_end() {
  end_ = 0;
  _clear_bit(1);
}
inline ::google::protobuf::int32 DB_C_ChatMsg::end() const {
  return end_;
}
inline void DB_C_ChatMsg::set_end(::google::protobuf::int32 value) {
  _set_bit(1);
  end_ = value;
}

// optional int32 num = 3;
inline bool DB_C_ChatMsg::has_num() const {
  return _has_bit(2);
}
inline void DB_C_ChatMsg::clear_num() {
  num_ = 0;
  _clear_bit(2);
}
inline ::google::protobuf::int32 DB_C_ChatMsg::num() const {
  return num_;
}
inline void DB_C_ChatMsg::set_num(::google::protobuf::int32 value) {
  _set_bit(2);
  num_ = value;
}

// repeated .DB_C_ChatMsgOne msg = 4;
inline int DB_C_ChatMsg::msg_size() const {
  return msg_.size();
}
inline void DB_C_ChatMsg::clear_msg() {
  msg_.Clear();
}
inline const ::google::protobuf::RepeatedPtrField< ::DB_C_ChatMsgOne >&
DB_C_ChatMsg::msg() const {
  return msg_;
}
inline ::google::protobuf::RepeatedPtrField< ::DB_C_ChatMsgOne >*
DB_C_ChatMsg::mutable_msg() {
  return &msg_;
}
inline const ::DB_C_ChatMsgOne& DB_C_ChatMsg::msg(int index) const {
  return msg_.Get(index);
}
inline ::DB_C_ChatMsgOne* DB_C_ChatMsg::mutable_msg(int index) {
  return msg_.Mutable(index);
}
inline ::DB_C_ChatMsgOne* DB_C_ChatMsg::add_msg() {
  return msg_.Add();
}

// -------------------------------------------------------------------

// DB_C_ChatMsgOne

// optional int32 country = 1;
inline bool DB_C_ChatMsgOne::has_country() const {
  return _has_bit(0);
}
inline void DB_C_ChatMsgOne::clear_country() {
  country_ = 0;
  _clear_bit(0);
}
inline ::google::protobuf::int32 DB_C_ChatMsgOne::country() const {
  return country_;
}
inline void DB_C_ChatMsgOne::set_country(::google::protobuf::int32 value) {
  _set_bit(0);
  country_ = value;
}

// optional int32 type = 2;
inline bool DB_C_ChatMsgOne::has_type() const {
  return _has_bit(1);
}
inline void DB_C_ChatMsgOne::clear_type() {
  type_ = 0;
  _clear_bit(1);
}
inline ::google::protobuf::int32 DB_C_ChatMsgOne::type() const {
  return type_;
}
inline void DB_C_ChatMsgOne::set_type(::google::protobuf::int32 value) {
  _set_bit(1);
  type_ = value;
}

// optional int64 uid = 3;
inline bool DB_C_ChatMsgOne::has_uid() const {
  return _has_bit(2);
}
inline void DB_C_ChatMsgOne::clear_uid() {
  uid_ = GOOGLE_LONGLONG(0);
  _clear_bit(2);
}
inline ::google::protobuf::int64 DB_C_ChatMsgOne::uid() const {
  return uid_;
}
inline void DB_C_ChatMsgOne::set_uid(::google::protobuf::int64 value) {
  _set_bit(2);
  uid_ = value;
}

// optional string name = 4;
inline bool DB_C_ChatMsgOne::has_name() const {
  return _has_bit(3);
}
inline void DB_C_ChatMsgOne::clear_name() {
  if (name_ != &_default_name_) {
    name_->clear();
  }
  _clear_bit(3);
}
inline const ::std::string& DB_C_ChatMsgOne::name() const {
  return *name_;
}
inline void DB_C_ChatMsgOne::set_name(const ::std::string& value) {
  _set_bit(3);
  if (name_ == &_default_name_) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void DB_C_ChatMsgOne::set_name(const char* value) {
  _set_bit(3);
  if (name_ == &_default_name_) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void DB_C_ChatMsgOne::set_name(const char* value, size_t size) {
  _set_bit(3);
  if (name_ == &_default_name_) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* DB_C_ChatMsgOne::mutable_name() {
  _set_bit(3);
  if (name_ == &_default_name_) {
    name_ = new ::std::string;
  }
  return name_;
}

// optional string msg = 5;
inline bool DB_C_ChatMsgOne::has_msg() const {
  return _has_bit(4);
}
inline void DB_C_ChatMsgOne::clear_msg() {
  if (msg_ != &_default_msg_) {
    msg_->clear();
  }
  _clear_bit(4);
}
inline const ::std::string& DB_C_ChatMsgOne::msg() const {
  return *msg_;
}
inline void DB_C_ChatMsgOne::set_msg(const ::std::string& value) {
  _set_bit(4);
  if (msg_ == &_default_msg_) {
    msg_ = new ::std::string;
  }
  msg_->assign(value);
}
inline void DB_C_ChatMsgOne::set_msg(const char* value) {
  _set_bit(4);
  if (msg_ == &_default_msg_) {
    msg_ = new ::std::string;
  }
  msg_->assign(value);
}
inline void DB_C_ChatMsgOne::set_msg(const char* value, size_t size) {
  _set_bit(4);
  if (msg_ == &_default_msg_) {
    msg_ = new ::std::string;
  }
  msg_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* DB_C_ChatMsgOne::mutable_msg() {
  _set_bit(4);
  if (msg_ == &_default_msg_) {
    msg_ = new ::std::string;
  }
  return msg_;
}

// -------------------------------------------------------------------

// DB_C_BossBtlMsg

// required int32 key = 1;
inline bool DB_C_BossBtlMsg::has_key() const {
  return _has_bit(0);
}
inline void DB_C_BossBtlMsg::clear_key() {
  key_ = 0;
  _clear_bit(0);
}
inline ::google::protobuf::int32 DB_C_BossBtlMsg::key() const {
  return key_;
}
inline void DB_C_BossBtlMsg::set_key(::google::protobuf::int32 value) {
  _set_bit(0);
  key_ = value;
}

// optional int32 region = 2 [default = 0];
inline bool DB_C_BossBtlMsg::has_region() const {
  return _has_bit(1);
}
inline void DB_C_BossBtlMsg::clear_region() {
  region_ = 0;
  _clear_bit(1);
}
inline ::google::protobuf::int32 DB_C_BossBtlMsg::region() const {
  return region_;
}
inline void DB_C_BossBtlMsg::set_region(::google::protobuf::int32 value) {
  _set_bit(1);
  region_ = value;
}

// optional int32 nBossBtlFlag = 3 [default = 0];
inline bool DB_C_BossBtlMsg::has_nbossbtlflag() const {
  return _has_bit(2);
}
inline void DB_C_BossBtlMsg::clear_nbossbtlflag() {
  nbossbtlflag_ = 0;
  _clear_bit(2);
}
inline ::google::protobuf::int32 DB_C_BossBtlMsg::nbossbtlflag() const {
  return nbossbtlflag_;
}
inline void DB_C_BossBtlMsg::set_nbossbtlflag(::google::protobuf::int32 value) {
  _set_bit(2);
  nbossbtlflag_ = value;
}

// repeated .DB_C_BossInfo bossInfo = 4;
inline int DB_C_BossBtlMsg::bossinfo_size() const {
  return bossinfo_.size();
}
inline void DB_C_BossBtlMsg::clear_bossinfo() {
  bossinfo_.Clear();
}
inline const ::google::protobuf::RepeatedPtrField< ::DB_C_BossInfo >&
DB_C_BossBtlMsg::bossinfo() const {
  return bossinfo_;
}
inline ::google::protobuf::RepeatedPtrField< ::DB_C_BossInfo >*
DB_C_BossBtlMsg::mutable_bossinfo() {
  return &bossinfo_;
}
inline const ::DB_C_BossInfo& DB_C_BossBtlMsg::bossinfo(int index) const {
  return bossinfo_.Get(index);
}
inline ::DB_C_BossInfo* DB_C_BossBtlMsg::mutable_bossinfo(int index) {
  return bossinfo_.Mutable(index);
}
inline ::DB_C_BossInfo* DB_C_BossBtlMsg::add_bossinfo() {
  return bossinfo_.Add();
}

// repeated .DB_C_BossBtlRankUnit rankList = 5;
inline int DB_C_BossBtlMsg::ranklist_size() const {
  return ranklist_.size();
}
inline void DB_C_BossBtlMsg::clear_ranklist() {
  ranklist_.Clear();
}
inline const ::google::protobuf::RepeatedPtrField< ::DB_C_BossBtlRankUnit >&
DB_C_BossBtlMsg::ranklist() const {
  return ranklist_;
}
inline ::google::protobuf::RepeatedPtrField< ::DB_C_BossBtlRankUnit >*
DB_C_BossBtlMsg::mutable_ranklist() {
  return &ranklist_;
}
inline const ::DB_C_BossBtlRankUnit& DB_C_BossBtlMsg::ranklist(int index) const {
  return ranklist_.Get(index);
}
inline ::DB_C_BossBtlRankUnit* DB_C_BossBtlMsg::mutable_ranklist(int index) {
  return ranklist_.Mutable(index);
}
inline ::DB_C_BossBtlRankUnit* DB_C_BossBtlMsg::add_ranklist() {
  return ranklist_.Add();
}

// optional .DB_C_BossBtlRankUnit killer = 6;
inline bool DB_C_BossBtlMsg::has_killer() const {
  return _has_bit(5);
}
inline void DB_C_BossBtlMsg::clear_killer() {
  if (killer_ != NULL) killer_->::DB_C_BossBtlRankUnit::Clear();
  _clear_bit(5);
}
inline const ::DB_C_BossBtlRankUnit& DB_C_BossBtlMsg::killer() const {
  return killer_ != NULL ? *killer_ : *default_instance_->killer_;
}
inline ::DB_C_BossBtlRankUnit* DB_C_BossBtlMsg::mutable_killer() {
  _set_bit(5);
  if (killer_ == NULL) killer_ = new ::DB_C_BossBtlRankUnit;
  return killer_;
}

// optional int32 state = 7 [default = 0];
inline bool DB_C_BossBtlMsg::has_state() const {
  return _has_bit(6);
}
inline void DB_C_BossBtlMsg::clear_state() {
  state_ = 0;
  _clear_bit(6);
}
inline ::google::protobuf::int32 DB_C_BossBtlMsg::state() const {
  return state_;
}
inline void DB_C_BossBtlMsg::set_state(::google::protobuf::int32 value) {
  _set_bit(6);
  state_ = value;
}

// optional .DB_C_BossMsg fightingBossMsg = 8;
inline bool DB_C_BossBtlMsg::has_fightingbossmsg() const {
  return _has_bit(7);
}
inline void DB_C_BossBtlMsg::clear_fightingbossmsg() {
  if (fightingbossmsg_ != NULL) fightingbossmsg_->::DB_C_BossMsg::Clear();
  _clear_bit(7);
}
inline const ::DB_C_BossMsg& DB_C_BossBtlMsg::fightingbossmsg() const {
  return fightingbossmsg_ != NULL ? *fightingbossmsg_ : *default_instance_->fightingbossmsg_;
}
inline ::DB_C_BossMsg* DB_C_BossBtlMsg::mutable_fightingbossmsg() {
  _set_bit(7);
  if (fightingbossmsg_ == NULL) fightingbossmsg_ = new ::DB_C_BossMsg;
  return fightingbossmsg_;
}

// repeated .DB_C_BossBtlRankUnit luckyList = 9;
inline int DB_C_BossBtlMsg::luckylist_size() const {
  return luckylist_.size();
}
inline void DB_C_BossBtlMsg::clear_luckylist() {
  luckylist_.Clear();
}
inline const ::google::protobuf::RepeatedPtrField< ::DB_C_BossBtlRankUnit >&
DB_C_BossBtlMsg::luckylist() const {
  return luckylist_;
}
inline ::google::protobuf::RepeatedPtrField< ::DB_C_BossBtlRankUnit >*
DB_C_BossBtlMsg::mutable_luckylist() {
  return &luckylist_;
}
inline const ::DB_C_BossBtlRankUnit& DB_C_BossBtlMsg::luckylist(int index) const {
  return luckylist_.Get(index);
}
inline ::DB_C_BossBtlRankUnit* DB_C_BossBtlMsg::mutable_luckylist(int index) {
  return luckylist_.Mutable(index);
}
inline ::DB_C_BossBtlRankUnit* DB_C_BossBtlMsg::add_luckylist() {
  return luckylist_.Add();
}

// optional int64 ltSaveRevision = 10 [default = 0];
inline bool DB_C_BossBtlMsg::has_ltsaverevision() const {
  return _has_bit(9);
}
inline void DB_C_BossBtlMsg::clear_ltsaverevision() {
  ltsaverevision_ = GOOGLE_LONGLONG(0);
  _clear_bit(9);
}
inline ::google::protobuf::int64 DB_C_BossBtlMsg::ltsaverevision() const {
  return ltsaverevision_;
}
inline void DB_C_BossBtlMsg::set_ltsaverevision(::google::protobuf::int64 value) {
  _set_bit(9);
  ltsaverevision_ = value;
}

// repeated .DB_C_BossBtlRankUnit lastRankList = 11;
inline int DB_C_BossBtlMsg::lastranklist_size() const {
  return lastranklist_.size();
}
inline void DB_C_BossBtlMsg::clear_lastranklist() {
  lastranklist_.Clear();
}
inline const ::google::protobuf::RepeatedPtrField< ::DB_C_BossBtlRankUnit >&
DB_C_BossBtlMsg::lastranklist() const {
  return lastranklist_;
}
inline ::google::protobuf::RepeatedPtrField< ::DB_C_BossBtlRankUnit >*
DB_C_BossBtlMsg::mutable_lastranklist() {
  return &lastranklist_;
}
inline const ::DB_C_BossBtlRankUnit& DB_C_BossBtlMsg::lastranklist(int index) const {
  return lastranklist_.Get(index);
}
inline ::DB_C_BossBtlRankUnit* DB_C_BossBtlMsg::mutable_lastranklist(int index) {
  return lastranklist_.Mutable(index);
}
inline ::DB_C_BossBtlRankUnit* DB_C_BossBtlMsg::add_lastranklist() {
  return lastranklist_.Add();
}

// repeated .DB_C_BossBtlRankUnit highPointList = 12;
inline int DB_C_BossBtlMsg::highpointlist_size() const {
  return highpointlist_.size();
}
inline void DB_C_BossBtlMsg::clear_highpointlist() {
  highpointlist_.Clear();
}
inline const ::google::protobuf::RepeatedPtrField< ::DB_C_BossBtlRankUnit >&
DB_C_BossBtlMsg::highpointlist() const {
  return highpointlist_;
}
inline ::google::protobuf::RepeatedPtrField< ::DB_C_BossBtlRankUnit >*
DB_C_BossBtlMsg::mutable_highpointlist() {
  return &highpointlist_;
}
inline const ::DB_C_BossBtlRankUnit& DB_C_BossBtlMsg::highpointlist(int index) const {
  return highpointlist_.Get(index);
}
inline ::DB_C_BossBtlRankUnit* DB_C_BossBtlMsg::mutable_highpointlist(int index) {
  return highpointlist_.Mutable(index);
}
inline ::DB_C_BossBtlRankUnit* DB_C_BossBtlMsg::add_highpointlist() {
  return highpointlist_.Add();
}

// repeated .DB_C_BossBtlRankUnit upList = 13;
inline int DB_C_BossBtlMsg::uplist_size() const {
  return uplist_.size();
}
inline void DB_C_BossBtlMsg::clear_uplist() {
  uplist_.Clear();
}
inline const ::google::protobuf::RepeatedPtrField< ::DB_C_BossBtlRankUnit >&
DB_C_BossBtlMsg::uplist() const {
  return uplist_;
}
inline ::google::protobuf::RepeatedPtrField< ::DB_C_BossBtlRankUnit >*
DB_C_BossBtlMsg::mutable_uplist() {
  return &uplist_;
}
inline const ::DB_C_BossBtlRankUnit& DB_C_BossBtlMsg::uplist(int index) const {
  return uplist_.Get(index);
}
inline ::DB_C_BossBtlRankUnit* DB_C_BossBtlMsg::mutable_uplist(int index) {
  return uplist_.Mutable(index);
}
inline ::DB_C_BossBtlRankUnit* DB_C_BossBtlMsg::add_uplist() {
  return uplist_.Add();
}

// -------------------------------------------------------------------

// DB_C_BossInfo

// optional int32 bossID = 1 [default = 0];
inline bool DB_C_BossInfo::has_bossid() const {
  return _has_bit(0);
}
inline void DB_C_BossInfo::clear_bossid() {
  bossid_ = 0;
  _clear_bit(0);
}
inline ::google::protobuf::int32 DB_C_BossInfo::bossid() const {
  return bossid_;
}
inline void DB_C_BossInfo::set_bossid(::google::protobuf::int32 value) {
  _set_bit(0);
  bossid_ = value;
}

// optional int32 bossLv = 2;
inline bool DB_C_BossInfo::has_bosslv() const {
  return _has_bit(1);
}
inline void DB_C_BossInfo::clear_bosslv() {
  bosslv_ = 0;
  _clear_bit(1);
}
inline ::google::protobuf::int32 DB_C_BossInfo::bosslv() const {
  return bosslv_;
}
inline void DB_C_BossInfo::set_bosslv(::google::protobuf::int32 value) {
  _set_bit(1);
  bosslv_ = value;
}

// -------------------------------------------------------------------

// DB_C_BossMsg

// optional int32 bossID = 1 [default = 0];
inline bool DB_C_BossMsg::has_bossid() const {
  return _has_bit(0);
}
inline void DB_C_BossMsg::clear_bossid() {
  bossid_ = 0;
  _clear_bit(0);
}
inline ::google::protobuf::int32 DB_C_BossMsg::bossid() const {
  return bossid_;
}
inline void DB_C_BossMsg::set_bossid(::google::protobuf::int32 value) {
  _set_bit(0);
  bossid_ = value;
}

// optional int64 hp = 2 [default = -1];
inline bool DB_C_BossMsg::has_hp() const {
  return _has_bit(1);
}
inline void DB_C_BossMsg::clear_hp() {
  hp_ = GOOGLE_LONGLONG(-1);
  _clear_bit(1);
}
inline ::google::protobuf::int64 DB_C_BossMsg::hp() const {
  return hp_;
}
inline void DB_C_BossMsg::set_hp(::google::protobuf::int64 value) {
  _set_bit(1);
  hp_ = value;
}

// optional int64 maxHp = 3 [default = -1];
inline bool DB_C_BossMsg::has_maxhp() const {
  return _has_bit(2);
}
inline void DB_C_BossMsg::clear_maxhp() {
  maxhp_ = GOOGLE_LONGLONG(-1);
  _clear_bit(2);
}
inline ::google::protobuf::int64 DB_C_BossMsg::maxhp() const {
  return maxhp_;
}
inline void DB_C_BossMsg::set_maxhp(::google::protobuf::int64 value) {
  _set_bit(2);
  maxhp_ = value;
}

// -------------------------------------------------------------------

// DB_C_BossBtlRankUnit

// optional int64 uid = 1 [default = 0];
inline bool DB_C_BossBtlRankUnit::has_uid() const {
  return _has_bit(0);
}
inline void DB_C_BossBtlRankUnit::clear_uid() {
  uid_ = GOOGLE_LONGLONG(0);
  _clear_bit(0);
}
inline ::google::protobuf::int64 DB_C_BossBtlRankUnit::uid() const {
  return uid_;
}
inline void DB_C_BossBtlRankUnit::set_uid(::google::protobuf::int64 value) {
  _set_bit(0);
  uid_ = value;
}

// optional string name = 2;
inline bool DB_C_BossBtlRankUnit::has_name() const {
  return _has_bit(1);
}
inline void DB_C_BossBtlRankUnit::clear_name() {
  if (name_ != &_default_name_) {
    name_->clear();
  }
  _clear_bit(1);
}
inline const ::std::string& DB_C_BossBtlRankUnit::name() const {
  return *name_;
}
inline void DB_C_BossBtlRankUnit::set_name(const ::std::string& value) {
  _set_bit(1);
  if (name_ == &_default_name_) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void DB_C_BossBtlRankUnit::set_name(const char* value) {
  _set_bit(1);
  if (name_ == &_default_name_) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void DB_C_BossBtlRankUnit::set_name(const char* value, size_t size) {
  _set_bit(1);
  if (name_ == &_default_name_) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* DB_C_BossBtlRankUnit::mutable_name() {
  _set_bit(1);
  if (name_ == &_default_name_) {
    name_ = new ::std::string;
  }
  return name_;
}

// optional string pic = 3;
inline bool DB_C_BossBtlRankUnit::has_pic() const {
  return _has_bit(2);
}
inline void DB_C_BossBtlRankUnit::clear_pic() {
  if (pic_ != &_default_pic_) {
    pic_->clear();
  }
  _clear_bit(2);
}
inline const ::std::string& DB_C_BossBtlRankUnit::pic() const {
  return *pic_;
}
inline void DB_C_BossBtlRankUnit::set_pic(const ::std::string& value) {
  _set_bit(2);
  if (pic_ == &_default_pic_) {
    pic_ = new ::std::string;
  }
  pic_->assign(value);
}
inline void DB_C_BossBtlRankUnit::set_pic(const char* value) {
  _set_bit(2);
  if (pic_ == &_default_pic_) {
    pic_ = new ::std::string;
  }
  pic_->assign(value);
}
inline void DB_C_BossBtlRankUnit::set_pic(const char* value, size_t size) {
  _set_bit(2);
  if (pic_ == &_default_pic_) {
    pic_ = new ::std::string;
  }
  pic_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* DB_C_BossBtlRankUnit::mutable_pic() {
  _set_bit(2);
  if (pic_ == &_default_pic_) {
    pic_ = new ::std::string;
  }
  return pic_;
}

// optional int64 dmg = 4 [default = 0];
inline bool DB_C_BossBtlRankUnit::has_dmg() const {
  return _has_bit(3);
}
inline void DB_C_BossBtlRankUnit::clear_dmg() {
  dmg_ = GOOGLE_LONGLONG(0);
  _clear_bit(3);
}
inline ::google::protobuf::int64 DB_C_BossBtlRankUnit::dmg() const {
  return dmg_;
}
inline void DB_C_BossBtlRankUnit::set_dmg(::google::protobuf::int64 value) {
  _set_bit(3);
  dmg_ = value;
}

// optional int32 count = 5 [default = 0];
inline bool DB_C_BossBtlRankUnit::has_count() const {
  return _has_bit(4);
}
inline void DB_C_BossBtlRankUnit::clear_count() {
  count_ = 0;
  _clear_bit(4);
}
inline ::google::protobuf::int32 DB_C_BossBtlRankUnit::count() const {
  return count_;
}
inline void DB_C_BossBtlRankUnit::set_count(::google::protobuf::int32 value) {
  _set_bit(4);
  count_ = value;
}

// repeated string nameList = 6;
inline int DB_C_BossBtlRankUnit::namelist_size() const {
  return namelist_.size();
}
inline void DB_C_BossBtlRankUnit::clear_namelist() {
  namelist_.Clear();
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
DB_C_BossBtlRankUnit::namelist() const {
  return namelist_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
DB_C_BossBtlRankUnit::mutable_namelist() {
  return &namelist_;
}
inline const ::std::string& DB_C_BossBtlRankUnit::namelist(int index) const {
  return namelist_.Get(index);
}
inline ::std::string* DB_C_BossBtlRankUnit::mutable_namelist(int index) {
  return namelist_.Mutable(index);
}
inline void DB_C_BossBtlRankUnit::set_namelist(int index, const ::std::string& value) {
  namelist_.Mutable(index)->assign(value);
}
inline void DB_C_BossBtlRankUnit::set_namelist(int index, const char* value) {
  namelist_.Mutable(index)->assign(value);
}
inline void DB_C_BossBtlRankUnit::set_namelist(int index, const char* value, size_t size) {
  namelist_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* DB_C_BossBtlRankUnit::add_namelist() {
  return namelist_.Add();
}
inline void DB_C_BossBtlRankUnit::add_namelist(const ::std::string& value) {
  namelist_.Add()->assign(value);
}
inline void DB_C_BossBtlRankUnit::add_namelist(const char* value) {
  namelist_.Add()->assign(value);
}
inline void DB_C_BossBtlRankUnit::add_namelist(const char* value, size_t size) {
  namelist_.Add()->assign(reinterpret_cast<const char*>(value), size);
}

// optional string words = 7;
inline bool DB_C_BossBtlRankUnit::has_words() const {
  return _has_bit(6);
}
inline void DB_C_BossBtlRankUnit::clear_words() {
  if (words_ != &_default_words_) {
    words_->clear();
  }
  _clear_bit(6);
}
inline const ::std::string& DB_C_BossBtlRankUnit::words() const {
  return *words_;
}
inline void DB_C_BossBtlRankUnit::set_words(const ::std::string& value) {
  _set_bit(6);
  if (words_ == &_default_words_) {
    words_ = new ::std::string;
  }
  words_->assign(value);
}
inline void DB_C_BossBtlRankUnit::set_words(const char* value) {
  _set_bit(6);
  if (words_ == &_default_words_) {
    words_ = new ::std::string;
  }
  words_->assign(value);
}
inline void DB_C_BossBtlRankUnit::set_words(const char* value, size_t size) {
  _set_bit(6);
  if (words_ == &_default_words_) {
    words_ = new ::std::string;
  }
  words_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* DB_C_BossBtlRankUnit::mutable_words() {
  _set_bit(6);
  if (words_ == &_default_words_) {
    words_ = new ::std::string;
  }
  return words_;
}

// repeated .DB_C_Report reports = 8;
inline int DB_C_BossBtlRankUnit::reports_size() const {
  return reports_.size();
}
inline void DB_C_BossBtlRankUnit::clear_reports() {
  reports_.Clear();
}
inline const ::google::protobuf::RepeatedPtrField< ::DB_C_Report >&
DB_C_BossBtlRankUnit::reports() const {
  return reports_;
}
inline ::google::protobuf::RepeatedPtrField< ::DB_C_Report >*
DB_C_BossBtlRankUnit::mutable_reports() {
  return &reports_;
}
inline const ::DB_C_Report& DB_C_BossBtlRankUnit::reports(int index) const {
  return reports_.Get(index);
}
inline ::DB_C_Report* DB_C_BossBtlRankUnit::mutable_reports(int index) {
  return reports_.Mutable(index);
}
inline ::DB_C_Report* DB_C_BossBtlRankUnit::add_reports() {
  return reports_.Add();
}

// optional int32 power = 9;
inline bool DB_C_BossBtlRankUnit::has_power() const {
  return _has_bit(8);
}
inline void DB_C_BossBtlRankUnit::clear_power() {
  power_ = 0;
  _clear_bit(8);
}
inline ::google::protobuf::int32 DB_C_BossBtlRankUnit::power() const {
  return power_;
}
inline void DB_C_BossBtlRankUnit::set_power(::google::protobuf::int32 value) {
  _set_bit(8);
  power_ = value;
}

// optional int32 level = 10;
inline bool DB_C_BossBtlRankUnit::has_level() const {
  return _has_bit(9);
}
inline void DB_C_BossBtlRankUnit::clear_level() {
  level_ = 0;
  _clear_bit(9);
}
inline ::google::protobuf::int32 DB_C_BossBtlRankUnit::level() const {
  return level_;
}
inline void DB_C_BossBtlRankUnit::set_level(::google::protobuf::int32 value) {
  _set_bit(9);
  level_ = value;
}

// optional string guildname = 11;
inline bool DB_C_BossBtlRankUnit::has_guildname() const {
  return _has_bit(10);
}
inline void DB_C_BossBtlRankUnit::clear_guildname() {
  if (guildname_ != &_default_guildname_) {
    guildname_->clear();
  }
  _clear_bit(10);
}
inline const ::std::string& DB_C_BossBtlRankUnit::guildname() const {
  return *guildname_;
}
inline void DB_C_BossBtlRankUnit::set_guildname(const ::std::string& value) {
  _set_bit(10);
  if (guildname_ == &_default_guildname_) {
    guildname_ = new ::std::string;
  }
  guildname_->assign(value);
}
inline void DB_C_BossBtlRankUnit::set_guildname(const char* value) {
  _set_bit(10);
  if (guildname_ == &_default_guildname_) {
    guildname_ = new ::std::string;
  }
  guildname_->assign(value);
}
inline void DB_C_BossBtlRankUnit::set_guildname(const char* value, size_t size) {
  _set_bit(10);
  if (guildname_ == &_default_guildname_) {
    guildname_ = new ::std::string;
  }
  guildname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* DB_C_BossBtlRankUnit::mutable_guildname() {
  _set_bit(10);
  if (guildname_ == &_default_guildname_) {
    guildname_ = new ::std::string;
  }
  return guildname_;
}

// optional int32 countryID = 12;
inline bool DB_C_BossBtlRankUnit::has_countryid() const {
  return _has_bit(11);
}
inline void DB_C_BossBtlRankUnit::clear_countryid() {
  countryid_ = 0;
  _clear_bit(11);
}
inline ::google::protobuf::int32 DB_C_BossBtlRankUnit::countryid() const {
  return countryid_;
}
inline void DB_C_BossBtlRankUnit::set_countryid(::google::protobuf::int32 value) {
  _set_bit(11);
  countryid_ = value;
}

// -------------------------------------------------------------------

// DB_C_Report

// optional int32 type = 1 [default = 0];
inline bool DB_C_Report::has_type() const {
  return _has_bit(0);
}
inline void DB_C_Report::clear_type() {
  type_ = 0;
  _clear_bit(0);
}
inline ::google::protobuf::int32 DB_C_Report::type() const {
  return type_;
}
inline void DB_C_Report::set_type(::google::protobuf::int32 value) {
  _set_bit(0);
  type_ = value;
}

// optional int32 count = 2 [default = 0];
inline bool DB_C_Report::has_count() const {
  return _has_bit(1);
}
inline void DB_C_Report::clear_count() {
  count_ = 0;
  _clear_bit(1);
}
inline ::google::protobuf::int32 DB_C_Report::count() const {
  return count_;
}
inline void DB_C_Report::set_count(::google::protobuf::int32 value) {
  _set_bit(1);
  count_ = value;
}

// -------------------------------------------------------------------

// DB_C_NpcActiveRankItem

// optional int32 country = 1;
inline bool DB_C_NpcActiveRankItem::has_country() const {
  return _has_bit(0);
}
inline void DB_C_NpcActiveRankItem::clear_country() {
  country_ = 0;
  _clear_bit(0);
}
inline ::google::protobuf::int32 DB_C_NpcActiveRankItem::country() const {
  return country_;
}
inline void DB_C_NpcActiveRankItem::set_country(::google::protobuf::int32 value) {
  _set_bit(0);
  country_ = value;
}

// repeated int32 wincnt = 2;
inline int DB_C_NpcActiveRankItem::wincnt_size() const {
  return wincnt_.size();
}
inline void DB_C_NpcActiveRankItem::clear_wincnt() {
  wincnt_.Clear();
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
DB_C_NpcActiveRankItem::wincnt() const {
  return wincnt_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
DB_C_NpcActiveRankItem::mutable_wincnt() {
  return &wincnt_;
}
inline ::google::protobuf::int32 DB_C_NpcActiveRankItem::wincnt(int index) const {
  return wincnt_.Get(index);
}
inline void DB_C_NpcActiveRankItem::set_wincnt(int index, ::google::protobuf::int32 value) {
  wincnt_.Set(index, value);
}
inline void DB_C_NpcActiveRankItem::add_wincnt(::google::protobuf::int32 value) {
  wincnt_.Add(value);
}

// -------------------------------------------------------------------

// DB_C_NpcActiveRank

// optional int32 ranktime = 1;
inline bool DB_C_NpcActiveRank::has_ranktime() const {
  return _has_bit(0);
}
inline void DB_C_NpcActiveRank::clear_ranktime() {
  ranktime_ = 0;
  _clear_bit(0);
}
inline ::google::protobuf::int32 DB_C_NpcActiveRank::ranktime() const {
  return ranktime_;
}
inline void DB_C_NpcActiveRank::set_ranktime(::google::protobuf::int32 value) {
  _set_bit(0);
  ranktime_ = value;
}

// repeated .DB_C_NpcActiveRankItem rank = 2;
inline int DB_C_NpcActiveRank::rank_size() const {
  return rank_.size();
}
inline void DB_C_NpcActiveRank::clear_rank() {
  rank_.Clear();
}
inline const ::google::protobuf::RepeatedPtrField< ::DB_C_NpcActiveRankItem >&
DB_C_NpcActiveRank::rank() const {
  return rank_;
}
inline ::google::protobuf::RepeatedPtrField< ::DB_C_NpcActiveRankItem >*
DB_C_NpcActiveRank::mutable_rank() {
  return &rank_;
}
inline const ::DB_C_NpcActiveRankItem& DB_C_NpcActiveRank::rank(int index) const {
  return rank_.Get(index);
}
inline ::DB_C_NpcActiveRankItem* DB_C_NpcActiveRank::mutable_rank(int index) {
  return rank_.Mutable(index);
}
inline ::DB_C_NpcActiveRankItem* DB_C_NpcActiveRank::add_rank() {
  return rank_.Add();
}

// -------------------------------------------------------------------

// DB_C_GuildRedEnvelope

// optional int32 nFlag = 1 [default = 0];
inline bool DB_C_GuildRedEnvelope::has_nflag() const {
  return _has_bit(0);
}
inline void DB_C_GuildRedEnvelope::clear_nflag() {
  nflag_ = 0;
  _clear_bit(0);
}
inline ::google::protobuf::int32 DB_C_GuildRedEnvelope::nflag() const {
  return nflag_;
}
inline void DB_C_GuildRedEnvelope::set_nflag(::google::protobuf::int32 value) {
  _set_bit(0);
  nflag_ = value;
}

// optional int32 nTotal = 2 [default = 0];
inline bool DB_C_GuildRedEnvelope::has_ntotal() const {
  return _has_bit(1);
}
inline void DB_C_GuildRedEnvelope::clear_ntotal() {
  ntotal_ = 0;
  _clear_bit(1);
}
inline ::google::protobuf::int32 DB_C_GuildRedEnvelope::ntotal() const {
  return ntotal_;
}
inline void DB_C_GuildRedEnvelope::set_ntotal(::google::protobuf::int32 value) {
  _set_bit(1);
  ntotal_ = value;
}

// optional int32 nCurrentID = 3 [default = 0];
inline bool DB_C_GuildRedEnvelope::has_ncurrentid() const {
  return _has_bit(2);
}
inline void DB_C_GuildRedEnvelope::clear_ncurrentid() {
  ncurrentid_ = 0;
  _clear_bit(2);
}
inline ::google::protobuf::int32 DB_C_GuildRedEnvelope::ncurrentid() const {
  return ncurrentid_;
}
inline void DB_C_GuildRedEnvelope::set_ncurrentid(::google::protobuf::int32 value) {
  _set_bit(2);
  ncurrentid_ = value;
}

// repeated .DB_C_RedEnvelopeInfo listRedEnvelope = 4;
inline int DB_C_GuildRedEnvelope::listredenvelope_size() const {
  return listredenvelope_.size();
}
inline void DB_C_GuildRedEnvelope::clear_listredenvelope() {
  listredenvelope_.Clear();
}
inline const ::google::protobuf::RepeatedPtrField< ::DB_C_RedEnvelopeInfo >&
DB_C_GuildRedEnvelope::listredenvelope() const {
  return listredenvelope_;
}
inline ::google::protobuf::RepeatedPtrField< ::DB_C_RedEnvelopeInfo >*
DB_C_GuildRedEnvelope::mutable_listredenvelope() {
  return &listredenvelope_;
}
inline const ::DB_C_RedEnvelopeInfo& DB_C_GuildRedEnvelope::listredenvelope(int index) const {
  return listredenvelope_.Get(index);
}
inline ::DB_C_RedEnvelopeInfo* DB_C_GuildRedEnvelope::mutable_listredenvelope(int index) {
  return listredenvelope_.Mutable(index);
}
inline ::DB_C_RedEnvelopeInfo* DB_C_GuildRedEnvelope::add_listredenvelope() {
  return listredenvelope_.Add();
}

// -------------------------------------------------------------------

// DB_C_RedEnvelopeInfo

// optional int32 nID = 1 [default = 0];
inline bool DB_C_RedEnvelopeInfo::has_nid() const {
  return _has_bit(0);
}
inline void DB_C_RedEnvelopeInfo::clear_nid() {
  nid_ = 0;
  _clear_bit(0);
}
inline ::google::protobuf::int32 DB_C_RedEnvelopeInfo::nid() const {
  return nid_;
}
inline void DB_C_RedEnvelopeInfo::set_nid(::google::protobuf::int32 value) {
  _set_bit(0);
  nid_ = value;
}

// optional int32 nType = 2 [default = 0];
inline bool DB_C_RedEnvelopeInfo::has_ntype() const {
  return _has_bit(1);
}
inline void DB_C_RedEnvelopeInfo::clear_ntype() {
  ntype_ = 0;
  _clear_bit(1);
}
inline ::google::protobuf::int32 DB_C_RedEnvelopeInfo::ntype() const {
  return ntype_;
}
inline void DB_C_RedEnvelopeInfo::set_ntype(::google::protobuf::int32 value) {
  _set_bit(1);
  ntype_ = value;
}

// optional int64 uid = 3 [default = 0];
inline bool DB_C_RedEnvelopeInfo::has_uid() const {
  return _has_bit(2);
}
inline void DB_C_RedEnvelopeInfo::clear_uid() {
  uid_ = GOOGLE_LONGLONG(0);
  _clear_bit(2);
}
inline ::google::protobuf::int64 DB_C_RedEnvelopeInfo::uid() const {
  return uid_;
}
inline void DB_C_RedEnvelopeInfo::set_uid(::google::protobuf::int64 value) {
  _set_bit(2);
  uid_ = value;
}

// optional int32 nTotalCredit = 4 [default = 0];
inline bool DB_C_RedEnvelopeInfo::has_ntotalcredit() const {
  return _has_bit(3);
}
inline void DB_C_RedEnvelopeInfo::clear_ntotalcredit() {
  ntotalcredit_ = 0;
  _clear_bit(3);
}
inline ::google::protobuf::int32 DB_C_RedEnvelopeInfo::ntotalcredit() const {
  return ntotalcredit_;
}
inline void DB_C_RedEnvelopeInfo::set_ntotalcredit(::google::protobuf::int32 value) {
  _set_bit(3);
  ntotalcredit_ = value;
}

// optional int32 nIssueTime = 5 [default = 0];
inline bool DB_C_RedEnvelopeInfo::has_nissuetime() const {
  return _has_bit(4);
}
inline void DB_C_RedEnvelopeInfo::clear_nissuetime() {
  nissuetime_ = 0;
  _clear_bit(4);
}
inline ::google::protobuf::int32 DB_C_RedEnvelopeInfo::nissuetime() const {
  return nissuetime_;
}
inline void DB_C_RedEnvelopeInfo::set_nissuetime(::google::protobuf::int32 value) {
  _set_bit(4);
  nissuetime_ = value;
}

// optional int32 nOverdueTime = 6 [default = 0];
inline bool DB_C_RedEnvelopeInfo::has_noverduetime() const {
  return _has_bit(5);
}
inline void DB_C_RedEnvelopeInfo::clear_noverduetime() {
  noverduetime_ = 0;
  _clear_bit(5);
}
inline ::google::protobuf::int32 DB_C_RedEnvelopeInfo::noverduetime() const {
  return noverduetime_;
}
inline void DB_C_RedEnvelopeInfo::set_noverduetime(::google::protobuf::int32 value) {
  _set_bit(5);
  noverduetime_ = value;
}

// optional int32 nGiveOut = 7 [default = 0];
inline bool DB_C_RedEnvelopeInfo::has_ngiveout() const {
  return _has_bit(6);
}
inline void DB_C_RedEnvelopeInfo::clear_ngiveout() {
  ngiveout_ = 0;
  _clear_bit(6);
}
inline ::google::protobuf::int32 DB_C_RedEnvelopeInfo::ngiveout() const {
  return ngiveout_;
}
inline void DB_C_RedEnvelopeInfo::set_ngiveout(::google::protobuf::int32 value) {
  _set_bit(6);
  ngiveout_ = value;
}

// optional int32 nTotalNum = 8 [default = 0];
inline bool DB_C_RedEnvelopeInfo::has_ntotalnum() const {
  return _has_bit(7);
}
inline void DB_C_RedEnvelopeInfo::clear_ntotalnum() {
  ntotalnum_ = 0;
  _clear_bit(7);
}
inline ::google::protobuf::int32 DB_C_RedEnvelopeInfo::ntotalnum() const {
  return ntotalnum_;
}
inline void DB_C_RedEnvelopeInfo::set_ntotalnum(::google::protobuf::int32 value) {
  _set_bit(7);
  ntotalnum_ = value;
}

// optional int32 nAdjType = 9 [default = 0];
inline bool DB_C_RedEnvelopeInfo::has_nadjtype() const {
  return _has_bit(8);
}
inline void DB_C_RedEnvelopeInfo::clear_nadjtype() {
  nadjtype_ = 0;
  _clear_bit(8);
}
inline ::google::protobuf::int32 DB_C_RedEnvelopeInfo::nadjtype() const {
  return nadjtype_;
}
inline void DB_C_RedEnvelopeInfo::set_nadjtype(::google::protobuf::int32 value) {
  _set_bit(8);
  nadjtype_ = value;
}

// optional bool bRefund = 10 [default = false];
inline bool DB_C_RedEnvelopeInfo::has_brefund() const {
  return _has_bit(9);
}
inline void DB_C_RedEnvelopeInfo::clear_brefund() {
  brefund_ = false;
  _clear_bit(9);
}
inline bool DB_C_RedEnvelopeInfo::brefund() const {
  return brefund_;
}
inline void DB_C_RedEnvelopeInfo::set_brefund(bool value) {
  _set_bit(9);
  brefund_ = value;
}

// repeated .DB_C_RedEnvelopeReport listReport = 11;
inline int DB_C_RedEnvelopeInfo::listreport_size() const {
  return listreport_.size();
}
inline void DB_C_RedEnvelopeInfo::clear_listreport() {
  listreport_.Clear();
}
inline const ::google::protobuf::RepeatedPtrField< ::DB_C_RedEnvelopeReport >&
DB_C_RedEnvelopeInfo::listreport() const {
  return listreport_;
}
inline ::google::protobuf::RepeatedPtrField< ::DB_C_RedEnvelopeReport >*
DB_C_RedEnvelopeInfo::mutable_listreport() {
  return &listreport_;
}
inline const ::DB_C_RedEnvelopeReport& DB_C_RedEnvelopeInfo::listreport(int index) const {
  return listreport_.Get(index);
}
inline ::DB_C_RedEnvelopeReport* DB_C_RedEnvelopeInfo::mutable_listreport(int index) {
  return listreport_.Mutable(index);
}
inline ::DB_C_RedEnvelopeReport* DB_C_RedEnvelopeInfo::add_listreport() {
  return listreport_.Add();
}

// -------------------------------------------------------------------

// DB_C_RedEnvelopeReport

// optional int32 nTime = 1 [default = 0];
inline bool DB_C_RedEnvelopeReport::has_ntime() const {
  return _has_bit(0);
}
inline void DB_C_RedEnvelopeReport::clear_ntime() {
  ntime_ = 0;
  _clear_bit(0);
}
inline ::google::protobuf::int32 DB_C_RedEnvelopeReport::ntime() const {
  return ntime_;
}
inline void DB_C_RedEnvelopeReport::set_ntime(::google::protobuf::int32 value) {
  _set_bit(0);
  ntime_ = value;
}

// optional int64 nUid = 2 [default = 0];
inline bool DB_C_RedEnvelopeReport::has_nuid() const {
  return _has_bit(1);
}
inline void DB_C_RedEnvelopeReport::clear_nuid() {
  nuid_ = GOOGLE_LONGLONG(0);
  _clear_bit(1);
}
inline ::google::protobuf::int64 DB_C_RedEnvelopeReport::nuid() const {
  return nuid_;
}
inline void DB_C_RedEnvelopeReport::set_nuid(::google::protobuf::int64 value) {
  _set_bit(1);
  nuid_ = value;
}

// optional int32 nGetNum = 3 [default = 0];
inline bool DB_C_RedEnvelopeReport::has_ngetnum() const {
  return _has_bit(2);
}
inline void DB_C_RedEnvelopeReport::clear_ngetnum() {
  ngetnum_ = 0;
  _clear_bit(2);
}
inline ::google::protobuf::int32 DB_C_RedEnvelopeReport::ngetnum() const {
  return ngetnum_;
}
inline void DB_C_RedEnvelopeReport::set_ngetnum(::google::protobuf::int32 value) {
  _set_bit(2);
  ngetnum_ = value;
}

// -------------------------------------------------------------------

// DB_C_RedEnvelopeCount

// optional int32 nFlag = 1 [default = 0];
inline bool DB_C_RedEnvelopeCount::has_nflag() const {
  return _has_bit(0);
}
inline void DB_C_RedEnvelopeCount::clear_nflag() {
  nflag_ = 0;
  _clear_bit(0);
}
inline ::google::protobuf::int32 DB_C_RedEnvelopeCount::nflag() const {
  return nflag_;
}
inline void DB_C_RedEnvelopeCount::set_nflag(::google::protobuf::int32 value) {
  _set_bit(0);
  nflag_ = value;
}

// optional int64 nTotalNum = 2 [default = 0];
inline bool DB_C_RedEnvelopeCount::has_ntotalnum() const {
  return _has_bit(1);
}
inline void DB_C_RedEnvelopeCount::clear_ntotalnum() {
  ntotalnum_ = GOOGLE_LONGLONG(0);
  _clear_bit(1);
}
inline ::google::protobuf::int64 DB_C_RedEnvelopeCount::ntotalnum() const {
  return ntotalnum_;
}
inline void DB_C_RedEnvelopeCount::set_ntotalnum(::google::protobuf::int64 value) {
  _set_bit(1);
  ntotalnum_ = value;
}

// optional int32 nSendTotal = 3 [default = 0];
inline bool DB_C_RedEnvelopeCount::has_nsendtotal() const {
  return _has_bit(2);
}
inline void DB_C_RedEnvelopeCount::clear_nsendtotal() {
  nsendtotal_ = 0;
  _clear_bit(2);
}
inline ::google::protobuf::int32 DB_C_RedEnvelopeCount::nsendtotal() const {
  return nsendtotal_;
}
inline void DB_C_RedEnvelopeCount::set_nsendtotal(::google::protobuf::int32 value) {
  _set_bit(2);
  nsendtotal_ = value;
}


#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

#endif  // PROTOBUF_countryDB_2eproto__INCLUDED
