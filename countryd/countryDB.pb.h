// Generated by the protocol buffer compiler.  DO NOT EDIT!

#ifndef PROTOBUF_countryDB_2eproto__INCLUDED
#define PROTOBUF_countryDB_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2002000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2002000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_countryDB_2eproto();
void protobuf_AssignDesc_countryDB_2eproto();
void protobuf_ShutdownFile_countryDB_2eproto();

class DB_C_City;
class DB_C_Country;

// ===================================================================

class DB_C_City : public ::google::protobuf::Message {
 public:
  DB_C_City();
  virtual ~DB_C_City();
  
  DB_C_City(const DB_C_City& from);
  
  inline DB_C_City& operator=(const DB_C_City& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const DB_C_City& default_instance();
  void Swap(DB_C_City* other);
  
  // implements Message ----------------------------------------------
  
  DB_C_City* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DB_C_City& from);
  void MergeFrom(const DB_C_City& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const { _cached_size_ = size; }
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required int32 cityID = 1;
  inline bool has_cityid() const;
  inline void clear_cityid();
  static const int kCityIDFieldNumber = 1;
  inline ::google::protobuf::int32 cityid() const;
  inline void set_cityid(::google::protobuf::int32 value);
  
  // optional int64 ltSaveRevision = 2 [default = 0];
  inline bool has_ltsaverevision() const;
  inline void clear_ltsaverevision();
  static const int kLtSaveRevisionFieldNumber = 2;
  inline ::google::protobuf::int64 ltsaverevision() const;
  inline void set_ltsaverevision(::google::protobuf::int64 value);
  
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::google::protobuf::int32 cityid_;
  ::google::protobuf::int64 ltsaverevision_;
  friend void  protobuf_AddDesc_countryDB_2eproto();
  friend void protobuf_AssignDesc_countryDB_2eproto();
  friend void protobuf_ShutdownFile_countryDB_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static DB_C_City* default_instance_;
};
// -------------------------------------------------------------------

class DB_C_Country : public ::google::protobuf::Message {
 public:
  DB_C_Country();
  virtual ~DB_C_Country();
  
  DB_C_Country(const DB_C_Country& from);
  
  inline DB_C_Country& operator=(const DB_C_Country& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const DB_C_Country& default_instance();
  void Swap(DB_C_Country* other);
  
  // implements Message ----------------------------------------------
  
  DB_C_Country* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DB_C_Country& from);
  void MergeFrom(const DB_C_Country& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const { _cached_size_ = size; }
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required int32 region = 1;
  inline bool has_region() const;
  inline void clear_region();
  static const int kRegionFieldNumber = 1;
  inline ::google::protobuf::int32 region() const;
  inline void set_region(::google::protobuf::int32 value);
  
  // repeated .DB_C_City city = 2;
  inline int city_size() const;
  inline void clear_city();
  static const int kCityFieldNumber = 2;
  inline const ::google::protobuf::RepeatedPtrField< ::DB_C_City >& city() const;
  inline ::google::protobuf::RepeatedPtrField< ::DB_C_City >* mutable_city();
  inline const ::DB_C_City& city(int index) const;
  inline ::DB_C_City* mutable_city(int index);
  inline ::DB_C_City* add_city();
  
  // optional int64 ltSaveRevision = 4 [default = 0];
  inline bool has_ltsaverevision() const;
  inline void clear_ltsaverevision();
  static const int kLtSaveRevisionFieldNumber = 4;
  inline ::google::protobuf::int64 ltsaverevision() const;
  inline void set_ltsaverevision(::google::protobuf::int64 value);
  
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::google::protobuf::int32 region_;
  ::google::protobuf::RepeatedPtrField< ::DB_C_City > city_;
  ::google::protobuf::int64 ltsaverevision_;
  friend void  protobuf_AddDesc_countryDB_2eproto();
  friend void protobuf_AssignDesc_countryDB_2eproto();
  friend void protobuf_ShutdownFile_countryDB_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static DB_C_Country* default_instance_;
};
// ===================================================================


// ===================================================================


// ===================================================================

// DB_C_City

// required int32 cityID = 1;
inline bool DB_C_City::has_cityid() const {
  return _has_bit(0);
}
inline void DB_C_City::clear_cityid() {
  cityid_ = 0;
  _clear_bit(0);
}
inline ::google::protobuf::int32 DB_C_City::cityid() const {
  return cityid_;
}
inline void DB_C_City::set_cityid(::google::protobuf::int32 value) {
  _set_bit(0);
  cityid_ = value;
}

// optional int64 ltSaveRevision = 2 [default = 0];
inline bool DB_C_City::has_ltsaverevision() const {
  return _has_bit(1);
}
inline void DB_C_City::clear_ltsaverevision() {
  ltsaverevision_ = GOOGLE_LONGLONG(0);
  _clear_bit(1);
}
inline ::google::protobuf::int64 DB_C_City::ltsaverevision() const {
  return ltsaverevision_;
}
inline void DB_C_City::set_ltsaverevision(::google::protobuf::int64 value) {
  _set_bit(1);
  ltsaverevision_ = value;
}

// -------------------------------------------------------------------

// DB_C_Country

// required int32 region = 1;
inline bool DB_C_Country::has_region() const {
  return _has_bit(0);
}
inline void DB_C_Country::clear_region() {
  region_ = 0;
  _clear_bit(0);
}
inline ::google::protobuf::int32 DB_C_Country::region() const {
  return region_;
}
inline void DB_C_Country::set_region(::google::protobuf::int32 value) {
  _set_bit(0);
  region_ = value;
}

// repeated .DB_C_City city = 2;
inline int DB_C_Country::city_size() const {
  return city_.size();
}
inline void DB_C_Country::clear_city() {
  city_.Clear();
}
inline const ::google::protobuf::RepeatedPtrField< ::DB_C_City >&
DB_C_Country::city() const {
  return city_;
}
inline ::google::protobuf::RepeatedPtrField< ::DB_C_City >*
DB_C_Country::mutable_city() {
  return &city_;
}
inline const ::DB_C_City& DB_C_Country::city(int index) const {
  return city_.Get(index);
}
inline ::DB_C_City* DB_C_Country::mutable_city(int index) {
  return city_.Mutable(index);
}
inline ::DB_C_City* DB_C_Country::add_city() {
  return city_.Add();
}

// optional int64 ltSaveRevision = 4 [default = 0];
inline bool DB_C_Country::has_ltsaverevision() const {
  return _has_bit(2);
}
inline void DB_C_Country::clear_ltsaverevision() {
  ltsaverevision_ = GOOGLE_LONGLONG(0);
  _clear_bit(2);
}
inline ::google::protobuf::int64 DB_C_Country::ltsaverevision() const {
  return ltsaverevision_;
}
inline void DB_C_Country::set_ltsaverevision(::google::protobuf::int64 value) {
  _set_bit(2);
  ltsaverevision_ = value;
}


#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

#endif  // PROTOBUF_countryDB_2eproto__INCLUDED
