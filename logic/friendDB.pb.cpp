// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "friendDB.pb.h"
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>

namespace {

const ::google::protobuf::Descriptor* DB_FrdRegionInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DB_FrdRegionInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* DB_FrdPlatInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DB_FrdPlatInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* DB_FrdInfoLite_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DB_FrdInfoLite_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_friendDB_2eproto() {
  protobuf_AddDesc_friendDB_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "friendDB.proto");
  GOOGLE_CHECK(file != NULL);
  DB_FrdRegionInfo_descriptor_ = file->message_type(0);
  static const int DB_FrdRegionInfo_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_FrdRegionInfo, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_FrdRegionInfo, region_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_FrdRegionInfo, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_FrdRegionInfo, finishcapturetm_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_FrdRegionInfo, lastlogontime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_FrdRegionInfo, viplevel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_FrdRegionInfo, viptype_),
  };
  DB_FrdRegionInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DB_FrdRegionInfo_descriptor_,
      DB_FrdRegionInfo::default_instance_,
      DB_FrdRegionInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_FrdRegionInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_FrdRegionInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DB_FrdRegionInfo));
  DB_FrdPlatInfo_descriptor_ = file->message_type(1);
  static const int DB_FrdPlatInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_FrdPlatInfo, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_FrdPlatInfo, profile_link_),
  };
  DB_FrdPlatInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DB_FrdPlatInfo_descriptor_,
      DB_FrdPlatInfo::default_instance_,
      DB_FrdPlatInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_FrdPlatInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_FrdPlatInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DB_FrdPlatInfo));
  DB_FrdInfoLite_descriptor_ = file->message_type(2);
  static const int DB_FrdInfoLite_offsets_[18] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_FrdInfoLite, userid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_FrdInfoLite, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_FrdInfoLite, profile_link_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_FrdInfoLite, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_FrdInfoLite, is_yellow_vip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_FrdInfoLite, is_yellow_year_vip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_FrdInfoLite, yellow_vip_level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_FrdInfoLite, qqdmdlvl_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_FrdInfoLite, isqqdmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_FrdInfoLite, isqqdmdyear_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_FrdInfoLite, region_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_FrdInfoLite, platinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_FrdInfoLite, is_high_yellow_vip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_FrdInfoLite, qhalldmdlvl_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_FrdInfoLite, isqhalldmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_FrdInfoLite, isqhalldmdyear_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_FrdInfoLite, ishighqhalldmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_FrdInfoLite, ishighqhalldmdyear_),
  };
  DB_FrdInfoLite_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DB_FrdInfoLite_descriptor_,
      DB_FrdInfoLite::default_instance_,
      DB_FrdInfoLite_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_FrdInfoLite, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_FrdInfoLite, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DB_FrdInfoLite));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_friendDB_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DB_FrdRegionInfo_descriptor_, &DB_FrdRegionInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DB_FrdPlatInfo_descriptor_, &DB_FrdPlatInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DB_FrdInfoLite_descriptor_, &DB_FrdInfoLite::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_friendDB_2eproto() {
  delete DB_FrdRegionInfo::default_instance_;
  delete DB_FrdRegionInfo_reflection_;
  delete DB_FrdPlatInfo::default_instance_;
  delete DB_FrdPlatInfo_reflection_;
  delete DB_FrdInfoLite::default_instance_;
  delete DB_FrdInfoLite_reflection_;
}

void protobuf_AddDesc_friendDB_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\016friendDB.proto\"\246\001\n\020DB_FrdRegionInfo\022\016\n"
    "\003uid\030\001 \001(\003:\0010\022\021\n\006region\030\002 \001(\005:\0010\022\020\n\005leve"
    "l\030\003 \001(\005:\0010\022\032\n\017finishCaptureTm\030\004 \001(\005:\0010\022\030"
    "\n\rlastLogonTime\030\005 \001(\005:\0010\022\023\n\010viplevel\030\006 \001"
    "(\005:\0010\022\022\n\007viptype\030\007 \001(\005:\0010\"4\n\016DB_FrdPlatI"
    "nfo\022\014\n\004name\030\001 \001(\t\022\024\n\014profile_link\030\002 \001(\t\""
    "\336\003\n\016DB_FrdInfoLite\022\016\n\006userid\030\001 \002(\t\022\014\n\004na"
    "me\030\002 \003(\t\022\024\n\014profile_link\030\003 \003(\t\022\r\n\005level\030"
    "\004 \001(\r\022\034\n\ris_yellow_vip\030\005 \001(\010:\005false\022!\n\022i"
    "s_yellow_year_vip\030\006 \001(\010:\005false\022\033\n\020yellow"
    "_vip_level\030\007 \001(\005:\0010\022\023\n\010QQDmdLvl\030\010 \001(\005:\0010"
    "\022\026\n\007isQQDmd\030\t \001(\010:\005false\022\032\n\013isQQDmdYear\030"
    "\n \001(\010:\005false\022!\n\006region\030\013 \003(\0132\021.DB_FrdReg"
    "ionInfo\022!\n\010platInfo\030\014 \003(\0132\017.DB_FrdPlatIn"
    "fo\022\035\n\022is_high_yellow_vip\030\r \001(\005:\0010\022\026\n\013QHa"
    "llDmdLvl\030\016 \001(\005:\0010\022\031\n\nisQHallDmd\030\017 \001(\010:\005f"
    "alse\022\026\n\016isQHallDmdYear\030\020 \001(\010\022\026\n\016isHighQH"
    "allDmd\030\021 \001(\010\022\032\n\022isHighQHallDmdYear\030\022 \001(\010", 720);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "friendDB.proto", &protobuf_RegisterTypes);
  DB_FrdRegionInfo::default_instance_ = new DB_FrdRegionInfo();
  DB_FrdPlatInfo::default_instance_ = new DB_FrdPlatInfo();
  DB_FrdInfoLite::default_instance_ = new DB_FrdInfoLite();
  DB_FrdRegionInfo::default_instance_->InitAsDefaultInstance();
  DB_FrdPlatInfo::default_instance_->InitAsDefaultInstance();
  DB_FrdInfoLite::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_friendDB_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_friendDB_2eproto {
  StaticDescriptorInitializer_friendDB_2eproto() {
    protobuf_AddDesc_friendDB_2eproto();
  }
} static_descriptor_initializer_friendDB_2eproto_;


// ===================================================================

#ifndef _MSC_VER
const int DB_FrdRegionInfo::kUidFieldNumber;
const int DB_FrdRegionInfo::kRegionFieldNumber;
const int DB_FrdRegionInfo::kLevelFieldNumber;
const int DB_FrdRegionInfo::kFinishCaptureTmFieldNumber;
const int DB_FrdRegionInfo::kLastLogonTimeFieldNumber;
const int DB_FrdRegionInfo::kViplevelFieldNumber;
const int DB_FrdRegionInfo::kViptypeFieldNumber;
#endif  // !_MSC_VER

DB_FrdRegionInfo::DB_FrdRegionInfo() {
  SharedCtor();
}

void DB_FrdRegionInfo::InitAsDefaultInstance() {
}

DB_FrdRegionInfo::DB_FrdRegionInfo(const DB_FrdRegionInfo& from) {
  SharedCtor();
  MergeFrom(from);
}

void DB_FrdRegionInfo::SharedCtor() {
  _cached_size_ = 0;
  uid_ = GOOGLE_LONGLONG(0);
  region_ = 0;
  level_ = 0;
  finishcapturetm_ = 0;
  lastlogontime_ = 0;
  viplevel_ = 0;
  viptype_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DB_FrdRegionInfo::~DB_FrdRegionInfo() {
  SharedDtor();
}

void DB_FrdRegionInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* DB_FrdRegionInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DB_FrdRegionInfo_descriptor_;
}

const DB_FrdRegionInfo& DB_FrdRegionInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_friendDB_2eproto();  return *default_instance_;
}

DB_FrdRegionInfo* DB_FrdRegionInfo::default_instance_ = NULL;

DB_FrdRegionInfo* DB_FrdRegionInfo::New() const {
  return new DB_FrdRegionInfo;
}

void DB_FrdRegionInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    uid_ = GOOGLE_LONGLONG(0);
    region_ = 0;
    level_ = 0;
    finishcapturetm_ = 0;
    lastlogontime_ = 0;
    viplevel_ = 0;
    viptype_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DB_FrdRegionInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 uid = 1 [default = 0];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt64(
              input, &uid_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_region;
        break;
      }
      
      // optional int32 region = 2 [default = 0];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_region:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &region_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_level;
        break;
      }
      
      // optional int32 level = 3 [default = 0];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_level:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &level_));
        _set_bit(2);
        if (input->ExpectTag(32)) goto parse_finishCaptureTm;
        break;
      }
      
      // optional int32 finishCaptureTm = 4 [default = 0];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_finishCaptureTm:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &finishcapturetm_));
        _set_bit(3);
        if (input->ExpectTag(40)) goto parse_lastLogonTime;
        break;
      }
      
      // optional int32 lastLogonTime = 5 [default = 0];
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_lastLogonTime:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &lastlogontime_));
        _set_bit(4);
        if (input->ExpectTag(48)) goto parse_viplevel;
        break;
      }
      
      // optional int32 viplevel = 6 [default = 0];
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_viplevel:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &viplevel_));
        _set_bit(5);
        if (input->ExpectTag(56)) goto parse_viptype;
        break;
      }
      
      // optional int32 viptype = 7 [default = 0];
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_viptype:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &viptype_));
        _set_bit(6);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DB_FrdRegionInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    DB_FrdRegionInfo::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional int64 uid = 1 [default = 0];
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->uid(), output);
  }
  
  // optional int32 region = 2 [default = 0];
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->region(), output);
  }
  
  // optional int32 level = 3 [default = 0];
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->level(), output);
  }
  
  // optional int32 finishCaptureTm = 4 [default = 0];
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->finishcapturetm(), output);
  }
  
  // optional int32 lastLogonTime = 5 [default = 0];
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->lastlogontime(), output);
  }
  
  // optional int32 viplevel = 6 [default = 0];
  if (_has_bit(5)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->viplevel(), output);
  }
  
  // optional int32 viptype = 7 [default = 0];
  if (_has_bit(6)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->viptype(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DB_FrdRegionInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int64 uid = 1 [default = 0];
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->uid(), target);
  }
  
  // optional int32 region = 2 [default = 0];
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->region(), target);
  }
  
  // optional int32 level = 3 [default = 0];
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->level(), target);
  }
  
  // optional int32 finishCaptureTm = 4 [default = 0];
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->finishcapturetm(), target);
  }
  
  // optional int32 lastLogonTime = 5 [default = 0];
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->lastlogontime(), target);
  }
  
  // optional int32 viplevel = 6 [default = 0];
  if (_has_bit(5)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->viplevel(), target);
  }
  
  // optional int32 viptype = 7 [default = 0];
  if (_has_bit(6)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->viptype(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DB_FrdRegionInfo::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 uid = 1 [default = 0];
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->uid());
    }
    
    // optional int32 region = 2 [default = 0];
    if (has_region()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->region());
    }
    
    // optional int32 level = 3 [default = 0];
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->level());
    }
    
    // optional int32 finishCaptureTm = 4 [default = 0];
    if (has_finishcapturetm()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->finishcapturetm());
    }
    
    // optional int32 lastLogonTime = 5 [default = 0];
    if (has_lastlogontime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->lastlogontime());
    }
    
    // optional int32 viplevel = 6 [default = 0];
    if (has_viplevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->viplevel());
    }
    
    // optional int32 viptype = 7 [default = 0];
    if (has_viptype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->viptype());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void DB_FrdRegionInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DB_FrdRegionInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DB_FrdRegionInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DB_FrdRegionInfo::MergeFrom(const DB_FrdRegionInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_uid(from.uid());
    }
    if (from._has_bit(1)) {
      set_region(from.region());
    }
    if (from._has_bit(2)) {
      set_level(from.level());
    }
    if (from._has_bit(3)) {
      set_finishcapturetm(from.finishcapturetm());
    }
    if (from._has_bit(4)) {
      set_lastlogontime(from.lastlogontime());
    }
    if (from._has_bit(5)) {
      set_viplevel(from.viplevel());
    }
    if (from._has_bit(6)) {
      set_viptype(from.viptype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DB_FrdRegionInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DB_FrdRegionInfo::CopyFrom(const DB_FrdRegionInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DB_FrdRegionInfo::IsInitialized() const {
  
  return true;
}

void DB_FrdRegionInfo::Swap(DB_FrdRegionInfo* other) {
  if (other != this) {
    std::swap(uid_, other->uid_);
    std::swap(region_, other->region_);
    std::swap(level_, other->level_);
    std::swap(finishcapturetm_, other->finishcapturetm_);
    std::swap(lastlogontime_, other->lastlogontime_);
    std::swap(viplevel_, other->viplevel_);
    std::swap(viptype_, other->viptype_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DB_FrdRegionInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DB_FrdRegionInfo_descriptor_;
  metadata.reflection = DB_FrdRegionInfo_reflection_;
  return metadata;
}


// ===================================================================

const ::std::string DB_FrdPlatInfo::_default_name_;
const ::std::string DB_FrdPlatInfo::_default_profile_link_;
#ifndef _MSC_VER
const int DB_FrdPlatInfo::kNameFieldNumber;
const int DB_FrdPlatInfo::kProfileLinkFieldNumber;
#endif  // !_MSC_VER

DB_FrdPlatInfo::DB_FrdPlatInfo() {
  SharedCtor();
}

void DB_FrdPlatInfo::InitAsDefaultInstance() {
}

DB_FrdPlatInfo::DB_FrdPlatInfo(const DB_FrdPlatInfo& from) {
  SharedCtor();
  MergeFrom(from);
}

void DB_FrdPlatInfo::SharedCtor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&_default_name_);
  profile_link_ = const_cast< ::std::string*>(&_default_profile_link_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DB_FrdPlatInfo::~DB_FrdPlatInfo() {
  SharedDtor();
}

void DB_FrdPlatInfo::SharedDtor() {
  if (name_ != &_default_name_) {
    delete name_;
  }
  if (profile_link_ != &_default_profile_link_) {
    delete profile_link_;
  }
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* DB_FrdPlatInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DB_FrdPlatInfo_descriptor_;
}

const DB_FrdPlatInfo& DB_FrdPlatInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_friendDB_2eproto();  return *default_instance_;
}

DB_FrdPlatInfo* DB_FrdPlatInfo::default_instance_ = NULL;

DB_FrdPlatInfo* DB_FrdPlatInfo::New() const {
  return new DB_FrdPlatInfo;
}

void DB_FrdPlatInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (name_ != &_default_name_) {
        name_->clear();
      }
    }
    if (_has_bit(1)) {
      if (profile_link_ != &_default_profile_link_) {
        profile_link_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DB_FrdPlatInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadString(
              input, this->mutable_name()));
        ::google::protobuf::internal::WireFormat::VerifyUTF8String(
          this->name().data(), this->name().length(),
          ::google::protobuf::internal::WireFormat::PARSE);
        if (input->ExpectTag(18)) goto parse_profile_link;
        break;
      }
      
      // optional string profile_link = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_profile_link:
        DO_(::google::protobuf::internal::WireFormatLite::ReadString(
              input, this->mutable_profile_link()));
        ::google::protobuf::internal::WireFormat::VerifyUTF8String(
          this->profile_link().data(), this->profile_link().length(),
          ::google::protobuf::internal::WireFormat::PARSE);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DB_FrdPlatInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    DB_FrdPlatInfo::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional string name = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->name(), output);
  }
  
  // optional string profile_link = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->profile_link().data(), this->profile_link().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->profile_link(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DB_FrdPlatInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string name = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }
  
  // optional string profile_link = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->profile_link().data(), this->profile_link().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->profile_link(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DB_FrdPlatInfo::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }
    
    // optional string profile_link = 2;
    if (has_profile_link()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->profile_link());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void DB_FrdPlatInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DB_FrdPlatInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DB_FrdPlatInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DB_FrdPlatInfo::MergeFrom(const DB_FrdPlatInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_name(from.name());
    }
    if (from._has_bit(1)) {
      set_profile_link(from.profile_link());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DB_FrdPlatInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DB_FrdPlatInfo::CopyFrom(const DB_FrdPlatInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DB_FrdPlatInfo::IsInitialized() const {
  
  return true;
}

void DB_FrdPlatInfo::Swap(DB_FrdPlatInfo* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(profile_link_, other->profile_link_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DB_FrdPlatInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DB_FrdPlatInfo_descriptor_;
  metadata.reflection = DB_FrdPlatInfo_reflection_;
  return metadata;
}


// ===================================================================

const ::std::string DB_FrdInfoLite::_default_userid_;
#ifndef _MSC_VER
const int DB_FrdInfoLite::kUseridFieldNumber;
const int DB_FrdInfoLite::kNameFieldNumber;
const int DB_FrdInfoLite::kProfileLinkFieldNumber;
const int DB_FrdInfoLite::kLevelFieldNumber;
const int DB_FrdInfoLite::kIsYellowVipFieldNumber;
const int DB_FrdInfoLite::kIsYellowYearVipFieldNumber;
const int DB_FrdInfoLite::kYellowVipLevelFieldNumber;
const int DB_FrdInfoLite::kQQDmdLvlFieldNumber;
const int DB_FrdInfoLite::kIsQQDmdFieldNumber;
const int DB_FrdInfoLite::kIsQQDmdYearFieldNumber;
const int DB_FrdInfoLite::kRegionFieldNumber;
const int DB_FrdInfoLite::kPlatInfoFieldNumber;
const int DB_FrdInfoLite::kIsHighYellowVipFieldNumber;
const int DB_FrdInfoLite::kQHallDmdLvlFieldNumber;
const int DB_FrdInfoLite::kIsQHallDmdFieldNumber;
const int DB_FrdInfoLite::kIsQHallDmdYearFieldNumber;
const int DB_FrdInfoLite::kIsHighQHallDmdFieldNumber;
const int DB_FrdInfoLite::kIsHighQHallDmdYearFieldNumber;
#endif  // !_MSC_VER

DB_FrdInfoLite::DB_FrdInfoLite() {
  SharedCtor();
}

void DB_FrdInfoLite::InitAsDefaultInstance() {
}

DB_FrdInfoLite::DB_FrdInfoLite(const DB_FrdInfoLite& from) {
  SharedCtor();
  MergeFrom(from);
}

void DB_FrdInfoLite::SharedCtor() {
  _cached_size_ = 0;
  userid_ = const_cast< ::std::string*>(&_default_userid_);
  level_ = 0u;
  is_yellow_vip_ = false;
  is_yellow_year_vip_ = false;
  yellow_vip_level_ = 0;
  qqdmdlvl_ = 0;
  isqqdmd_ = false;
  isqqdmdyear_ = false;
  is_high_yellow_vip_ = 0;
  qhalldmdlvl_ = 0;
  isqhalldmd_ = false;
  isqhalldmdyear_ = false;
  ishighqhalldmd_ = false;
  ishighqhalldmdyear_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DB_FrdInfoLite::~DB_FrdInfoLite() {
  SharedDtor();
}

void DB_FrdInfoLite::SharedDtor() {
  if (userid_ != &_default_userid_) {
    delete userid_;
  }
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* DB_FrdInfoLite::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DB_FrdInfoLite_descriptor_;
}

const DB_FrdInfoLite& DB_FrdInfoLite::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_friendDB_2eproto();  return *default_instance_;
}

DB_FrdInfoLite* DB_FrdInfoLite::default_instance_ = NULL;

DB_FrdInfoLite* DB_FrdInfoLite::New() const {
  return new DB_FrdInfoLite;
}

void DB_FrdInfoLite::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (userid_ != &_default_userid_) {
        userid_->clear();
      }
    }
    level_ = 0u;
    is_yellow_vip_ = false;
    is_yellow_year_vip_ = false;
    yellow_vip_level_ = 0;
    qqdmdlvl_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    isqqdmd_ = false;
    isqqdmdyear_ = false;
    is_high_yellow_vip_ = 0;
    qhalldmdlvl_ = 0;
    isqhalldmd_ = false;
    isqhalldmdyear_ = false;
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    ishighqhalldmd_ = false;
    ishighqhalldmdyear_ = false;
  }
  name_.Clear();
  profile_link_.Clear();
  region_.Clear();
  platinfo_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DB_FrdInfoLite::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string userid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadString(
              input, this->mutable_userid()));
        ::google::protobuf::internal::WireFormat::VerifyUTF8String(
          this->userid().data(), this->userid().length(),
          ::google::protobuf::internal::WireFormat::PARSE);
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }
      
      // repeated string name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_name:
        DO_(::google::protobuf::internal::WireFormatLite::ReadString(
              input, this->add_name()));
        ::google::protobuf::internal::WireFormat::VerifyUTF8String(
          this->name(0).data(), this->name(0).length(),
          ::google::protobuf::internal::WireFormat::PARSE);
        if (input->ExpectTag(18)) goto parse_name;
        if (input->ExpectTag(26)) goto parse_profile_link;
        break;
      }
      
      // repeated string profile_link = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_profile_link:
        DO_(::google::protobuf::internal::WireFormatLite::ReadString(
              input, this->add_profile_link()));
        ::google::protobuf::internal::WireFormat::VerifyUTF8String(
          this->profile_link(0).data(), this->profile_link(0).length(),
          ::google::protobuf::internal::WireFormat::PARSE);
        if (input->ExpectTag(26)) goto parse_profile_link;
        if (input->ExpectTag(32)) goto parse_level;
        break;
      }
      
      // optional uint32 level = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_level:
        DO_(::google::protobuf::internal::WireFormatLite::ReadUInt32(
              input, &level_));
        _set_bit(3);
        if (input->ExpectTag(40)) goto parse_is_yellow_vip;
        break;
      }
      
      // optional bool is_yellow_vip = 5 [default = false];
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_is_yellow_vip:
        DO_(::google::protobuf::internal::WireFormatLite::ReadBool(
              input, &is_yellow_vip_));
        _set_bit(4);
        if (input->ExpectTag(48)) goto parse_is_yellow_year_vip;
        break;
      }
      
      // optional bool is_yellow_year_vip = 6 [default = false];
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_is_yellow_year_vip:
        DO_(::google::protobuf::internal::WireFormatLite::ReadBool(
              input, &is_yellow_year_vip_));
        _set_bit(5);
        if (input->ExpectTag(56)) goto parse_yellow_vip_level;
        break;
      }
      
      // optional int32 yellow_vip_level = 7 [default = 0];
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_yellow_vip_level:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &yellow_vip_level_));
        _set_bit(6);
        if (input->ExpectTag(64)) goto parse_QQDmdLvl;
        break;
      }
      
      // optional int32 QQDmdLvl = 8 [default = 0];
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_QQDmdLvl:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &qqdmdlvl_));
        _set_bit(7);
        if (input->ExpectTag(72)) goto parse_isQQDmd;
        break;
      }
      
      // optional bool isQQDmd = 9 [default = false];
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_isQQDmd:
        DO_(::google::protobuf::internal::WireFormatLite::ReadBool(
              input, &isqqdmd_));
        _set_bit(8);
        if (input->ExpectTag(80)) goto parse_isQQDmdYear;
        break;
      }
      
      // optional bool isQQDmdYear = 10 [default = false];
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_isQQDmdYear:
        DO_(::google::protobuf::internal::WireFormatLite::ReadBool(
              input, &isqqdmdyear_));
        _set_bit(9);
        if (input->ExpectTag(90)) goto parse_region;
        break;
      }
      
      // repeated .DB_FrdRegionInfo region = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_region:
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, add_region()));
        if (input->ExpectTag(90)) goto parse_region;
        if (input->ExpectTag(98)) goto parse_platInfo;
        break;
      }
      
      // repeated .DB_FrdPlatInfo platInfo = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_platInfo:
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, add_platinfo()));
        if (input->ExpectTag(98)) goto parse_platInfo;
        if (input->ExpectTag(104)) goto parse_is_high_yellow_vip;
        break;
      }
      
      // optional int32 is_high_yellow_vip = 13 [default = 0];
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_is_high_yellow_vip:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &is_high_yellow_vip_));
        _set_bit(12);
        if (input->ExpectTag(112)) goto parse_QHallDmdLvl;
        break;
      }
      
      // optional int32 QHallDmdLvl = 14 [default = 0];
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_QHallDmdLvl:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &qhalldmdlvl_));
        _set_bit(13);
        if (input->ExpectTag(120)) goto parse_isQHallDmd;
        break;
      }
      
      // optional bool isQHallDmd = 15 [default = false];
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_isQHallDmd:
        DO_(::google::protobuf::internal::WireFormatLite::ReadBool(
              input, &isqhalldmd_));
        _set_bit(14);
        if (input->ExpectTag(128)) goto parse_isQHallDmdYear;
        break;
      }
      
      // optional bool isQHallDmdYear = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_isQHallDmdYear:
        DO_(::google::protobuf::internal::WireFormatLite::ReadBool(
              input, &isqhalldmdyear_));
        _set_bit(15);
        if (input->ExpectTag(136)) goto parse_isHighQHallDmd;
        break;
      }
      
      // optional bool isHighQHallDmd = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_isHighQHallDmd:
        DO_(::google::protobuf::internal::WireFormatLite::ReadBool(
              input, &ishighqhalldmd_));
        _set_bit(16);
        if (input->ExpectTag(144)) goto parse_isHighQHallDmdYear;
        break;
      }
      
      // optional bool isHighQHallDmdYear = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_isHighQHallDmdYear:
        DO_(::google::protobuf::internal::WireFormatLite::ReadBool(
              input, &ishighqhalldmdyear_));
        _set_bit(17);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DB_FrdInfoLite::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    DB_FrdInfoLite::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // required string userid = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->userid().data(), this->userid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->userid(), output);
  }
  
  // repeated string name = 2;
  for (int i = 0; i < this->name_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->name(i).data(), this->name(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->name(i), output);
  }
  
  // repeated string profile_link = 3;
  for (int i = 0; i < this->profile_link_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->profile_link(i).data(), this->profile_link(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->profile_link(i), output);
  }
  
  // optional uint32 level = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->level(), output);
  }
  
  // optional bool is_yellow_vip = 5 [default = false];
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->is_yellow_vip(), output);
  }
  
  // optional bool is_yellow_year_vip = 6 [default = false];
  if (_has_bit(5)) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->is_yellow_year_vip(), output);
  }
  
  // optional int32 yellow_vip_level = 7 [default = 0];
  if (_has_bit(6)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->yellow_vip_level(), output);
  }
  
  // optional int32 QQDmdLvl = 8 [default = 0];
  if (_has_bit(7)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->qqdmdlvl(), output);
  }
  
  // optional bool isQQDmd = 9 [default = false];
  if (_has_bit(8)) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(9, this->isqqdmd(), output);
  }
  
  // optional bool isQQDmdYear = 10 [default = false];
  if (_has_bit(9)) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(10, this->isqqdmdyear(), output);
  }
  
  // repeated .DB_FrdRegionInfo region = 11;
  for (int i = 0; i < this->region_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      11, this->region(i), output);
  }
  
  // repeated .DB_FrdPlatInfo platInfo = 12;
  for (int i = 0; i < this->platinfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      12, this->platinfo(i), output);
  }
  
  // optional int32 is_high_yellow_vip = 13 [default = 0];
  if (_has_bit(12)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->is_high_yellow_vip(), output);
  }
  
  // optional int32 QHallDmdLvl = 14 [default = 0];
  if (_has_bit(13)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->qhalldmdlvl(), output);
  }
  
  // optional bool isQHallDmd = 15 [default = false];
  if (_has_bit(14)) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(15, this->isqhalldmd(), output);
  }
  
  // optional bool isQHallDmdYear = 16;
  if (_has_bit(15)) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(16, this->isqhalldmdyear(), output);
  }
  
  // optional bool isHighQHallDmd = 17;
  if (_has_bit(16)) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(17, this->ishighqhalldmd(), output);
  }
  
  // optional bool isHighQHallDmdYear = 18;
  if (_has_bit(17)) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(18, this->ishighqhalldmdyear(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DB_FrdInfoLite::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string userid = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->userid().data(), this->userid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->userid(), target);
  }
  
  // repeated string name = 2;
  for (int i = 0; i < this->name_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name(i).data(), this->name(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(2, this->name(i), target);
  }
  
  // repeated string profile_link = 3;
  for (int i = 0; i < this->profile_link_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->profile_link(i).data(), this->profile_link(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(3, this->profile_link(i), target);
  }
  
  // optional uint32 level = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->level(), target);
  }
  
  // optional bool is_yellow_vip = 5 [default = false];
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->is_yellow_vip(), target);
  }
  
  // optional bool is_yellow_year_vip = 6 [default = false];
  if (_has_bit(5)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->is_yellow_year_vip(), target);
  }
  
  // optional int32 yellow_vip_level = 7 [default = 0];
  if (_has_bit(6)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->yellow_vip_level(), target);
  }
  
  // optional int32 QQDmdLvl = 8 [default = 0];
  if (_has_bit(7)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->qqdmdlvl(), target);
  }
  
  // optional bool isQQDmd = 9 [default = false];
  if (_has_bit(8)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(9, this->isqqdmd(), target);
  }
  
  // optional bool isQQDmdYear = 10 [default = false];
  if (_has_bit(9)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(10, this->isqqdmdyear(), target);
  }
  
  // repeated .DB_FrdRegionInfo region = 11;
  for (int i = 0; i < this->region_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        11, this->region(i), target);
  }
  
  // repeated .DB_FrdPlatInfo platInfo = 12;
  for (int i = 0; i < this->platinfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        12, this->platinfo(i), target);
  }
  
  // optional int32 is_high_yellow_vip = 13 [default = 0];
  if (_has_bit(12)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->is_high_yellow_vip(), target);
  }
  
  // optional int32 QHallDmdLvl = 14 [default = 0];
  if (_has_bit(13)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(14, this->qhalldmdlvl(), target);
  }
  
  // optional bool isQHallDmd = 15 [default = false];
  if (_has_bit(14)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(15, this->isqhalldmd(), target);
  }
  
  // optional bool isQHallDmdYear = 16;
  if (_has_bit(15)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(16, this->isqhalldmdyear(), target);
  }
  
  // optional bool isHighQHallDmd = 17;
  if (_has_bit(16)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(17, this->ishighqhalldmd(), target);
  }
  
  // optional bool isHighQHallDmdYear = 18;
  if (_has_bit(17)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(18, this->ishighqhalldmdyear(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DB_FrdInfoLite::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string userid = 1;
    if (has_userid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->userid());
    }
    
    // optional uint32 level = 4;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->level());
    }
    
    // optional bool is_yellow_vip = 5 [default = false];
    if (has_is_yellow_vip()) {
      total_size += 1 + 1;
    }
    
    // optional bool is_yellow_year_vip = 6 [default = false];
    if (has_is_yellow_year_vip()) {
      total_size += 1 + 1;
    }
    
    // optional int32 yellow_vip_level = 7 [default = 0];
    if (has_yellow_vip_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->yellow_vip_level());
    }
    
    // optional int32 QQDmdLvl = 8 [default = 0];
    if (has_qqdmdlvl()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->qqdmdlvl());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional bool isQQDmd = 9 [default = false];
    if (has_isqqdmd()) {
      total_size += 1 + 1;
    }
    
    // optional bool isQQDmdYear = 10 [default = false];
    if (has_isqqdmdyear()) {
      total_size += 1 + 1;
    }
    
    // optional int32 is_high_yellow_vip = 13 [default = 0];
    if (has_is_high_yellow_vip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->is_high_yellow_vip());
    }
    
    // optional int32 QHallDmdLvl = 14 [default = 0];
    if (has_qhalldmdlvl()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->qhalldmdlvl());
    }
    
    // optional bool isQHallDmd = 15 [default = false];
    if (has_isqhalldmd()) {
      total_size += 1 + 1;
    }
    
    // optional bool isQHallDmdYear = 16;
    if (has_isqhalldmdyear()) {
      total_size += 2 + 1;
    }
    
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional bool isHighQHallDmd = 17;
    if (has_ishighqhalldmd()) {
      total_size += 2 + 1;
    }
    
    // optional bool isHighQHallDmdYear = 18;
    if (has_ishighqhalldmdyear()) {
      total_size += 2 + 1;
    }
    
  }
  // repeated string name = 2;
  total_size += 1 * this->name_size();
  for (int i = 0; i < this->name_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->name(i));
  }
  
  // repeated string profile_link = 3;
  total_size += 1 * this->profile_link_size();
  for (int i = 0; i < this->profile_link_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->profile_link(i));
  }
  
  // repeated .DB_FrdRegionInfo region = 11;
  total_size += 1 * this->region_size();
  for (int i = 0; i < this->region_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->region(i));
  }
  
  // repeated .DB_FrdPlatInfo platInfo = 12;
  total_size += 1 * this->platinfo_size();
  for (int i = 0; i < this->platinfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->platinfo(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void DB_FrdInfoLite::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DB_FrdInfoLite* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DB_FrdInfoLite*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DB_FrdInfoLite::MergeFrom(const DB_FrdInfoLite& from) {
  GOOGLE_CHECK_NE(&from, this);
  name_.MergeFrom(from.name_);
  profile_link_.MergeFrom(from.profile_link_);
  region_.MergeFrom(from.region_);
  platinfo_.MergeFrom(from.platinfo_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_userid(from.userid());
    }
    if (from._has_bit(3)) {
      set_level(from.level());
    }
    if (from._has_bit(4)) {
      set_is_yellow_vip(from.is_yellow_vip());
    }
    if (from._has_bit(5)) {
      set_is_yellow_year_vip(from.is_yellow_year_vip());
    }
    if (from._has_bit(6)) {
      set_yellow_vip_level(from.yellow_vip_level());
    }
    if (from._has_bit(7)) {
      set_qqdmdlvl(from.qqdmdlvl());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from._has_bit(8)) {
      set_isqqdmd(from.isqqdmd());
    }
    if (from._has_bit(9)) {
      set_isqqdmdyear(from.isqqdmdyear());
    }
    if (from._has_bit(12)) {
      set_is_high_yellow_vip(from.is_high_yellow_vip());
    }
    if (from._has_bit(13)) {
      set_qhalldmdlvl(from.qhalldmdlvl());
    }
    if (from._has_bit(14)) {
      set_isqhalldmd(from.isqhalldmd());
    }
    if (from._has_bit(15)) {
      set_isqhalldmdyear(from.isqhalldmdyear());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from._has_bit(16)) {
      set_ishighqhalldmd(from.ishighqhalldmd());
    }
    if (from._has_bit(17)) {
      set_ishighqhalldmdyear(from.ishighqhalldmdyear());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DB_FrdInfoLite::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DB_FrdInfoLite::CopyFrom(const DB_FrdInfoLite& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DB_FrdInfoLite::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void DB_FrdInfoLite::Swap(DB_FrdInfoLite* other) {
  if (other != this) {
    std::swap(userid_, other->userid_);
    name_.Swap(&other->name_);
    profile_link_.Swap(&other->profile_link_);
    std::swap(level_, other->level_);
    std::swap(is_yellow_vip_, other->is_yellow_vip_);
    std::swap(is_yellow_year_vip_, other->is_yellow_year_vip_);
    std::swap(yellow_vip_level_, other->yellow_vip_level_);
    std::swap(qqdmdlvl_, other->qqdmdlvl_);
    std::swap(isqqdmd_, other->isqqdmd_);
    std::swap(isqqdmdyear_, other->isqqdmdyear_);
    region_.Swap(&other->region_);
    platinfo_.Swap(&other->platinfo_);
    std::swap(is_high_yellow_vip_, other->is_high_yellow_vip_);
    std::swap(qhalldmdlvl_, other->qhalldmdlvl_);
    std::swap(isqhalldmd_, other->isqhalldmd_);
    std::swap(isqhalldmdyear_, other->isqhalldmdyear_);
    std::swap(ishighqhalldmd_, other->ishighqhalldmd_);
    std::swap(ishighqhalldmdyear_, other->ishighqhalldmdyear_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DB_FrdInfoLite::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DB_FrdInfoLite_descriptor_;
  metadata.reflection = DB_FrdInfoLite_reflection_;
  return metadata;
}

