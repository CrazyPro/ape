// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "dbinterface_sub.pb.h"
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>

namespace {

const ::google::protobuf::Descriptor* DB_UserLiteBase_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DB_UserLiteBase_reflection_ = NULL;
const ::google::protobuf::Descriptor* DB_CityUserLite_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DB_CityUserLite_reflection_ = NULL;
const ::google::protobuf::Descriptor* DB_RegionCityUserLite_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DB_RegionCityUserLite_reflection_ = NULL;
const ::google::protobuf::Descriptor* DB_GuildUserLite_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DB_GuildUserLite_reflection_ = NULL;
const ::google::protobuf::Descriptor* DB_StarUserLite_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DB_StarUserLite_reflection_ = NULL;
const ::google::protobuf::Descriptor* DB_UserLite_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DB_UserLite_reflection_ = NULL;
const ::google::protobuf::Descriptor* DB_Star_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DB_Star_reflection_ = NULL;
const ::google::protobuf::Descriptor* DB_BitCache_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DB_BitCache_reflection_ = NULL;
const ::google::protobuf::Descriptor* DB_BanLogin_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DB_BanLogin_reflection_ = NULL;
const ::google::protobuf::Descriptor* DB_QuestRule_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DB_QuestRule_reflection_ = NULL;
const ::google::protobuf::Descriptor* DB_Quest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DB_Quest_reflection_ = NULL;
const ::google::protobuf::Descriptor* DB_AiAttackQueuedArmyInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DB_AiAttackQueuedArmyInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* DB_AiAttackQueued_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DB_AiAttackQueued_reflection_ = NULL;
const ::google::protobuf::Descriptor* DB_AiAttack_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DB_AiAttack_reflection_ = NULL;
const ::google::protobuf::Descriptor* DB_Troop_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DB_Troop_reflection_ = NULL;
const ::google::protobuf::Descriptor* DB_TrapArmy_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DB_TrapArmy_reflection_ = NULL;
const ::google::protobuf::Descriptor* DB_Trap_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DB_Trap_reflection_ = NULL;
const ::google::protobuf::Descriptor* DB_Loot_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DB_Loot_reflection_ = NULL;
const ::google::protobuf::Descriptor* DB_LootEquip_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DB_LootEquip_reflection_ = NULL;
const ::google::protobuf::Descriptor* DB_LootSuperWeapon_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DB_LootSuperWeapon_reflection_ = NULL;
const ::google::protobuf::Descriptor* DB_LootReport_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DB_LootReport_reflection_ = NULL;
const ::google::protobuf::Descriptor* DB_Mushroom_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DB_Mushroom_reflection_ = NULL;
const ::google::protobuf::Descriptor* DB_Stats_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DB_Stats_reflection_ = NULL;
const ::google::protobuf::Descriptor* DB_UpgradeArmy_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DB_UpgradeArmy_reflection_ = NULL;
const ::google::protobuf::Descriptor* DB_UnlockArmy_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DB_UnlockArmy_reflection_ = NULL;
const ::google::protobuf::Descriptor* DB_Academy_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DB_Academy_reflection_ = NULL;
const ::google::protobuf::Descriptor* DB_Monsterbaiter_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DB_Monsterbaiter_reflection_ = NULL;
const ::google::protobuf::Descriptor* DB_Locker_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DB_Locker_reflection_ = NULL;
const ::google::protobuf::Descriptor* DB_Army_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DB_Army_reflection_ = NULL;
const ::google::protobuf::Descriptor* DB_Book_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DB_Book_reflection_ = NULL;
const ::google::protobuf::Descriptor* DB_Emblem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DB_Emblem_reflection_ = NULL;
const ::google::protobuf::Descriptor* DB_EmblemNew_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DB_EmblemNew_reflection_ = NULL;
const ::google::protobuf::Descriptor* DB_WeaponCom_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DB_WeaponCom_reflection_ = NULL;
const ::google::protobuf::Descriptor* DB_WeaponCenter_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DB_WeaponCenter_reflection_ = NULL;
const ::google::protobuf::Descriptor* DB_Jammer_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DB_Jammer_reflection_ = NULL;
const ::google::protobuf::Descriptor* DB_WeaponExtraWpcInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DB_WeaponExtraWpcInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* DB_WeaponExtraEmblemInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DB_WeaponExtraEmblemInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* DB_CaptureBase_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DB_CaptureBase_reflection_ = NULL;
const ::google::protobuf::Descriptor* DB_SlaveRoom_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DB_SlaveRoom_reflection_ = NULL;
const ::google::protobuf::Descriptor* DB_NPCActive_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DB_NPCActive_reflection_ = NULL;
const ::google::protobuf::Descriptor* DB_BaseDefNPC_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DB_BaseDefNPC_reflection_ = NULL;
const ::google::protobuf::Descriptor* DB_AdmiralSkill_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DB_AdmiralSkill_reflection_ = NULL;
const ::google::protobuf::Descriptor* DB_AdmiralSkillData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DB_AdmiralSkillData_reflection_ = NULL;
const ::google::protobuf::Descriptor* DB_AdmiralTrainLV_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DB_AdmiralTrainLV_reflection_ = NULL;
const ::google::protobuf::Descriptor* DB_AdmiralLetter_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DB_AdmiralLetter_reflection_ = NULL;
const ::google::protobuf::Descriptor* DB_AdmiralEquip_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DB_AdmiralEquip_reflection_ = NULL;
const ::google::protobuf::Descriptor* DB_Admiral_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DB_Admiral_reflection_ = NULL;
const ::google::protobuf::Descriptor* DB_AdmiralInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DB_AdmiralInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* DB_HeroLetter_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DB_HeroLetter_reflection_ = NULL;
const ::google::protobuf::Descriptor* DB_HeroSkillData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DB_HeroSkillData_reflection_ = NULL;
const ::google::protobuf::Descriptor* DB_HeroAtkData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DB_HeroAtkData_reflection_ = NULL;
const ::google::protobuf::Descriptor* DB_Hero_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DB_Hero_reflection_ = NULL;
const ::google::protobuf::Descriptor* DB_UpgradeHero_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DB_UpgradeHero_reflection_ = NULL;
const ::google::protobuf::Descriptor* DB_HeroInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DB_HeroInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* DB_Flag_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DB_Flag_reflection_ = NULL;
const ::google::protobuf::Descriptor* DB_Storedata_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DB_Storedata_reflection_ = NULL;
const ::google::protobuf::Descriptor* DB_EnemyStar_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DB_EnemyStar_reflection_ = NULL;
const ::google::protobuf::Descriptor* DB_GiftFrdInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DB_GiftFrdInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* DB_NewComerGiftList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DB_NewComerGiftList_reflection_ = NULL;
const ::google::protobuf::Descriptor* DB_GiftInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DB_GiftInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* DB_DayAtkUser_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DB_DayAtkUser_reflection_ = NULL;
const ::google::protobuf::Descriptor* DB_UserStar_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DB_UserStar_reflection_ = NULL;
const ::google::protobuf::Descriptor* DB_DefenseActivityNode_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DB_DefenseActivityNode_reflection_ = NULL;
const ::google::protobuf::Descriptor* DB_DefenseActivity_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DB_DefenseActivity_reflection_ = NULL;
const ::google::protobuf::Descriptor* DB_DefenseHonor_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DB_DefenseHonor_reflection_ = NULL;
const ::google::protobuf::Descriptor* DB_BuffUnit_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DB_BuffUnit_reflection_ = NULL;
const ::google::protobuf::Descriptor* DB_BuffData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DB_BuffData_reflection_ = NULL;
const ::google::protobuf::Descriptor* DB_BagItemLog_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DB_BagItemLog_reflection_ = NULL;
const ::google::protobuf::Descriptor* DB_Log_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DB_Log_reflection_ = NULL;
const ::google::protobuf::Descriptor* DB_BagItem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DB_BagItem_reflection_ = NULL;
const ::google::protobuf::Descriptor* DB_Bag_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DB_Bag_reflection_ = NULL;
const ::google::protobuf::Descriptor* DB_MoonCake_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DB_MoonCake_reflection_ = NULL;
const ::google::protobuf::Descriptor* DB_HolidayDraw_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DB_HolidayDraw_reflection_ = NULL;
const ::google::protobuf::Descriptor* DB_LeaveMessage_Unit_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DB_LeaveMessage_Unit_reflection_ = NULL;
const ::google::protobuf::Descriptor* DB_LeaveMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DB_LeaveMessage_reflection_ = NULL;
const ::google::protobuf::Descriptor* DB_TXMissionData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DB_TXMissionData_reflection_ = NULL;
const ::google::protobuf::Descriptor* DB_ClientNumStat_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DB_ClientNumStat_reflection_ = NULL;
const ::google::protobuf::Descriptor* DB_PokerInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DB_PokerInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* DB_CurrPokerInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DB_CurrPokerInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* DB_PokerExchanges_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DB_PokerExchanges_reflection_ = NULL;
const ::google::protobuf::Descriptor* DB_WorldCupPredictions_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DB_WorldCupPredictions_reflection_ = NULL;
const ::google::protobuf::Descriptor* DB_WCBetInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DB_WCBetInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* DB_CardDuelInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DB_CardDuelInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* DB_MiddleYearGift_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DB_MiddleYearGift_reflection_ = NULL;
const ::google::protobuf::Descriptor* DB_OpenSNSGift_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DB_OpenSNSGift_reflection_ = NULL;
const ::google::protobuf::Descriptor* DB_CallBackFriend_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DB_CallBackFriend_reflection_ = NULL;
const ::google::protobuf::Descriptor* DB_AttackCount_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DB_AttackCount_reflection_ = NULL;
const ::google::protobuf::Descriptor* DB_Science_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DB_Science_reflection_ = NULL;
const ::google::protobuf::Descriptor* DB_Effect_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DB_Effect_reflection_ = NULL;
const ::google::protobuf::Descriptor* DB_Officer_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DB_Officer_reflection_ = NULL;
const ::google::protobuf::Descriptor* DB_WpcRank_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DB_WpcRank_reflection_ = NULL;
const ::google::protobuf::Descriptor* DB_LeagueBtl_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DB_LeagueBtl_reflection_ = NULL;
const ::google::protobuf::Descriptor* DB_HappylibAward_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DB_HappylibAward_reflection_ = NULL;
const ::google::protobuf::Descriptor* DB_HappyLib_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DB_HappyLib_reflection_ = NULL;
const ::google::protobuf::Descriptor* DB_BossBtlMsg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DB_BossBtlMsg_reflection_ = NULL;
const ::google::protobuf::Descriptor* DB_MedalHonorInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DB_MedalHonorInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* DB_MedalHonor_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DB_MedalHonor_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_dbinterface_5fsub_2eproto() {
  protobuf_AddDesc_dbinterface_5fsub_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "dbinterface_sub.proto");
  GOOGLE_CHECK(file != NULL);
  DB_UserLiteBase_descriptor_ = file->message_type(0);
  static const int DB_UserLiteBase_offsets_[15] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_UserLiteBase, userid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_UserLiteBase, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_UserLiteBase, pic_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_UserLiteBase, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_UserLiteBase, combatvalue_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_UserLiteBase, online_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_UserLiteBase, savetime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_UserLiteBase, nintegralscore_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_UserLiteBase, countryid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_UserLiteBase, lastlogontm_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_UserLiteBase, officerposition_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_UserLiteBase, arenarank_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_UserLiteBase, viplevel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_UserLiteBase, viptype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_UserLiteBase, heroarenacombat_),
  };
  DB_UserLiteBase_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DB_UserLiteBase_descriptor_,
      DB_UserLiteBase::default_instance_,
      DB_UserLiteBase_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_UserLiteBase, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_UserLiteBase, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DB_UserLiteBase));
  DB_CityUserLite_descriptor_ = file->message_type(1);
  static const int DB_CityUserLite_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_CityUserLite, morale_),
  };
  DB_CityUserLite_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DB_CityUserLite_descriptor_,
      DB_CityUserLite::default_instance_,
      DB_CityUserLite_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_CityUserLite, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_CityUserLite, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DB_CityUserLite));
  DB_RegionCityUserLite_descriptor_ = file->message_type(2);
  static const int DB_RegionCityUserLite_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_RegionCityUserLite, morale_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_RegionCityUserLite, region_),
  };
  DB_RegionCityUserLite_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DB_RegionCityUserLite_descriptor_,
      DB_RegionCityUserLite::default_instance_,
      DB_RegionCityUserLite_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_RegionCityUserLite, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_RegionCityUserLite, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DB_RegionCityUserLite));
  DB_GuildUserLite_descriptor_ = file->message_type(3);
  static const int DB_GuildUserLite_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_GuildUserLite, position_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_GuildUserLite, contribute_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_GuildUserLite, totalcontribute_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_GuildUserLite, addatkpct_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_GuildUserLite, addbloodpct_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_GuildUserLite, daycontribute_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_GuildUserLite, lastcontributetm_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_GuildUserLite, lastcontidx_),
  };
  DB_GuildUserLite_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DB_GuildUserLite_descriptor_,
      DB_GuildUserLite::default_instance_,
      DB_GuildUserLite_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_GuildUserLite, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_GuildUserLite, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DB_GuildUserLite));
  DB_StarUserLite_descriptor_ = file->message_type(4);
  static const int DB_StarUserLite_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_StarUserLite, attacktime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_StarUserLite, userstat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_StarUserLite, safetime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_StarUserLite, totalpercharge_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_StarUserLite, playeronlinetm_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_StarUserLite, playerrefreshtm_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_StarUserLite, finishcapturetm_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_StarUserLite, logoutsafetime_),
  };
  DB_StarUserLite_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DB_StarUserLite_descriptor_,
      DB_StarUserLite::default_instance_,
      DB_StarUserLite_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_StarUserLite, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_StarUserLite, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DB_StarUserLite));
  DB_UserLite_descriptor_ = file->message_type(5);
  static const int DB_UserLite_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_UserLite, userlite_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_UserLite, citylite_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_UserLite, starlite_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_UserLite, guildlite_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_UserLite, regioncitylite_),
  };
  DB_UserLite_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DB_UserLite_descriptor_,
      DB_UserLite::default_instance_,
      DB_UserLite_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_UserLite, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_UserLite, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DB_UserLite));
  DB_Star_descriptor_ = file->message_type(6);
  static const int DB_Star_offsets_[14] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_Star, userid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_Star, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_Star, profile_link_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_Star, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_Star, safetime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_Star, attacktime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_Star, online_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_Star, userstat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_Star, savetime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_Star, totalpercharge_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_Star, playeronlinetm_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_Star, playerrefreshtm_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_Star, finishcapturetm_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_Star, combatpowervalue_),
  };
  DB_Star_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DB_Star_descriptor_,
      DB_Star::default_instance_,
      DB_Star_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_Star, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_Star, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DB_Star));
  DB_BitCache_descriptor_ = file->message_type(7);
  static const int DB_BitCache_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_BitCache, bit_),
  };
  DB_BitCache_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DB_BitCache_descriptor_,
      DB_BitCache::default_instance_,
      DB_BitCache_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_BitCache, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_BitCache, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DB_BitCache));
  DB_BanLogin_descriptor_ = file->message_type(8);
  static const int DB_BanLogin_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_BanLogin, banlogin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_BanLogin, time_),
  };
  DB_BanLogin_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DB_BanLogin_descriptor_,
      DB_BanLogin::default_instance_,
      DB_BanLogin_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_BanLogin, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_BanLogin, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DB_BanLogin));
  DB_QuestRule_descriptor_ = file->message_type(9);
  static const int DB_QuestRule_offsets_[72] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_QuestRule, blvl_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_QuestRule, brlvl_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_QuestRule, b1lvl_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_QuestRule, b1count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_QuestRule, b2lvl_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_QuestRule, b2count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_QuestRule, b3lvl_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_QuestRule, b4lvl_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_QuestRule, b5lvl_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_QuestRule, b6lvl_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_QuestRule, b6count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_QuestRule, b7lvl_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_QuestRule, b8lvl_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_QuestRule, b9lvl_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_QuestRule, b10lvl_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_QuestRule, b11lvl_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_QuestRule, b12lvl_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_QuestRule, b13lvl_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_QuestRule, b14lvl_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_QuestRule, b15lvl_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_QuestRule, b16lvl_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_QuestRule, b17lvl_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_QuestRule, b18lvl_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_QuestRule, b19lvl_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_QuestRule, b20lvl_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_QuestRule, b21lvl_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_QuestRule, b22lvl_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_QuestRule, b23lvl_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_QuestRule, b24lvl_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_QuestRule, b25lvl_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_QuestRule, b26lvl_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_QuestRule, b28lvl_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_QuestRule, b29lvl_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_QuestRule, b30lvl_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_QuestRule, b31lvl_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_QuestRule, b33lvl_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_QuestRule, lootpicked_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_QuestRule, singleclickbank1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_QuestRule, singleclickbank2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_QuestRule, resourcegather1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_QuestRule, resourcegather2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_QuestRule, worder_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_QuestRule, invasion_repel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_QuestRule, friendinstalls_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_QuestRule, built_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_QuestRule, built3_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_QuestRule, built10_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_QuestRule, wallcount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_QuestRule, artifacts_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_QuestRule, doodad_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_QuestRule, bonus_bookmark_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_QuestRule, bonus_fan_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_QuestRule, bonus_invites_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_QuestRule, bonus_gifts_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_QuestRule, _kills_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_QuestRule, _killsinattack_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_QuestRule, _maxkillslrs_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_QuestRule, _maxflattenlrs_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_QuestRule, _lrs1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_QuestRule, _lrs2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_QuestRule, _lrs3_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_QuestRule, _lrs4_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_QuestRule, _lrs5_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_QuestRule, _lrs6_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_QuestRule, _lrs7_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_QuestRule, _lrs8_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_QuestRule, _lrs9_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_QuestRule, _lrs10_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_QuestRule, _resloot_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_QuestRule, _destroy_base_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_QuestRule, _attack_enemy_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_QuestRule, _qzoneactive_),
  };
  DB_QuestRule_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DB_QuestRule_descriptor_,
      DB_QuestRule::default_instance_,
      DB_QuestRule_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_QuestRule, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_QuestRule, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DB_QuestRule));
  DB_Quest_descriptor_ = file->message_type(10);
  static const int DB_Quest_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_Quest, g_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_Quest, c_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_Quest, finished_quest_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_Quest, finishquest_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_Quest, t1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_Quest, t2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_Quest, t3_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_Quest, t4_),
  };
  DB_Quest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DB_Quest_descriptor_,
      DB_Quest::default_instance_,
      DB_Quest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_Quest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_Quest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DB_Quest));
  DB_AiAttackQueuedArmyInfo_descriptor_ = file->message_type(11);
  static const int DB_AiAttackQueuedArmyInfo_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_AiAttackQueuedArmyInfo, time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_AiAttackQueuedArmyInfo, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_AiAttackQueuedArmyInfo, count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_AiAttackQueuedArmyInfo, area_),
  };
  DB_AiAttackQueuedArmyInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DB_AiAttackQueuedArmyInfo_descriptor_,
      DB_AiAttackQueuedArmyInfo::default_instance_,
      DB_AiAttackQueuedArmyInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_AiAttackQueuedArmyInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_AiAttackQueuedArmyInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DB_AiAttackQueuedArmyInfo));
  DB_AiAttackQueued_descriptor_ = file->message_type(12);
  static const int DB_AiAttackQueued_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_AiAttackQueued, attack_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_AiAttackQueued, warned_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_AiAttackQueued, startunits_),
  };
  DB_AiAttackQueued_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DB_AiAttackQueued_descriptor_,
      DB_AiAttackQueued::default_instance_,
      DB_AiAttackQueued_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_AiAttackQueued, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_AiAttackQueued, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DB_AiAttackQueued));
  DB_AiAttack_descriptor_ = file->message_type(13);
  static const int DB_AiAttack_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_AiAttack, currentid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_AiAttack, nextattack_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_AiAttack, lastattack_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_AiAttack, queued_),
  };
  DB_AiAttack_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DB_AiAttack_descriptor_,
      DB_AiAttack::default_instance_,
      DB_AiAttack_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_AiAttack, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_AiAttack, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DB_AiAttack));
  DB_Troop_descriptor_ = file->message_type(14);
  static const int DB_Troop_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_Troop, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_Troop, health_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_Troop, stance_),
  };
  DB_Troop_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DB_Troop_descriptor_,
      DB_Troop::default_instance_,
      DB_Troop_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_Troop, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_Troop, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DB_Troop));
  DB_TrapArmy_descriptor_ = file->message_type(15);
  static const int DB_TrapArmy_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_TrapArmy, armytype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_TrapArmy, armynum_),
  };
  DB_TrapArmy_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DB_TrapArmy_descriptor_,
      DB_TrapArmy::default_instance_,
      DB_TrapArmy_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_TrapArmy, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_TrapArmy, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DB_TrapArmy));
  DB_Trap_descriptor_ = file->message_type(16);
  static const int DB_Trap_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_Trap, traparmy_),
  };
  DB_Trap_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DB_Trap_descriptor_,
      DB_Trap::default_instance_,
      DB_Trap_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_Trap, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_Trap, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DB_Trap));
  DB_Loot_descriptor_ = file->message_type(17);
  static const int DB_Loot_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_Loot, x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_Loot, y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_Loot, f_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_Loot, st_),
  };
  DB_Loot_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DB_Loot_descriptor_,
      DB_Loot::default_instance_,
      DB_Loot_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_Loot, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_Loot, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DB_Loot));
  DB_LootEquip_descriptor_ = file->message_type(18);
  static const int DB_LootEquip_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_LootEquip, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_LootEquip, showtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_LootEquip, time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_LootEquip, num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_LootEquip, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_LootEquip, herograde_),
  };
  DB_LootEquip_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DB_LootEquip_descriptor_,
      DB_LootEquip::default_instance_,
      DB_LootEquip_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_LootEquip, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_LootEquip, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DB_LootEquip));
  DB_LootSuperWeapon_descriptor_ = file->message_type(19);
  static const int DB_LootSuperWeapon_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_LootSuperWeapon, usesuperweaponnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_LootSuperWeapon, usesuperweaponid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_LootSuperWeapon, usetime_),
  };
  DB_LootSuperWeapon_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DB_LootSuperWeapon_descriptor_,
      DB_LootSuperWeapon::default_instance_,
      DB_LootSuperWeapon_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_LootSuperWeapon, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_LootSuperWeapon, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DB_LootSuperWeapon));
  DB_LootReport_descriptor_ = file->message_type(20);
  static const int DB_LootReport_offsets_[28] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_LootReport, attackid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_LootReport, recoveryid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_LootReport, r1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_LootReport, r2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_LootReport, attackname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_LootReport, log_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_LootReport, attacpic_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_LootReport, attacktime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_LootReport, hasbalance_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_LootReport, damage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_LootReport, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_LootReport, defencename_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_LootReport, attacklevel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_LootReport, defencelevel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_LootReport, attackpic_square_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_LootReport, defencepic_square_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_LootReport, initdamage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_LootReport, attackequiploot_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_LootReport, defenceequiploot_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_LootReport, honor_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_LootReport, isstrike_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_LootReport, feats_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_LootReport, destroyslaveroom_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_LootReport, adimralexp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_LootReport, defadimralexp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_LootReport, warstage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_LootReport, superweapon_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_LootReport, issuperstorm_),
  };
  DB_LootReport_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DB_LootReport_descriptor_,
      DB_LootReport::default_instance_,
      DB_LootReport_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_LootReport, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_LootReport, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DB_LootReport));
  DB_Mushroom_descriptor_ = file->message_type(21);
  static const int DB_Mushroom_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_Mushroom, s_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_Mushroom, l_),
  };
  DB_Mushroom_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DB_Mushroom_descriptor_,
      DB_Mushroom::default_instance_,
      DB_Mushroom_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_Mushroom, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_Mushroom, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DB_Mushroom));
  DB_Stats_descriptor_ = file->message_type(22);
  static const int DB_Stats_offsets_[21] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_Stats, mrlsr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_Stats, mrls_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_Stats, mrlv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_Stats, mutesfx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_Stats, mutemusic_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_Stats, log_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_Stats, s_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_Stats, e_lp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_Stats, popuprate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_Stats, cm_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_Stats, tip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_Stats, updateid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_Stats, reinforcements_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_Stats, reinforcements_state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_Stats, savetime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_Stats, reinforcementstime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_Stats, settings_vo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_Stats, settings_bodies_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_Stats, settings_vehicles_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_Stats, settings_admiral_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_Stats, settings_lowfps_),
  };
  DB_Stats_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DB_Stats_descriptor_,
      DB_Stats::default_instance_,
      DB_Stats_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_Stats, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_Stats, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DB_Stats));
  DB_UpgradeArmy_descriptor_ = file->message_type(23);
  static const int DB_UpgradeArmy_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_UpgradeArmy, armytype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_UpgradeArmy, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_UpgradeArmy, finishtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_UpgradeArmy, extrabldtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_UpgradeArmy, extrauptime_),
  };
  DB_UpgradeArmy_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DB_UpgradeArmy_descriptor_,
      DB_UpgradeArmy::default_instance_,
      DB_UpgradeArmy_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_UpgradeArmy, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_UpgradeArmy, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DB_UpgradeArmy));
  DB_UnlockArmy_descriptor_ = file->message_type(24);
  static const int DB_UnlockArmy_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_UnlockArmy, armytype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_UnlockArmy, level_),
  };
  DB_UnlockArmy_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DB_UnlockArmy_descriptor_,
      DB_UnlockArmy::default_instance_,
      DB_UnlockArmy_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_UnlockArmy, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_UnlockArmy, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DB_UnlockArmy));
  DB_Academy_descriptor_ = file->message_type(25);
  static const int DB_Academy_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_Academy, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_Academy, l_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_Academy, t_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_Academy, savetime_),
  };
  DB_Academy_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DB_Academy_descriptor_,
      DB_Academy::default_instance_,
      DB_Academy_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_Academy, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_Academy, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DB_Academy));
  DB_Monsterbaiter_descriptor_ = file->message_type(26);
  static const int DB_Monsterbaiter_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_Monsterbaiter, queue_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_Monsterbaiter, musk_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_Monsterbaiter, angle_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_Monsterbaiter, starttime_),
  };
  DB_Monsterbaiter_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DB_Monsterbaiter_descriptor_,
      DB_Monsterbaiter::default_instance_,
      DB_Monsterbaiter_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_Monsterbaiter, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_Monsterbaiter, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DB_Monsterbaiter));
  DB_Locker_descriptor_ = file->message_type(27);
  static const int DB_Locker_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_Locker, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_Locker, t_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_Locker, s_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_Locker, e_),
  };
  DB_Locker_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DB_Locker_descriptor_,
      DB_Locker::default_instance_,
      DB_Locker_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_Locker, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_Locker, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DB_Locker));
  DB_Army_descriptor_ = file->message_type(28);
  static const int DB_Army_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_Army, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_Army, x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_Army, y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_Army, angle_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_Army, health_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_Army, stance_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_Army, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_Army, delstate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_Army, campstate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_Army, grade_),
  };
  DB_Army_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DB_Army_descriptor_,
      DB_Army::default_instance_,
      DB_Army_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_Army, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_Army, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DB_Army));
  DB_Book_descriptor_ = file->message_type(29);
  static const int DB_Book_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_Book, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_Book, bookid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_Book, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_Book, lock_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_Book, exp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_Book, bagtype_),
  };
  DB_Book_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DB_Book_descriptor_,
      DB_Book::default_instance_,
      DB_Book_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_Book, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_Book, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DB_Book));
  DB_Emblem_descriptor_ = file->message_type(30);
  static const int DB_Emblem_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_Emblem, emblemid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_Emblem, count_),
  };
  DB_Emblem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DB_Emblem_descriptor_,
      DB_Emblem::default_instance_,
      DB_Emblem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_Emblem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_Emblem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DB_Emblem));
  DB_EmblemNew_descriptor_ = file->message_type(31);
  static const int DB_EmblemNew_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_EmblemNew, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_EmblemNew, emblemid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_EmblemNew, lock_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_EmblemNew, exp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_EmblemNew, bagtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_EmblemNew, useflag_),
  };
  DB_EmblemNew_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DB_EmblemNew_descriptor_,
      DB_EmblemNew::default_instance_,
      DB_EmblemNew_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_EmblemNew, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_EmblemNew, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DB_EmblemNew));
  DB_WeaponCom_descriptor_ = file->message_type(32);
  static const int DB_WeaponCom_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_WeaponCom, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_WeaponCom, comid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_WeaponCom, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_WeaponCom, lock_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_WeaponCom, exp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_WeaponCom, bagtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_WeaponCom, grade_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_WeaponCom, extratype_),
  };
  DB_WeaponCom_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DB_WeaponCom_descriptor_,
      DB_WeaponCom::default_instance_,
      DB_WeaponCom_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_WeaponCom, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_WeaponCom, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DB_WeaponCom));
  DB_WeaponCenter_descriptor_ = file->message_type(33);
  static const int DB_WeaponCenter_offsets_[27] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_WeaponCenter, sceneid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_WeaponCenter, freeexplorecnt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_WeaponCenter, finishexptime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_WeaponCenter, basecom_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_WeaponCenter, armycom_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_WeaponCenter, tankcom_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_WeaponCenter, planecom_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_WeaponCenter, wpccom_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_WeaponCenter, wpcemblem_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_WeaponCenter, earthtoweremblem_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_WeaponCenter, airtoweremblem_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_WeaponCenter, otheremblem_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_WeaponCenter, wpcemblemnew_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_WeaponCenter, gunturretemblem_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_WeaponCenter, mortartoweremblem_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_WeaponCenter, otherbldemblem_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_WeaponCenter, wpcbook_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_WeaponCenter, admiralbook_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_WeaponCenter, lasertoweremblem_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_WeaponCenter, herocom_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_WeaponCenter, unlockextranum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_WeaponCenter, turnonnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_WeaponCenter, unlockemblemnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_WeaponCenter, giantcanonemblem_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_WeaponCenter, wpcjammer_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_WeaponCenter, basejammer_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_WeaponCenter, armyjammer_),
  };
  DB_WeaponCenter_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DB_WeaponCenter_descriptor_,
      DB_WeaponCenter::default_instance_,
      DB_WeaponCenter_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_WeaponCenter, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_WeaponCenter, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DB_WeaponCenter));
  DB_Jammer_descriptor_ = file->message_type(34);
  static const int DB_Jammer_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_Jammer, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_Jammer, jammerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_Jammer, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_Jammer, block_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_Jammer, exp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_Jammer, bagtype_),
  };
  DB_Jammer_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DB_Jammer_descriptor_,
      DB_Jammer::default_instance_,
      DB_Jammer_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_Jammer, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_Jammer, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DB_Jammer));
  DB_WeaponExtraWpcInfo_descriptor_ = file->message_type(35);
  static const int DB_WeaponExtraWpcInfo_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_WeaponExtraWpcInfo, extrabasecomnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_WeaponExtraWpcInfo, extraarmycomnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_WeaponExtraWpcInfo, extratankcomnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_WeaponExtraWpcInfo, extraplanecomnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_WeaponExtraWpcInfo, extraherocomnum_),
  };
  DB_WeaponExtraWpcInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DB_WeaponExtraWpcInfo_descriptor_,
      DB_WeaponExtraWpcInfo::default_instance_,
      DB_WeaponExtraWpcInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_WeaponExtraWpcInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_WeaponExtraWpcInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DB_WeaponExtraWpcInfo));
  DB_WeaponExtraEmblemInfo_descriptor_ = file->message_type(36);
  static const int DB_WeaponExtraEmblemInfo_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_WeaponExtraEmblemInfo, earthemblemcnt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_WeaponExtraEmblemInfo, airemblemcnt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_WeaponExtraEmblemInfo, baseemblemcnt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_WeaponExtraEmblemInfo, lasertoweremblemcnt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_WeaponExtraEmblemInfo, giantcanonemblemcnt_),
  };
  DB_WeaponExtraEmblemInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DB_WeaponExtraEmblemInfo_descriptor_,
      DB_WeaponExtraEmblemInfo::default_instance_,
      DB_WeaponExtraEmblemInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_WeaponExtraEmblemInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_WeaponExtraEmblemInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DB_WeaponExtraEmblemInfo));
  DB_CaptureBase_descriptor_ = file->message_type(37);
  static const int DB_CaptureBase_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_CaptureBase, baseid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_CaptureBase, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_CaptureBase, pic_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_CaptureBase, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_CaptureBase, finishcapturetm_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_CaptureBase, srctype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_CaptureBase, pickrestime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_CaptureBase, lossuser_),
  };
  DB_CaptureBase_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DB_CaptureBase_descriptor_,
      DB_CaptureBase::default_instance_,
      DB_CaptureBase_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_CaptureBase, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_CaptureBase, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DB_CaptureBase));
  DB_SlaveRoom_descriptor_ = file->message_type(38);
  static const int DB_SlaveRoom_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_SlaveRoom, dayrescuecnt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_SlaveRoom, daycapturedcnt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_SlaveRoom, capturedinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_SlaveRoom, capturebase_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_SlaveRoom, prcmedal_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_SlaveRoom, prcoil_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_SlaveRoom, prchonor_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_SlaveRoom, prcfeats_),
  };
  DB_SlaveRoom_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DB_SlaveRoom_descriptor_,
      DB_SlaveRoom::default_instance_,
      DB_SlaveRoom_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_SlaveRoom, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_SlaveRoom, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DB_SlaveRoom));
  DB_NPCActive_descriptor_ = file->message_type(39);
  static const int DB_NPCActive_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_NPCActive, daywinnpcid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_NPCActive, daylostnpcid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_NPCActive, daygetitemid_),
  };
  DB_NPCActive_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DB_NPCActive_descriptor_,
      DB_NPCActive::default_instance_,
      DB_NPCActive_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_NPCActive, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_NPCActive, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DB_NPCActive));
  DB_BaseDefNPC_descriptor_ = file->message_type(40);
  static const int DB_BaseDefNPC_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_BaseDefNPC, bestscore_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_BaseDefNPC, daydefcnt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_BaseDefNPC, leftstakecnt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_BaseDefNPC, showitemlst_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_BaseDefNPC, showitemcnt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_BaseDefNPC, stakeitemlst_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_BaseDefNPC, stakeitemcnt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_BaseDefNPC, lastnpcid_),
  };
  DB_BaseDefNPC_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DB_BaseDefNPC_descriptor_,
      DB_BaseDefNPC::default_instance_,
      DB_BaseDefNPC_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_BaseDefNPC, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_BaseDefNPC, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DB_BaseDefNPC));
  DB_AdmiralSkill_descriptor_ = file->message_type(41);
  static const int DB_AdmiralSkill_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_AdmiralSkill, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_AdmiralSkill, skillid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_AdmiralSkill, initskill_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_AdmiralSkill, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_AdmiralSkill, exp_),
  };
  DB_AdmiralSkill_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DB_AdmiralSkill_descriptor_,
      DB_AdmiralSkill::default_instance_,
      DB_AdmiralSkill_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_AdmiralSkill, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_AdmiralSkill, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DB_AdmiralSkill));
  DB_AdmiralSkillData_descriptor_ = file->message_type(42);
  static const int DB_AdmiralSkillData_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_AdmiralSkillData, skillid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_AdmiralSkillData, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_AdmiralSkillData, exp_),
  };
  DB_AdmiralSkillData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DB_AdmiralSkillData_descriptor_,
      DB_AdmiralSkillData::default_instance_,
      DB_AdmiralSkillData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_AdmiralSkillData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_AdmiralSkillData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DB_AdmiralSkillData));
  DB_AdmiralTrainLV_descriptor_ = file->message_type(43);
  static const int DB_AdmiralTrainLV_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_AdmiralTrainLV, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_AdmiralTrainLV, cnt_),
  };
  DB_AdmiralTrainLV_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DB_AdmiralTrainLV_descriptor_,
      DB_AdmiralTrainLV::default_instance_,
      DB_AdmiralTrainLV_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_AdmiralTrainLV, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_AdmiralTrainLV, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DB_AdmiralTrainLV));
  DB_AdmiralLetter_descriptor_ = file->message_type(44);
  static const int DB_AdmiralLetter_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_AdmiralLetter, letterid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_AdmiralLetter, count_),
  };
  DB_AdmiralLetter_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DB_AdmiralLetter_descriptor_,
      DB_AdmiralLetter::default_instance_,
      DB_AdmiralLetter_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_AdmiralLetter, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_AdmiralLetter, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DB_AdmiralLetter));
  DB_AdmiralEquip_descriptor_ = file->message_type(45);
  static const int DB_AdmiralEquip_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_AdmiralEquip, equipid_),
  };
  DB_AdmiralEquip_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DB_AdmiralEquip_descriptor_,
      DB_AdmiralEquip::default_instance_,
      DB_AdmiralEquip_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_AdmiralEquip, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_AdmiralEquip, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DB_AdmiralEquip));
  DB_Admiral_descriptor_ = file->message_type(46);
  static const int DB_Admiral_offsets_[20] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_Admiral, admiralid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_Admiral, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_Admiral, exp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_Admiral, usetype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_Admiral, addatk_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_Admiral, addhp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_Admiral, adddef_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_Admiral, addcrt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_Admiral, finalatk_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_Admiral, finalhp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_Admiral, finaldef_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_Admiral, finalcrt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_Admiral, skillid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_Admiral, trainlv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_Admiral, usesoulcnt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_Admiral, score_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_Admiral, initskill_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_Admiral, equip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_Admiral, bufftime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_Admiral, medalhonorlist_),
  };
  DB_Admiral_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DB_Admiral_descriptor_,
      DB_Admiral::default_instance_,
      DB_Admiral_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_Admiral, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_Admiral, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DB_Admiral));
  DB_AdmiralInfo_descriptor_ = file->message_type(47);
  static const int DB_AdmiralInfo_offsets_[11] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_AdmiralInfo, admiral_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_AdmiralInfo, soul_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_AdmiralInfo, hassendadmiral_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_AdmiralInfo, sendid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_AdmiralInfo, hascreditvisit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_AdmiralInfo, freevisitcnt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_AdmiralInfo, finishvisittime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_AdmiralInfo, skill_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_AdmiralInfo, collectlst_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_AdmiralInfo, shenjiangexchangecnt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_AdmiralInfo, admiralletter_),
  };
  DB_AdmiralInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DB_AdmiralInfo_descriptor_,
      DB_AdmiralInfo::default_instance_,
      DB_AdmiralInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_AdmiralInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_AdmiralInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DB_AdmiralInfo));
  DB_HeroLetter_descriptor_ = file->message_type(48);
  static const int DB_HeroLetter_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_HeroLetter, letterid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_HeroLetter, count_),
  };
  DB_HeroLetter_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DB_HeroLetter_descriptor_,
      DB_HeroLetter::default_instance_,
      DB_HeroLetter_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_HeroLetter, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_HeroLetter, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DB_HeroLetter));
  DB_HeroSkillData_descriptor_ = file->message_type(49);
  static const int DB_HeroSkillData_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_HeroSkillData, skillid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_HeroSkillData, level_),
  };
  DB_HeroSkillData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DB_HeroSkillData_descriptor_,
      DB_HeroSkillData::default_instance_,
      DB_HeroSkillData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_HeroSkillData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_HeroSkillData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DB_HeroSkillData));
  DB_HeroAtkData_descriptor_ = file->message_type(50);
  static const int DB_HeroAtkData_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_HeroAtkData, x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_HeroAtkData, y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_HeroAtkData, angle_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_HeroAtkData, health_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_HeroAtkData, stance_),
  };
  DB_HeroAtkData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DB_HeroAtkData_descriptor_,
      DB_HeroAtkData::default_instance_,
      DB_HeroAtkData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_HeroAtkData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_HeroAtkData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DB_HeroAtkData));
  DB_Hero_descriptor_ = file->message_type(51);
  static const int DB_Hero_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_Hero, heroid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_Hero, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_Hero, grade_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_Hero, levelexp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_Hero, gradeexp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_Hero, initskill_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_Hero, atkdata_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_Hero, recoverhptm_),
  };
  DB_Hero_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DB_Hero_descriptor_,
      DB_Hero::default_instance_,
      DB_Hero_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_Hero, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_Hero, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DB_Hero));
  DB_UpgradeHero_descriptor_ = file->message_type(52);
  static const int DB_UpgradeHero_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_UpgradeHero, herotype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_UpgradeHero, finishtime_),
  };
  DB_UpgradeHero_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DB_UpgradeHero_descriptor_,
      DB_UpgradeHero::default_instance_,
      DB_UpgradeHero_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_UpgradeHero, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_UpgradeHero, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DB_UpgradeHero));
  DB_HeroInfo_descriptor_ = file->message_type(53);
  static const int DB_HeroInfo_offsets_[16] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_HeroInfo, hero_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_HeroInfo, heroletter_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_HeroInfo, freevisitcnt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_HeroInfo, finishvisittime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_HeroInfo, collectlst_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_HeroInfo, hassendhero_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_HeroInfo, sendid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_HeroInfo, hascreditvisit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_HeroInfo, heroupgrade_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_HeroInfo, heroatklst_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_HeroInfo, herodeflst_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_HeroInfo, heroautolst_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_HeroInfo, heroarenalst_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_HeroInfo, natkpartnernum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_HeroInfo, ndefpartnernum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_HeroInfo, nautopartnernum_),
  };
  DB_HeroInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DB_HeroInfo_descriptor_,
      DB_HeroInfo::default_instance_,
      DB_HeroInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_HeroInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_HeroInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DB_HeroInfo));
  DB_Flag_descriptor_ = file->message_type(54);
  static const int DB_Flag_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_Flag, music_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_Flag, effect_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_Flag, quality_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_Flag, alliancewelcome_),
  };
  DB_Flag_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DB_Flag_descriptor_,
      DB_Flag::default_instance_,
      DB_Flag_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_Flag, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_Flag, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DB_Flag));
  DB_Storedata_descriptor_ = file->message_type(55);
  static const int DB_Storedata_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_Storedata, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_Storedata, q_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_Storedata, s_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_Storedata, e_),
  };
  DB_Storedata_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DB_Storedata_descriptor_,
      DB_Storedata::default_instance_,
      DB_Storedata_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_Storedata, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_Storedata, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DB_Storedata));
  DB_EnemyStar_descriptor_ = file->message_type(56);
  static const int DB_EnemyStar_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_EnemyStar, enemyid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_EnemyStar, attactcnt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_EnemyStar, recoverycnt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_EnemyStar, attacktime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_EnemyStar, countdown_),
  };
  DB_EnemyStar_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DB_EnemyStar_descriptor_,
      DB_EnemyStar::default_instance_,
      DB_EnemyStar_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_EnemyStar, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_EnemyStar, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DB_EnemyStar));
  DB_GiftFrdInfo_descriptor_ = file->message_type(57);
  static const int DB_GiftFrdInfo_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_GiftFrdInfo, friendid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_GiftFrdInfo, frdopenid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_GiftFrdInfo, messageid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_GiftFrdInfo, giftid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_GiftFrdInfo, gettime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_GiftFrdInfo, gifttype_),
  };
  DB_GiftFrdInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DB_GiftFrdInfo_descriptor_,
      DB_GiftFrdInfo::default_instance_,
      DB_GiftFrdInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_GiftFrdInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_GiftFrdInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DB_GiftFrdInfo));
  DB_NewComerGiftList_descriptor_ = file->message_type(58);
  static const int DB_NewComerGiftList_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_NewComerGiftList, newcomergiftid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_NewComerGiftList, newcomergiftgain_),
  };
  DB_NewComerGiftList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DB_NewComerGiftList_descriptor_,
      DB_NewComerGiftList::default_instance_,
      DB_NewComerGiftList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_NewComerGiftList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_NewComerGiftList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DB_NewComerGiftList));
  DB_GiftInfo_descriptor_ = file->message_type(59);
  static const int DB_GiftInfo_offsets_[12] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_GiftInfo, daysendfrdidlst_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_GiftInfo, dayaskfrdidlst_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_GiftInfo, daygetgift2bagcnt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_GiftInfo, dayaskgift2bagcnt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_GiftInfo, daygetgiftcnt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_GiftInfo, dayresendgiftcnt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_GiftInfo, getgiftinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_GiftInfo, finishgiftinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_GiftInfo, msgidx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_GiftInfo, lastlogintime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_GiftInfo, daysendgiftcnt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_GiftInfo, newcomergiftlist_),
  };
  DB_GiftInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DB_GiftInfo_descriptor_,
      DB_GiftInfo::default_instance_,
      DB_GiftInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_GiftInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_GiftInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DB_GiftInfo));
  DB_DayAtkUser_descriptor_ = file->message_type(60);
  static const int DB_DayAtkUser_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_DayAtkUser, dayatkuserid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_DayAtkUser, dayatkusercnt_),
  };
  DB_DayAtkUser_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DB_DayAtkUser_descriptor_,
      DB_DayAtkUser::default_instance_,
      DB_DayAtkUser_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_DayAtkUser, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_DayAtkUser, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DB_DayAtkUser));
  DB_UserStar_descriptor_ = file->message_type(61);
  static const int DB_UserStar_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_UserStar, enemyid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_UserStar, attactcnt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_UserStar, recoverycnt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_UserStar, enemylist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_UserStar, dayatkinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_UserStar, daydestroyslaveroomcnt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_UserStar, dayatkcount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_UserStar, daydefcount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_UserStar, sprweaponhurtednum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_UserStar, sprweaponhurtedtime_),
  };
  DB_UserStar_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DB_UserStar_descriptor_,
      DB_UserStar::default_instance_,
      DB_UserStar_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_UserStar, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_UserStar, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DB_UserStar));
  DB_DefenseActivityNode_descriptor_ = file->message_type(62);
  static const int DB_DefenseActivityNode_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_DefenseActivityNode, activityid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_DefenseActivityNode, activitycut_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_DefenseActivityNode, awardlist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_DefenseActivityNode, lstcustomtime_),
  };
  DB_DefenseActivityNode_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DB_DefenseActivityNode_descriptor_,
      DB_DefenseActivityNode::default_instance_,
      DB_DefenseActivityNode_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_DefenseActivityNode, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_DefenseActivityNode, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DB_DefenseActivityNode));
  DB_DefenseActivity_descriptor_ = file->message_type(63);
  static const int DB_DefenseActivity_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_DefenseActivity, activities_),
  };
  DB_DefenseActivity_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DB_DefenseActivity_descriptor_,
      DB_DefenseActivity::default_instance_,
      DB_DefenseActivity_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_DefenseActivity, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_DefenseActivity, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DB_DefenseActivity));
  DB_DefenseHonor_descriptor_ = file->message_type(64);
  static const int DB_DefenseHonor_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_DefenseHonor, lastdefencehonorid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_DefenseHonor, gaindefencehornorcnt_),
  };
  DB_DefenseHonor_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DB_DefenseHonor_descriptor_,
      DB_DefenseHonor::default_instance_,
      DB_DefenseHonor_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_DefenseHonor, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_DefenseHonor, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DB_DefenseHonor));
  DB_BuffUnit_descriptor_ = file->message_type(65);
  static const int DB_BuffUnit_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_BuffUnit, bufftype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_BuffUnit, buffendtime_),
  };
  DB_BuffUnit_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DB_BuffUnit_descriptor_,
      DB_BuffUnit::default_instance_,
      DB_BuffUnit_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_BuffUnit, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_BuffUnit, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DB_BuffUnit));
  DB_BuffData_descriptor_ = file->message_type(66);
  static const int DB_BuffData_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_BuffData, bufflist_),
  };
  DB_BuffData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DB_BuffData_descriptor_,
      DB_BuffData::default_instance_,
      DB_BuffData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_BuffData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_BuffData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DB_BuffData));
  DB_BagItemLog_descriptor_ = file->message_type(67);
  static const int DB_BagItemLog_offsets_[32] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_BagItemLog, logtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_BagItemLog, itemid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_BagItemLog, count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_BagItemLog, date_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_BagItemLog, medal_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_BagItemLog, oil_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_BagItemLog, credit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_BagItemLog, honor_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_BagItemLog, itemtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_BagItemLog, itemcnt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_BagItemLog, armytype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_BagItemLog, armycnt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_BagItemLog, weaponid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_BagItemLog, emblemid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_BagItemLog, weaponcnt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_BagItemLog, emblemcnt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_BagItemLog, admiralid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_BagItemLog, admiralcnt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_BagItemLog, feats_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_BagItemLog, thew_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_BagItemLog, morale_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_BagItemLog, zhangong_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_BagItemLog, equipid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_BagItemLog, equipcnt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_BagItemLog, gscore_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_BagItemLog, admiralsoul_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_BagItemLog, cntrscore_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_BagItemLog, admiralletterid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_BagItemLog, admirallettercnt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_BagItemLog, heroletterid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_BagItemLog, herolettercnt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_BagItemLog, nmilitarysoul_),
  };
  DB_BagItemLog_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DB_BagItemLog_descriptor_,
      DB_BagItemLog::default_instance_,
      DB_BagItemLog_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_BagItemLog, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_BagItemLog, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DB_BagItemLog));
  DB_Log_descriptor_ = file->message_type(68);
  static const int DB_Log_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_Log, itemlog_),
  };
  DB_Log_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DB_Log_descriptor_,
      DB_Log::default_instance_,
      DB_Log_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_Log, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_Log, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DB_Log));
  DB_BagItem_descriptor_ = file->message_type(69);
  static const int DB_BagItem_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_BagItem, itemid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_BagItem, count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_BagItem, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_BagItem, gettime_),
  };
  DB_BagItem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DB_BagItem_descriptor_,
      DB_BagItem::default_instance_,
      DB_BagItem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_BagItem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_BagItem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DB_BagItem));
  DB_Bag_descriptor_ = file->message_type(70);
  static const int DB_Bag_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_Bag, bagitem_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_Bag, lastopentime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_Bag, baglv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_Bag, bagusecnt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_Bag, tmpbagitem_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_Bag, virtualbagitem_),
  };
  DB_Bag_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DB_Bag_descriptor_,
      DB_Bag::default_instance_,
      DB_Bag_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_Bag, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_Bag, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DB_Bag));
  DB_MoonCake_descriptor_ = file->message_type(71);
  static const int DB_MoonCake_offsets_[15] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_MoonCake, mooncakecnt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_MoonCake, goldlevel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_MoonCake, silverlevel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_MoonCake, frdid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_MoonCake, visitfrdcnt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_MoonCake, dayaccsuccnt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_MoonCake, getaccrewardcnt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_MoonCake, lastlogintime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_MoonCake, accsucmooncakecnt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_MoonCake, maxsucmooncakecnt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_MoonCake, activeflag_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_MoonCake, daygetflag1cnt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_MoonCake, accgetflag1cnt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_MoonCake, accgetflag2cnt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_MoonCake, daygetflag2cnt_),
  };
  DB_MoonCake_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DB_MoonCake_descriptor_,
      DB_MoonCake::default_instance_,
      DB_MoonCake_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_MoonCake, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_MoonCake, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DB_MoonCake));
  DB_HolidayDraw_descriptor_ = file->message_type(72);
  static const int DB_HolidayDraw_offsets_[16] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_HolidayDraw, activeflag_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_HolidayDraw, goldlevel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_HolidayDraw, silverlevel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_HolidayDraw, frdid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_HolidayDraw, visitfrdcnt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_HolidayDraw, dayaccsuccnt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_HolidayDraw, getaccrewardcnt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_HolidayDraw, daygetflag1cnt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_HolidayDraw, accgetflag1cnt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_HolidayDraw, accgetflag2cnt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_HolidayDraw, daygetflag2cnt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_HolidayDraw, lastgettime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_HolidayDraw, dayfreecnt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_HolidayDraw, daycostcredittime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_HolidayDraw, hasgetrank_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_HolidayDraw, dayagaincnt_),
  };
  DB_HolidayDraw_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DB_HolidayDraw_descriptor_,
      DB_HolidayDraw::default_instance_,
      DB_HolidayDraw_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_HolidayDraw, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_HolidayDraw, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DB_HolidayDraw));
  DB_LeaveMessage_Unit_descriptor_ = file->message_type(73);
  static const int DB_LeaveMessage_Unit_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_LeaveMessage_Unit, ntype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_LeaveMessage_Unit, nid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_LeaveMessage_Unit, strmsg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_LeaveMessage_Unit, msgtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_LeaveMessage_Unit, strname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_LeaveMessage_Unit, struid_),
  };
  DB_LeaveMessage_Unit_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DB_LeaveMessage_Unit_descriptor_,
      DB_LeaveMessage_Unit::default_instance_,
      DB_LeaveMessage_Unit_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_LeaveMessage_Unit, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_LeaveMessage_Unit, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DB_LeaveMessage_Unit));
  DB_LeaveMessage_descriptor_ = file->message_type(74);
  static const int DB_LeaveMessage_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_LeaveMessage, ntimes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_LeaveMessage, viewtargetuin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_LeaveMessage, bisnew_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_LeaveMessage, leavemessagearr_),
  };
  DB_LeaveMessage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DB_LeaveMessage_descriptor_,
      DB_LeaveMessage::default_instance_,
      DB_LeaveMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_LeaveMessage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_LeaveMessage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DB_LeaveMessage));
  DB_TXMissionData_descriptor_ = file->message_type(75);
  static const int DB_TXMissionData_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_TXMissionData, missionid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_TXMissionData, missionstate_),
  };
  DB_TXMissionData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DB_TXMissionData_descriptor_,
      DB_TXMissionData::default_instance_,
      DB_TXMissionData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_TXMissionData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_TXMissionData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DB_TXMissionData));
  DB_ClientNumStat_descriptor_ = file->message_type(76);
  static const int DB_ClientNumStat_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_ClientNumStat, daystattype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_ClientNumStat, daystatnum_),
  };
  DB_ClientNumStat_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DB_ClientNumStat_descriptor_,
      DB_ClientNumStat::default_instance_,
      DB_ClientNumStat_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_ClientNumStat, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_ClientNumStat, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DB_ClientNumStat));
  DB_PokerInfo_descriptor_ = file->message_type(77);
  static const int DB_PokerInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_PokerInfo, pokerno_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_PokerInfo, pokercolour_),
  };
  DB_PokerInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DB_PokerInfo_descriptor_,
      DB_PokerInfo::default_instance_,
      DB_PokerInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_PokerInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_PokerInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DB_PokerInfo));
  DB_CurrPokerInfo_descriptor_ = file->message_type(78);
  static const int DB_CurrPokerInfo_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_CurrPokerInfo, userpokers_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_CurrPokerInfo, npcpokers_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_CurrPokerInfo, usertype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_CurrPokerInfo, npctype_),
  };
  DB_CurrPokerInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DB_CurrPokerInfo_descriptor_,
      DB_CurrPokerInfo::default_instance_,
      DB_CurrPokerInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_CurrPokerInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_CurrPokerInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DB_CurrPokerInfo));
  DB_PokerExchanges_descriptor_ = file->message_type(79);
  static const int DB_PokerExchanges_offsets_[12] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_PokerExchanges, gift0_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_PokerExchanges, gift1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_PokerExchanges, gift2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_PokerExchanges, gift3_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_PokerExchanges, gift4_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_PokerExchanges, isgetraritygift_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_PokerExchanges, giftnum0_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_PokerExchanges, giftnum1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_PokerExchanges, giftnum2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_PokerExchanges, giftnum3_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_PokerExchanges, giftnum4_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_PokerExchanges, refreshexccnt_),
  };
  DB_PokerExchanges_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DB_PokerExchanges_descriptor_,
      DB_PokerExchanges::default_instance_,
      DB_PokerExchanges_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_PokerExchanges, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_PokerExchanges, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DB_PokerExchanges));
  DB_WorldCupPredictions_descriptor_ = file->message_type(80);
  static const int DB_WorldCupPredictions_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_WorldCupPredictions, isbet_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_WorldCupPredictions, betinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_WorldCupPredictions, nreward_),
  };
  DB_WorldCupPredictions_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DB_WorldCupPredictions_descriptor_,
      DB_WorldCupPredictions::default_instance_,
      DB_WorldCupPredictions_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_WorldCupPredictions, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_WorldCupPredictions, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DB_WorldCupPredictions));
  DB_WCBetInfo_descriptor_ = file->message_type(81);
  static const int DB_WCBetInfo_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_WCBetInfo, ntype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_WCBetInfo, njettonnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_WCBetInfo, nodds_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_WCBetInfo, teamid_),
  };
  DB_WCBetInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DB_WCBetInfo_descriptor_,
      DB_WCBetInfo::default_instance_,
      DB_WCBetInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_WCBetInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_WCBetInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DB_WCBetInfo));
  DB_CardDuelInfo_descriptor_ = file->message_type(82);
  static const int DB_CardDuelInfo_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_CardDuelInfo, mycardtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_CardDuelInfo, oppid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_CardDuelInfo, bnpc_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_CardDuelInfo, winnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_CardDuelInfo, bmatch_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_CardDuelInfo, addupcredit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_CardDuelInfo, maxwinnum_),
  };
  DB_CardDuelInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DB_CardDuelInfo_descriptor_,
      DB_CardDuelInfo::default_instance_,
      DB_CardDuelInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_CardDuelInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_CardDuelInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DB_CardDuelInfo));
  DB_MiddleYearGift_descriptor_ = file->message_type(83);
  static const int DB_MiddleYearGift_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_MiddleYearGift, firstgift_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_MiddleYearGift, secdgift_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_MiddleYearGift, ntotalcredit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_MiddleYearGift, nflag_),
  };
  DB_MiddleYearGift_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DB_MiddleYearGift_descriptor_,
      DB_MiddleYearGift::default_instance_,
      DB_MiddleYearGift_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_MiddleYearGift, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_MiddleYearGift, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DB_MiddleYearGift));
  DB_OpenSNSGift_descriptor_ = file->message_type(84);
  static const int DB_OpenSNSGift_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_OpenSNSGift, ntype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_OpenSNSGift, nflag_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_OpenSNSGift, ntime_),
  };
  DB_OpenSNSGift_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DB_OpenSNSGift_descriptor_,
      DB_OpenSNSGift::default_instance_,
      DB_OpenSNSGift_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_OpenSNSGift, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_OpenSNSGift, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DB_OpenSNSGift));
  DB_CallBackFriend_descriptor_ = file->message_type(85);
  static const int DB_CallBackFriend_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_CallBackFriend, frdplatids_),
  };
  DB_CallBackFriend_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DB_CallBackFriend_descriptor_,
      DB_CallBackFriend::default_instance_,
      DB_CallBackFriend_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_CallBackFriend, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_CallBackFriend, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DB_CallBackFriend));
  DB_AttackCount_descriptor_ = file->message_type(86);
  static const int DB_AttackCount_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_AttackCount, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_AttackCount, count_),
  };
  DB_AttackCount_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DB_AttackCount_descriptor_,
      DB_AttackCount::default_instance_,
      DB_AttackCount_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_AttackCount, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_AttackCount, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DB_AttackCount));
  DB_Science_descriptor_ = file->message_type(87);
  static const int DB_Science_offsets_[12] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_Science, recruitlandlevel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_Science, recruitairlevel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_Science, attacklandlevel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_Science, extrahonorlevel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_Science, exttimelevel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_Science, redtimelevel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_Science, extres_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_Science, redres_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_Science, addbuildhp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_Science, addgunattack_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_Science, addmissileatk_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_Science, minewarfare_),
  };
  DB_Science_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DB_Science_descriptor_,
      DB_Science::default_instance_,
      DB_Science_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_Science, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_Science, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DB_Science));
  DB_Effect_descriptor_ = file->message_type(88);
  static const int DB_Effect_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_Effect, effects_),
  };
  DB_Effect_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DB_Effect_descriptor_,
      DB_Effect::default_instance_,
      DB_Effect_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_Effect, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_Effect, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DB_Effect));
  DB_Officer_descriptor_ = file->message_type(89);
  static const int DB_Officer_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_Officer, officerposition_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_Officer, officerrightuseflag_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_Officer, officerrighteffectflag_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_Officer, updatetime_),
  };
  DB_Officer_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DB_Officer_descriptor_,
      DB_Officer::default_instance_,
      DB_Officer_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_Officer, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_Officer, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DB_Officer));
  DB_WpcRank_descriptor_ = file->message_type(90);
  static const int DB_WpcRank_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_WpcRank, rightid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_WpcRank, updatetime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_WpcRank, searchtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_WpcRank, activeid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_WpcRank, overtimesearchtime_),
  };
  DB_WpcRank_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DB_WpcRank_descriptor_,
      DB_WpcRank::default_instance_,
      DB_WpcRank_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_WpcRank, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_WpcRank, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DB_WpcRank));
  DB_LeagueBtl_descriptor_ = file->message_type(91);
  static const int DB_LeagueBtl_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_LeagueBtl, activeid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_LeagueBtl, leaguepoint_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_LeagueBtl, rewardget_),
  };
  DB_LeagueBtl_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DB_LeagueBtl_descriptor_,
      DB_LeagueBtl::default_instance_,
      DB_LeagueBtl_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_LeagueBtl, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_LeagueBtl, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DB_LeagueBtl));
  DB_HappylibAward_descriptor_ = file->message_type(92);
  static const int DB_HappylibAward_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_HappylibAward, times_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_HappylibAward, awardid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_HappylibAward, awardnum_),
  };
  DB_HappylibAward_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DB_HappylibAward_descriptor_,
      DB_HappylibAward::default_instance_,
      DB_HappylibAward_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_HappylibAward, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_HappylibAward, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DB_HappylibAward));
  DB_HappyLib_descriptor_ = file->message_type(93);
  static const int DB_HappyLib_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_HappyLib, activeend_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_HappyLib, times_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_HappyLib, getaward_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_HappyLib, award_),
  };
  DB_HappyLib_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DB_HappyLib_descriptor_,
      DB_HappyLib::default_instance_,
      DB_HappyLib_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_HappyLib, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_HappyLib, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DB_HappyLib));
  DB_BossBtlMsg_descriptor_ = file->message_type(94);
  static const int DB_BossBtlMsg_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_BossBtlMsg, nbossbtlflag_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_BossBtlMsg, totaldmg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_BossBtlMsg, honorembravecnt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_BossBtlMsg, addatkpct_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_BossBtlMsg, haspickreward_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_BossBtlMsg, uplist_),
  };
  DB_BossBtlMsg_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DB_BossBtlMsg_descriptor_,
      DB_BossBtlMsg::default_instance_,
      DB_BossBtlMsg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_BossBtlMsg, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_BossBtlMsg, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DB_BossBtlMsg));
  DB_MedalHonorInfo_descriptor_ = file->message_type(95);
  static const int DB_MedalHonorInfo_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_MedalHonorInfo, freecastnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_MedalHonorInfo, ntokennum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_MedalHonorInfo, decoratetype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_MedalHonorInfo, hallhonorlist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_MedalHonorInfo, medalhonorlist_),
  };
  DB_MedalHonorInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DB_MedalHonorInfo_descriptor_,
      DB_MedalHonorInfo::default_instance_,
      DB_MedalHonorInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_MedalHonorInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_MedalHonorInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DB_MedalHonorInfo));
  DB_MedalHonor_descriptor_ = file->message_type(96);
  static const int DB_MedalHonor_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_MedalHonor, nid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_MedalHonor, medalhonorid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_MedalHonor, nexp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_MedalHonor, nlv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_MedalHonor, nbagtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_MedalHonor, nadmiralid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_MedalHonor, block_),
  };
  DB_MedalHonor_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DB_MedalHonor_descriptor_,
      DB_MedalHonor::default_instance_,
      DB_MedalHonor_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_MedalHonor, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_MedalHonor, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DB_MedalHonor));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_dbinterface_5fsub_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DB_UserLiteBase_descriptor_, &DB_UserLiteBase::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DB_CityUserLite_descriptor_, &DB_CityUserLite::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DB_RegionCityUserLite_descriptor_, &DB_RegionCityUserLite::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DB_GuildUserLite_descriptor_, &DB_GuildUserLite::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DB_StarUserLite_descriptor_, &DB_StarUserLite::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DB_UserLite_descriptor_, &DB_UserLite::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DB_Star_descriptor_, &DB_Star::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DB_BitCache_descriptor_, &DB_BitCache::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DB_BanLogin_descriptor_, &DB_BanLogin::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DB_QuestRule_descriptor_, &DB_QuestRule::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DB_Quest_descriptor_, &DB_Quest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DB_AiAttackQueuedArmyInfo_descriptor_, &DB_AiAttackQueuedArmyInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DB_AiAttackQueued_descriptor_, &DB_AiAttackQueued::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DB_AiAttack_descriptor_, &DB_AiAttack::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DB_Troop_descriptor_, &DB_Troop::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DB_TrapArmy_descriptor_, &DB_TrapArmy::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DB_Trap_descriptor_, &DB_Trap::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DB_Loot_descriptor_, &DB_Loot::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DB_LootEquip_descriptor_, &DB_LootEquip::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DB_LootSuperWeapon_descriptor_, &DB_LootSuperWeapon::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DB_LootReport_descriptor_, &DB_LootReport::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DB_Mushroom_descriptor_, &DB_Mushroom::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DB_Stats_descriptor_, &DB_Stats::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DB_UpgradeArmy_descriptor_, &DB_UpgradeArmy::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DB_UnlockArmy_descriptor_, &DB_UnlockArmy::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DB_Academy_descriptor_, &DB_Academy::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DB_Monsterbaiter_descriptor_, &DB_Monsterbaiter::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DB_Locker_descriptor_, &DB_Locker::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DB_Army_descriptor_, &DB_Army::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DB_Book_descriptor_, &DB_Book::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DB_Emblem_descriptor_, &DB_Emblem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DB_EmblemNew_descriptor_, &DB_EmblemNew::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DB_WeaponCom_descriptor_, &DB_WeaponCom::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DB_WeaponCenter_descriptor_, &DB_WeaponCenter::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DB_Jammer_descriptor_, &DB_Jammer::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DB_WeaponExtraWpcInfo_descriptor_, &DB_WeaponExtraWpcInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DB_WeaponExtraEmblemInfo_descriptor_, &DB_WeaponExtraEmblemInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DB_CaptureBase_descriptor_, &DB_CaptureBase::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DB_SlaveRoom_descriptor_, &DB_SlaveRoom::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DB_NPCActive_descriptor_, &DB_NPCActive::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DB_BaseDefNPC_descriptor_, &DB_BaseDefNPC::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DB_AdmiralSkill_descriptor_, &DB_AdmiralSkill::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DB_AdmiralSkillData_descriptor_, &DB_AdmiralSkillData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DB_AdmiralTrainLV_descriptor_, &DB_AdmiralTrainLV::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DB_AdmiralLetter_descriptor_, &DB_AdmiralLetter::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DB_AdmiralEquip_descriptor_, &DB_AdmiralEquip::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DB_Admiral_descriptor_, &DB_Admiral::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DB_AdmiralInfo_descriptor_, &DB_AdmiralInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DB_HeroLetter_descriptor_, &DB_HeroLetter::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DB_HeroSkillData_descriptor_, &DB_HeroSkillData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DB_HeroAtkData_descriptor_, &DB_HeroAtkData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DB_Hero_descriptor_, &DB_Hero::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DB_UpgradeHero_descriptor_, &DB_UpgradeHero::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DB_HeroInfo_descriptor_, &DB_HeroInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DB_Flag_descriptor_, &DB_Flag::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DB_Storedata_descriptor_, &DB_Storedata::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DB_EnemyStar_descriptor_, &DB_EnemyStar::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DB_GiftFrdInfo_descriptor_, &DB_GiftFrdInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DB_NewComerGiftList_descriptor_, &DB_NewComerGiftList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DB_GiftInfo_descriptor_, &DB_GiftInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DB_DayAtkUser_descriptor_, &DB_DayAtkUser::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DB_UserStar_descriptor_, &DB_UserStar::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DB_DefenseActivityNode_descriptor_, &DB_DefenseActivityNode::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DB_DefenseActivity_descriptor_, &DB_DefenseActivity::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DB_DefenseHonor_descriptor_, &DB_DefenseHonor::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DB_BuffUnit_descriptor_, &DB_BuffUnit::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DB_BuffData_descriptor_, &DB_BuffData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DB_BagItemLog_descriptor_, &DB_BagItemLog::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DB_Log_descriptor_, &DB_Log::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DB_BagItem_descriptor_, &DB_BagItem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DB_Bag_descriptor_, &DB_Bag::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DB_MoonCake_descriptor_, &DB_MoonCake::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DB_HolidayDraw_descriptor_, &DB_HolidayDraw::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DB_LeaveMessage_Unit_descriptor_, &DB_LeaveMessage_Unit::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DB_LeaveMessage_descriptor_, &DB_LeaveMessage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DB_TXMissionData_descriptor_, &DB_TXMissionData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DB_ClientNumStat_descriptor_, &DB_ClientNumStat::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DB_PokerInfo_descriptor_, &DB_PokerInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DB_CurrPokerInfo_descriptor_, &DB_CurrPokerInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DB_PokerExchanges_descriptor_, &DB_PokerExchanges::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DB_WorldCupPredictions_descriptor_, &DB_WorldCupPredictions::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DB_WCBetInfo_descriptor_, &DB_WCBetInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DB_CardDuelInfo_descriptor_, &DB_CardDuelInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DB_MiddleYearGift_descriptor_, &DB_MiddleYearGift::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DB_OpenSNSGift_descriptor_, &DB_OpenSNSGift::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DB_CallBackFriend_descriptor_, &DB_CallBackFriend::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DB_AttackCount_descriptor_, &DB_AttackCount::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DB_Science_descriptor_, &DB_Science::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DB_Effect_descriptor_, &DB_Effect::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DB_Officer_descriptor_, &DB_Officer::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DB_WpcRank_descriptor_, &DB_WpcRank::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DB_LeagueBtl_descriptor_, &DB_LeagueBtl::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DB_HappylibAward_descriptor_, &DB_HappylibAward::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DB_HappyLib_descriptor_, &DB_HappyLib::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DB_BossBtlMsg_descriptor_, &DB_BossBtlMsg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DB_MedalHonorInfo_descriptor_, &DB_MedalHonorInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DB_MedalHonor_descriptor_, &DB_MedalHonor::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_dbinterface_5fsub_2eproto() {
  delete DB_UserLiteBase::default_instance_;
  delete DB_UserLiteBase_reflection_;
  delete DB_CityUserLite::default_instance_;
  delete DB_CityUserLite_reflection_;
  delete DB_RegionCityUserLite::default_instance_;
  delete DB_RegionCityUserLite_reflection_;
  delete DB_GuildUserLite::default_instance_;
  delete DB_GuildUserLite_reflection_;
  delete DB_StarUserLite::default_instance_;
  delete DB_StarUserLite_reflection_;
  delete DB_UserLite::default_instance_;
  delete DB_UserLite_reflection_;
  delete DB_Star::default_instance_;
  delete DB_Star_reflection_;
  delete DB_BitCache::default_instance_;
  delete DB_BitCache_reflection_;
  delete DB_BanLogin::default_instance_;
  delete DB_BanLogin_reflection_;
  delete DB_QuestRule::default_instance_;
  delete DB_QuestRule_reflection_;
  delete DB_Quest::default_instance_;
  delete DB_Quest_reflection_;
  delete DB_AiAttackQueuedArmyInfo::default_instance_;
  delete DB_AiAttackQueuedArmyInfo_reflection_;
  delete DB_AiAttackQueued::default_instance_;
  delete DB_AiAttackQueued_reflection_;
  delete DB_AiAttack::default_instance_;
  delete DB_AiAttack_reflection_;
  delete DB_Troop::default_instance_;
  delete DB_Troop_reflection_;
  delete DB_TrapArmy::default_instance_;
  delete DB_TrapArmy_reflection_;
  delete DB_Trap::default_instance_;
  delete DB_Trap_reflection_;
  delete DB_Loot::default_instance_;
  delete DB_Loot_reflection_;
  delete DB_LootEquip::default_instance_;
  delete DB_LootEquip_reflection_;
  delete DB_LootSuperWeapon::default_instance_;
  delete DB_LootSuperWeapon_reflection_;
  delete DB_LootReport::default_instance_;
  delete DB_LootReport_reflection_;
  delete DB_Mushroom::default_instance_;
  delete DB_Mushroom_reflection_;
  delete DB_Stats::default_instance_;
  delete DB_Stats_reflection_;
  delete DB_UpgradeArmy::default_instance_;
  delete DB_UpgradeArmy_reflection_;
  delete DB_UnlockArmy::default_instance_;
  delete DB_UnlockArmy_reflection_;
  delete DB_Academy::default_instance_;
  delete DB_Academy_reflection_;
  delete DB_Monsterbaiter::default_instance_;
  delete DB_Monsterbaiter_reflection_;
  delete DB_Locker::default_instance_;
  delete DB_Locker_reflection_;
  delete DB_Army::default_instance_;
  delete DB_Army_reflection_;
  delete DB_Book::default_instance_;
  delete DB_Book_reflection_;
  delete DB_Emblem::default_instance_;
  delete DB_Emblem_reflection_;
  delete DB_EmblemNew::default_instance_;
  delete DB_EmblemNew_reflection_;
  delete DB_WeaponCom::default_instance_;
  delete DB_WeaponCom_reflection_;
  delete DB_WeaponCenter::default_instance_;
  delete DB_WeaponCenter_reflection_;
  delete DB_Jammer::default_instance_;
  delete DB_Jammer_reflection_;
  delete DB_WeaponExtraWpcInfo::default_instance_;
  delete DB_WeaponExtraWpcInfo_reflection_;
  delete DB_WeaponExtraEmblemInfo::default_instance_;
  delete DB_WeaponExtraEmblemInfo_reflection_;
  delete DB_CaptureBase::default_instance_;
  delete DB_CaptureBase_reflection_;
  delete DB_SlaveRoom::default_instance_;
  delete DB_SlaveRoom_reflection_;
  delete DB_NPCActive::default_instance_;
  delete DB_NPCActive_reflection_;
  delete DB_BaseDefNPC::default_instance_;
  delete DB_BaseDefNPC_reflection_;
  delete DB_AdmiralSkill::default_instance_;
  delete DB_AdmiralSkill_reflection_;
  delete DB_AdmiralSkillData::default_instance_;
  delete DB_AdmiralSkillData_reflection_;
  delete DB_AdmiralTrainLV::default_instance_;
  delete DB_AdmiralTrainLV_reflection_;
  delete DB_AdmiralLetter::default_instance_;
  delete DB_AdmiralLetter_reflection_;
  delete DB_AdmiralEquip::default_instance_;
  delete DB_AdmiralEquip_reflection_;
  delete DB_Admiral::default_instance_;
  delete DB_Admiral_reflection_;
  delete DB_AdmiralInfo::default_instance_;
  delete DB_AdmiralInfo_reflection_;
  delete DB_HeroLetter::default_instance_;
  delete DB_HeroLetter_reflection_;
  delete DB_HeroSkillData::default_instance_;
  delete DB_HeroSkillData_reflection_;
  delete DB_HeroAtkData::default_instance_;
  delete DB_HeroAtkData_reflection_;
  delete DB_Hero::default_instance_;
  delete DB_Hero_reflection_;
  delete DB_UpgradeHero::default_instance_;
  delete DB_UpgradeHero_reflection_;
  delete DB_HeroInfo::default_instance_;
  delete DB_HeroInfo_reflection_;
  delete DB_Flag::default_instance_;
  delete DB_Flag_reflection_;
  delete DB_Storedata::default_instance_;
  delete DB_Storedata_reflection_;
  delete DB_EnemyStar::default_instance_;
  delete DB_EnemyStar_reflection_;
  delete DB_GiftFrdInfo::default_instance_;
  delete DB_GiftFrdInfo_reflection_;
  delete DB_NewComerGiftList::default_instance_;
  delete DB_NewComerGiftList_reflection_;
  delete DB_GiftInfo::default_instance_;
  delete DB_GiftInfo_reflection_;
  delete DB_DayAtkUser::default_instance_;
  delete DB_DayAtkUser_reflection_;
  delete DB_UserStar::default_instance_;
  delete DB_UserStar_reflection_;
  delete DB_DefenseActivityNode::default_instance_;
  delete DB_DefenseActivityNode_reflection_;
  delete DB_DefenseActivity::default_instance_;
  delete DB_DefenseActivity_reflection_;
  delete DB_DefenseHonor::default_instance_;
  delete DB_DefenseHonor_reflection_;
  delete DB_BuffUnit::default_instance_;
  delete DB_BuffUnit_reflection_;
  delete DB_BuffData::default_instance_;
  delete DB_BuffData_reflection_;
  delete DB_BagItemLog::default_instance_;
  delete DB_BagItemLog_reflection_;
  delete DB_Log::default_instance_;
  delete DB_Log_reflection_;
  delete DB_BagItem::default_instance_;
  delete DB_BagItem_reflection_;
  delete DB_Bag::default_instance_;
  delete DB_Bag_reflection_;
  delete DB_MoonCake::default_instance_;
  delete DB_MoonCake_reflection_;
  delete DB_HolidayDraw::default_instance_;
  delete DB_HolidayDraw_reflection_;
  delete DB_LeaveMessage_Unit::default_instance_;
  delete DB_LeaveMessage_Unit_reflection_;
  delete DB_LeaveMessage::default_instance_;
  delete DB_LeaveMessage_reflection_;
  delete DB_TXMissionData::default_instance_;
  delete DB_TXMissionData_reflection_;
  delete DB_ClientNumStat::default_instance_;
  delete DB_ClientNumStat_reflection_;
  delete DB_PokerInfo::default_instance_;
  delete DB_PokerInfo_reflection_;
  delete DB_CurrPokerInfo::default_instance_;
  delete DB_CurrPokerInfo_reflection_;
  delete DB_PokerExchanges::default_instance_;
  delete DB_PokerExchanges_reflection_;
  delete DB_WorldCupPredictions::default_instance_;
  delete DB_WorldCupPredictions_reflection_;
  delete DB_WCBetInfo::default_instance_;
  delete DB_WCBetInfo_reflection_;
  delete DB_CardDuelInfo::default_instance_;
  delete DB_CardDuelInfo_reflection_;
  delete DB_MiddleYearGift::default_instance_;
  delete DB_MiddleYearGift_reflection_;
  delete DB_OpenSNSGift::default_instance_;
  delete DB_OpenSNSGift_reflection_;
  delete DB_CallBackFriend::default_instance_;
  delete DB_CallBackFriend_reflection_;
  delete DB_AttackCount::default_instance_;
  delete DB_AttackCount_reflection_;
  delete DB_Science::default_instance_;
  delete DB_Science_reflection_;
  delete DB_Effect::default_instance_;
  delete DB_Effect_reflection_;
  delete DB_Officer::default_instance_;
  delete DB_Officer_reflection_;
  delete DB_WpcRank::default_instance_;
  delete DB_WpcRank_reflection_;
  delete DB_LeagueBtl::default_instance_;
  delete DB_LeagueBtl_reflection_;
  delete DB_HappylibAward::default_instance_;
  delete DB_HappylibAward_reflection_;
  delete DB_HappyLib::default_instance_;
  delete DB_HappyLib_reflection_;
  delete DB_BossBtlMsg::default_instance_;
  delete DB_BossBtlMsg_reflection_;
  delete DB_MedalHonorInfo::default_instance_;
  delete DB_MedalHonorInfo_reflection_;
  delete DB_MedalHonor::default_instance_;
  delete DB_MedalHonor_reflection_;
}

void protobuf_AddDesc_dbinterface_5fsub_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\025dbinterface_sub.proto\"\255\002\n\017DB_UserLiteB"
    "ase\022\016\n\006userid\030\001 \001(\t\022\014\n\004name\030\002 \003(\t\022\013\n\003pic"
    "\030\003 \003(\t\022\r\n\005level\030\004 \001(\005\022\023\n\013combatValue\030\005 \001"
    "(\r\022\016\n\006online\030\006 \001(\010\022\020\n\010savetime\030\007 \001(\005\022\026\n\016"
    "nIntegralScore\030\010 \001(\r\022\024\n\tcountryID\030\t \001(\005:"
    "\0010\022\023\n\013lastLogonTm\030\n \001(\005\022\027\n\017officerPositi"
    "on\030\013 \001(\005\022\021\n\tarenaRank\030\014 \001(\005\022\020\n\010vipLevel\030"
    "\r \001(\005\022\017\n\007vipType\030\016 \001(\005\022\027\n\017heroarenacomba"
    "t\030\017 \001(\005\"$\n\017DB_CityUserLite\022\021\n\006morale\030\001 \001"
    "(\005:\0010\"=\n\025DB_RegionCityUserLite\022\021\n\006morale"
    "\030\001 \001(\005:\0010\022\021\n\006region\030\002 \001(\005:\0010\"\277\001\n\020DB_Guil"
    "dUserLite\022\020\n\010position\030\001 \001(\005\022\022\n\ncontribut"
    "e\030\002 \001(\005\022\027\n\017totalContribute\030\003 \001(\005\022\021\n\taddA"
    "tkPct\030\004 \001(\005\022\023\n\013addBloodPct\030\005 \001(\005\022\025\n\rdayc"
    "ontribute\030\006 \003(\005\022\030\n\020lastcontributetm\030\007 \001("
    "\005\022\023\n\013lastcontidx\030\010 \001(\005\"\303\001\n\017DB_StarUserLi"
    "te\022\022\n\nattacktime\030\001 \001(\005\022\020\n\010userstat\030\002 \001(\005"
    "\022\020\n\010safetime\030\003 \001(\005\022\026\n\016totalpercharge\030\004 \001"
    "(\003\022\026\n\016playeronlinetm\030\005 \001(\005\022\027\n\017playerrefr"
    "eshtm\030\006 \001(\r\022\027\n\017finishCaptureTm\030\007 \001(\005\022\026\n\016"
    "logoutsafetime\030\010 \001(\005\"\317\001\n\013DB_UserLite\022\"\n\010"
    "userLite\030\001 \001(\0132\020.DB_UserLiteBase\022\"\n\010city"
    "Lite\030\002 \001(\0132\020.DB_CityUserLite\022\"\n\010starLite"
    "\030\003 \001(\0132\020.DB_StarUserLite\022$\n\tguildLite\030\004 "
    "\001(\0132\021.DB_GuildUserLite\022.\n\016regionCityLite"
    "\030\005 \001(\0132\026.DB_RegionCityUserLite\"\242\002\n\007DB_St"
    "ar\022\016\n\006userid\030\001 \002(\t\022\014\n\004name\030\002 \003(\t\022\024\n\014prof"
    "ile_link\030\003 \003(\t\022\r\n\005level\030\004 \001(\005\022\020\n\010safetim"
    "e\030\005 \001(\005\022\022\n\nattacktime\030\006 \001(\005\022\016\n\006online\030\007 "
    "\001(\010\022\020\n\010userstat\030\010 \001(\005\022\020\n\010savetime\030\t \001(\005\022"
    "\026\n\016totalpercharge\030\n \001(\003\022\026\n\016playeronlinet"
    "m\030\013 \001(\005\022\027\n\017playerrefreshtm\030\014 \001(\r\022\027\n\017fini"
    "shCaptureTm\030\r \001(\005\022\030\n\020combatPowerValue\030\016 "
    "\001(\r\"\032\n\013DB_BitCache\022\013\n\003bit\030\001 \003(\005\"4\n\013DB_Ba"
    "nLogin\022\027\n\010banlogin\030\001 \001(\010:\005false\022\014\n\004time\030"
    "\002 \001(\003\"\205\n\n\014DB_QuestRule\022\014\n\004blvl\030\001 \001(\005\022\r\n\005"
    "brlvl\030\002 \001(\005\022\r\n\005b1lvl\030\003 \001(\005\022\017\n\007b1count\030\004 "
    "\001(\005\022\r\n\005b2lvl\030\005 \001(\005\022\017\n\007b2count\030\006 \001(\005\022\r\n\005b"
    "3lvl\030\007 \001(\005\022\r\n\005b4lvl\030\010 \001(\005\022\r\n\005b5lvl\030\t \001(\005"
    "\022\r\n\005b6lvl\030\n \001(\005\022\017\n\007b6count\030\013 \001(\005\022\r\n\005b7lv"
    "l\030\014 \001(\005\022\r\n\005b8lvl\030\r \001(\005\022\r\n\005b9lvl\030\016 \001(\005\022\016\n"
    "\006b10lvl\030\017 \001(\005\022\016\n\006b11lvl\030\020 \001(\005\022\016\n\006b12lvl\030"
    "\021 \001(\005\022\016\n\006b13lvl\030\022 \001(\005\022\016\n\006b14lvl\030\023 \001(\005\022\016\n"
    "\006b15lvl\030\024 \001(\005\022\016\n\006b16lvl\030\025 \001(\005\022\016\n\006b17lvl\030"
    "\026 \001(\005\022\016\n\006b18lvl\030\027 \001(\005\022\016\n\006b19lvl\030\030 \001(\005\022\016\n"
    "\006b20lvl\030\031 \001(\005\022\016\n\006b21lvl\030\032 \001(\005\022\016\n\006b22lvl\030"
    "\033 \001(\005\022\016\n\006b23lvl\030\034 \001(\005\022\016\n\006b24lvl\030\035 \001(\005\022\016\n"
    "\006b25lvl\030\036 \001(\005\022\016\n\006b26lvl\030\037 \001(\005\022\016\n\006b28lvl\030"
    "  \001(\005\022\016\n\006b29lvl\030! \001(\005\022\016\n\006b30lvl\030\" \001(\005\022\016\n"
    "\006b31lvl\030# \001(\005\022\016\n\006b33lvl\030$ \001(\005\022\022\n\nlootpic"
    "ked\030% \001(\005\022\030\n\020singleclickbank1\030& \001(\005\022\030\n\020s"
    "ingleclickbank2\030\' \001(\005\022\027\n\017resourcegather1"
    "\030( \001(\005\022\027\n\017resourcegather2\030) \001(\005\022\024\n\014worde"
    "r_count\030* \001(\005\022\026\n\016invasion_repel\030+ \001(\005\022\026\n"
    "\016friendInstalls\030, \001(\005\022\r\n\005built\030- \001(\005\022\016\n\006"
    "built3\030. \001(\005\022\017\n\007built10\030/ \001(\005\022\021\n\twallcou"
    "nt\0300 \001(\005\022\021\n\tartifacts\0301 \001(\005\022\016\n\006doodad\0302 "
    "\001(\005\022\026\n\016bonus_bookmark\0303 \001(\005\022\021\n\tbonus_fan"
    "\0304 \001(\005\022\025\n\rbonus_invites\0305 \001(\005\022\023\n\013bonus_g"
    "ifts\0306 \001(\005\022\016\n\006_kills\0308 \001(\005\022\026\n\016_killsInAt"
    "tack\0309 \001(\005\022\024\n\014_maxKillsLRS\030: \001(\005\022\026\n\016_max"
    "FlattenLRS\030; \001(\005\022\r\n\005_lrs1\030< \001(\005\022\r\n\005_lrs2"
    "\030= \001(\005\022\r\n\005_lrs3\030> \001(\005\022\r\n\005_lrs4\030? \001(\005\022\r\n\005"
    "_lrs5\030@ \001(\005\022\r\n\005_lrs6\030A \001(\005\022\r\n\005_lrs7\030B \001("
    "\005\022\r\n\005_lrs8\030C \001(\005\022\r\n\005_lrs9\030D \001(\005\022\016\n\006_lrs1"
    "0\030E \001(\005\022\020\n\010_resLoot\030F \001(\005\022\025\n\r_destroy_ba"
    "se\030G \001(\005\022\025\n\r_attack_enemy\030H \001(\005\022\024\n\014_qzon"
    "eActive\030I \001(\005\"\214\001\n\010DB_Quest\022\030\n\001g\030\001 \001(\0132\r."
    "DB_QuestRule\022\t\n\001c\030\002 \003(\t\022\026\n\016finished_ques"
    "t\030\021 \003(\t\022\023\n\013finishQuest\030\003 \003(\005\022\n\n\002t1\030\004 \003(\t"
    "\022\n\n\002t2\030\005 \003(\t\022\n\n\002t3\030\006 \003(\t\022\n\n\002t4\030\007 \003(\t\"T\n\031"
    "DB_AiAttackQueuedArmyInfo\022\014\n\004time\030\001 \001(\005\022"
    "\014\n\004type\030\002 \001(\005\022\r\n\005count\030\003 \001(\005\022\014\n\004area\030\004 \001"
    "(\005\"c\n\021DB_AiAttackQueued\022*\n\006attack\030\001 \003(\0132"
    "\032.DB_AiAttackQueuedArmyInfo\022\016\n\006warned\030\002 "
    "\001(\005\022\022\n\nstartUnits\030\003 \001(\005\"l\n\013DB_AiAttack\022\021"
    "\n\tcurrentid\030\001 \001(\005\022\022\n\nnextAttack\030\002 \001(\005\022\022\n"
    "\nlastattack\030\003 \001(\005\022\"\n\006queued\030\004 \001(\0132\022.DB_A"
    "iAttackQueued\"6\n\010DB_Troop\022\n\n\002id\030\001 \001(\005\022\016\n"
    "\006health\030\002 \001(\005\022\016\n\006stance\030\003 \001(\005\"6\n\013DB_Trap"
    "Army\022\023\n\010armytype\030\001 \001(\005:\0010\022\022\n\007armynum\030\002 \001"
    "(\005:\0010\")\n\007DB_Trap\022\036\n\010trapArmy\030\001 \003(\0132\014.DB_"
    "TrapArmy\"6\n\007DB_Loot\022\t\n\001X\030\001 \001(\005\022\t\n\001Y\030\002 \001("
    "\005\022\t\n\001f\030\003 \001(\005\022\n\n\002st\030\004 \001(\005\"k\n\014DB_LootEquip"
    "\022\014\n\004type\030\001 \001(\005\022\020\n\010showtype\030\002 \001(\005\022\014\n\004time"
    "\030\003 \001(\005\022\013\n\003num\030\004 \001(\005\022\r\n\005level\030\005 \001(\005\022\021\n\the"
    "rograde\030\006 \001(\005\"c\n\022DB_LootSuperWeapon\022\034\n\021u"
    "seSuperWeaponNum\030\001 \001(\005:\0010\022\033\n\020useSuperWea"
    "ponID\030\002 \001(\005:\0010\022\022\n\007useTime\030\003 \001(\005:\0010\"\222\005\n\rD"
    "B_LootReport\022\020\n\010attackID\030\001 \001(\003\022\022\n\nrecove"
    "ryID\030\002 \001(\003\022\n\n\002r1\030\003 \001(\t\022\n\n\002r2\030\004 \001(\t\022\022\n\nat"
    "tackName\030\005 \001(\t\022\013\n\003log\030\006 \001(\t\022\020\n\010attacPic\030"
    "\007 \001(\t\022\022\n\nattacktime\030\010 \001(\005\022\031\n\nhasbalance\030"
    "\017 \001(\010:\005false\022\016\n\006damage\030\020 \001(\005\022\014\n\004type\030\021 \001"
    "(\005\022\023\n\013defenceName\030\022 \001(\t\022\023\n\013Attacklevel\030\023"
    " \001(\005\022\024\n\014defencelevel\030\024 \001(\005\022\030\n\020attackpic_"
    "square\030\025 \001(\t\022\031\n\021defencepic_square\030\026 \001(\t\022"
    "\022\n\ninitdamage\030\027 \001(\005\022&\n\017attackequiploot\030\030"
    " \003(\0132\r.DB_LootEquip\022\'\n\020defenceequiploot\030"
    "\031 \003(\0132\r.DB_LootEquip\022\020\n\005honor\030\032 \001(\005:\0010\022\027"
    "\n\010isStrike\030\033 \001(\010:\005false\022\020\n\005feats\030\034 \001(\005:\001"
    "0\022\037\n\020destroySlaveRoom\030\035 \001(\010:\005false\022\025\n\nad"
    "imralExp\030\036 \001(\005:\0010\022\030\n\rdefAdimralExp\030\037 \001(\005"
    ":\0010\022\023\n\010warstage\030  \001(\005:\0010\022(\n\013superweapon\030"
    "! \001(\0132\023.DB_LootSuperWeapon\022\033\n\014isSuperSto"
    "rm\030\" \001(\010:\005false\"-\n\013DB_Mushroom\022\t\n\001s\030\001 \001("
    "\005\022\023\n\001l\030\002 \003(\0132\010.DB_Loot\"\260\003\n\010DB_Stats\022\r\n\005m"
    "rlsr\030\001 \001(\005\022\014\n\004mrls\030\002 \001(\005\022\014\n\004mrlv\030\003 \001(\005\022\017"
    "\n\007mutesfx\030\004 \001(\005\022\021\n\tmutemusic\030\005 \001(\005\022\013\n\003lo"
    "g\030\006 \001(\005\022\t\n\001s\030\007 \001(\005\022\014\n\004e_lp\030\010 \001(\005\022\021\n\tpopu"
    "prate\030\t \001(\005\022\n\n\002CM\030\n \001(\005\022\013\n\003tip\030\013 \001(\005\022\020\n\010"
    "updateid\030\014 \001(\005\022\026\n\016reinforcements\030\r \001(\005\022\034"
    "\n\024reinforcements_state\030\016 \001(\005\022\020\n\010savetime"
    "\030\017 \001(\005\022\032\n\022reinforcementsTime\030\020 \001(\005\022\026\n\013se"
    "ttings_vo\030\021 \001(\005:\0011\022\032\n\017settings_bodies\030\022 "
    "\001(\005:\0011\022\034\n\021settings_vehicles\030\023 \001(\005:\0011\022\033\n\020"
    "settings_admiral\030\024 \001(\005:\0011\022\036\n\017settings_lo"
    "wfps\030\025 \001(\010:\005false\"y\n\016DB_UpgradeArmy\022\020\n\010a"
    "rmyType\030\001 \001(\005\022\r\n\005level\030\002 \001(\005\022\025\n\nfinishTi"
    "me\030\003 \001(\005:\0010\022\027\n\014ExtraBldTime\030\004 \001(\005:\0010\022\026\n\013"
    "ExtraUpTime\030\005 \001(\005:\0010\"0\n\rDB_UnlockArmy\022\020\n"
    "\010armyType\030\001 \001(\005\022\r\n\005level\030\002 \001(\005\"B\n\nDB_Aca"
    "demy\022\014\n\004type\030\001 \001(\t\022\t\n\001l\030\002 \001(\005\022\t\n\001t\030\003 \001(\005"
    "\022\020\n\010savetime\030\004 \001(\005\"T\n\020DB_Monsterbaiter\022\r"
    "\n\005queue\030\001 \003(\005\022\014\n\004musk\030\002 \001(\005\022\r\n\005angle\030\003 \001"
    "(\005\022\024\n\tstartTime\030\004 \001(\005:\0010\":\n\tDB_Locker\022\014\n"
    "\004name\030\001 \001(\t\022\t\n\001t\030\002 \001(\005\022\t\n\001s\030\003 \001(\t\022\t\n\001e\030\004"
    " \001(\t\"\250\001\n\007DB_Army\022\014\n\004type\030\001 \001(\005\022\t\n\001X\030\002 \001("
    "\005\022\t\n\001Y\030\003 \001(\005\022\r\n\005angle\030\004 \001(\005\022\016\n\006health\030\005 "
    "\001(\005\022\016\n\006stance\030\006 \001(\005\022\r\n\002id\030\007 \001(\005:\0010\022\023\n\010de"
    "lstate\030\010 \001(\005:\0010\022\024\n\tcampstate\030\t \001(\005:\0010\022\020\n"
    "\005grade\030\n \001(\005:\0010\"r\n\007DB_Book\022\r\n\002id\030\001 \001(\005:\001"
    "0\022\021\n\006bookID\030\002 \001(\005:\0010\022\020\n\005level\030\003 \001(\005:\0010\022\017"
    "\n\004lock\030\004 \001(\005:\0010\022\016\n\003exp\030\005 \001(\005:\0010\022\022\n\007bagTy"
    "pe\030\006 \001(\005:\0010\"2\n\tDB_Emblem\022\023\n\010emblemID\030\001 \001"
    "(\005:\0010\022\020\n\005count\030\002 \001(\005:\0010\"{\n\014DB_EmblemNew\022"
    "\r\n\002id\030\001 \001(\005:\0010\022\023\n\010emblemID\030\002 \001(\005:\0010\022\017\n\004l"
    "ock\030\004 \001(\005:\0010\022\016\n\003exp\030\005 \001(\005:\0010\022\022\n\007bagType\030"
    "\006 \001(\005:\0010\022\022\n\007useFlag\030\007 \001(\005:\0010\"\236\001\n\014DB_Weap"
    "onCom\022\r\n\002id\030\001 \001(\005:\0010\022\020\n\005comID\030\002 \001(\005:\0010\022\020"
    "\n\005level\030\003 \001(\005:\0010\022\017\n\004lock\030\004 \001(\005:\0010\022\016\n\003exp"
    "\030\005 \001(\005:\0010\022\022\n\007bagType\030\006 \001(\005:\0010\022\020\n\005grade\030\007"
    " \001(\005:\0010\022\024\n\textraType\030\010 \001(\005:\0010\"\327\005\n\017DB_Wea"
    "ponCenter\022\017\n\007sceneID\030\001 \003(\005\022\026\n\016freeExplor"
    "eCnt\030\002 \003(\005\022\025\n\rfinishExpTime\030\003 \003(\005\022\017\n\007bas"
    "eCom\030\004 \003(\005\022\017\n\007armyCom\030\005 \003(\005\022\017\n\007tankCom\030\006"
    " \003(\005\022\020\n\010planeCom\030\007 \003(\005\022\035\n\006wpcCom\030\010 \003(\0132\r"
    ".DB_WeaponCom\022\035\n\twpcEmblem\030\t \003(\0132\n.DB_Em"
    "blem\022\030\n\020earthTowerEmblem\030\n \003(\005\022\026\n\016airTow"
    "erEmblem\030\013 \003(\005\022\023\n\013otherEmblem\030\014 \003(\005\022#\n\014w"
    "pcEmblemNew\030\r \003(\0132\r.DB_EmblemNew\022\027\n\017gunT"
    "urretEmblem\030\016 \003(\005\022\031\n\021mortarTowerEmblem\030\017"
    " \003(\005\022\026\n\016otherbldEmblem\030\020 \003(\005\022\031\n\007wpcBook\030"
    "\021 \003(\0132\010.DB_Book\022\023\n\013admiralBook\030\022 \003(\005\022\030\n\020"
    "laserTowerEmblem\030\023 \003(\005\022\017\n\007heroCom\030\024 \003(\005\022"
    ".\n\016unlockExtraNum\030\025 \001(\0132\026.DB_WeaponExtra"
    "WpcInfo\022)\n\tturnOnNum\030\026 \001(\0132\026.DB_WeaponEx"
    "traWpcInfo\0222\n\017unlockEmblemNum\030\027 \001(\0132\031.DB"
    "_WeaponExtraEmblemInfo\022\030\n\020giantCanonEmbl"
    "em\030\030 \003(\005\022\035\n\twpcJammer\030\031 \003(\0132\n.DB_Jammer\022"
    "\022\n\nbaseJammer\030\032 \003(\005\022\022\n\narmyJammer\030\033 \003(\005\""
    "{\n\tDB_Jammer\022\r\n\002id\030\001 \001(\005:\0010\022\023\n\010jammerID\030"
    "\002 \001(\005:\0010\022\020\n\005level\030\003 \001(\005:\0010\022\024\n\005bLock\030\004 \001("
    "\010:\005false\022\016\n\003exp\030\005 \001(\005:\0010\022\022\n\007bagType\030\006 \001("
    "\005:\0010\"\244\001\n\025DB_WeaponExtraWpcInfo\022\032\n\017extraB"
    "aseComNum\030\001 \001(\005:\0010\022\032\n\017extraArmyComNum\030\002 "
    "\001(\005:\0010\022\032\n\017extraTankComNum\030\003 \001(\005:\0010\022\033\n\020ex"
    "traPlaneComNum\030\004 \001(\005:\0010\022\032\n\017extraHeroComN"
    "um\030\005 \001(\005:\0010\"\250\001\n\030DB_WeaponExtraEmblemInfo"
    "\022\031\n\016earthEmblemCnt\030\001 \001(\005:\0010\022\027\n\014airEmblem"
    "Cnt\030\002 \001(\005:\0010\022\030\n\rbaseEmblemCnt\030\003 \001(\005:\0010\022\036"
    "\n\023lasertowerEmblemCnt\030\004 \001(\005:\0010\022\036\n\023giantc"
    "anonEmblemCnt\030\005 \001(\005:\0010\"\261\001\n\016DB_CaptureBas"
    "e\022\021\n\006baseID\030\001 \001(\003:\0010\022\014\n\004name\030\002 \001(\t\022\013\n\003pi"
    "c\030\003 \001(\t\022\020\n\005level\030\004 \001(\005:\0010\022\032\n\017finishCaptu"
    "reTm\030\005 \001(\005:\0010\022\022\n\007srcType\030\006 \001(\005:\0010\022\026\n\013pic"
    "kResTime\030\007 \001(\005:\0010\022\027\n\010lossUser\030\010 \001(\010:\005fal"
    "se\"\341\001\n\014DB_SlaveRoom\022\027\n\014dayRescueCnt\030\001 \001("
    "\005:\0010\022\031\n\016dayCapturedCnt\030\002 \001(\005:\0010\022%\n\014captu"
    "redInfo\030\003 \001(\0132\017.DB_CaptureBase\022$\n\013captur"
    "eBase\030\004 \003(\0132\017.DB_CaptureBase\022\023\n\010prcMedal"
    "\030\005 \001(\005:\0010\022\021\n\006prcOil\030\006 \001(\005:\0010\022\023\n\010prcHonor"
    "\030\007 \001(\005:\0010\022\023\n\010prcFeats\030\010 \001(\005:\0010\"O\n\014DB_NPC"
    "Active\022\023\n\013dayWinNPCID\030\001 \003(\005\022\024\n\014dayLostNP"
    "CID\030\002 \003(\005\022\024\n\014dayGetItemID\030\003 \003(\005\"\264\001\n\rDB_B"
    "aseDefNPC\022\021\n\tbestScore\030\001 \001(\005\022\021\n\tdayDefCn"
    "t\030\002 \001(\005\022\024\n\014leftStakeCnt\030\003 \001(\005\022\023\n\013showIte"
    "mLst\030\004 \003(\005\022\023\n\013showItemCnt\030\005 \003(\005\022\024\n\014stake"
    "ItemLst\030\006 \003(\005\022\024\n\014stakeItemCnt\030\007 \003(\005\022\021\n\tl"
    "astNPCID\030\010 \001(\005\"p\n\017DB_AdmiralSkill\022\r\n\002id\030"
    "\001 \001(\005:\0010\022\022\n\007skillID\030\002 \001(\005:\0010\022\030\n\tinitSkil"
    "l\030\003 \001(\010:\005false\022\020\n\005level\030\004 \001(\005:\0011\022\016\n\003exp\030"
    "\005 \001(\005:\0010\"K\n\023DB_AdmiralSkillData\022\022\n\007skill"
    "ID\030\001 \001(\005:\0010\022\020\n\005level\030\002 \001(\005:\0011\022\016\n\003exp\030\003 \001"
    "(\005:\0010\"5\n\021DB_AdmiralTrainLV\022\020\n\005level\030\001 \001("
    "\005:\0010\022\016\n\003cnt\030\002 \001(\005:\0010\"9\n\020DB_AdmiralLetter"
    "\022\023\n\010letterID\030\001 \001(\005:\0010\022\020\n\005count\030\002 \001(\005:\0010\""
    "\"\n\017DB_AdmiralEquip\022\017\n\007equipID\030\001 \003(\005\"\311\003\n\n"
    "DB_Admiral\022\024\n\tadmiralId\030\001 \001(\005:\0010\022\020\n\005leve"
    "l\030\002 \001(\005:\0010\022\016\n\003exp\030\003 \001(\005:\0010\022\022\n\007useType\030\004 "
    "\001(\005:\0010\022\021\n\006addAtk\030\005 \001(\005:\0010\022\020\n\005addHP\030\006 \001(\005"
    ":\0010\022\021\n\006addDef\030\007 \001(\005:\0010\022\021\n\006addCrt\030\010 \001(\005:\001"
    "0\022\023\n\010finalAtk\030\t \001(\005:\0010\022\022\n\007finalHP\030\n \001(\005:"
    "\0010\022\023\n\010finalDef\030\013 \001(\005:\0010\022\023\n\010finalCrt\030\014 \001("
    "\005:\0010\022\017\n\007skillID\030\r \003(\005\022#\n\007trainLV\030\017 \001(\0132\022"
    ".DB_AdmiralTrainLV\022\025\n\nuseSoulCnt\030\020 \001(\005:\001"
    "0\022\020\n\005score\030\021 \001(\005:\0010\022\'\n\tinitSkill\030\022 \001(\0132\024"
    ".DB_AdmiralSkillData\022\037\n\005equip\030\023 \001(\0132\020.DB"
    "_AdmiralEquip\022\020\n\010buffTime\030\024 \001(\005\022\026\n\016medal"
    "honorList\030\025 \003(\005\"\274\002\n\016DB_AdmiralInfo\022\034\n\007ad"
    "miral\030\001 \003(\0132\013.DB_Admiral\022\017\n\004soul\030\002 \001(\005:\001"
    "0\022\035\n\016hasSendAdmiral\030\003 \001(\010:\005false\022\016\n\006send"
    "ID\030\004 \003(\005\022\035\n\016hasCreditVisit\030\005 \001(\010:\005false\022"
    "\024\n\014freeVisitCnt\030\006 \003(\005\022\027\n\017finishVisitTime"
    "\030\007 \003(\005\022\037\n\005skill\030\010 \003(\0132\020.DB_AdmiralSkill\022"
    "\022\n\ncollectLst\030\t \003(\005\022\037\n\024shenjiangExchange"
    "Cnt\030\n \001(\005:\0010\022(\n\radmiralletter\030\013 \003(\0132\021.DB"
    "_AdmiralLetter\"6\n\rDB_HeroLetter\022\023\n\010lette"
    "rID\030\001 \001(\005:\0010\022\020\n\005count\030\002 \001(\005:\0010\"8\n\020DB_Her"
    "oSkillData\022\022\n\007skillID\030\001 \001(\005:\0010\022\020\n\005level\030"
    "\002 \001(\005:\0011\"U\n\016DB_HeroAtkData\022\t\n\001X\030\002 \001(\005\022\t\n"
    "\001Y\030\003 \001(\005\022\r\n\005angle\030\004 \001(\005\022\016\n\006health\030\005 \001(\005\022"
    "\016\n\006stance\030\006 \001(\005\"\312\001\n\007DB_Hero\022\021\n\006heroId\030\001 "
    "\001(\005:\0010\022\020\n\005level\030\002 \001(\005:\0010\022\020\n\005grade\030\003 \001(\005:"
    "\0010\022\023\n\010levelexp\030\004 \001(\005:\0010\022\023\n\010gradeexp\030\005 \001("
    "\005:\0010\022$\n\tinitSkill\030\006 \001(\0132\021.DB_HeroSkillDa"
    "ta\022 \n\007atkData\030\007 \001(\0132\017.DB_HeroAtkData\022\026\n\013"
    "recoverhptm\030\010 \001(\005:\0010\"9\n\016DB_UpgradeHero\022\020"
    "\n\010herotype\030\001 \001(\005\022\025\n\nfinishTime\030\002 \001(\005:\0010\""
    "\231\003\n\013DB_HeroInfo\022\026\n\004hero\030\001 \003(\0132\010.DB_Hero\022"
    "\"\n\nheroletter\030\002 \003(\0132\016.DB_HeroLetter\022\024\n\014f"
    "reeVisitCnt\030\003 \003(\005\022\027\n\017finishVisitTime\030\004 \003"
    "(\005\022\022\n\ncollectLst\030\005 \003(\005\022\032\n\013hasSendhero\030\006 "
    "\001(\010:\005false\022\016\n\006sendID\030\007 \003(\005\022\035\n\016hasCreditV"
    "isit\030\010 \001(\010:\005false\022$\n\013heroupgrade\030\t \003(\0132\017"
    ".DB_UpgradeHero\022\022\n\nheroAtkLst\030\n \003(\005\022\022\n\nh"
    "eroDefLst\030\013 \003(\005\022\023\n\013heroAutoLst\030\014 \003(\005\022\024\n\014"
    "heroarenaLst\030\r \003(\005\022\026\n\016nAtkPartnerNum\030\016 \001"
    "(\005\022\026\n\016nDefPartnerNum\030\017 \001(\005\022\027\n\017nAutoPartn"
    "erNum\030\020 \001(\005\"R\n\007DB_Flag\022\r\n\005music\030\001 \001(\005\022\016\n"
    "\006effect\030\002 \001(\005\022\017\n\007quality\030\003 \001(\005\022\027\n\017allian"
    "ceWelcome\030\004 \001(\005\"=\n\014DB_Storedata\022\014\n\004type\030"
    "\001 \001(\t\022\t\n\001q\030\002 \001(\005\022\t\n\001s\030\003 \001(\005\022\t\n\001e\030\004 \001(\005\"q"
    "\n\014DB_EnemyStar\022\017\n\007enemyID\030\001 \001(\003\022\021\n\tattac"
    "tCnt\030\002 \001(\003\022\023\n\013recoveryCnt\030\003 \001(\003\022\022\n\nattac"
    "ktime\030\004 \001(\005\022\024\n\tcountdown\030\005 \001(\005:\0010\"\204\001\n\016DB"
    "_GiftFrdInfo\022\020\n\010friendID\030\001 \001(\003\022\021\n\tfrdOpe"
    "nID\030\002 \001(\t\022\021\n\tmessageID\030\003 \001(\005\022\021\n\006giftID\030\004"
    " \001(\005:\0010\022\022\n\007getTime\030\005 \001(\003:\0010\022\023\n\010giftType\030"
    "\006 \001(\005:\0010\"G\n\023DB_NewComerGiftList\022\026\n\016newCo"
    "merGiftID\030\001 \001(\005\022\030\n\020newComerGiftGain\030\002 \001("
    "\005\"\351\002\n\013DB_GiftInfo\022\027\n\017daySendFrdIDLst\030\001 \003"
    "(\t\022\026\n\016dayAskFrdIDLst\030\002 \003(\t\022\031\n\021dayGetGift"
    "2BagCnt\030\003 \001(\005\022\031\n\021dayAskGift2BagCnt\030\004 \001(\005"
    "\022\025\n\rdayGetGiftCnt\030\005 \001(\005\022\030\n\020dayResendGift"
    "Cnt\030\006 \001(\005\022$\n\013getGiftInfo\030\007 \003(\0132\017.DB_Gift"
    "FrdInfo\022\'\n\016finishGiftInfo\030\010 \003(\0132\017.DB_Gif"
    "tFrdInfo\022\021\n\006msgIdx\030\t \001(\005:\0010\022\030\n\rlastLogin"
    "Time\030\n \001(\003:\0010\022\026\n\016daySendGiftCnt\030\013 \001(\005\022.\n"
    "\020newComerGiftList\030\014 \003(\0132\024.DB_NewComerGif"
    "tList\"B\n\rDB_DayAtkUser\022\027\n\014dayAtkUserID\030\001"
    " \001(\003:\0010\022\030\n\rdayAtkUserCnt\030\002 \001(\003:\0010\"\236\002\n\013DB"
    "_UserStar\022\017\n\007enemyID\030\001 \003(\003\022\021\n\tattactCnt\030"
    "\002 \003(\003\022\023\n\013recoveryCnt\030\003 \003(\003\022 \n\tEnemyList\030"
    "\004 \003(\0132\r.DB_EnemyStar\022\"\n\ndayAtkInfo\030\005 \003(\013"
    "2\016.DB_DayAtkUser\022!\n\026dayDestroySlaveRoomC"
    "nt\030\006 \001(\005:\0010\022\026\n\013dayAtkCount\030\007 \001(\005:\0010\022\026\n\013d"
    "ayDefCount\030\010 \001(\005:\0010\022\035\n\022sprweaponhurtednu"
    "m\030\t \001(\005:\0010\022\036\n\023sprweaponhurtedtime\030\n \001(\005:"
    "\0010\"u\n\026DB_DefenseActivityNode\022\025\n\nactivity"
    "id\030\001 \001(\005:\0010\022\026\n\013activitycut\030\002 \001(\005:\0010\022\021\n\ta"
    "wardlist\030\003 \003(\010\022\031\n\rlstcustomtime\030\004 \001(\005:\002-"
    "1\"A\n\022DB_DefenseActivity\022+\n\nactivities\030\001 "
    "\001(\0132\027.DB_DefenseActivityNode\"Q\n\017DB_Defen"
    "seHonor\022\035\n\022lastdefencehonorid\030\001 \001(\003:\0010\022\037"
    "\n\024gaindefencehornorcnt\030\002 \001(\005:\0010\"4\n\013DB_Bu"
    "ffUnit\022\020\n\010bufftype\030\001 \001(\005\022\023\n\013buffEndTime\030"
    "\002 \001(\r\"-\n\013DB_BuffData\022\036\n\010bufflist\030\001 \003(\0132\014"
    ".DB_BuffUnit\"\353\004\n\rDB_BagItemLog\022\022\n\007logTyp"
    "e\030\001 \001(\005:\0010\022\021\n\006itemID\030\002 \001(\005:\0010\022\020\n\005count\030\003"
    " \001(\005:\0010\022\017\n\004date\030\004 \001(\005:\0010\022\020\n\005medal\030\005 \001(\005:"
    "\0010\022\016\n\003oil\030\006 \001(\005:\0010\022\021\n\006credit\030\007 \001(\005:\0010\022\020\n"
    "\005honor\030\010 \001(\005:\0010\022\020\n\010itemType\030\t \003(\005\022\017\n\007ite"
    "mCnt\030\n \003(\005\022\020\n\010armyType\030\013 \003(\005\022\017\n\007armyCnt\030"
    "\014 \003(\005\022\020\n\010weaponID\030\r \003(\005\022\020\n\010emblemID\030\016 \003("
    "\005\022\021\n\tweaponCnt\030\017 \003(\005\022\021\n\temblemCnt\030\020 \003(\005\022"
    "\021\n\tadmiralID\030\021 \003(\005\022\022\n\nadmiralCnt\030\022 \003(\005\022\r"
    "\n\005feats\030\023 \001(\005\022\014\n\004thew\030\024 \001(\005\022\016\n\006morale\030\025 "
    "\001(\005\022\020\n\010zhangong\030\026 \001(\005\022\017\n\007equipID\030\027 \003(\005\022\020"
    "\n\010equipCnt\030\030 \003(\005\022\016\n\006gScore\030\031 \001(\005\022\023\n\013admi"
    "ralsoul\030\032 \001(\005\022\024\n\tcntrScore\030\033 \001(\005:\0010\022\027\n\017a"
    "dmiralLetterID\030\034 \003(\005\022\030\n\020admiralLetterCnt"
    "\030\035 \003(\005\022\024\n\014heroLetterID\030\036 \003(\005\022\025\n\rheroLett"
    "erCnt\030\037 \003(\005\022\025\n\rnMilitarySoul\030  \001(\005\")\n\006DB"
    "_Log\022\037\n\007itemLog\030\001 \003(\0132\016.DB_BagItemLog\"T\n"
    "\nDB_BagItem\022\021\n\006itemID\030\001 \001(\005:\0010\022\020\n\005count\030"
    "\002 \001(\005:\0010\022\r\n\002id\030\003 \001(\005:\0010\022\022\n\007getTime\030\004 \001(\005"
    ":\0010\"\255\001\n\006DB_Bag\022\034\n\007bagItem\030\001 \003(\0132\013.DB_Bag"
    "Item\022\027\n\014lastOpenTime\030\002 \001(\005:\0010\022\020\n\005bagLV\030\003"
    " \001(\005:\0010\022\024\n\tbagUseCnt\030\004 \001(\005:\0010\022\037\n\ntmpBagI"
    "tem\030\005 \003(\0132\013.DB_BagItem\022#\n\016virtualBagItem"
    "\030\006 \003(\0132\013.DB_BagItem\"\202\003\n\013DB_MoonCake\022\026\n\013m"
    "oonCakeCnt\030\001 \001(\005:\0010\022\024\n\tgoldLevel\030\002 \001(\005:\001"
    "0\022\026\n\013silverLevel\030\003 \001(\005:\0010\022\r\n\005frdID\030\004 \003(\003"
    "\022\023\n\013visitFrdCnt\030\005 \003(\005\022\027\n\014dayAccSucCnt\030\006 "
    "\001(\005:\0010\022\027\n\017getAccRewardCnt\030\007 \003(\005\022\030\n\rlastL"
    "oginTime\030\010 \001(\003:\0010\022\034\n\021accSucMoonCakeCnt\030\t"
    " \001(\005:\0010\022\034\n\021maxSucMoonCakeCnt\030\n \001(\005:\0010\022\025\n"
    "\nactiveFlag\030\013 \001(\005:\0010\022\031\n\016dayGetFlag1Cnt\030\014"
    " \001(\005:\0010\022\031\n\016accGetFlag1Cnt\030\r \001(\005:\0010\022\031\n\016ac"
    "cGetFlag2Cnt\030\016 \001(\005:\0010\022\031\n\016dayGetFlag2Cnt\030"
    "\017 \001(\005:\0010\"\227\003\n\016DB_HolidayDraw\022\025\n\nactiveFla"
    "g\030\001 \001(\005:\0010\022\024\n\tgoldLevel\030\002 \001(\005:\0010\022\026\n\013silv"
    "erLevel\030\003 \001(\005:\0010\022\r\n\005frdID\030\004 \003(\003\022\023\n\013visit"
    "FrdCnt\030\005 \003(\005\022\027\n\014dayAccSucCnt\030\006 \001(\005:\0010\022\027\n"
    "\017getAccRewardCnt\030\007 \003(\005\022\031\n\016dayGetFlag1Cnt"
    "\030\010 \001(\005:\0010\022\031\n\016accGetFlag1Cnt\030\t \001(\005:\0010\022\031\n\016"
    "accGetFlag2Cnt\030\n \001(\005:\0010\022\031\n\016dayGetFlag2Cn"
    "t\030\013 \001(\005:\0010\022\026\n\013lastGetTime\030\014 \001(\003:\0010\022\025\n\nda"
    "yFreeCnt\030\020 \001(\005:\0010\022\034\n\021dayCostCreditTime\030\021"
    " \001(\005:\0010\022\031\n\nhasGetRank\030\022 \001(\010:\005false\022\026\n\013da"
    "yAgainCnt\030\023 \001(\005:\0010\"\203\001\n\024DB_LeaveMessage_U"
    "nit\022\020\n\005nType\030\001 \001(\005:\0010\022\016\n\003nID\030\002 \001(\005:\0010\022\020\n"
    "\006strMsg\030\003 \001(\t:\000\022\022\n\007msgtime\030\004 \001(\r:\0010\022\021\n\007s"
    "trName\030\005 \001(\t:\000\022\020\n\006strUid\030\006 \001(\t:\000\"{\n\017DB_L"
    "eaveMessage\022\021\n\006nTimes\030\001 \001(\005:\0010\022\025\n\rviewta"
    "rgetuin\030\002 \001(\003\022\016\n\006bIsNew\030\003 \001(\010\022.\n\017leaveme"
    "ssagearr\030\004 \003(\0132\025.DB_LeaveMessage_Unit\"A\n"
    "\020DB_TXMissionData\022\023\n\tmissionid\030\001 \001(\t:\000\022\030"
    "\n\014missionstate\030\002 \001(\005:\002-1\";\n\020DB_ClientNum"
    "Stat\022\023\n\013dayStatType\030\002 \003(\005\022\022\n\ndayStatNum\030"
    "\003 \003(\005\"4\n\014DB_PokerInfo\022\017\n\007pokerNo\030\001 \001(\005\022\023"
    "\n\013pokerColour\030\002 \001(\005\"\200\001\n\020DB_CurrPokerInfo"
    "\022!\n\nuserPokers\030\001 \003(\0132\r.DB_PokerInfo\022 \n\tn"
    "pcPokers\030\002 \003(\0132\r.DB_PokerInfo\022\023\n\010userTyp"
    "e\030\003 \001(\005:\0010\022\022\n\007NPCType\030\004 \001(\005:\0010\"\220\002\n\021DB_Po"
    "kerExchanges\022\020\n\005gift0\030\001 \001(\005:\0010\022\020\n\005gift1\030"
    "\002 \001(\005:\0010\022\020\n\005gift2\030\003 \001(\005:\0010\022\020\n\005gift3\030\004 \001("
    "\005:\0010\022\020\n\005gift4\030\005 \001(\005:\0010\022\036\n\017isGetRarityGif"
    "t\030\006 \001(\010:\005false\022\023\n\010giftnum0\030\007 \001(\005:\0010\022\023\n\010g"
    "iftnum1\030\010 \001(\005:\0010\022\023\n\010giftnum2\030\t \001(\005:\0010\022\023\n"
    "\010giftnum3\030\n \001(\005:\0010\022\023\n\010giftnum4\030\013 \001(\005:\0010\022"
    "\030\n\rrefreshExcCnt\030\014 \001(\005:\0010\"b\n\026DB_WorldCup"
    "Predictions\022\024\n\005isBet\030\001 \001(\010:\005false\022\036\n\007bet"
    "Info\030\002 \003(\0132\r.DB_WCBetInfo\022\022\n\007nReward\030\003 \001"
    "(\005:\0010\"Y\n\014DB_WCBetInfo\022\020\n\005nType\030\001 \001(\005:\0010\022"
    "\025\n\nnJettonNum\030\002 \001(\005:\0010\022\020\n\005nOdds\030\003 \001(\005:\0010"
    "\022\016\n\006teamID\030\004 \003(\005\"\247\001\n\017DB_CardDuelInfo\022\025\n\n"
    "myCardType\030\001 \001(\005:\0010\022\020\n\005oppID\030\002 \001(\003:\0010\022\023\n"
    "\004bNpc\030\003 \001(\010:\005false\022\021\n\006winNum\030\004 \001(\005:\0010\022\025\n"
    "\006bMatch\030\005 \001(\010:\005false\022\026\n\013addupCredit\030\006 \001("
    "\005:\0010\022\024\n\tmaxwinNum\030\007 \001(\005:\0010\"i\n\021DB_MiddleY"
    "earGift\022\024\n\tfirstGift\030\001 \001(\005:\0010\022\023\n\010secdGif"
    "t\030\002 \001(\005:\0010\022\027\n\014nTotalCredit\030\003 \001(\005:\0010\022\020\n\005n"
    "Flag\030\004 \001(\005:\0010\"G\n\016DB_OpenSNSGift\022\021\n\005nType"
    "\030\001 \001(\005:\002-1\022\020\n\005nFlag\030\002 \001(\005:\0010\022\020\n\005nTime\030\003 "
    "\001(\003:\0010\"\'\n\021DB_CallBackFriend\022\022\n\nfrdplatid"
    "s\030\001 \003(\t\",\n\016DB_AttackCount\022\013\n\003uid\030\001 \002(\003\022\r"
    "\n\005count\030\002 \001(\005\"\267\002\n\nDB_Science\022\033\n\020recruitl"
    "andlevel\030\001 \001(\005:\0010\022\032\n\017recruitairlevel\030\002 \001"
    "(\005:\0010\022\032\n\017attacklandlevel\030\003 \001(\005:\0010\022\032\n\017ext"
    "rahonorlevel\030\004 \001(\005:\0010\022\027\n\014exttimelevel\030\005 "
    "\001(\005:\0010\022\027\n\014redtimelevel\030\006 \001(\005:\0010\022\021\n\006extre"
    "s\030\007 \001(\005:\0010\022\021\n\006redres\030\010 \001(\005:\0010\022\025\n\naddbuil"
    "dhp\030\t \001(\005:\0010\022\027\n\014addgunattack\030\n \001(\005:\0010\022\030\n"
    "\raddmissileatk\030\013 \001(\005:\0010\022\026\n\013minewarfare\030\014"
    " \001(\005:\0010\"\034\n\tDB_Effect\022\017\n\007effects\030\002 \003(\t\"\202\001"
    "\n\nDB_Officer\022\032\n\017officerPosition\030\001 \001(\005:\0010"
    "\022\036\n\023officerRightUseFlag\030\002 \001(\005:\0010\022!\n\026offi"
    "cerRightEffectFlag\030\003 \001(\005:\0010\022\025\n\nupdateTim"
    "e\030\004 \001(\005:\0010\"\202\001\n\nDB_WpcRank\022\022\n\007rightID\030\001 \001"
    "(\005:\0010\022\025\n\nupdateTime\030\002 \001(\005:\0010\022\025\n\nsearchTi"
    "me\030\003 \001(\005:\0010\022\023\n\010activeID\030\004 \001(\005:\0010\022\035\n\022over"
    "TimeSearchTime\030\005 \001(\005:\0010\"U\n\014DB_LeagueBtl\022"
    "\023\n\010activeID\030\001 \001(\005:\0010\022\026\n\013leaguePoint\030\002 \001("
    "\005:\0010\022\030\n\trewardGet\030\003 \001(\010:\005false\"D\n\020DB_Hap"
    "pylibAward\022\r\n\005times\030\001 \001(\005\022\017\n\007awardid\030\002 \003"
    "(\005\022\020\n\010awardnum\030\003 \003(\005\"f\n\013DB_HappyLib\022\021\n\ta"
    "ctiveend\030\001 \001(\005\022\r\n\005times\030\002 \001(\005\022\023\n\010getawar"
    "d\030\003 \001(\005:\0010\022 \n\005award\030\004 \003(\0132\021.DB_HappylibA"
    "ward\"\220\001\n\rDB_BossBtlMsg\022\027\n\014nBossBtlFlag\030\001"
    " \001(\005:\0010\022\023\n\010totalDmg\030\002 \001(\003:\0010\022\027\n\017honorEmb"
    "raveCnt\030\003 \001(\005\022\021\n\taddAtkPct\030\004 \001(\005\022\025\n\rhasP"
    "ickReward\030\005 \001(\005\022\016\n\006upList\030\006 \003(\010\"\232\001\n\021DB_M"
    "edalHonorInfo\022\027\n\013freeCastNum\030\001 \001(\005:\00250\022\024"
    "\n\tnTokenNum\030\002 \001(\005:\0010\022\027\n\014decorateType\030\003 \001"
    "(\005:\0010\022\025\n\rhallHonorList\030\004 \003(\005\022&\n\016medalHon"
    "orList\030\005 \003(\0132\016.DB_MedalHonor\"\233\001\n\rDB_Meda"
    "lHonor\022\016\n\003nID\030\001 \001(\005:\0010\022\027\n\014medalHonorID\030\002"
    " \001(\005:\0010\022\017\n\004nExp\030\003 \001(\005:\0010\022\016\n\003nLV\030\004 \001(\005:\0010"
    "\022\023\n\010nBagType\030\005 \001(\005:\0010\022\025\n\nnAdmiralID\030\006 \001("
    "\005:\0010\022\024\n\005bLock\030\007 \001(\010:\005false", 15666);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "dbinterface_sub.proto", &protobuf_RegisterTypes);
  DB_UserLiteBase::default_instance_ = new DB_UserLiteBase();
  DB_CityUserLite::default_instance_ = new DB_CityUserLite();
  DB_RegionCityUserLite::default_instance_ = new DB_RegionCityUserLite();
  DB_GuildUserLite::default_instance_ = new DB_GuildUserLite();
  DB_StarUserLite::default_instance_ = new DB_StarUserLite();
  DB_UserLite::default_instance_ = new DB_UserLite();
  DB_Star::default_instance_ = new DB_Star();
  DB_BitCache::default_instance_ = new DB_BitCache();
  DB_BanLogin::default_instance_ = new DB_BanLogin();
  DB_QuestRule::default_instance_ = new DB_QuestRule();
  DB_Quest::default_instance_ = new DB_Quest();
  DB_AiAttackQueuedArmyInfo::default_instance_ = new DB_AiAttackQueuedArmyInfo();
  DB_AiAttackQueued::default_instance_ = new DB_AiAttackQueued();
  DB_AiAttack::default_instance_ = new DB_AiAttack();
  DB_Troop::default_instance_ = new DB_Troop();
  DB_TrapArmy::default_instance_ = new DB_TrapArmy();
  DB_Trap::default_instance_ = new DB_Trap();
  DB_Loot::default_instance_ = new DB_Loot();
  DB_LootEquip::default_instance_ = new DB_LootEquip();
  DB_LootSuperWeapon::default_instance_ = new DB_LootSuperWeapon();
  DB_LootReport::default_instance_ = new DB_LootReport();
  DB_Mushroom::default_instance_ = new DB_Mushroom();
  DB_Stats::default_instance_ = new DB_Stats();
  DB_UpgradeArmy::default_instance_ = new DB_UpgradeArmy();
  DB_UnlockArmy::default_instance_ = new DB_UnlockArmy();
  DB_Academy::default_instance_ = new DB_Academy();
  DB_Monsterbaiter::default_instance_ = new DB_Monsterbaiter();
  DB_Locker::default_instance_ = new DB_Locker();
  DB_Army::default_instance_ = new DB_Army();
  DB_Book::default_instance_ = new DB_Book();
  DB_Emblem::default_instance_ = new DB_Emblem();
  DB_EmblemNew::default_instance_ = new DB_EmblemNew();
  DB_WeaponCom::default_instance_ = new DB_WeaponCom();
  DB_WeaponCenter::default_instance_ = new DB_WeaponCenter();
  DB_Jammer::default_instance_ = new DB_Jammer();
  DB_WeaponExtraWpcInfo::default_instance_ = new DB_WeaponExtraWpcInfo();
  DB_WeaponExtraEmblemInfo::default_instance_ = new DB_WeaponExtraEmblemInfo();
  DB_CaptureBase::default_instance_ = new DB_CaptureBase();
  DB_SlaveRoom::default_instance_ = new DB_SlaveRoom();
  DB_NPCActive::default_instance_ = new DB_NPCActive();
  DB_BaseDefNPC::default_instance_ = new DB_BaseDefNPC();
  DB_AdmiralSkill::default_instance_ = new DB_AdmiralSkill();
  DB_AdmiralSkillData::default_instance_ = new DB_AdmiralSkillData();
  DB_AdmiralTrainLV::default_instance_ = new DB_AdmiralTrainLV();
  DB_AdmiralLetter::default_instance_ = new DB_AdmiralLetter();
  DB_AdmiralEquip::default_instance_ = new DB_AdmiralEquip();
  DB_Admiral::default_instance_ = new DB_Admiral();
  DB_AdmiralInfo::default_instance_ = new DB_AdmiralInfo();
  DB_HeroLetter::default_instance_ = new DB_HeroLetter();
  DB_HeroSkillData::default_instance_ = new DB_HeroSkillData();
  DB_HeroAtkData::default_instance_ = new DB_HeroAtkData();
  DB_Hero::default_instance_ = new DB_Hero();
  DB_UpgradeHero::default_instance_ = new DB_UpgradeHero();
  DB_HeroInfo::default_instance_ = new DB_HeroInfo();
  DB_Flag::default_instance_ = new DB_Flag();
  DB_Storedata::default_instance_ = new DB_Storedata();
  DB_EnemyStar::default_instance_ = new DB_EnemyStar();
  DB_GiftFrdInfo::default_instance_ = new DB_GiftFrdInfo();
  DB_NewComerGiftList::default_instance_ = new DB_NewComerGiftList();
  DB_GiftInfo::default_instance_ = new DB_GiftInfo();
  DB_DayAtkUser::default_instance_ = new DB_DayAtkUser();
  DB_UserStar::default_instance_ = new DB_UserStar();
  DB_DefenseActivityNode::default_instance_ = new DB_DefenseActivityNode();
  DB_DefenseActivity::default_instance_ = new DB_DefenseActivity();
  DB_DefenseHonor::default_instance_ = new DB_DefenseHonor();
  DB_BuffUnit::default_instance_ = new DB_BuffUnit();
  DB_BuffData::default_instance_ = new DB_BuffData();
  DB_BagItemLog::default_instance_ = new DB_BagItemLog();
  DB_Log::default_instance_ = new DB_Log();
  DB_BagItem::default_instance_ = new DB_BagItem();
  DB_Bag::default_instance_ = new DB_Bag();
  DB_MoonCake::default_instance_ = new DB_MoonCake();
  DB_HolidayDraw::default_instance_ = new DB_HolidayDraw();
  DB_LeaveMessage_Unit::default_instance_ = new DB_LeaveMessage_Unit();
  DB_LeaveMessage::default_instance_ = new DB_LeaveMessage();
  DB_TXMissionData::default_instance_ = new DB_TXMissionData();
  DB_ClientNumStat::default_instance_ = new DB_ClientNumStat();
  DB_PokerInfo::default_instance_ = new DB_PokerInfo();
  DB_CurrPokerInfo::default_instance_ = new DB_CurrPokerInfo();
  DB_PokerExchanges::default_instance_ = new DB_PokerExchanges();
  DB_WorldCupPredictions::default_instance_ = new DB_WorldCupPredictions();
  DB_WCBetInfo::default_instance_ = new DB_WCBetInfo();
  DB_CardDuelInfo::default_instance_ = new DB_CardDuelInfo();
  DB_MiddleYearGift::default_instance_ = new DB_MiddleYearGift();
  DB_OpenSNSGift::default_instance_ = new DB_OpenSNSGift();
  DB_CallBackFriend::default_instance_ = new DB_CallBackFriend();
  DB_AttackCount::default_instance_ = new DB_AttackCount();
  DB_Science::default_instance_ = new DB_Science();
  DB_Effect::default_instance_ = new DB_Effect();
  DB_Officer::default_instance_ = new DB_Officer();
  DB_WpcRank::default_instance_ = new DB_WpcRank();
  DB_LeagueBtl::default_instance_ = new DB_LeagueBtl();
  DB_HappylibAward::default_instance_ = new DB_HappylibAward();
  DB_HappyLib::default_instance_ = new DB_HappyLib();
  DB_BossBtlMsg::default_instance_ = new DB_BossBtlMsg();
  DB_MedalHonorInfo::default_instance_ = new DB_MedalHonorInfo();
  DB_MedalHonor::default_instance_ = new DB_MedalHonor();
  DB_UserLiteBase::default_instance_->InitAsDefaultInstance();
  DB_CityUserLite::default_instance_->InitAsDefaultInstance();
  DB_RegionCityUserLite::default_instance_->InitAsDefaultInstance();
  DB_GuildUserLite::default_instance_->InitAsDefaultInstance();
  DB_StarUserLite::default_instance_->InitAsDefaultInstance();
  DB_UserLite::default_instance_->InitAsDefaultInstance();
  DB_Star::default_instance_->InitAsDefaultInstance();
  DB_BitCache::default_instance_->InitAsDefaultInstance();
  DB_BanLogin::default_instance_->InitAsDefaultInstance();
  DB_QuestRule::default_instance_->InitAsDefaultInstance();
  DB_Quest::default_instance_->InitAsDefaultInstance();
  DB_AiAttackQueuedArmyInfo::default_instance_->InitAsDefaultInstance();
  DB_AiAttackQueued::default_instance_->InitAsDefaultInstance();
  DB_AiAttack::default_instance_->InitAsDefaultInstance();
  DB_Troop::default_instance_->InitAsDefaultInstance();
  DB_TrapArmy::default_instance_->InitAsDefaultInstance();
  DB_Trap::default_instance_->InitAsDefaultInstance();
  DB_Loot::default_instance_->InitAsDefaultInstance();
  DB_LootEquip::default_instance_->InitAsDefaultInstance();
  DB_LootSuperWeapon::default_instance_->InitAsDefaultInstance();
  DB_LootReport::default_instance_->InitAsDefaultInstance();
  DB_Mushroom::default_instance_->InitAsDefaultInstance();
  DB_Stats::default_instance_->InitAsDefaultInstance();
  DB_UpgradeArmy::default_instance_->InitAsDefaultInstance();
  DB_UnlockArmy::default_instance_->InitAsDefaultInstance();
  DB_Academy::default_instance_->InitAsDefaultInstance();
  DB_Monsterbaiter::default_instance_->InitAsDefaultInstance();
  DB_Locker::default_instance_->InitAsDefaultInstance();
  DB_Army::default_instance_->InitAsDefaultInstance();
  DB_Book::default_instance_->InitAsDefaultInstance();
  DB_Emblem::default_instance_->InitAsDefaultInstance();
  DB_EmblemNew::default_instance_->InitAsDefaultInstance();
  DB_WeaponCom::default_instance_->InitAsDefaultInstance();
  DB_WeaponCenter::default_instance_->InitAsDefaultInstance();
  DB_Jammer::default_instance_->InitAsDefaultInstance();
  DB_WeaponExtraWpcInfo::default_instance_->InitAsDefaultInstance();
  DB_WeaponExtraEmblemInfo::default_instance_->InitAsDefaultInstance();
  DB_CaptureBase::default_instance_->InitAsDefaultInstance();
  DB_SlaveRoom::default_instance_->InitAsDefaultInstance();
  DB_NPCActive::default_instance_->InitAsDefaultInstance();
  DB_BaseDefNPC::default_instance_->InitAsDefaultInstance();
  DB_AdmiralSkill::default_instance_->InitAsDefaultInstance();
  DB_AdmiralSkillData::default_instance_->InitAsDefaultInstance();
  DB_AdmiralTrainLV::default_instance_->InitAsDefaultInstance();
  DB_AdmiralLetter::default_instance_->InitAsDefaultInstance();
  DB_AdmiralEquip::default_instance_->InitAsDefaultInstance();
  DB_Admiral::default_instance_->InitAsDefaultInstance();
  DB_AdmiralInfo::default_instance_->InitAsDefaultInstance();
  DB_HeroLetter::default_instance_->InitAsDefaultInstance();
  DB_HeroSkillData::default_instance_->InitAsDefaultInstance();
  DB_HeroAtkData::default_instance_->InitAsDefaultInstance();
  DB_Hero::default_instance_->InitAsDefaultInstance();
  DB_UpgradeHero::default_instance_->InitAsDefaultInstance();
  DB_HeroInfo::default_instance_->InitAsDefaultInstance();
  DB_Flag::default_instance_->InitAsDefaultInstance();
  DB_Storedata::default_instance_->InitAsDefaultInstance();
  DB_EnemyStar::default_instance_->InitAsDefaultInstance();
  DB_GiftFrdInfo::default_instance_->InitAsDefaultInstance();
  DB_NewComerGiftList::default_instance_->InitAsDefaultInstance();
  DB_GiftInfo::default_instance_->InitAsDefaultInstance();
  DB_DayAtkUser::default_instance_->InitAsDefaultInstance();
  DB_UserStar::default_instance_->InitAsDefaultInstance();
  DB_DefenseActivityNode::default_instance_->InitAsDefaultInstance();
  DB_DefenseActivity::default_instance_->InitAsDefaultInstance();
  DB_DefenseHonor::default_instance_->InitAsDefaultInstance();
  DB_BuffUnit::default_instance_->InitAsDefaultInstance();
  DB_BuffData::default_instance_->InitAsDefaultInstance();
  DB_BagItemLog::default_instance_->InitAsDefaultInstance();
  DB_Log::default_instance_->InitAsDefaultInstance();
  DB_BagItem::default_instance_->InitAsDefaultInstance();
  DB_Bag::default_instance_->InitAsDefaultInstance();
  DB_MoonCake::default_instance_->InitAsDefaultInstance();
  DB_HolidayDraw::default_instance_->InitAsDefaultInstance();
  DB_LeaveMessage_Unit::default_instance_->InitAsDefaultInstance();
  DB_LeaveMessage::default_instance_->InitAsDefaultInstance();
  DB_TXMissionData::default_instance_->InitAsDefaultInstance();
  DB_ClientNumStat::default_instance_->InitAsDefaultInstance();
  DB_PokerInfo::default_instance_->InitAsDefaultInstance();
  DB_CurrPokerInfo::default_instance_->InitAsDefaultInstance();
  DB_PokerExchanges::default_instance_->InitAsDefaultInstance();
  DB_WorldCupPredictions::default_instance_->InitAsDefaultInstance();
  DB_WCBetInfo::default_instance_->InitAsDefaultInstance();
  DB_CardDuelInfo::default_instance_->InitAsDefaultInstance();
  DB_MiddleYearGift::default_instance_->InitAsDefaultInstance();
  DB_OpenSNSGift::default_instance_->InitAsDefaultInstance();
  DB_CallBackFriend::default_instance_->InitAsDefaultInstance();
  DB_AttackCount::default_instance_->InitAsDefaultInstance();
  DB_Science::default_instance_->InitAsDefaultInstance();
  DB_Effect::default_instance_->InitAsDefaultInstance();
  DB_Officer::default_instance_->InitAsDefaultInstance();
  DB_WpcRank::default_instance_->InitAsDefaultInstance();
  DB_LeagueBtl::default_instance_->InitAsDefaultInstance();
  DB_HappylibAward::default_instance_->InitAsDefaultInstance();
  DB_HappyLib::default_instance_->InitAsDefaultInstance();
  DB_BossBtlMsg::default_instance_->InitAsDefaultInstance();
  DB_MedalHonorInfo::default_instance_->InitAsDefaultInstance();
  DB_MedalHonor::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_dbinterface_5fsub_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_dbinterface_5fsub_2eproto {
  StaticDescriptorInitializer_dbinterface_5fsub_2eproto() {
    protobuf_AddDesc_dbinterface_5fsub_2eproto();
  }
} static_descriptor_initializer_dbinterface_5fsub_2eproto_;


// ===================================================================

const ::std::string DB_UserLiteBase::_default_userid_;
#ifndef _MSC_VER
const int DB_UserLiteBase::kUseridFieldNumber;
const int DB_UserLiteBase::kNameFieldNumber;
const int DB_UserLiteBase::kPicFieldNumber;
const int DB_UserLiteBase::kLevelFieldNumber;
const int DB_UserLiteBase::kCombatValueFieldNumber;
const int DB_UserLiteBase::kOnlineFieldNumber;
const int DB_UserLiteBase::kSavetimeFieldNumber;
const int DB_UserLiteBase::kNIntegralScoreFieldNumber;
const int DB_UserLiteBase::kCountryIDFieldNumber;
const int DB_UserLiteBase::kLastLogonTmFieldNumber;
const int DB_UserLiteBase::kOfficerPositionFieldNumber;
const int DB_UserLiteBase::kArenaRankFieldNumber;
const int DB_UserLiteBase::kVipLevelFieldNumber;
const int DB_UserLiteBase::kVipTypeFieldNumber;
const int DB_UserLiteBase::kHeroarenacombatFieldNumber;
#endif  // !_MSC_VER

DB_UserLiteBase::DB_UserLiteBase() {
  SharedCtor();
}

void DB_UserLiteBase::InitAsDefaultInstance() {
}

DB_UserLiteBase::DB_UserLiteBase(const DB_UserLiteBase& from) {
  SharedCtor();
  MergeFrom(from);
}

void DB_UserLiteBase::SharedCtor() {
  _cached_size_ = 0;
  userid_ = const_cast< ::std::string*>(&_default_userid_);
  level_ = 0;
  combatvalue_ = 0u;
  online_ = false;
  savetime_ = 0;
  nintegralscore_ = 0u;
  countryid_ = 0;
  lastlogontm_ = 0;
  officerposition_ = 0;
  arenarank_ = 0;
  viplevel_ = 0;
  viptype_ = 0;
  heroarenacombat_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DB_UserLiteBase::~DB_UserLiteBase() {
  SharedDtor();
}

void DB_UserLiteBase::SharedDtor() {
  if (userid_ != &_default_userid_) {
    delete userid_;
  }
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* DB_UserLiteBase::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DB_UserLiteBase_descriptor_;
}

const DB_UserLiteBase& DB_UserLiteBase::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dbinterface_5fsub_2eproto();  return *default_instance_;
}

DB_UserLiteBase* DB_UserLiteBase::default_instance_ = NULL;

DB_UserLiteBase* DB_UserLiteBase::New() const {
  return new DB_UserLiteBase;
}

void DB_UserLiteBase::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (userid_ != &_default_userid_) {
        userid_->clear();
      }
    }
    level_ = 0;
    combatvalue_ = 0u;
    online_ = false;
    savetime_ = 0;
    nintegralscore_ = 0u;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    countryid_ = 0;
    lastlogontm_ = 0;
    officerposition_ = 0;
    arenarank_ = 0;
    viplevel_ = 0;
    viptype_ = 0;
    heroarenacombat_ = 0;
  }
  name_.Clear();
  pic_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DB_UserLiteBase::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string userid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadString(
              input, this->mutable_userid()));
        ::google::protobuf::internal::WireFormat::VerifyUTF8String(
          this->userid().data(), this->userid().length(),
          ::google::protobuf::internal::WireFormat::PARSE);
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }
      
      // repeated string name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_name:
        DO_(::google::protobuf::internal::WireFormatLite::ReadString(
              input, this->add_name()));
        ::google::protobuf::internal::WireFormat::VerifyUTF8String(
          this->name(0).data(), this->name(0).length(),
          ::google::protobuf::internal::WireFormat::PARSE);
        if (input->ExpectTag(18)) goto parse_name;
        if (input->ExpectTag(26)) goto parse_pic;
        break;
      }
      
      // repeated string pic = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_pic:
        DO_(::google::protobuf::internal::WireFormatLite::ReadString(
              input, this->add_pic()));
        ::google::protobuf::internal::WireFormat::VerifyUTF8String(
          this->pic(0).data(), this->pic(0).length(),
          ::google::protobuf::internal::WireFormat::PARSE);
        if (input->ExpectTag(26)) goto parse_pic;
        if (input->ExpectTag(32)) goto parse_level;
        break;
      }
      
      // optional int32 level = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_level:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &level_));
        _set_bit(3);
        if (input->ExpectTag(40)) goto parse_combatValue;
        break;
      }
      
      // optional uint32 combatValue = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_combatValue:
        DO_(::google::protobuf::internal::WireFormatLite::ReadUInt32(
              input, &combatvalue_));
        _set_bit(4);
        if (input->ExpectTag(48)) goto parse_online;
        break;
      }
      
      // optional bool online = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_online:
        DO_(::google::protobuf::internal::WireFormatLite::ReadBool(
              input, &online_));
        _set_bit(5);
        if (input->ExpectTag(56)) goto parse_savetime;
        break;
      }
      
      // optional int32 savetime = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_savetime:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &savetime_));
        _set_bit(6);
        if (input->ExpectTag(64)) goto parse_nIntegralScore;
        break;
      }
      
      // optional uint32 nIntegralScore = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_nIntegralScore:
        DO_(::google::protobuf::internal::WireFormatLite::ReadUInt32(
              input, &nintegralscore_));
        _set_bit(7);
        if (input->ExpectTag(72)) goto parse_countryID;
        break;
      }
      
      // optional int32 countryID = 9 [default = 0];
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_countryID:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &countryid_));
        _set_bit(8);
        if (input->ExpectTag(80)) goto parse_lastLogonTm;
        break;
      }
      
      // optional int32 lastLogonTm = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_lastLogonTm:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &lastlogontm_));
        _set_bit(9);
        if (input->ExpectTag(88)) goto parse_officerPosition;
        break;
      }
      
      // optional int32 officerPosition = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_officerPosition:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &officerposition_));
        _set_bit(10);
        if (input->ExpectTag(96)) goto parse_arenaRank;
        break;
      }
      
      // optional int32 arenaRank = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_arenaRank:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &arenarank_));
        _set_bit(11);
        if (input->ExpectTag(104)) goto parse_vipLevel;
        break;
      }
      
      // optional int32 vipLevel = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_vipLevel:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &viplevel_));
        _set_bit(12);
        if (input->ExpectTag(112)) goto parse_vipType;
        break;
      }
      
      // optional int32 vipType = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_vipType:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &viptype_));
        _set_bit(13);
        if (input->ExpectTag(120)) goto parse_heroarenacombat;
        break;
      }
      
      // optional int32 heroarenacombat = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_heroarenacombat:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &heroarenacombat_));
        _set_bit(14);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DB_UserLiteBase::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    DB_UserLiteBase::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional string userid = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->userid().data(), this->userid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->userid(), output);
  }
  
  // repeated string name = 2;
  for (int i = 0; i < this->name_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->name(i).data(), this->name(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->name(i), output);
  }
  
  // repeated string pic = 3;
  for (int i = 0; i < this->pic_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->pic(i).data(), this->pic(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->pic(i), output);
  }
  
  // optional int32 level = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->level(), output);
  }
  
  // optional uint32 combatValue = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->combatvalue(), output);
  }
  
  // optional bool online = 6;
  if (_has_bit(5)) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->online(), output);
  }
  
  // optional int32 savetime = 7;
  if (_has_bit(6)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->savetime(), output);
  }
  
  // optional uint32 nIntegralScore = 8;
  if (_has_bit(7)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->nintegralscore(), output);
  }
  
  // optional int32 countryID = 9 [default = 0];
  if (_has_bit(8)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->countryid(), output);
  }
  
  // optional int32 lastLogonTm = 10;
  if (_has_bit(9)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->lastlogontm(), output);
  }
  
  // optional int32 officerPosition = 11;
  if (_has_bit(10)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->officerposition(), output);
  }
  
  // optional int32 arenaRank = 12;
  if (_has_bit(11)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->arenarank(), output);
  }
  
  // optional int32 vipLevel = 13;
  if (_has_bit(12)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->viplevel(), output);
  }
  
  // optional int32 vipType = 14;
  if (_has_bit(13)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->viptype(), output);
  }
  
  // optional int32 heroarenacombat = 15;
  if (_has_bit(14)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(15, this->heroarenacombat(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DB_UserLiteBase::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string userid = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->userid().data(), this->userid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->userid(), target);
  }
  
  // repeated string name = 2;
  for (int i = 0; i < this->name_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name(i).data(), this->name(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(2, this->name(i), target);
  }
  
  // repeated string pic = 3;
  for (int i = 0; i < this->pic_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->pic(i).data(), this->pic(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(3, this->pic(i), target);
  }
  
  // optional int32 level = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->level(), target);
  }
  
  // optional uint32 combatValue = 5;
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->combatvalue(), target);
  }
  
  // optional bool online = 6;
  if (_has_bit(5)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->online(), target);
  }
  
  // optional int32 savetime = 7;
  if (_has_bit(6)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->savetime(), target);
  }
  
  // optional uint32 nIntegralScore = 8;
  if (_has_bit(7)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->nintegralscore(), target);
  }
  
  // optional int32 countryID = 9 [default = 0];
  if (_has_bit(8)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->countryid(), target);
  }
  
  // optional int32 lastLogonTm = 10;
  if (_has_bit(9)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->lastlogontm(), target);
  }
  
  // optional int32 officerPosition = 11;
  if (_has_bit(10)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->officerposition(), target);
  }
  
  // optional int32 arenaRank = 12;
  if (_has_bit(11)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->arenarank(), target);
  }
  
  // optional int32 vipLevel = 13;
  if (_has_bit(12)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->viplevel(), target);
  }
  
  // optional int32 vipType = 14;
  if (_has_bit(13)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(14, this->viptype(), target);
  }
  
  // optional int32 heroarenacombat = 15;
  if (_has_bit(14)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(15, this->heroarenacombat(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DB_UserLiteBase::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string userid = 1;
    if (has_userid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->userid());
    }
    
    // optional int32 level = 4;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->level());
    }
    
    // optional uint32 combatValue = 5;
    if (has_combatvalue()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->combatvalue());
    }
    
    // optional bool online = 6;
    if (has_online()) {
      total_size += 1 + 1;
    }
    
    // optional int32 savetime = 7;
    if (has_savetime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->savetime());
    }
    
    // optional uint32 nIntegralScore = 8;
    if (has_nintegralscore()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->nintegralscore());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 countryID = 9 [default = 0];
    if (has_countryid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->countryid());
    }
    
    // optional int32 lastLogonTm = 10;
    if (has_lastlogontm()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->lastlogontm());
    }
    
    // optional int32 officerPosition = 11;
    if (has_officerposition()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->officerposition());
    }
    
    // optional int32 arenaRank = 12;
    if (has_arenarank()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->arenarank());
    }
    
    // optional int32 vipLevel = 13;
    if (has_viplevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->viplevel());
    }
    
    // optional int32 vipType = 14;
    if (has_viptype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->viptype());
    }
    
    // optional int32 heroarenacombat = 15;
    if (has_heroarenacombat()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->heroarenacombat());
    }
    
  }
  // repeated string name = 2;
  total_size += 1 * this->name_size();
  for (int i = 0; i < this->name_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->name(i));
  }
  
  // repeated string pic = 3;
  total_size += 1 * this->pic_size();
  for (int i = 0; i < this->pic_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->pic(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void DB_UserLiteBase::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DB_UserLiteBase* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DB_UserLiteBase*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DB_UserLiteBase::MergeFrom(const DB_UserLiteBase& from) {
  GOOGLE_CHECK_NE(&from, this);
  name_.MergeFrom(from.name_);
  pic_.MergeFrom(from.pic_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_userid(from.userid());
    }
    if (from._has_bit(3)) {
      set_level(from.level());
    }
    if (from._has_bit(4)) {
      set_combatvalue(from.combatvalue());
    }
    if (from._has_bit(5)) {
      set_online(from.online());
    }
    if (from._has_bit(6)) {
      set_savetime(from.savetime());
    }
    if (from._has_bit(7)) {
      set_nintegralscore(from.nintegralscore());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from._has_bit(8)) {
      set_countryid(from.countryid());
    }
    if (from._has_bit(9)) {
      set_lastlogontm(from.lastlogontm());
    }
    if (from._has_bit(10)) {
      set_officerposition(from.officerposition());
    }
    if (from._has_bit(11)) {
      set_arenarank(from.arenarank());
    }
    if (from._has_bit(12)) {
      set_viplevel(from.viplevel());
    }
    if (from._has_bit(13)) {
      set_viptype(from.viptype());
    }
    if (from._has_bit(14)) {
      set_heroarenacombat(from.heroarenacombat());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DB_UserLiteBase::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DB_UserLiteBase::CopyFrom(const DB_UserLiteBase& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DB_UserLiteBase::IsInitialized() const {
  
  return true;
}

void DB_UserLiteBase::Swap(DB_UserLiteBase* other) {
  if (other != this) {
    std::swap(userid_, other->userid_);
    name_.Swap(&other->name_);
    pic_.Swap(&other->pic_);
    std::swap(level_, other->level_);
    std::swap(combatvalue_, other->combatvalue_);
    std::swap(online_, other->online_);
    std::swap(savetime_, other->savetime_);
    std::swap(nintegralscore_, other->nintegralscore_);
    std::swap(countryid_, other->countryid_);
    std::swap(lastlogontm_, other->lastlogontm_);
    std::swap(officerposition_, other->officerposition_);
    std::swap(arenarank_, other->arenarank_);
    std::swap(viplevel_, other->viplevel_);
    std::swap(viptype_, other->viptype_);
    std::swap(heroarenacombat_, other->heroarenacombat_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DB_UserLiteBase::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DB_UserLiteBase_descriptor_;
  metadata.reflection = DB_UserLiteBase_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DB_CityUserLite::kMoraleFieldNumber;
#endif  // !_MSC_VER

DB_CityUserLite::DB_CityUserLite() {
  SharedCtor();
}

void DB_CityUserLite::InitAsDefaultInstance() {
}

DB_CityUserLite::DB_CityUserLite(const DB_CityUserLite& from) {
  SharedCtor();
  MergeFrom(from);
}

void DB_CityUserLite::SharedCtor() {
  _cached_size_ = 0;
  morale_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DB_CityUserLite::~DB_CityUserLite() {
  SharedDtor();
}

void DB_CityUserLite::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* DB_CityUserLite::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DB_CityUserLite_descriptor_;
}

const DB_CityUserLite& DB_CityUserLite::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dbinterface_5fsub_2eproto();  return *default_instance_;
}

DB_CityUserLite* DB_CityUserLite::default_instance_ = NULL;

DB_CityUserLite* DB_CityUserLite::New() const {
  return new DB_CityUserLite;
}

void DB_CityUserLite::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    morale_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DB_CityUserLite::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 morale = 1 [default = 0];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &morale_));
        _set_bit(0);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DB_CityUserLite::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    DB_CityUserLite::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional int32 morale = 1 [default = 0];
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->morale(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DB_CityUserLite::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 morale = 1 [default = 0];
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->morale(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DB_CityUserLite::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 morale = 1 [default = 0];
    if (has_morale()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->morale());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void DB_CityUserLite::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DB_CityUserLite* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DB_CityUserLite*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DB_CityUserLite::MergeFrom(const DB_CityUserLite& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_morale(from.morale());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DB_CityUserLite::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DB_CityUserLite::CopyFrom(const DB_CityUserLite& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DB_CityUserLite::IsInitialized() const {
  
  return true;
}

void DB_CityUserLite::Swap(DB_CityUserLite* other) {
  if (other != this) {
    std::swap(morale_, other->morale_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DB_CityUserLite::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DB_CityUserLite_descriptor_;
  metadata.reflection = DB_CityUserLite_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DB_RegionCityUserLite::kMoraleFieldNumber;
const int DB_RegionCityUserLite::kRegionFieldNumber;
#endif  // !_MSC_VER

DB_RegionCityUserLite::DB_RegionCityUserLite() {
  SharedCtor();
}

void DB_RegionCityUserLite::InitAsDefaultInstance() {
}

DB_RegionCityUserLite::DB_RegionCityUserLite(const DB_RegionCityUserLite& from) {
  SharedCtor();
  MergeFrom(from);
}

void DB_RegionCityUserLite::SharedCtor() {
  _cached_size_ = 0;
  morale_ = 0;
  region_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DB_RegionCityUserLite::~DB_RegionCityUserLite() {
  SharedDtor();
}

void DB_RegionCityUserLite::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* DB_RegionCityUserLite::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DB_RegionCityUserLite_descriptor_;
}

const DB_RegionCityUserLite& DB_RegionCityUserLite::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dbinterface_5fsub_2eproto();  return *default_instance_;
}

DB_RegionCityUserLite* DB_RegionCityUserLite::default_instance_ = NULL;

DB_RegionCityUserLite* DB_RegionCityUserLite::New() const {
  return new DB_RegionCityUserLite;
}

void DB_RegionCityUserLite::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    morale_ = 0;
    region_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DB_RegionCityUserLite::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 morale = 1 [default = 0];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &morale_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_region;
        break;
      }
      
      // optional int32 region = 2 [default = 0];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_region:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &region_));
        _set_bit(1);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DB_RegionCityUserLite::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    DB_RegionCityUserLite::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional int32 morale = 1 [default = 0];
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->morale(), output);
  }
  
  // optional int32 region = 2 [default = 0];
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->region(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DB_RegionCityUserLite::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 morale = 1 [default = 0];
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->morale(), target);
  }
  
  // optional int32 region = 2 [default = 0];
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->region(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DB_RegionCityUserLite::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 morale = 1 [default = 0];
    if (has_morale()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->morale());
    }
    
    // optional int32 region = 2 [default = 0];
    if (has_region()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->region());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void DB_RegionCityUserLite::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DB_RegionCityUserLite* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DB_RegionCityUserLite*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DB_RegionCityUserLite::MergeFrom(const DB_RegionCityUserLite& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_morale(from.morale());
    }
    if (from._has_bit(1)) {
      set_region(from.region());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DB_RegionCityUserLite::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DB_RegionCityUserLite::CopyFrom(const DB_RegionCityUserLite& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DB_RegionCityUserLite::IsInitialized() const {
  
  return true;
}

void DB_RegionCityUserLite::Swap(DB_RegionCityUserLite* other) {
  if (other != this) {
    std::swap(morale_, other->morale_);
    std::swap(region_, other->region_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DB_RegionCityUserLite::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DB_RegionCityUserLite_descriptor_;
  metadata.reflection = DB_RegionCityUserLite_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DB_GuildUserLite::kPositionFieldNumber;
const int DB_GuildUserLite::kContributeFieldNumber;
const int DB_GuildUserLite::kTotalContributeFieldNumber;
const int DB_GuildUserLite::kAddAtkPctFieldNumber;
const int DB_GuildUserLite::kAddBloodPctFieldNumber;
const int DB_GuildUserLite::kDaycontributeFieldNumber;
const int DB_GuildUserLite::kLastcontributetmFieldNumber;
const int DB_GuildUserLite::kLastcontidxFieldNumber;
#endif  // !_MSC_VER

DB_GuildUserLite::DB_GuildUserLite() {
  SharedCtor();
}

void DB_GuildUserLite::InitAsDefaultInstance() {
}

DB_GuildUserLite::DB_GuildUserLite(const DB_GuildUserLite& from) {
  SharedCtor();
  MergeFrom(from);
}

void DB_GuildUserLite::SharedCtor() {
  _cached_size_ = 0;
  position_ = 0;
  contribute_ = 0;
  totalcontribute_ = 0;
  addatkpct_ = 0;
  addbloodpct_ = 0;
  lastcontributetm_ = 0;
  lastcontidx_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DB_GuildUserLite::~DB_GuildUserLite() {
  SharedDtor();
}

void DB_GuildUserLite::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* DB_GuildUserLite::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DB_GuildUserLite_descriptor_;
}

const DB_GuildUserLite& DB_GuildUserLite::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dbinterface_5fsub_2eproto();  return *default_instance_;
}

DB_GuildUserLite* DB_GuildUserLite::default_instance_ = NULL;

DB_GuildUserLite* DB_GuildUserLite::New() const {
  return new DB_GuildUserLite;
}

void DB_GuildUserLite::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    position_ = 0;
    contribute_ = 0;
    totalcontribute_ = 0;
    addatkpct_ = 0;
    addbloodpct_ = 0;
    lastcontributetm_ = 0;
    lastcontidx_ = 0;
  }
  daycontribute_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DB_GuildUserLite::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 position = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &position_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_contribute;
        break;
      }
      
      // optional int32 contribute = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_contribute:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &contribute_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_totalContribute;
        break;
      }
      
      // optional int32 totalContribute = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_totalContribute:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &totalcontribute_));
        _set_bit(2);
        if (input->ExpectTag(32)) goto parse_addAtkPct;
        break;
      }
      
      // optional int32 addAtkPct = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_addAtkPct:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &addatkpct_));
        _set_bit(3);
        if (input->ExpectTag(40)) goto parse_addBloodPct;
        break;
      }
      
      // optional int32 addBloodPct = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_addBloodPct:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &addbloodpct_));
        _set_bit(4);
        if (input->ExpectTag(48)) goto parse_daycontribute;
        break;
      }
      
      // repeated int32 daycontribute = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_daycontribute:
        ::google::protobuf::int32 value;
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &value));
        add_daycontribute(value);
        if (input->ExpectTag(48)) goto parse_daycontribute;
        if (input->ExpectTag(56)) goto parse_lastcontributetm;
        break;
      }
      
      // optional int32 lastcontributetm = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_lastcontributetm:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &lastcontributetm_));
        _set_bit(6);
        if (input->ExpectTag(64)) goto parse_lastcontidx;
        break;
      }
      
      // optional int32 lastcontidx = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_lastcontidx:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &lastcontidx_));
        _set_bit(7);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DB_GuildUserLite::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    DB_GuildUserLite::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional int32 position = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->position(), output);
  }
  
  // optional int32 contribute = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->contribute(), output);
  }
  
  // optional int32 totalContribute = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->totalcontribute(), output);
  }
  
  // optional int32 addAtkPct = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->addatkpct(), output);
  }
  
  // optional int32 addBloodPct = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->addbloodpct(), output);
  }
  
  // repeated int32 daycontribute = 6;
  for (int i = 0; i < this->daycontribute_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      6, this->daycontribute(i), output);
  }
  
  // optional int32 lastcontributetm = 7;
  if (_has_bit(6)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->lastcontributetm(), output);
  }
  
  // optional int32 lastcontidx = 8;
  if (_has_bit(7)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->lastcontidx(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DB_GuildUserLite::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 position = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->position(), target);
  }
  
  // optional int32 contribute = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->contribute(), target);
  }
  
  // optional int32 totalContribute = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->totalcontribute(), target);
  }
  
  // optional int32 addAtkPct = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->addatkpct(), target);
  }
  
  // optional int32 addBloodPct = 5;
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->addbloodpct(), target);
  }
  
  // repeated int32 daycontribute = 6;
  for (int i = 0; i < this->daycontribute_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(6, this->daycontribute(i), target);
  }
  
  // optional int32 lastcontributetm = 7;
  if (_has_bit(6)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->lastcontributetm(), target);
  }
  
  // optional int32 lastcontidx = 8;
  if (_has_bit(7)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->lastcontidx(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DB_GuildUserLite::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 position = 1;
    if (has_position()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->position());
    }
    
    // optional int32 contribute = 2;
    if (has_contribute()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->contribute());
    }
    
    // optional int32 totalContribute = 3;
    if (has_totalcontribute()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->totalcontribute());
    }
    
    // optional int32 addAtkPct = 4;
    if (has_addatkpct()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->addatkpct());
    }
    
    // optional int32 addBloodPct = 5;
    if (has_addbloodpct()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->addbloodpct());
    }
    
    // optional int32 lastcontributetm = 7;
    if (has_lastcontributetm()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->lastcontributetm());
    }
    
    // optional int32 lastcontidx = 8;
    if (has_lastcontidx()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->lastcontidx());
    }
    
  }
  // repeated int32 daycontribute = 6;
  {
    int data_size = 0;
    for (int i = 0; i < this->daycontribute_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->daycontribute(i));
    }
    total_size += 1 * this->daycontribute_size() + data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void DB_GuildUserLite::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DB_GuildUserLite* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DB_GuildUserLite*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DB_GuildUserLite::MergeFrom(const DB_GuildUserLite& from) {
  GOOGLE_CHECK_NE(&from, this);
  daycontribute_.MergeFrom(from.daycontribute_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_position(from.position());
    }
    if (from._has_bit(1)) {
      set_contribute(from.contribute());
    }
    if (from._has_bit(2)) {
      set_totalcontribute(from.totalcontribute());
    }
    if (from._has_bit(3)) {
      set_addatkpct(from.addatkpct());
    }
    if (from._has_bit(4)) {
      set_addbloodpct(from.addbloodpct());
    }
    if (from._has_bit(6)) {
      set_lastcontributetm(from.lastcontributetm());
    }
    if (from._has_bit(7)) {
      set_lastcontidx(from.lastcontidx());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DB_GuildUserLite::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DB_GuildUserLite::CopyFrom(const DB_GuildUserLite& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DB_GuildUserLite::IsInitialized() const {
  
  return true;
}

void DB_GuildUserLite::Swap(DB_GuildUserLite* other) {
  if (other != this) {
    std::swap(position_, other->position_);
    std::swap(contribute_, other->contribute_);
    std::swap(totalcontribute_, other->totalcontribute_);
    std::swap(addatkpct_, other->addatkpct_);
    std::swap(addbloodpct_, other->addbloodpct_);
    daycontribute_.Swap(&other->daycontribute_);
    std::swap(lastcontributetm_, other->lastcontributetm_);
    std::swap(lastcontidx_, other->lastcontidx_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DB_GuildUserLite::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DB_GuildUserLite_descriptor_;
  metadata.reflection = DB_GuildUserLite_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DB_StarUserLite::kAttacktimeFieldNumber;
const int DB_StarUserLite::kUserstatFieldNumber;
const int DB_StarUserLite::kSafetimeFieldNumber;
const int DB_StarUserLite::kTotalperchargeFieldNumber;
const int DB_StarUserLite::kPlayeronlinetmFieldNumber;
const int DB_StarUserLite::kPlayerrefreshtmFieldNumber;
const int DB_StarUserLite::kFinishCaptureTmFieldNumber;
const int DB_StarUserLite::kLogoutsafetimeFieldNumber;
#endif  // !_MSC_VER

DB_StarUserLite::DB_StarUserLite() {
  SharedCtor();
}

void DB_StarUserLite::InitAsDefaultInstance() {
}

DB_StarUserLite::DB_StarUserLite(const DB_StarUserLite& from) {
  SharedCtor();
  MergeFrom(from);
}

void DB_StarUserLite::SharedCtor() {
  _cached_size_ = 0;
  attacktime_ = 0;
  userstat_ = 0;
  safetime_ = 0;
  totalpercharge_ = GOOGLE_LONGLONG(0);
  playeronlinetm_ = 0;
  playerrefreshtm_ = 0u;
  finishcapturetm_ = 0;
  logoutsafetime_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DB_StarUserLite::~DB_StarUserLite() {
  SharedDtor();
}

void DB_StarUserLite::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* DB_StarUserLite::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DB_StarUserLite_descriptor_;
}

const DB_StarUserLite& DB_StarUserLite::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dbinterface_5fsub_2eproto();  return *default_instance_;
}

DB_StarUserLite* DB_StarUserLite::default_instance_ = NULL;

DB_StarUserLite* DB_StarUserLite::New() const {
  return new DB_StarUserLite;
}

void DB_StarUserLite::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    attacktime_ = 0;
    userstat_ = 0;
    safetime_ = 0;
    totalpercharge_ = GOOGLE_LONGLONG(0);
    playeronlinetm_ = 0;
    playerrefreshtm_ = 0u;
    finishcapturetm_ = 0;
    logoutsafetime_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DB_StarUserLite::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 attacktime = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &attacktime_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_userstat;
        break;
      }
      
      // optional int32 userstat = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_userstat:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &userstat_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_safetime;
        break;
      }
      
      // optional int32 safetime = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_safetime:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &safetime_));
        _set_bit(2);
        if (input->ExpectTag(32)) goto parse_totalpercharge;
        break;
      }
      
      // optional int64 totalpercharge = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_totalpercharge:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt64(
              input, &totalpercharge_));
        _set_bit(3);
        if (input->ExpectTag(40)) goto parse_playeronlinetm;
        break;
      }
      
      // optional int32 playeronlinetm = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_playeronlinetm:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &playeronlinetm_));
        _set_bit(4);
        if (input->ExpectTag(48)) goto parse_playerrefreshtm;
        break;
      }
      
      // optional uint32 playerrefreshtm = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_playerrefreshtm:
        DO_(::google::protobuf::internal::WireFormatLite::ReadUInt32(
              input, &playerrefreshtm_));
        _set_bit(5);
        if (input->ExpectTag(56)) goto parse_finishCaptureTm;
        break;
      }
      
      // optional int32 finishCaptureTm = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_finishCaptureTm:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &finishcapturetm_));
        _set_bit(6);
        if (input->ExpectTag(64)) goto parse_logoutsafetime;
        break;
      }
      
      // optional int32 logoutsafetime = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_logoutsafetime:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &logoutsafetime_));
        _set_bit(7);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DB_StarUserLite::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    DB_StarUserLite::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional int32 attacktime = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->attacktime(), output);
  }
  
  // optional int32 userstat = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->userstat(), output);
  }
  
  // optional int32 safetime = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->safetime(), output);
  }
  
  // optional int64 totalpercharge = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->totalpercharge(), output);
  }
  
  // optional int32 playeronlinetm = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->playeronlinetm(), output);
  }
  
  // optional uint32 playerrefreshtm = 6;
  if (_has_bit(5)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->playerrefreshtm(), output);
  }
  
  // optional int32 finishCaptureTm = 7;
  if (_has_bit(6)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->finishcapturetm(), output);
  }
  
  // optional int32 logoutsafetime = 8;
  if (_has_bit(7)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->logoutsafetime(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DB_StarUserLite::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 attacktime = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->attacktime(), target);
  }
  
  // optional int32 userstat = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->userstat(), target);
  }
  
  // optional int32 safetime = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->safetime(), target);
  }
  
  // optional int64 totalpercharge = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->totalpercharge(), target);
  }
  
  // optional int32 playeronlinetm = 5;
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->playeronlinetm(), target);
  }
  
  // optional uint32 playerrefreshtm = 6;
  if (_has_bit(5)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->playerrefreshtm(), target);
  }
  
  // optional int32 finishCaptureTm = 7;
  if (_has_bit(6)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->finishcapturetm(), target);
  }
  
  // optional int32 logoutsafetime = 8;
  if (_has_bit(7)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->logoutsafetime(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DB_StarUserLite::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 attacktime = 1;
    if (has_attacktime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->attacktime());
    }
    
    // optional int32 userstat = 2;
    if (has_userstat()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->userstat());
    }
    
    // optional int32 safetime = 3;
    if (has_safetime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->safetime());
    }
    
    // optional int64 totalpercharge = 4;
    if (has_totalpercharge()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->totalpercharge());
    }
    
    // optional int32 playeronlinetm = 5;
    if (has_playeronlinetm()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->playeronlinetm());
    }
    
    // optional uint32 playerrefreshtm = 6;
    if (has_playerrefreshtm()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->playerrefreshtm());
    }
    
    // optional int32 finishCaptureTm = 7;
    if (has_finishcapturetm()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->finishcapturetm());
    }
    
    // optional int32 logoutsafetime = 8;
    if (has_logoutsafetime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->logoutsafetime());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void DB_StarUserLite::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DB_StarUserLite* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DB_StarUserLite*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DB_StarUserLite::MergeFrom(const DB_StarUserLite& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_attacktime(from.attacktime());
    }
    if (from._has_bit(1)) {
      set_userstat(from.userstat());
    }
    if (from._has_bit(2)) {
      set_safetime(from.safetime());
    }
    if (from._has_bit(3)) {
      set_totalpercharge(from.totalpercharge());
    }
    if (from._has_bit(4)) {
      set_playeronlinetm(from.playeronlinetm());
    }
    if (from._has_bit(5)) {
      set_playerrefreshtm(from.playerrefreshtm());
    }
    if (from._has_bit(6)) {
      set_finishcapturetm(from.finishcapturetm());
    }
    if (from._has_bit(7)) {
      set_logoutsafetime(from.logoutsafetime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DB_StarUserLite::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DB_StarUserLite::CopyFrom(const DB_StarUserLite& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DB_StarUserLite::IsInitialized() const {
  
  return true;
}

void DB_StarUserLite::Swap(DB_StarUserLite* other) {
  if (other != this) {
    std::swap(attacktime_, other->attacktime_);
    std::swap(userstat_, other->userstat_);
    std::swap(safetime_, other->safetime_);
    std::swap(totalpercharge_, other->totalpercharge_);
    std::swap(playeronlinetm_, other->playeronlinetm_);
    std::swap(playerrefreshtm_, other->playerrefreshtm_);
    std::swap(finishcapturetm_, other->finishcapturetm_);
    std::swap(logoutsafetime_, other->logoutsafetime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DB_StarUserLite::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DB_StarUserLite_descriptor_;
  metadata.reflection = DB_StarUserLite_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DB_UserLite::kUserLiteFieldNumber;
const int DB_UserLite::kCityLiteFieldNumber;
const int DB_UserLite::kStarLiteFieldNumber;
const int DB_UserLite::kGuildLiteFieldNumber;
const int DB_UserLite::kRegionCityLiteFieldNumber;
#endif  // !_MSC_VER

DB_UserLite::DB_UserLite() {
  SharedCtor();
}

void DB_UserLite::InitAsDefaultInstance() {
  userlite_ = const_cast< ::DB_UserLiteBase*>(&::DB_UserLiteBase::default_instance());
  citylite_ = const_cast< ::DB_CityUserLite*>(&::DB_CityUserLite::default_instance());
  starlite_ = const_cast< ::DB_StarUserLite*>(&::DB_StarUserLite::default_instance());
  guildlite_ = const_cast< ::DB_GuildUserLite*>(&::DB_GuildUserLite::default_instance());
  regioncitylite_ = const_cast< ::DB_RegionCityUserLite*>(&::DB_RegionCityUserLite::default_instance());
}

DB_UserLite::DB_UserLite(const DB_UserLite& from) {
  SharedCtor();
  MergeFrom(from);
}

void DB_UserLite::SharedCtor() {
  _cached_size_ = 0;
  userlite_ = NULL;
  citylite_ = NULL;
  starlite_ = NULL;
  guildlite_ = NULL;
  regioncitylite_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DB_UserLite::~DB_UserLite() {
  SharedDtor();
}

void DB_UserLite::SharedDtor() {
  if (this != default_instance_) {
    delete userlite_;
    delete citylite_;
    delete starlite_;
    delete guildlite_;
    delete regioncitylite_;
  }
}

const ::google::protobuf::Descriptor* DB_UserLite::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DB_UserLite_descriptor_;
}

const DB_UserLite& DB_UserLite::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dbinterface_5fsub_2eproto();  return *default_instance_;
}

DB_UserLite* DB_UserLite::default_instance_ = NULL;

DB_UserLite* DB_UserLite::New() const {
  return new DB_UserLite;
}

void DB_UserLite::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (userlite_ != NULL) userlite_->::DB_UserLiteBase::Clear();
    }
    if (_has_bit(1)) {
      if (citylite_ != NULL) citylite_->::DB_CityUserLite::Clear();
    }
    if (_has_bit(2)) {
      if (starlite_ != NULL) starlite_->::DB_StarUserLite::Clear();
    }
    if (_has_bit(3)) {
      if (guildlite_ != NULL) guildlite_->::DB_GuildUserLite::Clear();
    }
    if (_has_bit(4)) {
      if (regioncitylite_ != NULL) regioncitylite_->::DB_RegionCityUserLite::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DB_UserLite::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .DB_UserLiteBase userLite = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
             input, mutable_userlite()));
        if (input->ExpectTag(18)) goto parse_cityLite;
        break;
      }
      
      // optional .DB_CityUserLite cityLite = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_cityLite:
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
             input, mutable_citylite()));
        if (input->ExpectTag(26)) goto parse_starLite;
        break;
      }
      
      // optional .DB_StarUserLite starLite = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_starLite:
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
             input, mutable_starlite()));
        if (input->ExpectTag(34)) goto parse_guildLite;
        break;
      }
      
      // optional .DB_GuildUserLite guildLite = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_guildLite:
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
             input, mutable_guildlite()));
        if (input->ExpectTag(42)) goto parse_regionCityLite;
        break;
      }
      
      // optional .DB_RegionCityUserLite regionCityLite = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_regionCityLite:
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
             input, mutable_regioncitylite()));
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DB_UserLite::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    DB_UserLite::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional .DB_UserLiteBase userLite = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      1, this->userlite(), output);
  }
  
  // optional .DB_CityUserLite cityLite = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      2, this->citylite(), output);
  }
  
  // optional .DB_StarUserLite starLite = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      3, this->starlite(), output);
  }
  
  // optional .DB_GuildUserLite guildLite = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      4, this->guildlite(), output);
  }
  
  // optional .DB_RegionCityUserLite regionCityLite = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      5, this->regioncitylite(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DB_UserLite::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .DB_UserLiteBase userLite = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->userlite(), target);
  }
  
  // optional .DB_CityUserLite cityLite = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->citylite(), target);
  }
  
  // optional .DB_StarUserLite starLite = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->starlite(), target);
  }
  
  // optional .DB_GuildUserLite guildLite = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->guildlite(), target);
  }
  
  // optional .DB_RegionCityUserLite regionCityLite = 5;
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->regioncitylite(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DB_UserLite::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .DB_UserLiteBase userLite = 1;
    if (has_userlite()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->userlite());
    }
    
    // optional .DB_CityUserLite cityLite = 2;
    if (has_citylite()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->citylite());
    }
    
    // optional .DB_StarUserLite starLite = 3;
    if (has_starlite()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->starlite());
    }
    
    // optional .DB_GuildUserLite guildLite = 4;
    if (has_guildlite()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->guildlite());
    }
    
    // optional .DB_RegionCityUserLite regionCityLite = 5;
    if (has_regioncitylite()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->regioncitylite());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void DB_UserLite::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DB_UserLite* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DB_UserLite*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DB_UserLite::MergeFrom(const DB_UserLite& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      mutable_userlite()->::DB_UserLiteBase::MergeFrom(from.userlite());
    }
    if (from._has_bit(1)) {
      mutable_citylite()->::DB_CityUserLite::MergeFrom(from.citylite());
    }
    if (from._has_bit(2)) {
      mutable_starlite()->::DB_StarUserLite::MergeFrom(from.starlite());
    }
    if (from._has_bit(3)) {
      mutable_guildlite()->::DB_GuildUserLite::MergeFrom(from.guildlite());
    }
    if (from._has_bit(4)) {
      mutable_regioncitylite()->::DB_RegionCityUserLite::MergeFrom(from.regioncitylite());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DB_UserLite::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DB_UserLite::CopyFrom(const DB_UserLite& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DB_UserLite::IsInitialized() const {
  
  return true;
}

void DB_UserLite::Swap(DB_UserLite* other) {
  if (other != this) {
    std::swap(userlite_, other->userlite_);
    std::swap(citylite_, other->citylite_);
    std::swap(starlite_, other->starlite_);
    std::swap(guildlite_, other->guildlite_);
    std::swap(regioncitylite_, other->regioncitylite_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DB_UserLite::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DB_UserLite_descriptor_;
  metadata.reflection = DB_UserLite_reflection_;
  return metadata;
}


// ===================================================================

const ::std::string DB_Star::_default_userid_;
#ifndef _MSC_VER
const int DB_Star::kUseridFieldNumber;
const int DB_Star::kNameFieldNumber;
const int DB_Star::kProfileLinkFieldNumber;
const int DB_Star::kLevelFieldNumber;
const int DB_Star::kSafetimeFieldNumber;
const int DB_Star::kAttacktimeFieldNumber;
const int DB_Star::kOnlineFieldNumber;
const int DB_Star::kUserstatFieldNumber;
const int DB_Star::kSavetimeFieldNumber;
const int DB_Star::kTotalperchargeFieldNumber;
const int DB_Star::kPlayeronlinetmFieldNumber;
const int DB_Star::kPlayerrefreshtmFieldNumber;
const int DB_Star::kFinishCaptureTmFieldNumber;
const int DB_Star::kCombatPowerValueFieldNumber;
#endif  // !_MSC_VER

DB_Star::DB_Star() {
  SharedCtor();
}

void DB_Star::InitAsDefaultInstance() {
}

DB_Star::DB_Star(const DB_Star& from) {
  SharedCtor();
  MergeFrom(from);
}

void DB_Star::SharedCtor() {
  _cached_size_ = 0;
  userid_ = const_cast< ::std::string*>(&_default_userid_);
  level_ = 0;
  safetime_ = 0;
  attacktime_ = 0;
  online_ = false;
  userstat_ = 0;
  savetime_ = 0;
  totalpercharge_ = GOOGLE_LONGLONG(0);
  playeronlinetm_ = 0;
  playerrefreshtm_ = 0u;
  finishcapturetm_ = 0;
  combatpowervalue_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DB_Star::~DB_Star() {
  SharedDtor();
}

void DB_Star::SharedDtor() {
  if (userid_ != &_default_userid_) {
    delete userid_;
  }
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* DB_Star::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DB_Star_descriptor_;
}

const DB_Star& DB_Star::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dbinterface_5fsub_2eproto();  return *default_instance_;
}

DB_Star* DB_Star::default_instance_ = NULL;

DB_Star* DB_Star::New() const {
  return new DB_Star;
}

void DB_Star::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (userid_ != &_default_userid_) {
        userid_->clear();
      }
    }
    level_ = 0;
    safetime_ = 0;
    attacktime_ = 0;
    online_ = false;
    userstat_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    savetime_ = 0;
    totalpercharge_ = GOOGLE_LONGLONG(0);
    playeronlinetm_ = 0;
    playerrefreshtm_ = 0u;
    finishcapturetm_ = 0;
    combatpowervalue_ = 0u;
  }
  name_.Clear();
  profile_link_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DB_Star::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string userid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadString(
              input, this->mutable_userid()));
        ::google::protobuf::internal::WireFormat::VerifyUTF8String(
          this->userid().data(), this->userid().length(),
          ::google::protobuf::internal::WireFormat::PARSE);
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }
      
      // repeated string name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_name:
        DO_(::google::protobuf::internal::WireFormatLite::ReadString(
              input, this->add_name()));
        ::google::protobuf::internal::WireFormat::VerifyUTF8String(
          this->name(0).data(), this->name(0).length(),
          ::google::protobuf::internal::WireFormat::PARSE);
        if (input->ExpectTag(18)) goto parse_name;
        if (input->ExpectTag(26)) goto parse_profile_link;
        break;
      }
      
      // repeated string profile_link = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_profile_link:
        DO_(::google::protobuf::internal::WireFormatLite::ReadString(
              input, this->add_profile_link()));
        ::google::protobuf::internal::WireFormat::VerifyUTF8String(
          this->profile_link(0).data(), this->profile_link(0).length(),
          ::google::protobuf::internal::WireFormat::PARSE);
        if (input->ExpectTag(26)) goto parse_profile_link;
        if (input->ExpectTag(32)) goto parse_level;
        break;
      }
      
      // optional int32 level = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_level:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &level_));
        _set_bit(3);
        if (input->ExpectTag(40)) goto parse_safetime;
        break;
      }
      
      // optional int32 safetime = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_safetime:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &safetime_));
        _set_bit(4);
        if (input->ExpectTag(48)) goto parse_attacktime;
        break;
      }
      
      // optional int32 attacktime = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_attacktime:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &attacktime_));
        _set_bit(5);
        if (input->ExpectTag(56)) goto parse_online;
        break;
      }
      
      // optional bool online = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_online:
        DO_(::google::protobuf::internal::WireFormatLite::ReadBool(
              input, &online_));
        _set_bit(6);
        if (input->ExpectTag(64)) goto parse_userstat;
        break;
      }
      
      // optional int32 userstat = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_userstat:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &userstat_));
        _set_bit(7);
        if (input->ExpectTag(72)) goto parse_savetime;
        break;
      }
      
      // optional int32 savetime = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_savetime:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &savetime_));
        _set_bit(8);
        if (input->ExpectTag(80)) goto parse_totalpercharge;
        break;
      }
      
      // optional int64 totalpercharge = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_totalpercharge:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt64(
              input, &totalpercharge_));
        _set_bit(9);
        if (input->ExpectTag(88)) goto parse_playeronlinetm;
        break;
      }
      
      // optional int32 playeronlinetm = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_playeronlinetm:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &playeronlinetm_));
        _set_bit(10);
        if (input->ExpectTag(96)) goto parse_playerrefreshtm;
        break;
      }
      
      // optional uint32 playerrefreshtm = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_playerrefreshtm:
        DO_(::google::protobuf::internal::WireFormatLite::ReadUInt32(
              input, &playerrefreshtm_));
        _set_bit(11);
        if (input->ExpectTag(104)) goto parse_finishCaptureTm;
        break;
      }
      
      // optional int32 finishCaptureTm = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_finishCaptureTm:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &finishcapturetm_));
        _set_bit(12);
        if (input->ExpectTag(112)) goto parse_combatPowerValue;
        break;
      }
      
      // optional uint32 combatPowerValue = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_combatPowerValue:
        DO_(::google::protobuf::internal::WireFormatLite::ReadUInt32(
              input, &combatpowervalue_));
        _set_bit(13);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DB_Star::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    DB_Star::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // required string userid = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->userid().data(), this->userid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->userid(), output);
  }
  
  // repeated string name = 2;
  for (int i = 0; i < this->name_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->name(i).data(), this->name(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->name(i), output);
  }
  
  // repeated string profile_link = 3;
  for (int i = 0; i < this->profile_link_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->profile_link(i).data(), this->profile_link(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->profile_link(i), output);
  }
  
  // optional int32 level = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->level(), output);
  }
  
  // optional int32 safetime = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->safetime(), output);
  }
  
  // optional int32 attacktime = 6;
  if (_has_bit(5)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->attacktime(), output);
  }
  
  // optional bool online = 7;
  if (_has_bit(6)) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->online(), output);
  }
  
  // optional int32 userstat = 8;
  if (_has_bit(7)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->userstat(), output);
  }
  
  // optional int32 savetime = 9;
  if (_has_bit(8)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->savetime(), output);
  }
  
  // optional int64 totalpercharge = 10;
  if (_has_bit(9)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(10, this->totalpercharge(), output);
  }
  
  // optional int32 playeronlinetm = 11;
  if (_has_bit(10)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->playeronlinetm(), output);
  }
  
  // optional uint32 playerrefreshtm = 12;
  if (_has_bit(11)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->playerrefreshtm(), output);
  }
  
  // optional int32 finishCaptureTm = 13;
  if (_has_bit(12)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->finishcapturetm(), output);
  }
  
  // optional uint32 combatPowerValue = 14;
  if (_has_bit(13)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(14, this->combatpowervalue(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DB_Star::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string userid = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->userid().data(), this->userid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->userid(), target);
  }
  
  // repeated string name = 2;
  for (int i = 0; i < this->name_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name(i).data(), this->name(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(2, this->name(i), target);
  }
  
  // repeated string profile_link = 3;
  for (int i = 0; i < this->profile_link_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->profile_link(i).data(), this->profile_link(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(3, this->profile_link(i), target);
  }
  
  // optional int32 level = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->level(), target);
  }
  
  // optional int32 safetime = 5;
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->safetime(), target);
  }
  
  // optional int32 attacktime = 6;
  if (_has_bit(5)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->attacktime(), target);
  }
  
  // optional bool online = 7;
  if (_has_bit(6)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->online(), target);
  }
  
  // optional int32 userstat = 8;
  if (_has_bit(7)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->userstat(), target);
  }
  
  // optional int32 savetime = 9;
  if (_has_bit(8)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->savetime(), target);
  }
  
  // optional int64 totalpercharge = 10;
  if (_has_bit(9)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(10, this->totalpercharge(), target);
  }
  
  // optional int32 playeronlinetm = 11;
  if (_has_bit(10)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->playeronlinetm(), target);
  }
  
  // optional uint32 playerrefreshtm = 12;
  if (_has_bit(11)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->playerrefreshtm(), target);
  }
  
  // optional int32 finishCaptureTm = 13;
  if (_has_bit(12)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->finishcapturetm(), target);
  }
  
  // optional uint32 combatPowerValue = 14;
  if (_has_bit(13)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(14, this->combatpowervalue(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DB_Star::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string userid = 1;
    if (has_userid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->userid());
    }
    
    // optional int32 level = 4;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->level());
    }
    
    // optional int32 safetime = 5;
    if (has_safetime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->safetime());
    }
    
    // optional int32 attacktime = 6;
    if (has_attacktime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->attacktime());
    }
    
    // optional bool online = 7;
    if (has_online()) {
      total_size += 1 + 1;
    }
    
    // optional int32 userstat = 8;
    if (has_userstat()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->userstat());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 savetime = 9;
    if (has_savetime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->savetime());
    }
    
    // optional int64 totalpercharge = 10;
    if (has_totalpercharge()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->totalpercharge());
    }
    
    // optional int32 playeronlinetm = 11;
    if (has_playeronlinetm()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->playeronlinetm());
    }
    
    // optional uint32 playerrefreshtm = 12;
    if (has_playerrefreshtm()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->playerrefreshtm());
    }
    
    // optional int32 finishCaptureTm = 13;
    if (has_finishcapturetm()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->finishcapturetm());
    }
    
    // optional uint32 combatPowerValue = 14;
    if (has_combatpowervalue()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->combatpowervalue());
    }
    
  }
  // repeated string name = 2;
  total_size += 1 * this->name_size();
  for (int i = 0; i < this->name_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->name(i));
  }
  
  // repeated string profile_link = 3;
  total_size += 1 * this->profile_link_size();
  for (int i = 0; i < this->profile_link_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->profile_link(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void DB_Star::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DB_Star* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DB_Star*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DB_Star::MergeFrom(const DB_Star& from) {
  GOOGLE_CHECK_NE(&from, this);
  name_.MergeFrom(from.name_);
  profile_link_.MergeFrom(from.profile_link_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_userid(from.userid());
    }
    if (from._has_bit(3)) {
      set_level(from.level());
    }
    if (from._has_bit(4)) {
      set_safetime(from.safetime());
    }
    if (from._has_bit(5)) {
      set_attacktime(from.attacktime());
    }
    if (from._has_bit(6)) {
      set_online(from.online());
    }
    if (from._has_bit(7)) {
      set_userstat(from.userstat());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from._has_bit(8)) {
      set_savetime(from.savetime());
    }
    if (from._has_bit(9)) {
      set_totalpercharge(from.totalpercharge());
    }
    if (from._has_bit(10)) {
      set_playeronlinetm(from.playeronlinetm());
    }
    if (from._has_bit(11)) {
      set_playerrefreshtm(from.playerrefreshtm());
    }
    if (from._has_bit(12)) {
      set_finishcapturetm(from.finishcapturetm());
    }
    if (from._has_bit(13)) {
      set_combatpowervalue(from.combatpowervalue());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DB_Star::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DB_Star::CopyFrom(const DB_Star& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DB_Star::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void DB_Star::Swap(DB_Star* other) {
  if (other != this) {
    std::swap(userid_, other->userid_);
    name_.Swap(&other->name_);
    profile_link_.Swap(&other->profile_link_);
    std::swap(level_, other->level_);
    std::swap(safetime_, other->safetime_);
    std::swap(attacktime_, other->attacktime_);
    std::swap(online_, other->online_);
    std::swap(userstat_, other->userstat_);
    std::swap(savetime_, other->savetime_);
    std::swap(totalpercharge_, other->totalpercharge_);
    std::swap(playeronlinetm_, other->playeronlinetm_);
    std::swap(playerrefreshtm_, other->playerrefreshtm_);
    std::swap(finishcapturetm_, other->finishcapturetm_);
    std::swap(combatpowervalue_, other->combatpowervalue_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DB_Star::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DB_Star_descriptor_;
  metadata.reflection = DB_Star_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DB_BitCache::kBitFieldNumber;
#endif  // !_MSC_VER

DB_BitCache::DB_BitCache() {
  SharedCtor();
}

void DB_BitCache::InitAsDefaultInstance() {
}

DB_BitCache::DB_BitCache(const DB_BitCache& from) {
  SharedCtor();
  MergeFrom(from);
}

void DB_BitCache::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DB_BitCache::~DB_BitCache() {
  SharedDtor();
}

void DB_BitCache::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* DB_BitCache::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DB_BitCache_descriptor_;
}

const DB_BitCache& DB_BitCache::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dbinterface_5fsub_2eproto();  return *default_instance_;
}

DB_BitCache* DB_BitCache::default_instance_ = NULL;

DB_BitCache* DB_BitCache::New() const {
  return new DB_BitCache;
}

void DB_BitCache::Clear() {
  bit_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DB_BitCache::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated int32 bit = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_bit:
        ::google::protobuf::int32 value;
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &value));
        add_bit(value);
        if (input->ExpectTag(8)) goto parse_bit;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DB_BitCache::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    DB_BitCache::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // repeated int32 bit = 1;
  for (int i = 0; i < this->bit_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      1, this->bit(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DB_BitCache::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated int32 bit = 1;
  for (int i = 0; i < this->bit_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(1, this->bit(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DB_BitCache::ByteSize() const {
  int total_size = 0;
  
  // repeated int32 bit = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->bit_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->bit(i));
    }
    total_size += 1 * this->bit_size() + data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void DB_BitCache::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DB_BitCache* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DB_BitCache*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DB_BitCache::MergeFrom(const DB_BitCache& from) {
  GOOGLE_CHECK_NE(&from, this);
  bit_.MergeFrom(from.bit_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DB_BitCache::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DB_BitCache::CopyFrom(const DB_BitCache& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DB_BitCache::IsInitialized() const {
  
  return true;
}

void DB_BitCache::Swap(DB_BitCache* other) {
  if (other != this) {
    bit_.Swap(&other->bit_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DB_BitCache::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DB_BitCache_descriptor_;
  metadata.reflection = DB_BitCache_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DB_BanLogin::kBanloginFieldNumber;
const int DB_BanLogin::kTimeFieldNumber;
#endif  // !_MSC_VER

DB_BanLogin::DB_BanLogin() {
  SharedCtor();
}

void DB_BanLogin::InitAsDefaultInstance() {
}

DB_BanLogin::DB_BanLogin(const DB_BanLogin& from) {
  SharedCtor();
  MergeFrom(from);
}

void DB_BanLogin::SharedCtor() {
  _cached_size_ = 0;
  banlogin_ = false;
  time_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DB_BanLogin::~DB_BanLogin() {
  SharedDtor();
}

void DB_BanLogin::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* DB_BanLogin::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DB_BanLogin_descriptor_;
}

const DB_BanLogin& DB_BanLogin::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dbinterface_5fsub_2eproto();  return *default_instance_;
}

DB_BanLogin* DB_BanLogin::default_instance_ = NULL;

DB_BanLogin* DB_BanLogin::New() const {
  return new DB_BanLogin;
}

void DB_BanLogin::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    banlogin_ = false;
    time_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DB_BanLogin::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool banlogin = 1 [default = false];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadBool(
              input, &banlogin_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_time;
        break;
      }
      
      // optional int64 time = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_time:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt64(
              input, &time_));
        _set_bit(1);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DB_BanLogin::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    DB_BanLogin::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional bool banlogin = 1 [default = false];
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->banlogin(), output);
  }
  
  // optional int64 time = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->time(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DB_BanLogin::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bool banlogin = 1 [default = false];
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->banlogin(), target);
  }
  
  // optional int64 time = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->time(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DB_BanLogin::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bool banlogin = 1 [default = false];
    if (has_banlogin()) {
      total_size += 1 + 1;
    }
    
    // optional int64 time = 2;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->time());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void DB_BanLogin::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DB_BanLogin* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DB_BanLogin*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DB_BanLogin::MergeFrom(const DB_BanLogin& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_banlogin(from.banlogin());
    }
    if (from._has_bit(1)) {
      set_time(from.time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DB_BanLogin::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DB_BanLogin::CopyFrom(const DB_BanLogin& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DB_BanLogin::IsInitialized() const {
  
  return true;
}

void DB_BanLogin::Swap(DB_BanLogin* other) {
  if (other != this) {
    std::swap(banlogin_, other->banlogin_);
    std::swap(time_, other->time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DB_BanLogin::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DB_BanLogin_descriptor_;
  metadata.reflection = DB_BanLogin_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DB_QuestRule::kBlvlFieldNumber;
const int DB_QuestRule::kBrlvlFieldNumber;
const int DB_QuestRule::kB1LvlFieldNumber;
const int DB_QuestRule::kB1CountFieldNumber;
const int DB_QuestRule::kB2LvlFieldNumber;
const int DB_QuestRule::kB2CountFieldNumber;
const int DB_QuestRule::kB3LvlFieldNumber;
const int DB_QuestRule::kB4LvlFieldNumber;
const int DB_QuestRule::kB5LvlFieldNumber;
const int DB_QuestRule::kB6LvlFieldNumber;
const int DB_QuestRule::kB6CountFieldNumber;
const int DB_QuestRule::kB7LvlFieldNumber;
const int DB_QuestRule::kB8LvlFieldNumber;
const int DB_QuestRule::kB9LvlFieldNumber;
const int DB_QuestRule::kB10LvlFieldNumber;
const int DB_QuestRule::kB11LvlFieldNumber;
const int DB_QuestRule::kB12LvlFieldNumber;
const int DB_QuestRule::kB13LvlFieldNumber;
const int DB_QuestRule::kB14LvlFieldNumber;
const int DB_QuestRule::kB15LvlFieldNumber;
const int DB_QuestRule::kB16LvlFieldNumber;
const int DB_QuestRule::kB17LvlFieldNumber;
const int DB_QuestRule::kB18LvlFieldNumber;
const int DB_QuestRule::kB19LvlFieldNumber;
const int DB_QuestRule::kB20LvlFieldNumber;
const int DB_QuestRule::kB21LvlFieldNumber;
const int DB_QuestRule::kB22LvlFieldNumber;
const int DB_QuestRule::kB23LvlFieldNumber;
const int DB_QuestRule::kB24LvlFieldNumber;
const int DB_QuestRule::kB25LvlFieldNumber;
const int DB_QuestRule::kB26LvlFieldNumber;
const int DB_QuestRule::kB28LvlFieldNumber;
const int DB_QuestRule::kB29LvlFieldNumber;
const int DB_QuestRule::kB30LvlFieldNumber;
const int DB_QuestRule::kB31LvlFieldNumber;
const int DB_QuestRule::kB33LvlFieldNumber;
const int DB_QuestRule::kLootpickedFieldNumber;
const int DB_QuestRule::kSingleclickbank1FieldNumber;
const int DB_QuestRule::kSingleclickbank2FieldNumber;
const int DB_QuestRule::kResourcegather1FieldNumber;
const int DB_QuestRule::kResourcegather2FieldNumber;
const int DB_QuestRule::kWorderCountFieldNumber;
const int DB_QuestRule::kInvasionRepelFieldNumber;
const int DB_QuestRule::kFriendInstallsFieldNumber;
const int DB_QuestRule::kBuiltFieldNumber;
const int DB_QuestRule::kBuilt3FieldNumber;
const int DB_QuestRule::kBuilt10FieldNumber;
const int DB_QuestRule::kWallcountFieldNumber;
const int DB_QuestRule::kArtifactsFieldNumber;
const int DB_QuestRule::kDoodadFieldNumber;
const int DB_QuestRule::kBonusBookmarkFieldNumber;
const int DB_QuestRule::kBonusFanFieldNumber;
const int DB_QuestRule::kBonusInvitesFieldNumber;
const int DB_QuestRule::kBonusGiftsFieldNumber;
const int DB_QuestRule::kKillsFieldNumber;
const int DB_QuestRule::kKillsInAttackFieldNumber;
const int DB_QuestRule::kMaxKillsLRSFieldNumber;
const int DB_QuestRule::kMaxFlattenLRSFieldNumber;
const int DB_QuestRule::kLrs1FieldNumber;
const int DB_QuestRule::kLrs2FieldNumber;
const int DB_QuestRule::kLrs3FieldNumber;
const int DB_QuestRule::kLrs4FieldNumber;
const int DB_QuestRule::kLrs5FieldNumber;
const int DB_QuestRule::kLrs6FieldNumber;
const int DB_QuestRule::kLrs7FieldNumber;
const int DB_QuestRule::kLrs8FieldNumber;
const int DB_QuestRule::kLrs9FieldNumber;
const int DB_QuestRule::kLrs10FieldNumber;
const int DB_QuestRule::kResLootFieldNumber;
const int DB_QuestRule::kDestroyBaseFieldNumber;
const int DB_QuestRule::kAttackEnemyFieldNumber;
const int DB_QuestRule::kQzoneActiveFieldNumber;
#endif  // !_MSC_VER

DB_QuestRule::DB_QuestRule() {
  SharedCtor();
}

void DB_QuestRule::InitAsDefaultInstance() {
}

DB_QuestRule::DB_QuestRule(const DB_QuestRule& from) {
  SharedCtor();
  MergeFrom(from);
}

void DB_QuestRule::SharedCtor() {
  _cached_size_ = 0;
  blvl_ = 0;
  brlvl_ = 0;
  b1lvl_ = 0;
  b1count_ = 0;
  b2lvl_ = 0;
  b2count_ = 0;
  b3lvl_ = 0;
  b4lvl_ = 0;
  b5lvl_ = 0;
  b6lvl_ = 0;
  b6count_ = 0;
  b7lvl_ = 0;
  b8lvl_ = 0;
  b9lvl_ = 0;
  b10lvl_ = 0;
  b11lvl_ = 0;
  b12lvl_ = 0;
  b13lvl_ = 0;
  b14lvl_ = 0;
  b15lvl_ = 0;
  b16lvl_ = 0;
  b17lvl_ = 0;
  b18lvl_ = 0;
  b19lvl_ = 0;
  b20lvl_ = 0;
  b21lvl_ = 0;
  b22lvl_ = 0;
  b23lvl_ = 0;
  b24lvl_ = 0;
  b25lvl_ = 0;
  b26lvl_ = 0;
  b28lvl_ = 0;
  b29lvl_ = 0;
  b30lvl_ = 0;
  b31lvl_ = 0;
  b33lvl_ = 0;
  lootpicked_ = 0;
  singleclickbank1_ = 0;
  singleclickbank2_ = 0;
  resourcegather1_ = 0;
  resourcegather2_ = 0;
  worder_count_ = 0;
  invasion_repel_ = 0;
  friendinstalls_ = 0;
  built_ = 0;
  built3_ = 0;
  built10_ = 0;
  wallcount_ = 0;
  artifacts_ = 0;
  doodad_ = 0;
  bonus_bookmark_ = 0;
  bonus_fan_ = 0;
  bonus_invites_ = 0;
  bonus_gifts_ = 0;
  _kills_ = 0;
  _killsinattack_ = 0;
  _maxkillslrs_ = 0;
  _maxflattenlrs_ = 0;
  _lrs1_ = 0;
  _lrs2_ = 0;
  _lrs3_ = 0;
  _lrs4_ = 0;
  _lrs5_ = 0;
  _lrs6_ = 0;
  _lrs7_ = 0;
  _lrs8_ = 0;
  _lrs9_ = 0;
  _lrs10_ = 0;
  _resloot_ = 0;
  _destroy_base_ = 0;
  _attack_enemy_ = 0;
  _qzoneactive_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DB_QuestRule::~DB_QuestRule() {
  SharedDtor();
}

void DB_QuestRule::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* DB_QuestRule::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DB_QuestRule_descriptor_;
}

const DB_QuestRule& DB_QuestRule::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dbinterface_5fsub_2eproto();  return *default_instance_;
}

DB_QuestRule* DB_QuestRule::default_instance_ = NULL;

DB_QuestRule* DB_QuestRule::New() const {
  return new DB_QuestRule;
}

void DB_QuestRule::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    blvl_ = 0;
    brlvl_ = 0;
    b1lvl_ = 0;
    b1count_ = 0;
    b2lvl_ = 0;
    b2count_ = 0;
    b3lvl_ = 0;
    b4lvl_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    b5lvl_ = 0;
    b6lvl_ = 0;
    b6count_ = 0;
    b7lvl_ = 0;
    b8lvl_ = 0;
    b9lvl_ = 0;
    b10lvl_ = 0;
    b11lvl_ = 0;
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    b12lvl_ = 0;
    b13lvl_ = 0;
    b14lvl_ = 0;
    b15lvl_ = 0;
    b16lvl_ = 0;
    b17lvl_ = 0;
    b18lvl_ = 0;
    b19lvl_ = 0;
  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    b20lvl_ = 0;
    b21lvl_ = 0;
    b22lvl_ = 0;
    b23lvl_ = 0;
    b24lvl_ = 0;
    b25lvl_ = 0;
    b26lvl_ = 0;
    b28lvl_ = 0;
  }
  if (_has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    b29lvl_ = 0;
    b30lvl_ = 0;
    b31lvl_ = 0;
    b33lvl_ = 0;
    lootpicked_ = 0;
    singleclickbank1_ = 0;
    singleclickbank2_ = 0;
    resourcegather1_ = 0;
  }
  if (_has_bits_[40 / 32] & (0xffu << (40 % 32))) {
    resourcegather2_ = 0;
    worder_count_ = 0;
    invasion_repel_ = 0;
    friendinstalls_ = 0;
    built_ = 0;
    built3_ = 0;
    built10_ = 0;
    wallcount_ = 0;
  }
  if (_has_bits_[48 / 32] & (0xffu << (48 % 32))) {
    artifacts_ = 0;
    doodad_ = 0;
    bonus_bookmark_ = 0;
    bonus_fan_ = 0;
    bonus_invites_ = 0;
    bonus_gifts_ = 0;
    _kills_ = 0;
    _killsinattack_ = 0;
  }
  if (_has_bits_[56 / 32] & (0xffu << (56 % 32))) {
    _maxkillslrs_ = 0;
    _maxflattenlrs_ = 0;
    _lrs1_ = 0;
    _lrs2_ = 0;
    _lrs3_ = 0;
    _lrs4_ = 0;
    _lrs5_ = 0;
    _lrs6_ = 0;
  }
  if (_has_bits_[64 / 32] & (0xffu << (64 % 32))) {
    _lrs7_ = 0;
    _lrs8_ = 0;
    _lrs9_ = 0;
    _lrs10_ = 0;
    _resloot_ = 0;
    _destroy_base_ = 0;
    _attack_enemy_ = 0;
    _qzoneactive_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DB_QuestRule::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 blvl = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &blvl_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_brlvl;
        break;
      }
      
      // optional int32 brlvl = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_brlvl:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &brlvl_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_b1lvl;
        break;
      }
      
      // optional int32 b1lvl = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_b1lvl:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &b1lvl_));
        _set_bit(2);
        if (input->ExpectTag(32)) goto parse_b1count;
        break;
      }
      
      // optional int32 b1count = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_b1count:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &b1count_));
        _set_bit(3);
        if (input->ExpectTag(40)) goto parse_b2lvl;
        break;
      }
      
      // optional int32 b2lvl = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_b2lvl:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &b2lvl_));
        _set_bit(4);
        if (input->ExpectTag(48)) goto parse_b2count;
        break;
      }
      
      // optional int32 b2count = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_b2count:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &b2count_));
        _set_bit(5);
        if (input->ExpectTag(56)) goto parse_b3lvl;
        break;
      }
      
      // optional int32 b3lvl = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_b3lvl:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &b3lvl_));
        _set_bit(6);
        if (input->ExpectTag(64)) goto parse_b4lvl;
        break;
      }
      
      // optional int32 b4lvl = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_b4lvl:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &b4lvl_));
        _set_bit(7);
        if (input->ExpectTag(72)) goto parse_b5lvl;
        break;
      }
      
      // optional int32 b5lvl = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_b5lvl:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &b5lvl_));
        _set_bit(8);
        if (input->ExpectTag(80)) goto parse_b6lvl;
        break;
      }
      
      // optional int32 b6lvl = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_b6lvl:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &b6lvl_));
        _set_bit(9);
        if (input->ExpectTag(88)) goto parse_b6count;
        break;
      }
      
      // optional int32 b6count = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_b6count:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &b6count_));
        _set_bit(10);
        if (input->ExpectTag(96)) goto parse_b7lvl;
        break;
      }
      
      // optional int32 b7lvl = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_b7lvl:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &b7lvl_));
        _set_bit(11);
        if (input->ExpectTag(104)) goto parse_b8lvl;
        break;
      }
      
      // optional int32 b8lvl = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_b8lvl:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &b8lvl_));
        _set_bit(12);
        if (input->ExpectTag(112)) goto parse_b9lvl;
        break;
      }
      
      // optional int32 b9lvl = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_b9lvl:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &b9lvl_));
        _set_bit(13);
        if (input->ExpectTag(120)) goto parse_b10lvl;
        break;
      }
      
      // optional int32 b10lvl = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_b10lvl:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &b10lvl_));
        _set_bit(14);
        if (input->ExpectTag(128)) goto parse_b11lvl;
        break;
      }
      
      // optional int32 b11lvl = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_b11lvl:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &b11lvl_));
        _set_bit(15);
        if (input->ExpectTag(136)) goto parse_b12lvl;
        break;
      }
      
      // optional int32 b12lvl = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_b12lvl:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &b12lvl_));
        _set_bit(16);
        if (input->ExpectTag(144)) goto parse_b13lvl;
        break;
      }
      
      // optional int32 b13lvl = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_b13lvl:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &b13lvl_));
        _set_bit(17);
        if (input->ExpectTag(152)) goto parse_b14lvl;
        break;
      }
      
      // optional int32 b14lvl = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_b14lvl:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &b14lvl_));
        _set_bit(18);
        if (input->ExpectTag(160)) goto parse_b15lvl;
        break;
      }
      
      // optional int32 b15lvl = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_b15lvl:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &b15lvl_));
        _set_bit(19);
        if (input->ExpectTag(168)) goto parse_b16lvl;
        break;
      }
      
      // optional int32 b16lvl = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_b16lvl:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &b16lvl_));
        _set_bit(20);
        if (input->ExpectTag(176)) goto parse_b17lvl;
        break;
      }
      
      // optional int32 b17lvl = 22;
      case 22: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_b17lvl:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &b17lvl_));
        _set_bit(21);
        if (input->ExpectTag(184)) goto parse_b18lvl;
        break;
      }
      
      // optional int32 b18lvl = 23;
      case 23: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_b18lvl:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &b18lvl_));
        _set_bit(22);
        if (input->ExpectTag(192)) goto parse_b19lvl;
        break;
      }
      
      // optional int32 b19lvl = 24;
      case 24: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_b19lvl:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &b19lvl_));
        _set_bit(23);
        if (input->ExpectTag(200)) goto parse_b20lvl;
        break;
      }
      
      // optional int32 b20lvl = 25;
      case 25: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_b20lvl:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &b20lvl_));
        _set_bit(24);
        if (input->ExpectTag(208)) goto parse_b21lvl;
        break;
      }
      
      // optional int32 b21lvl = 26;
      case 26: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_b21lvl:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &b21lvl_));
        _set_bit(25);
        if (input->ExpectTag(216)) goto parse_b22lvl;
        break;
      }
      
      // optional int32 b22lvl = 27;
      case 27: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_b22lvl:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &b22lvl_));
        _set_bit(26);
        if (input->ExpectTag(224)) goto parse_b23lvl;
        break;
      }
      
      // optional int32 b23lvl = 28;
      case 28: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_b23lvl:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &b23lvl_));
        _set_bit(27);
        if (input->ExpectTag(232)) goto parse_b24lvl;
        break;
      }
      
      // optional int32 b24lvl = 29;
      case 29: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_b24lvl:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &b24lvl_));
        _set_bit(28);
        if (input->ExpectTag(240)) goto parse_b25lvl;
        break;
      }
      
      // optional int32 b25lvl = 30;
      case 30: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_b25lvl:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &b25lvl_));
        _set_bit(29);
        if (input->ExpectTag(248)) goto parse_b26lvl;
        break;
      }
      
      // optional int32 b26lvl = 31;
      case 31: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_b26lvl:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &b26lvl_));
        _set_bit(30);
        if (input->ExpectTag(256)) goto parse_b28lvl;
        break;
      }
      
      // optional int32 b28lvl = 32;
      case 32: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_b28lvl:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &b28lvl_));
        _set_bit(31);
        if (input->ExpectTag(264)) goto parse_b29lvl;
        break;
      }
      
      // optional int32 b29lvl = 33;
      case 33: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_b29lvl:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &b29lvl_));
        _set_bit(32);
        if (input->ExpectTag(272)) goto parse_b30lvl;
        break;
      }
      
      // optional int32 b30lvl = 34;
      case 34: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_b30lvl:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &b30lvl_));
        _set_bit(33);
        if (input->ExpectTag(280)) goto parse_b31lvl;
        break;
      }
      
      // optional int32 b31lvl = 35;
      case 35: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_b31lvl:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &b31lvl_));
        _set_bit(34);
        if (input->ExpectTag(288)) goto parse_b33lvl;
        break;
      }
      
      // optional int32 b33lvl = 36;
      case 36: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_b33lvl:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &b33lvl_));
        _set_bit(35);
        if (input->ExpectTag(296)) goto parse_lootpicked;
        break;
      }
      
      // optional int32 lootpicked = 37;
      case 37: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_lootpicked:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &lootpicked_));
        _set_bit(36);
        if (input->ExpectTag(304)) goto parse_singleclickbank1;
        break;
      }
      
      // optional int32 singleclickbank1 = 38;
      case 38: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_singleclickbank1:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &singleclickbank1_));
        _set_bit(37);
        if (input->ExpectTag(312)) goto parse_singleclickbank2;
        break;
      }
      
      // optional int32 singleclickbank2 = 39;
      case 39: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_singleclickbank2:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &singleclickbank2_));
        _set_bit(38);
        if (input->ExpectTag(320)) goto parse_resourcegather1;
        break;
      }
      
      // optional int32 resourcegather1 = 40;
      case 40: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_resourcegather1:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &resourcegather1_));
        _set_bit(39);
        if (input->ExpectTag(328)) goto parse_resourcegather2;
        break;
      }
      
      // optional int32 resourcegather2 = 41;
      case 41: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_resourcegather2:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &resourcegather2_));
        _set_bit(40);
        if (input->ExpectTag(336)) goto parse_worder_count;
        break;
      }
      
      // optional int32 worder_count = 42;
      case 42: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_worder_count:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &worder_count_));
        _set_bit(41);
        if (input->ExpectTag(344)) goto parse_invasion_repel;
        break;
      }
      
      // optional int32 invasion_repel = 43;
      case 43: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_invasion_repel:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &invasion_repel_));
        _set_bit(42);
        if (input->ExpectTag(352)) goto parse_friendInstalls;
        break;
      }
      
      // optional int32 friendInstalls = 44;
      case 44: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_friendInstalls:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &friendinstalls_));
        _set_bit(43);
        if (input->ExpectTag(360)) goto parse_built;
        break;
      }
      
      // optional int32 built = 45;
      case 45: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_built:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &built_));
        _set_bit(44);
        if (input->ExpectTag(368)) goto parse_built3;
        break;
      }
      
      // optional int32 built3 = 46;
      case 46: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_built3:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &built3_));
        _set_bit(45);
        if (input->ExpectTag(376)) goto parse_built10;
        break;
      }
      
      // optional int32 built10 = 47;
      case 47: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_built10:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &built10_));
        _set_bit(46);
        if (input->ExpectTag(384)) goto parse_wallcount;
        break;
      }
      
      // optional int32 wallcount = 48;
      case 48: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_wallcount:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &wallcount_));
        _set_bit(47);
        if (input->ExpectTag(392)) goto parse_artifacts;
        break;
      }
      
      // optional int32 artifacts = 49;
      case 49: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_artifacts:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &artifacts_));
        _set_bit(48);
        if (input->ExpectTag(400)) goto parse_doodad;
        break;
      }
      
      // optional int32 doodad = 50;
      case 50: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_doodad:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &doodad_));
        _set_bit(49);
        if (input->ExpectTag(408)) goto parse_bonus_bookmark;
        break;
      }
      
      // optional int32 bonus_bookmark = 51;
      case 51: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_bonus_bookmark:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &bonus_bookmark_));
        _set_bit(50);
        if (input->ExpectTag(416)) goto parse_bonus_fan;
        break;
      }
      
      // optional int32 bonus_fan = 52;
      case 52: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_bonus_fan:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &bonus_fan_));
        _set_bit(51);
        if (input->ExpectTag(424)) goto parse_bonus_invites;
        break;
      }
      
      // optional int32 bonus_invites = 53;
      case 53: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_bonus_invites:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &bonus_invites_));
        _set_bit(52);
        if (input->ExpectTag(432)) goto parse_bonus_gifts;
        break;
      }
      
      // optional int32 bonus_gifts = 54;
      case 54: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_bonus_gifts:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &bonus_gifts_));
        _set_bit(53);
        if (input->ExpectTag(448)) goto parse__kills;
        break;
      }
      
      // optional int32 _kills = 56;
      case 56: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse__kills:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &_kills_));
        _set_bit(54);
        if (input->ExpectTag(456)) goto parse__killsInAttack;
        break;
      }
      
      // optional int32 _killsInAttack = 57;
      case 57: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse__killsInAttack:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &_killsinattack_));
        _set_bit(55);
        if (input->ExpectTag(464)) goto parse__maxKillsLRS;
        break;
      }
      
      // optional int32 _maxKillsLRS = 58;
      case 58: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse__maxKillsLRS:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &_maxkillslrs_));
        _set_bit(56);
        if (input->ExpectTag(472)) goto parse__maxFlattenLRS;
        break;
      }
      
      // optional int32 _maxFlattenLRS = 59;
      case 59: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse__maxFlattenLRS:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &_maxflattenlrs_));
        _set_bit(57);
        if (input->ExpectTag(480)) goto parse__lrs1;
        break;
      }
      
      // optional int32 _lrs1 = 60;
      case 60: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse__lrs1:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &_lrs1_));
        _set_bit(58);
        if (input->ExpectTag(488)) goto parse__lrs2;
        break;
      }
      
      // optional int32 _lrs2 = 61;
      case 61: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse__lrs2:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &_lrs2_));
        _set_bit(59);
        if (input->ExpectTag(496)) goto parse__lrs3;
        break;
      }
      
      // optional int32 _lrs3 = 62;
      case 62: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse__lrs3:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &_lrs3_));
        _set_bit(60);
        if (input->ExpectTag(504)) goto parse__lrs4;
        break;
      }
      
      // optional int32 _lrs4 = 63;
      case 63: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse__lrs4:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &_lrs4_));
        _set_bit(61);
        if (input->ExpectTag(512)) goto parse__lrs5;
        break;
      }
      
      // optional int32 _lrs5 = 64;
      case 64: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse__lrs5:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &_lrs5_));
        _set_bit(62);
        if (input->ExpectTag(520)) goto parse__lrs6;
        break;
      }
      
      // optional int32 _lrs6 = 65;
      case 65: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse__lrs6:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &_lrs6_));
        _set_bit(63);
        if (input->ExpectTag(528)) goto parse__lrs7;
        break;
      }
      
      // optional int32 _lrs7 = 66;
      case 66: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse__lrs7:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &_lrs7_));
        _set_bit(64);
        if (input->ExpectTag(536)) goto parse__lrs8;
        break;
      }
      
      // optional int32 _lrs8 = 67;
      case 67: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse__lrs8:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &_lrs8_));
        _set_bit(65);
        if (input->ExpectTag(544)) goto parse__lrs9;
        break;
      }
      
      // optional int32 _lrs9 = 68;
      case 68: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse__lrs9:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &_lrs9_));
        _set_bit(66);
        if (input->ExpectTag(552)) goto parse__lrs10;
        break;
      }
      
      // optional int32 _lrs10 = 69;
      case 69: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse__lrs10:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &_lrs10_));
        _set_bit(67);
        if (input->ExpectTag(560)) goto parse__resLoot;
        break;
      }
      
      // optional int32 _resLoot = 70;
      case 70: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse__resLoot:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &_resloot_));
        _set_bit(68);
        if (input->ExpectTag(568)) goto parse__destroy_base;
        break;
      }
      
      // optional int32 _destroy_base = 71;
      case 71: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse__destroy_base:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &_destroy_base_));
        _set_bit(69);
        if (input->ExpectTag(576)) goto parse__attack_enemy;
        break;
      }
      
      // optional int32 _attack_enemy = 72;
      case 72: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse__attack_enemy:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &_attack_enemy_));
        _set_bit(70);
        if (input->ExpectTag(584)) goto parse__qzoneActive;
        break;
      }
      
      // optional int32 _qzoneActive = 73;
      case 73: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse__qzoneActive:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &_qzoneactive_));
        _set_bit(71);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DB_QuestRule::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    DB_QuestRule::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional int32 blvl = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->blvl(), output);
  }
  
  // optional int32 brlvl = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->brlvl(), output);
  }
  
  // optional int32 b1lvl = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->b1lvl(), output);
  }
  
  // optional int32 b1count = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->b1count(), output);
  }
  
  // optional int32 b2lvl = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->b2lvl(), output);
  }
  
  // optional int32 b2count = 6;
  if (_has_bit(5)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->b2count(), output);
  }
  
  // optional int32 b3lvl = 7;
  if (_has_bit(6)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->b3lvl(), output);
  }
  
  // optional int32 b4lvl = 8;
  if (_has_bit(7)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->b4lvl(), output);
  }
  
  // optional int32 b5lvl = 9;
  if (_has_bit(8)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->b5lvl(), output);
  }
  
  // optional int32 b6lvl = 10;
  if (_has_bit(9)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->b6lvl(), output);
  }
  
  // optional int32 b6count = 11;
  if (_has_bit(10)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->b6count(), output);
  }
  
  // optional int32 b7lvl = 12;
  if (_has_bit(11)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->b7lvl(), output);
  }
  
  // optional int32 b8lvl = 13;
  if (_has_bit(12)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->b8lvl(), output);
  }
  
  // optional int32 b9lvl = 14;
  if (_has_bit(13)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->b9lvl(), output);
  }
  
  // optional int32 b10lvl = 15;
  if (_has_bit(14)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(15, this->b10lvl(), output);
  }
  
  // optional int32 b11lvl = 16;
  if (_has_bit(15)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(16, this->b11lvl(), output);
  }
  
  // optional int32 b12lvl = 17;
  if (_has_bit(16)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(17, this->b12lvl(), output);
  }
  
  // optional int32 b13lvl = 18;
  if (_has_bit(17)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(18, this->b13lvl(), output);
  }
  
  // optional int32 b14lvl = 19;
  if (_has_bit(18)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(19, this->b14lvl(), output);
  }
  
  // optional int32 b15lvl = 20;
  if (_has_bit(19)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(20, this->b15lvl(), output);
  }
  
  // optional int32 b16lvl = 21;
  if (_has_bit(20)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(21, this->b16lvl(), output);
  }
  
  // optional int32 b17lvl = 22;
  if (_has_bit(21)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(22, this->b17lvl(), output);
  }
  
  // optional int32 b18lvl = 23;
  if (_has_bit(22)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(23, this->b18lvl(), output);
  }
  
  // optional int32 b19lvl = 24;
  if (_has_bit(23)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(24, this->b19lvl(), output);
  }
  
  // optional int32 b20lvl = 25;
  if (_has_bit(24)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(25, this->b20lvl(), output);
  }
  
  // optional int32 b21lvl = 26;
  if (_has_bit(25)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(26, this->b21lvl(), output);
  }
  
  // optional int32 b22lvl = 27;
  if (_has_bit(26)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(27, this->b22lvl(), output);
  }
  
  // optional int32 b23lvl = 28;
  if (_has_bit(27)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(28, this->b23lvl(), output);
  }
  
  // optional int32 b24lvl = 29;
  if (_has_bit(28)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(29, this->b24lvl(), output);
  }
  
  // optional int32 b25lvl = 30;
  if (_has_bit(29)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(30, this->b25lvl(), output);
  }
  
  // optional int32 b26lvl = 31;
  if (_has_bit(30)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(31, this->b26lvl(), output);
  }
  
  // optional int32 b28lvl = 32;
  if (_has_bit(31)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(32, this->b28lvl(), output);
  }
  
  // optional int32 b29lvl = 33;
  if (_has_bit(32)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(33, this->b29lvl(), output);
  }
  
  // optional int32 b30lvl = 34;
  if (_has_bit(33)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(34, this->b30lvl(), output);
  }
  
  // optional int32 b31lvl = 35;
  if (_has_bit(34)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(35, this->b31lvl(), output);
  }
  
  // optional int32 b33lvl = 36;
  if (_has_bit(35)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(36, this->b33lvl(), output);
  }
  
  // optional int32 lootpicked = 37;
  if (_has_bit(36)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(37, this->lootpicked(), output);
  }
  
  // optional int32 singleclickbank1 = 38;
  if (_has_bit(37)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(38, this->singleclickbank1(), output);
  }
  
  // optional int32 singleclickbank2 = 39;
  if (_has_bit(38)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(39, this->singleclickbank2(), output);
  }
  
  // optional int32 resourcegather1 = 40;
  if (_has_bit(39)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(40, this->resourcegather1(), output);
  }
  
  // optional int32 resourcegather2 = 41;
  if (_has_bit(40)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(41, this->resourcegather2(), output);
  }
  
  // optional int32 worder_count = 42;
  if (_has_bit(41)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(42, this->worder_count(), output);
  }
  
  // optional int32 invasion_repel = 43;
  if (_has_bit(42)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(43, this->invasion_repel(), output);
  }
  
  // optional int32 friendInstalls = 44;
  if (_has_bit(43)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(44, this->friendinstalls(), output);
  }
  
  // optional int32 built = 45;
  if (_has_bit(44)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(45, this->built(), output);
  }
  
  // optional int32 built3 = 46;
  if (_has_bit(45)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(46, this->built3(), output);
  }
  
  // optional int32 built10 = 47;
  if (_has_bit(46)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(47, this->built10(), output);
  }
  
  // optional int32 wallcount = 48;
  if (_has_bit(47)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(48, this->wallcount(), output);
  }
  
  // optional int32 artifacts = 49;
  if (_has_bit(48)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(49, this->artifacts(), output);
  }
  
  // optional int32 doodad = 50;
  if (_has_bit(49)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(50, this->doodad(), output);
  }
  
  // optional int32 bonus_bookmark = 51;
  if (_has_bit(50)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(51, this->bonus_bookmark(), output);
  }
  
  // optional int32 bonus_fan = 52;
  if (_has_bit(51)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(52, this->bonus_fan(), output);
  }
  
  // optional int32 bonus_invites = 53;
  if (_has_bit(52)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(53, this->bonus_invites(), output);
  }
  
  // optional int32 bonus_gifts = 54;
  if (_has_bit(53)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(54, this->bonus_gifts(), output);
  }
  
  // optional int32 _kills = 56;
  if (_has_bit(54)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(56, this->_kills(), output);
  }
  
  // optional int32 _killsInAttack = 57;
  if (_has_bit(55)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(57, this->_killsinattack(), output);
  }
  
  // optional int32 _maxKillsLRS = 58;
  if (_has_bit(56)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(58, this->_maxkillslrs(), output);
  }
  
  // optional int32 _maxFlattenLRS = 59;
  if (_has_bit(57)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(59, this->_maxflattenlrs(), output);
  }
  
  // optional int32 _lrs1 = 60;
  if (_has_bit(58)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(60, this->_lrs1(), output);
  }
  
  // optional int32 _lrs2 = 61;
  if (_has_bit(59)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(61, this->_lrs2(), output);
  }
  
  // optional int32 _lrs3 = 62;
  if (_has_bit(60)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(62, this->_lrs3(), output);
  }
  
  // optional int32 _lrs4 = 63;
  if (_has_bit(61)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(63, this->_lrs4(), output);
  }
  
  // optional int32 _lrs5 = 64;
  if (_has_bit(62)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(64, this->_lrs5(), output);
  }
  
  // optional int32 _lrs6 = 65;
  if (_has_bit(63)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(65, this->_lrs6(), output);
  }
  
  // optional int32 _lrs7 = 66;
  if (_has_bit(64)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(66, this->_lrs7(), output);
  }
  
  // optional int32 _lrs8 = 67;
  if (_has_bit(65)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(67, this->_lrs8(), output);
  }
  
  // optional int32 _lrs9 = 68;
  if (_has_bit(66)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(68, this->_lrs9(), output);
  }
  
  // optional int32 _lrs10 = 69;
  if (_has_bit(67)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(69, this->_lrs10(), output);
  }
  
  // optional int32 _resLoot = 70;
  if (_has_bit(68)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(70, this->_resloot(), output);
  }
  
  // optional int32 _destroy_base = 71;
  if (_has_bit(69)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(71, this->_destroy_base(), output);
  }
  
  // optional int32 _attack_enemy = 72;
  if (_has_bit(70)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(72, this->_attack_enemy(), output);
  }
  
  // optional int32 _qzoneActive = 73;
  if (_has_bit(71)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(73, this->_qzoneactive(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DB_QuestRule::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 blvl = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->blvl(), target);
  }
  
  // optional int32 brlvl = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->brlvl(), target);
  }
  
  // optional int32 b1lvl = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->b1lvl(), target);
  }
  
  // optional int32 b1count = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->b1count(), target);
  }
  
  // optional int32 b2lvl = 5;
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->b2lvl(), target);
  }
  
  // optional int32 b2count = 6;
  if (_has_bit(5)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->b2count(), target);
  }
  
  // optional int32 b3lvl = 7;
  if (_has_bit(6)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->b3lvl(), target);
  }
  
  // optional int32 b4lvl = 8;
  if (_has_bit(7)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->b4lvl(), target);
  }
  
  // optional int32 b5lvl = 9;
  if (_has_bit(8)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->b5lvl(), target);
  }
  
  // optional int32 b6lvl = 10;
  if (_has_bit(9)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->b6lvl(), target);
  }
  
  // optional int32 b6count = 11;
  if (_has_bit(10)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->b6count(), target);
  }
  
  // optional int32 b7lvl = 12;
  if (_has_bit(11)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->b7lvl(), target);
  }
  
  // optional int32 b8lvl = 13;
  if (_has_bit(12)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->b8lvl(), target);
  }
  
  // optional int32 b9lvl = 14;
  if (_has_bit(13)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(14, this->b9lvl(), target);
  }
  
  // optional int32 b10lvl = 15;
  if (_has_bit(14)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(15, this->b10lvl(), target);
  }
  
  // optional int32 b11lvl = 16;
  if (_has_bit(15)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(16, this->b11lvl(), target);
  }
  
  // optional int32 b12lvl = 17;
  if (_has_bit(16)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(17, this->b12lvl(), target);
  }
  
  // optional int32 b13lvl = 18;
  if (_has_bit(17)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(18, this->b13lvl(), target);
  }
  
  // optional int32 b14lvl = 19;
  if (_has_bit(18)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(19, this->b14lvl(), target);
  }
  
  // optional int32 b15lvl = 20;
  if (_has_bit(19)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(20, this->b15lvl(), target);
  }
  
  // optional int32 b16lvl = 21;
  if (_has_bit(20)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(21, this->b16lvl(), target);
  }
  
  // optional int32 b17lvl = 22;
  if (_has_bit(21)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(22, this->b17lvl(), target);
  }
  
  // optional int32 b18lvl = 23;
  if (_has_bit(22)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(23, this->b18lvl(), target);
  }
  
  // optional int32 b19lvl = 24;
  if (_has_bit(23)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(24, this->b19lvl(), target);
  }
  
  // optional int32 b20lvl = 25;
  if (_has_bit(24)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(25, this->b20lvl(), target);
  }
  
  // optional int32 b21lvl = 26;
  if (_has_bit(25)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(26, this->b21lvl(), target);
  }
  
  // optional int32 b22lvl = 27;
  if (_has_bit(26)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(27, this->b22lvl(), target);
  }
  
  // optional int32 b23lvl = 28;
  if (_has_bit(27)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(28, this->b23lvl(), target);
  }
  
  // optional int32 b24lvl = 29;
  if (_has_bit(28)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(29, this->b24lvl(), target);
  }
  
  // optional int32 b25lvl = 30;
  if (_has_bit(29)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(30, this->b25lvl(), target);
  }
  
  // optional int32 b26lvl = 31;
  if (_has_bit(30)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(31, this->b26lvl(), target);
  }
  
  // optional int32 b28lvl = 32;
  if (_has_bit(31)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(32, this->b28lvl(), target);
  }
  
  // optional int32 b29lvl = 33;
  if (_has_bit(32)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(33, this->b29lvl(), target);
  }
  
  // optional int32 b30lvl = 34;
  if (_has_bit(33)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(34, this->b30lvl(), target);
  }
  
  // optional int32 b31lvl = 35;
  if (_has_bit(34)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(35, this->b31lvl(), target);
  }
  
  // optional int32 b33lvl = 36;
  if (_has_bit(35)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(36, this->b33lvl(), target);
  }
  
  // optional int32 lootpicked = 37;
  if (_has_bit(36)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(37, this->lootpicked(), target);
  }
  
  // optional int32 singleclickbank1 = 38;
  if (_has_bit(37)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(38, this->singleclickbank1(), target);
  }
  
  // optional int32 singleclickbank2 = 39;
  if (_has_bit(38)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(39, this->singleclickbank2(), target);
  }
  
  // optional int32 resourcegather1 = 40;
  if (_has_bit(39)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(40, this->resourcegather1(), target);
  }
  
  // optional int32 resourcegather2 = 41;
  if (_has_bit(40)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(41, this->resourcegather2(), target);
  }
  
  // optional int32 worder_count = 42;
  if (_has_bit(41)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(42, this->worder_count(), target);
  }
  
  // optional int32 invasion_repel = 43;
  if (_has_bit(42)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(43, this->invasion_repel(), target);
  }
  
  // optional int32 friendInstalls = 44;
  if (_has_bit(43)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(44, this->friendinstalls(), target);
  }
  
  // optional int32 built = 45;
  if (_has_bit(44)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(45, this->built(), target);
  }
  
  // optional int32 built3 = 46;
  if (_has_bit(45)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(46, this->built3(), target);
  }
  
  // optional int32 built10 = 47;
  if (_has_bit(46)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(47, this->built10(), target);
  }
  
  // optional int32 wallcount = 48;
  if (_has_bit(47)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(48, this->wallcount(), target);
  }
  
  // optional int32 artifacts = 49;
  if (_has_bit(48)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(49, this->artifacts(), target);
  }
  
  // optional int32 doodad = 50;
  if (_has_bit(49)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(50, this->doodad(), target);
  }
  
  // optional int32 bonus_bookmark = 51;
  if (_has_bit(50)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(51, this->bonus_bookmark(), target);
  }
  
  // optional int32 bonus_fan = 52;
  if (_has_bit(51)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(52, this->bonus_fan(), target);
  }
  
  // optional int32 bonus_invites = 53;
  if (_has_bit(52)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(53, this->bonus_invites(), target);
  }
  
  // optional int32 bonus_gifts = 54;
  if (_has_bit(53)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(54, this->bonus_gifts(), target);
  }
  
  // optional int32 _kills = 56;
  if (_has_bit(54)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(56, this->_kills(), target);
  }
  
  // optional int32 _killsInAttack = 57;
  if (_has_bit(55)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(57, this->_killsinattack(), target);
  }
  
  // optional int32 _maxKillsLRS = 58;
  if (_has_bit(56)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(58, this->_maxkillslrs(), target);
  }
  
  // optional int32 _maxFlattenLRS = 59;
  if (_has_bit(57)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(59, this->_maxflattenlrs(), target);
  }
  
  // optional int32 _lrs1 = 60;
  if (_has_bit(58)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(60, this->_lrs1(), target);
  }
  
  // optional int32 _lrs2 = 61;
  if (_has_bit(59)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(61, this->_lrs2(), target);
  }
  
  // optional int32 _lrs3 = 62;
  if (_has_bit(60)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(62, this->_lrs3(), target);
  }
  
  // optional int32 _lrs4 = 63;
  if (_has_bit(61)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(63, this->_lrs4(), target);
  }
  
  // optional int32 _lrs5 = 64;
  if (_has_bit(62)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(64, this->_lrs5(), target);
  }
  
  // optional int32 _lrs6 = 65;
  if (_has_bit(63)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(65, this->_lrs6(), target);
  }
  
  // optional int32 _lrs7 = 66;
  if (_has_bit(64)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(66, this->_lrs7(), target);
  }
  
  // optional int32 _lrs8 = 67;
  if (_has_bit(65)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(67, this->_lrs8(), target);
  }
  
  // optional int32 _lrs9 = 68;
  if (_has_bit(66)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(68, this->_lrs9(), target);
  }
  
  // optional int32 _lrs10 = 69;
  if (_has_bit(67)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(69, this->_lrs10(), target);
  }
  
  // optional int32 _resLoot = 70;
  if (_has_bit(68)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(70, this->_resloot(), target);
  }
  
  // optional int32 _destroy_base = 71;
  if (_has_bit(69)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(71, this->_destroy_base(), target);
  }
  
  // optional int32 _attack_enemy = 72;
  if (_has_bit(70)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(72, this->_attack_enemy(), target);
  }
  
  // optional int32 _qzoneActive = 73;
  if (_has_bit(71)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(73, this->_qzoneactive(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DB_QuestRule::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 blvl = 1;
    if (has_blvl()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->blvl());
    }
    
    // optional int32 brlvl = 2;
    if (has_brlvl()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->brlvl());
    }
    
    // optional int32 b1lvl = 3;
    if (has_b1lvl()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->b1lvl());
    }
    
    // optional int32 b1count = 4;
    if (has_b1count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->b1count());
    }
    
    // optional int32 b2lvl = 5;
    if (has_b2lvl()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->b2lvl());
    }
    
    // optional int32 b2count = 6;
    if (has_b2count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->b2count());
    }
    
    // optional int32 b3lvl = 7;
    if (has_b3lvl()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->b3lvl());
    }
    
    // optional int32 b4lvl = 8;
    if (has_b4lvl()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->b4lvl());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 b5lvl = 9;
    if (has_b5lvl()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->b5lvl());
    }
    
    // optional int32 b6lvl = 10;
    if (has_b6lvl()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->b6lvl());
    }
    
    // optional int32 b6count = 11;
    if (has_b6count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->b6count());
    }
    
    // optional int32 b7lvl = 12;
    if (has_b7lvl()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->b7lvl());
    }
    
    // optional int32 b8lvl = 13;
    if (has_b8lvl()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->b8lvl());
    }
    
    // optional int32 b9lvl = 14;
    if (has_b9lvl()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->b9lvl());
    }
    
    // optional int32 b10lvl = 15;
    if (has_b10lvl()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->b10lvl());
    }
    
    // optional int32 b11lvl = 16;
    if (has_b11lvl()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->b11lvl());
    }
    
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional int32 b12lvl = 17;
    if (has_b12lvl()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->b12lvl());
    }
    
    // optional int32 b13lvl = 18;
    if (has_b13lvl()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->b13lvl());
    }
    
    // optional int32 b14lvl = 19;
    if (has_b14lvl()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->b14lvl());
    }
    
    // optional int32 b15lvl = 20;
    if (has_b15lvl()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->b15lvl());
    }
    
    // optional int32 b16lvl = 21;
    if (has_b16lvl()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->b16lvl());
    }
    
    // optional int32 b17lvl = 22;
    if (has_b17lvl()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->b17lvl());
    }
    
    // optional int32 b18lvl = 23;
    if (has_b18lvl()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->b18lvl());
    }
    
    // optional int32 b19lvl = 24;
    if (has_b19lvl()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->b19lvl());
    }
    
  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    // optional int32 b20lvl = 25;
    if (has_b20lvl()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->b20lvl());
    }
    
    // optional int32 b21lvl = 26;
    if (has_b21lvl()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->b21lvl());
    }
    
    // optional int32 b22lvl = 27;
    if (has_b22lvl()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->b22lvl());
    }
    
    // optional int32 b23lvl = 28;
    if (has_b23lvl()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->b23lvl());
    }
    
    // optional int32 b24lvl = 29;
    if (has_b24lvl()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->b24lvl());
    }
    
    // optional int32 b25lvl = 30;
    if (has_b25lvl()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->b25lvl());
    }
    
    // optional int32 b26lvl = 31;
    if (has_b26lvl()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->b26lvl());
    }
    
    // optional int32 b28lvl = 32;
    if (has_b28lvl()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->b28lvl());
    }
    
  }
  if (_has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    // optional int32 b29lvl = 33;
    if (has_b29lvl()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->b29lvl());
    }
    
    // optional int32 b30lvl = 34;
    if (has_b30lvl()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->b30lvl());
    }
    
    // optional int32 b31lvl = 35;
    if (has_b31lvl()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->b31lvl());
    }
    
    // optional int32 b33lvl = 36;
    if (has_b33lvl()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->b33lvl());
    }
    
    // optional int32 lootpicked = 37;
    if (has_lootpicked()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->lootpicked());
    }
    
    // optional int32 singleclickbank1 = 38;
    if (has_singleclickbank1()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->singleclickbank1());
    }
    
    // optional int32 singleclickbank2 = 39;
    if (has_singleclickbank2()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->singleclickbank2());
    }
    
    // optional int32 resourcegather1 = 40;
    if (has_resourcegather1()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->resourcegather1());
    }
    
  }
  if (_has_bits_[40 / 32] & (0xffu << (40 % 32))) {
    // optional int32 resourcegather2 = 41;
    if (has_resourcegather2()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->resourcegather2());
    }
    
    // optional int32 worder_count = 42;
    if (has_worder_count()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->worder_count());
    }
    
    // optional int32 invasion_repel = 43;
    if (has_invasion_repel()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->invasion_repel());
    }
    
    // optional int32 friendInstalls = 44;
    if (has_friendinstalls()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->friendinstalls());
    }
    
    // optional int32 built = 45;
    if (has_built()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->built());
    }
    
    // optional int32 built3 = 46;
    if (has_built3()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->built3());
    }
    
    // optional int32 built10 = 47;
    if (has_built10()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->built10());
    }
    
    // optional int32 wallcount = 48;
    if (has_wallcount()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->wallcount());
    }
    
  }
  if (_has_bits_[48 / 32] & (0xffu << (48 % 32))) {
    // optional int32 artifacts = 49;
    if (has_artifacts()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->artifacts());
    }
    
    // optional int32 doodad = 50;
    if (has_doodad()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->doodad());
    }
    
    // optional int32 bonus_bookmark = 51;
    if (has_bonus_bookmark()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bonus_bookmark());
    }
    
    // optional int32 bonus_fan = 52;
    if (has_bonus_fan()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bonus_fan());
    }
    
    // optional int32 bonus_invites = 53;
    if (has_bonus_invites()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bonus_invites());
    }
    
    // optional int32 bonus_gifts = 54;
    if (has_bonus_gifts()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bonus_gifts());
    }
    
    // optional int32 _kills = 56;
    if (has__kills()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->_kills());
    }
    
    // optional int32 _killsInAttack = 57;
    if (has__killsinattack()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->_killsinattack());
    }
    
  }
  if (_has_bits_[56 / 32] & (0xffu << (56 % 32))) {
    // optional int32 _maxKillsLRS = 58;
    if (has__maxkillslrs()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->_maxkillslrs());
    }
    
    // optional int32 _maxFlattenLRS = 59;
    if (has__maxflattenlrs()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->_maxflattenlrs());
    }
    
    // optional int32 _lrs1 = 60;
    if (has__lrs1()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->_lrs1());
    }
    
    // optional int32 _lrs2 = 61;
    if (has__lrs2()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->_lrs2());
    }
    
    // optional int32 _lrs3 = 62;
    if (has__lrs3()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->_lrs3());
    }
    
    // optional int32 _lrs4 = 63;
    if (has__lrs4()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->_lrs4());
    }
    
    // optional int32 _lrs5 = 64;
    if (has__lrs5()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->_lrs5());
    }
    
    // optional int32 _lrs6 = 65;
    if (has__lrs6()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->_lrs6());
    }
    
  }
  if (_has_bits_[64 / 32] & (0xffu << (64 % 32))) {
    // optional int32 _lrs7 = 66;
    if (has__lrs7()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->_lrs7());
    }
    
    // optional int32 _lrs8 = 67;
    if (has__lrs8()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->_lrs8());
    }
    
    // optional int32 _lrs9 = 68;
    if (has__lrs9()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->_lrs9());
    }
    
    // optional int32 _lrs10 = 69;
    if (has__lrs10()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->_lrs10());
    }
    
    // optional int32 _resLoot = 70;
    if (has__resloot()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->_resloot());
    }
    
    // optional int32 _destroy_base = 71;
    if (has__destroy_base()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->_destroy_base());
    }
    
    // optional int32 _attack_enemy = 72;
    if (has__attack_enemy()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->_attack_enemy());
    }
    
    // optional int32 _qzoneActive = 73;
    if (has__qzoneactive()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->_qzoneactive());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void DB_QuestRule::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DB_QuestRule* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DB_QuestRule*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DB_QuestRule::MergeFrom(const DB_QuestRule& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_blvl(from.blvl());
    }
    if (from._has_bit(1)) {
      set_brlvl(from.brlvl());
    }
    if (from._has_bit(2)) {
      set_b1lvl(from.b1lvl());
    }
    if (from._has_bit(3)) {
      set_b1count(from.b1count());
    }
    if (from._has_bit(4)) {
      set_b2lvl(from.b2lvl());
    }
    if (from._has_bit(5)) {
      set_b2count(from.b2count());
    }
    if (from._has_bit(6)) {
      set_b3lvl(from.b3lvl());
    }
    if (from._has_bit(7)) {
      set_b4lvl(from.b4lvl());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from._has_bit(8)) {
      set_b5lvl(from.b5lvl());
    }
    if (from._has_bit(9)) {
      set_b6lvl(from.b6lvl());
    }
    if (from._has_bit(10)) {
      set_b6count(from.b6count());
    }
    if (from._has_bit(11)) {
      set_b7lvl(from.b7lvl());
    }
    if (from._has_bit(12)) {
      set_b8lvl(from.b8lvl());
    }
    if (from._has_bit(13)) {
      set_b9lvl(from.b9lvl());
    }
    if (from._has_bit(14)) {
      set_b10lvl(from.b10lvl());
    }
    if (from._has_bit(15)) {
      set_b11lvl(from.b11lvl());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from._has_bit(16)) {
      set_b12lvl(from.b12lvl());
    }
    if (from._has_bit(17)) {
      set_b13lvl(from.b13lvl());
    }
    if (from._has_bit(18)) {
      set_b14lvl(from.b14lvl());
    }
    if (from._has_bit(19)) {
      set_b15lvl(from.b15lvl());
    }
    if (from._has_bit(20)) {
      set_b16lvl(from.b16lvl());
    }
    if (from._has_bit(21)) {
      set_b17lvl(from.b17lvl());
    }
    if (from._has_bit(22)) {
      set_b18lvl(from.b18lvl());
    }
    if (from._has_bit(23)) {
      set_b19lvl(from.b19lvl());
    }
  }
  if (from._has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (from._has_bit(24)) {
      set_b20lvl(from.b20lvl());
    }
    if (from._has_bit(25)) {
      set_b21lvl(from.b21lvl());
    }
    if (from._has_bit(26)) {
      set_b22lvl(from.b22lvl());
    }
    if (from._has_bit(27)) {
      set_b23lvl(from.b23lvl());
    }
    if (from._has_bit(28)) {
      set_b24lvl(from.b24lvl());
    }
    if (from._has_bit(29)) {
      set_b25lvl(from.b25lvl());
    }
    if (from._has_bit(30)) {
      set_b26lvl(from.b26lvl());
    }
    if (from._has_bit(31)) {
      set_b28lvl(from.b28lvl());
    }
  }
  if (from._has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    if (from._has_bit(32)) {
      set_b29lvl(from.b29lvl());
    }
    if (from._has_bit(33)) {
      set_b30lvl(from.b30lvl());
    }
    if (from._has_bit(34)) {
      set_b31lvl(from.b31lvl());
    }
    if (from._has_bit(35)) {
      set_b33lvl(from.b33lvl());
    }
    if (from._has_bit(36)) {
      set_lootpicked(from.lootpicked());
    }
    if (from._has_bit(37)) {
      set_singleclickbank1(from.singleclickbank1());
    }
    if (from._has_bit(38)) {
      set_singleclickbank2(from.singleclickbank2());
    }
    if (from._has_bit(39)) {
      set_resourcegather1(from.resourcegather1());
    }
  }
  if (from._has_bits_[40 / 32] & (0xffu << (40 % 32))) {
    if (from._has_bit(40)) {
      set_resourcegather2(from.resourcegather2());
    }
    if (from._has_bit(41)) {
      set_worder_count(from.worder_count());
    }
    if (from._has_bit(42)) {
      set_invasion_repel(from.invasion_repel());
    }
    if (from._has_bit(43)) {
      set_friendinstalls(from.friendinstalls());
    }
    if (from._has_bit(44)) {
      set_built(from.built());
    }
    if (from._has_bit(45)) {
      set_built3(from.built3());
    }
    if (from._has_bit(46)) {
      set_built10(from.built10());
    }
    if (from._has_bit(47)) {
      set_wallcount(from.wallcount());
    }
  }
  if (from._has_bits_[48 / 32] & (0xffu << (48 % 32))) {
    if (from._has_bit(48)) {
      set_artifacts(from.artifacts());
    }
    if (from._has_bit(49)) {
      set_doodad(from.doodad());
    }
    if (from._has_bit(50)) {
      set_bonus_bookmark(from.bonus_bookmark());
    }
    if (from._has_bit(51)) {
      set_bonus_fan(from.bonus_fan());
    }
    if (from._has_bit(52)) {
      set_bonus_invites(from.bonus_invites());
    }
    if (from._has_bit(53)) {
      set_bonus_gifts(from.bonus_gifts());
    }
    if (from._has_bit(54)) {
      set__kills(from._kills());
    }
    if (from._has_bit(55)) {
      set__killsinattack(from._killsinattack());
    }
  }
  if (from._has_bits_[56 / 32] & (0xffu << (56 % 32))) {
    if (from._has_bit(56)) {
      set__maxkillslrs(from._maxkillslrs());
    }
    if (from._has_bit(57)) {
      set__maxflattenlrs(from._maxflattenlrs());
    }
    if (from._has_bit(58)) {
      set__lrs1(from._lrs1());
    }
    if (from._has_bit(59)) {
      set__lrs2(from._lrs2());
    }
    if (from._has_bit(60)) {
      set__lrs3(from._lrs3());
    }
    if (from._has_bit(61)) {
      set__lrs4(from._lrs4());
    }
    if (from._has_bit(62)) {
      set__lrs5(from._lrs5());
    }
    if (from._has_bit(63)) {
      set__lrs6(from._lrs6());
    }
  }
  if (from._has_bits_[64 / 32] & (0xffu << (64 % 32))) {
    if (from._has_bit(64)) {
      set__lrs7(from._lrs7());
    }
    if (from._has_bit(65)) {
      set__lrs8(from._lrs8());
    }
    if (from._has_bit(66)) {
      set__lrs9(from._lrs9());
    }
    if (from._has_bit(67)) {
      set__lrs10(from._lrs10());
    }
    if (from._has_bit(68)) {
      set__resloot(from._resloot());
    }
    if (from._has_bit(69)) {
      set__destroy_base(from._destroy_base());
    }
    if (from._has_bit(70)) {
      set__attack_enemy(from._attack_enemy());
    }
    if (from._has_bit(71)) {
      set__qzoneactive(from._qzoneactive());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DB_QuestRule::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DB_QuestRule::CopyFrom(const DB_QuestRule& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DB_QuestRule::IsInitialized() const {
  
  return true;
}

void DB_QuestRule::Swap(DB_QuestRule* other) {
  if (other != this) {
    std::swap(blvl_, other->blvl_);
    std::swap(brlvl_, other->brlvl_);
    std::swap(b1lvl_, other->b1lvl_);
    std::swap(b1count_, other->b1count_);
    std::swap(b2lvl_, other->b2lvl_);
    std::swap(b2count_, other->b2count_);
    std::swap(b3lvl_, other->b3lvl_);
    std::swap(b4lvl_, other->b4lvl_);
    std::swap(b5lvl_, other->b5lvl_);
    std::swap(b6lvl_, other->b6lvl_);
    std::swap(b6count_, other->b6count_);
    std::swap(b7lvl_, other->b7lvl_);
    std::swap(b8lvl_, other->b8lvl_);
    std::swap(b9lvl_, other->b9lvl_);
    std::swap(b10lvl_, other->b10lvl_);
    std::swap(b11lvl_, other->b11lvl_);
    std::swap(b12lvl_, other->b12lvl_);
    std::swap(b13lvl_, other->b13lvl_);
    std::swap(b14lvl_, other->b14lvl_);
    std::swap(b15lvl_, other->b15lvl_);
    std::swap(b16lvl_, other->b16lvl_);
    std::swap(b17lvl_, other->b17lvl_);
    std::swap(b18lvl_, other->b18lvl_);
    std::swap(b19lvl_, other->b19lvl_);
    std::swap(b20lvl_, other->b20lvl_);
    std::swap(b21lvl_, other->b21lvl_);
    std::swap(b22lvl_, other->b22lvl_);
    std::swap(b23lvl_, other->b23lvl_);
    std::swap(b24lvl_, other->b24lvl_);
    std::swap(b25lvl_, other->b25lvl_);
    std::swap(b26lvl_, other->b26lvl_);
    std::swap(b28lvl_, other->b28lvl_);
    std::swap(b29lvl_, other->b29lvl_);
    std::swap(b30lvl_, other->b30lvl_);
    std::swap(b31lvl_, other->b31lvl_);
    std::swap(b33lvl_, other->b33lvl_);
    std::swap(lootpicked_, other->lootpicked_);
    std::swap(singleclickbank1_, other->singleclickbank1_);
    std::swap(singleclickbank2_, other->singleclickbank2_);
    std::swap(resourcegather1_, other->resourcegather1_);
    std::swap(resourcegather2_, other->resourcegather2_);
    std::swap(worder_count_, other->worder_count_);
    std::swap(invasion_repel_, other->invasion_repel_);
    std::swap(friendinstalls_, other->friendinstalls_);
    std::swap(built_, other->built_);
    std::swap(built3_, other->built3_);
    std::swap(built10_, other->built10_);
    std::swap(wallcount_, other->wallcount_);
    std::swap(artifacts_, other->artifacts_);
    std::swap(doodad_, other->doodad_);
    std::swap(bonus_bookmark_, other->bonus_bookmark_);
    std::swap(bonus_fan_, other->bonus_fan_);
    std::swap(bonus_invites_, other->bonus_invites_);
    std::swap(bonus_gifts_, other->bonus_gifts_);
    std::swap(_kills_, other->_kills_);
    std::swap(_killsinattack_, other->_killsinattack_);
    std::swap(_maxkillslrs_, other->_maxkillslrs_);
    std::swap(_maxflattenlrs_, other->_maxflattenlrs_);
    std::swap(_lrs1_, other->_lrs1_);
    std::swap(_lrs2_, other->_lrs2_);
    std::swap(_lrs3_, other->_lrs3_);
    std::swap(_lrs4_, other->_lrs4_);
    std::swap(_lrs5_, other->_lrs5_);
    std::swap(_lrs6_, other->_lrs6_);
    std::swap(_lrs7_, other->_lrs7_);
    std::swap(_lrs8_, other->_lrs8_);
    std::swap(_lrs9_, other->_lrs9_);
    std::swap(_lrs10_, other->_lrs10_);
    std::swap(_resloot_, other->_resloot_);
    std::swap(_destroy_base_, other->_destroy_base_);
    std::swap(_attack_enemy_, other->_attack_enemy_);
    std::swap(_qzoneactive_, other->_qzoneactive_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_has_bits_[1], other->_has_bits_[1]);
    std::swap(_has_bits_[2], other->_has_bits_[2]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DB_QuestRule::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DB_QuestRule_descriptor_;
  metadata.reflection = DB_QuestRule_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DB_Quest::kGFieldNumber;
const int DB_Quest::kCFieldNumber;
const int DB_Quest::kFinishedQuestFieldNumber;
const int DB_Quest::kFinishQuestFieldNumber;
const int DB_Quest::kT1FieldNumber;
const int DB_Quest::kT2FieldNumber;
const int DB_Quest::kT3FieldNumber;
const int DB_Quest::kT4FieldNumber;
#endif  // !_MSC_VER

DB_Quest::DB_Quest() {
  SharedCtor();
}

void DB_Quest::InitAsDefaultInstance() {
  g_ = const_cast< ::DB_QuestRule*>(&::DB_QuestRule::default_instance());
}

DB_Quest::DB_Quest(const DB_Quest& from) {
  SharedCtor();
  MergeFrom(from);
}

void DB_Quest::SharedCtor() {
  _cached_size_ = 0;
  g_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DB_Quest::~DB_Quest() {
  SharedDtor();
}

void DB_Quest::SharedDtor() {
  if (this != default_instance_) {
    delete g_;
  }
}

const ::google::protobuf::Descriptor* DB_Quest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DB_Quest_descriptor_;
}

const DB_Quest& DB_Quest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dbinterface_5fsub_2eproto();  return *default_instance_;
}

DB_Quest* DB_Quest::default_instance_ = NULL;

DB_Quest* DB_Quest::New() const {
  return new DB_Quest;
}

void DB_Quest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (g_ != NULL) g_->::DB_QuestRule::Clear();
    }
  }
  c_.Clear();
  finished_quest_.Clear();
  finishquest_.Clear();
  t1_.Clear();
  t2_.Clear();
  t3_.Clear();
  t4_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DB_Quest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .DB_QuestRule g = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
             input, mutable_g()));
        if (input->ExpectTag(18)) goto parse_c;
        break;
      }
      
      // repeated string c = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_c:
        DO_(::google::protobuf::internal::WireFormatLite::ReadString(
              input, this->add_c()));
        ::google::protobuf::internal::WireFormat::VerifyUTF8String(
          this->c(0).data(), this->c(0).length(),
          ::google::protobuf::internal::WireFormat::PARSE);
        if (input->ExpectTag(18)) goto parse_c;
        if (input->ExpectTag(24)) goto parse_finishQuest;
        break;
      }
      
      // repeated int32 finishQuest = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_finishQuest:
        ::google::protobuf::int32 value;
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &value));
        add_finishquest(value);
        if (input->ExpectTag(24)) goto parse_finishQuest;
        if (input->ExpectTag(34)) goto parse_t1;
        break;
      }
      
      // repeated string t1 = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_t1:
        DO_(::google::protobuf::internal::WireFormatLite::ReadString(
              input, this->add_t1()));
        ::google::protobuf::internal::WireFormat::VerifyUTF8String(
          this->t1(0).data(), this->t1(0).length(),
          ::google::protobuf::internal::WireFormat::PARSE);
        if (input->ExpectTag(34)) goto parse_t1;
        if (input->ExpectTag(42)) goto parse_t2;
        break;
      }
      
      // repeated string t2 = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_t2:
        DO_(::google::protobuf::internal::WireFormatLite::ReadString(
              input, this->add_t2()));
        ::google::protobuf::internal::WireFormat::VerifyUTF8String(
          this->t2(0).data(), this->t2(0).length(),
          ::google::protobuf::internal::WireFormat::PARSE);
        if (input->ExpectTag(42)) goto parse_t2;
        if (input->ExpectTag(50)) goto parse_t3;
        break;
      }
      
      // repeated string t3 = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_t3:
        DO_(::google::protobuf::internal::WireFormatLite::ReadString(
              input, this->add_t3()));
        ::google::protobuf::internal::WireFormat::VerifyUTF8String(
          this->t3(0).data(), this->t3(0).length(),
          ::google::protobuf::internal::WireFormat::PARSE);
        if (input->ExpectTag(50)) goto parse_t3;
        if (input->ExpectTag(58)) goto parse_t4;
        break;
      }
      
      // repeated string t4 = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_t4:
        DO_(::google::protobuf::internal::WireFormatLite::ReadString(
              input, this->add_t4()));
        ::google::protobuf::internal::WireFormat::VerifyUTF8String(
          this->t4(0).data(), this->t4(0).length(),
          ::google::protobuf::internal::WireFormat::PARSE);
        if (input->ExpectTag(58)) goto parse_t4;
        if (input->ExpectTag(138)) goto parse_finished_quest;
        break;
      }
      
      // repeated string finished_quest = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_finished_quest:
        DO_(::google::protobuf::internal::WireFormatLite::ReadString(
              input, this->add_finished_quest()));
        ::google::protobuf::internal::WireFormat::VerifyUTF8String(
          this->finished_quest(0).data(), this->finished_quest(0).length(),
          ::google::protobuf::internal::WireFormat::PARSE);
        if (input->ExpectTag(138)) goto parse_finished_quest;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DB_Quest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    DB_Quest::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional .DB_QuestRule g = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      1, this->g(), output);
  }
  
  // repeated string c = 2;
  for (int i = 0; i < this->c_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->c(i).data(), this->c(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->c(i), output);
  }
  
  // repeated int32 finishQuest = 3;
  for (int i = 0; i < this->finishquest_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      3, this->finishquest(i), output);
  }
  
  // repeated string t1 = 4;
  for (int i = 0; i < this->t1_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->t1(i).data(), this->t1(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->t1(i), output);
  }
  
  // repeated string t2 = 5;
  for (int i = 0; i < this->t2_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->t2(i).data(), this->t2(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->t2(i), output);
  }
  
  // repeated string t3 = 6;
  for (int i = 0; i < this->t3_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->t3(i).data(), this->t3(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->t3(i), output);
  }
  
  // repeated string t4 = 7;
  for (int i = 0; i < this->t4_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->t4(i).data(), this->t4(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->t4(i), output);
  }
  
  // repeated string finished_quest = 17;
  for (int i = 0; i < this->finished_quest_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->finished_quest(i).data(), this->finished_quest(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      17, this->finished_quest(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DB_Quest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .DB_QuestRule g = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->g(), target);
  }
  
  // repeated string c = 2;
  for (int i = 0; i < this->c_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->c(i).data(), this->c(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(2, this->c(i), target);
  }
  
  // repeated int32 finishQuest = 3;
  for (int i = 0; i < this->finishquest_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(3, this->finishquest(i), target);
  }
  
  // repeated string t1 = 4;
  for (int i = 0; i < this->t1_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->t1(i).data(), this->t1(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(4, this->t1(i), target);
  }
  
  // repeated string t2 = 5;
  for (int i = 0; i < this->t2_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->t2(i).data(), this->t2(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(5, this->t2(i), target);
  }
  
  // repeated string t3 = 6;
  for (int i = 0; i < this->t3_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->t3(i).data(), this->t3(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(6, this->t3(i), target);
  }
  
  // repeated string t4 = 7;
  for (int i = 0; i < this->t4_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->t4(i).data(), this->t4(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(7, this->t4(i), target);
  }
  
  // repeated string finished_quest = 17;
  for (int i = 0; i < this->finished_quest_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->finished_quest(i).data(), this->finished_quest(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(17, this->finished_quest(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DB_Quest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .DB_QuestRule g = 1;
    if (has_g()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->g());
    }
    
  }
  // repeated string c = 2;
  total_size += 1 * this->c_size();
  for (int i = 0; i < this->c_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->c(i));
  }
  
  // repeated string finished_quest = 17;
  total_size += 2 * this->finished_quest_size();
  for (int i = 0; i < this->finished_quest_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->finished_quest(i));
  }
  
  // repeated int32 finishQuest = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->finishquest_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->finishquest(i));
    }
    total_size += 1 * this->finishquest_size() + data_size;
  }
  
  // repeated string t1 = 4;
  total_size += 1 * this->t1_size();
  for (int i = 0; i < this->t1_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->t1(i));
  }
  
  // repeated string t2 = 5;
  total_size += 1 * this->t2_size();
  for (int i = 0; i < this->t2_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->t2(i));
  }
  
  // repeated string t3 = 6;
  total_size += 1 * this->t3_size();
  for (int i = 0; i < this->t3_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->t3(i));
  }
  
  // repeated string t4 = 7;
  total_size += 1 * this->t4_size();
  for (int i = 0; i < this->t4_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->t4(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void DB_Quest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DB_Quest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DB_Quest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DB_Quest::MergeFrom(const DB_Quest& from) {
  GOOGLE_CHECK_NE(&from, this);
  c_.MergeFrom(from.c_);
  finished_quest_.MergeFrom(from.finished_quest_);
  finishquest_.MergeFrom(from.finishquest_);
  t1_.MergeFrom(from.t1_);
  t2_.MergeFrom(from.t2_);
  t3_.MergeFrom(from.t3_);
  t4_.MergeFrom(from.t4_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      mutable_g()->::DB_QuestRule::MergeFrom(from.g());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DB_Quest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DB_Quest::CopyFrom(const DB_Quest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DB_Quest::IsInitialized() const {
  
  return true;
}

void DB_Quest::Swap(DB_Quest* other) {
  if (other != this) {
    std::swap(g_, other->g_);
    c_.Swap(&other->c_);
    finished_quest_.Swap(&other->finished_quest_);
    finishquest_.Swap(&other->finishquest_);
    t1_.Swap(&other->t1_);
    t2_.Swap(&other->t2_);
    t3_.Swap(&other->t3_);
    t4_.Swap(&other->t4_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DB_Quest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DB_Quest_descriptor_;
  metadata.reflection = DB_Quest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DB_AiAttackQueuedArmyInfo::kTimeFieldNumber;
const int DB_AiAttackQueuedArmyInfo::kTypeFieldNumber;
const int DB_AiAttackQueuedArmyInfo::kCountFieldNumber;
const int DB_AiAttackQueuedArmyInfo::kAreaFieldNumber;
#endif  // !_MSC_VER

DB_AiAttackQueuedArmyInfo::DB_AiAttackQueuedArmyInfo() {
  SharedCtor();
}

void DB_AiAttackQueuedArmyInfo::InitAsDefaultInstance() {
}

DB_AiAttackQueuedArmyInfo::DB_AiAttackQueuedArmyInfo(const DB_AiAttackQueuedArmyInfo& from) {
  SharedCtor();
  MergeFrom(from);
}

void DB_AiAttackQueuedArmyInfo::SharedCtor() {
  _cached_size_ = 0;
  time_ = 0;
  type_ = 0;
  count_ = 0;
  area_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DB_AiAttackQueuedArmyInfo::~DB_AiAttackQueuedArmyInfo() {
  SharedDtor();
}

void DB_AiAttackQueuedArmyInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* DB_AiAttackQueuedArmyInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DB_AiAttackQueuedArmyInfo_descriptor_;
}

const DB_AiAttackQueuedArmyInfo& DB_AiAttackQueuedArmyInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dbinterface_5fsub_2eproto();  return *default_instance_;
}

DB_AiAttackQueuedArmyInfo* DB_AiAttackQueuedArmyInfo::default_instance_ = NULL;

DB_AiAttackQueuedArmyInfo* DB_AiAttackQueuedArmyInfo::New() const {
  return new DB_AiAttackQueuedArmyInfo;
}

void DB_AiAttackQueuedArmyInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    time_ = 0;
    type_ = 0;
    count_ = 0;
    area_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DB_AiAttackQueuedArmyInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 time = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &time_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }
      
      // optional int32 type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_type:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &type_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_count;
        break;
      }
      
      // optional int32 count = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_count:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &count_));
        _set_bit(2);
        if (input->ExpectTag(32)) goto parse_area;
        break;
      }
      
      // optional int32 area = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_area:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &area_));
        _set_bit(3);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DB_AiAttackQueuedArmyInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    DB_AiAttackQueuedArmyInfo::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional int32 time = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->time(), output);
  }
  
  // optional int32 type = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->type(), output);
  }
  
  // optional int32 count = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->count(), output);
  }
  
  // optional int32 area = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->area(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DB_AiAttackQueuedArmyInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 time = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->time(), target);
  }
  
  // optional int32 type = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->type(), target);
  }
  
  // optional int32 count = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->count(), target);
  }
  
  // optional int32 area = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->area(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DB_AiAttackQueuedArmyInfo::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 time = 1;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->time());
    }
    
    // optional int32 type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }
    
    // optional int32 count = 3;
    if (has_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->count());
    }
    
    // optional int32 area = 4;
    if (has_area()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->area());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void DB_AiAttackQueuedArmyInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DB_AiAttackQueuedArmyInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DB_AiAttackQueuedArmyInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DB_AiAttackQueuedArmyInfo::MergeFrom(const DB_AiAttackQueuedArmyInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_time(from.time());
    }
    if (from._has_bit(1)) {
      set_type(from.type());
    }
    if (from._has_bit(2)) {
      set_count(from.count());
    }
    if (from._has_bit(3)) {
      set_area(from.area());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DB_AiAttackQueuedArmyInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DB_AiAttackQueuedArmyInfo::CopyFrom(const DB_AiAttackQueuedArmyInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DB_AiAttackQueuedArmyInfo::IsInitialized() const {
  
  return true;
}

void DB_AiAttackQueuedArmyInfo::Swap(DB_AiAttackQueuedArmyInfo* other) {
  if (other != this) {
    std::swap(time_, other->time_);
    std::swap(type_, other->type_);
    std::swap(count_, other->count_);
    std::swap(area_, other->area_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DB_AiAttackQueuedArmyInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DB_AiAttackQueuedArmyInfo_descriptor_;
  metadata.reflection = DB_AiAttackQueuedArmyInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DB_AiAttackQueued::kAttackFieldNumber;
const int DB_AiAttackQueued::kWarnedFieldNumber;
const int DB_AiAttackQueued::kStartUnitsFieldNumber;
#endif  // !_MSC_VER

DB_AiAttackQueued::DB_AiAttackQueued() {
  SharedCtor();
}

void DB_AiAttackQueued::InitAsDefaultInstance() {
}

DB_AiAttackQueued::DB_AiAttackQueued(const DB_AiAttackQueued& from) {
  SharedCtor();
  MergeFrom(from);
}

void DB_AiAttackQueued::SharedCtor() {
  _cached_size_ = 0;
  warned_ = 0;
  startunits_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DB_AiAttackQueued::~DB_AiAttackQueued() {
  SharedDtor();
}

void DB_AiAttackQueued::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* DB_AiAttackQueued::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DB_AiAttackQueued_descriptor_;
}

const DB_AiAttackQueued& DB_AiAttackQueued::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dbinterface_5fsub_2eproto();  return *default_instance_;
}

DB_AiAttackQueued* DB_AiAttackQueued::default_instance_ = NULL;

DB_AiAttackQueued* DB_AiAttackQueued::New() const {
  return new DB_AiAttackQueued;
}

void DB_AiAttackQueued::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    warned_ = 0;
    startunits_ = 0;
  }
  attack_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DB_AiAttackQueued::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .DB_AiAttackQueuedArmyInfo attack = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_attack:
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, add_attack()));
        if (input->ExpectTag(10)) goto parse_attack;
        if (input->ExpectTag(16)) goto parse_warned;
        break;
      }
      
      // optional int32 warned = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_warned:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &warned_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_startUnits;
        break;
      }
      
      // optional int32 startUnits = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_startUnits:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &startunits_));
        _set_bit(2);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DB_AiAttackQueued::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    DB_AiAttackQueued::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // repeated .DB_AiAttackQueuedArmyInfo attack = 1;
  for (int i = 0; i < this->attack_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      1, this->attack(i), output);
  }
  
  // optional int32 warned = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->warned(), output);
  }
  
  // optional int32 startUnits = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->startunits(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DB_AiAttackQueued::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .DB_AiAttackQueuedArmyInfo attack = 1;
  for (int i = 0; i < this->attack_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->attack(i), target);
  }
  
  // optional int32 warned = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->warned(), target);
  }
  
  // optional int32 startUnits = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->startunits(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DB_AiAttackQueued::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional int32 warned = 2;
    if (has_warned()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->warned());
    }
    
    // optional int32 startUnits = 3;
    if (has_startunits()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->startunits());
    }
    
  }
  // repeated .DB_AiAttackQueuedArmyInfo attack = 1;
  total_size += 1 * this->attack_size();
  for (int i = 0; i < this->attack_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->attack(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void DB_AiAttackQueued::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DB_AiAttackQueued* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DB_AiAttackQueued*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DB_AiAttackQueued::MergeFrom(const DB_AiAttackQueued& from) {
  GOOGLE_CHECK_NE(&from, this);
  attack_.MergeFrom(from.attack_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from._has_bit(1)) {
      set_warned(from.warned());
    }
    if (from._has_bit(2)) {
      set_startunits(from.startunits());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DB_AiAttackQueued::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DB_AiAttackQueued::CopyFrom(const DB_AiAttackQueued& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DB_AiAttackQueued::IsInitialized() const {
  
  return true;
}

void DB_AiAttackQueued::Swap(DB_AiAttackQueued* other) {
  if (other != this) {
    attack_.Swap(&other->attack_);
    std::swap(warned_, other->warned_);
    std::swap(startunits_, other->startunits_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DB_AiAttackQueued::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DB_AiAttackQueued_descriptor_;
  metadata.reflection = DB_AiAttackQueued_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DB_AiAttack::kCurrentidFieldNumber;
const int DB_AiAttack::kNextAttackFieldNumber;
const int DB_AiAttack::kLastattackFieldNumber;
const int DB_AiAttack::kQueuedFieldNumber;
#endif  // !_MSC_VER

DB_AiAttack::DB_AiAttack() {
  SharedCtor();
}

void DB_AiAttack::InitAsDefaultInstance() {
  queued_ = const_cast< ::DB_AiAttackQueued*>(&::DB_AiAttackQueued::default_instance());
}

DB_AiAttack::DB_AiAttack(const DB_AiAttack& from) {
  SharedCtor();
  MergeFrom(from);
}

void DB_AiAttack::SharedCtor() {
  _cached_size_ = 0;
  currentid_ = 0;
  nextattack_ = 0;
  lastattack_ = 0;
  queued_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DB_AiAttack::~DB_AiAttack() {
  SharedDtor();
}

void DB_AiAttack::SharedDtor() {
  if (this != default_instance_) {
    delete queued_;
  }
}

const ::google::protobuf::Descriptor* DB_AiAttack::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DB_AiAttack_descriptor_;
}

const DB_AiAttack& DB_AiAttack::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dbinterface_5fsub_2eproto();  return *default_instance_;
}

DB_AiAttack* DB_AiAttack::default_instance_ = NULL;

DB_AiAttack* DB_AiAttack::New() const {
  return new DB_AiAttack;
}

void DB_AiAttack::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    currentid_ = 0;
    nextattack_ = 0;
    lastattack_ = 0;
    if (_has_bit(3)) {
      if (queued_ != NULL) queued_->::DB_AiAttackQueued::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DB_AiAttack::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 currentid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &currentid_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_nextAttack;
        break;
      }
      
      // optional int32 nextAttack = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_nextAttack:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &nextattack_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_lastattack;
        break;
      }
      
      // optional int32 lastattack = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_lastattack:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &lastattack_));
        _set_bit(2);
        if (input->ExpectTag(34)) goto parse_queued;
        break;
      }
      
      // optional .DB_AiAttackQueued queued = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_queued:
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
             input, mutable_queued()));
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DB_AiAttack::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    DB_AiAttack::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional int32 currentid = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->currentid(), output);
  }
  
  // optional int32 nextAttack = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->nextattack(), output);
  }
  
  // optional int32 lastattack = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->lastattack(), output);
  }
  
  // optional .DB_AiAttackQueued queued = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      4, this->queued(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DB_AiAttack::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 currentid = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->currentid(), target);
  }
  
  // optional int32 nextAttack = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->nextattack(), target);
  }
  
  // optional int32 lastattack = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->lastattack(), target);
  }
  
  // optional .DB_AiAttackQueued queued = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->queued(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DB_AiAttack::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 currentid = 1;
    if (has_currentid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->currentid());
    }
    
    // optional int32 nextAttack = 2;
    if (has_nextattack()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->nextattack());
    }
    
    // optional int32 lastattack = 3;
    if (has_lastattack()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->lastattack());
    }
    
    // optional .DB_AiAttackQueued queued = 4;
    if (has_queued()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->queued());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void DB_AiAttack::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DB_AiAttack* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DB_AiAttack*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DB_AiAttack::MergeFrom(const DB_AiAttack& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_currentid(from.currentid());
    }
    if (from._has_bit(1)) {
      set_nextattack(from.nextattack());
    }
    if (from._has_bit(2)) {
      set_lastattack(from.lastattack());
    }
    if (from._has_bit(3)) {
      mutable_queued()->::DB_AiAttackQueued::MergeFrom(from.queued());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DB_AiAttack::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DB_AiAttack::CopyFrom(const DB_AiAttack& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DB_AiAttack::IsInitialized() const {
  
  return true;
}

void DB_AiAttack::Swap(DB_AiAttack* other) {
  if (other != this) {
    std::swap(currentid_, other->currentid_);
    std::swap(nextattack_, other->nextattack_);
    std::swap(lastattack_, other->lastattack_);
    std::swap(queued_, other->queued_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DB_AiAttack::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DB_AiAttack_descriptor_;
  metadata.reflection = DB_AiAttack_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DB_Troop::kIdFieldNumber;
const int DB_Troop::kHealthFieldNumber;
const int DB_Troop::kStanceFieldNumber;
#endif  // !_MSC_VER

DB_Troop::DB_Troop() {
  SharedCtor();
}

void DB_Troop::InitAsDefaultInstance() {
}

DB_Troop::DB_Troop(const DB_Troop& from) {
  SharedCtor();
  MergeFrom(from);
}

void DB_Troop::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  health_ = 0;
  stance_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DB_Troop::~DB_Troop() {
  SharedDtor();
}

void DB_Troop::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* DB_Troop::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DB_Troop_descriptor_;
}

const DB_Troop& DB_Troop::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dbinterface_5fsub_2eproto();  return *default_instance_;
}

DB_Troop* DB_Troop::default_instance_ = NULL;

DB_Troop* DB_Troop::New() const {
  return new DB_Troop;
}

void DB_Troop::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    health_ = 0;
    stance_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DB_Troop::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &id_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_health;
        break;
      }
      
      // optional int32 health = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_health:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &health_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_stance;
        break;
      }
      
      // optional int32 stance = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_stance:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &stance_));
        _set_bit(2);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DB_Troop::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    DB_Troop::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional int32 id = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }
  
  // optional int32 health = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->health(), output);
  }
  
  // optional int32 stance = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->stance(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DB_Troop::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 id = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }
  
  // optional int32 health = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->health(), target);
  }
  
  // optional int32 stance = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->stance(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DB_Troop::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }
    
    // optional int32 health = 2;
    if (has_health()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->health());
    }
    
    // optional int32 stance = 3;
    if (has_stance()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->stance());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void DB_Troop::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DB_Troop* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DB_Troop*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DB_Troop::MergeFrom(const DB_Troop& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_id(from.id());
    }
    if (from._has_bit(1)) {
      set_health(from.health());
    }
    if (from._has_bit(2)) {
      set_stance(from.stance());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DB_Troop::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DB_Troop::CopyFrom(const DB_Troop& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DB_Troop::IsInitialized() const {
  
  return true;
}

void DB_Troop::Swap(DB_Troop* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(health_, other->health_);
    std::swap(stance_, other->stance_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DB_Troop::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DB_Troop_descriptor_;
  metadata.reflection = DB_Troop_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DB_TrapArmy::kArmytypeFieldNumber;
const int DB_TrapArmy::kArmynumFieldNumber;
#endif  // !_MSC_VER

DB_TrapArmy::DB_TrapArmy() {
  SharedCtor();
}

void DB_TrapArmy::InitAsDefaultInstance() {
}

DB_TrapArmy::DB_TrapArmy(const DB_TrapArmy& from) {
  SharedCtor();
  MergeFrom(from);
}

void DB_TrapArmy::SharedCtor() {
  _cached_size_ = 0;
  armytype_ = 0;
  armynum_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DB_TrapArmy::~DB_TrapArmy() {
  SharedDtor();
}

void DB_TrapArmy::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* DB_TrapArmy::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DB_TrapArmy_descriptor_;
}

const DB_TrapArmy& DB_TrapArmy::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dbinterface_5fsub_2eproto();  return *default_instance_;
}

DB_TrapArmy* DB_TrapArmy::default_instance_ = NULL;

DB_TrapArmy* DB_TrapArmy::New() const {
  return new DB_TrapArmy;
}

void DB_TrapArmy::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    armytype_ = 0;
    armynum_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DB_TrapArmy::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 armytype = 1 [default = 0];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &armytype_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_armynum;
        break;
      }
      
      // optional int32 armynum = 2 [default = 0];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_armynum:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &armynum_));
        _set_bit(1);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DB_TrapArmy::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    DB_TrapArmy::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional int32 armytype = 1 [default = 0];
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->armytype(), output);
  }
  
  // optional int32 armynum = 2 [default = 0];
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->armynum(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DB_TrapArmy::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 armytype = 1 [default = 0];
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->armytype(), target);
  }
  
  // optional int32 armynum = 2 [default = 0];
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->armynum(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DB_TrapArmy::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 armytype = 1 [default = 0];
    if (has_armytype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->armytype());
    }
    
    // optional int32 armynum = 2 [default = 0];
    if (has_armynum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->armynum());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void DB_TrapArmy::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DB_TrapArmy* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DB_TrapArmy*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DB_TrapArmy::MergeFrom(const DB_TrapArmy& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_armytype(from.armytype());
    }
    if (from._has_bit(1)) {
      set_armynum(from.armynum());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DB_TrapArmy::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DB_TrapArmy::CopyFrom(const DB_TrapArmy& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DB_TrapArmy::IsInitialized() const {
  
  return true;
}

void DB_TrapArmy::Swap(DB_TrapArmy* other) {
  if (other != this) {
    std::swap(armytype_, other->armytype_);
    std::swap(armynum_, other->armynum_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DB_TrapArmy::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DB_TrapArmy_descriptor_;
  metadata.reflection = DB_TrapArmy_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DB_Trap::kTrapArmyFieldNumber;
#endif  // !_MSC_VER

DB_Trap::DB_Trap() {
  SharedCtor();
}

void DB_Trap::InitAsDefaultInstance() {
}

DB_Trap::DB_Trap(const DB_Trap& from) {
  SharedCtor();
  MergeFrom(from);
}

void DB_Trap::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DB_Trap::~DB_Trap() {
  SharedDtor();
}

void DB_Trap::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* DB_Trap::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DB_Trap_descriptor_;
}

const DB_Trap& DB_Trap::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dbinterface_5fsub_2eproto();  return *default_instance_;
}

DB_Trap* DB_Trap::default_instance_ = NULL;

DB_Trap* DB_Trap::New() const {
  return new DB_Trap;
}

void DB_Trap::Clear() {
  traparmy_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DB_Trap::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .DB_TrapArmy trapArmy = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_trapArmy:
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, add_traparmy()));
        if (input->ExpectTag(10)) goto parse_trapArmy;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DB_Trap::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    DB_Trap::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // repeated .DB_TrapArmy trapArmy = 1;
  for (int i = 0; i < this->traparmy_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      1, this->traparmy(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DB_Trap::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .DB_TrapArmy trapArmy = 1;
  for (int i = 0; i < this->traparmy_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->traparmy(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DB_Trap::ByteSize() const {
  int total_size = 0;
  
  // repeated .DB_TrapArmy trapArmy = 1;
  total_size += 1 * this->traparmy_size();
  for (int i = 0; i < this->traparmy_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->traparmy(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void DB_Trap::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DB_Trap* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DB_Trap*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DB_Trap::MergeFrom(const DB_Trap& from) {
  GOOGLE_CHECK_NE(&from, this);
  traparmy_.MergeFrom(from.traparmy_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DB_Trap::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DB_Trap::CopyFrom(const DB_Trap& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DB_Trap::IsInitialized() const {
  
  return true;
}

void DB_Trap::Swap(DB_Trap* other) {
  if (other != this) {
    traparmy_.Swap(&other->traparmy_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DB_Trap::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DB_Trap_descriptor_;
  metadata.reflection = DB_Trap_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DB_Loot::kXFieldNumber;
const int DB_Loot::kYFieldNumber;
const int DB_Loot::kFFieldNumber;
const int DB_Loot::kStFieldNumber;
#endif  // !_MSC_VER

DB_Loot::DB_Loot() {
  SharedCtor();
}

void DB_Loot::InitAsDefaultInstance() {
}

DB_Loot::DB_Loot(const DB_Loot& from) {
  SharedCtor();
  MergeFrom(from);
}

void DB_Loot::SharedCtor() {
  _cached_size_ = 0;
  x_ = 0;
  y_ = 0;
  f_ = 0;
  st_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DB_Loot::~DB_Loot() {
  SharedDtor();
}

void DB_Loot::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* DB_Loot::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DB_Loot_descriptor_;
}

const DB_Loot& DB_Loot::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dbinterface_5fsub_2eproto();  return *default_instance_;
}

DB_Loot* DB_Loot::default_instance_ = NULL;

DB_Loot* DB_Loot::New() const {
  return new DB_Loot;
}

void DB_Loot::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    x_ = 0;
    y_ = 0;
    f_ = 0;
    st_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DB_Loot::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 X = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &x_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_Y;
        break;
      }
      
      // optional int32 Y = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Y:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &y_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_f;
        break;
      }
      
      // optional int32 f = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_f:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &f_));
        _set_bit(2);
        if (input->ExpectTag(32)) goto parse_st;
        break;
      }
      
      // optional int32 st = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_st:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &st_));
        _set_bit(3);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DB_Loot::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    DB_Loot::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional int32 X = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->x(), output);
  }
  
  // optional int32 Y = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->y(), output);
  }
  
  // optional int32 f = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->f(), output);
  }
  
  // optional int32 st = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->st(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DB_Loot::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 X = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->x(), target);
  }
  
  // optional int32 Y = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->y(), target);
  }
  
  // optional int32 f = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->f(), target);
  }
  
  // optional int32 st = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->st(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DB_Loot::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 X = 1;
    if (has_x()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->x());
    }
    
    // optional int32 Y = 2;
    if (has_y()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->y());
    }
    
    // optional int32 f = 3;
    if (has_f()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->f());
    }
    
    // optional int32 st = 4;
    if (has_st()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->st());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void DB_Loot::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DB_Loot* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DB_Loot*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DB_Loot::MergeFrom(const DB_Loot& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_x(from.x());
    }
    if (from._has_bit(1)) {
      set_y(from.y());
    }
    if (from._has_bit(2)) {
      set_f(from.f());
    }
    if (from._has_bit(3)) {
      set_st(from.st());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DB_Loot::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DB_Loot::CopyFrom(const DB_Loot& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DB_Loot::IsInitialized() const {
  
  return true;
}

void DB_Loot::Swap(DB_Loot* other) {
  if (other != this) {
    std::swap(x_, other->x_);
    std::swap(y_, other->y_);
    std::swap(f_, other->f_);
    std::swap(st_, other->st_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DB_Loot::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DB_Loot_descriptor_;
  metadata.reflection = DB_Loot_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DB_LootEquip::kTypeFieldNumber;
const int DB_LootEquip::kShowtypeFieldNumber;
const int DB_LootEquip::kTimeFieldNumber;
const int DB_LootEquip::kNumFieldNumber;
const int DB_LootEquip::kLevelFieldNumber;
const int DB_LootEquip::kHerogradeFieldNumber;
#endif  // !_MSC_VER

DB_LootEquip::DB_LootEquip() {
  SharedCtor();
}

void DB_LootEquip::InitAsDefaultInstance() {
}

DB_LootEquip::DB_LootEquip(const DB_LootEquip& from) {
  SharedCtor();
  MergeFrom(from);
}

void DB_LootEquip::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  showtype_ = 0;
  time_ = 0;
  num_ = 0;
  level_ = 0;
  herograde_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DB_LootEquip::~DB_LootEquip() {
  SharedDtor();
}

void DB_LootEquip::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* DB_LootEquip::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DB_LootEquip_descriptor_;
}

const DB_LootEquip& DB_LootEquip::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dbinterface_5fsub_2eproto();  return *default_instance_;
}

DB_LootEquip* DB_LootEquip::default_instance_ = NULL;

DB_LootEquip* DB_LootEquip::New() const {
  return new DB_LootEquip;
}

void DB_LootEquip::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0;
    showtype_ = 0;
    time_ = 0;
    num_ = 0;
    level_ = 0;
    herograde_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DB_LootEquip::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &type_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_showtype;
        break;
      }
      
      // optional int32 showtype = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_showtype:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &showtype_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_time;
        break;
      }
      
      // optional int32 time = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_time:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &time_));
        _set_bit(2);
        if (input->ExpectTag(32)) goto parse_num;
        break;
      }
      
      // optional int32 num = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_num:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &num_));
        _set_bit(3);
        if (input->ExpectTag(40)) goto parse_level;
        break;
      }
      
      // optional int32 level = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_level:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &level_));
        _set_bit(4);
        if (input->ExpectTag(48)) goto parse_herograde;
        break;
      }
      
      // optional int32 herograde = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_herograde:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &herograde_));
        _set_bit(5);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DB_LootEquip::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    DB_LootEquip::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional int32 type = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->type(), output);
  }
  
  // optional int32 showtype = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->showtype(), output);
  }
  
  // optional int32 time = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->time(), output);
  }
  
  // optional int32 num = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->num(), output);
  }
  
  // optional int32 level = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->level(), output);
  }
  
  // optional int32 herograde = 6;
  if (_has_bit(5)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->herograde(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DB_LootEquip::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 type = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->type(), target);
  }
  
  // optional int32 showtype = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->showtype(), target);
  }
  
  // optional int32 time = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->time(), target);
  }
  
  // optional int32 num = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->num(), target);
  }
  
  // optional int32 level = 5;
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->level(), target);
  }
  
  // optional int32 herograde = 6;
  if (_has_bit(5)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->herograde(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DB_LootEquip::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }
    
    // optional int32 showtype = 2;
    if (has_showtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->showtype());
    }
    
    // optional int32 time = 3;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->time());
    }
    
    // optional int32 num = 4;
    if (has_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->num());
    }
    
    // optional int32 level = 5;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->level());
    }
    
    // optional int32 herograde = 6;
    if (has_herograde()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->herograde());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void DB_LootEquip::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DB_LootEquip* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DB_LootEquip*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DB_LootEquip::MergeFrom(const DB_LootEquip& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_type(from.type());
    }
    if (from._has_bit(1)) {
      set_showtype(from.showtype());
    }
    if (from._has_bit(2)) {
      set_time(from.time());
    }
    if (from._has_bit(3)) {
      set_num(from.num());
    }
    if (from._has_bit(4)) {
      set_level(from.level());
    }
    if (from._has_bit(5)) {
      set_herograde(from.herograde());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DB_LootEquip::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DB_LootEquip::CopyFrom(const DB_LootEquip& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DB_LootEquip::IsInitialized() const {
  
  return true;
}

void DB_LootEquip::Swap(DB_LootEquip* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(showtype_, other->showtype_);
    std::swap(time_, other->time_);
    std::swap(num_, other->num_);
    std::swap(level_, other->level_);
    std::swap(herograde_, other->herograde_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DB_LootEquip::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DB_LootEquip_descriptor_;
  metadata.reflection = DB_LootEquip_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DB_LootSuperWeapon::kUseSuperWeaponNumFieldNumber;
const int DB_LootSuperWeapon::kUseSuperWeaponIDFieldNumber;
const int DB_LootSuperWeapon::kUseTimeFieldNumber;
#endif  // !_MSC_VER

DB_LootSuperWeapon::DB_LootSuperWeapon() {
  SharedCtor();
}

void DB_LootSuperWeapon::InitAsDefaultInstance() {
}

DB_LootSuperWeapon::DB_LootSuperWeapon(const DB_LootSuperWeapon& from) {
  SharedCtor();
  MergeFrom(from);
}

void DB_LootSuperWeapon::SharedCtor() {
  _cached_size_ = 0;
  usesuperweaponnum_ = 0;
  usesuperweaponid_ = 0;
  usetime_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DB_LootSuperWeapon::~DB_LootSuperWeapon() {
  SharedDtor();
}

void DB_LootSuperWeapon::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* DB_LootSuperWeapon::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DB_LootSuperWeapon_descriptor_;
}

const DB_LootSuperWeapon& DB_LootSuperWeapon::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dbinterface_5fsub_2eproto();  return *default_instance_;
}

DB_LootSuperWeapon* DB_LootSuperWeapon::default_instance_ = NULL;

DB_LootSuperWeapon* DB_LootSuperWeapon::New() const {
  return new DB_LootSuperWeapon;
}

void DB_LootSuperWeapon::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    usesuperweaponnum_ = 0;
    usesuperweaponid_ = 0;
    usetime_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DB_LootSuperWeapon::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 useSuperWeaponNum = 1 [default = 0];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &usesuperweaponnum_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_useSuperWeaponID;
        break;
      }
      
      // optional int32 useSuperWeaponID = 2 [default = 0];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_useSuperWeaponID:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &usesuperweaponid_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_useTime;
        break;
      }
      
      // optional int32 useTime = 3 [default = 0];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_useTime:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &usetime_));
        _set_bit(2);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DB_LootSuperWeapon::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    DB_LootSuperWeapon::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional int32 useSuperWeaponNum = 1 [default = 0];
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->usesuperweaponnum(), output);
  }
  
  // optional int32 useSuperWeaponID = 2 [default = 0];
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->usesuperweaponid(), output);
  }
  
  // optional int32 useTime = 3 [default = 0];
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->usetime(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DB_LootSuperWeapon::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 useSuperWeaponNum = 1 [default = 0];
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->usesuperweaponnum(), target);
  }
  
  // optional int32 useSuperWeaponID = 2 [default = 0];
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->usesuperweaponid(), target);
  }
  
  // optional int32 useTime = 3 [default = 0];
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->usetime(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DB_LootSuperWeapon::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 useSuperWeaponNum = 1 [default = 0];
    if (has_usesuperweaponnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->usesuperweaponnum());
    }
    
    // optional int32 useSuperWeaponID = 2 [default = 0];
    if (has_usesuperweaponid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->usesuperweaponid());
    }
    
    // optional int32 useTime = 3 [default = 0];
    if (has_usetime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->usetime());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void DB_LootSuperWeapon::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DB_LootSuperWeapon* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DB_LootSuperWeapon*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DB_LootSuperWeapon::MergeFrom(const DB_LootSuperWeapon& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_usesuperweaponnum(from.usesuperweaponnum());
    }
    if (from._has_bit(1)) {
      set_usesuperweaponid(from.usesuperweaponid());
    }
    if (from._has_bit(2)) {
      set_usetime(from.usetime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DB_LootSuperWeapon::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DB_LootSuperWeapon::CopyFrom(const DB_LootSuperWeapon& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DB_LootSuperWeapon::IsInitialized() const {
  
  return true;
}

void DB_LootSuperWeapon::Swap(DB_LootSuperWeapon* other) {
  if (other != this) {
    std::swap(usesuperweaponnum_, other->usesuperweaponnum_);
    std::swap(usesuperweaponid_, other->usesuperweaponid_);
    std::swap(usetime_, other->usetime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DB_LootSuperWeapon::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DB_LootSuperWeapon_descriptor_;
  metadata.reflection = DB_LootSuperWeapon_reflection_;
  return metadata;
}


// ===================================================================

const ::std::string DB_LootReport::_default_r1_;
const ::std::string DB_LootReport::_default_r2_;
const ::std::string DB_LootReport::_default_attackname_;
const ::std::string DB_LootReport::_default_log_;
const ::std::string DB_LootReport::_default_attacpic_;
const ::std::string DB_LootReport::_default_defencename_;
const ::std::string DB_LootReport::_default_attackpic_square_;
const ::std::string DB_LootReport::_default_defencepic_square_;
#ifndef _MSC_VER
const int DB_LootReport::kAttackIDFieldNumber;
const int DB_LootReport::kRecoveryIDFieldNumber;
const int DB_LootReport::kR1FieldNumber;
const int DB_LootReport::kR2FieldNumber;
const int DB_LootReport::kAttackNameFieldNumber;
const int DB_LootReport::kLogFieldNumber;
const int DB_LootReport::kAttacPicFieldNumber;
const int DB_LootReport::kAttacktimeFieldNumber;
const int DB_LootReport::kHasbalanceFieldNumber;
const int DB_LootReport::kDamageFieldNumber;
const int DB_LootReport::kTypeFieldNumber;
const int DB_LootReport::kDefenceNameFieldNumber;
const int DB_LootReport::kAttacklevelFieldNumber;
const int DB_LootReport::kDefencelevelFieldNumber;
const int DB_LootReport::kAttackpicSquareFieldNumber;
const int DB_LootReport::kDefencepicSquareFieldNumber;
const int DB_LootReport::kInitdamageFieldNumber;
const int DB_LootReport::kAttackequiplootFieldNumber;
const int DB_LootReport::kDefenceequiplootFieldNumber;
const int DB_LootReport::kHonorFieldNumber;
const int DB_LootReport::kIsStrikeFieldNumber;
const int DB_LootReport::kFeatsFieldNumber;
const int DB_LootReport::kDestroySlaveRoomFieldNumber;
const int DB_LootReport::kAdimralExpFieldNumber;
const int DB_LootReport::kDefAdimralExpFieldNumber;
const int DB_LootReport::kWarstageFieldNumber;
const int DB_LootReport::kSuperweaponFieldNumber;
const int DB_LootReport::kIsSuperStormFieldNumber;
#endif  // !_MSC_VER

DB_LootReport::DB_LootReport() {
  SharedCtor();
}

void DB_LootReport::InitAsDefaultInstance() {
  superweapon_ = const_cast< ::DB_LootSuperWeapon*>(&::DB_LootSuperWeapon::default_instance());
}

DB_LootReport::DB_LootReport(const DB_LootReport& from) {
  SharedCtor();
  MergeFrom(from);
}

void DB_LootReport::SharedCtor() {
  _cached_size_ = 0;
  attackid_ = GOOGLE_LONGLONG(0);
  recoveryid_ = GOOGLE_LONGLONG(0);
  r1_ = const_cast< ::std::string*>(&_default_r1_);
  r2_ = const_cast< ::std::string*>(&_default_r2_);
  attackname_ = const_cast< ::std::string*>(&_default_attackname_);
  log_ = const_cast< ::std::string*>(&_default_log_);
  attacpic_ = const_cast< ::std::string*>(&_default_attacpic_);
  attacktime_ = 0;
  hasbalance_ = false;
  damage_ = 0;
  type_ = 0;
  defencename_ = const_cast< ::std::string*>(&_default_defencename_);
  attacklevel_ = 0;
  defencelevel_ = 0;
  attackpic_square_ = const_cast< ::std::string*>(&_default_attackpic_square_);
  defencepic_square_ = const_cast< ::std::string*>(&_default_defencepic_square_);
  initdamage_ = 0;
  honor_ = 0;
  isstrike_ = false;
  feats_ = 0;
  destroyslaveroom_ = false;
  adimralexp_ = 0;
  defadimralexp_ = 0;
  warstage_ = 0;
  superweapon_ = NULL;
  issuperstorm_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DB_LootReport::~DB_LootReport() {
  SharedDtor();
}

void DB_LootReport::SharedDtor() {
  if (r1_ != &_default_r1_) {
    delete r1_;
  }
  if (r2_ != &_default_r2_) {
    delete r2_;
  }
  if (attackname_ != &_default_attackname_) {
    delete attackname_;
  }
  if (log_ != &_default_log_) {
    delete log_;
  }
  if (attacpic_ != &_default_attacpic_) {
    delete attacpic_;
  }
  if (defencename_ != &_default_defencename_) {
    delete defencename_;
  }
  if (attackpic_square_ != &_default_attackpic_square_) {
    delete attackpic_square_;
  }
  if (defencepic_square_ != &_default_defencepic_square_) {
    delete defencepic_square_;
  }
  if (this != default_instance_) {
    delete superweapon_;
  }
}

const ::google::protobuf::Descriptor* DB_LootReport::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DB_LootReport_descriptor_;
}

const DB_LootReport& DB_LootReport::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dbinterface_5fsub_2eproto();  return *default_instance_;
}

DB_LootReport* DB_LootReport::default_instance_ = NULL;

DB_LootReport* DB_LootReport::New() const {
  return new DB_LootReport;
}

void DB_LootReport::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    attackid_ = GOOGLE_LONGLONG(0);
    recoveryid_ = GOOGLE_LONGLONG(0);
    if (_has_bit(2)) {
      if (r1_ != &_default_r1_) {
        r1_->clear();
      }
    }
    if (_has_bit(3)) {
      if (r2_ != &_default_r2_) {
        r2_->clear();
      }
    }
    if (_has_bit(4)) {
      if (attackname_ != &_default_attackname_) {
        attackname_->clear();
      }
    }
    if (_has_bit(5)) {
      if (log_ != &_default_log_) {
        log_->clear();
      }
    }
    if (_has_bit(6)) {
      if (attacpic_ != &_default_attacpic_) {
        attacpic_->clear();
      }
    }
    attacktime_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    hasbalance_ = false;
    damage_ = 0;
    type_ = 0;
    if (_has_bit(11)) {
      if (defencename_ != &_default_defencename_) {
        defencename_->clear();
      }
    }
    attacklevel_ = 0;
    defencelevel_ = 0;
    if (_has_bit(14)) {
      if (attackpic_square_ != &_default_attackpic_square_) {
        attackpic_square_->clear();
      }
    }
    if (_has_bit(15)) {
      if (defencepic_square_ != &_default_defencepic_square_) {
        defencepic_square_->clear();
      }
    }
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    initdamage_ = 0;
    honor_ = 0;
    isstrike_ = false;
    feats_ = 0;
    destroyslaveroom_ = false;
    adimralexp_ = 0;
  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    defadimralexp_ = 0;
    warstage_ = 0;
    if (_has_bit(26)) {
      if (superweapon_ != NULL) superweapon_->::DB_LootSuperWeapon::Clear();
    }
    issuperstorm_ = false;
  }
  attackequiploot_.Clear();
  defenceequiploot_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DB_LootReport::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 attackID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt64(
              input, &attackid_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_recoveryID;
        break;
      }
      
      // optional int64 recoveryID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_recoveryID:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt64(
              input, &recoveryid_));
        _set_bit(1);
        if (input->ExpectTag(26)) goto parse_r1;
        break;
      }
      
      // optional string r1 = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_r1:
        DO_(::google::protobuf::internal::WireFormatLite::ReadString(
              input, this->mutable_r1()));
        ::google::protobuf::internal::WireFormat::VerifyUTF8String(
          this->r1().data(), this->r1().length(),
          ::google::protobuf::internal::WireFormat::PARSE);
        if (input->ExpectTag(34)) goto parse_r2;
        break;
      }
      
      // optional string r2 = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_r2:
        DO_(::google::protobuf::internal::WireFormatLite::ReadString(
              input, this->mutable_r2()));
        ::google::protobuf::internal::WireFormat::VerifyUTF8String(
          this->r2().data(), this->r2().length(),
          ::google::protobuf::internal::WireFormat::PARSE);
        if (input->ExpectTag(42)) goto parse_attackName;
        break;
      }
      
      // optional string attackName = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_attackName:
        DO_(::google::protobuf::internal::WireFormatLite::ReadString(
              input, this->mutable_attackname()));
        ::google::protobuf::internal::WireFormat::VerifyUTF8String(
          this->attackname().data(), this->attackname().length(),
          ::google::protobuf::internal::WireFormat::PARSE);
        if (input->ExpectTag(50)) goto parse_log;
        break;
      }
      
      // optional string log = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_log:
        DO_(::google::protobuf::internal::WireFormatLite::ReadString(
              input, this->mutable_log()));
        ::google::protobuf::internal::WireFormat::VerifyUTF8String(
          this->log().data(), this->log().length(),
          ::google::protobuf::internal::WireFormat::PARSE);
        if (input->ExpectTag(58)) goto parse_attacPic;
        break;
      }
      
      // optional string attacPic = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_attacPic:
        DO_(::google::protobuf::internal::WireFormatLite::ReadString(
              input, this->mutable_attacpic()));
        ::google::protobuf::internal::WireFormat::VerifyUTF8String(
          this->attacpic().data(), this->attacpic().length(),
          ::google::protobuf::internal::WireFormat::PARSE);
        if (input->ExpectTag(64)) goto parse_attacktime;
        break;
      }
      
      // optional int32 attacktime = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_attacktime:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &attacktime_));
        _set_bit(7);
        if (input->ExpectTag(120)) goto parse_hasbalance;
        break;
      }
      
      // optional bool hasbalance = 15 [default = false];
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_hasbalance:
        DO_(::google::protobuf::internal::WireFormatLite::ReadBool(
              input, &hasbalance_));
        _set_bit(8);
        if (input->ExpectTag(128)) goto parse_damage;
        break;
      }
      
      // optional int32 damage = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_damage:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &damage_));
        _set_bit(9);
        if (input->ExpectTag(136)) goto parse_type;
        break;
      }
      
      // optional int32 type = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_type:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &type_));
        _set_bit(10);
        if (input->ExpectTag(146)) goto parse_defenceName;
        break;
      }
      
      // optional string defenceName = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_defenceName:
        DO_(::google::protobuf::internal::WireFormatLite::ReadString(
              input, this->mutable_defencename()));
        ::google::protobuf::internal::WireFormat::VerifyUTF8String(
          this->defencename().data(), this->defencename().length(),
          ::google::protobuf::internal::WireFormat::PARSE);
        if (input->ExpectTag(152)) goto parse_Attacklevel;
        break;
      }
      
      // optional int32 Attacklevel = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Attacklevel:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &attacklevel_));
        _set_bit(12);
        if (input->ExpectTag(160)) goto parse_defencelevel;
        break;
      }
      
      // optional int32 defencelevel = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_defencelevel:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &defencelevel_));
        _set_bit(13);
        if (input->ExpectTag(170)) goto parse_attackpic_square;
        break;
      }
      
      // optional string attackpic_square = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_attackpic_square:
        DO_(::google::protobuf::internal::WireFormatLite::ReadString(
              input, this->mutable_attackpic_square()));
        ::google::protobuf::internal::WireFormat::VerifyUTF8String(
          this->attackpic_square().data(), this->attackpic_square().length(),
          ::google::protobuf::internal::WireFormat::PARSE);
        if (input->ExpectTag(178)) goto parse_defencepic_square;
        break;
      }
      
      // optional string defencepic_square = 22;
      case 22: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_defencepic_square:
        DO_(::google::protobuf::internal::WireFormatLite::ReadString(
              input, this->mutable_defencepic_square()));
        ::google::protobuf::internal::WireFormat::VerifyUTF8String(
          this->defencepic_square().data(), this->defencepic_square().length(),
          ::google::protobuf::internal::WireFormat::PARSE);
        if (input->ExpectTag(184)) goto parse_initdamage;
        break;
      }
      
      // optional int32 initdamage = 23;
      case 23: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_initdamage:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &initdamage_));
        _set_bit(16);
        if (input->ExpectTag(194)) goto parse_attackequiploot;
        break;
      }
      
      // repeated .DB_LootEquip attackequiploot = 24;
      case 24: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_attackequiploot:
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, add_attackequiploot()));
        if (input->ExpectTag(194)) goto parse_attackequiploot;
        if (input->ExpectTag(202)) goto parse_defenceequiploot;
        break;
      }
      
      // repeated .DB_LootEquip defenceequiploot = 25;
      case 25: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_defenceequiploot:
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, add_defenceequiploot()));
        if (input->ExpectTag(202)) goto parse_defenceequiploot;
        if (input->ExpectTag(208)) goto parse_honor;
        break;
      }
      
      // optional int32 honor = 26 [default = 0];
      case 26: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_honor:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &honor_));
        _set_bit(19);
        if (input->ExpectTag(216)) goto parse_isStrike;
        break;
      }
      
      // optional bool isStrike = 27 [default = false];
      case 27: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_isStrike:
        DO_(::google::protobuf::internal::WireFormatLite::ReadBool(
              input, &isstrike_));
        _set_bit(20);
        if (input->ExpectTag(224)) goto parse_feats;
        break;
      }
      
      // optional int32 feats = 28 [default = 0];
      case 28: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_feats:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &feats_));
        _set_bit(21);
        if (input->ExpectTag(232)) goto parse_destroySlaveRoom;
        break;
      }
      
      // optional bool destroySlaveRoom = 29 [default = false];
      case 29: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_destroySlaveRoom:
        DO_(::google::protobuf::internal::WireFormatLite::ReadBool(
              input, &destroyslaveroom_));
        _set_bit(22);
        if (input->ExpectTag(240)) goto parse_adimralExp;
        break;
      }
      
      // optional int32 adimralExp = 30 [default = 0];
      case 30: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_adimralExp:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &adimralexp_));
        _set_bit(23);
        if (input->ExpectTag(248)) goto parse_defAdimralExp;
        break;
      }
      
      // optional int32 defAdimralExp = 31 [default = 0];
      case 31: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_defAdimralExp:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &defadimralexp_));
        _set_bit(24);
        if (input->ExpectTag(256)) goto parse_warstage;
        break;
      }
      
      // optional int32 warstage = 32 [default = 0];
      case 32: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_warstage:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &warstage_));
        _set_bit(25);
        if (input->ExpectTag(266)) goto parse_superweapon;
        break;
      }
      
      // optional .DB_LootSuperWeapon superweapon = 33;
      case 33: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_superweapon:
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
             input, mutable_superweapon()));
        if (input->ExpectTag(272)) goto parse_isSuperStorm;
        break;
      }
      
      // optional bool isSuperStorm = 34 [default = false];
      case 34: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_isSuperStorm:
        DO_(::google::protobuf::internal::WireFormatLite::ReadBool(
              input, &issuperstorm_));
        _set_bit(27);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DB_LootReport::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    DB_LootReport::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional int64 attackID = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->attackid(), output);
  }
  
  // optional int64 recoveryID = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->recoveryid(), output);
  }
  
  // optional string r1 = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->r1().data(), this->r1().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->r1(), output);
  }
  
  // optional string r2 = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->r2().data(), this->r2().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->r2(), output);
  }
  
  // optional string attackName = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->attackname().data(), this->attackname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->attackname(), output);
  }
  
  // optional string log = 6;
  if (_has_bit(5)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->log().data(), this->log().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->log(), output);
  }
  
  // optional string attacPic = 7;
  if (_has_bit(6)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->attacpic().data(), this->attacpic().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->attacpic(), output);
  }
  
  // optional int32 attacktime = 8;
  if (_has_bit(7)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->attacktime(), output);
  }
  
  // optional bool hasbalance = 15 [default = false];
  if (_has_bit(8)) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(15, this->hasbalance(), output);
  }
  
  // optional int32 damage = 16;
  if (_has_bit(9)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(16, this->damage(), output);
  }
  
  // optional int32 type = 17;
  if (_has_bit(10)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(17, this->type(), output);
  }
  
  // optional string defenceName = 18;
  if (_has_bit(11)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->defencename().data(), this->defencename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      18, this->defencename(), output);
  }
  
  // optional int32 Attacklevel = 19;
  if (_has_bit(12)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(19, this->attacklevel(), output);
  }
  
  // optional int32 defencelevel = 20;
  if (_has_bit(13)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(20, this->defencelevel(), output);
  }
  
  // optional string attackpic_square = 21;
  if (_has_bit(14)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->attackpic_square().data(), this->attackpic_square().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      21, this->attackpic_square(), output);
  }
  
  // optional string defencepic_square = 22;
  if (_has_bit(15)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->defencepic_square().data(), this->defencepic_square().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      22, this->defencepic_square(), output);
  }
  
  // optional int32 initdamage = 23;
  if (_has_bit(16)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(23, this->initdamage(), output);
  }
  
  // repeated .DB_LootEquip attackequiploot = 24;
  for (int i = 0; i < this->attackequiploot_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      24, this->attackequiploot(i), output);
  }
  
  // repeated .DB_LootEquip defenceequiploot = 25;
  for (int i = 0; i < this->defenceequiploot_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      25, this->defenceequiploot(i), output);
  }
  
  // optional int32 honor = 26 [default = 0];
  if (_has_bit(19)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(26, this->honor(), output);
  }
  
  // optional bool isStrike = 27 [default = false];
  if (_has_bit(20)) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(27, this->isstrike(), output);
  }
  
  // optional int32 feats = 28 [default = 0];
  if (_has_bit(21)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(28, this->feats(), output);
  }
  
  // optional bool destroySlaveRoom = 29 [default = false];
  if (_has_bit(22)) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(29, this->destroyslaveroom(), output);
  }
  
  // optional int32 adimralExp = 30 [default = 0];
  if (_has_bit(23)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(30, this->adimralexp(), output);
  }
  
  // optional int32 defAdimralExp = 31 [default = 0];
  if (_has_bit(24)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(31, this->defadimralexp(), output);
  }
  
  // optional int32 warstage = 32 [default = 0];
  if (_has_bit(25)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(32, this->warstage(), output);
  }
  
  // optional .DB_LootSuperWeapon superweapon = 33;
  if (_has_bit(26)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      33, this->superweapon(), output);
  }
  
  // optional bool isSuperStorm = 34 [default = false];
  if (_has_bit(27)) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(34, this->issuperstorm(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DB_LootReport::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int64 attackID = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->attackid(), target);
  }
  
  // optional int64 recoveryID = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->recoveryid(), target);
  }
  
  // optional string r1 = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->r1().data(), this->r1().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->r1(), target);
  }
  
  // optional string r2 = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->r2().data(), this->r2().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->r2(), target);
  }
  
  // optional string attackName = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->attackname().data(), this->attackname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->attackname(), target);
  }
  
  // optional string log = 6;
  if (_has_bit(5)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->log().data(), this->log().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->log(), target);
  }
  
  // optional string attacPic = 7;
  if (_has_bit(6)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->attacpic().data(), this->attacpic().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->attacpic(), target);
  }
  
  // optional int32 attacktime = 8;
  if (_has_bit(7)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->attacktime(), target);
  }
  
  // optional bool hasbalance = 15 [default = false];
  if (_has_bit(8)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(15, this->hasbalance(), target);
  }
  
  // optional int32 damage = 16;
  if (_has_bit(9)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(16, this->damage(), target);
  }
  
  // optional int32 type = 17;
  if (_has_bit(10)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(17, this->type(), target);
  }
  
  // optional string defenceName = 18;
  if (_has_bit(11)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->defencename().data(), this->defencename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        18, this->defencename(), target);
  }
  
  // optional int32 Attacklevel = 19;
  if (_has_bit(12)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(19, this->attacklevel(), target);
  }
  
  // optional int32 defencelevel = 20;
  if (_has_bit(13)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(20, this->defencelevel(), target);
  }
  
  // optional string attackpic_square = 21;
  if (_has_bit(14)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->attackpic_square().data(), this->attackpic_square().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        21, this->attackpic_square(), target);
  }
  
  // optional string defencepic_square = 22;
  if (_has_bit(15)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->defencepic_square().data(), this->defencepic_square().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        22, this->defencepic_square(), target);
  }
  
  // optional int32 initdamage = 23;
  if (_has_bit(16)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(23, this->initdamage(), target);
  }
  
  // repeated .DB_LootEquip attackequiploot = 24;
  for (int i = 0; i < this->attackequiploot_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        24, this->attackequiploot(i), target);
  }
  
  // repeated .DB_LootEquip defenceequiploot = 25;
  for (int i = 0; i < this->defenceequiploot_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        25, this->defenceequiploot(i), target);
  }
  
  // optional int32 honor = 26 [default = 0];
  if (_has_bit(19)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(26, this->honor(), target);
  }
  
  // optional bool isStrike = 27 [default = false];
  if (_has_bit(20)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(27, this->isstrike(), target);
  }
  
  // optional int32 feats = 28 [default = 0];
  if (_has_bit(21)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(28, this->feats(), target);
  }
  
  // optional bool destroySlaveRoom = 29 [default = false];
  if (_has_bit(22)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(29, this->destroyslaveroom(), target);
  }
  
  // optional int32 adimralExp = 30 [default = 0];
  if (_has_bit(23)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(30, this->adimralexp(), target);
  }
  
  // optional int32 defAdimralExp = 31 [default = 0];
  if (_has_bit(24)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(31, this->defadimralexp(), target);
  }
  
  // optional int32 warstage = 32 [default = 0];
  if (_has_bit(25)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(32, this->warstage(), target);
  }
  
  // optional .DB_LootSuperWeapon superweapon = 33;
  if (_has_bit(26)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        33, this->superweapon(), target);
  }
  
  // optional bool isSuperStorm = 34 [default = false];
  if (_has_bit(27)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(34, this->issuperstorm(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DB_LootReport::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 attackID = 1;
    if (has_attackid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->attackid());
    }
    
    // optional int64 recoveryID = 2;
    if (has_recoveryid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->recoveryid());
    }
    
    // optional string r1 = 3;
    if (has_r1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->r1());
    }
    
    // optional string r2 = 4;
    if (has_r2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->r2());
    }
    
    // optional string attackName = 5;
    if (has_attackname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->attackname());
    }
    
    // optional string log = 6;
    if (has_log()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->log());
    }
    
    // optional string attacPic = 7;
    if (has_attacpic()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->attacpic());
    }
    
    // optional int32 attacktime = 8;
    if (has_attacktime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->attacktime());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional bool hasbalance = 15 [default = false];
    if (has_hasbalance()) {
      total_size += 1 + 1;
    }
    
    // optional int32 damage = 16;
    if (has_damage()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->damage());
    }
    
    // optional int32 type = 17;
    if (has_type()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }
    
    // optional string defenceName = 18;
    if (has_defencename()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->defencename());
    }
    
    // optional int32 Attacklevel = 19;
    if (has_attacklevel()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->attacklevel());
    }
    
    // optional int32 defencelevel = 20;
    if (has_defencelevel()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->defencelevel());
    }
    
    // optional string attackpic_square = 21;
    if (has_attackpic_square()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->attackpic_square());
    }
    
    // optional string defencepic_square = 22;
    if (has_defencepic_square()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->defencepic_square());
    }
    
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional int32 initdamage = 23;
    if (has_initdamage()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->initdamage());
    }
    
    // optional int32 honor = 26 [default = 0];
    if (has_honor()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->honor());
    }
    
    // optional bool isStrike = 27 [default = false];
    if (has_isstrike()) {
      total_size += 2 + 1;
    }
    
    // optional int32 feats = 28 [default = 0];
    if (has_feats()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->feats());
    }
    
    // optional bool destroySlaveRoom = 29 [default = false];
    if (has_destroyslaveroom()) {
      total_size += 2 + 1;
    }
    
    // optional int32 adimralExp = 30 [default = 0];
    if (has_adimralexp()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->adimralexp());
    }
    
  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    // optional int32 defAdimralExp = 31 [default = 0];
    if (has_defadimralexp()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->defadimralexp());
    }
    
    // optional int32 warstage = 32 [default = 0];
    if (has_warstage()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->warstage());
    }
    
    // optional .DB_LootSuperWeapon superweapon = 33;
    if (has_superweapon()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->superweapon());
    }
    
    // optional bool isSuperStorm = 34 [default = false];
    if (has_issuperstorm()) {
      total_size += 2 + 1;
    }
    
  }
  // repeated .DB_LootEquip attackequiploot = 24;
  total_size += 2 * this->attackequiploot_size();
  for (int i = 0; i < this->attackequiploot_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->attackequiploot(i));
  }
  
  // repeated .DB_LootEquip defenceequiploot = 25;
  total_size += 2 * this->defenceequiploot_size();
  for (int i = 0; i < this->defenceequiploot_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->defenceequiploot(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void DB_LootReport::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DB_LootReport* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DB_LootReport*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DB_LootReport::MergeFrom(const DB_LootReport& from) {
  GOOGLE_CHECK_NE(&from, this);
  attackequiploot_.MergeFrom(from.attackequiploot_);
  defenceequiploot_.MergeFrom(from.defenceequiploot_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_attackid(from.attackid());
    }
    if (from._has_bit(1)) {
      set_recoveryid(from.recoveryid());
    }
    if (from._has_bit(2)) {
      set_r1(from.r1());
    }
    if (from._has_bit(3)) {
      set_r2(from.r2());
    }
    if (from._has_bit(4)) {
      set_attackname(from.attackname());
    }
    if (from._has_bit(5)) {
      set_log(from.log());
    }
    if (from._has_bit(6)) {
      set_attacpic(from.attacpic());
    }
    if (from._has_bit(7)) {
      set_attacktime(from.attacktime());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from._has_bit(8)) {
      set_hasbalance(from.hasbalance());
    }
    if (from._has_bit(9)) {
      set_damage(from.damage());
    }
    if (from._has_bit(10)) {
      set_type(from.type());
    }
    if (from._has_bit(11)) {
      set_defencename(from.defencename());
    }
    if (from._has_bit(12)) {
      set_attacklevel(from.attacklevel());
    }
    if (from._has_bit(13)) {
      set_defencelevel(from.defencelevel());
    }
    if (from._has_bit(14)) {
      set_attackpic_square(from.attackpic_square());
    }
    if (from._has_bit(15)) {
      set_defencepic_square(from.defencepic_square());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from._has_bit(16)) {
      set_initdamage(from.initdamage());
    }
    if (from._has_bit(19)) {
      set_honor(from.honor());
    }
    if (from._has_bit(20)) {
      set_isstrike(from.isstrike());
    }
    if (from._has_bit(21)) {
      set_feats(from.feats());
    }
    if (from._has_bit(22)) {
      set_destroyslaveroom(from.destroyslaveroom());
    }
    if (from._has_bit(23)) {
      set_adimralexp(from.adimralexp());
    }
  }
  if (from._has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (from._has_bit(24)) {
      set_defadimralexp(from.defadimralexp());
    }
    if (from._has_bit(25)) {
      set_warstage(from.warstage());
    }
    if (from._has_bit(26)) {
      mutable_superweapon()->::DB_LootSuperWeapon::MergeFrom(from.superweapon());
    }
    if (from._has_bit(27)) {
      set_issuperstorm(from.issuperstorm());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DB_LootReport::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DB_LootReport::CopyFrom(const DB_LootReport& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DB_LootReport::IsInitialized() const {
  
  return true;
}

void DB_LootReport::Swap(DB_LootReport* other) {
  if (other != this) {
    std::swap(attackid_, other->attackid_);
    std::swap(recoveryid_, other->recoveryid_);
    std::swap(r1_, other->r1_);
    std::swap(r2_, other->r2_);
    std::swap(attackname_, other->attackname_);
    std::swap(log_, other->log_);
    std::swap(attacpic_, other->attacpic_);
    std::swap(attacktime_, other->attacktime_);
    std::swap(hasbalance_, other->hasbalance_);
    std::swap(damage_, other->damage_);
    std::swap(type_, other->type_);
    std::swap(defencename_, other->defencename_);
    std::swap(attacklevel_, other->attacklevel_);
    std::swap(defencelevel_, other->defencelevel_);
    std::swap(attackpic_square_, other->attackpic_square_);
    std::swap(defencepic_square_, other->defencepic_square_);
    std::swap(initdamage_, other->initdamage_);
    attackequiploot_.Swap(&other->attackequiploot_);
    defenceequiploot_.Swap(&other->defenceequiploot_);
    std::swap(honor_, other->honor_);
    std::swap(isstrike_, other->isstrike_);
    std::swap(feats_, other->feats_);
    std::swap(destroyslaveroom_, other->destroyslaveroom_);
    std::swap(adimralexp_, other->adimralexp_);
    std::swap(defadimralexp_, other->defadimralexp_);
    std::swap(warstage_, other->warstage_);
    std::swap(superweapon_, other->superweapon_);
    std::swap(issuperstorm_, other->issuperstorm_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DB_LootReport::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DB_LootReport_descriptor_;
  metadata.reflection = DB_LootReport_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DB_Mushroom::kSFieldNumber;
const int DB_Mushroom::kLFieldNumber;
#endif  // !_MSC_VER

DB_Mushroom::DB_Mushroom() {
  SharedCtor();
}

void DB_Mushroom::InitAsDefaultInstance() {
}

DB_Mushroom::DB_Mushroom(const DB_Mushroom& from) {
  SharedCtor();
  MergeFrom(from);
}

void DB_Mushroom::SharedCtor() {
  _cached_size_ = 0;
  s_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DB_Mushroom::~DB_Mushroom() {
  SharedDtor();
}

void DB_Mushroom::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* DB_Mushroom::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DB_Mushroom_descriptor_;
}

const DB_Mushroom& DB_Mushroom::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dbinterface_5fsub_2eproto();  return *default_instance_;
}

DB_Mushroom* DB_Mushroom::default_instance_ = NULL;

DB_Mushroom* DB_Mushroom::New() const {
  return new DB_Mushroom;
}

void DB_Mushroom::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    s_ = 0;
  }
  l_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DB_Mushroom::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 s = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &s_));
        _set_bit(0);
        if (input->ExpectTag(18)) goto parse_l;
        break;
      }
      
      // repeated .DB_Loot l = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_l:
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, add_l()));
        if (input->ExpectTag(18)) goto parse_l;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DB_Mushroom::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    DB_Mushroom::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional int32 s = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->s(), output);
  }
  
  // repeated .DB_Loot l = 2;
  for (int i = 0; i < this->l_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      2, this->l(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DB_Mushroom::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 s = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->s(), target);
  }
  
  // repeated .DB_Loot l = 2;
  for (int i = 0; i < this->l_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->l(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DB_Mushroom::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 s = 1;
    if (has_s()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->s());
    }
    
  }
  // repeated .DB_Loot l = 2;
  total_size += 1 * this->l_size();
  for (int i = 0; i < this->l_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->l(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void DB_Mushroom::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DB_Mushroom* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DB_Mushroom*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DB_Mushroom::MergeFrom(const DB_Mushroom& from) {
  GOOGLE_CHECK_NE(&from, this);
  l_.MergeFrom(from.l_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_s(from.s());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DB_Mushroom::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DB_Mushroom::CopyFrom(const DB_Mushroom& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DB_Mushroom::IsInitialized() const {
  
  return true;
}

void DB_Mushroom::Swap(DB_Mushroom* other) {
  if (other != this) {
    std::swap(s_, other->s_);
    l_.Swap(&other->l_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DB_Mushroom::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DB_Mushroom_descriptor_;
  metadata.reflection = DB_Mushroom_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DB_Stats::kMrlsrFieldNumber;
const int DB_Stats::kMrlsFieldNumber;
const int DB_Stats::kMrlvFieldNumber;
const int DB_Stats::kMutesfxFieldNumber;
const int DB_Stats::kMutemusicFieldNumber;
const int DB_Stats::kLogFieldNumber;
const int DB_Stats::kSFieldNumber;
const int DB_Stats::kELpFieldNumber;
const int DB_Stats::kPopuprateFieldNumber;
const int DB_Stats::kCMFieldNumber;
const int DB_Stats::kTipFieldNumber;
const int DB_Stats::kUpdateidFieldNumber;
const int DB_Stats::kReinforcementsFieldNumber;
const int DB_Stats::kReinforcementsStateFieldNumber;
const int DB_Stats::kSavetimeFieldNumber;
const int DB_Stats::kReinforcementsTimeFieldNumber;
const int DB_Stats::kSettingsVoFieldNumber;
const int DB_Stats::kSettingsBodiesFieldNumber;
const int DB_Stats::kSettingsVehiclesFieldNumber;
const int DB_Stats::kSettingsAdmiralFieldNumber;
const int DB_Stats::kSettingsLowfpsFieldNumber;
#endif  // !_MSC_VER

DB_Stats::DB_Stats() {
  SharedCtor();
}

void DB_Stats::InitAsDefaultInstance() {
}

DB_Stats::DB_Stats(const DB_Stats& from) {
  SharedCtor();
  MergeFrom(from);
}

void DB_Stats::SharedCtor() {
  _cached_size_ = 0;
  mrlsr_ = 0;
  mrls_ = 0;
  mrlv_ = 0;
  mutesfx_ = 0;
  mutemusic_ = 0;
  log_ = 0;
  s_ = 0;
  e_lp_ = 0;
  popuprate_ = 0;
  cm_ = 0;
  tip_ = 0;
  updateid_ = 0;
  reinforcements_ = 0;
  reinforcements_state_ = 0;
  savetime_ = 0;
  reinforcementstime_ = 0;
  settings_vo_ = 1;
  settings_bodies_ = 1;
  settings_vehicles_ = 1;
  settings_admiral_ = 1;
  settings_lowfps_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DB_Stats::~DB_Stats() {
  SharedDtor();
}

void DB_Stats::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* DB_Stats::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DB_Stats_descriptor_;
}

const DB_Stats& DB_Stats::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dbinterface_5fsub_2eproto();  return *default_instance_;
}

DB_Stats* DB_Stats::default_instance_ = NULL;

DB_Stats* DB_Stats::New() const {
  return new DB_Stats;
}

void DB_Stats::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    mrlsr_ = 0;
    mrls_ = 0;
    mrlv_ = 0;
    mutesfx_ = 0;
    mutemusic_ = 0;
    log_ = 0;
    s_ = 0;
    e_lp_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    popuprate_ = 0;
    cm_ = 0;
    tip_ = 0;
    updateid_ = 0;
    reinforcements_ = 0;
    reinforcements_state_ = 0;
    savetime_ = 0;
    reinforcementstime_ = 0;
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    settings_vo_ = 1;
    settings_bodies_ = 1;
    settings_vehicles_ = 1;
    settings_admiral_ = 1;
    settings_lowfps_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DB_Stats::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 mrlsr = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &mrlsr_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_mrls;
        break;
      }
      
      // optional int32 mrls = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_mrls:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &mrls_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_mrlv;
        break;
      }
      
      // optional int32 mrlv = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_mrlv:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &mrlv_));
        _set_bit(2);
        if (input->ExpectTag(32)) goto parse_mutesfx;
        break;
      }
      
      // optional int32 mutesfx = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_mutesfx:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &mutesfx_));
        _set_bit(3);
        if (input->ExpectTag(40)) goto parse_mutemusic;
        break;
      }
      
      // optional int32 mutemusic = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_mutemusic:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &mutemusic_));
        _set_bit(4);
        if (input->ExpectTag(48)) goto parse_log;
        break;
      }
      
      // optional int32 log = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_log:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &log_));
        _set_bit(5);
        if (input->ExpectTag(56)) goto parse_s;
        break;
      }
      
      // optional int32 s = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_s:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &s_));
        _set_bit(6);
        if (input->ExpectTag(64)) goto parse_e_lp;
        break;
      }
      
      // optional int32 e_lp = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_e_lp:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &e_lp_));
        _set_bit(7);
        if (input->ExpectTag(72)) goto parse_popuprate;
        break;
      }
      
      // optional int32 popuprate = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_popuprate:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &popuprate_));
        _set_bit(8);
        if (input->ExpectTag(80)) goto parse_CM;
        break;
      }
      
      // optional int32 CM = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_CM:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &cm_));
        _set_bit(9);
        if (input->ExpectTag(88)) goto parse_tip;
        break;
      }
      
      // optional int32 tip = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_tip:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &tip_));
        _set_bit(10);
        if (input->ExpectTag(96)) goto parse_updateid;
        break;
      }
      
      // optional int32 updateid = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_updateid:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &updateid_));
        _set_bit(11);
        if (input->ExpectTag(104)) goto parse_reinforcements;
        break;
      }
      
      // optional int32 reinforcements = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_reinforcements:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &reinforcements_));
        _set_bit(12);
        if (input->ExpectTag(112)) goto parse_reinforcements_state;
        break;
      }
      
      // optional int32 reinforcements_state = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_reinforcements_state:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &reinforcements_state_));
        _set_bit(13);
        if (input->ExpectTag(120)) goto parse_savetime;
        break;
      }
      
      // optional int32 savetime = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_savetime:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &savetime_));
        _set_bit(14);
        if (input->ExpectTag(128)) goto parse_reinforcementsTime;
        break;
      }
      
      // optional int32 reinforcementsTime = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_reinforcementsTime:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &reinforcementstime_));
        _set_bit(15);
        if (input->ExpectTag(136)) goto parse_settings_vo;
        break;
      }
      
      // optional int32 settings_vo = 17 [default = 1];
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_settings_vo:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &settings_vo_));
        _set_bit(16);
        if (input->ExpectTag(144)) goto parse_settings_bodies;
        break;
      }
      
      // optional int32 settings_bodies = 18 [default = 1];
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_settings_bodies:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &settings_bodies_));
        _set_bit(17);
        if (input->ExpectTag(152)) goto parse_settings_vehicles;
        break;
      }
      
      // optional int32 settings_vehicles = 19 [default = 1];
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_settings_vehicles:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &settings_vehicles_));
        _set_bit(18);
        if (input->ExpectTag(160)) goto parse_settings_admiral;
        break;
      }
      
      // optional int32 settings_admiral = 20 [default = 1];
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_settings_admiral:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &settings_admiral_));
        _set_bit(19);
        if (input->ExpectTag(168)) goto parse_settings_lowfps;
        break;
      }
      
      // optional bool settings_lowfps = 21 [default = false];
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_settings_lowfps:
        DO_(::google::protobuf::internal::WireFormatLite::ReadBool(
              input, &settings_lowfps_));
        _set_bit(20);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DB_Stats::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    DB_Stats::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional int32 mrlsr = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->mrlsr(), output);
  }
  
  // optional int32 mrls = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->mrls(), output);
  }
  
  // optional int32 mrlv = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->mrlv(), output);
  }
  
  // optional int32 mutesfx = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->mutesfx(), output);
  }
  
  // optional int32 mutemusic = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->mutemusic(), output);
  }
  
  // optional int32 log = 6;
  if (_has_bit(5)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->log(), output);
  }
  
  // optional int32 s = 7;
  if (_has_bit(6)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->s(), output);
  }
  
  // optional int32 e_lp = 8;
  if (_has_bit(7)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->e_lp(), output);
  }
  
  // optional int32 popuprate = 9;
  if (_has_bit(8)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->popuprate(), output);
  }
  
  // optional int32 CM = 10;
  if (_has_bit(9)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->cm(), output);
  }
  
  // optional int32 tip = 11;
  if (_has_bit(10)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->tip(), output);
  }
  
  // optional int32 updateid = 12;
  if (_has_bit(11)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->updateid(), output);
  }
  
  // optional int32 reinforcements = 13;
  if (_has_bit(12)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->reinforcements(), output);
  }
  
  // optional int32 reinforcements_state = 14;
  if (_has_bit(13)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->reinforcements_state(), output);
  }
  
  // optional int32 savetime = 15;
  if (_has_bit(14)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(15, this->savetime(), output);
  }
  
  // optional int32 reinforcementsTime = 16;
  if (_has_bit(15)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(16, this->reinforcementstime(), output);
  }
  
  // optional int32 settings_vo = 17 [default = 1];
  if (_has_bit(16)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(17, this->settings_vo(), output);
  }
  
  // optional int32 settings_bodies = 18 [default = 1];
  if (_has_bit(17)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(18, this->settings_bodies(), output);
  }
  
  // optional int32 settings_vehicles = 19 [default = 1];
  if (_has_bit(18)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(19, this->settings_vehicles(), output);
  }
  
  // optional int32 settings_admiral = 20 [default = 1];
  if (_has_bit(19)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(20, this->settings_admiral(), output);
  }
  
  // optional bool settings_lowfps = 21 [default = false];
  if (_has_bit(20)) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(21, this->settings_lowfps(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DB_Stats::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 mrlsr = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->mrlsr(), target);
  }
  
  // optional int32 mrls = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->mrls(), target);
  }
  
  // optional int32 mrlv = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->mrlv(), target);
  }
  
  // optional int32 mutesfx = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->mutesfx(), target);
  }
  
  // optional int32 mutemusic = 5;
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->mutemusic(), target);
  }
  
  // optional int32 log = 6;
  if (_has_bit(5)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->log(), target);
  }
  
  // optional int32 s = 7;
  if (_has_bit(6)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->s(), target);
  }
  
  // optional int32 e_lp = 8;
  if (_has_bit(7)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->e_lp(), target);
  }
  
  // optional int32 popuprate = 9;
  if (_has_bit(8)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->popuprate(), target);
  }
  
  // optional int32 CM = 10;
  if (_has_bit(9)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->cm(), target);
  }
  
  // optional int32 tip = 11;
  if (_has_bit(10)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->tip(), target);
  }
  
  // optional int32 updateid = 12;
  if (_has_bit(11)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->updateid(), target);
  }
  
  // optional int32 reinforcements = 13;
  if (_has_bit(12)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->reinforcements(), target);
  }
  
  // optional int32 reinforcements_state = 14;
  if (_has_bit(13)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(14, this->reinforcements_state(), target);
  }
  
  // optional int32 savetime = 15;
  if (_has_bit(14)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(15, this->savetime(), target);
  }
  
  // optional int32 reinforcementsTime = 16;
  if (_has_bit(15)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(16, this->reinforcementstime(), target);
  }
  
  // optional int32 settings_vo = 17 [default = 1];
  if (_has_bit(16)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(17, this->settings_vo(), target);
  }
  
  // optional int32 settings_bodies = 18 [default = 1];
  if (_has_bit(17)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(18, this->settings_bodies(), target);
  }
  
  // optional int32 settings_vehicles = 19 [default = 1];
  if (_has_bit(18)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(19, this->settings_vehicles(), target);
  }
  
  // optional int32 settings_admiral = 20 [default = 1];
  if (_has_bit(19)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(20, this->settings_admiral(), target);
  }
  
  // optional bool settings_lowfps = 21 [default = false];
  if (_has_bit(20)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(21, this->settings_lowfps(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DB_Stats::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 mrlsr = 1;
    if (has_mrlsr()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->mrlsr());
    }
    
    // optional int32 mrls = 2;
    if (has_mrls()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->mrls());
    }
    
    // optional int32 mrlv = 3;
    if (has_mrlv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->mrlv());
    }
    
    // optional int32 mutesfx = 4;
    if (has_mutesfx()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->mutesfx());
    }
    
    // optional int32 mutemusic = 5;
    if (has_mutemusic()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->mutemusic());
    }
    
    // optional int32 log = 6;
    if (has_log()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->log());
    }
    
    // optional int32 s = 7;
    if (has_s()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->s());
    }
    
    // optional int32 e_lp = 8;
    if (has_e_lp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->e_lp());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 popuprate = 9;
    if (has_popuprate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->popuprate());
    }
    
    // optional int32 CM = 10;
    if (has_cm()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cm());
    }
    
    // optional int32 tip = 11;
    if (has_tip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tip());
    }
    
    // optional int32 updateid = 12;
    if (has_updateid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->updateid());
    }
    
    // optional int32 reinforcements = 13;
    if (has_reinforcements()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->reinforcements());
    }
    
    // optional int32 reinforcements_state = 14;
    if (has_reinforcements_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->reinforcements_state());
    }
    
    // optional int32 savetime = 15;
    if (has_savetime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->savetime());
    }
    
    // optional int32 reinforcementsTime = 16;
    if (has_reinforcementstime()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->reinforcementstime());
    }
    
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional int32 settings_vo = 17 [default = 1];
    if (has_settings_vo()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->settings_vo());
    }
    
    // optional int32 settings_bodies = 18 [default = 1];
    if (has_settings_bodies()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->settings_bodies());
    }
    
    // optional int32 settings_vehicles = 19 [default = 1];
    if (has_settings_vehicles()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->settings_vehicles());
    }
    
    // optional int32 settings_admiral = 20 [default = 1];
    if (has_settings_admiral()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->settings_admiral());
    }
    
    // optional bool settings_lowfps = 21 [default = false];
    if (has_settings_lowfps()) {
      total_size += 2 + 1;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void DB_Stats::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DB_Stats* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DB_Stats*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DB_Stats::MergeFrom(const DB_Stats& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_mrlsr(from.mrlsr());
    }
    if (from._has_bit(1)) {
      set_mrls(from.mrls());
    }
    if (from._has_bit(2)) {
      set_mrlv(from.mrlv());
    }
    if (from._has_bit(3)) {
      set_mutesfx(from.mutesfx());
    }
    if (from._has_bit(4)) {
      set_mutemusic(from.mutemusic());
    }
    if (from._has_bit(5)) {
      set_log(from.log());
    }
    if (from._has_bit(6)) {
      set_s(from.s());
    }
    if (from._has_bit(7)) {
      set_e_lp(from.e_lp());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from._has_bit(8)) {
      set_popuprate(from.popuprate());
    }
    if (from._has_bit(9)) {
      set_cm(from.cm());
    }
    if (from._has_bit(10)) {
      set_tip(from.tip());
    }
    if (from._has_bit(11)) {
      set_updateid(from.updateid());
    }
    if (from._has_bit(12)) {
      set_reinforcements(from.reinforcements());
    }
    if (from._has_bit(13)) {
      set_reinforcements_state(from.reinforcements_state());
    }
    if (from._has_bit(14)) {
      set_savetime(from.savetime());
    }
    if (from._has_bit(15)) {
      set_reinforcementstime(from.reinforcementstime());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from._has_bit(16)) {
      set_settings_vo(from.settings_vo());
    }
    if (from._has_bit(17)) {
      set_settings_bodies(from.settings_bodies());
    }
    if (from._has_bit(18)) {
      set_settings_vehicles(from.settings_vehicles());
    }
    if (from._has_bit(19)) {
      set_settings_admiral(from.settings_admiral());
    }
    if (from._has_bit(20)) {
      set_settings_lowfps(from.settings_lowfps());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DB_Stats::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DB_Stats::CopyFrom(const DB_Stats& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DB_Stats::IsInitialized() const {
  
  return true;
}

void DB_Stats::Swap(DB_Stats* other) {
  if (other != this) {
    std::swap(mrlsr_, other->mrlsr_);
    std::swap(mrls_, other->mrls_);
    std::swap(mrlv_, other->mrlv_);
    std::swap(mutesfx_, other->mutesfx_);
    std::swap(mutemusic_, other->mutemusic_);
    std::swap(log_, other->log_);
    std::swap(s_, other->s_);
    std::swap(e_lp_, other->e_lp_);
    std::swap(popuprate_, other->popuprate_);
    std::swap(cm_, other->cm_);
    std::swap(tip_, other->tip_);
    std::swap(updateid_, other->updateid_);
    std::swap(reinforcements_, other->reinforcements_);
    std::swap(reinforcements_state_, other->reinforcements_state_);
    std::swap(savetime_, other->savetime_);
    std::swap(reinforcementstime_, other->reinforcementstime_);
    std::swap(settings_vo_, other->settings_vo_);
    std::swap(settings_bodies_, other->settings_bodies_);
    std::swap(settings_vehicles_, other->settings_vehicles_);
    std::swap(settings_admiral_, other->settings_admiral_);
    std::swap(settings_lowfps_, other->settings_lowfps_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DB_Stats::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DB_Stats_descriptor_;
  metadata.reflection = DB_Stats_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DB_UpgradeArmy::kArmyTypeFieldNumber;
const int DB_UpgradeArmy::kLevelFieldNumber;
const int DB_UpgradeArmy::kFinishTimeFieldNumber;
const int DB_UpgradeArmy::kExtraBldTimeFieldNumber;
const int DB_UpgradeArmy::kExtraUpTimeFieldNumber;
#endif  // !_MSC_VER

DB_UpgradeArmy::DB_UpgradeArmy() {
  SharedCtor();
}

void DB_UpgradeArmy::InitAsDefaultInstance() {
}

DB_UpgradeArmy::DB_UpgradeArmy(const DB_UpgradeArmy& from) {
  SharedCtor();
  MergeFrom(from);
}

void DB_UpgradeArmy::SharedCtor() {
  _cached_size_ = 0;
  armytype_ = 0;
  level_ = 0;
  finishtime_ = 0;
  extrabldtime_ = 0;
  extrauptime_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DB_UpgradeArmy::~DB_UpgradeArmy() {
  SharedDtor();
}

void DB_UpgradeArmy::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* DB_UpgradeArmy::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DB_UpgradeArmy_descriptor_;
}

const DB_UpgradeArmy& DB_UpgradeArmy::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dbinterface_5fsub_2eproto();  return *default_instance_;
}

DB_UpgradeArmy* DB_UpgradeArmy::default_instance_ = NULL;

DB_UpgradeArmy* DB_UpgradeArmy::New() const {
  return new DB_UpgradeArmy;
}

void DB_UpgradeArmy::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    armytype_ = 0;
    level_ = 0;
    finishtime_ = 0;
    extrabldtime_ = 0;
    extrauptime_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DB_UpgradeArmy::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 armyType = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &armytype_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_level;
        break;
      }
      
      // optional int32 level = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_level:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &level_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_finishTime;
        break;
      }
      
      // optional int32 finishTime = 3 [default = 0];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_finishTime:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &finishtime_));
        _set_bit(2);
        if (input->ExpectTag(32)) goto parse_ExtraBldTime;
        break;
      }
      
      // optional int32 ExtraBldTime = 4 [default = 0];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_ExtraBldTime:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &extrabldtime_));
        _set_bit(3);
        if (input->ExpectTag(40)) goto parse_ExtraUpTime;
        break;
      }
      
      // optional int32 ExtraUpTime = 5 [default = 0];
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_ExtraUpTime:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &extrauptime_));
        _set_bit(4);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DB_UpgradeArmy::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    DB_UpgradeArmy::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional int32 armyType = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->armytype(), output);
  }
  
  // optional int32 level = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->level(), output);
  }
  
  // optional int32 finishTime = 3 [default = 0];
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->finishtime(), output);
  }
  
  // optional int32 ExtraBldTime = 4 [default = 0];
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->extrabldtime(), output);
  }
  
  // optional int32 ExtraUpTime = 5 [default = 0];
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->extrauptime(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DB_UpgradeArmy::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 armyType = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->armytype(), target);
  }
  
  // optional int32 level = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->level(), target);
  }
  
  // optional int32 finishTime = 3 [default = 0];
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->finishtime(), target);
  }
  
  // optional int32 ExtraBldTime = 4 [default = 0];
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->extrabldtime(), target);
  }
  
  // optional int32 ExtraUpTime = 5 [default = 0];
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->extrauptime(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DB_UpgradeArmy::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 armyType = 1;
    if (has_armytype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->armytype());
    }
    
    // optional int32 level = 2;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->level());
    }
    
    // optional int32 finishTime = 3 [default = 0];
    if (has_finishtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->finishtime());
    }
    
    // optional int32 ExtraBldTime = 4 [default = 0];
    if (has_extrabldtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->extrabldtime());
    }
    
    // optional int32 ExtraUpTime = 5 [default = 0];
    if (has_extrauptime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->extrauptime());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void DB_UpgradeArmy::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DB_UpgradeArmy* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DB_UpgradeArmy*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DB_UpgradeArmy::MergeFrom(const DB_UpgradeArmy& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_armytype(from.armytype());
    }
    if (from._has_bit(1)) {
      set_level(from.level());
    }
    if (from._has_bit(2)) {
      set_finishtime(from.finishtime());
    }
    if (from._has_bit(3)) {
      set_extrabldtime(from.extrabldtime());
    }
    if (from._has_bit(4)) {
      set_extrauptime(from.extrauptime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DB_UpgradeArmy::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DB_UpgradeArmy::CopyFrom(const DB_UpgradeArmy& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DB_UpgradeArmy::IsInitialized() const {
  
  return true;
}

void DB_UpgradeArmy::Swap(DB_UpgradeArmy* other) {
  if (other != this) {
    std::swap(armytype_, other->armytype_);
    std::swap(level_, other->level_);
    std::swap(finishtime_, other->finishtime_);
    std::swap(extrabldtime_, other->extrabldtime_);
    std::swap(extrauptime_, other->extrauptime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DB_UpgradeArmy::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DB_UpgradeArmy_descriptor_;
  metadata.reflection = DB_UpgradeArmy_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DB_UnlockArmy::kArmyTypeFieldNumber;
const int DB_UnlockArmy::kLevelFieldNumber;
#endif  // !_MSC_VER

DB_UnlockArmy::DB_UnlockArmy() {
  SharedCtor();
}

void DB_UnlockArmy::InitAsDefaultInstance() {
}

DB_UnlockArmy::DB_UnlockArmy(const DB_UnlockArmy& from) {
  SharedCtor();
  MergeFrom(from);
}

void DB_UnlockArmy::SharedCtor() {
  _cached_size_ = 0;
  armytype_ = 0;
  level_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DB_UnlockArmy::~DB_UnlockArmy() {
  SharedDtor();
}

void DB_UnlockArmy::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* DB_UnlockArmy::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DB_UnlockArmy_descriptor_;
}

const DB_UnlockArmy& DB_UnlockArmy::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dbinterface_5fsub_2eproto();  return *default_instance_;
}

DB_UnlockArmy* DB_UnlockArmy::default_instance_ = NULL;

DB_UnlockArmy* DB_UnlockArmy::New() const {
  return new DB_UnlockArmy;
}

void DB_UnlockArmy::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    armytype_ = 0;
    level_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DB_UnlockArmy::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 armyType = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &armytype_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_level;
        break;
      }
      
      // optional int32 level = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_level:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &level_));
        _set_bit(1);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DB_UnlockArmy::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    DB_UnlockArmy::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional int32 armyType = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->armytype(), output);
  }
  
  // optional int32 level = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->level(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DB_UnlockArmy::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 armyType = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->armytype(), target);
  }
  
  // optional int32 level = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->level(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DB_UnlockArmy::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 armyType = 1;
    if (has_armytype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->armytype());
    }
    
    // optional int32 level = 2;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->level());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void DB_UnlockArmy::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DB_UnlockArmy* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DB_UnlockArmy*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DB_UnlockArmy::MergeFrom(const DB_UnlockArmy& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_armytype(from.armytype());
    }
    if (from._has_bit(1)) {
      set_level(from.level());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DB_UnlockArmy::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DB_UnlockArmy::CopyFrom(const DB_UnlockArmy& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DB_UnlockArmy::IsInitialized() const {
  
  return true;
}

void DB_UnlockArmy::Swap(DB_UnlockArmy* other) {
  if (other != this) {
    std::swap(armytype_, other->armytype_);
    std::swap(level_, other->level_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DB_UnlockArmy::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DB_UnlockArmy_descriptor_;
  metadata.reflection = DB_UnlockArmy_reflection_;
  return metadata;
}


// ===================================================================

const ::std::string DB_Academy::_default_type_;
#ifndef _MSC_VER
const int DB_Academy::kTypeFieldNumber;
const int DB_Academy::kLFieldNumber;
const int DB_Academy::kTFieldNumber;
const int DB_Academy::kSavetimeFieldNumber;
#endif  // !_MSC_VER

DB_Academy::DB_Academy() {
  SharedCtor();
}

void DB_Academy::InitAsDefaultInstance() {
}

DB_Academy::DB_Academy(const DB_Academy& from) {
  SharedCtor();
  MergeFrom(from);
}

void DB_Academy::SharedCtor() {
  _cached_size_ = 0;
  type_ = const_cast< ::std::string*>(&_default_type_);
  l_ = 0;
  t_ = 0;
  savetime_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DB_Academy::~DB_Academy() {
  SharedDtor();
}

void DB_Academy::SharedDtor() {
  if (type_ != &_default_type_) {
    delete type_;
  }
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* DB_Academy::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DB_Academy_descriptor_;
}

const DB_Academy& DB_Academy::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dbinterface_5fsub_2eproto();  return *default_instance_;
}

DB_Academy* DB_Academy::default_instance_ = NULL;

DB_Academy* DB_Academy::New() const {
  return new DB_Academy;
}

void DB_Academy::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (type_ != &_default_type_) {
        type_->clear();
      }
    }
    l_ = 0;
    t_ = 0;
    savetime_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DB_Academy::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadString(
              input, this->mutable_type()));
        ::google::protobuf::internal::WireFormat::VerifyUTF8String(
          this->type().data(), this->type().length(),
          ::google::protobuf::internal::WireFormat::PARSE);
        if (input->ExpectTag(16)) goto parse_l;
        break;
      }
      
      // optional int32 l = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_l:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &l_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_t;
        break;
      }
      
      // optional int32 t = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_t:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &t_));
        _set_bit(2);
        if (input->ExpectTag(32)) goto parse_savetime;
        break;
      }
      
      // optional int32 savetime = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_savetime:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &savetime_));
        _set_bit(3);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DB_Academy::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    DB_Academy::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional string type = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->type().data(), this->type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->type(), output);
  }
  
  // optional int32 l = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->l(), output);
  }
  
  // optional int32 t = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->t(), output);
  }
  
  // optional int32 savetime = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->savetime(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DB_Academy::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string type = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->type().data(), this->type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->type(), target);
  }
  
  // optional int32 l = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->l(), target);
  }
  
  // optional int32 t = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->t(), target);
  }
  
  // optional int32 savetime = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->savetime(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DB_Academy::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->type());
    }
    
    // optional int32 l = 2;
    if (has_l()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->l());
    }
    
    // optional int32 t = 3;
    if (has_t()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->t());
    }
    
    // optional int32 savetime = 4;
    if (has_savetime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->savetime());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void DB_Academy::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DB_Academy* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DB_Academy*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DB_Academy::MergeFrom(const DB_Academy& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_type(from.type());
    }
    if (from._has_bit(1)) {
      set_l(from.l());
    }
    if (from._has_bit(2)) {
      set_t(from.t());
    }
    if (from._has_bit(3)) {
      set_savetime(from.savetime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DB_Academy::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DB_Academy::CopyFrom(const DB_Academy& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DB_Academy::IsInitialized() const {
  
  return true;
}

void DB_Academy::Swap(DB_Academy* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(l_, other->l_);
    std::swap(t_, other->t_);
    std::swap(savetime_, other->savetime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DB_Academy::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DB_Academy_descriptor_;
  metadata.reflection = DB_Academy_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DB_Monsterbaiter::kQueueFieldNumber;
const int DB_Monsterbaiter::kMuskFieldNumber;
const int DB_Monsterbaiter::kAngleFieldNumber;
const int DB_Monsterbaiter::kStartTimeFieldNumber;
#endif  // !_MSC_VER

DB_Monsterbaiter::DB_Monsterbaiter() {
  SharedCtor();
}

void DB_Monsterbaiter::InitAsDefaultInstance() {
}

DB_Monsterbaiter::DB_Monsterbaiter(const DB_Monsterbaiter& from) {
  SharedCtor();
  MergeFrom(from);
}

void DB_Monsterbaiter::SharedCtor() {
  _cached_size_ = 0;
  musk_ = 0;
  angle_ = 0;
  starttime_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DB_Monsterbaiter::~DB_Monsterbaiter() {
  SharedDtor();
}

void DB_Monsterbaiter::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* DB_Monsterbaiter::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DB_Monsterbaiter_descriptor_;
}

const DB_Monsterbaiter& DB_Monsterbaiter::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dbinterface_5fsub_2eproto();  return *default_instance_;
}

DB_Monsterbaiter* DB_Monsterbaiter::default_instance_ = NULL;

DB_Monsterbaiter* DB_Monsterbaiter::New() const {
  return new DB_Monsterbaiter;
}

void DB_Monsterbaiter::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    musk_ = 0;
    angle_ = 0;
    starttime_ = 0;
  }
  queue_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DB_Monsterbaiter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated int32 queue = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_queue:
        ::google::protobuf::int32 value;
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &value));
        add_queue(value);
        if (input->ExpectTag(8)) goto parse_queue;
        if (input->ExpectTag(16)) goto parse_musk;
        break;
      }
      
      // optional int32 musk = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_musk:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &musk_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_angle;
        break;
      }
      
      // optional int32 angle = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_angle:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &angle_));
        _set_bit(2);
        if (input->ExpectTag(32)) goto parse_startTime;
        break;
      }
      
      // optional int32 startTime = 4 [default = 0];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_startTime:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &starttime_));
        _set_bit(3);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DB_Monsterbaiter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    DB_Monsterbaiter::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // repeated int32 queue = 1;
  for (int i = 0; i < this->queue_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      1, this->queue(i), output);
  }
  
  // optional int32 musk = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->musk(), output);
  }
  
  // optional int32 angle = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->angle(), output);
  }
  
  // optional int32 startTime = 4 [default = 0];
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->starttime(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DB_Monsterbaiter::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated int32 queue = 1;
  for (int i = 0; i < this->queue_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(1, this->queue(i), target);
  }
  
  // optional int32 musk = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->musk(), target);
  }
  
  // optional int32 angle = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->angle(), target);
  }
  
  // optional int32 startTime = 4 [default = 0];
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->starttime(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DB_Monsterbaiter::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional int32 musk = 2;
    if (has_musk()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->musk());
    }
    
    // optional int32 angle = 3;
    if (has_angle()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->angle());
    }
    
    // optional int32 startTime = 4 [default = 0];
    if (has_starttime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->starttime());
    }
    
  }
  // repeated int32 queue = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->queue_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->queue(i));
    }
    total_size += 1 * this->queue_size() + data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void DB_Monsterbaiter::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DB_Monsterbaiter* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DB_Monsterbaiter*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DB_Monsterbaiter::MergeFrom(const DB_Monsterbaiter& from) {
  GOOGLE_CHECK_NE(&from, this);
  queue_.MergeFrom(from.queue_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from._has_bit(1)) {
      set_musk(from.musk());
    }
    if (from._has_bit(2)) {
      set_angle(from.angle());
    }
    if (from._has_bit(3)) {
      set_starttime(from.starttime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DB_Monsterbaiter::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DB_Monsterbaiter::CopyFrom(const DB_Monsterbaiter& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DB_Monsterbaiter::IsInitialized() const {
  
  return true;
}

void DB_Monsterbaiter::Swap(DB_Monsterbaiter* other) {
  if (other != this) {
    queue_.Swap(&other->queue_);
    std::swap(musk_, other->musk_);
    std::swap(angle_, other->angle_);
    std::swap(starttime_, other->starttime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DB_Monsterbaiter::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DB_Monsterbaiter_descriptor_;
  metadata.reflection = DB_Monsterbaiter_reflection_;
  return metadata;
}


// ===================================================================

const ::std::string DB_Locker::_default_name_;
const ::std::string DB_Locker::_default_s_;
const ::std::string DB_Locker::_default_e_;
#ifndef _MSC_VER
const int DB_Locker::kNameFieldNumber;
const int DB_Locker::kTFieldNumber;
const int DB_Locker::kSFieldNumber;
const int DB_Locker::kEFieldNumber;
#endif  // !_MSC_VER

DB_Locker::DB_Locker() {
  SharedCtor();
}

void DB_Locker::InitAsDefaultInstance() {
}

DB_Locker::DB_Locker(const DB_Locker& from) {
  SharedCtor();
  MergeFrom(from);
}

void DB_Locker::SharedCtor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&_default_name_);
  t_ = 0;
  s_ = const_cast< ::std::string*>(&_default_s_);
  e_ = const_cast< ::std::string*>(&_default_e_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DB_Locker::~DB_Locker() {
  SharedDtor();
}

void DB_Locker::SharedDtor() {
  if (name_ != &_default_name_) {
    delete name_;
  }
  if (s_ != &_default_s_) {
    delete s_;
  }
  if (e_ != &_default_e_) {
    delete e_;
  }
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* DB_Locker::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DB_Locker_descriptor_;
}

const DB_Locker& DB_Locker::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dbinterface_5fsub_2eproto();  return *default_instance_;
}

DB_Locker* DB_Locker::default_instance_ = NULL;

DB_Locker* DB_Locker::New() const {
  return new DB_Locker;
}

void DB_Locker::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (name_ != &_default_name_) {
        name_->clear();
      }
    }
    t_ = 0;
    if (_has_bit(2)) {
      if (s_ != &_default_s_) {
        s_->clear();
      }
    }
    if (_has_bit(3)) {
      if (e_ != &_default_e_) {
        e_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DB_Locker::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadString(
              input, this->mutable_name()));
        ::google::protobuf::internal::WireFormat::VerifyUTF8String(
          this->name().data(), this->name().length(),
          ::google::protobuf::internal::WireFormat::PARSE);
        if (input->ExpectTag(16)) goto parse_t;
        break;
      }
      
      // optional int32 t = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_t:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &t_));
        _set_bit(1);
        if (input->ExpectTag(26)) goto parse_s;
        break;
      }
      
      // optional string s = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_s:
        DO_(::google::protobuf::internal::WireFormatLite::ReadString(
              input, this->mutable_s()));
        ::google::protobuf::internal::WireFormat::VerifyUTF8String(
          this->s().data(), this->s().length(),
          ::google::protobuf::internal::WireFormat::PARSE);
        if (input->ExpectTag(34)) goto parse_e;
        break;
      }
      
      // optional string e = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_e:
        DO_(::google::protobuf::internal::WireFormatLite::ReadString(
              input, this->mutable_e()));
        ::google::protobuf::internal::WireFormat::VerifyUTF8String(
          this->e().data(), this->e().length(),
          ::google::protobuf::internal::WireFormat::PARSE);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DB_Locker::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    DB_Locker::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional string name = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->name(), output);
  }
  
  // optional int32 t = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->t(), output);
  }
  
  // optional string s = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->s().data(), this->s().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->s(), output);
  }
  
  // optional string e = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->e().data(), this->e().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->e(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DB_Locker::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string name = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }
  
  // optional int32 t = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->t(), target);
  }
  
  // optional string s = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->s().data(), this->s().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->s(), target);
  }
  
  // optional string e = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->e().data(), this->e().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->e(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DB_Locker::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }
    
    // optional int32 t = 2;
    if (has_t()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->t());
    }
    
    // optional string s = 3;
    if (has_s()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->s());
    }
    
    // optional string e = 4;
    if (has_e()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->e());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void DB_Locker::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DB_Locker* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DB_Locker*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DB_Locker::MergeFrom(const DB_Locker& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_name(from.name());
    }
    if (from._has_bit(1)) {
      set_t(from.t());
    }
    if (from._has_bit(2)) {
      set_s(from.s());
    }
    if (from._has_bit(3)) {
      set_e(from.e());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DB_Locker::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DB_Locker::CopyFrom(const DB_Locker& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DB_Locker::IsInitialized() const {
  
  return true;
}

void DB_Locker::Swap(DB_Locker* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(t_, other->t_);
    std::swap(s_, other->s_);
    std::swap(e_, other->e_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DB_Locker::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DB_Locker_descriptor_;
  metadata.reflection = DB_Locker_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DB_Army::kTypeFieldNumber;
const int DB_Army::kXFieldNumber;
const int DB_Army::kYFieldNumber;
const int DB_Army::kAngleFieldNumber;
const int DB_Army::kHealthFieldNumber;
const int DB_Army::kStanceFieldNumber;
const int DB_Army::kIdFieldNumber;
const int DB_Army::kDelstateFieldNumber;
const int DB_Army::kCampstateFieldNumber;
const int DB_Army::kGradeFieldNumber;
#endif  // !_MSC_VER

DB_Army::DB_Army() {
  SharedCtor();
}

void DB_Army::InitAsDefaultInstance() {
}

DB_Army::DB_Army(const DB_Army& from) {
  SharedCtor();
  MergeFrom(from);
}

void DB_Army::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  x_ = 0;
  y_ = 0;
  angle_ = 0;
  health_ = 0;
  stance_ = 0;
  id_ = 0;
  delstate_ = 0;
  campstate_ = 0;
  grade_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DB_Army::~DB_Army() {
  SharedDtor();
}

void DB_Army::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* DB_Army::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DB_Army_descriptor_;
}

const DB_Army& DB_Army::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dbinterface_5fsub_2eproto();  return *default_instance_;
}

DB_Army* DB_Army::default_instance_ = NULL;

DB_Army* DB_Army::New() const {
  return new DB_Army;
}

void DB_Army::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0;
    x_ = 0;
    y_ = 0;
    angle_ = 0;
    health_ = 0;
    stance_ = 0;
    id_ = 0;
    delstate_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    campstate_ = 0;
    grade_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DB_Army::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &type_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_X;
        break;
      }
      
      // optional int32 X = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_X:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &x_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_Y;
        break;
      }
      
      // optional int32 Y = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Y:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &y_));
        _set_bit(2);
        if (input->ExpectTag(32)) goto parse_angle;
        break;
      }
      
      // optional int32 angle = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_angle:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &angle_));
        _set_bit(3);
        if (input->ExpectTag(40)) goto parse_health;
        break;
      }
      
      // optional int32 health = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_health:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &health_));
        _set_bit(4);
        if (input->ExpectTag(48)) goto parse_stance;
        break;
      }
      
      // optional int32 stance = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_stance:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &stance_));
        _set_bit(5);
        if (input->ExpectTag(56)) goto parse_id;
        break;
      }
      
      // optional int32 id = 7 [default = 0];
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_id:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &id_));
        _set_bit(6);
        if (input->ExpectTag(64)) goto parse_delstate;
        break;
      }
      
      // optional int32 delstate = 8 [default = 0];
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_delstate:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &delstate_));
        _set_bit(7);
        if (input->ExpectTag(72)) goto parse_campstate;
        break;
      }
      
      // optional int32 campstate = 9 [default = 0];
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_campstate:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &campstate_));
        _set_bit(8);
        if (input->ExpectTag(80)) goto parse_grade;
        break;
      }
      
      // optional int32 grade = 10 [default = 0];
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_grade:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &grade_));
        _set_bit(9);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DB_Army::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    DB_Army::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional int32 type = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->type(), output);
  }
  
  // optional int32 X = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->x(), output);
  }
  
  // optional int32 Y = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->y(), output);
  }
  
  // optional int32 angle = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->angle(), output);
  }
  
  // optional int32 health = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->health(), output);
  }
  
  // optional int32 stance = 6;
  if (_has_bit(5)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->stance(), output);
  }
  
  // optional int32 id = 7 [default = 0];
  if (_has_bit(6)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->id(), output);
  }
  
  // optional int32 delstate = 8 [default = 0];
  if (_has_bit(7)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->delstate(), output);
  }
  
  // optional int32 campstate = 9 [default = 0];
  if (_has_bit(8)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->campstate(), output);
  }
  
  // optional int32 grade = 10 [default = 0];
  if (_has_bit(9)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->grade(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DB_Army::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 type = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->type(), target);
  }
  
  // optional int32 X = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->x(), target);
  }
  
  // optional int32 Y = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->y(), target);
  }
  
  // optional int32 angle = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->angle(), target);
  }
  
  // optional int32 health = 5;
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->health(), target);
  }
  
  // optional int32 stance = 6;
  if (_has_bit(5)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->stance(), target);
  }
  
  // optional int32 id = 7 [default = 0];
  if (_has_bit(6)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->id(), target);
  }
  
  // optional int32 delstate = 8 [default = 0];
  if (_has_bit(7)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->delstate(), target);
  }
  
  // optional int32 campstate = 9 [default = 0];
  if (_has_bit(8)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->campstate(), target);
  }
  
  // optional int32 grade = 10 [default = 0];
  if (_has_bit(9)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->grade(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DB_Army::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }
    
    // optional int32 X = 2;
    if (has_x()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->x());
    }
    
    // optional int32 Y = 3;
    if (has_y()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->y());
    }
    
    // optional int32 angle = 4;
    if (has_angle()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->angle());
    }
    
    // optional int32 health = 5;
    if (has_health()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->health());
    }
    
    // optional int32 stance = 6;
    if (has_stance()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->stance());
    }
    
    // optional int32 id = 7 [default = 0];
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }
    
    // optional int32 delstate = 8 [default = 0];
    if (has_delstate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->delstate());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 campstate = 9 [default = 0];
    if (has_campstate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->campstate());
    }
    
    // optional int32 grade = 10 [default = 0];
    if (has_grade()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->grade());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void DB_Army::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DB_Army* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DB_Army*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DB_Army::MergeFrom(const DB_Army& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_type(from.type());
    }
    if (from._has_bit(1)) {
      set_x(from.x());
    }
    if (from._has_bit(2)) {
      set_y(from.y());
    }
    if (from._has_bit(3)) {
      set_angle(from.angle());
    }
    if (from._has_bit(4)) {
      set_health(from.health());
    }
    if (from._has_bit(5)) {
      set_stance(from.stance());
    }
    if (from._has_bit(6)) {
      set_id(from.id());
    }
    if (from._has_bit(7)) {
      set_delstate(from.delstate());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from._has_bit(8)) {
      set_campstate(from.campstate());
    }
    if (from._has_bit(9)) {
      set_grade(from.grade());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DB_Army::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DB_Army::CopyFrom(const DB_Army& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DB_Army::IsInitialized() const {
  
  return true;
}

void DB_Army::Swap(DB_Army* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(x_, other->x_);
    std::swap(y_, other->y_);
    std::swap(angle_, other->angle_);
    std::swap(health_, other->health_);
    std::swap(stance_, other->stance_);
    std::swap(id_, other->id_);
    std::swap(delstate_, other->delstate_);
    std::swap(campstate_, other->campstate_);
    std::swap(grade_, other->grade_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DB_Army::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DB_Army_descriptor_;
  metadata.reflection = DB_Army_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DB_Book::kIdFieldNumber;
const int DB_Book::kBookIDFieldNumber;
const int DB_Book::kLevelFieldNumber;
const int DB_Book::kLockFieldNumber;
const int DB_Book::kExpFieldNumber;
const int DB_Book::kBagTypeFieldNumber;
#endif  // !_MSC_VER

DB_Book::DB_Book() {
  SharedCtor();
}

void DB_Book::InitAsDefaultInstance() {
}

DB_Book::DB_Book(const DB_Book& from) {
  SharedCtor();
  MergeFrom(from);
}

void DB_Book::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  bookid_ = 0;
  level_ = 0;
  lock_ = 0;
  exp_ = 0;
  bagtype_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DB_Book::~DB_Book() {
  SharedDtor();
}

void DB_Book::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* DB_Book::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DB_Book_descriptor_;
}

const DB_Book& DB_Book::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dbinterface_5fsub_2eproto();  return *default_instance_;
}

DB_Book* DB_Book::default_instance_ = NULL;

DB_Book* DB_Book::New() const {
  return new DB_Book;
}

void DB_Book::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    bookid_ = 0;
    level_ = 0;
    lock_ = 0;
    exp_ = 0;
    bagtype_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DB_Book::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1 [default = 0];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &id_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_bookID;
        break;
      }
      
      // optional int32 bookID = 2 [default = 0];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_bookID:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &bookid_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_level;
        break;
      }
      
      // optional int32 level = 3 [default = 0];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_level:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &level_));
        _set_bit(2);
        if (input->ExpectTag(32)) goto parse_lock;
        break;
      }
      
      // optional int32 lock = 4 [default = 0];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_lock:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &lock_));
        _set_bit(3);
        if (input->ExpectTag(40)) goto parse_exp;
        break;
      }
      
      // optional int32 exp = 5 [default = 0];
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_exp:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &exp_));
        _set_bit(4);
        if (input->ExpectTag(48)) goto parse_bagType;
        break;
      }
      
      // optional int32 bagType = 6 [default = 0];
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_bagType:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &bagtype_));
        _set_bit(5);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DB_Book::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    DB_Book::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional int32 id = 1 [default = 0];
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }
  
  // optional int32 bookID = 2 [default = 0];
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->bookid(), output);
  }
  
  // optional int32 level = 3 [default = 0];
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->level(), output);
  }
  
  // optional int32 lock = 4 [default = 0];
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->lock(), output);
  }
  
  // optional int32 exp = 5 [default = 0];
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->exp(), output);
  }
  
  // optional int32 bagType = 6 [default = 0];
  if (_has_bit(5)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->bagtype(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DB_Book::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 id = 1 [default = 0];
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }
  
  // optional int32 bookID = 2 [default = 0];
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->bookid(), target);
  }
  
  // optional int32 level = 3 [default = 0];
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->level(), target);
  }
  
  // optional int32 lock = 4 [default = 0];
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->lock(), target);
  }
  
  // optional int32 exp = 5 [default = 0];
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->exp(), target);
  }
  
  // optional int32 bagType = 6 [default = 0];
  if (_has_bit(5)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->bagtype(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DB_Book::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 id = 1 [default = 0];
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }
    
    // optional int32 bookID = 2 [default = 0];
    if (has_bookid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bookid());
    }
    
    // optional int32 level = 3 [default = 0];
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->level());
    }
    
    // optional int32 lock = 4 [default = 0];
    if (has_lock()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->lock());
    }
    
    // optional int32 exp = 5 [default = 0];
    if (has_exp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->exp());
    }
    
    // optional int32 bagType = 6 [default = 0];
    if (has_bagtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bagtype());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void DB_Book::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DB_Book* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DB_Book*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DB_Book::MergeFrom(const DB_Book& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_id(from.id());
    }
    if (from._has_bit(1)) {
      set_bookid(from.bookid());
    }
    if (from._has_bit(2)) {
      set_level(from.level());
    }
    if (from._has_bit(3)) {
      set_lock(from.lock());
    }
    if (from._has_bit(4)) {
      set_exp(from.exp());
    }
    if (from._has_bit(5)) {
      set_bagtype(from.bagtype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DB_Book::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DB_Book::CopyFrom(const DB_Book& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DB_Book::IsInitialized() const {
  
  return true;
}

void DB_Book::Swap(DB_Book* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(bookid_, other->bookid_);
    std::swap(level_, other->level_);
    std::swap(lock_, other->lock_);
    std::swap(exp_, other->exp_);
    std::swap(bagtype_, other->bagtype_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DB_Book::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DB_Book_descriptor_;
  metadata.reflection = DB_Book_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DB_Emblem::kEmblemIDFieldNumber;
const int DB_Emblem::kCountFieldNumber;
#endif  // !_MSC_VER

DB_Emblem::DB_Emblem() {
  SharedCtor();
}

void DB_Emblem::InitAsDefaultInstance() {
}

DB_Emblem::DB_Emblem(const DB_Emblem& from) {
  SharedCtor();
  MergeFrom(from);
}

void DB_Emblem::SharedCtor() {
  _cached_size_ = 0;
  emblemid_ = 0;
  count_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DB_Emblem::~DB_Emblem() {
  SharedDtor();
}

void DB_Emblem::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* DB_Emblem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DB_Emblem_descriptor_;
}

const DB_Emblem& DB_Emblem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dbinterface_5fsub_2eproto();  return *default_instance_;
}

DB_Emblem* DB_Emblem::default_instance_ = NULL;

DB_Emblem* DB_Emblem::New() const {
  return new DB_Emblem;
}

void DB_Emblem::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    emblemid_ = 0;
    count_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DB_Emblem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 emblemID = 1 [default = 0];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &emblemid_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_count;
        break;
      }
      
      // optional int32 count = 2 [default = 0];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_count:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &count_));
        _set_bit(1);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DB_Emblem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    DB_Emblem::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional int32 emblemID = 1 [default = 0];
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->emblemid(), output);
  }
  
  // optional int32 count = 2 [default = 0];
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->count(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DB_Emblem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 emblemID = 1 [default = 0];
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->emblemid(), target);
  }
  
  // optional int32 count = 2 [default = 0];
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->count(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DB_Emblem::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 emblemID = 1 [default = 0];
    if (has_emblemid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->emblemid());
    }
    
    // optional int32 count = 2 [default = 0];
    if (has_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->count());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void DB_Emblem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DB_Emblem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DB_Emblem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DB_Emblem::MergeFrom(const DB_Emblem& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_emblemid(from.emblemid());
    }
    if (from._has_bit(1)) {
      set_count(from.count());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DB_Emblem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DB_Emblem::CopyFrom(const DB_Emblem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DB_Emblem::IsInitialized() const {
  
  return true;
}

void DB_Emblem::Swap(DB_Emblem* other) {
  if (other != this) {
    std::swap(emblemid_, other->emblemid_);
    std::swap(count_, other->count_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DB_Emblem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DB_Emblem_descriptor_;
  metadata.reflection = DB_Emblem_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DB_EmblemNew::kIdFieldNumber;
const int DB_EmblemNew::kEmblemIDFieldNumber;
const int DB_EmblemNew::kLockFieldNumber;
const int DB_EmblemNew::kExpFieldNumber;
const int DB_EmblemNew::kBagTypeFieldNumber;
const int DB_EmblemNew::kUseFlagFieldNumber;
#endif  // !_MSC_VER

DB_EmblemNew::DB_EmblemNew() {
  SharedCtor();
}

void DB_EmblemNew::InitAsDefaultInstance() {
}

DB_EmblemNew::DB_EmblemNew(const DB_EmblemNew& from) {
  SharedCtor();
  MergeFrom(from);
}

void DB_EmblemNew::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  emblemid_ = 0;
  lock_ = 0;
  exp_ = 0;
  bagtype_ = 0;
  useflag_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DB_EmblemNew::~DB_EmblemNew() {
  SharedDtor();
}

void DB_EmblemNew::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* DB_EmblemNew::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DB_EmblemNew_descriptor_;
}

const DB_EmblemNew& DB_EmblemNew::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dbinterface_5fsub_2eproto();  return *default_instance_;
}

DB_EmblemNew* DB_EmblemNew::default_instance_ = NULL;

DB_EmblemNew* DB_EmblemNew::New() const {
  return new DB_EmblemNew;
}

void DB_EmblemNew::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    emblemid_ = 0;
    lock_ = 0;
    exp_ = 0;
    bagtype_ = 0;
    useflag_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DB_EmblemNew::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1 [default = 0];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &id_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_emblemID;
        break;
      }
      
      // optional int32 emblemID = 2 [default = 0];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_emblemID:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &emblemid_));
        _set_bit(1);
        if (input->ExpectTag(32)) goto parse_lock;
        break;
      }
      
      // optional int32 lock = 4 [default = 0];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_lock:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &lock_));
        _set_bit(2);
        if (input->ExpectTag(40)) goto parse_exp;
        break;
      }
      
      // optional int32 exp = 5 [default = 0];
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_exp:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &exp_));
        _set_bit(3);
        if (input->ExpectTag(48)) goto parse_bagType;
        break;
      }
      
      // optional int32 bagType = 6 [default = 0];
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_bagType:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &bagtype_));
        _set_bit(4);
        if (input->ExpectTag(56)) goto parse_useFlag;
        break;
      }
      
      // optional int32 useFlag = 7 [default = 0];
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_useFlag:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &useflag_));
        _set_bit(5);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DB_EmblemNew::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    DB_EmblemNew::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional int32 id = 1 [default = 0];
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }
  
  // optional int32 emblemID = 2 [default = 0];
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->emblemid(), output);
  }
  
  // optional int32 lock = 4 [default = 0];
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->lock(), output);
  }
  
  // optional int32 exp = 5 [default = 0];
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->exp(), output);
  }
  
  // optional int32 bagType = 6 [default = 0];
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->bagtype(), output);
  }
  
  // optional int32 useFlag = 7 [default = 0];
  if (_has_bit(5)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->useflag(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DB_EmblemNew::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 id = 1 [default = 0];
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }
  
  // optional int32 emblemID = 2 [default = 0];
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->emblemid(), target);
  }
  
  // optional int32 lock = 4 [default = 0];
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->lock(), target);
  }
  
  // optional int32 exp = 5 [default = 0];
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->exp(), target);
  }
  
  // optional int32 bagType = 6 [default = 0];
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->bagtype(), target);
  }
  
  // optional int32 useFlag = 7 [default = 0];
  if (_has_bit(5)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->useflag(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DB_EmblemNew::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 id = 1 [default = 0];
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }
    
    // optional int32 emblemID = 2 [default = 0];
    if (has_emblemid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->emblemid());
    }
    
    // optional int32 lock = 4 [default = 0];
    if (has_lock()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->lock());
    }
    
    // optional int32 exp = 5 [default = 0];
    if (has_exp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->exp());
    }
    
    // optional int32 bagType = 6 [default = 0];
    if (has_bagtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bagtype());
    }
    
    // optional int32 useFlag = 7 [default = 0];
    if (has_useflag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->useflag());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void DB_EmblemNew::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DB_EmblemNew* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DB_EmblemNew*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DB_EmblemNew::MergeFrom(const DB_EmblemNew& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_id(from.id());
    }
    if (from._has_bit(1)) {
      set_emblemid(from.emblemid());
    }
    if (from._has_bit(2)) {
      set_lock(from.lock());
    }
    if (from._has_bit(3)) {
      set_exp(from.exp());
    }
    if (from._has_bit(4)) {
      set_bagtype(from.bagtype());
    }
    if (from._has_bit(5)) {
      set_useflag(from.useflag());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DB_EmblemNew::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DB_EmblemNew::CopyFrom(const DB_EmblemNew& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DB_EmblemNew::IsInitialized() const {
  
  return true;
}

void DB_EmblemNew::Swap(DB_EmblemNew* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(emblemid_, other->emblemid_);
    std::swap(lock_, other->lock_);
    std::swap(exp_, other->exp_);
    std::swap(bagtype_, other->bagtype_);
    std::swap(useflag_, other->useflag_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DB_EmblemNew::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DB_EmblemNew_descriptor_;
  metadata.reflection = DB_EmblemNew_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DB_WeaponCom::kIdFieldNumber;
const int DB_WeaponCom::kComIDFieldNumber;
const int DB_WeaponCom::kLevelFieldNumber;
const int DB_WeaponCom::kLockFieldNumber;
const int DB_WeaponCom::kExpFieldNumber;
const int DB_WeaponCom::kBagTypeFieldNumber;
const int DB_WeaponCom::kGradeFieldNumber;
const int DB_WeaponCom::kExtraTypeFieldNumber;
#endif  // !_MSC_VER

DB_WeaponCom::DB_WeaponCom() {
  SharedCtor();
}

void DB_WeaponCom::InitAsDefaultInstance() {
}

DB_WeaponCom::DB_WeaponCom(const DB_WeaponCom& from) {
  SharedCtor();
  MergeFrom(from);
}

void DB_WeaponCom::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  comid_ = 0;
  level_ = 0;
  lock_ = 0;
  exp_ = 0;
  bagtype_ = 0;
  grade_ = 0;
  extratype_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DB_WeaponCom::~DB_WeaponCom() {
  SharedDtor();
}

void DB_WeaponCom::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* DB_WeaponCom::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DB_WeaponCom_descriptor_;
}

const DB_WeaponCom& DB_WeaponCom::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dbinterface_5fsub_2eproto();  return *default_instance_;
}

DB_WeaponCom* DB_WeaponCom::default_instance_ = NULL;

DB_WeaponCom* DB_WeaponCom::New() const {
  return new DB_WeaponCom;
}

void DB_WeaponCom::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    comid_ = 0;
    level_ = 0;
    lock_ = 0;
    exp_ = 0;
    bagtype_ = 0;
    grade_ = 0;
    extratype_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DB_WeaponCom::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1 [default = 0];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &id_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_comID;
        break;
      }
      
      // optional int32 comID = 2 [default = 0];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_comID:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &comid_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_level;
        break;
      }
      
      // optional int32 level = 3 [default = 0];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_level:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &level_));
        _set_bit(2);
        if (input->ExpectTag(32)) goto parse_lock;
        break;
      }
      
      // optional int32 lock = 4 [default = 0];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_lock:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &lock_));
        _set_bit(3);
        if (input->ExpectTag(40)) goto parse_exp;
        break;
      }
      
      // optional int32 exp = 5 [default = 0];
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_exp:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &exp_));
        _set_bit(4);
        if (input->ExpectTag(48)) goto parse_bagType;
        break;
      }
      
      // optional int32 bagType = 6 [default = 0];
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_bagType:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &bagtype_));
        _set_bit(5);
        if (input->ExpectTag(56)) goto parse_grade;
        break;
      }
      
      // optional int32 grade = 7 [default = 0];
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_grade:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &grade_));
        _set_bit(6);
        if (input->ExpectTag(64)) goto parse_extraType;
        break;
      }
      
      // optional int32 extraType = 8 [default = 0];
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_extraType:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &extratype_));
        _set_bit(7);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DB_WeaponCom::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    DB_WeaponCom::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional int32 id = 1 [default = 0];
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }
  
  // optional int32 comID = 2 [default = 0];
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->comid(), output);
  }
  
  // optional int32 level = 3 [default = 0];
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->level(), output);
  }
  
  // optional int32 lock = 4 [default = 0];
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->lock(), output);
  }
  
  // optional int32 exp = 5 [default = 0];
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->exp(), output);
  }
  
  // optional int32 bagType = 6 [default = 0];
  if (_has_bit(5)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->bagtype(), output);
  }
  
  // optional int32 grade = 7 [default = 0];
  if (_has_bit(6)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->grade(), output);
  }
  
  // optional int32 extraType = 8 [default = 0];
  if (_has_bit(7)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->extratype(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DB_WeaponCom::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 id = 1 [default = 0];
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }
  
  // optional int32 comID = 2 [default = 0];
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->comid(), target);
  }
  
  // optional int32 level = 3 [default = 0];
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->level(), target);
  }
  
  // optional int32 lock = 4 [default = 0];
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->lock(), target);
  }
  
  // optional int32 exp = 5 [default = 0];
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->exp(), target);
  }
  
  // optional int32 bagType = 6 [default = 0];
  if (_has_bit(5)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->bagtype(), target);
  }
  
  // optional int32 grade = 7 [default = 0];
  if (_has_bit(6)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->grade(), target);
  }
  
  // optional int32 extraType = 8 [default = 0];
  if (_has_bit(7)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->extratype(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DB_WeaponCom::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 id = 1 [default = 0];
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }
    
    // optional int32 comID = 2 [default = 0];
    if (has_comid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->comid());
    }
    
    // optional int32 level = 3 [default = 0];
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->level());
    }
    
    // optional int32 lock = 4 [default = 0];
    if (has_lock()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->lock());
    }
    
    // optional int32 exp = 5 [default = 0];
    if (has_exp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->exp());
    }
    
    // optional int32 bagType = 6 [default = 0];
    if (has_bagtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bagtype());
    }
    
    // optional int32 grade = 7 [default = 0];
    if (has_grade()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->grade());
    }
    
    // optional int32 extraType = 8 [default = 0];
    if (has_extratype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->extratype());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void DB_WeaponCom::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DB_WeaponCom* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DB_WeaponCom*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DB_WeaponCom::MergeFrom(const DB_WeaponCom& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_id(from.id());
    }
    if (from._has_bit(1)) {
      set_comid(from.comid());
    }
    if (from._has_bit(2)) {
      set_level(from.level());
    }
    if (from._has_bit(3)) {
      set_lock(from.lock());
    }
    if (from._has_bit(4)) {
      set_exp(from.exp());
    }
    if (from._has_bit(5)) {
      set_bagtype(from.bagtype());
    }
    if (from._has_bit(6)) {
      set_grade(from.grade());
    }
    if (from._has_bit(7)) {
      set_extratype(from.extratype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DB_WeaponCom::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DB_WeaponCom::CopyFrom(const DB_WeaponCom& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DB_WeaponCom::IsInitialized() const {
  
  return true;
}

void DB_WeaponCom::Swap(DB_WeaponCom* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(comid_, other->comid_);
    std::swap(level_, other->level_);
    std::swap(lock_, other->lock_);
    std::swap(exp_, other->exp_);
    std::swap(bagtype_, other->bagtype_);
    std::swap(grade_, other->grade_);
    std::swap(extratype_, other->extratype_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DB_WeaponCom::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DB_WeaponCom_descriptor_;
  metadata.reflection = DB_WeaponCom_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DB_WeaponCenter::kSceneIDFieldNumber;
const int DB_WeaponCenter::kFreeExploreCntFieldNumber;
const int DB_WeaponCenter::kFinishExpTimeFieldNumber;
const int DB_WeaponCenter::kBaseComFieldNumber;
const int DB_WeaponCenter::kArmyComFieldNumber;
const int DB_WeaponCenter::kTankComFieldNumber;
const int DB_WeaponCenter::kPlaneComFieldNumber;
const int DB_WeaponCenter::kWpcComFieldNumber;
const int DB_WeaponCenter::kWpcEmblemFieldNumber;
const int DB_WeaponCenter::kEarthTowerEmblemFieldNumber;
const int DB_WeaponCenter::kAirTowerEmblemFieldNumber;
const int DB_WeaponCenter::kOtherEmblemFieldNumber;
const int DB_WeaponCenter::kWpcEmblemNewFieldNumber;
const int DB_WeaponCenter::kGunTurretEmblemFieldNumber;
const int DB_WeaponCenter::kMortarTowerEmblemFieldNumber;
const int DB_WeaponCenter::kOtherbldEmblemFieldNumber;
const int DB_WeaponCenter::kWpcBookFieldNumber;
const int DB_WeaponCenter::kAdmiralBookFieldNumber;
const int DB_WeaponCenter::kLaserTowerEmblemFieldNumber;
const int DB_WeaponCenter::kHeroComFieldNumber;
const int DB_WeaponCenter::kUnlockExtraNumFieldNumber;
const int DB_WeaponCenter::kTurnOnNumFieldNumber;
const int DB_WeaponCenter::kUnlockEmblemNumFieldNumber;
const int DB_WeaponCenter::kGiantCanonEmblemFieldNumber;
const int DB_WeaponCenter::kWpcJammerFieldNumber;
const int DB_WeaponCenter::kBaseJammerFieldNumber;
const int DB_WeaponCenter::kArmyJammerFieldNumber;
#endif  // !_MSC_VER

DB_WeaponCenter::DB_WeaponCenter() {
  SharedCtor();
}

void DB_WeaponCenter::InitAsDefaultInstance() {
  unlockextranum_ = const_cast< ::DB_WeaponExtraWpcInfo*>(&::DB_WeaponExtraWpcInfo::default_instance());
  turnonnum_ = const_cast< ::DB_WeaponExtraWpcInfo*>(&::DB_WeaponExtraWpcInfo::default_instance());
  unlockemblemnum_ = const_cast< ::DB_WeaponExtraEmblemInfo*>(&::DB_WeaponExtraEmblemInfo::default_instance());
}

DB_WeaponCenter::DB_WeaponCenter(const DB_WeaponCenter& from) {
  SharedCtor();
  MergeFrom(from);
}

void DB_WeaponCenter::SharedCtor() {
  _cached_size_ = 0;
  unlockextranum_ = NULL;
  turnonnum_ = NULL;
  unlockemblemnum_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DB_WeaponCenter::~DB_WeaponCenter() {
  SharedDtor();
}

void DB_WeaponCenter::SharedDtor() {
  if (this != default_instance_) {
    delete unlockextranum_;
    delete turnonnum_;
    delete unlockemblemnum_;
  }
}

const ::google::protobuf::Descriptor* DB_WeaponCenter::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DB_WeaponCenter_descriptor_;
}

const DB_WeaponCenter& DB_WeaponCenter::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dbinterface_5fsub_2eproto();  return *default_instance_;
}

DB_WeaponCenter* DB_WeaponCenter::default_instance_ = NULL;

DB_WeaponCenter* DB_WeaponCenter::New() const {
  return new DB_WeaponCenter;
}

void DB_WeaponCenter::Clear() {
  if (_has_bits_[20 / 32] & (0xffu << (20 % 32))) {
    if (_has_bit(20)) {
      if (unlockextranum_ != NULL) unlockextranum_->::DB_WeaponExtraWpcInfo::Clear();
    }
    if (_has_bit(21)) {
      if (turnonnum_ != NULL) turnonnum_->::DB_WeaponExtraWpcInfo::Clear();
    }
    if (_has_bit(22)) {
      if (unlockemblemnum_ != NULL) unlockemblemnum_->::DB_WeaponExtraEmblemInfo::Clear();
    }
  }
  sceneid_.Clear();
  freeexplorecnt_.Clear();
  finishexptime_.Clear();
  basecom_.Clear();
  armycom_.Clear();
  tankcom_.Clear();
  planecom_.Clear();
  wpccom_.Clear();
  wpcemblem_.Clear();
  earthtoweremblem_.Clear();
  airtoweremblem_.Clear();
  otheremblem_.Clear();
  wpcemblemnew_.Clear();
  gunturretemblem_.Clear();
  mortartoweremblem_.Clear();
  otherbldemblem_.Clear();
  wpcbook_.Clear();
  admiralbook_.Clear();
  lasertoweremblem_.Clear();
  herocom_.Clear();
  giantcanonemblem_.Clear();
  wpcjammer_.Clear();
  basejammer_.Clear();
  armyjammer_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DB_WeaponCenter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated int32 sceneID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_sceneID:
        ::google::protobuf::int32 value;
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &value));
        add_sceneid(value);
        if (input->ExpectTag(8)) goto parse_sceneID;
        if (input->ExpectTag(16)) goto parse_freeExploreCnt;
        break;
      }
      
      // repeated int32 freeExploreCnt = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_freeExploreCnt:
        ::google::protobuf::int32 value;
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &value));
        add_freeexplorecnt(value);
        if (input->ExpectTag(16)) goto parse_freeExploreCnt;
        if (input->ExpectTag(24)) goto parse_finishExpTime;
        break;
      }
      
      // repeated int32 finishExpTime = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_finishExpTime:
        ::google::protobuf::int32 value;
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &value));
        add_finishexptime(value);
        if (input->ExpectTag(24)) goto parse_finishExpTime;
        if (input->ExpectTag(32)) goto parse_baseCom;
        break;
      }
      
      // repeated int32 baseCom = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_baseCom:
        ::google::protobuf::int32 value;
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &value));
        add_basecom(value);
        if (input->ExpectTag(32)) goto parse_baseCom;
        if (input->ExpectTag(40)) goto parse_armyCom;
        break;
      }
      
      // repeated int32 armyCom = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_armyCom:
        ::google::protobuf::int32 value;
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &value));
        add_armycom(value);
        if (input->ExpectTag(40)) goto parse_armyCom;
        if (input->ExpectTag(48)) goto parse_tankCom;
        break;
      }
      
      // repeated int32 tankCom = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_tankCom:
        ::google::protobuf::int32 value;
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &value));
        add_tankcom(value);
        if (input->ExpectTag(48)) goto parse_tankCom;
        if (input->ExpectTag(56)) goto parse_planeCom;
        break;
      }
      
      // repeated int32 planeCom = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_planeCom:
        ::google::protobuf::int32 value;
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &value));
        add_planecom(value);
        if (input->ExpectTag(56)) goto parse_planeCom;
        if (input->ExpectTag(66)) goto parse_wpcCom;
        break;
      }
      
      // repeated .DB_WeaponCom wpcCom = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_wpcCom:
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, add_wpccom()));
        if (input->ExpectTag(66)) goto parse_wpcCom;
        if (input->ExpectTag(74)) goto parse_wpcEmblem;
        break;
      }
      
      // repeated .DB_Emblem wpcEmblem = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_wpcEmblem:
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, add_wpcemblem()));
        if (input->ExpectTag(74)) goto parse_wpcEmblem;
        if (input->ExpectTag(80)) goto parse_earthTowerEmblem;
        break;
      }
      
      // repeated int32 earthTowerEmblem = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_earthTowerEmblem:
        ::google::protobuf::int32 value;
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &value));
        add_earthtoweremblem(value);
        if (input->ExpectTag(80)) goto parse_earthTowerEmblem;
        if (input->ExpectTag(88)) goto parse_airTowerEmblem;
        break;
      }
      
      // repeated int32 airTowerEmblem = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_airTowerEmblem:
        ::google::protobuf::int32 value;
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &value));
        add_airtoweremblem(value);
        if (input->ExpectTag(88)) goto parse_airTowerEmblem;
        if (input->ExpectTag(96)) goto parse_otherEmblem;
        break;
      }
      
      // repeated int32 otherEmblem = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_otherEmblem:
        ::google::protobuf::int32 value;
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &value));
        add_otheremblem(value);
        if (input->ExpectTag(96)) goto parse_otherEmblem;
        if (input->ExpectTag(106)) goto parse_wpcEmblemNew;
        break;
      }
      
      // repeated .DB_EmblemNew wpcEmblemNew = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_wpcEmblemNew:
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, add_wpcemblemnew()));
        if (input->ExpectTag(106)) goto parse_wpcEmblemNew;
        if (input->ExpectTag(112)) goto parse_gunTurretEmblem;
        break;
      }
      
      // repeated int32 gunTurretEmblem = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_gunTurretEmblem:
        ::google::protobuf::int32 value;
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &value));
        add_gunturretemblem(value);
        if (input->ExpectTag(112)) goto parse_gunTurretEmblem;
        if (input->ExpectTag(120)) goto parse_mortarTowerEmblem;
        break;
      }
      
      // repeated int32 mortarTowerEmblem = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_mortarTowerEmblem:
        ::google::protobuf::int32 value;
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &value));
        add_mortartoweremblem(value);
        if (input->ExpectTag(120)) goto parse_mortarTowerEmblem;
        if (input->ExpectTag(128)) goto parse_otherbldEmblem;
        break;
      }
      
      // repeated int32 otherbldEmblem = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_otherbldEmblem:
        ::google::protobuf::int32 value;
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &value));
        add_otherbldemblem(value);
        if (input->ExpectTag(128)) goto parse_otherbldEmblem;
        if (input->ExpectTag(138)) goto parse_wpcBook;
        break;
      }
      
      // repeated .DB_Book wpcBook = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_wpcBook:
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, add_wpcbook()));
        if (input->ExpectTag(138)) goto parse_wpcBook;
        if (input->ExpectTag(144)) goto parse_admiralBook;
        break;
      }
      
      // repeated int32 admiralBook = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_admiralBook:
        ::google::protobuf::int32 value;
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &value));
        add_admiralbook(value);
        if (input->ExpectTag(144)) goto parse_admiralBook;
        if (input->ExpectTag(152)) goto parse_laserTowerEmblem;
        break;
      }
      
      // repeated int32 laserTowerEmblem = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_laserTowerEmblem:
        ::google::protobuf::int32 value;
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &value));
        add_lasertoweremblem(value);
        if (input->ExpectTag(152)) goto parse_laserTowerEmblem;
        if (input->ExpectTag(160)) goto parse_heroCom;
        break;
      }
      
      // repeated int32 heroCom = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_heroCom:
        ::google::protobuf::int32 value;
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &value));
        add_herocom(value);
        if (input->ExpectTag(160)) goto parse_heroCom;
        if (input->ExpectTag(170)) goto parse_unlockExtraNum;
        break;
      }
      
      // optional .DB_WeaponExtraWpcInfo unlockExtraNum = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_unlockExtraNum:
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
             input, mutable_unlockextranum()));
        if (input->ExpectTag(178)) goto parse_turnOnNum;
        break;
      }
      
      // optional .DB_WeaponExtraWpcInfo turnOnNum = 22;
      case 22: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_turnOnNum:
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
             input, mutable_turnonnum()));
        if (input->ExpectTag(186)) goto parse_unlockEmblemNum;
        break;
      }
      
      // optional .DB_WeaponExtraEmblemInfo unlockEmblemNum = 23;
      case 23: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_unlockEmblemNum:
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
             input, mutable_unlockemblemnum()));
        if (input->ExpectTag(192)) goto parse_giantCanonEmblem;
        break;
      }
      
      // repeated int32 giantCanonEmblem = 24;
      case 24: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_giantCanonEmblem:
        ::google::protobuf::int32 value;
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &value));
        add_giantcanonemblem(value);
        if (input->ExpectTag(192)) goto parse_giantCanonEmblem;
        if (input->ExpectTag(202)) goto parse_wpcJammer;
        break;
      }
      
      // repeated .DB_Jammer wpcJammer = 25;
      case 25: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_wpcJammer:
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, add_wpcjammer()));
        if (input->ExpectTag(202)) goto parse_wpcJammer;
        if (input->ExpectTag(208)) goto parse_baseJammer;
        break;
      }
      
      // repeated int32 baseJammer = 26;
      case 26: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_baseJammer:
        ::google::protobuf::int32 value;
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &value));
        add_basejammer(value);
        if (input->ExpectTag(208)) goto parse_baseJammer;
        if (input->ExpectTag(216)) goto parse_armyJammer;
        break;
      }
      
      // repeated int32 armyJammer = 27;
      case 27: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_armyJammer:
        ::google::protobuf::int32 value;
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &value));
        add_armyjammer(value);
        if (input->ExpectTag(216)) goto parse_armyJammer;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DB_WeaponCenter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    DB_WeaponCenter::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // repeated int32 sceneID = 1;
  for (int i = 0; i < this->sceneid_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      1, this->sceneid(i), output);
  }
  
  // repeated int32 freeExploreCnt = 2;
  for (int i = 0; i < this->freeexplorecnt_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      2, this->freeexplorecnt(i), output);
  }
  
  // repeated int32 finishExpTime = 3;
  for (int i = 0; i < this->finishexptime_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      3, this->finishexptime(i), output);
  }
  
  // repeated int32 baseCom = 4;
  for (int i = 0; i < this->basecom_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      4, this->basecom(i), output);
  }
  
  // repeated int32 armyCom = 5;
  for (int i = 0; i < this->armycom_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      5, this->armycom(i), output);
  }
  
  // repeated int32 tankCom = 6;
  for (int i = 0; i < this->tankcom_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      6, this->tankcom(i), output);
  }
  
  // repeated int32 planeCom = 7;
  for (int i = 0; i < this->planecom_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      7, this->planecom(i), output);
  }
  
  // repeated .DB_WeaponCom wpcCom = 8;
  for (int i = 0; i < this->wpccom_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      8, this->wpccom(i), output);
  }
  
  // repeated .DB_Emblem wpcEmblem = 9;
  for (int i = 0; i < this->wpcemblem_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      9, this->wpcemblem(i), output);
  }
  
  // repeated int32 earthTowerEmblem = 10;
  for (int i = 0; i < this->earthtoweremblem_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      10, this->earthtoweremblem(i), output);
  }
  
  // repeated int32 airTowerEmblem = 11;
  for (int i = 0; i < this->airtoweremblem_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      11, this->airtoweremblem(i), output);
  }
  
  // repeated int32 otherEmblem = 12;
  for (int i = 0; i < this->otheremblem_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      12, this->otheremblem(i), output);
  }
  
  // repeated .DB_EmblemNew wpcEmblemNew = 13;
  for (int i = 0; i < this->wpcemblemnew_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      13, this->wpcemblemnew(i), output);
  }
  
  // repeated int32 gunTurretEmblem = 14;
  for (int i = 0; i < this->gunturretemblem_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      14, this->gunturretemblem(i), output);
  }
  
  // repeated int32 mortarTowerEmblem = 15;
  for (int i = 0; i < this->mortartoweremblem_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      15, this->mortartoweremblem(i), output);
  }
  
  // repeated int32 otherbldEmblem = 16;
  for (int i = 0; i < this->otherbldemblem_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      16, this->otherbldemblem(i), output);
  }
  
  // repeated .DB_Book wpcBook = 17;
  for (int i = 0; i < this->wpcbook_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      17, this->wpcbook(i), output);
  }
  
  // repeated int32 admiralBook = 18;
  for (int i = 0; i < this->admiralbook_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      18, this->admiralbook(i), output);
  }
  
  // repeated int32 laserTowerEmblem = 19;
  for (int i = 0; i < this->lasertoweremblem_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      19, this->lasertoweremblem(i), output);
  }
  
  // repeated int32 heroCom = 20;
  for (int i = 0; i < this->herocom_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      20, this->herocom(i), output);
  }
  
  // optional .DB_WeaponExtraWpcInfo unlockExtraNum = 21;
  if (_has_bit(20)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      21, this->unlockextranum(), output);
  }
  
  // optional .DB_WeaponExtraWpcInfo turnOnNum = 22;
  if (_has_bit(21)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      22, this->turnonnum(), output);
  }
  
  // optional .DB_WeaponExtraEmblemInfo unlockEmblemNum = 23;
  if (_has_bit(22)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      23, this->unlockemblemnum(), output);
  }
  
  // repeated int32 giantCanonEmblem = 24;
  for (int i = 0; i < this->giantcanonemblem_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      24, this->giantcanonemblem(i), output);
  }
  
  // repeated .DB_Jammer wpcJammer = 25;
  for (int i = 0; i < this->wpcjammer_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      25, this->wpcjammer(i), output);
  }
  
  // repeated int32 baseJammer = 26;
  for (int i = 0; i < this->basejammer_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      26, this->basejammer(i), output);
  }
  
  // repeated int32 armyJammer = 27;
  for (int i = 0; i < this->armyjammer_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      27, this->armyjammer(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DB_WeaponCenter::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated int32 sceneID = 1;
  for (int i = 0; i < this->sceneid_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(1, this->sceneid(i), target);
  }
  
  // repeated int32 freeExploreCnt = 2;
  for (int i = 0; i < this->freeexplorecnt_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(2, this->freeexplorecnt(i), target);
  }
  
  // repeated int32 finishExpTime = 3;
  for (int i = 0; i < this->finishexptime_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(3, this->finishexptime(i), target);
  }
  
  // repeated int32 baseCom = 4;
  for (int i = 0; i < this->basecom_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(4, this->basecom(i), target);
  }
  
  // repeated int32 armyCom = 5;
  for (int i = 0; i < this->armycom_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(5, this->armycom(i), target);
  }
  
  // repeated int32 tankCom = 6;
  for (int i = 0; i < this->tankcom_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(6, this->tankcom(i), target);
  }
  
  // repeated int32 planeCom = 7;
  for (int i = 0; i < this->planecom_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(7, this->planecom(i), target);
  }
  
  // repeated .DB_WeaponCom wpcCom = 8;
  for (int i = 0; i < this->wpccom_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->wpccom(i), target);
  }
  
  // repeated .DB_Emblem wpcEmblem = 9;
  for (int i = 0; i < this->wpcemblem_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->wpcemblem(i), target);
  }
  
  // repeated int32 earthTowerEmblem = 10;
  for (int i = 0; i < this->earthtoweremblem_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(10, this->earthtoweremblem(i), target);
  }
  
  // repeated int32 airTowerEmblem = 11;
  for (int i = 0; i < this->airtoweremblem_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(11, this->airtoweremblem(i), target);
  }
  
  // repeated int32 otherEmblem = 12;
  for (int i = 0; i < this->otheremblem_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(12, this->otheremblem(i), target);
  }
  
  // repeated .DB_EmblemNew wpcEmblemNew = 13;
  for (int i = 0; i < this->wpcemblemnew_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        13, this->wpcemblemnew(i), target);
  }
  
  // repeated int32 gunTurretEmblem = 14;
  for (int i = 0; i < this->gunturretemblem_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(14, this->gunturretemblem(i), target);
  }
  
  // repeated int32 mortarTowerEmblem = 15;
  for (int i = 0; i < this->mortartoweremblem_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(15, this->mortartoweremblem(i), target);
  }
  
  // repeated int32 otherbldEmblem = 16;
  for (int i = 0; i < this->otherbldemblem_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(16, this->otherbldemblem(i), target);
  }
  
  // repeated .DB_Book wpcBook = 17;
  for (int i = 0; i < this->wpcbook_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        17, this->wpcbook(i), target);
  }
  
  // repeated int32 admiralBook = 18;
  for (int i = 0; i < this->admiralbook_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(18, this->admiralbook(i), target);
  }
  
  // repeated int32 laserTowerEmblem = 19;
  for (int i = 0; i < this->lasertoweremblem_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(19, this->lasertoweremblem(i), target);
  }
  
  // repeated int32 heroCom = 20;
  for (int i = 0; i < this->herocom_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(20, this->herocom(i), target);
  }
  
  // optional .DB_WeaponExtraWpcInfo unlockExtraNum = 21;
  if (_has_bit(20)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        21, this->unlockextranum(), target);
  }
  
  // optional .DB_WeaponExtraWpcInfo turnOnNum = 22;
  if (_has_bit(21)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        22, this->turnonnum(), target);
  }
  
  // optional .DB_WeaponExtraEmblemInfo unlockEmblemNum = 23;
  if (_has_bit(22)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        23, this->unlockemblemnum(), target);
  }
  
  // repeated int32 giantCanonEmblem = 24;
  for (int i = 0; i < this->giantcanonemblem_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(24, this->giantcanonemblem(i), target);
  }
  
  // repeated .DB_Jammer wpcJammer = 25;
  for (int i = 0; i < this->wpcjammer_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        25, this->wpcjammer(i), target);
  }
  
  // repeated int32 baseJammer = 26;
  for (int i = 0; i < this->basejammer_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(26, this->basejammer(i), target);
  }
  
  // repeated int32 armyJammer = 27;
  for (int i = 0; i < this->armyjammer_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(27, this->armyjammer(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DB_WeaponCenter::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[20 / 32] & (0xffu << (20 % 32))) {
    // optional .DB_WeaponExtraWpcInfo unlockExtraNum = 21;
    if (has_unlockextranum()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->unlockextranum());
    }
    
    // optional .DB_WeaponExtraWpcInfo turnOnNum = 22;
    if (has_turnonnum()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->turnonnum());
    }
    
    // optional .DB_WeaponExtraEmblemInfo unlockEmblemNum = 23;
    if (has_unlockemblemnum()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->unlockemblemnum());
    }
    
  }
  // repeated int32 sceneID = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->sceneid_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->sceneid(i));
    }
    total_size += 1 * this->sceneid_size() + data_size;
  }
  
  // repeated int32 freeExploreCnt = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->freeexplorecnt_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->freeexplorecnt(i));
    }
    total_size += 1 * this->freeexplorecnt_size() + data_size;
  }
  
  // repeated int32 finishExpTime = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->finishexptime_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->finishexptime(i));
    }
    total_size += 1 * this->finishexptime_size() + data_size;
  }
  
  // repeated int32 baseCom = 4;
  {
    int data_size = 0;
    for (int i = 0; i < this->basecom_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->basecom(i));
    }
    total_size += 1 * this->basecom_size() + data_size;
  }
  
  // repeated int32 armyCom = 5;
  {
    int data_size = 0;
    for (int i = 0; i < this->armycom_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->armycom(i));
    }
    total_size += 1 * this->armycom_size() + data_size;
  }
  
  // repeated int32 tankCom = 6;
  {
    int data_size = 0;
    for (int i = 0; i < this->tankcom_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->tankcom(i));
    }
    total_size += 1 * this->tankcom_size() + data_size;
  }
  
  // repeated int32 planeCom = 7;
  {
    int data_size = 0;
    for (int i = 0; i < this->planecom_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->planecom(i));
    }
    total_size += 1 * this->planecom_size() + data_size;
  }
  
  // repeated .DB_WeaponCom wpcCom = 8;
  total_size += 1 * this->wpccom_size();
  for (int i = 0; i < this->wpccom_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->wpccom(i));
  }
  
  // repeated .DB_Emblem wpcEmblem = 9;
  total_size += 1 * this->wpcemblem_size();
  for (int i = 0; i < this->wpcemblem_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->wpcemblem(i));
  }
  
  // repeated int32 earthTowerEmblem = 10;
  {
    int data_size = 0;
    for (int i = 0; i < this->earthtoweremblem_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->earthtoweremblem(i));
    }
    total_size += 1 * this->earthtoweremblem_size() + data_size;
  }
  
  // repeated int32 airTowerEmblem = 11;
  {
    int data_size = 0;
    for (int i = 0; i < this->airtoweremblem_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->airtoweremblem(i));
    }
    total_size += 1 * this->airtoweremblem_size() + data_size;
  }
  
  // repeated int32 otherEmblem = 12;
  {
    int data_size = 0;
    for (int i = 0; i < this->otheremblem_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->otheremblem(i));
    }
    total_size += 1 * this->otheremblem_size() + data_size;
  }
  
  // repeated .DB_EmblemNew wpcEmblemNew = 13;
  total_size += 1 * this->wpcemblemnew_size();
  for (int i = 0; i < this->wpcemblemnew_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->wpcemblemnew(i));
  }
  
  // repeated int32 gunTurretEmblem = 14;
  {
    int data_size = 0;
    for (int i = 0; i < this->gunturretemblem_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->gunturretemblem(i));
    }
    total_size += 1 * this->gunturretemblem_size() + data_size;
  }
  
  // repeated int32 mortarTowerEmblem = 15;
  {
    int data_size = 0;
    for (int i = 0; i < this->mortartoweremblem_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->mortartoweremblem(i));
    }
    total_size += 1 * this->mortartoweremblem_size() + data_size;
  }
  
  // repeated int32 otherbldEmblem = 16;
  {
    int data_size = 0;
    for (int i = 0; i < this->otherbldemblem_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->otherbldemblem(i));
    }
    total_size += 2 * this->otherbldemblem_size() + data_size;
  }
  
  // repeated .DB_Book wpcBook = 17;
  total_size += 2 * this->wpcbook_size();
  for (int i = 0; i < this->wpcbook_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->wpcbook(i));
  }
  
  // repeated int32 admiralBook = 18;
  {
    int data_size = 0;
    for (int i = 0; i < this->admiralbook_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->admiralbook(i));
    }
    total_size += 2 * this->admiralbook_size() + data_size;
  }
  
  // repeated int32 laserTowerEmblem = 19;
  {
    int data_size = 0;
    for (int i = 0; i < this->lasertoweremblem_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->lasertoweremblem(i));
    }
    total_size += 2 * this->lasertoweremblem_size() + data_size;
  }
  
  // repeated int32 heroCom = 20;
  {
    int data_size = 0;
    for (int i = 0; i < this->herocom_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->herocom(i));
    }
    total_size += 2 * this->herocom_size() + data_size;
  }
  
  // repeated int32 giantCanonEmblem = 24;
  {
    int data_size = 0;
    for (int i = 0; i < this->giantcanonemblem_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->giantcanonemblem(i));
    }
    total_size += 2 * this->giantcanonemblem_size() + data_size;
  }
  
  // repeated .DB_Jammer wpcJammer = 25;
  total_size += 2 * this->wpcjammer_size();
  for (int i = 0; i < this->wpcjammer_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->wpcjammer(i));
  }
  
  // repeated int32 baseJammer = 26;
  {
    int data_size = 0;
    for (int i = 0; i < this->basejammer_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->basejammer(i));
    }
    total_size += 2 * this->basejammer_size() + data_size;
  }
  
  // repeated int32 armyJammer = 27;
  {
    int data_size = 0;
    for (int i = 0; i < this->armyjammer_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->armyjammer(i));
    }
    total_size += 2 * this->armyjammer_size() + data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void DB_WeaponCenter::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DB_WeaponCenter* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DB_WeaponCenter*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DB_WeaponCenter::MergeFrom(const DB_WeaponCenter& from) {
  GOOGLE_CHECK_NE(&from, this);
  sceneid_.MergeFrom(from.sceneid_);
  freeexplorecnt_.MergeFrom(from.freeexplorecnt_);
  finishexptime_.MergeFrom(from.finishexptime_);
  basecom_.MergeFrom(from.basecom_);
  armycom_.MergeFrom(from.armycom_);
  tankcom_.MergeFrom(from.tankcom_);
  planecom_.MergeFrom(from.planecom_);
  wpccom_.MergeFrom(from.wpccom_);
  wpcemblem_.MergeFrom(from.wpcemblem_);
  earthtoweremblem_.MergeFrom(from.earthtoweremblem_);
  airtoweremblem_.MergeFrom(from.airtoweremblem_);
  otheremblem_.MergeFrom(from.otheremblem_);
  wpcemblemnew_.MergeFrom(from.wpcemblemnew_);
  gunturretemblem_.MergeFrom(from.gunturretemblem_);
  mortartoweremblem_.MergeFrom(from.mortartoweremblem_);
  otherbldemblem_.MergeFrom(from.otherbldemblem_);
  wpcbook_.MergeFrom(from.wpcbook_);
  admiralbook_.MergeFrom(from.admiralbook_);
  lasertoweremblem_.MergeFrom(from.lasertoweremblem_);
  herocom_.MergeFrom(from.herocom_);
  giantcanonemblem_.MergeFrom(from.giantcanonemblem_);
  wpcjammer_.MergeFrom(from.wpcjammer_);
  basejammer_.MergeFrom(from.basejammer_);
  armyjammer_.MergeFrom(from.armyjammer_);
  if (from._has_bits_[20 / 32] & (0xffu << (20 % 32))) {
    if (from._has_bit(20)) {
      mutable_unlockextranum()->::DB_WeaponExtraWpcInfo::MergeFrom(from.unlockextranum());
    }
    if (from._has_bit(21)) {
      mutable_turnonnum()->::DB_WeaponExtraWpcInfo::MergeFrom(from.turnonnum());
    }
    if (from._has_bit(22)) {
      mutable_unlockemblemnum()->::DB_WeaponExtraEmblemInfo::MergeFrom(from.unlockemblemnum());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DB_WeaponCenter::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DB_WeaponCenter::CopyFrom(const DB_WeaponCenter& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DB_WeaponCenter::IsInitialized() const {
  
  return true;
}

void DB_WeaponCenter::Swap(DB_WeaponCenter* other) {
  if (other != this) {
    sceneid_.Swap(&other->sceneid_);
    freeexplorecnt_.Swap(&other->freeexplorecnt_);
    finishexptime_.Swap(&other->finishexptime_);
    basecom_.Swap(&other->basecom_);
    armycom_.Swap(&other->armycom_);
    tankcom_.Swap(&other->tankcom_);
    planecom_.Swap(&other->planecom_);
    wpccom_.Swap(&other->wpccom_);
    wpcemblem_.Swap(&other->wpcemblem_);
    earthtoweremblem_.Swap(&other->earthtoweremblem_);
    airtoweremblem_.Swap(&other->airtoweremblem_);
    otheremblem_.Swap(&other->otheremblem_);
    wpcemblemnew_.Swap(&other->wpcemblemnew_);
    gunturretemblem_.Swap(&other->gunturretemblem_);
    mortartoweremblem_.Swap(&other->mortartoweremblem_);
    otherbldemblem_.Swap(&other->otherbldemblem_);
    wpcbook_.Swap(&other->wpcbook_);
    admiralbook_.Swap(&other->admiralbook_);
    lasertoweremblem_.Swap(&other->lasertoweremblem_);
    herocom_.Swap(&other->herocom_);
    std::swap(unlockextranum_, other->unlockextranum_);
    std::swap(turnonnum_, other->turnonnum_);
    std::swap(unlockemblemnum_, other->unlockemblemnum_);
    giantcanonemblem_.Swap(&other->giantcanonemblem_);
    wpcjammer_.Swap(&other->wpcjammer_);
    basejammer_.Swap(&other->basejammer_);
    armyjammer_.Swap(&other->armyjammer_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DB_WeaponCenter::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DB_WeaponCenter_descriptor_;
  metadata.reflection = DB_WeaponCenter_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DB_Jammer::kIdFieldNumber;
const int DB_Jammer::kJammerIDFieldNumber;
const int DB_Jammer::kLevelFieldNumber;
const int DB_Jammer::kBLockFieldNumber;
const int DB_Jammer::kExpFieldNumber;
const int DB_Jammer::kBagTypeFieldNumber;
#endif  // !_MSC_VER

DB_Jammer::DB_Jammer() {
  SharedCtor();
}

void DB_Jammer::InitAsDefaultInstance() {
}

DB_Jammer::DB_Jammer(const DB_Jammer& from) {
  SharedCtor();
  MergeFrom(from);
}

void DB_Jammer::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  jammerid_ = 0;
  level_ = 0;
  block_ = false;
  exp_ = 0;
  bagtype_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DB_Jammer::~DB_Jammer() {
  SharedDtor();
}

void DB_Jammer::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* DB_Jammer::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DB_Jammer_descriptor_;
}

const DB_Jammer& DB_Jammer::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dbinterface_5fsub_2eproto();  return *default_instance_;
}

DB_Jammer* DB_Jammer::default_instance_ = NULL;

DB_Jammer* DB_Jammer::New() const {
  return new DB_Jammer;
}

void DB_Jammer::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    jammerid_ = 0;
    level_ = 0;
    block_ = false;
    exp_ = 0;
    bagtype_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DB_Jammer::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1 [default = 0];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &id_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_jammerID;
        break;
      }
      
      // optional int32 jammerID = 2 [default = 0];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_jammerID:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &jammerid_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_level;
        break;
      }
      
      // optional int32 level = 3 [default = 0];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_level:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &level_));
        _set_bit(2);
        if (input->ExpectTag(32)) goto parse_bLock;
        break;
      }
      
      // optional bool bLock = 4 [default = false];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_bLock:
        DO_(::google::protobuf::internal::WireFormatLite::ReadBool(
              input, &block_));
        _set_bit(3);
        if (input->ExpectTag(40)) goto parse_exp;
        break;
      }
      
      // optional int32 exp = 5 [default = 0];
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_exp:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &exp_));
        _set_bit(4);
        if (input->ExpectTag(48)) goto parse_bagType;
        break;
      }
      
      // optional int32 bagType = 6 [default = 0];
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_bagType:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &bagtype_));
        _set_bit(5);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DB_Jammer::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    DB_Jammer::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional int32 id = 1 [default = 0];
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }
  
  // optional int32 jammerID = 2 [default = 0];
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->jammerid(), output);
  }
  
  // optional int32 level = 3 [default = 0];
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->level(), output);
  }
  
  // optional bool bLock = 4 [default = false];
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->block(), output);
  }
  
  // optional int32 exp = 5 [default = 0];
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->exp(), output);
  }
  
  // optional int32 bagType = 6 [default = 0];
  if (_has_bit(5)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->bagtype(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DB_Jammer::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 id = 1 [default = 0];
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }
  
  // optional int32 jammerID = 2 [default = 0];
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->jammerid(), target);
  }
  
  // optional int32 level = 3 [default = 0];
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->level(), target);
  }
  
  // optional bool bLock = 4 [default = false];
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->block(), target);
  }
  
  // optional int32 exp = 5 [default = 0];
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->exp(), target);
  }
  
  // optional int32 bagType = 6 [default = 0];
  if (_has_bit(5)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->bagtype(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DB_Jammer::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 id = 1 [default = 0];
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }
    
    // optional int32 jammerID = 2 [default = 0];
    if (has_jammerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->jammerid());
    }
    
    // optional int32 level = 3 [default = 0];
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->level());
    }
    
    // optional bool bLock = 4 [default = false];
    if (has_block()) {
      total_size += 1 + 1;
    }
    
    // optional int32 exp = 5 [default = 0];
    if (has_exp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->exp());
    }
    
    // optional int32 bagType = 6 [default = 0];
    if (has_bagtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bagtype());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void DB_Jammer::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DB_Jammer* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DB_Jammer*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DB_Jammer::MergeFrom(const DB_Jammer& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_id(from.id());
    }
    if (from._has_bit(1)) {
      set_jammerid(from.jammerid());
    }
    if (from._has_bit(2)) {
      set_level(from.level());
    }
    if (from._has_bit(3)) {
      set_block(from.block());
    }
    if (from._has_bit(4)) {
      set_exp(from.exp());
    }
    if (from._has_bit(5)) {
      set_bagtype(from.bagtype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DB_Jammer::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DB_Jammer::CopyFrom(const DB_Jammer& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DB_Jammer::IsInitialized() const {
  
  return true;
}

void DB_Jammer::Swap(DB_Jammer* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(jammerid_, other->jammerid_);
    std::swap(level_, other->level_);
    std::swap(block_, other->block_);
    std::swap(exp_, other->exp_);
    std::swap(bagtype_, other->bagtype_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DB_Jammer::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DB_Jammer_descriptor_;
  metadata.reflection = DB_Jammer_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DB_WeaponExtraWpcInfo::kExtraBaseComNumFieldNumber;
const int DB_WeaponExtraWpcInfo::kExtraArmyComNumFieldNumber;
const int DB_WeaponExtraWpcInfo::kExtraTankComNumFieldNumber;
const int DB_WeaponExtraWpcInfo::kExtraPlaneComNumFieldNumber;
const int DB_WeaponExtraWpcInfo::kExtraHeroComNumFieldNumber;
#endif  // !_MSC_VER

DB_WeaponExtraWpcInfo::DB_WeaponExtraWpcInfo() {
  SharedCtor();
}

void DB_WeaponExtraWpcInfo::InitAsDefaultInstance() {
}

DB_WeaponExtraWpcInfo::DB_WeaponExtraWpcInfo(const DB_WeaponExtraWpcInfo& from) {
  SharedCtor();
  MergeFrom(from);
}

void DB_WeaponExtraWpcInfo::SharedCtor() {
  _cached_size_ = 0;
  extrabasecomnum_ = 0;
  extraarmycomnum_ = 0;
  extratankcomnum_ = 0;
  extraplanecomnum_ = 0;
  extraherocomnum_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DB_WeaponExtraWpcInfo::~DB_WeaponExtraWpcInfo() {
  SharedDtor();
}

void DB_WeaponExtraWpcInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* DB_WeaponExtraWpcInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DB_WeaponExtraWpcInfo_descriptor_;
}

const DB_WeaponExtraWpcInfo& DB_WeaponExtraWpcInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dbinterface_5fsub_2eproto();  return *default_instance_;
}

DB_WeaponExtraWpcInfo* DB_WeaponExtraWpcInfo::default_instance_ = NULL;

DB_WeaponExtraWpcInfo* DB_WeaponExtraWpcInfo::New() const {
  return new DB_WeaponExtraWpcInfo;
}

void DB_WeaponExtraWpcInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    extrabasecomnum_ = 0;
    extraarmycomnum_ = 0;
    extratankcomnum_ = 0;
    extraplanecomnum_ = 0;
    extraherocomnum_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DB_WeaponExtraWpcInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 extraBaseComNum = 1 [default = 0];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &extrabasecomnum_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_extraArmyComNum;
        break;
      }
      
      // optional int32 extraArmyComNum = 2 [default = 0];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_extraArmyComNum:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &extraarmycomnum_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_extraTankComNum;
        break;
      }
      
      // optional int32 extraTankComNum = 3 [default = 0];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_extraTankComNum:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &extratankcomnum_));
        _set_bit(2);
        if (input->ExpectTag(32)) goto parse_extraPlaneComNum;
        break;
      }
      
      // optional int32 extraPlaneComNum = 4 [default = 0];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_extraPlaneComNum:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &extraplanecomnum_));
        _set_bit(3);
        if (input->ExpectTag(40)) goto parse_extraHeroComNum;
        break;
      }
      
      // optional int32 extraHeroComNum = 5 [default = 0];
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_extraHeroComNum:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &extraherocomnum_));
        _set_bit(4);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DB_WeaponExtraWpcInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    DB_WeaponExtraWpcInfo::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional int32 extraBaseComNum = 1 [default = 0];
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->extrabasecomnum(), output);
  }
  
  // optional int32 extraArmyComNum = 2 [default = 0];
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->extraarmycomnum(), output);
  }
  
  // optional int32 extraTankComNum = 3 [default = 0];
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->extratankcomnum(), output);
  }
  
  // optional int32 extraPlaneComNum = 4 [default = 0];
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->extraplanecomnum(), output);
  }
  
  // optional int32 extraHeroComNum = 5 [default = 0];
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->extraherocomnum(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DB_WeaponExtraWpcInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 extraBaseComNum = 1 [default = 0];
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->extrabasecomnum(), target);
  }
  
  // optional int32 extraArmyComNum = 2 [default = 0];
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->extraarmycomnum(), target);
  }
  
  // optional int32 extraTankComNum = 3 [default = 0];
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->extratankcomnum(), target);
  }
  
  // optional int32 extraPlaneComNum = 4 [default = 0];
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->extraplanecomnum(), target);
  }
  
  // optional int32 extraHeroComNum = 5 [default = 0];
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->extraherocomnum(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DB_WeaponExtraWpcInfo::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 extraBaseComNum = 1 [default = 0];
    if (has_extrabasecomnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->extrabasecomnum());
    }
    
    // optional int32 extraArmyComNum = 2 [default = 0];
    if (has_extraarmycomnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->extraarmycomnum());
    }
    
    // optional int32 extraTankComNum = 3 [default = 0];
    if (has_extratankcomnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->extratankcomnum());
    }
    
    // optional int32 extraPlaneComNum = 4 [default = 0];
    if (has_extraplanecomnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->extraplanecomnum());
    }
    
    // optional int32 extraHeroComNum = 5 [default = 0];
    if (has_extraherocomnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->extraherocomnum());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void DB_WeaponExtraWpcInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DB_WeaponExtraWpcInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DB_WeaponExtraWpcInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DB_WeaponExtraWpcInfo::MergeFrom(const DB_WeaponExtraWpcInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_extrabasecomnum(from.extrabasecomnum());
    }
    if (from._has_bit(1)) {
      set_extraarmycomnum(from.extraarmycomnum());
    }
    if (from._has_bit(2)) {
      set_extratankcomnum(from.extratankcomnum());
    }
    if (from._has_bit(3)) {
      set_extraplanecomnum(from.extraplanecomnum());
    }
    if (from._has_bit(4)) {
      set_extraherocomnum(from.extraherocomnum());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DB_WeaponExtraWpcInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DB_WeaponExtraWpcInfo::CopyFrom(const DB_WeaponExtraWpcInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DB_WeaponExtraWpcInfo::IsInitialized() const {
  
  return true;
}

void DB_WeaponExtraWpcInfo::Swap(DB_WeaponExtraWpcInfo* other) {
  if (other != this) {
    std::swap(extrabasecomnum_, other->extrabasecomnum_);
    std::swap(extraarmycomnum_, other->extraarmycomnum_);
    std::swap(extratankcomnum_, other->extratankcomnum_);
    std::swap(extraplanecomnum_, other->extraplanecomnum_);
    std::swap(extraherocomnum_, other->extraherocomnum_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DB_WeaponExtraWpcInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DB_WeaponExtraWpcInfo_descriptor_;
  metadata.reflection = DB_WeaponExtraWpcInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DB_WeaponExtraEmblemInfo::kEarthEmblemCntFieldNumber;
const int DB_WeaponExtraEmblemInfo::kAirEmblemCntFieldNumber;
const int DB_WeaponExtraEmblemInfo::kBaseEmblemCntFieldNumber;
const int DB_WeaponExtraEmblemInfo::kLasertowerEmblemCntFieldNumber;
const int DB_WeaponExtraEmblemInfo::kGiantcanonEmblemCntFieldNumber;
#endif  // !_MSC_VER

DB_WeaponExtraEmblemInfo::DB_WeaponExtraEmblemInfo() {
  SharedCtor();
}

void DB_WeaponExtraEmblemInfo::InitAsDefaultInstance() {
}

DB_WeaponExtraEmblemInfo::DB_WeaponExtraEmblemInfo(const DB_WeaponExtraEmblemInfo& from) {
  SharedCtor();
  MergeFrom(from);
}

void DB_WeaponExtraEmblemInfo::SharedCtor() {
  _cached_size_ = 0;
  earthemblemcnt_ = 0;
  airemblemcnt_ = 0;
  baseemblemcnt_ = 0;
  lasertoweremblemcnt_ = 0;
  giantcanonemblemcnt_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DB_WeaponExtraEmblemInfo::~DB_WeaponExtraEmblemInfo() {
  SharedDtor();
}

void DB_WeaponExtraEmblemInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* DB_WeaponExtraEmblemInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DB_WeaponExtraEmblemInfo_descriptor_;
}

const DB_WeaponExtraEmblemInfo& DB_WeaponExtraEmblemInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dbinterface_5fsub_2eproto();  return *default_instance_;
}

DB_WeaponExtraEmblemInfo* DB_WeaponExtraEmblemInfo::default_instance_ = NULL;

DB_WeaponExtraEmblemInfo* DB_WeaponExtraEmblemInfo::New() const {
  return new DB_WeaponExtraEmblemInfo;
}

void DB_WeaponExtraEmblemInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    earthemblemcnt_ = 0;
    airemblemcnt_ = 0;
    baseemblemcnt_ = 0;
    lasertoweremblemcnt_ = 0;
    giantcanonemblemcnt_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DB_WeaponExtraEmblemInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 earthEmblemCnt = 1 [default = 0];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &earthemblemcnt_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_airEmblemCnt;
        break;
      }
      
      // optional int32 airEmblemCnt = 2 [default = 0];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_airEmblemCnt:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &airemblemcnt_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_baseEmblemCnt;
        break;
      }
      
      // optional int32 baseEmblemCnt = 3 [default = 0];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_baseEmblemCnt:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &baseemblemcnt_));
        _set_bit(2);
        if (input->ExpectTag(32)) goto parse_lasertowerEmblemCnt;
        break;
      }
      
      // optional int32 lasertowerEmblemCnt = 4 [default = 0];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_lasertowerEmblemCnt:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &lasertoweremblemcnt_));
        _set_bit(3);
        if (input->ExpectTag(40)) goto parse_giantcanonEmblemCnt;
        break;
      }
      
      // optional int32 giantcanonEmblemCnt = 5 [default = 0];
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_giantcanonEmblemCnt:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &giantcanonemblemcnt_));
        _set_bit(4);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DB_WeaponExtraEmblemInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    DB_WeaponExtraEmblemInfo::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional int32 earthEmblemCnt = 1 [default = 0];
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->earthemblemcnt(), output);
  }
  
  // optional int32 airEmblemCnt = 2 [default = 0];
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->airemblemcnt(), output);
  }
  
  // optional int32 baseEmblemCnt = 3 [default = 0];
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->baseemblemcnt(), output);
  }
  
  // optional int32 lasertowerEmblemCnt = 4 [default = 0];
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->lasertoweremblemcnt(), output);
  }
  
  // optional int32 giantcanonEmblemCnt = 5 [default = 0];
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->giantcanonemblemcnt(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DB_WeaponExtraEmblemInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 earthEmblemCnt = 1 [default = 0];
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->earthemblemcnt(), target);
  }
  
  // optional int32 airEmblemCnt = 2 [default = 0];
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->airemblemcnt(), target);
  }
  
  // optional int32 baseEmblemCnt = 3 [default = 0];
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->baseemblemcnt(), target);
  }
  
  // optional int32 lasertowerEmblemCnt = 4 [default = 0];
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->lasertoweremblemcnt(), target);
  }
  
  // optional int32 giantcanonEmblemCnt = 5 [default = 0];
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->giantcanonemblemcnt(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DB_WeaponExtraEmblemInfo::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 earthEmblemCnt = 1 [default = 0];
    if (has_earthemblemcnt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->earthemblemcnt());
    }
    
    // optional int32 airEmblemCnt = 2 [default = 0];
    if (has_airemblemcnt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->airemblemcnt());
    }
    
    // optional int32 baseEmblemCnt = 3 [default = 0];
    if (has_baseemblemcnt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->baseemblemcnt());
    }
    
    // optional int32 lasertowerEmblemCnt = 4 [default = 0];
    if (has_lasertoweremblemcnt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->lasertoweremblemcnt());
    }
    
    // optional int32 giantcanonEmblemCnt = 5 [default = 0];
    if (has_giantcanonemblemcnt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->giantcanonemblemcnt());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void DB_WeaponExtraEmblemInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DB_WeaponExtraEmblemInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DB_WeaponExtraEmblemInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DB_WeaponExtraEmblemInfo::MergeFrom(const DB_WeaponExtraEmblemInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_earthemblemcnt(from.earthemblemcnt());
    }
    if (from._has_bit(1)) {
      set_airemblemcnt(from.airemblemcnt());
    }
    if (from._has_bit(2)) {
      set_baseemblemcnt(from.baseemblemcnt());
    }
    if (from._has_bit(3)) {
      set_lasertoweremblemcnt(from.lasertoweremblemcnt());
    }
    if (from._has_bit(4)) {
      set_giantcanonemblemcnt(from.giantcanonemblemcnt());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DB_WeaponExtraEmblemInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DB_WeaponExtraEmblemInfo::CopyFrom(const DB_WeaponExtraEmblemInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DB_WeaponExtraEmblemInfo::IsInitialized() const {
  
  return true;
}

void DB_WeaponExtraEmblemInfo::Swap(DB_WeaponExtraEmblemInfo* other) {
  if (other != this) {
    std::swap(earthemblemcnt_, other->earthemblemcnt_);
    std::swap(airemblemcnt_, other->airemblemcnt_);
    std::swap(baseemblemcnt_, other->baseemblemcnt_);
    std::swap(lasertoweremblemcnt_, other->lasertoweremblemcnt_);
    std::swap(giantcanonemblemcnt_, other->giantcanonemblemcnt_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DB_WeaponExtraEmblemInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DB_WeaponExtraEmblemInfo_descriptor_;
  metadata.reflection = DB_WeaponExtraEmblemInfo_reflection_;
  return metadata;
}


// ===================================================================

const ::std::string DB_CaptureBase::_default_name_;
const ::std::string DB_CaptureBase::_default_pic_;
#ifndef _MSC_VER
const int DB_CaptureBase::kBaseIDFieldNumber;
const int DB_CaptureBase::kNameFieldNumber;
const int DB_CaptureBase::kPicFieldNumber;
const int DB_CaptureBase::kLevelFieldNumber;
const int DB_CaptureBase::kFinishCaptureTmFieldNumber;
const int DB_CaptureBase::kSrcTypeFieldNumber;
const int DB_CaptureBase::kPickResTimeFieldNumber;
const int DB_CaptureBase::kLossUserFieldNumber;
#endif  // !_MSC_VER

DB_CaptureBase::DB_CaptureBase() {
  SharedCtor();
}

void DB_CaptureBase::InitAsDefaultInstance() {
}

DB_CaptureBase::DB_CaptureBase(const DB_CaptureBase& from) {
  SharedCtor();
  MergeFrom(from);
}

void DB_CaptureBase::SharedCtor() {
  _cached_size_ = 0;
  baseid_ = GOOGLE_LONGLONG(0);
  name_ = const_cast< ::std::string*>(&_default_name_);
  pic_ = const_cast< ::std::string*>(&_default_pic_);
  level_ = 0;
  finishcapturetm_ = 0;
  srctype_ = 0;
  pickrestime_ = 0;
  lossuser_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DB_CaptureBase::~DB_CaptureBase() {
  SharedDtor();
}

void DB_CaptureBase::SharedDtor() {
  if (name_ != &_default_name_) {
    delete name_;
  }
  if (pic_ != &_default_pic_) {
    delete pic_;
  }
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* DB_CaptureBase::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DB_CaptureBase_descriptor_;
}

const DB_CaptureBase& DB_CaptureBase::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dbinterface_5fsub_2eproto();  return *default_instance_;
}

DB_CaptureBase* DB_CaptureBase::default_instance_ = NULL;

DB_CaptureBase* DB_CaptureBase::New() const {
  return new DB_CaptureBase;
}

void DB_CaptureBase::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    baseid_ = GOOGLE_LONGLONG(0);
    if (_has_bit(1)) {
      if (name_ != &_default_name_) {
        name_->clear();
      }
    }
    if (_has_bit(2)) {
      if (pic_ != &_default_pic_) {
        pic_->clear();
      }
    }
    level_ = 0;
    finishcapturetm_ = 0;
    srctype_ = 0;
    pickrestime_ = 0;
    lossuser_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DB_CaptureBase::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 baseID = 1 [default = 0];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt64(
              input, &baseid_));
        _set_bit(0);
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }
      
      // optional string name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_name:
        DO_(::google::protobuf::internal::WireFormatLite::ReadString(
              input, this->mutable_name()));
        ::google::protobuf::internal::WireFormat::VerifyUTF8String(
          this->name().data(), this->name().length(),
          ::google::protobuf::internal::WireFormat::PARSE);
        if (input->ExpectTag(26)) goto parse_pic;
        break;
      }
      
      // optional string pic = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_pic:
        DO_(::google::protobuf::internal::WireFormatLite::ReadString(
              input, this->mutable_pic()));
        ::google::protobuf::internal::WireFormat::VerifyUTF8String(
          this->pic().data(), this->pic().length(),
          ::google::protobuf::internal::WireFormat::PARSE);
        if (input->ExpectTag(32)) goto parse_level;
        break;
      }
      
      // optional int32 level = 4 [default = 0];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_level:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &level_));
        _set_bit(3);
        if (input->ExpectTag(40)) goto parse_finishCaptureTm;
        break;
      }
      
      // optional int32 finishCaptureTm = 5 [default = 0];
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_finishCaptureTm:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &finishcapturetm_));
        _set_bit(4);
        if (input->ExpectTag(48)) goto parse_srcType;
        break;
      }
      
      // optional int32 srcType = 6 [default = 0];
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_srcType:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &srctype_));
        _set_bit(5);
        if (input->ExpectTag(56)) goto parse_pickResTime;
        break;
      }
      
      // optional int32 pickResTime = 7 [default = 0];
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_pickResTime:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &pickrestime_));
        _set_bit(6);
        if (input->ExpectTag(64)) goto parse_lossUser;
        break;
      }
      
      // optional bool lossUser = 8 [default = false];
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_lossUser:
        DO_(::google::protobuf::internal::WireFormatLite::ReadBool(
              input, &lossuser_));
        _set_bit(7);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DB_CaptureBase::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    DB_CaptureBase::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional int64 baseID = 1 [default = 0];
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->baseid(), output);
  }
  
  // optional string name = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->name(), output);
  }
  
  // optional string pic = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->pic().data(), this->pic().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->pic(), output);
  }
  
  // optional int32 level = 4 [default = 0];
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->level(), output);
  }
  
  // optional int32 finishCaptureTm = 5 [default = 0];
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->finishcapturetm(), output);
  }
  
  // optional int32 srcType = 6 [default = 0];
  if (_has_bit(5)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->srctype(), output);
  }
  
  // optional int32 pickResTime = 7 [default = 0];
  if (_has_bit(6)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->pickrestime(), output);
  }
  
  // optional bool lossUser = 8 [default = false];
  if (_has_bit(7)) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->lossuser(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DB_CaptureBase::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int64 baseID = 1 [default = 0];
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->baseid(), target);
  }
  
  // optional string name = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }
  
  // optional string pic = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->pic().data(), this->pic().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->pic(), target);
  }
  
  // optional int32 level = 4 [default = 0];
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->level(), target);
  }
  
  // optional int32 finishCaptureTm = 5 [default = 0];
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->finishcapturetm(), target);
  }
  
  // optional int32 srcType = 6 [default = 0];
  if (_has_bit(5)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->srctype(), target);
  }
  
  // optional int32 pickResTime = 7 [default = 0];
  if (_has_bit(6)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->pickrestime(), target);
  }
  
  // optional bool lossUser = 8 [default = false];
  if (_has_bit(7)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(8, this->lossuser(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DB_CaptureBase::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 baseID = 1 [default = 0];
    if (has_baseid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->baseid());
    }
    
    // optional string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }
    
    // optional string pic = 3;
    if (has_pic()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->pic());
    }
    
    // optional int32 level = 4 [default = 0];
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->level());
    }
    
    // optional int32 finishCaptureTm = 5 [default = 0];
    if (has_finishcapturetm()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->finishcapturetm());
    }
    
    // optional int32 srcType = 6 [default = 0];
    if (has_srctype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->srctype());
    }
    
    // optional int32 pickResTime = 7 [default = 0];
    if (has_pickrestime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pickrestime());
    }
    
    // optional bool lossUser = 8 [default = false];
    if (has_lossuser()) {
      total_size += 1 + 1;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void DB_CaptureBase::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DB_CaptureBase* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DB_CaptureBase*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DB_CaptureBase::MergeFrom(const DB_CaptureBase& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_baseid(from.baseid());
    }
    if (from._has_bit(1)) {
      set_name(from.name());
    }
    if (from._has_bit(2)) {
      set_pic(from.pic());
    }
    if (from._has_bit(3)) {
      set_level(from.level());
    }
    if (from._has_bit(4)) {
      set_finishcapturetm(from.finishcapturetm());
    }
    if (from._has_bit(5)) {
      set_srctype(from.srctype());
    }
    if (from._has_bit(6)) {
      set_pickrestime(from.pickrestime());
    }
    if (from._has_bit(7)) {
      set_lossuser(from.lossuser());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DB_CaptureBase::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DB_CaptureBase::CopyFrom(const DB_CaptureBase& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DB_CaptureBase::IsInitialized() const {
  
  return true;
}

void DB_CaptureBase::Swap(DB_CaptureBase* other) {
  if (other != this) {
    std::swap(baseid_, other->baseid_);
    std::swap(name_, other->name_);
    std::swap(pic_, other->pic_);
    std::swap(level_, other->level_);
    std::swap(finishcapturetm_, other->finishcapturetm_);
    std::swap(srctype_, other->srctype_);
    std::swap(pickrestime_, other->pickrestime_);
    std::swap(lossuser_, other->lossuser_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DB_CaptureBase::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DB_CaptureBase_descriptor_;
  metadata.reflection = DB_CaptureBase_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DB_SlaveRoom::kDayRescueCntFieldNumber;
const int DB_SlaveRoom::kDayCapturedCntFieldNumber;
const int DB_SlaveRoom::kCapturedInfoFieldNumber;
const int DB_SlaveRoom::kCaptureBaseFieldNumber;
const int DB_SlaveRoom::kPrcMedalFieldNumber;
const int DB_SlaveRoom::kPrcOilFieldNumber;
const int DB_SlaveRoom::kPrcHonorFieldNumber;
const int DB_SlaveRoom::kPrcFeatsFieldNumber;
#endif  // !_MSC_VER

DB_SlaveRoom::DB_SlaveRoom() {
  SharedCtor();
}

void DB_SlaveRoom::InitAsDefaultInstance() {
  capturedinfo_ = const_cast< ::DB_CaptureBase*>(&::DB_CaptureBase::default_instance());
}

DB_SlaveRoom::DB_SlaveRoom(const DB_SlaveRoom& from) {
  SharedCtor();
  MergeFrom(from);
}

void DB_SlaveRoom::SharedCtor() {
  _cached_size_ = 0;
  dayrescuecnt_ = 0;
  daycapturedcnt_ = 0;
  capturedinfo_ = NULL;
  prcmedal_ = 0;
  prcoil_ = 0;
  prchonor_ = 0;
  prcfeats_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DB_SlaveRoom::~DB_SlaveRoom() {
  SharedDtor();
}

void DB_SlaveRoom::SharedDtor() {
  if (this != default_instance_) {
    delete capturedinfo_;
  }
}

const ::google::protobuf::Descriptor* DB_SlaveRoom::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DB_SlaveRoom_descriptor_;
}

const DB_SlaveRoom& DB_SlaveRoom::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dbinterface_5fsub_2eproto();  return *default_instance_;
}

DB_SlaveRoom* DB_SlaveRoom::default_instance_ = NULL;

DB_SlaveRoom* DB_SlaveRoom::New() const {
  return new DB_SlaveRoom;
}

void DB_SlaveRoom::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    dayrescuecnt_ = 0;
    daycapturedcnt_ = 0;
    if (_has_bit(2)) {
      if (capturedinfo_ != NULL) capturedinfo_->::DB_CaptureBase::Clear();
    }
    prcmedal_ = 0;
    prcoil_ = 0;
    prchonor_ = 0;
    prcfeats_ = 0;
  }
  capturebase_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DB_SlaveRoom::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 dayRescueCnt = 1 [default = 0];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &dayrescuecnt_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_dayCapturedCnt;
        break;
      }
      
      // optional int32 dayCapturedCnt = 2 [default = 0];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_dayCapturedCnt:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &daycapturedcnt_));
        _set_bit(1);
        if (input->ExpectTag(26)) goto parse_capturedInfo;
        break;
      }
      
      // optional .DB_CaptureBase capturedInfo = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_capturedInfo:
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
             input, mutable_capturedinfo()));
        if (input->ExpectTag(34)) goto parse_captureBase;
        break;
      }
      
      // repeated .DB_CaptureBase captureBase = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_captureBase:
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, add_capturebase()));
        if (input->ExpectTag(34)) goto parse_captureBase;
        if (input->ExpectTag(40)) goto parse_prcMedal;
        break;
      }
      
      // optional int32 prcMedal = 5 [default = 0];
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_prcMedal:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &prcmedal_));
        _set_bit(4);
        if (input->ExpectTag(48)) goto parse_prcOil;
        break;
      }
      
      // optional int32 prcOil = 6 [default = 0];
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_prcOil:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &prcoil_));
        _set_bit(5);
        if (input->ExpectTag(56)) goto parse_prcHonor;
        break;
      }
      
      // optional int32 prcHonor = 7 [default = 0];
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_prcHonor:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &prchonor_));
        _set_bit(6);
        if (input->ExpectTag(64)) goto parse_prcFeats;
        break;
      }
      
      // optional int32 prcFeats = 8 [default = 0];
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_prcFeats:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &prcfeats_));
        _set_bit(7);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DB_SlaveRoom::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    DB_SlaveRoom::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional int32 dayRescueCnt = 1 [default = 0];
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->dayrescuecnt(), output);
  }
  
  // optional int32 dayCapturedCnt = 2 [default = 0];
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->daycapturedcnt(), output);
  }
  
  // optional .DB_CaptureBase capturedInfo = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      3, this->capturedinfo(), output);
  }
  
  // repeated .DB_CaptureBase captureBase = 4;
  for (int i = 0; i < this->capturebase_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      4, this->capturebase(i), output);
  }
  
  // optional int32 prcMedal = 5 [default = 0];
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->prcmedal(), output);
  }
  
  // optional int32 prcOil = 6 [default = 0];
  if (_has_bit(5)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->prcoil(), output);
  }
  
  // optional int32 prcHonor = 7 [default = 0];
  if (_has_bit(6)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->prchonor(), output);
  }
  
  // optional int32 prcFeats = 8 [default = 0];
  if (_has_bit(7)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->prcfeats(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DB_SlaveRoom::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 dayRescueCnt = 1 [default = 0];
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->dayrescuecnt(), target);
  }
  
  // optional int32 dayCapturedCnt = 2 [default = 0];
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->daycapturedcnt(), target);
  }
  
  // optional .DB_CaptureBase capturedInfo = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->capturedinfo(), target);
  }
  
  // repeated .DB_CaptureBase captureBase = 4;
  for (int i = 0; i < this->capturebase_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->capturebase(i), target);
  }
  
  // optional int32 prcMedal = 5 [default = 0];
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->prcmedal(), target);
  }
  
  // optional int32 prcOil = 6 [default = 0];
  if (_has_bit(5)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->prcoil(), target);
  }
  
  // optional int32 prcHonor = 7 [default = 0];
  if (_has_bit(6)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->prchonor(), target);
  }
  
  // optional int32 prcFeats = 8 [default = 0];
  if (_has_bit(7)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->prcfeats(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DB_SlaveRoom::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 dayRescueCnt = 1 [default = 0];
    if (has_dayrescuecnt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->dayrescuecnt());
    }
    
    // optional int32 dayCapturedCnt = 2 [default = 0];
    if (has_daycapturedcnt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->daycapturedcnt());
    }
    
    // optional .DB_CaptureBase capturedInfo = 3;
    if (has_capturedinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->capturedinfo());
    }
    
    // optional int32 prcMedal = 5 [default = 0];
    if (has_prcmedal()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->prcmedal());
    }
    
    // optional int32 prcOil = 6 [default = 0];
    if (has_prcoil()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->prcoil());
    }
    
    // optional int32 prcHonor = 7 [default = 0];
    if (has_prchonor()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->prchonor());
    }
    
    // optional int32 prcFeats = 8 [default = 0];
    if (has_prcfeats()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->prcfeats());
    }
    
  }
  // repeated .DB_CaptureBase captureBase = 4;
  total_size += 1 * this->capturebase_size();
  for (int i = 0; i < this->capturebase_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->capturebase(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void DB_SlaveRoom::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DB_SlaveRoom* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DB_SlaveRoom*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DB_SlaveRoom::MergeFrom(const DB_SlaveRoom& from) {
  GOOGLE_CHECK_NE(&from, this);
  capturebase_.MergeFrom(from.capturebase_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_dayrescuecnt(from.dayrescuecnt());
    }
    if (from._has_bit(1)) {
      set_daycapturedcnt(from.daycapturedcnt());
    }
    if (from._has_bit(2)) {
      mutable_capturedinfo()->::DB_CaptureBase::MergeFrom(from.capturedinfo());
    }
    if (from._has_bit(4)) {
      set_prcmedal(from.prcmedal());
    }
    if (from._has_bit(5)) {
      set_prcoil(from.prcoil());
    }
    if (from._has_bit(6)) {
      set_prchonor(from.prchonor());
    }
    if (from._has_bit(7)) {
      set_prcfeats(from.prcfeats());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DB_SlaveRoom::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DB_SlaveRoom::CopyFrom(const DB_SlaveRoom& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DB_SlaveRoom::IsInitialized() const {
  
  return true;
}

void DB_SlaveRoom::Swap(DB_SlaveRoom* other) {
  if (other != this) {
    std::swap(dayrescuecnt_, other->dayrescuecnt_);
    std::swap(daycapturedcnt_, other->daycapturedcnt_);
    std::swap(capturedinfo_, other->capturedinfo_);
    capturebase_.Swap(&other->capturebase_);
    std::swap(prcmedal_, other->prcmedal_);
    std::swap(prcoil_, other->prcoil_);
    std::swap(prchonor_, other->prchonor_);
    std::swap(prcfeats_, other->prcfeats_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DB_SlaveRoom::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DB_SlaveRoom_descriptor_;
  metadata.reflection = DB_SlaveRoom_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DB_NPCActive::kDayWinNPCIDFieldNumber;
const int DB_NPCActive::kDayLostNPCIDFieldNumber;
const int DB_NPCActive::kDayGetItemIDFieldNumber;
#endif  // !_MSC_VER

DB_NPCActive::DB_NPCActive() {
  SharedCtor();
}

void DB_NPCActive::InitAsDefaultInstance() {
}

DB_NPCActive::DB_NPCActive(const DB_NPCActive& from) {
  SharedCtor();
  MergeFrom(from);
}

void DB_NPCActive::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DB_NPCActive::~DB_NPCActive() {
  SharedDtor();
}

void DB_NPCActive::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* DB_NPCActive::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DB_NPCActive_descriptor_;
}

const DB_NPCActive& DB_NPCActive::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dbinterface_5fsub_2eproto();  return *default_instance_;
}

DB_NPCActive* DB_NPCActive::default_instance_ = NULL;

DB_NPCActive* DB_NPCActive::New() const {
  return new DB_NPCActive;
}

void DB_NPCActive::Clear() {
  daywinnpcid_.Clear();
  daylostnpcid_.Clear();
  daygetitemid_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DB_NPCActive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated int32 dayWinNPCID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_dayWinNPCID:
        ::google::protobuf::int32 value;
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &value));
        add_daywinnpcid(value);
        if (input->ExpectTag(8)) goto parse_dayWinNPCID;
        if (input->ExpectTag(16)) goto parse_dayLostNPCID;
        break;
      }
      
      // repeated int32 dayLostNPCID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_dayLostNPCID:
        ::google::protobuf::int32 value;
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &value));
        add_daylostnpcid(value);
        if (input->ExpectTag(16)) goto parse_dayLostNPCID;
        if (input->ExpectTag(24)) goto parse_dayGetItemID;
        break;
      }
      
      // repeated int32 dayGetItemID = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_dayGetItemID:
        ::google::protobuf::int32 value;
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &value));
        add_daygetitemid(value);
        if (input->ExpectTag(24)) goto parse_dayGetItemID;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DB_NPCActive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    DB_NPCActive::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // repeated int32 dayWinNPCID = 1;
  for (int i = 0; i < this->daywinnpcid_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      1, this->daywinnpcid(i), output);
  }
  
  // repeated int32 dayLostNPCID = 2;
  for (int i = 0; i < this->daylostnpcid_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      2, this->daylostnpcid(i), output);
  }
  
  // repeated int32 dayGetItemID = 3;
  for (int i = 0; i < this->daygetitemid_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      3, this->daygetitemid(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DB_NPCActive::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated int32 dayWinNPCID = 1;
  for (int i = 0; i < this->daywinnpcid_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(1, this->daywinnpcid(i), target);
  }
  
  // repeated int32 dayLostNPCID = 2;
  for (int i = 0; i < this->daylostnpcid_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(2, this->daylostnpcid(i), target);
  }
  
  // repeated int32 dayGetItemID = 3;
  for (int i = 0; i < this->daygetitemid_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(3, this->daygetitemid(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DB_NPCActive::ByteSize() const {
  int total_size = 0;
  
  // repeated int32 dayWinNPCID = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->daywinnpcid_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->daywinnpcid(i));
    }
    total_size += 1 * this->daywinnpcid_size() + data_size;
  }
  
  // repeated int32 dayLostNPCID = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->daylostnpcid_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->daylostnpcid(i));
    }
    total_size += 1 * this->daylostnpcid_size() + data_size;
  }
  
  // repeated int32 dayGetItemID = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->daygetitemid_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->daygetitemid(i));
    }
    total_size += 1 * this->daygetitemid_size() + data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void DB_NPCActive::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DB_NPCActive* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DB_NPCActive*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DB_NPCActive::MergeFrom(const DB_NPCActive& from) {
  GOOGLE_CHECK_NE(&from, this);
  daywinnpcid_.MergeFrom(from.daywinnpcid_);
  daylostnpcid_.MergeFrom(from.daylostnpcid_);
  daygetitemid_.MergeFrom(from.daygetitemid_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DB_NPCActive::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DB_NPCActive::CopyFrom(const DB_NPCActive& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DB_NPCActive::IsInitialized() const {
  
  return true;
}

void DB_NPCActive::Swap(DB_NPCActive* other) {
  if (other != this) {
    daywinnpcid_.Swap(&other->daywinnpcid_);
    daylostnpcid_.Swap(&other->daylostnpcid_);
    daygetitemid_.Swap(&other->daygetitemid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DB_NPCActive::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DB_NPCActive_descriptor_;
  metadata.reflection = DB_NPCActive_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DB_BaseDefNPC::kBestScoreFieldNumber;
const int DB_BaseDefNPC::kDayDefCntFieldNumber;
const int DB_BaseDefNPC::kLeftStakeCntFieldNumber;
const int DB_BaseDefNPC::kShowItemLstFieldNumber;
const int DB_BaseDefNPC::kShowItemCntFieldNumber;
const int DB_BaseDefNPC::kStakeItemLstFieldNumber;
const int DB_BaseDefNPC::kStakeItemCntFieldNumber;
const int DB_BaseDefNPC::kLastNPCIDFieldNumber;
#endif  // !_MSC_VER

DB_BaseDefNPC::DB_BaseDefNPC() {
  SharedCtor();
}

void DB_BaseDefNPC::InitAsDefaultInstance() {
}

DB_BaseDefNPC::DB_BaseDefNPC(const DB_BaseDefNPC& from) {
  SharedCtor();
  MergeFrom(from);
}

void DB_BaseDefNPC::SharedCtor() {
  _cached_size_ = 0;
  bestscore_ = 0;
  daydefcnt_ = 0;
  leftstakecnt_ = 0;
  lastnpcid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DB_BaseDefNPC::~DB_BaseDefNPC() {
  SharedDtor();
}

void DB_BaseDefNPC::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* DB_BaseDefNPC::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DB_BaseDefNPC_descriptor_;
}

const DB_BaseDefNPC& DB_BaseDefNPC::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dbinterface_5fsub_2eproto();  return *default_instance_;
}

DB_BaseDefNPC* DB_BaseDefNPC::default_instance_ = NULL;

DB_BaseDefNPC* DB_BaseDefNPC::New() const {
  return new DB_BaseDefNPC;
}

void DB_BaseDefNPC::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    bestscore_ = 0;
    daydefcnt_ = 0;
    leftstakecnt_ = 0;
    lastnpcid_ = 0;
  }
  showitemlst_.Clear();
  showitemcnt_.Clear();
  stakeitemlst_.Clear();
  stakeitemcnt_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DB_BaseDefNPC::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 bestScore = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &bestscore_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_dayDefCnt;
        break;
      }
      
      // optional int32 dayDefCnt = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_dayDefCnt:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &daydefcnt_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_leftStakeCnt;
        break;
      }
      
      // optional int32 leftStakeCnt = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_leftStakeCnt:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &leftstakecnt_));
        _set_bit(2);
        if (input->ExpectTag(32)) goto parse_showItemLst;
        break;
      }
      
      // repeated int32 showItemLst = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_showItemLst:
        ::google::protobuf::int32 value;
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &value));
        add_showitemlst(value);
        if (input->ExpectTag(32)) goto parse_showItemLst;
        if (input->ExpectTag(40)) goto parse_showItemCnt;
        break;
      }
      
      // repeated int32 showItemCnt = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_showItemCnt:
        ::google::protobuf::int32 value;
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &value));
        add_showitemcnt(value);
        if (input->ExpectTag(40)) goto parse_showItemCnt;
        if (input->ExpectTag(48)) goto parse_stakeItemLst;
        break;
      }
      
      // repeated int32 stakeItemLst = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_stakeItemLst:
        ::google::protobuf::int32 value;
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &value));
        add_stakeitemlst(value);
        if (input->ExpectTag(48)) goto parse_stakeItemLst;
        if (input->ExpectTag(56)) goto parse_stakeItemCnt;
        break;
      }
      
      // repeated int32 stakeItemCnt = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_stakeItemCnt:
        ::google::protobuf::int32 value;
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &value));
        add_stakeitemcnt(value);
        if (input->ExpectTag(56)) goto parse_stakeItemCnt;
        if (input->ExpectTag(64)) goto parse_lastNPCID;
        break;
      }
      
      // optional int32 lastNPCID = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_lastNPCID:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &lastnpcid_));
        _set_bit(7);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DB_BaseDefNPC::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    DB_BaseDefNPC::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional int32 bestScore = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->bestscore(), output);
  }
  
  // optional int32 dayDefCnt = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->daydefcnt(), output);
  }
  
  // optional int32 leftStakeCnt = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->leftstakecnt(), output);
  }
  
  // repeated int32 showItemLst = 4;
  for (int i = 0; i < this->showitemlst_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      4, this->showitemlst(i), output);
  }
  
  // repeated int32 showItemCnt = 5;
  for (int i = 0; i < this->showitemcnt_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      5, this->showitemcnt(i), output);
  }
  
  // repeated int32 stakeItemLst = 6;
  for (int i = 0; i < this->stakeitemlst_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      6, this->stakeitemlst(i), output);
  }
  
  // repeated int32 stakeItemCnt = 7;
  for (int i = 0; i < this->stakeitemcnt_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      7, this->stakeitemcnt(i), output);
  }
  
  // optional int32 lastNPCID = 8;
  if (_has_bit(7)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->lastnpcid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DB_BaseDefNPC::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 bestScore = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->bestscore(), target);
  }
  
  // optional int32 dayDefCnt = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->daydefcnt(), target);
  }
  
  // optional int32 leftStakeCnt = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->leftstakecnt(), target);
  }
  
  // repeated int32 showItemLst = 4;
  for (int i = 0; i < this->showitemlst_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(4, this->showitemlst(i), target);
  }
  
  // repeated int32 showItemCnt = 5;
  for (int i = 0; i < this->showitemcnt_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(5, this->showitemcnt(i), target);
  }
  
  // repeated int32 stakeItemLst = 6;
  for (int i = 0; i < this->stakeitemlst_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(6, this->stakeitemlst(i), target);
  }
  
  // repeated int32 stakeItemCnt = 7;
  for (int i = 0; i < this->stakeitemcnt_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(7, this->stakeitemcnt(i), target);
  }
  
  // optional int32 lastNPCID = 8;
  if (_has_bit(7)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->lastnpcid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DB_BaseDefNPC::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 bestScore = 1;
    if (has_bestscore()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bestscore());
    }
    
    // optional int32 dayDefCnt = 2;
    if (has_daydefcnt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->daydefcnt());
    }
    
    // optional int32 leftStakeCnt = 3;
    if (has_leftstakecnt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->leftstakecnt());
    }
    
    // optional int32 lastNPCID = 8;
    if (has_lastnpcid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->lastnpcid());
    }
    
  }
  // repeated int32 showItemLst = 4;
  {
    int data_size = 0;
    for (int i = 0; i < this->showitemlst_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->showitemlst(i));
    }
    total_size += 1 * this->showitemlst_size() + data_size;
  }
  
  // repeated int32 showItemCnt = 5;
  {
    int data_size = 0;
    for (int i = 0; i < this->showitemcnt_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->showitemcnt(i));
    }
    total_size += 1 * this->showitemcnt_size() + data_size;
  }
  
  // repeated int32 stakeItemLst = 6;
  {
    int data_size = 0;
    for (int i = 0; i < this->stakeitemlst_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->stakeitemlst(i));
    }
    total_size += 1 * this->stakeitemlst_size() + data_size;
  }
  
  // repeated int32 stakeItemCnt = 7;
  {
    int data_size = 0;
    for (int i = 0; i < this->stakeitemcnt_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->stakeitemcnt(i));
    }
    total_size += 1 * this->stakeitemcnt_size() + data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void DB_BaseDefNPC::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DB_BaseDefNPC* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DB_BaseDefNPC*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DB_BaseDefNPC::MergeFrom(const DB_BaseDefNPC& from) {
  GOOGLE_CHECK_NE(&from, this);
  showitemlst_.MergeFrom(from.showitemlst_);
  showitemcnt_.MergeFrom(from.showitemcnt_);
  stakeitemlst_.MergeFrom(from.stakeitemlst_);
  stakeitemcnt_.MergeFrom(from.stakeitemcnt_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_bestscore(from.bestscore());
    }
    if (from._has_bit(1)) {
      set_daydefcnt(from.daydefcnt());
    }
    if (from._has_bit(2)) {
      set_leftstakecnt(from.leftstakecnt());
    }
    if (from._has_bit(7)) {
      set_lastnpcid(from.lastnpcid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DB_BaseDefNPC::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DB_BaseDefNPC::CopyFrom(const DB_BaseDefNPC& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DB_BaseDefNPC::IsInitialized() const {
  
  return true;
}

void DB_BaseDefNPC::Swap(DB_BaseDefNPC* other) {
  if (other != this) {
    std::swap(bestscore_, other->bestscore_);
    std::swap(daydefcnt_, other->daydefcnt_);
    std::swap(leftstakecnt_, other->leftstakecnt_);
    showitemlst_.Swap(&other->showitemlst_);
    showitemcnt_.Swap(&other->showitemcnt_);
    stakeitemlst_.Swap(&other->stakeitemlst_);
    stakeitemcnt_.Swap(&other->stakeitemcnt_);
    std::swap(lastnpcid_, other->lastnpcid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DB_BaseDefNPC::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DB_BaseDefNPC_descriptor_;
  metadata.reflection = DB_BaseDefNPC_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DB_AdmiralSkill::kIdFieldNumber;
const int DB_AdmiralSkill::kSkillIDFieldNumber;
const int DB_AdmiralSkill::kInitSkillFieldNumber;
const int DB_AdmiralSkill::kLevelFieldNumber;
const int DB_AdmiralSkill::kExpFieldNumber;
#endif  // !_MSC_VER

DB_AdmiralSkill::DB_AdmiralSkill() {
  SharedCtor();
}

void DB_AdmiralSkill::InitAsDefaultInstance() {
}

DB_AdmiralSkill::DB_AdmiralSkill(const DB_AdmiralSkill& from) {
  SharedCtor();
  MergeFrom(from);
}

void DB_AdmiralSkill::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  skillid_ = 0;
  initskill_ = false;
  level_ = 1;
  exp_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DB_AdmiralSkill::~DB_AdmiralSkill() {
  SharedDtor();
}

void DB_AdmiralSkill::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* DB_AdmiralSkill::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DB_AdmiralSkill_descriptor_;
}

const DB_AdmiralSkill& DB_AdmiralSkill::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dbinterface_5fsub_2eproto();  return *default_instance_;
}

DB_AdmiralSkill* DB_AdmiralSkill::default_instance_ = NULL;

DB_AdmiralSkill* DB_AdmiralSkill::New() const {
  return new DB_AdmiralSkill;
}

void DB_AdmiralSkill::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    skillid_ = 0;
    initskill_ = false;
    level_ = 1;
    exp_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DB_AdmiralSkill::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1 [default = 0];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &id_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_skillID;
        break;
      }
      
      // optional int32 skillID = 2 [default = 0];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_skillID:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &skillid_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_initSkill;
        break;
      }
      
      // optional bool initSkill = 3 [default = false];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_initSkill:
        DO_(::google::protobuf::internal::WireFormatLite::ReadBool(
              input, &initskill_));
        _set_bit(2);
        if (input->ExpectTag(32)) goto parse_level;
        break;
      }
      
      // optional int32 level = 4 [default = 1];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_level:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &level_));
        _set_bit(3);
        if (input->ExpectTag(40)) goto parse_exp;
        break;
      }
      
      // optional int32 exp = 5 [default = 0];
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_exp:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &exp_));
        _set_bit(4);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DB_AdmiralSkill::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    DB_AdmiralSkill::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional int32 id = 1 [default = 0];
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }
  
  // optional int32 skillID = 2 [default = 0];
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->skillid(), output);
  }
  
  // optional bool initSkill = 3 [default = false];
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->initskill(), output);
  }
  
  // optional int32 level = 4 [default = 1];
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->level(), output);
  }
  
  // optional int32 exp = 5 [default = 0];
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->exp(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DB_AdmiralSkill::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 id = 1 [default = 0];
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }
  
  // optional int32 skillID = 2 [default = 0];
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->skillid(), target);
  }
  
  // optional bool initSkill = 3 [default = false];
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->initskill(), target);
  }
  
  // optional int32 level = 4 [default = 1];
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->level(), target);
  }
  
  // optional int32 exp = 5 [default = 0];
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->exp(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DB_AdmiralSkill::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 id = 1 [default = 0];
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }
    
    // optional int32 skillID = 2 [default = 0];
    if (has_skillid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->skillid());
    }
    
    // optional bool initSkill = 3 [default = false];
    if (has_initskill()) {
      total_size += 1 + 1;
    }
    
    // optional int32 level = 4 [default = 1];
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->level());
    }
    
    // optional int32 exp = 5 [default = 0];
    if (has_exp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->exp());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void DB_AdmiralSkill::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DB_AdmiralSkill* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DB_AdmiralSkill*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DB_AdmiralSkill::MergeFrom(const DB_AdmiralSkill& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_id(from.id());
    }
    if (from._has_bit(1)) {
      set_skillid(from.skillid());
    }
    if (from._has_bit(2)) {
      set_initskill(from.initskill());
    }
    if (from._has_bit(3)) {
      set_level(from.level());
    }
    if (from._has_bit(4)) {
      set_exp(from.exp());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DB_AdmiralSkill::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DB_AdmiralSkill::CopyFrom(const DB_AdmiralSkill& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DB_AdmiralSkill::IsInitialized() const {
  
  return true;
}

void DB_AdmiralSkill::Swap(DB_AdmiralSkill* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(skillid_, other->skillid_);
    std::swap(initskill_, other->initskill_);
    std::swap(level_, other->level_);
    std::swap(exp_, other->exp_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DB_AdmiralSkill::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DB_AdmiralSkill_descriptor_;
  metadata.reflection = DB_AdmiralSkill_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DB_AdmiralSkillData::kSkillIDFieldNumber;
const int DB_AdmiralSkillData::kLevelFieldNumber;
const int DB_AdmiralSkillData::kExpFieldNumber;
#endif  // !_MSC_VER

DB_AdmiralSkillData::DB_AdmiralSkillData() {
  SharedCtor();
}

void DB_AdmiralSkillData::InitAsDefaultInstance() {
}

DB_AdmiralSkillData::DB_AdmiralSkillData(const DB_AdmiralSkillData& from) {
  SharedCtor();
  MergeFrom(from);
}

void DB_AdmiralSkillData::SharedCtor() {
  _cached_size_ = 0;
  skillid_ = 0;
  level_ = 1;
  exp_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DB_AdmiralSkillData::~DB_AdmiralSkillData() {
  SharedDtor();
}

void DB_AdmiralSkillData::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* DB_AdmiralSkillData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DB_AdmiralSkillData_descriptor_;
}

const DB_AdmiralSkillData& DB_AdmiralSkillData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dbinterface_5fsub_2eproto();  return *default_instance_;
}

DB_AdmiralSkillData* DB_AdmiralSkillData::default_instance_ = NULL;

DB_AdmiralSkillData* DB_AdmiralSkillData::New() const {
  return new DB_AdmiralSkillData;
}

void DB_AdmiralSkillData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    skillid_ = 0;
    level_ = 1;
    exp_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DB_AdmiralSkillData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 skillID = 1 [default = 0];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &skillid_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_level;
        break;
      }
      
      // optional int32 level = 2 [default = 1];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_level:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &level_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_exp;
        break;
      }
      
      // optional int32 exp = 3 [default = 0];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_exp:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &exp_));
        _set_bit(2);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DB_AdmiralSkillData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    DB_AdmiralSkillData::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional int32 skillID = 1 [default = 0];
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->skillid(), output);
  }
  
  // optional int32 level = 2 [default = 1];
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->level(), output);
  }
  
  // optional int32 exp = 3 [default = 0];
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->exp(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DB_AdmiralSkillData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 skillID = 1 [default = 0];
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->skillid(), target);
  }
  
  // optional int32 level = 2 [default = 1];
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->level(), target);
  }
  
  // optional int32 exp = 3 [default = 0];
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->exp(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DB_AdmiralSkillData::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 skillID = 1 [default = 0];
    if (has_skillid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->skillid());
    }
    
    // optional int32 level = 2 [default = 1];
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->level());
    }
    
    // optional int32 exp = 3 [default = 0];
    if (has_exp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->exp());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void DB_AdmiralSkillData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DB_AdmiralSkillData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DB_AdmiralSkillData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DB_AdmiralSkillData::MergeFrom(const DB_AdmiralSkillData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_skillid(from.skillid());
    }
    if (from._has_bit(1)) {
      set_level(from.level());
    }
    if (from._has_bit(2)) {
      set_exp(from.exp());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DB_AdmiralSkillData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DB_AdmiralSkillData::CopyFrom(const DB_AdmiralSkillData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DB_AdmiralSkillData::IsInitialized() const {
  
  return true;
}

void DB_AdmiralSkillData::Swap(DB_AdmiralSkillData* other) {
  if (other != this) {
    std::swap(skillid_, other->skillid_);
    std::swap(level_, other->level_);
    std::swap(exp_, other->exp_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DB_AdmiralSkillData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DB_AdmiralSkillData_descriptor_;
  metadata.reflection = DB_AdmiralSkillData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DB_AdmiralTrainLV::kLevelFieldNumber;
const int DB_AdmiralTrainLV::kCntFieldNumber;
#endif  // !_MSC_VER

DB_AdmiralTrainLV::DB_AdmiralTrainLV() {
  SharedCtor();
}

void DB_AdmiralTrainLV::InitAsDefaultInstance() {
}

DB_AdmiralTrainLV::DB_AdmiralTrainLV(const DB_AdmiralTrainLV& from) {
  SharedCtor();
  MergeFrom(from);
}

void DB_AdmiralTrainLV::SharedCtor() {
  _cached_size_ = 0;
  level_ = 0;
  cnt_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DB_AdmiralTrainLV::~DB_AdmiralTrainLV() {
  SharedDtor();
}

void DB_AdmiralTrainLV::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* DB_AdmiralTrainLV::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DB_AdmiralTrainLV_descriptor_;
}

const DB_AdmiralTrainLV& DB_AdmiralTrainLV::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dbinterface_5fsub_2eproto();  return *default_instance_;
}

DB_AdmiralTrainLV* DB_AdmiralTrainLV::default_instance_ = NULL;

DB_AdmiralTrainLV* DB_AdmiralTrainLV::New() const {
  return new DB_AdmiralTrainLV;
}

void DB_AdmiralTrainLV::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    level_ = 0;
    cnt_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DB_AdmiralTrainLV::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 level = 1 [default = 0];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &level_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_cnt;
        break;
      }
      
      // optional int32 cnt = 2 [default = 0];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_cnt:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &cnt_));
        _set_bit(1);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DB_AdmiralTrainLV::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    DB_AdmiralTrainLV::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional int32 level = 1 [default = 0];
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->level(), output);
  }
  
  // optional int32 cnt = 2 [default = 0];
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->cnt(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DB_AdmiralTrainLV::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 level = 1 [default = 0];
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->level(), target);
  }
  
  // optional int32 cnt = 2 [default = 0];
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->cnt(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DB_AdmiralTrainLV::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 level = 1 [default = 0];
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->level());
    }
    
    // optional int32 cnt = 2 [default = 0];
    if (has_cnt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cnt());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void DB_AdmiralTrainLV::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DB_AdmiralTrainLV* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DB_AdmiralTrainLV*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DB_AdmiralTrainLV::MergeFrom(const DB_AdmiralTrainLV& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_level(from.level());
    }
    if (from._has_bit(1)) {
      set_cnt(from.cnt());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DB_AdmiralTrainLV::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DB_AdmiralTrainLV::CopyFrom(const DB_AdmiralTrainLV& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DB_AdmiralTrainLV::IsInitialized() const {
  
  return true;
}

void DB_AdmiralTrainLV::Swap(DB_AdmiralTrainLV* other) {
  if (other != this) {
    std::swap(level_, other->level_);
    std::swap(cnt_, other->cnt_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DB_AdmiralTrainLV::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DB_AdmiralTrainLV_descriptor_;
  metadata.reflection = DB_AdmiralTrainLV_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DB_AdmiralLetter::kLetterIDFieldNumber;
const int DB_AdmiralLetter::kCountFieldNumber;
#endif  // !_MSC_VER

DB_AdmiralLetter::DB_AdmiralLetter() {
  SharedCtor();
}

void DB_AdmiralLetter::InitAsDefaultInstance() {
}

DB_AdmiralLetter::DB_AdmiralLetter(const DB_AdmiralLetter& from) {
  SharedCtor();
  MergeFrom(from);
}

void DB_AdmiralLetter::SharedCtor() {
  _cached_size_ = 0;
  letterid_ = 0;
  count_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DB_AdmiralLetter::~DB_AdmiralLetter() {
  SharedDtor();
}

void DB_AdmiralLetter::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* DB_AdmiralLetter::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DB_AdmiralLetter_descriptor_;
}

const DB_AdmiralLetter& DB_AdmiralLetter::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dbinterface_5fsub_2eproto();  return *default_instance_;
}

DB_AdmiralLetter* DB_AdmiralLetter::default_instance_ = NULL;

DB_AdmiralLetter* DB_AdmiralLetter::New() const {
  return new DB_AdmiralLetter;
}

void DB_AdmiralLetter::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    letterid_ = 0;
    count_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DB_AdmiralLetter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 letterID = 1 [default = 0];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &letterid_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_count;
        break;
      }
      
      // optional int32 count = 2 [default = 0];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_count:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &count_));
        _set_bit(1);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DB_AdmiralLetter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    DB_AdmiralLetter::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional int32 letterID = 1 [default = 0];
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->letterid(), output);
  }
  
  // optional int32 count = 2 [default = 0];
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->count(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DB_AdmiralLetter::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 letterID = 1 [default = 0];
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->letterid(), target);
  }
  
  // optional int32 count = 2 [default = 0];
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->count(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DB_AdmiralLetter::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 letterID = 1 [default = 0];
    if (has_letterid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->letterid());
    }
    
    // optional int32 count = 2 [default = 0];
    if (has_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->count());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void DB_AdmiralLetter::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DB_AdmiralLetter* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DB_AdmiralLetter*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DB_AdmiralLetter::MergeFrom(const DB_AdmiralLetter& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_letterid(from.letterid());
    }
    if (from._has_bit(1)) {
      set_count(from.count());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DB_AdmiralLetter::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DB_AdmiralLetter::CopyFrom(const DB_AdmiralLetter& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DB_AdmiralLetter::IsInitialized() const {
  
  return true;
}

void DB_AdmiralLetter::Swap(DB_AdmiralLetter* other) {
  if (other != this) {
    std::swap(letterid_, other->letterid_);
    std::swap(count_, other->count_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DB_AdmiralLetter::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DB_AdmiralLetter_descriptor_;
  metadata.reflection = DB_AdmiralLetter_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DB_AdmiralEquip::kEquipIDFieldNumber;
#endif  // !_MSC_VER

DB_AdmiralEquip::DB_AdmiralEquip() {
  SharedCtor();
}

void DB_AdmiralEquip::InitAsDefaultInstance() {
}

DB_AdmiralEquip::DB_AdmiralEquip(const DB_AdmiralEquip& from) {
  SharedCtor();
  MergeFrom(from);
}

void DB_AdmiralEquip::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DB_AdmiralEquip::~DB_AdmiralEquip() {
  SharedDtor();
}

void DB_AdmiralEquip::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* DB_AdmiralEquip::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DB_AdmiralEquip_descriptor_;
}

const DB_AdmiralEquip& DB_AdmiralEquip::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dbinterface_5fsub_2eproto();  return *default_instance_;
}

DB_AdmiralEquip* DB_AdmiralEquip::default_instance_ = NULL;

DB_AdmiralEquip* DB_AdmiralEquip::New() const {
  return new DB_AdmiralEquip;
}

void DB_AdmiralEquip::Clear() {
  equipid_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DB_AdmiralEquip::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated int32 equipID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_equipID:
        ::google::protobuf::int32 value;
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &value));
        add_equipid(value);
        if (input->ExpectTag(8)) goto parse_equipID;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DB_AdmiralEquip::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    DB_AdmiralEquip::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // repeated int32 equipID = 1;
  for (int i = 0; i < this->equipid_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      1, this->equipid(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DB_AdmiralEquip::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated int32 equipID = 1;
  for (int i = 0; i < this->equipid_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(1, this->equipid(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DB_AdmiralEquip::ByteSize() const {
  int total_size = 0;
  
  // repeated int32 equipID = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->equipid_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->equipid(i));
    }
    total_size += 1 * this->equipid_size() + data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void DB_AdmiralEquip::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DB_AdmiralEquip* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DB_AdmiralEquip*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DB_AdmiralEquip::MergeFrom(const DB_AdmiralEquip& from) {
  GOOGLE_CHECK_NE(&from, this);
  equipid_.MergeFrom(from.equipid_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DB_AdmiralEquip::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DB_AdmiralEquip::CopyFrom(const DB_AdmiralEquip& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DB_AdmiralEquip::IsInitialized() const {
  
  return true;
}

void DB_AdmiralEquip::Swap(DB_AdmiralEquip* other) {
  if (other != this) {
    equipid_.Swap(&other->equipid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DB_AdmiralEquip::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DB_AdmiralEquip_descriptor_;
  metadata.reflection = DB_AdmiralEquip_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DB_Admiral::kAdmiralIdFieldNumber;
const int DB_Admiral::kLevelFieldNumber;
const int DB_Admiral::kExpFieldNumber;
const int DB_Admiral::kUseTypeFieldNumber;
const int DB_Admiral::kAddAtkFieldNumber;
const int DB_Admiral::kAddHPFieldNumber;
const int DB_Admiral::kAddDefFieldNumber;
const int DB_Admiral::kAddCrtFieldNumber;
const int DB_Admiral::kFinalAtkFieldNumber;
const int DB_Admiral::kFinalHPFieldNumber;
const int DB_Admiral::kFinalDefFieldNumber;
const int DB_Admiral::kFinalCrtFieldNumber;
const int DB_Admiral::kSkillIDFieldNumber;
const int DB_Admiral::kTrainLVFieldNumber;
const int DB_Admiral::kUseSoulCntFieldNumber;
const int DB_Admiral::kScoreFieldNumber;
const int DB_Admiral::kInitSkillFieldNumber;
const int DB_Admiral::kEquipFieldNumber;
const int DB_Admiral::kBuffTimeFieldNumber;
const int DB_Admiral::kMedalhonorListFieldNumber;
#endif  // !_MSC_VER

DB_Admiral::DB_Admiral() {
  SharedCtor();
}

void DB_Admiral::InitAsDefaultInstance() {
  trainlv_ = const_cast< ::DB_AdmiralTrainLV*>(&::DB_AdmiralTrainLV::default_instance());
  initskill_ = const_cast< ::DB_AdmiralSkillData*>(&::DB_AdmiralSkillData::default_instance());
  equip_ = const_cast< ::DB_AdmiralEquip*>(&::DB_AdmiralEquip::default_instance());
}

DB_Admiral::DB_Admiral(const DB_Admiral& from) {
  SharedCtor();
  MergeFrom(from);
}

void DB_Admiral::SharedCtor() {
  _cached_size_ = 0;
  admiralid_ = 0;
  level_ = 0;
  exp_ = 0;
  usetype_ = 0;
  addatk_ = 0;
  addhp_ = 0;
  adddef_ = 0;
  addcrt_ = 0;
  finalatk_ = 0;
  finalhp_ = 0;
  finaldef_ = 0;
  finalcrt_ = 0;
  trainlv_ = NULL;
  usesoulcnt_ = 0;
  score_ = 0;
  initskill_ = NULL;
  equip_ = NULL;
  bufftime_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DB_Admiral::~DB_Admiral() {
  SharedDtor();
}

void DB_Admiral::SharedDtor() {
  if (this != default_instance_) {
    delete trainlv_;
    delete initskill_;
    delete equip_;
  }
}

const ::google::protobuf::Descriptor* DB_Admiral::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DB_Admiral_descriptor_;
}

const DB_Admiral& DB_Admiral::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dbinterface_5fsub_2eproto();  return *default_instance_;
}

DB_Admiral* DB_Admiral::default_instance_ = NULL;

DB_Admiral* DB_Admiral::New() const {
  return new DB_Admiral;
}

void DB_Admiral::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    admiralid_ = 0;
    level_ = 0;
    exp_ = 0;
    usetype_ = 0;
    addatk_ = 0;
    addhp_ = 0;
    adddef_ = 0;
    addcrt_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    finalatk_ = 0;
    finalhp_ = 0;
    finaldef_ = 0;
    finalcrt_ = 0;
    if (_has_bit(13)) {
      if (trainlv_ != NULL) trainlv_->::DB_AdmiralTrainLV::Clear();
    }
    usesoulcnt_ = 0;
    score_ = 0;
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (_has_bit(16)) {
      if (initskill_ != NULL) initskill_->::DB_AdmiralSkillData::Clear();
    }
    if (_has_bit(17)) {
      if (equip_ != NULL) equip_->::DB_AdmiralEquip::Clear();
    }
    bufftime_ = 0;
  }
  skillid_.Clear();
  medalhonorlist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DB_Admiral::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 admiralId = 1 [default = 0];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &admiralid_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_level;
        break;
      }
      
      // optional int32 level = 2 [default = 0];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_level:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &level_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_exp;
        break;
      }
      
      // optional int32 exp = 3 [default = 0];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_exp:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &exp_));
        _set_bit(2);
        if (input->ExpectTag(32)) goto parse_useType;
        break;
      }
      
      // optional int32 useType = 4 [default = 0];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_useType:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &usetype_));
        _set_bit(3);
        if (input->ExpectTag(40)) goto parse_addAtk;
        break;
      }
      
      // optional int32 addAtk = 5 [default = 0];
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_addAtk:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &addatk_));
        _set_bit(4);
        if (input->ExpectTag(48)) goto parse_addHP;
        break;
      }
      
      // optional int32 addHP = 6 [default = 0];
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_addHP:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &addhp_));
        _set_bit(5);
        if (input->ExpectTag(56)) goto parse_addDef;
        break;
      }
      
      // optional int32 addDef = 7 [default = 0];
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_addDef:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &adddef_));
        _set_bit(6);
        if (input->ExpectTag(64)) goto parse_addCrt;
        break;
      }
      
      // optional int32 addCrt = 8 [default = 0];
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_addCrt:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &addcrt_));
        _set_bit(7);
        if (input->ExpectTag(72)) goto parse_finalAtk;
        break;
      }
      
      // optional int32 finalAtk = 9 [default = 0];
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_finalAtk:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &finalatk_));
        _set_bit(8);
        if (input->ExpectTag(80)) goto parse_finalHP;
        break;
      }
      
      // optional int32 finalHP = 10 [default = 0];
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_finalHP:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &finalhp_));
        _set_bit(9);
        if (input->ExpectTag(88)) goto parse_finalDef;
        break;
      }
      
      // optional int32 finalDef = 11 [default = 0];
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_finalDef:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &finaldef_));
        _set_bit(10);
        if (input->ExpectTag(96)) goto parse_finalCrt;
        break;
      }
      
      // optional int32 finalCrt = 12 [default = 0];
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_finalCrt:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &finalcrt_));
        _set_bit(11);
        if (input->ExpectTag(104)) goto parse_skillID;
        break;
      }
      
      // repeated int32 skillID = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_skillID:
        ::google::protobuf::int32 value;
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &value));
        add_skillid(value);
        if (input->ExpectTag(104)) goto parse_skillID;
        if (input->ExpectTag(122)) goto parse_trainLV;
        break;
      }
      
      // optional .DB_AdmiralTrainLV trainLV = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_trainLV:
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
             input, mutable_trainlv()));
        if (input->ExpectTag(128)) goto parse_useSoulCnt;
        break;
      }
      
      // optional int32 useSoulCnt = 16 [default = 0];
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_useSoulCnt:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &usesoulcnt_));
        _set_bit(14);
        if (input->ExpectTag(136)) goto parse_score;
        break;
      }
      
      // optional int32 score = 17 [default = 0];
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_score:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &score_));
        _set_bit(15);
        if (input->ExpectTag(146)) goto parse_initSkill;
        break;
      }
      
      // optional .DB_AdmiralSkillData initSkill = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_initSkill:
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
             input, mutable_initskill()));
        if (input->ExpectTag(154)) goto parse_equip;
        break;
      }
      
      // optional .DB_AdmiralEquip equip = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_equip:
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
             input, mutable_equip()));
        if (input->ExpectTag(160)) goto parse_buffTime;
        break;
      }
      
      // optional int32 buffTime = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_buffTime:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &bufftime_));
        _set_bit(18);
        if (input->ExpectTag(168)) goto parse_medalhonorList;
        break;
      }
      
      // repeated int32 medalhonorList = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_medalhonorList:
        ::google::protobuf::int32 value;
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &value));
        add_medalhonorlist(value);
        if (input->ExpectTag(168)) goto parse_medalhonorList;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DB_Admiral::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    DB_Admiral::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional int32 admiralId = 1 [default = 0];
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->admiralid(), output);
  }
  
  // optional int32 level = 2 [default = 0];
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->level(), output);
  }
  
  // optional int32 exp = 3 [default = 0];
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->exp(), output);
  }
  
  // optional int32 useType = 4 [default = 0];
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->usetype(), output);
  }
  
  // optional int32 addAtk = 5 [default = 0];
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->addatk(), output);
  }
  
  // optional int32 addHP = 6 [default = 0];
  if (_has_bit(5)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->addhp(), output);
  }
  
  // optional int32 addDef = 7 [default = 0];
  if (_has_bit(6)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->adddef(), output);
  }
  
  // optional int32 addCrt = 8 [default = 0];
  if (_has_bit(7)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->addcrt(), output);
  }
  
  // optional int32 finalAtk = 9 [default = 0];
  if (_has_bit(8)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->finalatk(), output);
  }
  
  // optional int32 finalHP = 10 [default = 0];
  if (_has_bit(9)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->finalhp(), output);
  }
  
  // optional int32 finalDef = 11 [default = 0];
  if (_has_bit(10)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->finaldef(), output);
  }
  
  // optional int32 finalCrt = 12 [default = 0];
  if (_has_bit(11)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->finalcrt(), output);
  }
  
  // repeated int32 skillID = 13;
  for (int i = 0; i < this->skillid_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      13, this->skillid(i), output);
  }
  
  // optional .DB_AdmiralTrainLV trainLV = 15;
  if (_has_bit(13)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      15, this->trainlv(), output);
  }
  
  // optional int32 useSoulCnt = 16 [default = 0];
  if (_has_bit(14)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(16, this->usesoulcnt(), output);
  }
  
  // optional int32 score = 17 [default = 0];
  if (_has_bit(15)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(17, this->score(), output);
  }
  
  // optional .DB_AdmiralSkillData initSkill = 18;
  if (_has_bit(16)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      18, this->initskill(), output);
  }
  
  // optional .DB_AdmiralEquip equip = 19;
  if (_has_bit(17)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      19, this->equip(), output);
  }
  
  // optional int32 buffTime = 20;
  if (_has_bit(18)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(20, this->bufftime(), output);
  }
  
  // repeated int32 medalhonorList = 21;
  for (int i = 0; i < this->medalhonorlist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      21, this->medalhonorlist(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DB_Admiral::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 admiralId = 1 [default = 0];
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->admiralid(), target);
  }
  
  // optional int32 level = 2 [default = 0];
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->level(), target);
  }
  
  // optional int32 exp = 3 [default = 0];
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->exp(), target);
  }
  
  // optional int32 useType = 4 [default = 0];
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->usetype(), target);
  }
  
  // optional int32 addAtk = 5 [default = 0];
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->addatk(), target);
  }
  
  // optional int32 addHP = 6 [default = 0];
  if (_has_bit(5)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->addhp(), target);
  }
  
  // optional int32 addDef = 7 [default = 0];
  if (_has_bit(6)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->adddef(), target);
  }
  
  // optional int32 addCrt = 8 [default = 0];
  if (_has_bit(7)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->addcrt(), target);
  }
  
  // optional int32 finalAtk = 9 [default = 0];
  if (_has_bit(8)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->finalatk(), target);
  }
  
  // optional int32 finalHP = 10 [default = 0];
  if (_has_bit(9)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->finalhp(), target);
  }
  
  // optional int32 finalDef = 11 [default = 0];
  if (_has_bit(10)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->finaldef(), target);
  }
  
  // optional int32 finalCrt = 12 [default = 0];
  if (_has_bit(11)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->finalcrt(), target);
  }
  
  // repeated int32 skillID = 13;
  for (int i = 0; i < this->skillid_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(13, this->skillid(i), target);
  }
  
  // optional .DB_AdmiralTrainLV trainLV = 15;
  if (_has_bit(13)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        15, this->trainlv(), target);
  }
  
  // optional int32 useSoulCnt = 16 [default = 0];
  if (_has_bit(14)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(16, this->usesoulcnt(), target);
  }
  
  // optional int32 score = 17 [default = 0];
  if (_has_bit(15)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(17, this->score(), target);
  }
  
  // optional .DB_AdmiralSkillData initSkill = 18;
  if (_has_bit(16)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        18, this->initskill(), target);
  }
  
  // optional .DB_AdmiralEquip equip = 19;
  if (_has_bit(17)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        19, this->equip(), target);
  }
  
  // optional int32 buffTime = 20;
  if (_has_bit(18)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(20, this->bufftime(), target);
  }
  
  // repeated int32 medalhonorList = 21;
  for (int i = 0; i < this->medalhonorlist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(21, this->medalhonorlist(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DB_Admiral::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 admiralId = 1 [default = 0];
    if (has_admiralid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->admiralid());
    }
    
    // optional int32 level = 2 [default = 0];
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->level());
    }
    
    // optional int32 exp = 3 [default = 0];
    if (has_exp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->exp());
    }
    
    // optional int32 useType = 4 [default = 0];
    if (has_usetype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->usetype());
    }
    
    // optional int32 addAtk = 5 [default = 0];
    if (has_addatk()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->addatk());
    }
    
    // optional int32 addHP = 6 [default = 0];
    if (has_addhp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->addhp());
    }
    
    // optional int32 addDef = 7 [default = 0];
    if (has_adddef()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->adddef());
    }
    
    // optional int32 addCrt = 8 [default = 0];
    if (has_addcrt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->addcrt());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 finalAtk = 9 [default = 0];
    if (has_finalatk()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->finalatk());
    }
    
    // optional int32 finalHP = 10 [default = 0];
    if (has_finalhp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->finalhp());
    }
    
    // optional int32 finalDef = 11 [default = 0];
    if (has_finaldef()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->finaldef());
    }
    
    // optional int32 finalCrt = 12 [default = 0];
    if (has_finalcrt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->finalcrt());
    }
    
    // optional .DB_AdmiralTrainLV trainLV = 15;
    if (has_trainlv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->trainlv());
    }
    
    // optional int32 useSoulCnt = 16 [default = 0];
    if (has_usesoulcnt()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->usesoulcnt());
    }
    
    // optional int32 score = 17 [default = 0];
    if (has_score()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->score());
    }
    
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional .DB_AdmiralSkillData initSkill = 18;
    if (has_initskill()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->initskill());
    }
    
    // optional .DB_AdmiralEquip equip = 19;
    if (has_equip()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->equip());
    }
    
    // optional int32 buffTime = 20;
    if (has_bufftime()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bufftime());
    }
    
  }
  // repeated int32 skillID = 13;
  {
    int data_size = 0;
    for (int i = 0; i < this->skillid_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->skillid(i));
    }
    total_size += 1 * this->skillid_size() + data_size;
  }
  
  // repeated int32 medalhonorList = 21;
  {
    int data_size = 0;
    for (int i = 0; i < this->medalhonorlist_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->medalhonorlist(i));
    }
    total_size += 2 * this->medalhonorlist_size() + data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void DB_Admiral::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DB_Admiral* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DB_Admiral*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DB_Admiral::MergeFrom(const DB_Admiral& from) {
  GOOGLE_CHECK_NE(&from, this);
  skillid_.MergeFrom(from.skillid_);
  medalhonorlist_.MergeFrom(from.medalhonorlist_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_admiralid(from.admiralid());
    }
    if (from._has_bit(1)) {
      set_level(from.level());
    }
    if (from._has_bit(2)) {
      set_exp(from.exp());
    }
    if (from._has_bit(3)) {
      set_usetype(from.usetype());
    }
    if (from._has_bit(4)) {
      set_addatk(from.addatk());
    }
    if (from._has_bit(5)) {
      set_addhp(from.addhp());
    }
    if (from._has_bit(6)) {
      set_adddef(from.adddef());
    }
    if (from._has_bit(7)) {
      set_addcrt(from.addcrt());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from._has_bit(8)) {
      set_finalatk(from.finalatk());
    }
    if (from._has_bit(9)) {
      set_finalhp(from.finalhp());
    }
    if (from._has_bit(10)) {
      set_finaldef(from.finaldef());
    }
    if (from._has_bit(11)) {
      set_finalcrt(from.finalcrt());
    }
    if (from._has_bit(13)) {
      mutable_trainlv()->::DB_AdmiralTrainLV::MergeFrom(from.trainlv());
    }
    if (from._has_bit(14)) {
      set_usesoulcnt(from.usesoulcnt());
    }
    if (from._has_bit(15)) {
      set_score(from.score());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from._has_bit(16)) {
      mutable_initskill()->::DB_AdmiralSkillData::MergeFrom(from.initskill());
    }
    if (from._has_bit(17)) {
      mutable_equip()->::DB_AdmiralEquip::MergeFrom(from.equip());
    }
    if (from._has_bit(18)) {
      set_bufftime(from.bufftime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DB_Admiral::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DB_Admiral::CopyFrom(const DB_Admiral& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DB_Admiral::IsInitialized() const {
  
  return true;
}

void DB_Admiral::Swap(DB_Admiral* other) {
  if (other != this) {
    std::swap(admiralid_, other->admiralid_);
    std::swap(level_, other->level_);
    std::swap(exp_, other->exp_);
    std::swap(usetype_, other->usetype_);
    std::swap(addatk_, other->addatk_);
    std::swap(addhp_, other->addhp_);
    std::swap(adddef_, other->adddef_);
    std::swap(addcrt_, other->addcrt_);
    std::swap(finalatk_, other->finalatk_);
    std::swap(finalhp_, other->finalhp_);
    std::swap(finaldef_, other->finaldef_);
    std::swap(finalcrt_, other->finalcrt_);
    skillid_.Swap(&other->skillid_);
    std::swap(trainlv_, other->trainlv_);
    std::swap(usesoulcnt_, other->usesoulcnt_);
    std::swap(score_, other->score_);
    std::swap(initskill_, other->initskill_);
    std::swap(equip_, other->equip_);
    std::swap(bufftime_, other->bufftime_);
    medalhonorlist_.Swap(&other->medalhonorlist_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DB_Admiral::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DB_Admiral_descriptor_;
  metadata.reflection = DB_Admiral_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DB_AdmiralInfo::kAdmiralFieldNumber;
const int DB_AdmiralInfo::kSoulFieldNumber;
const int DB_AdmiralInfo::kHasSendAdmiralFieldNumber;
const int DB_AdmiralInfo::kSendIDFieldNumber;
const int DB_AdmiralInfo::kHasCreditVisitFieldNumber;
const int DB_AdmiralInfo::kFreeVisitCntFieldNumber;
const int DB_AdmiralInfo::kFinishVisitTimeFieldNumber;
const int DB_AdmiralInfo::kSkillFieldNumber;
const int DB_AdmiralInfo::kCollectLstFieldNumber;
const int DB_AdmiralInfo::kShenjiangExchangeCntFieldNumber;
const int DB_AdmiralInfo::kAdmiralletterFieldNumber;
#endif  // !_MSC_VER

DB_AdmiralInfo::DB_AdmiralInfo() {
  SharedCtor();
}

void DB_AdmiralInfo::InitAsDefaultInstance() {
}

DB_AdmiralInfo::DB_AdmiralInfo(const DB_AdmiralInfo& from) {
  SharedCtor();
  MergeFrom(from);
}

void DB_AdmiralInfo::SharedCtor() {
  _cached_size_ = 0;
  soul_ = 0;
  hassendadmiral_ = false;
  hascreditvisit_ = false;
  shenjiangexchangecnt_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DB_AdmiralInfo::~DB_AdmiralInfo() {
  SharedDtor();
}

void DB_AdmiralInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* DB_AdmiralInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DB_AdmiralInfo_descriptor_;
}

const DB_AdmiralInfo& DB_AdmiralInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dbinterface_5fsub_2eproto();  return *default_instance_;
}

DB_AdmiralInfo* DB_AdmiralInfo::default_instance_ = NULL;

DB_AdmiralInfo* DB_AdmiralInfo::New() const {
  return new DB_AdmiralInfo;
}

void DB_AdmiralInfo::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    soul_ = 0;
    hassendadmiral_ = false;
    hascreditvisit_ = false;
  }
  if (_has_bits_[9 / 32] & (0xffu << (9 % 32))) {
    shenjiangexchangecnt_ = 0;
  }
  admiral_.Clear();
  sendid_.Clear();
  freevisitcnt_.Clear();
  finishvisittime_.Clear();
  skill_.Clear();
  collectlst_.Clear();
  admiralletter_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DB_AdmiralInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .DB_Admiral admiral = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_admiral:
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, add_admiral()));
        if (input->ExpectTag(10)) goto parse_admiral;
        if (input->ExpectTag(16)) goto parse_soul;
        break;
      }
      
      // optional int32 soul = 2 [default = 0];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_soul:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &soul_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_hasSendAdmiral;
        break;
      }
      
      // optional bool hasSendAdmiral = 3 [default = false];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_hasSendAdmiral:
        DO_(::google::protobuf::internal::WireFormatLite::ReadBool(
              input, &hassendadmiral_));
        _set_bit(2);
        if (input->ExpectTag(32)) goto parse_sendID;
        break;
      }
      
      // repeated int32 sendID = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_sendID:
        ::google::protobuf::int32 value;
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &value));
        add_sendid(value);
        if (input->ExpectTag(32)) goto parse_sendID;
        if (input->ExpectTag(40)) goto parse_hasCreditVisit;
        break;
      }
      
      // optional bool hasCreditVisit = 5 [default = false];
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_hasCreditVisit:
        DO_(::google::protobuf::internal::WireFormatLite::ReadBool(
              input, &hascreditvisit_));
        _set_bit(4);
        if (input->ExpectTag(48)) goto parse_freeVisitCnt;
        break;
      }
      
      // repeated int32 freeVisitCnt = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_freeVisitCnt:
        ::google::protobuf::int32 value;
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &value));
        add_freevisitcnt(value);
        if (input->ExpectTag(48)) goto parse_freeVisitCnt;
        if (input->ExpectTag(56)) goto parse_finishVisitTime;
        break;
      }
      
      // repeated int32 finishVisitTime = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_finishVisitTime:
        ::google::protobuf::int32 value;
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &value));
        add_finishvisittime(value);
        if (input->ExpectTag(56)) goto parse_finishVisitTime;
        if (input->ExpectTag(66)) goto parse_skill;
        break;
      }
      
      // repeated .DB_AdmiralSkill skill = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_skill:
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, add_skill()));
        if (input->ExpectTag(66)) goto parse_skill;
        if (input->ExpectTag(72)) goto parse_collectLst;
        break;
      }
      
      // repeated int32 collectLst = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_collectLst:
        ::google::protobuf::int32 value;
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &value));
        add_collectlst(value);
        if (input->ExpectTag(72)) goto parse_collectLst;
        if (input->ExpectTag(80)) goto parse_shenjiangExchangeCnt;
        break;
      }
      
      // optional int32 shenjiangExchangeCnt = 10 [default = 0];
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_shenjiangExchangeCnt:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &shenjiangexchangecnt_));
        _set_bit(9);
        if (input->ExpectTag(90)) goto parse_admiralletter;
        break;
      }
      
      // repeated .DB_AdmiralLetter admiralletter = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_admiralletter:
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, add_admiralletter()));
        if (input->ExpectTag(90)) goto parse_admiralletter;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DB_AdmiralInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    DB_AdmiralInfo::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // repeated .DB_Admiral admiral = 1;
  for (int i = 0; i < this->admiral_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      1, this->admiral(i), output);
  }
  
  // optional int32 soul = 2 [default = 0];
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->soul(), output);
  }
  
  // optional bool hasSendAdmiral = 3 [default = false];
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->hassendadmiral(), output);
  }
  
  // repeated int32 sendID = 4;
  for (int i = 0; i < this->sendid_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      4, this->sendid(i), output);
  }
  
  // optional bool hasCreditVisit = 5 [default = false];
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->hascreditvisit(), output);
  }
  
  // repeated int32 freeVisitCnt = 6;
  for (int i = 0; i < this->freevisitcnt_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      6, this->freevisitcnt(i), output);
  }
  
  // repeated int32 finishVisitTime = 7;
  for (int i = 0; i < this->finishvisittime_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      7, this->finishvisittime(i), output);
  }
  
  // repeated .DB_AdmiralSkill skill = 8;
  for (int i = 0; i < this->skill_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      8, this->skill(i), output);
  }
  
  // repeated int32 collectLst = 9;
  for (int i = 0; i < this->collectlst_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      9, this->collectlst(i), output);
  }
  
  // optional int32 shenjiangExchangeCnt = 10 [default = 0];
  if (_has_bit(9)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->shenjiangexchangecnt(), output);
  }
  
  // repeated .DB_AdmiralLetter admiralletter = 11;
  for (int i = 0; i < this->admiralletter_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      11, this->admiralletter(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DB_AdmiralInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .DB_Admiral admiral = 1;
  for (int i = 0; i < this->admiral_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->admiral(i), target);
  }
  
  // optional int32 soul = 2 [default = 0];
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->soul(), target);
  }
  
  // optional bool hasSendAdmiral = 3 [default = false];
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->hassendadmiral(), target);
  }
  
  // repeated int32 sendID = 4;
  for (int i = 0; i < this->sendid_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(4, this->sendid(i), target);
  }
  
  // optional bool hasCreditVisit = 5 [default = false];
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->hascreditvisit(), target);
  }
  
  // repeated int32 freeVisitCnt = 6;
  for (int i = 0; i < this->freevisitcnt_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(6, this->freevisitcnt(i), target);
  }
  
  // repeated int32 finishVisitTime = 7;
  for (int i = 0; i < this->finishvisittime_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(7, this->finishvisittime(i), target);
  }
  
  // repeated .DB_AdmiralSkill skill = 8;
  for (int i = 0; i < this->skill_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->skill(i), target);
  }
  
  // repeated int32 collectLst = 9;
  for (int i = 0; i < this->collectlst_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(9, this->collectlst(i), target);
  }
  
  // optional int32 shenjiangExchangeCnt = 10 [default = 0];
  if (_has_bit(9)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->shenjiangexchangecnt(), target);
  }
  
  // repeated .DB_AdmiralLetter admiralletter = 11;
  for (int i = 0; i < this->admiralletter_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        11, this->admiralletter(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DB_AdmiralInfo::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional int32 soul = 2 [default = 0];
    if (has_soul()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->soul());
    }
    
    // optional bool hasSendAdmiral = 3 [default = false];
    if (has_hassendadmiral()) {
      total_size += 1 + 1;
    }
    
    // optional bool hasCreditVisit = 5 [default = false];
    if (has_hascreditvisit()) {
      total_size += 1 + 1;
    }
    
  }
  if (_has_bits_[9 / 32] & (0xffu << (9 % 32))) {
    // optional int32 shenjiangExchangeCnt = 10 [default = 0];
    if (has_shenjiangexchangecnt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->shenjiangexchangecnt());
    }
    
  }
  // repeated .DB_Admiral admiral = 1;
  total_size += 1 * this->admiral_size();
  for (int i = 0; i < this->admiral_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->admiral(i));
  }
  
  // repeated int32 sendID = 4;
  {
    int data_size = 0;
    for (int i = 0; i < this->sendid_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->sendid(i));
    }
    total_size += 1 * this->sendid_size() + data_size;
  }
  
  // repeated int32 freeVisitCnt = 6;
  {
    int data_size = 0;
    for (int i = 0; i < this->freevisitcnt_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->freevisitcnt(i));
    }
    total_size += 1 * this->freevisitcnt_size() + data_size;
  }
  
  // repeated int32 finishVisitTime = 7;
  {
    int data_size = 0;
    for (int i = 0; i < this->finishvisittime_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->finishvisittime(i));
    }
    total_size += 1 * this->finishvisittime_size() + data_size;
  }
  
  // repeated .DB_AdmiralSkill skill = 8;
  total_size += 1 * this->skill_size();
  for (int i = 0; i < this->skill_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->skill(i));
  }
  
  // repeated int32 collectLst = 9;
  {
    int data_size = 0;
    for (int i = 0; i < this->collectlst_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->collectlst(i));
    }
    total_size += 1 * this->collectlst_size() + data_size;
  }
  
  // repeated .DB_AdmiralLetter admiralletter = 11;
  total_size += 1 * this->admiralletter_size();
  for (int i = 0; i < this->admiralletter_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->admiralletter(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void DB_AdmiralInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DB_AdmiralInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DB_AdmiralInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DB_AdmiralInfo::MergeFrom(const DB_AdmiralInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  admiral_.MergeFrom(from.admiral_);
  sendid_.MergeFrom(from.sendid_);
  freevisitcnt_.MergeFrom(from.freevisitcnt_);
  finishvisittime_.MergeFrom(from.finishvisittime_);
  skill_.MergeFrom(from.skill_);
  collectlst_.MergeFrom(from.collectlst_);
  admiralletter_.MergeFrom(from.admiralletter_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from._has_bit(1)) {
      set_soul(from.soul());
    }
    if (from._has_bit(2)) {
      set_hassendadmiral(from.hassendadmiral());
    }
    if (from._has_bit(4)) {
      set_hascreditvisit(from.hascreditvisit());
    }
  }
  if (from._has_bits_[9 / 32] & (0xffu << (9 % 32))) {
    if (from._has_bit(9)) {
      set_shenjiangexchangecnt(from.shenjiangexchangecnt());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DB_AdmiralInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DB_AdmiralInfo::CopyFrom(const DB_AdmiralInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DB_AdmiralInfo::IsInitialized() const {
  
  return true;
}

void DB_AdmiralInfo::Swap(DB_AdmiralInfo* other) {
  if (other != this) {
    admiral_.Swap(&other->admiral_);
    std::swap(soul_, other->soul_);
    std::swap(hassendadmiral_, other->hassendadmiral_);
    sendid_.Swap(&other->sendid_);
    std::swap(hascreditvisit_, other->hascreditvisit_);
    freevisitcnt_.Swap(&other->freevisitcnt_);
    finishvisittime_.Swap(&other->finishvisittime_);
    skill_.Swap(&other->skill_);
    collectlst_.Swap(&other->collectlst_);
    std::swap(shenjiangexchangecnt_, other->shenjiangexchangecnt_);
    admiralletter_.Swap(&other->admiralletter_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DB_AdmiralInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DB_AdmiralInfo_descriptor_;
  metadata.reflection = DB_AdmiralInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DB_HeroLetter::kLetterIDFieldNumber;
const int DB_HeroLetter::kCountFieldNumber;
#endif  // !_MSC_VER

DB_HeroLetter::DB_HeroLetter() {
  SharedCtor();
}

void DB_HeroLetter::InitAsDefaultInstance() {
}

DB_HeroLetter::DB_HeroLetter(const DB_HeroLetter& from) {
  SharedCtor();
  MergeFrom(from);
}

void DB_HeroLetter::SharedCtor() {
  _cached_size_ = 0;
  letterid_ = 0;
  count_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DB_HeroLetter::~DB_HeroLetter() {
  SharedDtor();
}

void DB_HeroLetter::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* DB_HeroLetter::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DB_HeroLetter_descriptor_;
}

const DB_HeroLetter& DB_HeroLetter::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dbinterface_5fsub_2eproto();  return *default_instance_;
}

DB_HeroLetter* DB_HeroLetter::default_instance_ = NULL;

DB_HeroLetter* DB_HeroLetter::New() const {
  return new DB_HeroLetter;
}

void DB_HeroLetter::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    letterid_ = 0;
    count_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DB_HeroLetter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 letterID = 1 [default = 0];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &letterid_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_count;
        break;
      }
      
      // optional int32 count = 2 [default = 0];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_count:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &count_));
        _set_bit(1);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DB_HeroLetter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    DB_HeroLetter::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional int32 letterID = 1 [default = 0];
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->letterid(), output);
  }
  
  // optional int32 count = 2 [default = 0];
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->count(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DB_HeroLetter::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 letterID = 1 [default = 0];
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->letterid(), target);
  }
  
  // optional int32 count = 2 [default = 0];
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->count(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DB_HeroLetter::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 letterID = 1 [default = 0];
    if (has_letterid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->letterid());
    }
    
    // optional int32 count = 2 [default = 0];
    if (has_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->count());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void DB_HeroLetter::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DB_HeroLetter* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DB_HeroLetter*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DB_HeroLetter::MergeFrom(const DB_HeroLetter& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_letterid(from.letterid());
    }
    if (from._has_bit(1)) {
      set_count(from.count());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DB_HeroLetter::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DB_HeroLetter::CopyFrom(const DB_HeroLetter& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DB_HeroLetter::IsInitialized() const {
  
  return true;
}

void DB_HeroLetter::Swap(DB_HeroLetter* other) {
  if (other != this) {
    std::swap(letterid_, other->letterid_);
    std::swap(count_, other->count_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DB_HeroLetter::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DB_HeroLetter_descriptor_;
  metadata.reflection = DB_HeroLetter_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DB_HeroSkillData::kSkillIDFieldNumber;
const int DB_HeroSkillData::kLevelFieldNumber;
#endif  // !_MSC_VER

DB_HeroSkillData::DB_HeroSkillData() {
  SharedCtor();
}

void DB_HeroSkillData::InitAsDefaultInstance() {
}

DB_HeroSkillData::DB_HeroSkillData(const DB_HeroSkillData& from) {
  SharedCtor();
  MergeFrom(from);
}

void DB_HeroSkillData::SharedCtor() {
  _cached_size_ = 0;
  skillid_ = 0;
  level_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DB_HeroSkillData::~DB_HeroSkillData() {
  SharedDtor();
}

void DB_HeroSkillData::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* DB_HeroSkillData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DB_HeroSkillData_descriptor_;
}

const DB_HeroSkillData& DB_HeroSkillData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dbinterface_5fsub_2eproto();  return *default_instance_;
}

DB_HeroSkillData* DB_HeroSkillData::default_instance_ = NULL;

DB_HeroSkillData* DB_HeroSkillData::New() const {
  return new DB_HeroSkillData;
}

void DB_HeroSkillData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    skillid_ = 0;
    level_ = 1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DB_HeroSkillData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 skillID = 1 [default = 0];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &skillid_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_level;
        break;
      }
      
      // optional int32 level = 2 [default = 1];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_level:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &level_));
        _set_bit(1);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DB_HeroSkillData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    DB_HeroSkillData::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional int32 skillID = 1 [default = 0];
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->skillid(), output);
  }
  
  // optional int32 level = 2 [default = 1];
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->level(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DB_HeroSkillData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 skillID = 1 [default = 0];
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->skillid(), target);
  }
  
  // optional int32 level = 2 [default = 1];
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->level(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DB_HeroSkillData::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 skillID = 1 [default = 0];
    if (has_skillid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->skillid());
    }
    
    // optional int32 level = 2 [default = 1];
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->level());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void DB_HeroSkillData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DB_HeroSkillData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DB_HeroSkillData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DB_HeroSkillData::MergeFrom(const DB_HeroSkillData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_skillid(from.skillid());
    }
    if (from._has_bit(1)) {
      set_level(from.level());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DB_HeroSkillData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DB_HeroSkillData::CopyFrom(const DB_HeroSkillData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DB_HeroSkillData::IsInitialized() const {
  
  return true;
}

void DB_HeroSkillData::Swap(DB_HeroSkillData* other) {
  if (other != this) {
    std::swap(skillid_, other->skillid_);
    std::swap(level_, other->level_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DB_HeroSkillData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DB_HeroSkillData_descriptor_;
  metadata.reflection = DB_HeroSkillData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DB_HeroAtkData::kXFieldNumber;
const int DB_HeroAtkData::kYFieldNumber;
const int DB_HeroAtkData::kAngleFieldNumber;
const int DB_HeroAtkData::kHealthFieldNumber;
const int DB_HeroAtkData::kStanceFieldNumber;
#endif  // !_MSC_VER

DB_HeroAtkData::DB_HeroAtkData() {
  SharedCtor();
}

void DB_HeroAtkData::InitAsDefaultInstance() {
}

DB_HeroAtkData::DB_HeroAtkData(const DB_HeroAtkData& from) {
  SharedCtor();
  MergeFrom(from);
}

void DB_HeroAtkData::SharedCtor() {
  _cached_size_ = 0;
  x_ = 0;
  y_ = 0;
  angle_ = 0;
  health_ = 0;
  stance_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DB_HeroAtkData::~DB_HeroAtkData() {
  SharedDtor();
}

void DB_HeroAtkData::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* DB_HeroAtkData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DB_HeroAtkData_descriptor_;
}

const DB_HeroAtkData& DB_HeroAtkData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dbinterface_5fsub_2eproto();  return *default_instance_;
}

DB_HeroAtkData* DB_HeroAtkData::default_instance_ = NULL;

DB_HeroAtkData* DB_HeroAtkData::New() const {
  return new DB_HeroAtkData;
}

void DB_HeroAtkData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    x_ = 0;
    y_ = 0;
    angle_ = 0;
    health_ = 0;
    stance_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DB_HeroAtkData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 X = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &x_));
        _set_bit(0);
        if (input->ExpectTag(24)) goto parse_Y;
        break;
      }
      
      // optional int32 Y = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Y:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &y_));
        _set_bit(1);
        if (input->ExpectTag(32)) goto parse_angle;
        break;
      }
      
      // optional int32 angle = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_angle:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &angle_));
        _set_bit(2);
        if (input->ExpectTag(40)) goto parse_health;
        break;
      }
      
      // optional int32 health = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_health:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &health_));
        _set_bit(3);
        if (input->ExpectTag(48)) goto parse_stance;
        break;
      }
      
      // optional int32 stance = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_stance:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &stance_));
        _set_bit(4);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DB_HeroAtkData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    DB_HeroAtkData::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional int32 X = 2;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->x(), output);
  }
  
  // optional int32 Y = 3;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->y(), output);
  }
  
  // optional int32 angle = 4;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->angle(), output);
  }
  
  // optional int32 health = 5;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->health(), output);
  }
  
  // optional int32 stance = 6;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->stance(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DB_HeroAtkData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 X = 2;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->x(), target);
  }
  
  // optional int32 Y = 3;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->y(), target);
  }
  
  // optional int32 angle = 4;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->angle(), target);
  }
  
  // optional int32 health = 5;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->health(), target);
  }
  
  // optional int32 stance = 6;
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->stance(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DB_HeroAtkData::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 X = 2;
    if (has_x()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->x());
    }
    
    // optional int32 Y = 3;
    if (has_y()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->y());
    }
    
    // optional int32 angle = 4;
    if (has_angle()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->angle());
    }
    
    // optional int32 health = 5;
    if (has_health()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->health());
    }
    
    // optional int32 stance = 6;
    if (has_stance()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->stance());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void DB_HeroAtkData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DB_HeroAtkData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DB_HeroAtkData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DB_HeroAtkData::MergeFrom(const DB_HeroAtkData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_x(from.x());
    }
    if (from._has_bit(1)) {
      set_y(from.y());
    }
    if (from._has_bit(2)) {
      set_angle(from.angle());
    }
    if (from._has_bit(3)) {
      set_health(from.health());
    }
    if (from._has_bit(4)) {
      set_stance(from.stance());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DB_HeroAtkData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DB_HeroAtkData::CopyFrom(const DB_HeroAtkData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DB_HeroAtkData::IsInitialized() const {
  
  return true;
}

void DB_HeroAtkData::Swap(DB_HeroAtkData* other) {
  if (other != this) {
    std::swap(x_, other->x_);
    std::swap(y_, other->y_);
    std::swap(angle_, other->angle_);
    std::swap(health_, other->health_);
    std::swap(stance_, other->stance_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DB_HeroAtkData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DB_HeroAtkData_descriptor_;
  metadata.reflection = DB_HeroAtkData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DB_Hero::kHeroIdFieldNumber;
const int DB_Hero::kLevelFieldNumber;
const int DB_Hero::kGradeFieldNumber;
const int DB_Hero::kLevelexpFieldNumber;
const int DB_Hero::kGradeexpFieldNumber;
const int DB_Hero::kInitSkillFieldNumber;
const int DB_Hero::kAtkDataFieldNumber;
const int DB_Hero::kRecoverhptmFieldNumber;
#endif  // !_MSC_VER

DB_Hero::DB_Hero() {
  SharedCtor();
}

void DB_Hero::InitAsDefaultInstance() {
  initskill_ = const_cast< ::DB_HeroSkillData*>(&::DB_HeroSkillData::default_instance());
  atkdata_ = const_cast< ::DB_HeroAtkData*>(&::DB_HeroAtkData::default_instance());
}

DB_Hero::DB_Hero(const DB_Hero& from) {
  SharedCtor();
  MergeFrom(from);
}

void DB_Hero::SharedCtor() {
  _cached_size_ = 0;
  heroid_ = 0;
  level_ = 0;
  grade_ = 0;
  levelexp_ = 0;
  gradeexp_ = 0;
  initskill_ = NULL;
  atkdata_ = NULL;
  recoverhptm_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DB_Hero::~DB_Hero() {
  SharedDtor();
}

void DB_Hero::SharedDtor() {
  if (this != default_instance_) {
    delete initskill_;
    delete atkdata_;
  }
}

const ::google::protobuf::Descriptor* DB_Hero::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DB_Hero_descriptor_;
}

const DB_Hero& DB_Hero::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dbinterface_5fsub_2eproto();  return *default_instance_;
}

DB_Hero* DB_Hero::default_instance_ = NULL;

DB_Hero* DB_Hero::New() const {
  return new DB_Hero;
}

void DB_Hero::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    heroid_ = 0;
    level_ = 0;
    grade_ = 0;
    levelexp_ = 0;
    gradeexp_ = 0;
    if (_has_bit(5)) {
      if (initskill_ != NULL) initskill_->::DB_HeroSkillData::Clear();
    }
    if (_has_bit(6)) {
      if (atkdata_ != NULL) atkdata_->::DB_HeroAtkData::Clear();
    }
    recoverhptm_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DB_Hero::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 heroId = 1 [default = 0];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &heroid_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_level;
        break;
      }
      
      // optional int32 level = 2 [default = 0];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_level:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &level_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_grade;
        break;
      }
      
      // optional int32 grade = 3 [default = 0];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_grade:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &grade_));
        _set_bit(2);
        if (input->ExpectTag(32)) goto parse_levelexp;
        break;
      }
      
      // optional int32 levelexp = 4 [default = 0];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_levelexp:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &levelexp_));
        _set_bit(3);
        if (input->ExpectTag(40)) goto parse_gradeexp;
        break;
      }
      
      // optional int32 gradeexp = 5 [default = 0];
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_gradeexp:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &gradeexp_));
        _set_bit(4);
        if (input->ExpectTag(50)) goto parse_initSkill;
        break;
      }
      
      // optional .DB_HeroSkillData initSkill = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_initSkill:
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
             input, mutable_initskill()));
        if (input->ExpectTag(58)) goto parse_atkData;
        break;
      }
      
      // optional .DB_HeroAtkData atkData = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_atkData:
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
             input, mutable_atkdata()));
        if (input->ExpectTag(64)) goto parse_recoverhptm;
        break;
      }
      
      // optional int32 recoverhptm = 8 [default = 0];
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_recoverhptm:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &recoverhptm_));
        _set_bit(7);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DB_Hero::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    DB_Hero::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional int32 heroId = 1 [default = 0];
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->heroid(), output);
  }
  
  // optional int32 level = 2 [default = 0];
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->level(), output);
  }
  
  // optional int32 grade = 3 [default = 0];
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->grade(), output);
  }
  
  // optional int32 levelexp = 4 [default = 0];
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->levelexp(), output);
  }
  
  // optional int32 gradeexp = 5 [default = 0];
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->gradeexp(), output);
  }
  
  // optional .DB_HeroSkillData initSkill = 6;
  if (_has_bit(5)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      6, this->initskill(), output);
  }
  
  // optional .DB_HeroAtkData atkData = 7;
  if (_has_bit(6)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      7, this->atkdata(), output);
  }
  
  // optional int32 recoverhptm = 8 [default = 0];
  if (_has_bit(7)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->recoverhptm(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DB_Hero::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 heroId = 1 [default = 0];
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->heroid(), target);
  }
  
  // optional int32 level = 2 [default = 0];
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->level(), target);
  }
  
  // optional int32 grade = 3 [default = 0];
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->grade(), target);
  }
  
  // optional int32 levelexp = 4 [default = 0];
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->levelexp(), target);
  }
  
  // optional int32 gradeexp = 5 [default = 0];
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->gradeexp(), target);
  }
  
  // optional .DB_HeroSkillData initSkill = 6;
  if (_has_bit(5)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->initskill(), target);
  }
  
  // optional .DB_HeroAtkData atkData = 7;
  if (_has_bit(6)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->atkdata(), target);
  }
  
  // optional int32 recoverhptm = 8 [default = 0];
  if (_has_bit(7)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->recoverhptm(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DB_Hero::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 heroId = 1 [default = 0];
    if (has_heroid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->heroid());
    }
    
    // optional int32 level = 2 [default = 0];
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->level());
    }
    
    // optional int32 grade = 3 [default = 0];
    if (has_grade()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->grade());
    }
    
    // optional int32 levelexp = 4 [default = 0];
    if (has_levelexp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->levelexp());
    }
    
    // optional int32 gradeexp = 5 [default = 0];
    if (has_gradeexp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gradeexp());
    }
    
    // optional .DB_HeroSkillData initSkill = 6;
    if (has_initskill()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->initskill());
    }
    
    // optional .DB_HeroAtkData atkData = 7;
    if (has_atkdata()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->atkdata());
    }
    
    // optional int32 recoverhptm = 8 [default = 0];
    if (has_recoverhptm()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->recoverhptm());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void DB_Hero::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DB_Hero* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DB_Hero*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DB_Hero::MergeFrom(const DB_Hero& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_heroid(from.heroid());
    }
    if (from._has_bit(1)) {
      set_level(from.level());
    }
    if (from._has_bit(2)) {
      set_grade(from.grade());
    }
    if (from._has_bit(3)) {
      set_levelexp(from.levelexp());
    }
    if (from._has_bit(4)) {
      set_gradeexp(from.gradeexp());
    }
    if (from._has_bit(5)) {
      mutable_initskill()->::DB_HeroSkillData::MergeFrom(from.initskill());
    }
    if (from._has_bit(6)) {
      mutable_atkdata()->::DB_HeroAtkData::MergeFrom(from.atkdata());
    }
    if (from._has_bit(7)) {
      set_recoverhptm(from.recoverhptm());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DB_Hero::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DB_Hero::CopyFrom(const DB_Hero& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DB_Hero::IsInitialized() const {
  
  return true;
}

void DB_Hero::Swap(DB_Hero* other) {
  if (other != this) {
    std::swap(heroid_, other->heroid_);
    std::swap(level_, other->level_);
    std::swap(grade_, other->grade_);
    std::swap(levelexp_, other->levelexp_);
    std::swap(gradeexp_, other->gradeexp_);
    std::swap(initskill_, other->initskill_);
    std::swap(atkdata_, other->atkdata_);
    std::swap(recoverhptm_, other->recoverhptm_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DB_Hero::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DB_Hero_descriptor_;
  metadata.reflection = DB_Hero_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DB_UpgradeHero::kHerotypeFieldNumber;
const int DB_UpgradeHero::kFinishTimeFieldNumber;
#endif  // !_MSC_VER

DB_UpgradeHero::DB_UpgradeHero() {
  SharedCtor();
}

void DB_UpgradeHero::InitAsDefaultInstance() {
}

DB_UpgradeHero::DB_UpgradeHero(const DB_UpgradeHero& from) {
  SharedCtor();
  MergeFrom(from);
}

void DB_UpgradeHero::SharedCtor() {
  _cached_size_ = 0;
  herotype_ = 0;
  finishtime_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DB_UpgradeHero::~DB_UpgradeHero() {
  SharedDtor();
}

void DB_UpgradeHero::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* DB_UpgradeHero::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DB_UpgradeHero_descriptor_;
}

const DB_UpgradeHero& DB_UpgradeHero::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dbinterface_5fsub_2eproto();  return *default_instance_;
}

DB_UpgradeHero* DB_UpgradeHero::default_instance_ = NULL;

DB_UpgradeHero* DB_UpgradeHero::New() const {
  return new DB_UpgradeHero;
}

void DB_UpgradeHero::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    herotype_ = 0;
    finishtime_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DB_UpgradeHero::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 herotype = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &herotype_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_finishTime;
        break;
      }
      
      // optional int32 finishTime = 2 [default = 0];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_finishTime:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &finishtime_));
        _set_bit(1);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DB_UpgradeHero::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    DB_UpgradeHero::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional int32 herotype = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->herotype(), output);
  }
  
  // optional int32 finishTime = 2 [default = 0];
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->finishtime(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DB_UpgradeHero::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 herotype = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->herotype(), target);
  }
  
  // optional int32 finishTime = 2 [default = 0];
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->finishtime(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DB_UpgradeHero::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 herotype = 1;
    if (has_herotype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->herotype());
    }
    
    // optional int32 finishTime = 2 [default = 0];
    if (has_finishtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->finishtime());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void DB_UpgradeHero::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DB_UpgradeHero* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DB_UpgradeHero*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DB_UpgradeHero::MergeFrom(const DB_UpgradeHero& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_herotype(from.herotype());
    }
    if (from._has_bit(1)) {
      set_finishtime(from.finishtime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DB_UpgradeHero::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DB_UpgradeHero::CopyFrom(const DB_UpgradeHero& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DB_UpgradeHero::IsInitialized() const {
  
  return true;
}

void DB_UpgradeHero::Swap(DB_UpgradeHero* other) {
  if (other != this) {
    std::swap(herotype_, other->herotype_);
    std::swap(finishtime_, other->finishtime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DB_UpgradeHero::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DB_UpgradeHero_descriptor_;
  metadata.reflection = DB_UpgradeHero_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DB_HeroInfo::kHeroFieldNumber;
const int DB_HeroInfo::kHeroletterFieldNumber;
const int DB_HeroInfo::kFreeVisitCntFieldNumber;
const int DB_HeroInfo::kFinishVisitTimeFieldNumber;
const int DB_HeroInfo::kCollectLstFieldNumber;
const int DB_HeroInfo::kHasSendheroFieldNumber;
const int DB_HeroInfo::kSendIDFieldNumber;
const int DB_HeroInfo::kHasCreditVisitFieldNumber;
const int DB_HeroInfo::kHeroupgradeFieldNumber;
const int DB_HeroInfo::kHeroAtkLstFieldNumber;
const int DB_HeroInfo::kHeroDefLstFieldNumber;
const int DB_HeroInfo::kHeroAutoLstFieldNumber;
const int DB_HeroInfo::kHeroarenaLstFieldNumber;
const int DB_HeroInfo::kNAtkPartnerNumFieldNumber;
const int DB_HeroInfo::kNDefPartnerNumFieldNumber;
const int DB_HeroInfo::kNAutoPartnerNumFieldNumber;
#endif  // !_MSC_VER

DB_HeroInfo::DB_HeroInfo() {
  SharedCtor();
}

void DB_HeroInfo::InitAsDefaultInstance() {
}

DB_HeroInfo::DB_HeroInfo(const DB_HeroInfo& from) {
  SharedCtor();
  MergeFrom(from);
}

void DB_HeroInfo::SharedCtor() {
  _cached_size_ = 0;
  hassendhero_ = false;
  hascreditvisit_ = false;
  natkpartnernum_ = 0;
  ndefpartnernum_ = 0;
  nautopartnernum_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DB_HeroInfo::~DB_HeroInfo() {
  SharedDtor();
}

void DB_HeroInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* DB_HeroInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DB_HeroInfo_descriptor_;
}

const DB_HeroInfo& DB_HeroInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dbinterface_5fsub_2eproto();  return *default_instance_;
}

DB_HeroInfo* DB_HeroInfo::default_instance_ = NULL;

DB_HeroInfo* DB_HeroInfo::New() const {
  return new DB_HeroInfo;
}

void DB_HeroInfo::Clear() {
  if (_has_bits_[5 / 32] & (0xffu << (5 % 32))) {
    hassendhero_ = false;
    hascreditvisit_ = false;
  }
  if (_has_bits_[13 / 32] & (0xffu << (13 % 32))) {
    natkpartnernum_ = 0;
    ndefpartnernum_ = 0;
    nautopartnernum_ = 0;
  }
  hero_.Clear();
  heroletter_.Clear();
  freevisitcnt_.Clear();
  finishvisittime_.Clear();
  collectlst_.Clear();
  sendid_.Clear();
  heroupgrade_.Clear();
  heroatklst_.Clear();
  herodeflst_.Clear();
  heroautolst_.Clear();
  heroarenalst_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DB_HeroInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .DB_Hero hero = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_hero:
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, add_hero()));
        if (input->ExpectTag(10)) goto parse_hero;
        if (input->ExpectTag(18)) goto parse_heroletter;
        break;
      }
      
      // repeated .DB_HeroLetter heroletter = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_heroletter:
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, add_heroletter()));
        if (input->ExpectTag(18)) goto parse_heroletter;
        if (input->ExpectTag(24)) goto parse_freeVisitCnt;
        break;
      }
      
      // repeated int32 freeVisitCnt = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_freeVisitCnt:
        ::google::protobuf::int32 value;
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &value));
        add_freevisitcnt(value);
        if (input->ExpectTag(24)) goto parse_freeVisitCnt;
        if (input->ExpectTag(32)) goto parse_finishVisitTime;
        break;
      }
      
      // repeated int32 finishVisitTime = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_finishVisitTime:
        ::google::protobuf::int32 value;
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &value));
        add_finishvisittime(value);
        if (input->ExpectTag(32)) goto parse_finishVisitTime;
        if (input->ExpectTag(40)) goto parse_collectLst;
        break;
      }
      
      // repeated int32 collectLst = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_collectLst:
        ::google::protobuf::int32 value;
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &value));
        add_collectlst(value);
        if (input->ExpectTag(40)) goto parse_collectLst;
        if (input->ExpectTag(48)) goto parse_hasSendhero;
        break;
      }
      
      // optional bool hasSendhero = 6 [default = false];
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_hasSendhero:
        DO_(::google::protobuf::internal::WireFormatLite::ReadBool(
              input, &hassendhero_));
        _set_bit(5);
        if (input->ExpectTag(56)) goto parse_sendID;
        break;
      }
      
      // repeated int32 sendID = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_sendID:
        ::google::protobuf::int32 value;
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &value));
        add_sendid(value);
        if (input->ExpectTag(56)) goto parse_sendID;
        if (input->ExpectTag(64)) goto parse_hasCreditVisit;
        break;
      }
      
      // optional bool hasCreditVisit = 8 [default = false];
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_hasCreditVisit:
        DO_(::google::protobuf::internal::WireFormatLite::ReadBool(
              input, &hascreditvisit_));
        _set_bit(7);
        if (input->ExpectTag(74)) goto parse_heroupgrade;
        break;
      }
      
      // repeated .DB_UpgradeHero heroupgrade = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_heroupgrade:
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, add_heroupgrade()));
        if (input->ExpectTag(74)) goto parse_heroupgrade;
        if (input->ExpectTag(80)) goto parse_heroAtkLst;
        break;
      }
      
      // repeated int32 heroAtkLst = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_heroAtkLst:
        ::google::protobuf::int32 value;
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &value));
        add_heroatklst(value);
        if (input->ExpectTag(80)) goto parse_heroAtkLst;
        if (input->ExpectTag(88)) goto parse_heroDefLst;
        break;
      }
      
      // repeated int32 heroDefLst = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_heroDefLst:
        ::google::protobuf::int32 value;
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &value));
        add_herodeflst(value);
        if (input->ExpectTag(88)) goto parse_heroDefLst;
        if (input->ExpectTag(96)) goto parse_heroAutoLst;
        break;
      }
      
      // repeated int32 heroAutoLst = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_heroAutoLst:
        ::google::protobuf::int32 value;
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &value));
        add_heroautolst(value);
        if (input->ExpectTag(96)) goto parse_heroAutoLst;
        if (input->ExpectTag(104)) goto parse_heroarenaLst;
        break;
      }
      
      // repeated int32 heroarenaLst = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_heroarenaLst:
        ::google::protobuf::int32 value;
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &value));
        add_heroarenalst(value);
        if (input->ExpectTag(104)) goto parse_heroarenaLst;
        if (input->ExpectTag(112)) goto parse_nAtkPartnerNum;
        break;
      }
      
      // optional int32 nAtkPartnerNum = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_nAtkPartnerNum:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &natkpartnernum_));
        _set_bit(13);
        if (input->ExpectTag(120)) goto parse_nDefPartnerNum;
        break;
      }
      
      // optional int32 nDefPartnerNum = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_nDefPartnerNum:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &ndefpartnernum_));
        _set_bit(14);
        if (input->ExpectTag(128)) goto parse_nAutoPartnerNum;
        break;
      }
      
      // optional int32 nAutoPartnerNum = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_nAutoPartnerNum:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &nautopartnernum_));
        _set_bit(15);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DB_HeroInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    DB_HeroInfo::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // repeated .DB_Hero hero = 1;
  for (int i = 0; i < this->hero_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      1, this->hero(i), output);
  }
  
  // repeated .DB_HeroLetter heroletter = 2;
  for (int i = 0; i < this->heroletter_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      2, this->heroletter(i), output);
  }
  
  // repeated int32 freeVisitCnt = 3;
  for (int i = 0; i < this->freevisitcnt_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      3, this->freevisitcnt(i), output);
  }
  
  // repeated int32 finishVisitTime = 4;
  for (int i = 0; i < this->finishvisittime_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      4, this->finishvisittime(i), output);
  }
  
  // repeated int32 collectLst = 5;
  for (int i = 0; i < this->collectlst_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      5, this->collectlst(i), output);
  }
  
  // optional bool hasSendhero = 6 [default = false];
  if (_has_bit(5)) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->hassendhero(), output);
  }
  
  // repeated int32 sendID = 7;
  for (int i = 0; i < this->sendid_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      7, this->sendid(i), output);
  }
  
  // optional bool hasCreditVisit = 8 [default = false];
  if (_has_bit(7)) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->hascreditvisit(), output);
  }
  
  // repeated .DB_UpgradeHero heroupgrade = 9;
  for (int i = 0; i < this->heroupgrade_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      9, this->heroupgrade(i), output);
  }
  
  // repeated int32 heroAtkLst = 10;
  for (int i = 0; i < this->heroatklst_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      10, this->heroatklst(i), output);
  }
  
  // repeated int32 heroDefLst = 11;
  for (int i = 0; i < this->herodeflst_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      11, this->herodeflst(i), output);
  }
  
  // repeated int32 heroAutoLst = 12;
  for (int i = 0; i < this->heroautolst_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      12, this->heroautolst(i), output);
  }
  
  // repeated int32 heroarenaLst = 13;
  for (int i = 0; i < this->heroarenalst_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      13, this->heroarenalst(i), output);
  }
  
  // optional int32 nAtkPartnerNum = 14;
  if (_has_bit(13)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->natkpartnernum(), output);
  }
  
  // optional int32 nDefPartnerNum = 15;
  if (_has_bit(14)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(15, this->ndefpartnernum(), output);
  }
  
  // optional int32 nAutoPartnerNum = 16;
  if (_has_bit(15)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(16, this->nautopartnernum(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DB_HeroInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .DB_Hero hero = 1;
  for (int i = 0; i < this->hero_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->hero(i), target);
  }
  
  // repeated .DB_HeroLetter heroletter = 2;
  for (int i = 0; i < this->heroletter_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->heroletter(i), target);
  }
  
  // repeated int32 freeVisitCnt = 3;
  for (int i = 0; i < this->freevisitcnt_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(3, this->freevisitcnt(i), target);
  }
  
  // repeated int32 finishVisitTime = 4;
  for (int i = 0; i < this->finishvisittime_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(4, this->finishvisittime(i), target);
  }
  
  // repeated int32 collectLst = 5;
  for (int i = 0; i < this->collectlst_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(5, this->collectlst(i), target);
  }
  
  // optional bool hasSendhero = 6 [default = false];
  if (_has_bit(5)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->hassendhero(), target);
  }
  
  // repeated int32 sendID = 7;
  for (int i = 0; i < this->sendid_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(7, this->sendid(i), target);
  }
  
  // optional bool hasCreditVisit = 8 [default = false];
  if (_has_bit(7)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(8, this->hascreditvisit(), target);
  }
  
  // repeated .DB_UpgradeHero heroupgrade = 9;
  for (int i = 0; i < this->heroupgrade_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->heroupgrade(i), target);
  }
  
  // repeated int32 heroAtkLst = 10;
  for (int i = 0; i < this->heroatklst_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(10, this->heroatklst(i), target);
  }
  
  // repeated int32 heroDefLst = 11;
  for (int i = 0; i < this->herodeflst_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(11, this->herodeflst(i), target);
  }
  
  // repeated int32 heroAutoLst = 12;
  for (int i = 0; i < this->heroautolst_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(12, this->heroautolst(i), target);
  }
  
  // repeated int32 heroarenaLst = 13;
  for (int i = 0; i < this->heroarenalst_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(13, this->heroarenalst(i), target);
  }
  
  // optional int32 nAtkPartnerNum = 14;
  if (_has_bit(13)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(14, this->natkpartnernum(), target);
  }
  
  // optional int32 nDefPartnerNum = 15;
  if (_has_bit(14)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(15, this->ndefpartnernum(), target);
  }
  
  // optional int32 nAutoPartnerNum = 16;
  if (_has_bit(15)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(16, this->nautopartnernum(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DB_HeroInfo::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[5 / 32] & (0xffu << (5 % 32))) {
    // optional bool hasSendhero = 6 [default = false];
    if (has_hassendhero()) {
      total_size += 1 + 1;
    }
    
    // optional bool hasCreditVisit = 8 [default = false];
    if (has_hascreditvisit()) {
      total_size += 1 + 1;
    }
    
  }
  if (_has_bits_[13 / 32] & (0xffu << (13 % 32))) {
    // optional int32 nAtkPartnerNum = 14;
    if (has_natkpartnernum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->natkpartnernum());
    }
    
    // optional int32 nDefPartnerNum = 15;
    if (has_ndefpartnernum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ndefpartnernum());
    }
    
    // optional int32 nAutoPartnerNum = 16;
    if (has_nautopartnernum()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->nautopartnernum());
    }
    
  }
  // repeated .DB_Hero hero = 1;
  total_size += 1 * this->hero_size();
  for (int i = 0; i < this->hero_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->hero(i));
  }
  
  // repeated .DB_HeroLetter heroletter = 2;
  total_size += 1 * this->heroletter_size();
  for (int i = 0; i < this->heroletter_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->heroletter(i));
  }
  
  // repeated int32 freeVisitCnt = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->freevisitcnt_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->freevisitcnt(i));
    }
    total_size += 1 * this->freevisitcnt_size() + data_size;
  }
  
  // repeated int32 finishVisitTime = 4;
  {
    int data_size = 0;
    for (int i = 0; i < this->finishvisittime_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->finishvisittime(i));
    }
    total_size += 1 * this->finishvisittime_size() + data_size;
  }
  
  // repeated int32 collectLst = 5;
  {
    int data_size = 0;
    for (int i = 0; i < this->collectlst_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->collectlst(i));
    }
    total_size += 1 * this->collectlst_size() + data_size;
  }
  
  // repeated int32 sendID = 7;
  {
    int data_size = 0;
    for (int i = 0; i < this->sendid_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->sendid(i));
    }
    total_size += 1 * this->sendid_size() + data_size;
  }
  
  // repeated .DB_UpgradeHero heroupgrade = 9;
  total_size += 1 * this->heroupgrade_size();
  for (int i = 0; i < this->heroupgrade_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->heroupgrade(i));
  }
  
  // repeated int32 heroAtkLst = 10;
  {
    int data_size = 0;
    for (int i = 0; i < this->heroatklst_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->heroatklst(i));
    }
    total_size += 1 * this->heroatklst_size() + data_size;
  }
  
  // repeated int32 heroDefLst = 11;
  {
    int data_size = 0;
    for (int i = 0; i < this->herodeflst_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->herodeflst(i));
    }
    total_size += 1 * this->herodeflst_size() + data_size;
  }
  
  // repeated int32 heroAutoLst = 12;
  {
    int data_size = 0;
    for (int i = 0; i < this->heroautolst_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->heroautolst(i));
    }
    total_size += 1 * this->heroautolst_size() + data_size;
  }
  
  // repeated int32 heroarenaLst = 13;
  {
    int data_size = 0;
    for (int i = 0; i < this->heroarenalst_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->heroarenalst(i));
    }
    total_size += 1 * this->heroarenalst_size() + data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void DB_HeroInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DB_HeroInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DB_HeroInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DB_HeroInfo::MergeFrom(const DB_HeroInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  hero_.MergeFrom(from.hero_);
  heroletter_.MergeFrom(from.heroletter_);
  freevisitcnt_.MergeFrom(from.freevisitcnt_);
  finishvisittime_.MergeFrom(from.finishvisittime_);
  collectlst_.MergeFrom(from.collectlst_);
  sendid_.MergeFrom(from.sendid_);
  heroupgrade_.MergeFrom(from.heroupgrade_);
  heroatklst_.MergeFrom(from.heroatklst_);
  herodeflst_.MergeFrom(from.herodeflst_);
  heroautolst_.MergeFrom(from.heroautolst_);
  heroarenalst_.MergeFrom(from.heroarenalst_);
  if (from._has_bits_[5 / 32] & (0xffu << (5 % 32))) {
    if (from._has_bit(5)) {
      set_hassendhero(from.hassendhero());
    }
    if (from._has_bit(7)) {
      set_hascreditvisit(from.hascreditvisit());
    }
  }
  if (from._has_bits_[13 / 32] & (0xffu << (13 % 32))) {
    if (from._has_bit(13)) {
      set_natkpartnernum(from.natkpartnernum());
    }
    if (from._has_bit(14)) {
      set_ndefpartnernum(from.ndefpartnernum());
    }
    if (from._has_bit(15)) {
      set_nautopartnernum(from.nautopartnernum());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DB_HeroInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DB_HeroInfo::CopyFrom(const DB_HeroInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DB_HeroInfo::IsInitialized() const {
  
  return true;
}

void DB_HeroInfo::Swap(DB_HeroInfo* other) {
  if (other != this) {
    hero_.Swap(&other->hero_);
    heroletter_.Swap(&other->heroletter_);
    freevisitcnt_.Swap(&other->freevisitcnt_);
    finishvisittime_.Swap(&other->finishvisittime_);
    collectlst_.Swap(&other->collectlst_);
    std::swap(hassendhero_, other->hassendhero_);
    sendid_.Swap(&other->sendid_);
    std::swap(hascreditvisit_, other->hascreditvisit_);
    heroupgrade_.Swap(&other->heroupgrade_);
    heroatklst_.Swap(&other->heroatklst_);
    herodeflst_.Swap(&other->herodeflst_);
    heroautolst_.Swap(&other->heroautolst_);
    heroarenalst_.Swap(&other->heroarenalst_);
    std::swap(natkpartnernum_, other->natkpartnernum_);
    std::swap(ndefpartnernum_, other->ndefpartnernum_);
    std::swap(nautopartnernum_, other->nautopartnernum_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DB_HeroInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DB_HeroInfo_descriptor_;
  metadata.reflection = DB_HeroInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DB_Flag::kMusicFieldNumber;
const int DB_Flag::kEffectFieldNumber;
const int DB_Flag::kQualityFieldNumber;
const int DB_Flag::kAllianceWelcomeFieldNumber;
#endif  // !_MSC_VER

DB_Flag::DB_Flag() {
  SharedCtor();
}

void DB_Flag::InitAsDefaultInstance() {
}

DB_Flag::DB_Flag(const DB_Flag& from) {
  SharedCtor();
  MergeFrom(from);
}

void DB_Flag::SharedCtor() {
  _cached_size_ = 0;
  music_ = 0;
  effect_ = 0;
  quality_ = 0;
  alliancewelcome_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DB_Flag::~DB_Flag() {
  SharedDtor();
}

void DB_Flag::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* DB_Flag::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DB_Flag_descriptor_;
}

const DB_Flag& DB_Flag::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dbinterface_5fsub_2eproto();  return *default_instance_;
}

DB_Flag* DB_Flag::default_instance_ = NULL;

DB_Flag* DB_Flag::New() const {
  return new DB_Flag;
}

void DB_Flag::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    music_ = 0;
    effect_ = 0;
    quality_ = 0;
    alliancewelcome_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DB_Flag::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 music = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &music_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_effect;
        break;
      }
      
      // optional int32 effect = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_effect:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &effect_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_quality;
        break;
      }
      
      // optional int32 quality = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_quality:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &quality_));
        _set_bit(2);
        if (input->ExpectTag(32)) goto parse_allianceWelcome;
        break;
      }
      
      // optional int32 allianceWelcome = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_allianceWelcome:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &alliancewelcome_));
        _set_bit(3);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DB_Flag::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    DB_Flag::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional int32 music = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->music(), output);
  }
  
  // optional int32 effect = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->effect(), output);
  }
  
  // optional int32 quality = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->quality(), output);
  }
  
  // optional int32 allianceWelcome = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->alliancewelcome(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DB_Flag::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 music = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->music(), target);
  }
  
  // optional int32 effect = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->effect(), target);
  }
  
  // optional int32 quality = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->quality(), target);
  }
  
  // optional int32 allianceWelcome = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->alliancewelcome(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DB_Flag::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 music = 1;
    if (has_music()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->music());
    }
    
    // optional int32 effect = 2;
    if (has_effect()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->effect());
    }
    
    // optional int32 quality = 3;
    if (has_quality()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->quality());
    }
    
    // optional int32 allianceWelcome = 4;
    if (has_alliancewelcome()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->alliancewelcome());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void DB_Flag::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DB_Flag* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DB_Flag*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DB_Flag::MergeFrom(const DB_Flag& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_music(from.music());
    }
    if (from._has_bit(1)) {
      set_effect(from.effect());
    }
    if (from._has_bit(2)) {
      set_quality(from.quality());
    }
    if (from._has_bit(3)) {
      set_alliancewelcome(from.alliancewelcome());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DB_Flag::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DB_Flag::CopyFrom(const DB_Flag& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DB_Flag::IsInitialized() const {
  
  return true;
}

void DB_Flag::Swap(DB_Flag* other) {
  if (other != this) {
    std::swap(music_, other->music_);
    std::swap(effect_, other->effect_);
    std::swap(quality_, other->quality_);
    std::swap(alliancewelcome_, other->alliancewelcome_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DB_Flag::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DB_Flag_descriptor_;
  metadata.reflection = DB_Flag_reflection_;
  return metadata;
}


// ===================================================================

const ::std::string DB_Storedata::_default_type_;
#ifndef _MSC_VER
const int DB_Storedata::kTypeFieldNumber;
const int DB_Storedata::kQFieldNumber;
const int DB_Storedata::kSFieldNumber;
const int DB_Storedata::kEFieldNumber;
#endif  // !_MSC_VER

DB_Storedata::DB_Storedata() {
  SharedCtor();
}

void DB_Storedata::InitAsDefaultInstance() {
}

DB_Storedata::DB_Storedata(const DB_Storedata& from) {
  SharedCtor();
  MergeFrom(from);
}

void DB_Storedata::SharedCtor() {
  _cached_size_ = 0;
  type_ = const_cast< ::std::string*>(&_default_type_);
  q_ = 0;
  s_ = 0;
  e_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DB_Storedata::~DB_Storedata() {
  SharedDtor();
}

void DB_Storedata::SharedDtor() {
  if (type_ != &_default_type_) {
    delete type_;
  }
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* DB_Storedata::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DB_Storedata_descriptor_;
}

const DB_Storedata& DB_Storedata::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dbinterface_5fsub_2eproto();  return *default_instance_;
}

DB_Storedata* DB_Storedata::default_instance_ = NULL;

DB_Storedata* DB_Storedata::New() const {
  return new DB_Storedata;
}

void DB_Storedata::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (type_ != &_default_type_) {
        type_->clear();
      }
    }
    q_ = 0;
    s_ = 0;
    e_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DB_Storedata::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadString(
              input, this->mutable_type()));
        ::google::protobuf::internal::WireFormat::VerifyUTF8String(
          this->type().data(), this->type().length(),
          ::google::protobuf::internal::WireFormat::PARSE);
        if (input->ExpectTag(16)) goto parse_q;
        break;
      }
      
      // optional int32 q = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_q:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &q_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_s;
        break;
      }
      
      // optional int32 s = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_s:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &s_));
        _set_bit(2);
        if (input->ExpectTag(32)) goto parse_e;
        break;
      }
      
      // optional int32 e = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_e:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &e_));
        _set_bit(3);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DB_Storedata::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    DB_Storedata::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional string type = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->type().data(), this->type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->type(), output);
  }
  
  // optional int32 q = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->q(), output);
  }
  
  // optional int32 s = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->s(), output);
  }
  
  // optional int32 e = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->e(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DB_Storedata::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string type = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->type().data(), this->type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->type(), target);
  }
  
  // optional int32 q = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->q(), target);
  }
  
  // optional int32 s = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->s(), target);
  }
  
  // optional int32 e = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->e(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DB_Storedata::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->type());
    }
    
    // optional int32 q = 2;
    if (has_q()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->q());
    }
    
    // optional int32 s = 3;
    if (has_s()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->s());
    }
    
    // optional int32 e = 4;
    if (has_e()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->e());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void DB_Storedata::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DB_Storedata* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DB_Storedata*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DB_Storedata::MergeFrom(const DB_Storedata& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_type(from.type());
    }
    if (from._has_bit(1)) {
      set_q(from.q());
    }
    if (from._has_bit(2)) {
      set_s(from.s());
    }
    if (from._has_bit(3)) {
      set_e(from.e());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DB_Storedata::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DB_Storedata::CopyFrom(const DB_Storedata& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DB_Storedata::IsInitialized() const {
  
  return true;
}

void DB_Storedata::Swap(DB_Storedata* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(q_, other->q_);
    std::swap(s_, other->s_);
    std::swap(e_, other->e_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DB_Storedata::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DB_Storedata_descriptor_;
  metadata.reflection = DB_Storedata_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DB_EnemyStar::kEnemyIDFieldNumber;
const int DB_EnemyStar::kAttactCntFieldNumber;
const int DB_EnemyStar::kRecoveryCntFieldNumber;
const int DB_EnemyStar::kAttacktimeFieldNumber;
const int DB_EnemyStar::kCountdownFieldNumber;
#endif  // !_MSC_VER

DB_EnemyStar::DB_EnemyStar() {
  SharedCtor();
}

void DB_EnemyStar::InitAsDefaultInstance() {
}

DB_EnemyStar::DB_EnemyStar(const DB_EnemyStar& from) {
  SharedCtor();
  MergeFrom(from);
}

void DB_EnemyStar::SharedCtor() {
  _cached_size_ = 0;
  enemyid_ = GOOGLE_LONGLONG(0);
  attactcnt_ = GOOGLE_LONGLONG(0);
  recoverycnt_ = GOOGLE_LONGLONG(0);
  attacktime_ = 0;
  countdown_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DB_EnemyStar::~DB_EnemyStar() {
  SharedDtor();
}

void DB_EnemyStar::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* DB_EnemyStar::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DB_EnemyStar_descriptor_;
}

const DB_EnemyStar& DB_EnemyStar::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dbinterface_5fsub_2eproto();  return *default_instance_;
}

DB_EnemyStar* DB_EnemyStar::default_instance_ = NULL;

DB_EnemyStar* DB_EnemyStar::New() const {
  return new DB_EnemyStar;
}

void DB_EnemyStar::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    enemyid_ = GOOGLE_LONGLONG(0);
    attactcnt_ = GOOGLE_LONGLONG(0);
    recoverycnt_ = GOOGLE_LONGLONG(0);
    attacktime_ = 0;
    countdown_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DB_EnemyStar::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 enemyID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt64(
              input, &enemyid_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_attactCnt;
        break;
      }
      
      // optional int64 attactCnt = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_attactCnt:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt64(
              input, &attactcnt_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_recoveryCnt;
        break;
      }
      
      // optional int64 recoveryCnt = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_recoveryCnt:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt64(
              input, &recoverycnt_));
        _set_bit(2);
        if (input->ExpectTag(32)) goto parse_attacktime;
        break;
      }
      
      // optional int32 attacktime = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_attacktime:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &attacktime_));
        _set_bit(3);
        if (input->ExpectTag(40)) goto parse_countdown;
        break;
      }
      
      // optional int32 countdown = 5 [default = 0];
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_countdown:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &countdown_));
        _set_bit(4);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DB_EnemyStar::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    DB_EnemyStar::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional int64 enemyID = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->enemyid(), output);
  }
  
  // optional int64 attactCnt = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->attactcnt(), output);
  }
  
  // optional int64 recoveryCnt = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->recoverycnt(), output);
  }
  
  // optional int32 attacktime = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->attacktime(), output);
  }
  
  // optional int32 countdown = 5 [default = 0];
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->countdown(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DB_EnemyStar::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int64 enemyID = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->enemyid(), target);
  }
  
  // optional int64 attactCnt = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->attactcnt(), target);
  }
  
  // optional int64 recoveryCnt = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->recoverycnt(), target);
  }
  
  // optional int32 attacktime = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->attacktime(), target);
  }
  
  // optional int32 countdown = 5 [default = 0];
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->countdown(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DB_EnemyStar::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 enemyID = 1;
    if (has_enemyid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->enemyid());
    }
    
    // optional int64 attactCnt = 2;
    if (has_attactcnt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->attactcnt());
    }
    
    // optional int64 recoveryCnt = 3;
    if (has_recoverycnt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->recoverycnt());
    }
    
    // optional int32 attacktime = 4;
    if (has_attacktime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->attacktime());
    }
    
    // optional int32 countdown = 5 [default = 0];
    if (has_countdown()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->countdown());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void DB_EnemyStar::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DB_EnemyStar* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DB_EnemyStar*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DB_EnemyStar::MergeFrom(const DB_EnemyStar& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_enemyid(from.enemyid());
    }
    if (from._has_bit(1)) {
      set_attactcnt(from.attactcnt());
    }
    if (from._has_bit(2)) {
      set_recoverycnt(from.recoverycnt());
    }
    if (from._has_bit(3)) {
      set_attacktime(from.attacktime());
    }
    if (from._has_bit(4)) {
      set_countdown(from.countdown());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DB_EnemyStar::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DB_EnemyStar::CopyFrom(const DB_EnemyStar& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DB_EnemyStar::IsInitialized() const {
  
  return true;
}

void DB_EnemyStar::Swap(DB_EnemyStar* other) {
  if (other != this) {
    std::swap(enemyid_, other->enemyid_);
    std::swap(attactcnt_, other->attactcnt_);
    std::swap(recoverycnt_, other->recoverycnt_);
    std::swap(attacktime_, other->attacktime_);
    std::swap(countdown_, other->countdown_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DB_EnemyStar::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DB_EnemyStar_descriptor_;
  metadata.reflection = DB_EnemyStar_reflection_;
  return metadata;
}


// ===================================================================

const ::std::string DB_GiftFrdInfo::_default_frdopenid_;
#ifndef _MSC_VER
const int DB_GiftFrdInfo::kFriendIDFieldNumber;
const int DB_GiftFrdInfo::kFrdOpenIDFieldNumber;
const int DB_GiftFrdInfo::kMessageIDFieldNumber;
const int DB_GiftFrdInfo::kGiftIDFieldNumber;
const int DB_GiftFrdInfo::kGetTimeFieldNumber;
const int DB_GiftFrdInfo::kGiftTypeFieldNumber;
#endif  // !_MSC_VER

DB_GiftFrdInfo::DB_GiftFrdInfo() {
  SharedCtor();
}

void DB_GiftFrdInfo::InitAsDefaultInstance() {
}

DB_GiftFrdInfo::DB_GiftFrdInfo(const DB_GiftFrdInfo& from) {
  SharedCtor();
  MergeFrom(from);
}

void DB_GiftFrdInfo::SharedCtor() {
  _cached_size_ = 0;
  friendid_ = GOOGLE_LONGLONG(0);
  frdopenid_ = const_cast< ::std::string*>(&_default_frdopenid_);
  messageid_ = 0;
  giftid_ = 0;
  gettime_ = GOOGLE_LONGLONG(0);
  gifttype_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DB_GiftFrdInfo::~DB_GiftFrdInfo() {
  SharedDtor();
}

void DB_GiftFrdInfo::SharedDtor() {
  if (frdopenid_ != &_default_frdopenid_) {
    delete frdopenid_;
  }
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* DB_GiftFrdInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DB_GiftFrdInfo_descriptor_;
}

const DB_GiftFrdInfo& DB_GiftFrdInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dbinterface_5fsub_2eproto();  return *default_instance_;
}

DB_GiftFrdInfo* DB_GiftFrdInfo::default_instance_ = NULL;

DB_GiftFrdInfo* DB_GiftFrdInfo::New() const {
  return new DB_GiftFrdInfo;
}

void DB_GiftFrdInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    friendid_ = GOOGLE_LONGLONG(0);
    if (_has_bit(1)) {
      if (frdopenid_ != &_default_frdopenid_) {
        frdopenid_->clear();
      }
    }
    messageid_ = 0;
    giftid_ = 0;
    gettime_ = GOOGLE_LONGLONG(0);
    gifttype_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DB_GiftFrdInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 friendID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt64(
              input, &friendid_));
        _set_bit(0);
        if (input->ExpectTag(18)) goto parse_frdOpenID;
        break;
      }
      
      // optional string frdOpenID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_frdOpenID:
        DO_(::google::protobuf::internal::WireFormatLite::ReadString(
              input, this->mutable_frdopenid()));
        ::google::protobuf::internal::WireFormat::VerifyUTF8String(
          this->frdopenid().data(), this->frdopenid().length(),
          ::google::protobuf::internal::WireFormat::PARSE);
        if (input->ExpectTag(24)) goto parse_messageID;
        break;
      }
      
      // optional int32 messageID = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_messageID:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &messageid_));
        _set_bit(2);
        if (input->ExpectTag(32)) goto parse_giftID;
        break;
      }
      
      // optional int32 giftID = 4 [default = 0];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_giftID:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &giftid_));
        _set_bit(3);
        if (input->ExpectTag(40)) goto parse_getTime;
        break;
      }
      
      // optional int64 getTime = 5 [default = 0];
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_getTime:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt64(
              input, &gettime_));
        _set_bit(4);
        if (input->ExpectTag(48)) goto parse_giftType;
        break;
      }
      
      // optional int32 giftType = 6 [default = 0];
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_giftType:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &gifttype_));
        _set_bit(5);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DB_GiftFrdInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    DB_GiftFrdInfo::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional int64 friendID = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->friendid(), output);
  }
  
  // optional string frdOpenID = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->frdopenid().data(), this->frdopenid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->frdopenid(), output);
  }
  
  // optional int32 messageID = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->messageid(), output);
  }
  
  // optional int32 giftID = 4 [default = 0];
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->giftid(), output);
  }
  
  // optional int64 getTime = 5 [default = 0];
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->gettime(), output);
  }
  
  // optional int32 giftType = 6 [default = 0];
  if (_has_bit(5)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->gifttype(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DB_GiftFrdInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int64 friendID = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->friendid(), target);
  }
  
  // optional string frdOpenID = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->frdopenid().data(), this->frdopenid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->frdopenid(), target);
  }
  
  // optional int32 messageID = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->messageid(), target);
  }
  
  // optional int32 giftID = 4 [default = 0];
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->giftid(), target);
  }
  
  // optional int64 getTime = 5 [default = 0];
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->gettime(), target);
  }
  
  // optional int32 giftType = 6 [default = 0];
  if (_has_bit(5)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->gifttype(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DB_GiftFrdInfo::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 friendID = 1;
    if (has_friendid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->friendid());
    }
    
    // optional string frdOpenID = 2;
    if (has_frdopenid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->frdopenid());
    }
    
    // optional int32 messageID = 3;
    if (has_messageid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->messageid());
    }
    
    // optional int32 giftID = 4 [default = 0];
    if (has_giftid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->giftid());
    }
    
    // optional int64 getTime = 5 [default = 0];
    if (has_gettime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->gettime());
    }
    
    // optional int32 giftType = 6 [default = 0];
    if (has_gifttype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gifttype());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void DB_GiftFrdInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DB_GiftFrdInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DB_GiftFrdInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DB_GiftFrdInfo::MergeFrom(const DB_GiftFrdInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_friendid(from.friendid());
    }
    if (from._has_bit(1)) {
      set_frdopenid(from.frdopenid());
    }
    if (from._has_bit(2)) {
      set_messageid(from.messageid());
    }
    if (from._has_bit(3)) {
      set_giftid(from.giftid());
    }
    if (from._has_bit(4)) {
      set_gettime(from.gettime());
    }
    if (from._has_bit(5)) {
      set_gifttype(from.gifttype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DB_GiftFrdInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DB_GiftFrdInfo::CopyFrom(const DB_GiftFrdInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DB_GiftFrdInfo::IsInitialized() const {
  
  return true;
}

void DB_GiftFrdInfo::Swap(DB_GiftFrdInfo* other) {
  if (other != this) {
    std::swap(friendid_, other->friendid_);
    std::swap(frdopenid_, other->frdopenid_);
    std::swap(messageid_, other->messageid_);
    std::swap(giftid_, other->giftid_);
    std::swap(gettime_, other->gettime_);
    std::swap(gifttype_, other->gifttype_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DB_GiftFrdInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DB_GiftFrdInfo_descriptor_;
  metadata.reflection = DB_GiftFrdInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DB_NewComerGiftList::kNewComerGiftIDFieldNumber;
const int DB_NewComerGiftList::kNewComerGiftGainFieldNumber;
#endif  // !_MSC_VER

DB_NewComerGiftList::DB_NewComerGiftList() {
  SharedCtor();
}

void DB_NewComerGiftList::InitAsDefaultInstance() {
}

DB_NewComerGiftList::DB_NewComerGiftList(const DB_NewComerGiftList& from) {
  SharedCtor();
  MergeFrom(from);
}

void DB_NewComerGiftList::SharedCtor() {
  _cached_size_ = 0;
  newcomergiftid_ = 0;
  newcomergiftgain_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DB_NewComerGiftList::~DB_NewComerGiftList() {
  SharedDtor();
}

void DB_NewComerGiftList::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* DB_NewComerGiftList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DB_NewComerGiftList_descriptor_;
}

const DB_NewComerGiftList& DB_NewComerGiftList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dbinterface_5fsub_2eproto();  return *default_instance_;
}

DB_NewComerGiftList* DB_NewComerGiftList::default_instance_ = NULL;

DB_NewComerGiftList* DB_NewComerGiftList::New() const {
  return new DB_NewComerGiftList;
}

void DB_NewComerGiftList::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    newcomergiftid_ = 0;
    newcomergiftgain_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DB_NewComerGiftList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 newComerGiftID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &newcomergiftid_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_newComerGiftGain;
        break;
      }
      
      // optional int32 newComerGiftGain = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_newComerGiftGain:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &newcomergiftgain_));
        _set_bit(1);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DB_NewComerGiftList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    DB_NewComerGiftList::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional int32 newComerGiftID = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->newcomergiftid(), output);
  }
  
  // optional int32 newComerGiftGain = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->newcomergiftgain(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DB_NewComerGiftList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 newComerGiftID = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->newcomergiftid(), target);
  }
  
  // optional int32 newComerGiftGain = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->newcomergiftgain(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DB_NewComerGiftList::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 newComerGiftID = 1;
    if (has_newcomergiftid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->newcomergiftid());
    }
    
    // optional int32 newComerGiftGain = 2;
    if (has_newcomergiftgain()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->newcomergiftgain());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void DB_NewComerGiftList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DB_NewComerGiftList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DB_NewComerGiftList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DB_NewComerGiftList::MergeFrom(const DB_NewComerGiftList& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_newcomergiftid(from.newcomergiftid());
    }
    if (from._has_bit(1)) {
      set_newcomergiftgain(from.newcomergiftgain());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DB_NewComerGiftList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DB_NewComerGiftList::CopyFrom(const DB_NewComerGiftList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DB_NewComerGiftList::IsInitialized() const {
  
  return true;
}

void DB_NewComerGiftList::Swap(DB_NewComerGiftList* other) {
  if (other != this) {
    std::swap(newcomergiftid_, other->newcomergiftid_);
    std::swap(newcomergiftgain_, other->newcomergiftgain_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DB_NewComerGiftList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DB_NewComerGiftList_descriptor_;
  metadata.reflection = DB_NewComerGiftList_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DB_GiftInfo::kDaySendFrdIDLstFieldNumber;
const int DB_GiftInfo::kDayAskFrdIDLstFieldNumber;
const int DB_GiftInfo::kDayGetGift2BagCntFieldNumber;
const int DB_GiftInfo::kDayAskGift2BagCntFieldNumber;
const int DB_GiftInfo::kDayGetGiftCntFieldNumber;
const int DB_GiftInfo::kDayResendGiftCntFieldNumber;
const int DB_GiftInfo::kGetGiftInfoFieldNumber;
const int DB_GiftInfo::kFinishGiftInfoFieldNumber;
const int DB_GiftInfo::kMsgIdxFieldNumber;
const int DB_GiftInfo::kLastLoginTimeFieldNumber;
const int DB_GiftInfo::kDaySendGiftCntFieldNumber;
const int DB_GiftInfo::kNewComerGiftListFieldNumber;
#endif  // !_MSC_VER

DB_GiftInfo::DB_GiftInfo() {
  SharedCtor();
}

void DB_GiftInfo::InitAsDefaultInstance() {
}

DB_GiftInfo::DB_GiftInfo(const DB_GiftInfo& from) {
  SharedCtor();
  MergeFrom(from);
}

void DB_GiftInfo::SharedCtor() {
  _cached_size_ = 0;
  daygetgift2bagcnt_ = 0;
  dayaskgift2bagcnt_ = 0;
  daygetgiftcnt_ = 0;
  dayresendgiftcnt_ = 0;
  msgidx_ = 0;
  lastlogintime_ = GOOGLE_LONGLONG(0);
  daysendgiftcnt_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DB_GiftInfo::~DB_GiftInfo() {
  SharedDtor();
}

void DB_GiftInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* DB_GiftInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DB_GiftInfo_descriptor_;
}

const DB_GiftInfo& DB_GiftInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dbinterface_5fsub_2eproto();  return *default_instance_;
}

DB_GiftInfo* DB_GiftInfo::default_instance_ = NULL;

DB_GiftInfo* DB_GiftInfo::New() const {
  return new DB_GiftInfo;
}

void DB_GiftInfo::Clear() {
  if (_has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    daygetgift2bagcnt_ = 0;
    dayaskgift2bagcnt_ = 0;
    daygetgiftcnt_ = 0;
    dayresendgiftcnt_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    msgidx_ = 0;
    lastlogintime_ = GOOGLE_LONGLONG(0);
    daysendgiftcnt_ = 0;
  }
  daysendfrdidlst_.Clear();
  dayaskfrdidlst_.Clear();
  getgiftinfo_.Clear();
  finishgiftinfo_.Clear();
  newcomergiftlist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DB_GiftInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated string daySendFrdIDLst = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_daySendFrdIDLst:
        DO_(::google::protobuf::internal::WireFormatLite::ReadString(
              input, this->add_daysendfrdidlst()));
        ::google::protobuf::internal::WireFormat::VerifyUTF8String(
          this->daysendfrdidlst(0).data(), this->daysendfrdidlst(0).length(),
          ::google::protobuf::internal::WireFormat::PARSE);
        if (input->ExpectTag(10)) goto parse_daySendFrdIDLst;
        if (input->ExpectTag(18)) goto parse_dayAskFrdIDLst;
        break;
      }
      
      // repeated string dayAskFrdIDLst = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_dayAskFrdIDLst:
        DO_(::google::protobuf::internal::WireFormatLite::ReadString(
              input, this->add_dayaskfrdidlst()));
        ::google::protobuf::internal::WireFormat::VerifyUTF8String(
          this->dayaskfrdidlst(0).data(), this->dayaskfrdidlst(0).length(),
          ::google::protobuf::internal::WireFormat::PARSE);
        if (input->ExpectTag(18)) goto parse_dayAskFrdIDLst;
        if (input->ExpectTag(24)) goto parse_dayGetGift2BagCnt;
        break;
      }
      
      // optional int32 dayGetGift2BagCnt = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_dayGetGift2BagCnt:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &daygetgift2bagcnt_));
        _set_bit(2);
        if (input->ExpectTag(32)) goto parse_dayAskGift2BagCnt;
        break;
      }
      
      // optional int32 dayAskGift2BagCnt = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_dayAskGift2BagCnt:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &dayaskgift2bagcnt_));
        _set_bit(3);
        if (input->ExpectTag(40)) goto parse_dayGetGiftCnt;
        break;
      }
      
      // optional int32 dayGetGiftCnt = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_dayGetGiftCnt:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &daygetgiftcnt_));
        _set_bit(4);
        if (input->ExpectTag(48)) goto parse_dayResendGiftCnt;
        break;
      }
      
      // optional int32 dayResendGiftCnt = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_dayResendGiftCnt:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &dayresendgiftcnt_));
        _set_bit(5);
        if (input->ExpectTag(58)) goto parse_getGiftInfo;
        break;
      }
      
      // repeated .DB_GiftFrdInfo getGiftInfo = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_getGiftInfo:
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, add_getgiftinfo()));
        if (input->ExpectTag(58)) goto parse_getGiftInfo;
        if (input->ExpectTag(66)) goto parse_finishGiftInfo;
        break;
      }
      
      // repeated .DB_GiftFrdInfo finishGiftInfo = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_finishGiftInfo:
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, add_finishgiftinfo()));
        if (input->ExpectTag(66)) goto parse_finishGiftInfo;
        if (input->ExpectTag(72)) goto parse_msgIdx;
        break;
      }
      
      // optional int32 msgIdx = 9 [default = 0];
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_msgIdx:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &msgidx_));
        _set_bit(8);
        if (input->ExpectTag(80)) goto parse_lastLoginTime;
        break;
      }
      
      // optional int64 lastLoginTime = 10 [default = 0];
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_lastLoginTime:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt64(
              input, &lastlogintime_));
        _set_bit(9);
        if (input->ExpectTag(88)) goto parse_daySendGiftCnt;
        break;
      }
      
      // optional int32 daySendGiftCnt = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_daySendGiftCnt:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &daysendgiftcnt_));
        _set_bit(10);
        if (input->ExpectTag(98)) goto parse_newComerGiftList;
        break;
      }
      
      // repeated .DB_NewComerGiftList newComerGiftList = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_newComerGiftList:
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, add_newcomergiftlist()));
        if (input->ExpectTag(98)) goto parse_newComerGiftList;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DB_GiftInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    DB_GiftInfo::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // repeated string daySendFrdIDLst = 1;
  for (int i = 0; i < this->daysendfrdidlst_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->daysendfrdidlst(i).data(), this->daysendfrdidlst(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->daysendfrdidlst(i), output);
  }
  
  // repeated string dayAskFrdIDLst = 2;
  for (int i = 0; i < this->dayaskfrdidlst_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->dayaskfrdidlst(i).data(), this->dayaskfrdidlst(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->dayaskfrdidlst(i), output);
  }
  
  // optional int32 dayGetGift2BagCnt = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->daygetgift2bagcnt(), output);
  }
  
  // optional int32 dayAskGift2BagCnt = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->dayaskgift2bagcnt(), output);
  }
  
  // optional int32 dayGetGiftCnt = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->daygetgiftcnt(), output);
  }
  
  // optional int32 dayResendGiftCnt = 6;
  if (_has_bit(5)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->dayresendgiftcnt(), output);
  }
  
  // repeated .DB_GiftFrdInfo getGiftInfo = 7;
  for (int i = 0; i < this->getgiftinfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      7, this->getgiftinfo(i), output);
  }
  
  // repeated .DB_GiftFrdInfo finishGiftInfo = 8;
  for (int i = 0; i < this->finishgiftinfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      8, this->finishgiftinfo(i), output);
  }
  
  // optional int32 msgIdx = 9 [default = 0];
  if (_has_bit(8)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->msgidx(), output);
  }
  
  // optional int64 lastLoginTime = 10 [default = 0];
  if (_has_bit(9)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(10, this->lastlogintime(), output);
  }
  
  // optional int32 daySendGiftCnt = 11;
  if (_has_bit(10)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->daysendgiftcnt(), output);
  }
  
  // repeated .DB_NewComerGiftList newComerGiftList = 12;
  for (int i = 0; i < this->newcomergiftlist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      12, this->newcomergiftlist(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DB_GiftInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated string daySendFrdIDLst = 1;
  for (int i = 0; i < this->daysendfrdidlst_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->daysendfrdidlst(i).data(), this->daysendfrdidlst(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(1, this->daysendfrdidlst(i), target);
  }
  
  // repeated string dayAskFrdIDLst = 2;
  for (int i = 0; i < this->dayaskfrdidlst_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->dayaskfrdidlst(i).data(), this->dayaskfrdidlst(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(2, this->dayaskfrdidlst(i), target);
  }
  
  // optional int32 dayGetGift2BagCnt = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->daygetgift2bagcnt(), target);
  }
  
  // optional int32 dayAskGift2BagCnt = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->dayaskgift2bagcnt(), target);
  }
  
  // optional int32 dayGetGiftCnt = 5;
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->daygetgiftcnt(), target);
  }
  
  // optional int32 dayResendGiftCnt = 6;
  if (_has_bit(5)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->dayresendgiftcnt(), target);
  }
  
  // repeated .DB_GiftFrdInfo getGiftInfo = 7;
  for (int i = 0; i < this->getgiftinfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->getgiftinfo(i), target);
  }
  
  // repeated .DB_GiftFrdInfo finishGiftInfo = 8;
  for (int i = 0; i < this->finishgiftinfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->finishgiftinfo(i), target);
  }
  
  // optional int32 msgIdx = 9 [default = 0];
  if (_has_bit(8)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->msgidx(), target);
  }
  
  // optional int64 lastLoginTime = 10 [default = 0];
  if (_has_bit(9)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(10, this->lastlogintime(), target);
  }
  
  // optional int32 daySendGiftCnt = 11;
  if (_has_bit(10)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->daysendgiftcnt(), target);
  }
  
  // repeated .DB_NewComerGiftList newComerGiftList = 12;
  for (int i = 0; i < this->newcomergiftlist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        12, this->newcomergiftlist(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DB_GiftInfo::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    // optional int32 dayGetGift2BagCnt = 3;
    if (has_daygetgift2bagcnt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->daygetgift2bagcnt());
    }
    
    // optional int32 dayAskGift2BagCnt = 4;
    if (has_dayaskgift2bagcnt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->dayaskgift2bagcnt());
    }
    
    // optional int32 dayGetGiftCnt = 5;
    if (has_daygetgiftcnt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->daygetgiftcnt());
    }
    
    // optional int32 dayResendGiftCnt = 6;
    if (has_dayresendgiftcnt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->dayresendgiftcnt());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 msgIdx = 9 [default = 0];
    if (has_msgidx()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->msgidx());
    }
    
    // optional int64 lastLoginTime = 10 [default = 0];
    if (has_lastlogintime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->lastlogintime());
    }
    
    // optional int32 daySendGiftCnt = 11;
    if (has_daysendgiftcnt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->daysendgiftcnt());
    }
    
  }
  // repeated string daySendFrdIDLst = 1;
  total_size += 1 * this->daysendfrdidlst_size();
  for (int i = 0; i < this->daysendfrdidlst_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->daysendfrdidlst(i));
  }
  
  // repeated string dayAskFrdIDLst = 2;
  total_size += 1 * this->dayaskfrdidlst_size();
  for (int i = 0; i < this->dayaskfrdidlst_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->dayaskfrdidlst(i));
  }
  
  // repeated .DB_GiftFrdInfo getGiftInfo = 7;
  total_size += 1 * this->getgiftinfo_size();
  for (int i = 0; i < this->getgiftinfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->getgiftinfo(i));
  }
  
  // repeated .DB_GiftFrdInfo finishGiftInfo = 8;
  total_size += 1 * this->finishgiftinfo_size();
  for (int i = 0; i < this->finishgiftinfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->finishgiftinfo(i));
  }
  
  // repeated .DB_NewComerGiftList newComerGiftList = 12;
  total_size += 1 * this->newcomergiftlist_size();
  for (int i = 0; i < this->newcomergiftlist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->newcomergiftlist(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void DB_GiftInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DB_GiftInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DB_GiftInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DB_GiftInfo::MergeFrom(const DB_GiftInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  daysendfrdidlst_.MergeFrom(from.daysendfrdidlst_);
  dayaskfrdidlst_.MergeFrom(from.dayaskfrdidlst_);
  getgiftinfo_.MergeFrom(from.getgiftinfo_);
  finishgiftinfo_.MergeFrom(from.finishgiftinfo_);
  newcomergiftlist_.MergeFrom(from.newcomergiftlist_);
  if (from._has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    if (from._has_bit(2)) {
      set_daygetgift2bagcnt(from.daygetgift2bagcnt());
    }
    if (from._has_bit(3)) {
      set_dayaskgift2bagcnt(from.dayaskgift2bagcnt());
    }
    if (from._has_bit(4)) {
      set_daygetgiftcnt(from.daygetgiftcnt());
    }
    if (from._has_bit(5)) {
      set_dayresendgiftcnt(from.dayresendgiftcnt());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from._has_bit(8)) {
      set_msgidx(from.msgidx());
    }
    if (from._has_bit(9)) {
      set_lastlogintime(from.lastlogintime());
    }
    if (from._has_bit(10)) {
      set_daysendgiftcnt(from.daysendgiftcnt());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DB_GiftInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DB_GiftInfo::CopyFrom(const DB_GiftInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DB_GiftInfo::IsInitialized() const {
  
  return true;
}

void DB_GiftInfo::Swap(DB_GiftInfo* other) {
  if (other != this) {
    daysendfrdidlst_.Swap(&other->daysendfrdidlst_);
    dayaskfrdidlst_.Swap(&other->dayaskfrdidlst_);
    std::swap(daygetgift2bagcnt_, other->daygetgift2bagcnt_);
    std::swap(dayaskgift2bagcnt_, other->dayaskgift2bagcnt_);
    std::swap(daygetgiftcnt_, other->daygetgiftcnt_);
    std::swap(dayresendgiftcnt_, other->dayresendgiftcnt_);
    getgiftinfo_.Swap(&other->getgiftinfo_);
    finishgiftinfo_.Swap(&other->finishgiftinfo_);
    std::swap(msgidx_, other->msgidx_);
    std::swap(lastlogintime_, other->lastlogintime_);
    std::swap(daysendgiftcnt_, other->daysendgiftcnt_);
    newcomergiftlist_.Swap(&other->newcomergiftlist_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DB_GiftInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DB_GiftInfo_descriptor_;
  metadata.reflection = DB_GiftInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DB_DayAtkUser::kDayAtkUserIDFieldNumber;
const int DB_DayAtkUser::kDayAtkUserCntFieldNumber;
#endif  // !_MSC_VER

DB_DayAtkUser::DB_DayAtkUser() {
  SharedCtor();
}

void DB_DayAtkUser::InitAsDefaultInstance() {
}

DB_DayAtkUser::DB_DayAtkUser(const DB_DayAtkUser& from) {
  SharedCtor();
  MergeFrom(from);
}

void DB_DayAtkUser::SharedCtor() {
  _cached_size_ = 0;
  dayatkuserid_ = GOOGLE_LONGLONG(0);
  dayatkusercnt_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DB_DayAtkUser::~DB_DayAtkUser() {
  SharedDtor();
}

void DB_DayAtkUser::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* DB_DayAtkUser::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DB_DayAtkUser_descriptor_;
}

const DB_DayAtkUser& DB_DayAtkUser::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dbinterface_5fsub_2eproto();  return *default_instance_;
}

DB_DayAtkUser* DB_DayAtkUser::default_instance_ = NULL;

DB_DayAtkUser* DB_DayAtkUser::New() const {
  return new DB_DayAtkUser;
}

void DB_DayAtkUser::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    dayatkuserid_ = GOOGLE_LONGLONG(0);
    dayatkusercnt_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DB_DayAtkUser::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 dayAtkUserID = 1 [default = 0];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt64(
              input, &dayatkuserid_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_dayAtkUserCnt;
        break;
      }
      
      // optional int64 dayAtkUserCnt = 2 [default = 0];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_dayAtkUserCnt:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt64(
              input, &dayatkusercnt_));
        _set_bit(1);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DB_DayAtkUser::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    DB_DayAtkUser::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional int64 dayAtkUserID = 1 [default = 0];
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->dayatkuserid(), output);
  }
  
  // optional int64 dayAtkUserCnt = 2 [default = 0];
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->dayatkusercnt(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DB_DayAtkUser::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int64 dayAtkUserID = 1 [default = 0];
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->dayatkuserid(), target);
  }
  
  // optional int64 dayAtkUserCnt = 2 [default = 0];
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->dayatkusercnt(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DB_DayAtkUser::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 dayAtkUserID = 1 [default = 0];
    if (has_dayatkuserid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->dayatkuserid());
    }
    
    // optional int64 dayAtkUserCnt = 2 [default = 0];
    if (has_dayatkusercnt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->dayatkusercnt());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void DB_DayAtkUser::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DB_DayAtkUser* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DB_DayAtkUser*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DB_DayAtkUser::MergeFrom(const DB_DayAtkUser& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_dayatkuserid(from.dayatkuserid());
    }
    if (from._has_bit(1)) {
      set_dayatkusercnt(from.dayatkusercnt());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DB_DayAtkUser::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DB_DayAtkUser::CopyFrom(const DB_DayAtkUser& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DB_DayAtkUser::IsInitialized() const {
  
  return true;
}

void DB_DayAtkUser::Swap(DB_DayAtkUser* other) {
  if (other != this) {
    std::swap(dayatkuserid_, other->dayatkuserid_);
    std::swap(dayatkusercnt_, other->dayatkusercnt_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DB_DayAtkUser::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DB_DayAtkUser_descriptor_;
  metadata.reflection = DB_DayAtkUser_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DB_UserStar::kEnemyIDFieldNumber;
const int DB_UserStar::kAttactCntFieldNumber;
const int DB_UserStar::kRecoveryCntFieldNumber;
const int DB_UserStar::kEnemyListFieldNumber;
const int DB_UserStar::kDayAtkInfoFieldNumber;
const int DB_UserStar::kDayDestroySlaveRoomCntFieldNumber;
const int DB_UserStar::kDayAtkCountFieldNumber;
const int DB_UserStar::kDayDefCountFieldNumber;
const int DB_UserStar::kSprweaponhurtednumFieldNumber;
const int DB_UserStar::kSprweaponhurtedtimeFieldNumber;
#endif  // !_MSC_VER

DB_UserStar::DB_UserStar() {
  SharedCtor();
}

void DB_UserStar::InitAsDefaultInstance() {
}

DB_UserStar::DB_UserStar(const DB_UserStar& from) {
  SharedCtor();
  MergeFrom(from);
}

void DB_UserStar::SharedCtor() {
  _cached_size_ = 0;
  daydestroyslaveroomcnt_ = 0;
  dayatkcount_ = 0;
  daydefcount_ = 0;
  sprweaponhurtednum_ = 0;
  sprweaponhurtedtime_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DB_UserStar::~DB_UserStar() {
  SharedDtor();
}

void DB_UserStar::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* DB_UserStar::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DB_UserStar_descriptor_;
}

const DB_UserStar& DB_UserStar::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dbinterface_5fsub_2eproto();  return *default_instance_;
}

DB_UserStar* DB_UserStar::default_instance_ = NULL;

DB_UserStar* DB_UserStar::New() const {
  return new DB_UserStar;
}

void DB_UserStar::Clear() {
  if (_has_bits_[5 / 32] & (0xffu << (5 % 32))) {
    daydestroyslaveroomcnt_ = 0;
    dayatkcount_ = 0;
    daydefcount_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    sprweaponhurtednum_ = 0;
    sprweaponhurtedtime_ = 0;
  }
  enemyid_.Clear();
  attactcnt_.Clear();
  recoverycnt_.Clear();
  enemylist_.Clear();
  dayatkinfo_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DB_UserStar::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated int64 enemyID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_enemyID:
        ::google::protobuf::int64 value;
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt64(
              input, &value));
        add_enemyid(value);
        if (input->ExpectTag(8)) goto parse_enemyID;
        if (input->ExpectTag(16)) goto parse_attactCnt;
        break;
      }
      
      // repeated int64 attactCnt = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_attactCnt:
        ::google::protobuf::int64 value;
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt64(
              input, &value));
        add_attactcnt(value);
        if (input->ExpectTag(16)) goto parse_attactCnt;
        if (input->ExpectTag(24)) goto parse_recoveryCnt;
        break;
      }
      
      // repeated int64 recoveryCnt = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_recoveryCnt:
        ::google::protobuf::int64 value;
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt64(
              input, &value));
        add_recoverycnt(value);
        if (input->ExpectTag(24)) goto parse_recoveryCnt;
        if (input->ExpectTag(34)) goto parse_EnemyList;
        break;
      }
      
      // repeated .DB_EnemyStar EnemyList = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_EnemyList:
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, add_enemylist()));
        if (input->ExpectTag(34)) goto parse_EnemyList;
        if (input->ExpectTag(42)) goto parse_dayAtkInfo;
        break;
      }
      
      // repeated .DB_DayAtkUser dayAtkInfo = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_dayAtkInfo:
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, add_dayatkinfo()));
        if (input->ExpectTag(42)) goto parse_dayAtkInfo;
        if (input->ExpectTag(48)) goto parse_dayDestroySlaveRoomCnt;
        break;
      }
      
      // optional int32 dayDestroySlaveRoomCnt = 6 [default = 0];
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_dayDestroySlaveRoomCnt:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &daydestroyslaveroomcnt_));
        _set_bit(5);
        if (input->ExpectTag(56)) goto parse_dayAtkCount;
        break;
      }
      
      // optional int32 dayAtkCount = 7 [default = 0];
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_dayAtkCount:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &dayatkcount_));
        _set_bit(6);
        if (input->ExpectTag(64)) goto parse_dayDefCount;
        break;
      }
      
      // optional int32 dayDefCount = 8 [default = 0];
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_dayDefCount:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &daydefcount_));
        _set_bit(7);
        if (input->ExpectTag(72)) goto parse_sprweaponhurtednum;
        break;
      }
      
      // optional int32 sprweaponhurtednum = 9 [default = 0];
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_sprweaponhurtednum:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &sprweaponhurtednum_));
        _set_bit(8);
        if (input->ExpectTag(80)) goto parse_sprweaponhurtedtime;
        break;
      }
      
      // optional int32 sprweaponhurtedtime = 10 [default = 0];
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_sprweaponhurtedtime:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &sprweaponhurtedtime_));
        _set_bit(9);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DB_UserStar::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    DB_UserStar::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // repeated int64 enemyID = 1;
  for (int i = 0; i < this->enemyid_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(
      1, this->enemyid(i), output);
  }
  
  // repeated int64 attactCnt = 2;
  for (int i = 0; i < this->attactcnt_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(
      2, this->attactcnt(i), output);
  }
  
  // repeated int64 recoveryCnt = 3;
  for (int i = 0; i < this->recoverycnt_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(
      3, this->recoverycnt(i), output);
  }
  
  // repeated .DB_EnemyStar EnemyList = 4;
  for (int i = 0; i < this->enemylist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      4, this->enemylist(i), output);
  }
  
  // repeated .DB_DayAtkUser dayAtkInfo = 5;
  for (int i = 0; i < this->dayatkinfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      5, this->dayatkinfo(i), output);
  }
  
  // optional int32 dayDestroySlaveRoomCnt = 6 [default = 0];
  if (_has_bit(5)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->daydestroyslaveroomcnt(), output);
  }
  
  // optional int32 dayAtkCount = 7 [default = 0];
  if (_has_bit(6)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->dayatkcount(), output);
  }
  
  // optional int32 dayDefCount = 8 [default = 0];
  if (_has_bit(7)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->daydefcount(), output);
  }
  
  // optional int32 sprweaponhurtednum = 9 [default = 0];
  if (_has_bit(8)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->sprweaponhurtednum(), output);
  }
  
  // optional int32 sprweaponhurtedtime = 10 [default = 0];
  if (_has_bit(9)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->sprweaponhurtedtime(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DB_UserStar::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated int64 enemyID = 1;
  for (int i = 0; i < this->enemyid_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt64ToArray(1, this->enemyid(i), target);
  }
  
  // repeated int64 attactCnt = 2;
  for (int i = 0; i < this->attactcnt_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt64ToArray(2, this->attactcnt(i), target);
  }
  
  // repeated int64 recoveryCnt = 3;
  for (int i = 0; i < this->recoverycnt_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt64ToArray(3, this->recoverycnt(i), target);
  }
  
  // repeated .DB_EnemyStar EnemyList = 4;
  for (int i = 0; i < this->enemylist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->enemylist(i), target);
  }
  
  // repeated .DB_DayAtkUser dayAtkInfo = 5;
  for (int i = 0; i < this->dayatkinfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->dayatkinfo(i), target);
  }
  
  // optional int32 dayDestroySlaveRoomCnt = 6 [default = 0];
  if (_has_bit(5)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->daydestroyslaveroomcnt(), target);
  }
  
  // optional int32 dayAtkCount = 7 [default = 0];
  if (_has_bit(6)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->dayatkcount(), target);
  }
  
  // optional int32 dayDefCount = 8 [default = 0];
  if (_has_bit(7)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->daydefcount(), target);
  }
  
  // optional int32 sprweaponhurtednum = 9 [default = 0];
  if (_has_bit(8)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->sprweaponhurtednum(), target);
  }
  
  // optional int32 sprweaponhurtedtime = 10 [default = 0];
  if (_has_bit(9)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->sprweaponhurtedtime(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DB_UserStar::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[5 / 32] & (0xffu << (5 % 32))) {
    // optional int32 dayDestroySlaveRoomCnt = 6 [default = 0];
    if (has_daydestroyslaveroomcnt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->daydestroyslaveroomcnt());
    }
    
    // optional int32 dayAtkCount = 7 [default = 0];
    if (has_dayatkcount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->dayatkcount());
    }
    
    // optional int32 dayDefCount = 8 [default = 0];
    if (has_daydefcount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->daydefcount());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 sprweaponhurtednum = 9 [default = 0];
    if (has_sprweaponhurtednum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sprweaponhurtednum());
    }
    
    // optional int32 sprweaponhurtedtime = 10 [default = 0];
    if (has_sprweaponhurtedtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sprweaponhurtedtime());
    }
    
  }
  // repeated int64 enemyID = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->enemyid_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int64Size(this->enemyid(i));
    }
    total_size += 1 * this->enemyid_size() + data_size;
  }
  
  // repeated int64 attactCnt = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->attactcnt_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int64Size(this->attactcnt(i));
    }
    total_size += 1 * this->attactcnt_size() + data_size;
  }
  
  // repeated int64 recoveryCnt = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->recoverycnt_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int64Size(this->recoverycnt(i));
    }
    total_size += 1 * this->recoverycnt_size() + data_size;
  }
  
  // repeated .DB_EnemyStar EnemyList = 4;
  total_size += 1 * this->enemylist_size();
  for (int i = 0; i < this->enemylist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->enemylist(i));
  }
  
  // repeated .DB_DayAtkUser dayAtkInfo = 5;
  total_size += 1 * this->dayatkinfo_size();
  for (int i = 0; i < this->dayatkinfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->dayatkinfo(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void DB_UserStar::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DB_UserStar* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DB_UserStar*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DB_UserStar::MergeFrom(const DB_UserStar& from) {
  GOOGLE_CHECK_NE(&from, this);
  enemyid_.MergeFrom(from.enemyid_);
  attactcnt_.MergeFrom(from.attactcnt_);
  recoverycnt_.MergeFrom(from.recoverycnt_);
  enemylist_.MergeFrom(from.enemylist_);
  dayatkinfo_.MergeFrom(from.dayatkinfo_);
  if (from._has_bits_[5 / 32] & (0xffu << (5 % 32))) {
    if (from._has_bit(5)) {
      set_daydestroyslaveroomcnt(from.daydestroyslaveroomcnt());
    }
    if (from._has_bit(6)) {
      set_dayatkcount(from.dayatkcount());
    }
    if (from._has_bit(7)) {
      set_daydefcount(from.daydefcount());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from._has_bit(8)) {
      set_sprweaponhurtednum(from.sprweaponhurtednum());
    }
    if (from._has_bit(9)) {
      set_sprweaponhurtedtime(from.sprweaponhurtedtime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DB_UserStar::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DB_UserStar::CopyFrom(const DB_UserStar& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DB_UserStar::IsInitialized() const {
  
  return true;
}

void DB_UserStar::Swap(DB_UserStar* other) {
  if (other != this) {
    enemyid_.Swap(&other->enemyid_);
    attactcnt_.Swap(&other->attactcnt_);
    recoverycnt_.Swap(&other->recoverycnt_);
    enemylist_.Swap(&other->enemylist_);
    dayatkinfo_.Swap(&other->dayatkinfo_);
    std::swap(daydestroyslaveroomcnt_, other->daydestroyslaveroomcnt_);
    std::swap(dayatkcount_, other->dayatkcount_);
    std::swap(daydefcount_, other->daydefcount_);
    std::swap(sprweaponhurtednum_, other->sprweaponhurtednum_);
    std::swap(sprweaponhurtedtime_, other->sprweaponhurtedtime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DB_UserStar::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DB_UserStar_descriptor_;
  metadata.reflection = DB_UserStar_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DB_DefenseActivityNode::kActivityidFieldNumber;
const int DB_DefenseActivityNode::kActivitycutFieldNumber;
const int DB_DefenseActivityNode::kAwardlistFieldNumber;
const int DB_DefenseActivityNode::kLstcustomtimeFieldNumber;
#endif  // !_MSC_VER

DB_DefenseActivityNode::DB_DefenseActivityNode() {
  SharedCtor();
}

void DB_DefenseActivityNode::InitAsDefaultInstance() {
}

DB_DefenseActivityNode::DB_DefenseActivityNode(const DB_DefenseActivityNode& from) {
  SharedCtor();
  MergeFrom(from);
}

void DB_DefenseActivityNode::SharedCtor() {
  _cached_size_ = 0;
  activityid_ = 0;
  activitycut_ = 0;
  lstcustomtime_ = -1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DB_DefenseActivityNode::~DB_DefenseActivityNode() {
  SharedDtor();
}

void DB_DefenseActivityNode::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* DB_DefenseActivityNode::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DB_DefenseActivityNode_descriptor_;
}

const DB_DefenseActivityNode& DB_DefenseActivityNode::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dbinterface_5fsub_2eproto();  return *default_instance_;
}

DB_DefenseActivityNode* DB_DefenseActivityNode::default_instance_ = NULL;

DB_DefenseActivityNode* DB_DefenseActivityNode::New() const {
  return new DB_DefenseActivityNode;
}

void DB_DefenseActivityNode::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    activityid_ = 0;
    activitycut_ = 0;
    lstcustomtime_ = -1;
  }
  awardlist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DB_DefenseActivityNode::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 activityid = 1 [default = 0];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &activityid_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_activitycut;
        break;
      }
      
      // optional int32 activitycut = 2 [default = 0];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_activitycut:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &activitycut_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_awardlist;
        break;
      }
      
      // repeated bool awardlist = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_awardlist:
        bool value;
        DO_(::google::protobuf::internal::WireFormatLite::ReadBool(
              input, &value));
        add_awardlist(value);
        if (input->ExpectTag(24)) goto parse_awardlist;
        if (input->ExpectTag(32)) goto parse_lstcustomtime;
        break;
      }
      
      // optional int32 lstcustomtime = 4 [default = -1];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_lstcustomtime:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &lstcustomtime_));
        _set_bit(3);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DB_DefenseActivityNode::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    DB_DefenseActivityNode::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional int32 activityid = 1 [default = 0];
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->activityid(), output);
  }
  
  // optional int32 activitycut = 2 [default = 0];
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->activitycut(), output);
  }
  
  // repeated bool awardlist = 3;
  for (int i = 0; i < this->awardlist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(
      3, this->awardlist(i), output);
  }
  
  // optional int32 lstcustomtime = 4 [default = -1];
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->lstcustomtime(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DB_DefenseActivityNode::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 activityid = 1 [default = 0];
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->activityid(), target);
  }
  
  // optional int32 activitycut = 2 [default = 0];
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->activitycut(), target);
  }
  
  // repeated bool awardlist = 3;
  for (int i = 0; i < this->awardlist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteBoolToArray(3, this->awardlist(i), target);
  }
  
  // optional int32 lstcustomtime = 4 [default = -1];
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->lstcustomtime(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DB_DefenseActivityNode::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 activityid = 1 [default = 0];
    if (has_activityid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->activityid());
    }
    
    // optional int32 activitycut = 2 [default = 0];
    if (has_activitycut()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->activitycut());
    }
    
    // optional int32 lstcustomtime = 4 [default = -1];
    if (has_lstcustomtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->lstcustomtime());
    }
    
  }
  // repeated bool awardlist = 3;
  {
    int data_size = 0;
    data_size = 1 * this->awardlist_size();
    total_size += 1 * this->awardlist_size() + data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void DB_DefenseActivityNode::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DB_DefenseActivityNode* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DB_DefenseActivityNode*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DB_DefenseActivityNode::MergeFrom(const DB_DefenseActivityNode& from) {
  GOOGLE_CHECK_NE(&from, this);
  awardlist_.MergeFrom(from.awardlist_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_activityid(from.activityid());
    }
    if (from._has_bit(1)) {
      set_activitycut(from.activitycut());
    }
    if (from._has_bit(3)) {
      set_lstcustomtime(from.lstcustomtime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DB_DefenseActivityNode::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DB_DefenseActivityNode::CopyFrom(const DB_DefenseActivityNode& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DB_DefenseActivityNode::IsInitialized() const {
  
  return true;
}

void DB_DefenseActivityNode::Swap(DB_DefenseActivityNode* other) {
  if (other != this) {
    std::swap(activityid_, other->activityid_);
    std::swap(activitycut_, other->activitycut_);
    awardlist_.Swap(&other->awardlist_);
    std::swap(lstcustomtime_, other->lstcustomtime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DB_DefenseActivityNode::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DB_DefenseActivityNode_descriptor_;
  metadata.reflection = DB_DefenseActivityNode_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DB_DefenseActivity::kActivitiesFieldNumber;
#endif  // !_MSC_VER

DB_DefenseActivity::DB_DefenseActivity() {
  SharedCtor();
}

void DB_DefenseActivity::InitAsDefaultInstance() {
  activities_ = const_cast< ::DB_DefenseActivityNode*>(&::DB_DefenseActivityNode::default_instance());
}

DB_DefenseActivity::DB_DefenseActivity(const DB_DefenseActivity& from) {
  SharedCtor();
  MergeFrom(from);
}

void DB_DefenseActivity::SharedCtor() {
  _cached_size_ = 0;
  activities_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DB_DefenseActivity::~DB_DefenseActivity() {
  SharedDtor();
}

void DB_DefenseActivity::SharedDtor() {
  if (this != default_instance_) {
    delete activities_;
  }
}

const ::google::protobuf::Descriptor* DB_DefenseActivity::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DB_DefenseActivity_descriptor_;
}

const DB_DefenseActivity& DB_DefenseActivity::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dbinterface_5fsub_2eproto();  return *default_instance_;
}

DB_DefenseActivity* DB_DefenseActivity::default_instance_ = NULL;

DB_DefenseActivity* DB_DefenseActivity::New() const {
  return new DB_DefenseActivity;
}

void DB_DefenseActivity::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (activities_ != NULL) activities_->::DB_DefenseActivityNode::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DB_DefenseActivity::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .DB_DefenseActivityNode activities = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
             input, mutable_activities()));
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DB_DefenseActivity::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    DB_DefenseActivity::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional .DB_DefenseActivityNode activities = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      1, this->activities(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DB_DefenseActivity::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .DB_DefenseActivityNode activities = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->activities(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DB_DefenseActivity::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .DB_DefenseActivityNode activities = 1;
    if (has_activities()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->activities());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void DB_DefenseActivity::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DB_DefenseActivity* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DB_DefenseActivity*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DB_DefenseActivity::MergeFrom(const DB_DefenseActivity& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      mutable_activities()->::DB_DefenseActivityNode::MergeFrom(from.activities());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DB_DefenseActivity::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DB_DefenseActivity::CopyFrom(const DB_DefenseActivity& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DB_DefenseActivity::IsInitialized() const {
  
  return true;
}

void DB_DefenseActivity::Swap(DB_DefenseActivity* other) {
  if (other != this) {
    std::swap(activities_, other->activities_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DB_DefenseActivity::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DB_DefenseActivity_descriptor_;
  metadata.reflection = DB_DefenseActivity_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DB_DefenseHonor::kLastdefencehonoridFieldNumber;
const int DB_DefenseHonor::kGaindefencehornorcntFieldNumber;
#endif  // !_MSC_VER

DB_DefenseHonor::DB_DefenseHonor() {
  SharedCtor();
}

void DB_DefenseHonor::InitAsDefaultInstance() {
}

DB_DefenseHonor::DB_DefenseHonor(const DB_DefenseHonor& from) {
  SharedCtor();
  MergeFrom(from);
}

void DB_DefenseHonor::SharedCtor() {
  _cached_size_ = 0;
  lastdefencehonorid_ = GOOGLE_LONGLONG(0);
  gaindefencehornorcnt_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DB_DefenseHonor::~DB_DefenseHonor() {
  SharedDtor();
}

void DB_DefenseHonor::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* DB_DefenseHonor::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DB_DefenseHonor_descriptor_;
}

const DB_DefenseHonor& DB_DefenseHonor::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dbinterface_5fsub_2eproto();  return *default_instance_;
}

DB_DefenseHonor* DB_DefenseHonor::default_instance_ = NULL;

DB_DefenseHonor* DB_DefenseHonor::New() const {
  return new DB_DefenseHonor;
}

void DB_DefenseHonor::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    lastdefencehonorid_ = GOOGLE_LONGLONG(0);
    gaindefencehornorcnt_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DB_DefenseHonor::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 lastdefencehonorid = 1 [default = 0];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt64(
              input, &lastdefencehonorid_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_gaindefencehornorcnt;
        break;
      }
      
      // optional int32 gaindefencehornorcnt = 2 [default = 0];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_gaindefencehornorcnt:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &gaindefencehornorcnt_));
        _set_bit(1);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DB_DefenseHonor::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    DB_DefenseHonor::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional int64 lastdefencehonorid = 1 [default = 0];
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->lastdefencehonorid(), output);
  }
  
  // optional int32 gaindefencehornorcnt = 2 [default = 0];
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->gaindefencehornorcnt(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DB_DefenseHonor::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int64 lastdefencehonorid = 1 [default = 0];
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->lastdefencehonorid(), target);
  }
  
  // optional int32 gaindefencehornorcnt = 2 [default = 0];
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->gaindefencehornorcnt(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DB_DefenseHonor::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 lastdefencehonorid = 1 [default = 0];
    if (has_lastdefencehonorid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->lastdefencehonorid());
    }
    
    // optional int32 gaindefencehornorcnt = 2 [default = 0];
    if (has_gaindefencehornorcnt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gaindefencehornorcnt());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void DB_DefenseHonor::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DB_DefenseHonor* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DB_DefenseHonor*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DB_DefenseHonor::MergeFrom(const DB_DefenseHonor& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_lastdefencehonorid(from.lastdefencehonorid());
    }
    if (from._has_bit(1)) {
      set_gaindefencehornorcnt(from.gaindefencehornorcnt());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DB_DefenseHonor::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DB_DefenseHonor::CopyFrom(const DB_DefenseHonor& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DB_DefenseHonor::IsInitialized() const {
  
  return true;
}

void DB_DefenseHonor::Swap(DB_DefenseHonor* other) {
  if (other != this) {
    std::swap(lastdefencehonorid_, other->lastdefencehonorid_);
    std::swap(gaindefencehornorcnt_, other->gaindefencehornorcnt_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DB_DefenseHonor::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DB_DefenseHonor_descriptor_;
  metadata.reflection = DB_DefenseHonor_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DB_BuffUnit::kBufftypeFieldNumber;
const int DB_BuffUnit::kBuffEndTimeFieldNumber;
#endif  // !_MSC_VER

DB_BuffUnit::DB_BuffUnit() {
  SharedCtor();
}

void DB_BuffUnit::InitAsDefaultInstance() {
}

DB_BuffUnit::DB_BuffUnit(const DB_BuffUnit& from) {
  SharedCtor();
  MergeFrom(from);
}

void DB_BuffUnit::SharedCtor() {
  _cached_size_ = 0;
  bufftype_ = 0;
  buffendtime_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DB_BuffUnit::~DB_BuffUnit() {
  SharedDtor();
}

void DB_BuffUnit::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* DB_BuffUnit::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DB_BuffUnit_descriptor_;
}

const DB_BuffUnit& DB_BuffUnit::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dbinterface_5fsub_2eproto();  return *default_instance_;
}

DB_BuffUnit* DB_BuffUnit::default_instance_ = NULL;

DB_BuffUnit* DB_BuffUnit::New() const {
  return new DB_BuffUnit;
}

void DB_BuffUnit::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    bufftype_ = 0;
    buffendtime_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DB_BuffUnit::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 bufftype = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &bufftype_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_buffEndTime;
        break;
      }
      
      // optional uint32 buffEndTime = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_buffEndTime:
        DO_(::google::protobuf::internal::WireFormatLite::ReadUInt32(
              input, &buffendtime_));
        _set_bit(1);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DB_BuffUnit::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    DB_BuffUnit::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional int32 bufftype = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->bufftype(), output);
  }
  
  // optional uint32 buffEndTime = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->buffendtime(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DB_BuffUnit::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 bufftype = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->bufftype(), target);
  }
  
  // optional uint32 buffEndTime = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->buffendtime(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DB_BuffUnit::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 bufftype = 1;
    if (has_bufftype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bufftype());
    }
    
    // optional uint32 buffEndTime = 2;
    if (has_buffendtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->buffendtime());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void DB_BuffUnit::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DB_BuffUnit* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DB_BuffUnit*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DB_BuffUnit::MergeFrom(const DB_BuffUnit& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_bufftype(from.bufftype());
    }
    if (from._has_bit(1)) {
      set_buffendtime(from.buffendtime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DB_BuffUnit::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DB_BuffUnit::CopyFrom(const DB_BuffUnit& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DB_BuffUnit::IsInitialized() const {
  
  return true;
}

void DB_BuffUnit::Swap(DB_BuffUnit* other) {
  if (other != this) {
    std::swap(bufftype_, other->bufftype_);
    std::swap(buffendtime_, other->buffendtime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DB_BuffUnit::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DB_BuffUnit_descriptor_;
  metadata.reflection = DB_BuffUnit_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DB_BuffData::kBufflistFieldNumber;
#endif  // !_MSC_VER

DB_BuffData::DB_BuffData() {
  SharedCtor();
}

void DB_BuffData::InitAsDefaultInstance() {
}

DB_BuffData::DB_BuffData(const DB_BuffData& from) {
  SharedCtor();
  MergeFrom(from);
}

void DB_BuffData::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DB_BuffData::~DB_BuffData() {
  SharedDtor();
}

void DB_BuffData::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* DB_BuffData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DB_BuffData_descriptor_;
}

const DB_BuffData& DB_BuffData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dbinterface_5fsub_2eproto();  return *default_instance_;
}

DB_BuffData* DB_BuffData::default_instance_ = NULL;

DB_BuffData* DB_BuffData::New() const {
  return new DB_BuffData;
}

void DB_BuffData::Clear() {
  bufflist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DB_BuffData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .DB_BuffUnit bufflist = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_bufflist:
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, add_bufflist()));
        if (input->ExpectTag(10)) goto parse_bufflist;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DB_BuffData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    DB_BuffData::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // repeated .DB_BuffUnit bufflist = 1;
  for (int i = 0; i < this->bufflist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      1, this->bufflist(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DB_BuffData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .DB_BuffUnit bufflist = 1;
  for (int i = 0; i < this->bufflist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->bufflist(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DB_BuffData::ByteSize() const {
  int total_size = 0;
  
  // repeated .DB_BuffUnit bufflist = 1;
  total_size += 1 * this->bufflist_size();
  for (int i = 0; i < this->bufflist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->bufflist(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void DB_BuffData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DB_BuffData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DB_BuffData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DB_BuffData::MergeFrom(const DB_BuffData& from) {
  GOOGLE_CHECK_NE(&from, this);
  bufflist_.MergeFrom(from.bufflist_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DB_BuffData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DB_BuffData::CopyFrom(const DB_BuffData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DB_BuffData::IsInitialized() const {
  
  return true;
}

void DB_BuffData::Swap(DB_BuffData* other) {
  if (other != this) {
    bufflist_.Swap(&other->bufflist_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DB_BuffData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DB_BuffData_descriptor_;
  metadata.reflection = DB_BuffData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DB_BagItemLog::kLogTypeFieldNumber;
const int DB_BagItemLog::kItemIDFieldNumber;
const int DB_BagItemLog::kCountFieldNumber;
const int DB_BagItemLog::kDateFieldNumber;
const int DB_BagItemLog::kMedalFieldNumber;
const int DB_BagItemLog::kOilFieldNumber;
const int DB_BagItemLog::kCreditFieldNumber;
const int DB_BagItemLog::kHonorFieldNumber;
const int DB_BagItemLog::kItemTypeFieldNumber;
const int DB_BagItemLog::kItemCntFieldNumber;
const int DB_BagItemLog::kArmyTypeFieldNumber;
const int DB_BagItemLog::kArmyCntFieldNumber;
const int DB_BagItemLog::kWeaponIDFieldNumber;
const int DB_BagItemLog::kEmblemIDFieldNumber;
const int DB_BagItemLog::kWeaponCntFieldNumber;
const int DB_BagItemLog::kEmblemCntFieldNumber;
const int DB_BagItemLog::kAdmiralIDFieldNumber;
const int DB_BagItemLog::kAdmiralCntFieldNumber;
const int DB_BagItemLog::kFeatsFieldNumber;
const int DB_BagItemLog::kThewFieldNumber;
const int DB_BagItemLog::kMoraleFieldNumber;
const int DB_BagItemLog::kZhangongFieldNumber;
const int DB_BagItemLog::kEquipIDFieldNumber;
const int DB_BagItemLog::kEquipCntFieldNumber;
const int DB_BagItemLog::kGScoreFieldNumber;
const int DB_BagItemLog::kAdmiralsoulFieldNumber;
const int DB_BagItemLog::kCntrScoreFieldNumber;
const int DB_BagItemLog::kAdmiralLetterIDFieldNumber;
const int DB_BagItemLog::kAdmiralLetterCntFieldNumber;
const int DB_BagItemLog::kHeroLetterIDFieldNumber;
const int DB_BagItemLog::kHeroLetterCntFieldNumber;
const int DB_BagItemLog::kNMilitarySoulFieldNumber;
#endif  // !_MSC_VER

DB_BagItemLog::DB_BagItemLog() {
  SharedCtor();
}

void DB_BagItemLog::InitAsDefaultInstance() {
}

DB_BagItemLog::DB_BagItemLog(const DB_BagItemLog& from) {
  SharedCtor();
  MergeFrom(from);
}

void DB_BagItemLog::SharedCtor() {
  _cached_size_ = 0;
  logtype_ = 0;
  itemid_ = 0;
  count_ = 0;
  date_ = 0;
  medal_ = 0;
  oil_ = 0;
  credit_ = 0;
  honor_ = 0;
  feats_ = 0;
  thew_ = 0;
  morale_ = 0;
  zhangong_ = 0;
  gscore_ = 0;
  admiralsoul_ = 0;
  cntrscore_ = 0;
  nmilitarysoul_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DB_BagItemLog::~DB_BagItemLog() {
  SharedDtor();
}

void DB_BagItemLog::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* DB_BagItemLog::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DB_BagItemLog_descriptor_;
}

const DB_BagItemLog& DB_BagItemLog::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dbinterface_5fsub_2eproto();  return *default_instance_;
}

DB_BagItemLog* DB_BagItemLog::default_instance_ = NULL;

DB_BagItemLog* DB_BagItemLog::New() const {
  return new DB_BagItemLog;
}

void DB_BagItemLog::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    logtype_ = 0;
    itemid_ = 0;
    count_ = 0;
    date_ = 0;
    medal_ = 0;
    oil_ = 0;
    credit_ = 0;
    honor_ = 0;
  }
  if (_has_bits_[18 / 32] & (0xffu << (18 % 32))) {
    feats_ = 0;
    thew_ = 0;
    morale_ = 0;
    zhangong_ = 0;
  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    gscore_ = 0;
    admiralsoul_ = 0;
    cntrscore_ = 0;
    nmilitarysoul_ = 0;
  }
  itemtype_.Clear();
  itemcnt_.Clear();
  armytype_.Clear();
  armycnt_.Clear();
  weaponid_.Clear();
  emblemid_.Clear();
  weaponcnt_.Clear();
  emblemcnt_.Clear();
  admiralid_.Clear();
  admiralcnt_.Clear();
  equipid_.Clear();
  equipcnt_.Clear();
  admiralletterid_.Clear();
  admirallettercnt_.Clear();
  heroletterid_.Clear();
  herolettercnt_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DB_BagItemLog::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 logType = 1 [default = 0];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &logtype_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_itemID;
        break;
      }
      
      // optional int32 itemID = 2 [default = 0];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_itemID:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &itemid_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_count;
        break;
      }
      
      // optional int32 count = 3 [default = 0];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_count:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &count_));
        _set_bit(2);
        if (input->ExpectTag(32)) goto parse_date;
        break;
      }
      
      // optional int32 date = 4 [default = 0];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_date:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &date_));
        _set_bit(3);
        if (input->ExpectTag(40)) goto parse_medal;
        break;
      }
      
      // optional int32 medal = 5 [default = 0];
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_medal:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &medal_));
        _set_bit(4);
        if (input->ExpectTag(48)) goto parse_oil;
        break;
      }
      
      // optional int32 oil = 6 [default = 0];
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_oil:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &oil_));
        _set_bit(5);
        if (input->ExpectTag(56)) goto parse_credit;
        break;
      }
      
      // optional int32 credit = 7 [default = 0];
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_credit:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &credit_));
        _set_bit(6);
        if (input->ExpectTag(64)) goto parse_honor;
        break;
      }
      
      // optional int32 honor = 8 [default = 0];
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_honor:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &honor_));
        _set_bit(7);
        if (input->ExpectTag(72)) goto parse_itemType;
        break;
      }
      
      // repeated int32 itemType = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_itemType:
        ::google::protobuf::int32 value;
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &value));
        add_itemtype(value);
        if (input->ExpectTag(72)) goto parse_itemType;
        if (input->ExpectTag(80)) goto parse_itemCnt;
        break;
      }
      
      // repeated int32 itemCnt = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_itemCnt:
        ::google::protobuf::int32 value;
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &value));
        add_itemcnt(value);
        if (input->ExpectTag(80)) goto parse_itemCnt;
        if (input->ExpectTag(88)) goto parse_armyType;
        break;
      }
      
      // repeated int32 armyType = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_armyType:
        ::google::protobuf::int32 value;
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &value));
        add_armytype(value);
        if (input->ExpectTag(88)) goto parse_armyType;
        if (input->ExpectTag(96)) goto parse_armyCnt;
        break;
      }
      
      // repeated int32 armyCnt = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_armyCnt:
        ::google::protobuf::int32 value;
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &value));
        add_armycnt(value);
        if (input->ExpectTag(96)) goto parse_armyCnt;
        if (input->ExpectTag(104)) goto parse_weaponID;
        break;
      }
      
      // repeated int32 weaponID = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_weaponID:
        ::google::protobuf::int32 value;
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &value));
        add_weaponid(value);
        if (input->ExpectTag(104)) goto parse_weaponID;
        if (input->ExpectTag(112)) goto parse_emblemID;
        break;
      }
      
      // repeated int32 emblemID = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_emblemID:
        ::google::protobuf::int32 value;
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &value));
        add_emblemid(value);
        if (input->ExpectTag(112)) goto parse_emblemID;
        if (input->ExpectTag(120)) goto parse_weaponCnt;
        break;
      }
      
      // repeated int32 weaponCnt = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_weaponCnt:
        ::google::protobuf::int32 value;
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &value));
        add_weaponcnt(value);
        if (input->ExpectTag(120)) goto parse_weaponCnt;
        if (input->ExpectTag(128)) goto parse_emblemCnt;
        break;
      }
      
      // repeated int32 emblemCnt = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_emblemCnt:
        ::google::protobuf::int32 value;
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &value));
        add_emblemcnt(value);
        if (input->ExpectTag(128)) goto parse_emblemCnt;
        if (input->ExpectTag(136)) goto parse_admiralID;
        break;
      }
      
      // repeated int32 admiralID = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_admiralID:
        ::google::protobuf::int32 value;
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &value));
        add_admiralid(value);
        if (input->ExpectTag(136)) goto parse_admiralID;
        if (input->ExpectTag(144)) goto parse_admiralCnt;
        break;
      }
      
      // repeated int32 admiralCnt = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_admiralCnt:
        ::google::protobuf::int32 value;
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &value));
        add_admiralcnt(value);
        if (input->ExpectTag(144)) goto parse_admiralCnt;
        if (input->ExpectTag(152)) goto parse_feats;
        break;
      }
      
      // optional int32 feats = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_feats:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &feats_));
        _set_bit(18);
        if (input->ExpectTag(160)) goto parse_thew;
        break;
      }
      
      // optional int32 thew = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_thew:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &thew_));
        _set_bit(19);
        if (input->ExpectTag(168)) goto parse_morale;
        break;
      }
      
      // optional int32 morale = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_morale:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &morale_));
        _set_bit(20);
        if (input->ExpectTag(176)) goto parse_zhangong;
        break;
      }
      
      // optional int32 zhangong = 22;
      case 22: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_zhangong:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &zhangong_));
        _set_bit(21);
        if (input->ExpectTag(184)) goto parse_equipID;
        break;
      }
      
      // repeated int32 equipID = 23;
      case 23: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_equipID:
        ::google::protobuf::int32 value;
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &value));
        add_equipid(value);
        if (input->ExpectTag(184)) goto parse_equipID;
        if (input->ExpectTag(192)) goto parse_equipCnt;
        break;
      }
      
      // repeated int32 equipCnt = 24;
      case 24: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_equipCnt:
        ::google::protobuf::int32 value;
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &value));
        add_equipcnt(value);
        if (input->ExpectTag(192)) goto parse_equipCnt;
        if (input->ExpectTag(200)) goto parse_gScore;
        break;
      }
      
      // optional int32 gScore = 25;
      case 25: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_gScore:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &gscore_));
        _set_bit(24);
        if (input->ExpectTag(208)) goto parse_admiralsoul;
        break;
      }
      
      // optional int32 admiralsoul = 26;
      case 26: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_admiralsoul:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &admiralsoul_));
        _set_bit(25);
        if (input->ExpectTag(216)) goto parse_cntrScore;
        break;
      }
      
      // optional int32 cntrScore = 27 [default = 0];
      case 27: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_cntrScore:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &cntrscore_));
        _set_bit(26);
        if (input->ExpectTag(224)) goto parse_admiralLetterID;
        break;
      }
      
      // repeated int32 admiralLetterID = 28;
      case 28: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_admiralLetterID:
        ::google::protobuf::int32 value;
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &value));
        add_admiralletterid(value);
        if (input->ExpectTag(224)) goto parse_admiralLetterID;
        if (input->ExpectTag(232)) goto parse_admiralLetterCnt;
        break;
      }
      
      // repeated int32 admiralLetterCnt = 29;
      case 29: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_admiralLetterCnt:
        ::google::protobuf::int32 value;
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &value));
        add_admirallettercnt(value);
        if (input->ExpectTag(232)) goto parse_admiralLetterCnt;
        if (input->ExpectTag(240)) goto parse_heroLetterID;
        break;
      }
      
      // repeated int32 heroLetterID = 30;
      case 30: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_heroLetterID:
        ::google::protobuf::int32 value;
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &value));
        add_heroletterid(value);
        if (input->ExpectTag(240)) goto parse_heroLetterID;
        if (input->ExpectTag(248)) goto parse_heroLetterCnt;
        break;
      }
      
      // repeated int32 heroLetterCnt = 31;
      case 31: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_heroLetterCnt:
        ::google::protobuf::int32 value;
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &value));
        add_herolettercnt(value);
        if (input->ExpectTag(248)) goto parse_heroLetterCnt;
        if (input->ExpectTag(256)) goto parse_nMilitarySoul;
        break;
      }
      
      // optional int32 nMilitarySoul = 32;
      case 32: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_nMilitarySoul:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &nmilitarysoul_));
        _set_bit(31);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DB_BagItemLog::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    DB_BagItemLog::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional int32 logType = 1 [default = 0];
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->logtype(), output);
  }
  
  // optional int32 itemID = 2 [default = 0];
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->itemid(), output);
  }
  
  // optional int32 count = 3 [default = 0];
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->count(), output);
  }
  
  // optional int32 date = 4 [default = 0];
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->date(), output);
  }
  
  // optional int32 medal = 5 [default = 0];
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->medal(), output);
  }
  
  // optional int32 oil = 6 [default = 0];
  if (_has_bit(5)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->oil(), output);
  }
  
  // optional int32 credit = 7 [default = 0];
  if (_has_bit(6)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->credit(), output);
  }
  
  // optional int32 honor = 8 [default = 0];
  if (_has_bit(7)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->honor(), output);
  }
  
  // repeated int32 itemType = 9;
  for (int i = 0; i < this->itemtype_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      9, this->itemtype(i), output);
  }
  
  // repeated int32 itemCnt = 10;
  for (int i = 0; i < this->itemcnt_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      10, this->itemcnt(i), output);
  }
  
  // repeated int32 armyType = 11;
  for (int i = 0; i < this->armytype_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      11, this->armytype(i), output);
  }
  
  // repeated int32 armyCnt = 12;
  for (int i = 0; i < this->armycnt_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      12, this->armycnt(i), output);
  }
  
  // repeated int32 weaponID = 13;
  for (int i = 0; i < this->weaponid_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      13, this->weaponid(i), output);
  }
  
  // repeated int32 emblemID = 14;
  for (int i = 0; i < this->emblemid_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      14, this->emblemid(i), output);
  }
  
  // repeated int32 weaponCnt = 15;
  for (int i = 0; i < this->weaponcnt_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      15, this->weaponcnt(i), output);
  }
  
  // repeated int32 emblemCnt = 16;
  for (int i = 0; i < this->emblemcnt_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      16, this->emblemcnt(i), output);
  }
  
  // repeated int32 admiralID = 17;
  for (int i = 0; i < this->admiralid_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      17, this->admiralid(i), output);
  }
  
  // repeated int32 admiralCnt = 18;
  for (int i = 0; i < this->admiralcnt_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      18, this->admiralcnt(i), output);
  }
  
  // optional int32 feats = 19;
  if (_has_bit(18)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(19, this->feats(), output);
  }
  
  // optional int32 thew = 20;
  if (_has_bit(19)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(20, this->thew(), output);
  }
  
  // optional int32 morale = 21;
  if (_has_bit(20)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(21, this->morale(), output);
  }
  
  // optional int32 zhangong = 22;
  if (_has_bit(21)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(22, this->zhangong(), output);
  }
  
  // repeated int32 equipID = 23;
  for (int i = 0; i < this->equipid_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      23, this->equipid(i), output);
  }
  
  // repeated int32 equipCnt = 24;
  for (int i = 0; i < this->equipcnt_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      24, this->equipcnt(i), output);
  }
  
  // optional int32 gScore = 25;
  if (_has_bit(24)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(25, this->gscore(), output);
  }
  
  // optional int32 admiralsoul = 26;
  if (_has_bit(25)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(26, this->admiralsoul(), output);
  }
  
  // optional int32 cntrScore = 27 [default = 0];
  if (_has_bit(26)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(27, this->cntrscore(), output);
  }
  
  // repeated int32 admiralLetterID = 28;
  for (int i = 0; i < this->admiralletterid_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      28, this->admiralletterid(i), output);
  }
  
  // repeated int32 admiralLetterCnt = 29;
  for (int i = 0; i < this->admirallettercnt_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      29, this->admirallettercnt(i), output);
  }
  
  // repeated int32 heroLetterID = 30;
  for (int i = 0; i < this->heroletterid_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      30, this->heroletterid(i), output);
  }
  
  // repeated int32 heroLetterCnt = 31;
  for (int i = 0; i < this->herolettercnt_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      31, this->herolettercnt(i), output);
  }
  
  // optional int32 nMilitarySoul = 32;
  if (_has_bit(31)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(32, this->nmilitarysoul(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DB_BagItemLog::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 logType = 1 [default = 0];
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->logtype(), target);
  }
  
  // optional int32 itemID = 2 [default = 0];
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->itemid(), target);
  }
  
  // optional int32 count = 3 [default = 0];
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->count(), target);
  }
  
  // optional int32 date = 4 [default = 0];
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->date(), target);
  }
  
  // optional int32 medal = 5 [default = 0];
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->medal(), target);
  }
  
  // optional int32 oil = 6 [default = 0];
  if (_has_bit(5)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->oil(), target);
  }
  
  // optional int32 credit = 7 [default = 0];
  if (_has_bit(6)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->credit(), target);
  }
  
  // optional int32 honor = 8 [default = 0];
  if (_has_bit(7)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->honor(), target);
  }
  
  // repeated int32 itemType = 9;
  for (int i = 0; i < this->itemtype_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(9, this->itemtype(i), target);
  }
  
  // repeated int32 itemCnt = 10;
  for (int i = 0; i < this->itemcnt_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(10, this->itemcnt(i), target);
  }
  
  // repeated int32 armyType = 11;
  for (int i = 0; i < this->armytype_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(11, this->armytype(i), target);
  }
  
  // repeated int32 armyCnt = 12;
  for (int i = 0; i < this->armycnt_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(12, this->armycnt(i), target);
  }
  
  // repeated int32 weaponID = 13;
  for (int i = 0; i < this->weaponid_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(13, this->weaponid(i), target);
  }
  
  // repeated int32 emblemID = 14;
  for (int i = 0; i < this->emblemid_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(14, this->emblemid(i), target);
  }
  
  // repeated int32 weaponCnt = 15;
  for (int i = 0; i < this->weaponcnt_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(15, this->weaponcnt(i), target);
  }
  
  // repeated int32 emblemCnt = 16;
  for (int i = 0; i < this->emblemcnt_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(16, this->emblemcnt(i), target);
  }
  
  // repeated int32 admiralID = 17;
  for (int i = 0; i < this->admiralid_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(17, this->admiralid(i), target);
  }
  
  // repeated int32 admiralCnt = 18;
  for (int i = 0; i < this->admiralcnt_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(18, this->admiralcnt(i), target);
  }
  
  // optional int32 feats = 19;
  if (_has_bit(18)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(19, this->feats(), target);
  }
  
  // optional int32 thew = 20;
  if (_has_bit(19)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(20, this->thew(), target);
  }
  
  // optional int32 morale = 21;
  if (_has_bit(20)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(21, this->morale(), target);
  }
  
  // optional int32 zhangong = 22;
  if (_has_bit(21)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(22, this->zhangong(), target);
  }
  
  // repeated int32 equipID = 23;
  for (int i = 0; i < this->equipid_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(23, this->equipid(i), target);
  }
  
  // repeated int32 equipCnt = 24;
  for (int i = 0; i < this->equipcnt_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(24, this->equipcnt(i), target);
  }
  
  // optional int32 gScore = 25;
  if (_has_bit(24)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(25, this->gscore(), target);
  }
  
  // optional int32 admiralsoul = 26;
  if (_has_bit(25)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(26, this->admiralsoul(), target);
  }
  
  // optional int32 cntrScore = 27 [default = 0];
  if (_has_bit(26)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(27, this->cntrscore(), target);
  }
  
  // repeated int32 admiralLetterID = 28;
  for (int i = 0; i < this->admiralletterid_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(28, this->admiralletterid(i), target);
  }
  
  // repeated int32 admiralLetterCnt = 29;
  for (int i = 0; i < this->admirallettercnt_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(29, this->admirallettercnt(i), target);
  }
  
  // repeated int32 heroLetterID = 30;
  for (int i = 0; i < this->heroletterid_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(30, this->heroletterid(i), target);
  }
  
  // repeated int32 heroLetterCnt = 31;
  for (int i = 0; i < this->herolettercnt_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(31, this->herolettercnt(i), target);
  }
  
  // optional int32 nMilitarySoul = 32;
  if (_has_bit(31)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(32, this->nmilitarysoul(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DB_BagItemLog::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 logType = 1 [default = 0];
    if (has_logtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->logtype());
    }
    
    // optional int32 itemID = 2 [default = 0];
    if (has_itemid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->itemid());
    }
    
    // optional int32 count = 3 [default = 0];
    if (has_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->count());
    }
    
    // optional int32 date = 4 [default = 0];
    if (has_date()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->date());
    }
    
    // optional int32 medal = 5 [default = 0];
    if (has_medal()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->medal());
    }
    
    // optional int32 oil = 6 [default = 0];
    if (has_oil()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->oil());
    }
    
    // optional int32 credit = 7 [default = 0];
    if (has_credit()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->credit());
    }
    
    // optional int32 honor = 8 [default = 0];
    if (has_honor()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->honor());
    }
    
  }
  if (_has_bits_[18 / 32] & (0xffu << (18 % 32))) {
    // optional int32 feats = 19;
    if (has_feats()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->feats());
    }
    
    // optional int32 thew = 20;
    if (has_thew()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->thew());
    }
    
    // optional int32 morale = 21;
    if (has_morale()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->morale());
    }
    
    // optional int32 zhangong = 22;
    if (has_zhangong()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->zhangong());
    }
    
  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    // optional int32 gScore = 25;
    if (has_gscore()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gscore());
    }
    
    // optional int32 admiralsoul = 26;
    if (has_admiralsoul()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->admiralsoul());
    }
    
    // optional int32 cntrScore = 27 [default = 0];
    if (has_cntrscore()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cntrscore());
    }
    
    // optional int32 nMilitarySoul = 32;
    if (has_nmilitarysoul()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->nmilitarysoul());
    }
    
  }
  // repeated int32 itemType = 9;
  {
    int data_size = 0;
    for (int i = 0; i < this->itemtype_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->itemtype(i));
    }
    total_size += 1 * this->itemtype_size() + data_size;
  }
  
  // repeated int32 itemCnt = 10;
  {
    int data_size = 0;
    for (int i = 0; i < this->itemcnt_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->itemcnt(i));
    }
    total_size += 1 * this->itemcnt_size() + data_size;
  }
  
  // repeated int32 armyType = 11;
  {
    int data_size = 0;
    for (int i = 0; i < this->armytype_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->armytype(i));
    }
    total_size += 1 * this->armytype_size() + data_size;
  }
  
  // repeated int32 armyCnt = 12;
  {
    int data_size = 0;
    for (int i = 0; i < this->armycnt_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->armycnt(i));
    }
    total_size += 1 * this->armycnt_size() + data_size;
  }
  
  // repeated int32 weaponID = 13;
  {
    int data_size = 0;
    for (int i = 0; i < this->weaponid_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->weaponid(i));
    }
    total_size += 1 * this->weaponid_size() + data_size;
  }
  
  // repeated int32 emblemID = 14;
  {
    int data_size = 0;
    for (int i = 0; i < this->emblemid_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->emblemid(i));
    }
    total_size += 1 * this->emblemid_size() + data_size;
  }
  
  // repeated int32 weaponCnt = 15;
  {
    int data_size = 0;
    for (int i = 0; i < this->weaponcnt_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->weaponcnt(i));
    }
    total_size += 1 * this->weaponcnt_size() + data_size;
  }
  
  // repeated int32 emblemCnt = 16;
  {
    int data_size = 0;
    for (int i = 0; i < this->emblemcnt_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->emblemcnt(i));
    }
    total_size += 2 * this->emblemcnt_size() + data_size;
  }
  
  // repeated int32 admiralID = 17;
  {
    int data_size = 0;
    for (int i = 0; i < this->admiralid_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->admiralid(i));
    }
    total_size += 2 * this->admiralid_size() + data_size;
  }
  
  // repeated int32 admiralCnt = 18;
  {
    int data_size = 0;
    for (int i = 0; i < this->admiralcnt_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->admiralcnt(i));
    }
    total_size += 2 * this->admiralcnt_size() + data_size;
  }
  
  // repeated int32 equipID = 23;
  {
    int data_size = 0;
    for (int i = 0; i < this->equipid_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->equipid(i));
    }
    total_size += 2 * this->equipid_size() + data_size;
  }
  
  // repeated int32 equipCnt = 24;
  {
    int data_size = 0;
    for (int i = 0; i < this->equipcnt_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->equipcnt(i));
    }
    total_size += 2 * this->equipcnt_size() + data_size;
  }
  
  // repeated int32 admiralLetterID = 28;
  {
    int data_size = 0;
    for (int i = 0; i < this->admiralletterid_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->admiralletterid(i));
    }
    total_size += 2 * this->admiralletterid_size() + data_size;
  }
  
  // repeated int32 admiralLetterCnt = 29;
  {
    int data_size = 0;
    for (int i = 0; i < this->admirallettercnt_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->admirallettercnt(i));
    }
    total_size += 2 * this->admirallettercnt_size() + data_size;
  }
  
  // repeated int32 heroLetterID = 30;
  {
    int data_size = 0;
    for (int i = 0; i < this->heroletterid_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->heroletterid(i));
    }
    total_size += 2 * this->heroletterid_size() + data_size;
  }
  
  // repeated int32 heroLetterCnt = 31;
  {
    int data_size = 0;
    for (int i = 0; i < this->herolettercnt_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->herolettercnt(i));
    }
    total_size += 2 * this->herolettercnt_size() + data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void DB_BagItemLog::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DB_BagItemLog* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DB_BagItemLog*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DB_BagItemLog::MergeFrom(const DB_BagItemLog& from) {
  GOOGLE_CHECK_NE(&from, this);
  itemtype_.MergeFrom(from.itemtype_);
  itemcnt_.MergeFrom(from.itemcnt_);
  armytype_.MergeFrom(from.armytype_);
  armycnt_.MergeFrom(from.armycnt_);
  weaponid_.MergeFrom(from.weaponid_);
  emblemid_.MergeFrom(from.emblemid_);
  weaponcnt_.MergeFrom(from.weaponcnt_);
  emblemcnt_.MergeFrom(from.emblemcnt_);
  admiralid_.MergeFrom(from.admiralid_);
  admiralcnt_.MergeFrom(from.admiralcnt_);
  equipid_.MergeFrom(from.equipid_);
  equipcnt_.MergeFrom(from.equipcnt_);
  admiralletterid_.MergeFrom(from.admiralletterid_);
  admirallettercnt_.MergeFrom(from.admirallettercnt_);
  heroletterid_.MergeFrom(from.heroletterid_);
  herolettercnt_.MergeFrom(from.herolettercnt_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_logtype(from.logtype());
    }
    if (from._has_bit(1)) {
      set_itemid(from.itemid());
    }
    if (from._has_bit(2)) {
      set_count(from.count());
    }
    if (from._has_bit(3)) {
      set_date(from.date());
    }
    if (from._has_bit(4)) {
      set_medal(from.medal());
    }
    if (from._has_bit(5)) {
      set_oil(from.oil());
    }
    if (from._has_bit(6)) {
      set_credit(from.credit());
    }
    if (from._has_bit(7)) {
      set_honor(from.honor());
    }
  }
  if (from._has_bits_[18 / 32] & (0xffu << (18 % 32))) {
    if (from._has_bit(18)) {
      set_feats(from.feats());
    }
    if (from._has_bit(19)) {
      set_thew(from.thew());
    }
    if (from._has_bit(20)) {
      set_morale(from.morale());
    }
    if (from._has_bit(21)) {
      set_zhangong(from.zhangong());
    }
  }
  if (from._has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (from._has_bit(24)) {
      set_gscore(from.gscore());
    }
    if (from._has_bit(25)) {
      set_admiralsoul(from.admiralsoul());
    }
    if (from._has_bit(26)) {
      set_cntrscore(from.cntrscore());
    }
    if (from._has_bit(31)) {
      set_nmilitarysoul(from.nmilitarysoul());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DB_BagItemLog::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DB_BagItemLog::CopyFrom(const DB_BagItemLog& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DB_BagItemLog::IsInitialized() const {
  
  return true;
}

void DB_BagItemLog::Swap(DB_BagItemLog* other) {
  if (other != this) {
    std::swap(logtype_, other->logtype_);
    std::swap(itemid_, other->itemid_);
    std::swap(count_, other->count_);
    std::swap(date_, other->date_);
    std::swap(medal_, other->medal_);
    std::swap(oil_, other->oil_);
    std::swap(credit_, other->credit_);
    std::swap(honor_, other->honor_);
    itemtype_.Swap(&other->itemtype_);
    itemcnt_.Swap(&other->itemcnt_);
    armytype_.Swap(&other->armytype_);
    armycnt_.Swap(&other->armycnt_);
    weaponid_.Swap(&other->weaponid_);
    emblemid_.Swap(&other->emblemid_);
    weaponcnt_.Swap(&other->weaponcnt_);
    emblemcnt_.Swap(&other->emblemcnt_);
    admiralid_.Swap(&other->admiralid_);
    admiralcnt_.Swap(&other->admiralcnt_);
    std::swap(feats_, other->feats_);
    std::swap(thew_, other->thew_);
    std::swap(morale_, other->morale_);
    std::swap(zhangong_, other->zhangong_);
    equipid_.Swap(&other->equipid_);
    equipcnt_.Swap(&other->equipcnt_);
    std::swap(gscore_, other->gscore_);
    std::swap(admiralsoul_, other->admiralsoul_);
    std::swap(cntrscore_, other->cntrscore_);
    admiralletterid_.Swap(&other->admiralletterid_);
    admirallettercnt_.Swap(&other->admirallettercnt_);
    heroletterid_.Swap(&other->heroletterid_);
    herolettercnt_.Swap(&other->herolettercnt_);
    std::swap(nmilitarysoul_, other->nmilitarysoul_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DB_BagItemLog::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DB_BagItemLog_descriptor_;
  metadata.reflection = DB_BagItemLog_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DB_Log::kItemLogFieldNumber;
#endif  // !_MSC_VER

DB_Log::DB_Log() {
  SharedCtor();
}

void DB_Log::InitAsDefaultInstance() {
}

DB_Log::DB_Log(const DB_Log& from) {
  SharedCtor();
  MergeFrom(from);
}

void DB_Log::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DB_Log::~DB_Log() {
  SharedDtor();
}

void DB_Log::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* DB_Log::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DB_Log_descriptor_;
}

const DB_Log& DB_Log::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dbinterface_5fsub_2eproto();  return *default_instance_;
}

DB_Log* DB_Log::default_instance_ = NULL;

DB_Log* DB_Log::New() const {
  return new DB_Log;
}

void DB_Log::Clear() {
  itemlog_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DB_Log::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .DB_BagItemLog itemLog = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_itemLog:
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, add_itemlog()));
        if (input->ExpectTag(10)) goto parse_itemLog;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DB_Log::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    DB_Log::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // repeated .DB_BagItemLog itemLog = 1;
  for (int i = 0; i < this->itemlog_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      1, this->itemlog(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DB_Log::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .DB_BagItemLog itemLog = 1;
  for (int i = 0; i < this->itemlog_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->itemlog(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DB_Log::ByteSize() const {
  int total_size = 0;
  
  // repeated .DB_BagItemLog itemLog = 1;
  total_size += 1 * this->itemlog_size();
  for (int i = 0; i < this->itemlog_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->itemlog(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void DB_Log::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DB_Log* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DB_Log*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DB_Log::MergeFrom(const DB_Log& from) {
  GOOGLE_CHECK_NE(&from, this);
  itemlog_.MergeFrom(from.itemlog_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DB_Log::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DB_Log::CopyFrom(const DB_Log& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DB_Log::IsInitialized() const {
  
  return true;
}

void DB_Log::Swap(DB_Log* other) {
  if (other != this) {
    itemlog_.Swap(&other->itemlog_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DB_Log::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DB_Log_descriptor_;
  metadata.reflection = DB_Log_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DB_BagItem::kItemIDFieldNumber;
const int DB_BagItem::kCountFieldNumber;
const int DB_BagItem::kIdFieldNumber;
const int DB_BagItem::kGetTimeFieldNumber;
#endif  // !_MSC_VER

DB_BagItem::DB_BagItem() {
  SharedCtor();
}

void DB_BagItem::InitAsDefaultInstance() {
}

DB_BagItem::DB_BagItem(const DB_BagItem& from) {
  SharedCtor();
  MergeFrom(from);
}

void DB_BagItem::SharedCtor() {
  _cached_size_ = 0;
  itemid_ = 0;
  count_ = 0;
  id_ = 0;
  gettime_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DB_BagItem::~DB_BagItem() {
  SharedDtor();
}

void DB_BagItem::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* DB_BagItem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DB_BagItem_descriptor_;
}

const DB_BagItem& DB_BagItem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dbinterface_5fsub_2eproto();  return *default_instance_;
}

DB_BagItem* DB_BagItem::default_instance_ = NULL;

DB_BagItem* DB_BagItem::New() const {
  return new DB_BagItem;
}

void DB_BagItem::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    itemid_ = 0;
    count_ = 0;
    id_ = 0;
    gettime_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DB_BagItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 itemID = 1 [default = 0];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &itemid_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_count;
        break;
      }
      
      // optional int32 count = 2 [default = 0];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_count:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &count_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_id;
        break;
      }
      
      // optional int32 id = 3 [default = 0];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_id:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &id_));
        _set_bit(2);
        if (input->ExpectTag(32)) goto parse_getTime;
        break;
      }
      
      // optional int32 getTime = 4 [default = 0];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_getTime:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &gettime_));
        _set_bit(3);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DB_BagItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    DB_BagItem::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional int32 itemID = 1 [default = 0];
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->itemid(), output);
  }
  
  // optional int32 count = 2 [default = 0];
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->count(), output);
  }
  
  // optional int32 id = 3 [default = 0];
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->id(), output);
  }
  
  // optional int32 getTime = 4 [default = 0];
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->gettime(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DB_BagItem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 itemID = 1 [default = 0];
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->itemid(), target);
  }
  
  // optional int32 count = 2 [default = 0];
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->count(), target);
  }
  
  // optional int32 id = 3 [default = 0];
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->id(), target);
  }
  
  // optional int32 getTime = 4 [default = 0];
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->gettime(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DB_BagItem::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 itemID = 1 [default = 0];
    if (has_itemid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->itemid());
    }
    
    // optional int32 count = 2 [default = 0];
    if (has_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->count());
    }
    
    // optional int32 id = 3 [default = 0];
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }
    
    // optional int32 getTime = 4 [default = 0];
    if (has_gettime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gettime());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void DB_BagItem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DB_BagItem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DB_BagItem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DB_BagItem::MergeFrom(const DB_BagItem& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_itemid(from.itemid());
    }
    if (from._has_bit(1)) {
      set_count(from.count());
    }
    if (from._has_bit(2)) {
      set_id(from.id());
    }
    if (from._has_bit(3)) {
      set_gettime(from.gettime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DB_BagItem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DB_BagItem::CopyFrom(const DB_BagItem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DB_BagItem::IsInitialized() const {
  
  return true;
}

void DB_BagItem::Swap(DB_BagItem* other) {
  if (other != this) {
    std::swap(itemid_, other->itemid_);
    std::swap(count_, other->count_);
    std::swap(id_, other->id_);
    std::swap(gettime_, other->gettime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DB_BagItem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DB_BagItem_descriptor_;
  metadata.reflection = DB_BagItem_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DB_Bag::kBagItemFieldNumber;
const int DB_Bag::kLastOpenTimeFieldNumber;
const int DB_Bag::kBagLVFieldNumber;
const int DB_Bag::kBagUseCntFieldNumber;
const int DB_Bag::kTmpBagItemFieldNumber;
const int DB_Bag::kVirtualBagItemFieldNumber;
#endif  // !_MSC_VER

DB_Bag::DB_Bag() {
  SharedCtor();
}

void DB_Bag::InitAsDefaultInstance() {
}

DB_Bag::DB_Bag(const DB_Bag& from) {
  SharedCtor();
  MergeFrom(from);
}

void DB_Bag::SharedCtor() {
  _cached_size_ = 0;
  lastopentime_ = 0;
  baglv_ = 0;
  bagusecnt_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DB_Bag::~DB_Bag() {
  SharedDtor();
}

void DB_Bag::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* DB_Bag::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DB_Bag_descriptor_;
}

const DB_Bag& DB_Bag::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dbinterface_5fsub_2eproto();  return *default_instance_;
}

DB_Bag* DB_Bag::default_instance_ = NULL;

DB_Bag* DB_Bag::New() const {
  return new DB_Bag;
}

void DB_Bag::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    lastopentime_ = 0;
    baglv_ = 0;
    bagusecnt_ = 0;
  }
  bagitem_.Clear();
  tmpbagitem_.Clear();
  virtualbagitem_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DB_Bag::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .DB_BagItem bagItem = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_bagItem:
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, add_bagitem()));
        if (input->ExpectTag(10)) goto parse_bagItem;
        if (input->ExpectTag(16)) goto parse_lastOpenTime;
        break;
      }
      
      // optional int32 lastOpenTime = 2 [default = 0];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_lastOpenTime:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &lastopentime_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_bagLV;
        break;
      }
      
      // optional int32 bagLV = 3 [default = 0];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_bagLV:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &baglv_));
        _set_bit(2);
        if (input->ExpectTag(32)) goto parse_bagUseCnt;
        break;
      }
      
      // optional int32 bagUseCnt = 4 [default = 0];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_bagUseCnt:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &bagusecnt_));
        _set_bit(3);
        if (input->ExpectTag(42)) goto parse_tmpBagItem;
        break;
      }
      
      // repeated .DB_BagItem tmpBagItem = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_tmpBagItem:
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, add_tmpbagitem()));
        if (input->ExpectTag(42)) goto parse_tmpBagItem;
        if (input->ExpectTag(50)) goto parse_virtualBagItem;
        break;
      }
      
      // repeated .DB_BagItem virtualBagItem = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_virtualBagItem:
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, add_virtualbagitem()));
        if (input->ExpectTag(50)) goto parse_virtualBagItem;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DB_Bag::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    DB_Bag::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // repeated .DB_BagItem bagItem = 1;
  for (int i = 0; i < this->bagitem_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      1, this->bagitem(i), output);
  }
  
  // optional int32 lastOpenTime = 2 [default = 0];
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->lastopentime(), output);
  }
  
  // optional int32 bagLV = 3 [default = 0];
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->baglv(), output);
  }
  
  // optional int32 bagUseCnt = 4 [default = 0];
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->bagusecnt(), output);
  }
  
  // repeated .DB_BagItem tmpBagItem = 5;
  for (int i = 0; i < this->tmpbagitem_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      5, this->tmpbagitem(i), output);
  }
  
  // repeated .DB_BagItem virtualBagItem = 6;
  for (int i = 0; i < this->virtualbagitem_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      6, this->virtualbagitem(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DB_Bag::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .DB_BagItem bagItem = 1;
  for (int i = 0; i < this->bagitem_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->bagitem(i), target);
  }
  
  // optional int32 lastOpenTime = 2 [default = 0];
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->lastopentime(), target);
  }
  
  // optional int32 bagLV = 3 [default = 0];
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->baglv(), target);
  }
  
  // optional int32 bagUseCnt = 4 [default = 0];
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->bagusecnt(), target);
  }
  
  // repeated .DB_BagItem tmpBagItem = 5;
  for (int i = 0; i < this->tmpbagitem_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->tmpbagitem(i), target);
  }
  
  // repeated .DB_BagItem virtualBagItem = 6;
  for (int i = 0; i < this->virtualbagitem_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->virtualbagitem(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DB_Bag::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional int32 lastOpenTime = 2 [default = 0];
    if (has_lastopentime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->lastopentime());
    }
    
    // optional int32 bagLV = 3 [default = 0];
    if (has_baglv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->baglv());
    }
    
    // optional int32 bagUseCnt = 4 [default = 0];
    if (has_bagusecnt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bagusecnt());
    }
    
  }
  // repeated .DB_BagItem bagItem = 1;
  total_size += 1 * this->bagitem_size();
  for (int i = 0; i < this->bagitem_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->bagitem(i));
  }
  
  // repeated .DB_BagItem tmpBagItem = 5;
  total_size += 1 * this->tmpbagitem_size();
  for (int i = 0; i < this->tmpbagitem_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->tmpbagitem(i));
  }
  
  // repeated .DB_BagItem virtualBagItem = 6;
  total_size += 1 * this->virtualbagitem_size();
  for (int i = 0; i < this->virtualbagitem_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->virtualbagitem(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void DB_Bag::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DB_Bag* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DB_Bag*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DB_Bag::MergeFrom(const DB_Bag& from) {
  GOOGLE_CHECK_NE(&from, this);
  bagitem_.MergeFrom(from.bagitem_);
  tmpbagitem_.MergeFrom(from.tmpbagitem_);
  virtualbagitem_.MergeFrom(from.virtualbagitem_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from._has_bit(1)) {
      set_lastopentime(from.lastopentime());
    }
    if (from._has_bit(2)) {
      set_baglv(from.baglv());
    }
    if (from._has_bit(3)) {
      set_bagusecnt(from.bagusecnt());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DB_Bag::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DB_Bag::CopyFrom(const DB_Bag& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DB_Bag::IsInitialized() const {
  
  return true;
}

void DB_Bag::Swap(DB_Bag* other) {
  if (other != this) {
    bagitem_.Swap(&other->bagitem_);
    std::swap(lastopentime_, other->lastopentime_);
    std::swap(baglv_, other->baglv_);
    std::swap(bagusecnt_, other->bagusecnt_);
    tmpbagitem_.Swap(&other->tmpbagitem_);
    virtualbagitem_.Swap(&other->virtualbagitem_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DB_Bag::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DB_Bag_descriptor_;
  metadata.reflection = DB_Bag_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DB_MoonCake::kMoonCakeCntFieldNumber;
const int DB_MoonCake::kGoldLevelFieldNumber;
const int DB_MoonCake::kSilverLevelFieldNumber;
const int DB_MoonCake::kFrdIDFieldNumber;
const int DB_MoonCake::kVisitFrdCntFieldNumber;
const int DB_MoonCake::kDayAccSucCntFieldNumber;
const int DB_MoonCake::kGetAccRewardCntFieldNumber;
const int DB_MoonCake::kLastLoginTimeFieldNumber;
const int DB_MoonCake::kAccSucMoonCakeCntFieldNumber;
const int DB_MoonCake::kMaxSucMoonCakeCntFieldNumber;
const int DB_MoonCake::kActiveFlagFieldNumber;
const int DB_MoonCake::kDayGetFlag1CntFieldNumber;
const int DB_MoonCake::kAccGetFlag1CntFieldNumber;
const int DB_MoonCake::kAccGetFlag2CntFieldNumber;
const int DB_MoonCake::kDayGetFlag2CntFieldNumber;
#endif  // !_MSC_VER

DB_MoonCake::DB_MoonCake() {
  SharedCtor();
}

void DB_MoonCake::InitAsDefaultInstance() {
}

DB_MoonCake::DB_MoonCake(const DB_MoonCake& from) {
  SharedCtor();
  MergeFrom(from);
}

void DB_MoonCake::SharedCtor() {
  _cached_size_ = 0;
  mooncakecnt_ = 0;
  goldlevel_ = 0;
  silverlevel_ = 0;
  dayaccsuccnt_ = 0;
  lastlogintime_ = GOOGLE_LONGLONG(0);
  accsucmooncakecnt_ = 0;
  maxsucmooncakecnt_ = 0;
  activeflag_ = 0;
  daygetflag1cnt_ = 0;
  accgetflag1cnt_ = 0;
  accgetflag2cnt_ = 0;
  daygetflag2cnt_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DB_MoonCake::~DB_MoonCake() {
  SharedDtor();
}

void DB_MoonCake::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* DB_MoonCake::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DB_MoonCake_descriptor_;
}

const DB_MoonCake& DB_MoonCake::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dbinterface_5fsub_2eproto();  return *default_instance_;
}

DB_MoonCake* DB_MoonCake::default_instance_ = NULL;

DB_MoonCake* DB_MoonCake::New() const {
  return new DB_MoonCake;
}

void DB_MoonCake::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    mooncakecnt_ = 0;
    goldlevel_ = 0;
    silverlevel_ = 0;
    dayaccsuccnt_ = 0;
    lastlogintime_ = GOOGLE_LONGLONG(0);
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    accsucmooncakecnt_ = 0;
    maxsucmooncakecnt_ = 0;
    activeflag_ = 0;
    daygetflag1cnt_ = 0;
    accgetflag1cnt_ = 0;
    accgetflag2cnt_ = 0;
    daygetflag2cnt_ = 0;
  }
  frdid_.Clear();
  visitfrdcnt_.Clear();
  getaccrewardcnt_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DB_MoonCake::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 moonCakeCnt = 1 [default = 0];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &mooncakecnt_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_goldLevel;
        break;
      }
      
      // optional int32 goldLevel = 2 [default = 0];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_goldLevel:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &goldlevel_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_silverLevel;
        break;
      }
      
      // optional int32 silverLevel = 3 [default = 0];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_silverLevel:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &silverlevel_));
        _set_bit(2);
        if (input->ExpectTag(32)) goto parse_frdID;
        break;
      }
      
      // repeated int64 frdID = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_frdID:
        ::google::protobuf::int64 value;
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt64(
              input, &value));
        add_frdid(value);
        if (input->ExpectTag(32)) goto parse_frdID;
        if (input->ExpectTag(40)) goto parse_visitFrdCnt;
        break;
      }
      
      // repeated int32 visitFrdCnt = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_visitFrdCnt:
        ::google::protobuf::int32 value;
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &value));
        add_visitfrdcnt(value);
        if (input->ExpectTag(40)) goto parse_visitFrdCnt;
        if (input->ExpectTag(48)) goto parse_dayAccSucCnt;
        break;
      }
      
      // optional int32 dayAccSucCnt = 6 [default = 0];
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_dayAccSucCnt:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &dayaccsuccnt_));
        _set_bit(5);
        if (input->ExpectTag(56)) goto parse_getAccRewardCnt;
        break;
      }
      
      // repeated int32 getAccRewardCnt = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_getAccRewardCnt:
        ::google::protobuf::int32 value;
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &value));
        add_getaccrewardcnt(value);
        if (input->ExpectTag(56)) goto parse_getAccRewardCnt;
        if (input->ExpectTag(64)) goto parse_lastLoginTime;
        break;
      }
      
      // optional int64 lastLoginTime = 8 [default = 0];
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_lastLoginTime:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt64(
              input, &lastlogintime_));
        _set_bit(7);
        if (input->ExpectTag(72)) goto parse_accSucMoonCakeCnt;
        break;
      }
      
      // optional int32 accSucMoonCakeCnt = 9 [default = 0];
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_accSucMoonCakeCnt:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &accsucmooncakecnt_));
        _set_bit(8);
        if (input->ExpectTag(80)) goto parse_maxSucMoonCakeCnt;
        break;
      }
      
      // optional int32 maxSucMoonCakeCnt = 10 [default = 0];
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_maxSucMoonCakeCnt:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &maxsucmooncakecnt_));
        _set_bit(9);
        if (input->ExpectTag(88)) goto parse_activeFlag;
        break;
      }
      
      // optional int32 activeFlag = 11 [default = 0];
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_activeFlag:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &activeflag_));
        _set_bit(10);
        if (input->ExpectTag(96)) goto parse_dayGetFlag1Cnt;
        break;
      }
      
      // optional int32 dayGetFlag1Cnt = 12 [default = 0];
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_dayGetFlag1Cnt:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &daygetflag1cnt_));
        _set_bit(11);
        if (input->ExpectTag(104)) goto parse_accGetFlag1Cnt;
        break;
      }
      
      // optional int32 accGetFlag1Cnt = 13 [default = 0];
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_accGetFlag1Cnt:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &accgetflag1cnt_));
        _set_bit(12);
        if (input->ExpectTag(112)) goto parse_accGetFlag2Cnt;
        break;
      }
      
      // optional int32 accGetFlag2Cnt = 14 [default = 0];
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_accGetFlag2Cnt:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &accgetflag2cnt_));
        _set_bit(13);
        if (input->ExpectTag(120)) goto parse_dayGetFlag2Cnt;
        break;
      }
      
      // optional int32 dayGetFlag2Cnt = 15 [default = 0];
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_dayGetFlag2Cnt:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &daygetflag2cnt_));
        _set_bit(14);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DB_MoonCake::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    DB_MoonCake::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional int32 moonCakeCnt = 1 [default = 0];
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->mooncakecnt(), output);
  }
  
  // optional int32 goldLevel = 2 [default = 0];
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->goldlevel(), output);
  }
  
  // optional int32 silverLevel = 3 [default = 0];
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->silverlevel(), output);
  }
  
  // repeated int64 frdID = 4;
  for (int i = 0; i < this->frdid_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(
      4, this->frdid(i), output);
  }
  
  // repeated int32 visitFrdCnt = 5;
  for (int i = 0; i < this->visitfrdcnt_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      5, this->visitfrdcnt(i), output);
  }
  
  // optional int32 dayAccSucCnt = 6 [default = 0];
  if (_has_bit(5)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->dayaccsuccnt(), output);
  }
  
  // repeated int32 getAccRewardCnt = 7;
  for (int i = 0; i < this->getaccrewardcnt_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      7, this->getaccrewardcnt(i), output);
  }
  
  // optional int64 lastLoginTime = 8 [default = 0];
  if (_has_bit(7)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(8, this->lastlogintime(), output);
  }
  
  // optional int32 accSucMoonCakeCnt = 9 [default = 0];
  if (_has_bit(8)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->accsucmooncakecnt(), output);
  }
  
  // optional int32 maxSucMoonCakeCnt = 10 [default = 0];
  if (_has_bit(9)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->maxsucmooncakecnt(), output);
  }
  
  // optional int32 activeFlag = 11 [default = 0];
  if (_has_bit(10)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->activeflag(), output);
  }
  
  // optional int32 dayGetFlag1Cnt = 12 [default = 0];
  if (_has_bit(11)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->daygetflag1cnt(), output);
  }
  
  // optional int32 accGetFlag1Cnt = 13 [default = 0];
  if (_has_bit(12)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->accgetflag1cnt(), output);
  }
  
  // optional int32 accGetFlag2Cnt = 14 [default = 0];
  if (_has_bit(13)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->accgetflag2cnt(), output);
  }
  
  // optional int32 dayGetFlag2Cnt = 15 [default = 0];
  if (_has_bit(14)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(15, this->daygetflag2cnt(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DB_MoonCake::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 moonCakeCnt = 1 [default = 0];
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->mooncakecnt(), target);
  }
  
  // optional int32 goldLevel = 2 [default = 0];
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->goldlevel(), target);
  }
  
  // optional int32 silverLevel = 3 [default = 0];
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->silverlevel(), target);
  }
  
  // repeated int64 frdID = 4;
  for (int i = 0; i < this->frdid_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt64ToArray(4, this->frdid(i), target);
  }
  
  // repeated int32 visitFrdCnt = 5;
  for (int i = 0; i < this->visitfrdcnt_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(5, this->visitfrdcnt(i), target);
  }
  
  // optional int32 dayAccSucCnt = 6 [default = 0];
  if (_has_bit(5)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->dayaccsuccnt(), target);
  }
  
  // repeated int32 getAccRewardCnt = 7;
  for (int i = 0; i < this->getaccrewardcnt_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(7, this->getaccrewardcnt(i), target);
  }
  
  // optional int64 lastLoginTime = 8 [default = 0];
  if (_has_bit(7)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(8, this->lastlogintime(), target);
  }
  
  // optional int32 accSucMoonCakeCnt = 9 [default = 0];
  if (_has_bit(8)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->accsucmooncakecnt(), target);
  }
  
  // optional int32 maxSucMoonCakeCnt = 10 [default = 0];
  if (_has_bit(9)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->maxsucmooncakecnt(), target);
  }
  
  // optional int32 activeFlag = 11 [default = 0];
  if (_has_bit(10)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->activeflag(), target);
  }
  
  // optional int32 dayGetFlag1Cnt = 12 [default = 0];
  if (_has_bit(11)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->daygetflag1cnt(), target);
  }
  
  // optional int32 accGetFlag1Cnt = 13 [default = 0];
  if (_has_bit(12)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->accgetflag1cnt(), target);
  }
  
  // optional int32 accGetFlag2Cnt = 14 [default = 0];
  if (_has_bit(13)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(14, this->accgetflag2cnt(), target);
  }
  
  // optional int32 dayGetFlag2Cnt = 15 [default = 0];
  if (_has_bit(14)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(15, this->daygetflag2cnt(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DB_MoonCake::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 moonCakeCnt = 1 [default = 0];
    if (has_mooncakecnt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->mooncakecnt());
    }
    
    // optional int32 goldLevel = 2 [default = 0];
    if (has_goldlevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->goldlevel());
    }
    
    // optional int32 silverLevel = 3 [default = 0];
    if (has_silverlevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->silverlevel());
    }
    
    // optional int32 dayAccSucCnt = 6 [default = 0];
    if (has_dayaccsuccnt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->dayaccsuccnt());
    }
    
    // optional int64 lastLoginTime = 8 [default = 0];
    if (has_lastlogintime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->lastlogintime());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 accSucMoonCakeCnt = 9 [default = 0];
    if (has_accsucmooncakecnt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->accsucmooncakecnt());
    }
    
    // optional int32 maxSucMoonCakeCnt = 10 [default = 0];
    if (has_maxsucmooncakecnt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->maxsucmooncakecnt());
    }
    
    // optional int32 activeFlag = 11 [default = 0];
    if (has_activeflag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->activeflag());
    }
    
    // optional int32 dayGetFlag1Cnt = 12 [default = 0];
    if (has_daygetflag1cnt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->daygetflag1cnt());
    }
    
    // optional int32 accGetFlag1Cnt = 13 [default = 0];
    if (has_accgetflag1cnt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->accgetflag1cnt());
    }
    
    // optional int32 accGetFlag2Cnt = 14 [default = 0];
    if (has_accgetflag2cnt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->accgetflag2cnt());
    }
    
    // optional int32 dayGetFlag2Cnt = 15 [default = 0];
    if (has_daygetflag2cnt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->daygetflag2cnt());
    }
    
  }
  // repeated int64 frdID = 4;
  {
    int data_size = 0;
    for (int i = 0; i < this->frdid_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int64Size(this->frdid(i));
    }
    total_size += 1 * this->frdid_size() + data_size;
  }
  
  // repeated int32 visitFrdCnt = 5;
  {
    int data_size = 0;
    for (int i = 0; i < this->visitfrdcnt_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->visitfrdcnt(i));
    }
    total_size += 1 * this->visitfrdcnt_size() + data_size;
  }
  
  // repeated int32 getAccRewardCnt = 7;
  {
    int data_size = 0;
    for (int i = 0; i < this->getaccrewardcnt_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->getaccrewardcnt(i));
    }
    total_size += 1 * this->getaccrewardcnt_size() + data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void DB_MoonCake::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DB_MoonCake* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DB_MoonCake*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DB_MoonCake::MergeFrom(const DB_MoonCake& from) {
  GOOGLE_CHECK_NE(&from, this);
  frdid_.MergeFrom(from.frdid_);
  visitfrdcnt_.MergeFrom(from.visitfrdcnt_);
  getaccrewardcnt_.MergeFrom(from.getaccrewardcnt_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_mooncakecnt(from.mooncakecnt());
    }
    if (from._has_bit(1)) {
      set_goldlevel(from.goldlevel());
    }
    if (from._has_bit(2)) {
      set_silverlevel(from.silverlevel());
    }
    if (from._has_bit(5)) {
      set_dayaccsuccnt(from.dayaccsuccnt());
    }
    if (from._has_bit(7)) {
      set_lastlogintime(from.lastlogintime());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from._has_bit(8)) {
      set_accsucmooncakecnt(from.accsucmooncakecnt());
    }
    if (from._has_bit(9)) {
      set_maxsucmooncakecnt(from.maxsucmooncakecnt());
    }
    if (from._has_bit(10)) {
      set_activeflag(from.activeflag());
    }
    if (from._has_bit(11)) {
      set_daygetflag1cnt(from.daygetflag1cnt());
    }
    if (from._has_bit(12)) {
      set_accgetflag1cnt(from.accgetflag1cnt());
    }
    if (from._has_bit(13)) {
      set_accgetflag2cnt(from.accgetflag2cnt());
    }
    if (from._has_bit(14)) {
      set_daygetflag2cnt(from.daygetflag2cnt());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DB_MoonCake::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DB_MoonCake::CopyFrom(const DB_MoonCake& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DB_MoonCake::IsInitialized() const {
  
  return true;
}

void DB_MoonCake::Swap(DB_MoonCake* other) {
  if (other != this) {
    std::swap(mooncakecnt_, other->mooncakecnt_);
    std::swap(goldlevel_, other->goldlevel_);
    std::swap(silverlevel_, other->silverlevel_);
    frdid_.Swap(&other->frdid_);
    visitfrdcnt_.Swap(&other->visitfrdcnt_);
    std::swap(dayaccsuccnt_, other->dayaccsuccnt_);
    getaccrewardcnt_.Swap(&other->getaccrewardcnt_);
    std::swap(lastlogintime_, other->lastlogintime_);
    std::swap(accsucmooncakecnt_, other->accsucmooncakecnt_);
    std::swap(maxsucmooncakecnt_, other->maxsucmooncakecnt_);
    std::swap(activeflag_, other->activeflag_);
    std::swap(daygetflag1cnt_, other->daygetflag1cnt_);
    std::swap(accgetflag1cnt_, other->accgetflag1cnt_);
    std::swap(accgetflag2cnt_, other->accgetflag2cnt_);
    std::swap(daygetflag2cnt_, other->daygetflag2cnt_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DB_MoonCake::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DB_MoonCake_descriptor_;
  metadata.reflection = DB_MoonCake_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DB_HolidayDraw::kActiveFlagFieldNumber;
const int DB_HolidayDraw::kGoldLevelFieldNumber;
const int DB_HolidayDraw::kSilverLevelFieldNumber;
const int DB_HolidayDraw::kFrdIDFieldNumber;
const int DB_HolidayDraw::kVisitFrdCntFieldNumber;
const int DB_HolidayDraw::kDayAccSucCntFieldNumber;
const int DB_HolidayDraw::kGetAccRewardCntFieldNumber;
const int DB_HolidayDraw::kDayGetFlag1CntFieldNumber;
const int DB_HolidayDraw::kAccGetFlag1CntFieldNumber;
const int DB_HolidayDraw::kAccGetFlag2CntFieldNumber;
const int DB_HolidayDraw::kDayGetFlag2CntFieldNumber;
const int DB_HolidayDraw::kLastGetTimeFieldNumber;
const int DB_HolidayDraw::kDayFreeCntFieldNumber;
const int DB_HolidayDraw::kDayCostCreditTimeFieldNumber;
const int DB_HolidayDraw::kHasGetRankFieldNumber;
const int DB_HolidayDraw::kDayAgainCntFieldNumber;
#endif  // !_MSC_VER

DB_HolidayDraw::DB_HolidayDraw() {
  SharedCtor();
}

void DB_HolidayDraw::InitAsDefaultInstance() {
}

DB_HolidayDraw::DB_HolidayDraw(const DB_HolidayDraw& from) {
  SharedCtor();
  MergeFrom(from);
}

void DB_HolidayDraw::SharedCtor() {
  _cached_size_ = 0;
  activeflag_ = 0;
  goldlevel_ = 0;
  silverlevel_ = 0;
  dayaccsuccnt_ = 0;
  daygetflag1cnt_ = 0;
  accgetflag1cnt_ = 0;
  accgetflag2cnt_ = 0;
  daygetflag2cnt_ = 0;
  lastgettime_ = GOOGLE_LONGLONG(0);
  dayfreecnt_ = 0;
  daycostcredittime_ = 0;
  hasgetrank_ = false;
  dayagaincnt_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DB_HolidayDraw::~DB_HolidayDraw() {
  SharedDtor();
}

void DB_HolidayDraw::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* DB_HolidayDraw::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DB_HolidayDraw_descriptor_;
}

const DB_HolidayDraw& DB_HolidayDraw::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dbinterface_5fsub_2eproto();  return *default_instance_;
}

DB_HolidayDraw* DB_HolidayDraw::default_instance_ = NULL;

DB_HolidayDraw* DB_HolidayDraw::New() const {
  return new DB_HolidayDraw;
}

void DB_HolidayDraw::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    activeflag_ = 0;
    goldlevel_ = 0;
    silverlevel_ = 0;
    dayaccsuccnt_ = 0;
    daygetflag1cnt_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    accgetflag1cnt_ = 0;
    accgetflag2cnt_ = 0;
    daygetflag2cnt_ = 0;
    lastgettime_ = GOOGLE_LONGLONG(0);
    dayfreecnt_ = 0;
    daycostcredittime_ = 0;
    hasgetrank_ = false;
    dayagaincnt_ = 0;
  }
  frdid_.Clear();
  visitfrdcnt_.Clear();
  getaccrewardcnt_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DB_HolidayDraw::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 activeFlag = 1 [default = 0];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &activeflag_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_goldLevel;
        break;
      }
      
      // optional int32 goldLevel = 2 [default = 0];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_goldLevel:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &goldlevel_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_silverLevel;
        break;
      }
      
      // optional int32 silverLevel = 3 [default = 0];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_silverLevel:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &silverlevel_));
        _set_bit(2);
        if (input->ExpectTag(32)) goto parse_frdID;
        break;
      }
      
      // repeated int64 frdID = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_frdID:
        ::google::protobuf::int64 value;
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt64(
              input, &value));
        add_frdid(value);
        if (input->ExpectTag(32)) goto parse_frdID;
        if (input->ExpectTag(40)) goto parse_visitFrdCnt;
        break;
      }
      
      // repeated int32 visitFrdCnt = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_visitFrdCnt:
        ::google::protobuf::int32 value;
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &value));
        add_visitfrdcnt(value);
        if (input->ExpectTag(40)) goto parse_visitFrdCnt;
        if (input->ExpectTag(48)) goto parse_dayAccSucCnt;
        break;
      }
      
      // optional int32 dayAccSucCnt = 6 [default = 0];
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_dayAccSucCnt:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &dayaccsuccnt_));
        _set_bit(5);
        if (input->ExpectTag(56)) goto parse_getAccRewardCnt;
        break;
      }
      
      // repeated int32 getAccRewardCnt = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_getAccRewardCnt:
        ::google::protobuf::int32 value;
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &value));
        add_getaccrewardcnt(value);
        if (input->ExpectTag(56)) goto parse_getAccRewardCnt;
        if (input->ExpectTag(64)) goto parse_dayGetFlag1Cnt;
        break;
      }
      
      // optional int32 dayGetFlag1Cnt = 8 [default = 0];
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_dayGetFlag1Cnt:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &daygetflag1cnt_));
        _set_bit(7);
        if (input->ExpectTag(72)) goto parse_accGetFlag1Cnt;
        break;
      }
      
      // optional int32 accGetFlag1Cnt = 9 [default = 0];
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_accGetFlag1Cnt:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &accgetflag1cnt_));
        _set_bit(8);
        if (input->ExpectTag(80)) goto parse_accGetFlag2Cnt;
        break;
      }
      
      // optional int32 accGetFlag2Cnt = 10 [default = 0];
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_accGetFlag2Cnt:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &accgetflag2cnt_));
        _set_bit(9);
        if (input->ExpectTag(88)) goto parse_dayGetFlag2Cnt;
        break;
      }
      
      // optional int32 dayGetFlag2Cnt = 11 [default = 0];
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_dayGetFlag2Cnt:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &daygetflag2cnt_));
        _set_bit(10);
        if (input->ExpectTag(96)) goto parse_lastGetTime;
        break;
      }
      
      // optional int64 lastGetTime = 12 [default = 0];
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_lastGetTime:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt64(
              input, &lastgettime_));
        _set_bit(11);
        if (input->ExpectTag(128)) goto parse_dayFreeCnt;
        break;
      }
      
      // optional int32 dayFreeCnt = 16 [default = 0];
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_dayFreeCnt:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &dayfreecnt_));
        _set_bit(12);
        if (input->ExpectTag(136)) goto parse_dayCostCreditTime;
        break;
      }
      
      // optional int32 dayCostCreditTime = 17 [default = 0];
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_dayCostCreditTime:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &daycostcredittime_));
        _set_bit(13);
        if (input->ExpectTag(144)) goto parse_hasGetRank;
        break;
      }
      
      // optional bool hasGetRank = 18 [default = false];
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_hasGetRank:
        DO_(::google::protobuf::internal::WireFormatLite::ReadBool(
              input, &hasgetrank_));
        _set_bit(14);
        if (input->ExpectTag(152)) goto parse_dayAgainCnt;
        break;
      }
      
      // optional int32 dayAgainCnt = 19 [default = 0];
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_dayAgainCnt:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &dayagaincnt_));
        _set_bit(15);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DB_HolidayDraw::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    DB_HolidayDraw::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional int32 activeFlag = 1 [default = 0];
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->activeflag(), output);
  }
  
  // optional int32 goldLevel = 2 [default = 0];
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->goldlevel(), output);
  }
  
  // optional int32 silverLevel = 3 [default = 0];
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->silverlevel(), output);
  }
  
  // repeated int64 frdID = 4;
  for (int i = 0; i < this->frdid_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(
      4, this->frdid(i), output);
  }
  
  // repeated int32 visitFrdCnt = 5;
  for (int i = 0; i < this->visitfrdcnt_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      5, this->visitfrdcnt(i), output);
  }
  
  // optional int32 dayAccSucCnt = 6 [default = 0];
  if (_has_bit(5)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->dayaccsuccnt(), output);
  }
  
  // repeated int32 getAccRewardCnt = 7;
  for (int i = 0; i < this->getaccrewardcnt_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      7, this->getaccrewardcnt(i), output);
  }
  
  // optional int32 dayGetFlag1Cnt = 8 [default = 0];
  if (_has_bit(7)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->daygetflag1cnt(), output);
  }
  
  // optional int32 accGetFlag1Cnt = 9 [default = 0];
  if (_has_bit(8)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->accgetflag1cnt(), output);
  }
  
  // optional int32 accGetFlag2Cnt = 10 [default = 0];
  if (_has_bit(9)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->accgetflag2cnt(), output);
  }
  
  // optional int32 dayGetFlag2Cnt = 11 [default = 0];
  if (_has_bit(10)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->daygetflag2cnt(), output);
  }
  
  // optional int64 lastGetTime = 12 [default = 0];
  if (_has_bit(11)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(12, this->lastgettime(), output);
  }
  
  // optional int32 dayFreeCnt = 16 [default = 0];
  if (_has_bit(12)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(16, this->dayfreecnt(), output);
  }
  
  // optional int32 dayCostCreditTime = 17 [default = 0];
  if (_has_bit(13)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(17, this->daycostcredittime(), output);
  }
  
  // optional bool hasGetRank = 18 [default = false];
  if (_has_bit(14)) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(18, this->hasgetrank(), output);
  }
  
  // optional int32 dayAgainCnt = 19 [default = 0];
  if (_has_bit(15)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(19, this->dayagaincnt(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DB_HolidayDraw::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 activeFlag = 1 [default = 0];
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->activeflag(), target);
  }
  
  // optional int32 goldLevel = 2 [default = 0];
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->goldlevel(), target);
  }
  
  // optional int32 silverLevel = 3 [default = 0];
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->silverlevel(), target);
  }
  
  // repeated int64 frdID = 4;
  for (int i = 0; i < this->frdid_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt64ToArray(4, this->frdid(i), target);
  }
  
  // repeated int32 visitFrdCnt = 5;
  for (int i = 0; i < this->visitfrdcnt_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(5, this->visitfrdcnt(i), target);
  }
  
  // optional int32 dayAccSucCnt = 6 [default = 0];
  if (_has_bit(5)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->dayaccsuccnt(), target);
  }
  
  // repeated int32 getAccRewardCnt = 7;
  for (int i = 0; i < this->getaccrewardcnt_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(7, this->getaccrewardcnt(i), target);
  }
  
  // optional int32 dayGetFlag1Cnt = 8 [default = 0];
  if (_has_bit(7)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->daygetflag1cnt(), target);
  }
  
  // optional int32 accGetFlag1Cnt = 9 [default = 0];
  if (_has_bit(8)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->accgetflag1cnt(), target);
  }
  
  // optional int32 accGetFlag2Cnt = 10 [default = 0];
  if (_has_bit(9)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->accgetflag2cnt(), target);
  }
  
  // optional int32 dayGetFlag2Cnt = 11 [default = 0];
  if (_has_bit(10)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->daygetflag2cnt(), target);
  }
  
  // optional int64 lastGetTime = 12 [default = 0];
  if (_has_bit(11)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(12, this->lastgettime(), target);
  }
  
  // optional int32 dayFreeCnt = 16 [default = 0];
  if (_has_bit(12)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(16, this->dayfreecnt(), target);
  }
  
  // optional int32 dayCostCreditTime = 17 [default = 0];
  if (_has_bit(13)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(17, this->daycostcredittime(), target);
  }
  
  // optional bool hasGetRank = 18 [default = false];
  if (_has_bit(14)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(18, this->hasgetrank(), target);
  }
  
  // optional int32 dayAgainCnt = 19 [default = 0];
  if (_has_bit(15)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(19, this->dayagaincnt(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DB_HolidayDraw::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 activeFlag = 1 [default = 0];
    if (has_activeflag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->activeflag());
    }
    
    // optional int32 goldLevel = 2 [default = 0];
    if (has_goldlevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->goldlevel());
    }
    
    // optional int32 silverLevel = 3 [default = 0];
    if (has_silverlevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->silverlevel());
    }
    
    // optional int32 dayAccSucCnt = 6 [default = 0];
    if (has_dayaccsuccnt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->dayaccsuccnt());
    }
    
    // optional int32 dayGetFlag1Cnt = 8 [default = 0];
    if (has_daygetflag1cnt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->daygetflag1cnt());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 accGetFlag1Cnt = 9 [default = 0];
    if (has_accgetflag1cnt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->accgetflag1cnt());
    }
    
    // optional int32 accGetFlag2Cnt = 10 [default = 0];
    if (has_accgetflag2cnt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->accgetflag2cnt());
    }
    
    // optional int32 dayGetFlag2Cnt = 11 [default = 0];
    if (has_daygetflag2cnt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->daygetflag2cnt());
    }
    
    // optional int64 lastGetTime = 12 [default = 0];
    if (has_lastgettime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->lastgettime());
    }
    
    // optional int32 dayFreeCnt = 16 [default = 0];
    if (has_dayfreecnt()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->dayfreecnt());
    }
    
    // optional int32 dayCostCreditTime = 17 [default = 0];
    if (has_daycostcredittime()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->daycostcredittime());
    }
    
    // optional bool hasGetRank = 18 [default = false];
    if (has_hasgetrank()) {
      total_size += 2 + 1;
    }
    
    // optional int32 dayAgainCnt = 19 [default = 0];
    if (has_dayagaincnt()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->dayagaincnt());
    }
    
  }
  // repeated int64 frdID = 4;
  {
    int data_size = 0;
    for (int i = 0; i < this->frdid_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int64Size(this->frdid(i));
    }
    total_size += 1 * this->frdid_size() + data_size;
  }
  
  // repeated int32 visitFrdCnt = 5;
  {
    int data_size = 0;
    for (int i = 0; i < this->visitfrdcnt_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->visitfrdcnt(i));
    }
    total_size += 1 * this->visitfrdcnt_size() + data_size;
  }
  
  // repeated int32 getAccRewardCnt = 7;
  {
    int data_size = 0;
    for (int i = 0; i < this->getaccrewardcnt_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->getaccrewardcnt(i));
    }
    total_size += 1 * this->getaccrewardcnt_size() + data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void DB_HolidayDraw::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DB_HolidayDraw* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DB_HolidayDraw*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DB_HolidayDraw::MergeFrom(const DB_HolidayDraw& from) {
  GOOGLE_CHECK_NE(&from, this);
  frdid_.MergeFrom(from.frdid_);
  visitfrdcnt_.MergeFrom(from.visitfrdcnt_);
  getaccrewardcnt_.MergeFrom(from.getaccrewardcnt_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_activeflag(from.activeflag());
    }
    if (from._has_bit(1)) {
      set_goldlevel(from.goldlevel());
    }
    if (from._has_bit(2)) {
      set_silverlevel(from.silverlevel());
    }
    if (from._has_bit(5)) {
      set_dayaccsuccnt(from.dayaccsuccnt());
    }
    if (from._has_bit(7)) {
      set_daygetflag1cnt(from.daygetflag1cnt());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from._has_bit(8)) {
      set_accgetflag1cnt(from.accgetflag1cnt());
    }
    if (from._has_bit(9)) {
      set_accgetflag2cnt(from.accgetflag2cnt());
    }
    if (from._has_bit(10)) {
      set_daygetflag2cnt(from.daygetflag2cnt());
    }
    if (from._has_bit(11)) {
      set_lastgettime(from.lastgettime());
    }
    if (from._has_bit(12)) {
      set_dayfreecnt(from.dayfreecnt());
    }
    if (from._has_bit(13)) {
      set_daycostcredittime(from.daycostcredittime());
    }
    if (from._has_bit(14)) {
      set_hasgetrank(from.hasgetrank());
    }
    if (from._has_bit(15)) {
      set_dayagaincnt(from.dayagaincnt());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DB_HolidayDraw::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DB_HolidayDraw::CopyFrom(const DB_HolidayDraw& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DB_HolidayDraw::IsInitialized() const {
  
  return true;
}

void DB_HolidayDraw::Swap(DB_HolidayDraw* other) {
  if (other != this) {
    std::swap(activeflag_, other->activeflag_);
    std::swap(goldlevel_, other->goldlevel_);
    std::swap(silverlevel_, other->silverlevel_);
    frdid_.Swap(&other->frdid_);
    visitfrdcnt_.Swap(&other->visitfrdcnt_);
    std::swap(dayaccsuccnt_, other->dayaccsuccnt_);
    getaccrewardcnt_.Swap(&other->getaccrewardcnt_);
    std::swap(daygetflag1cnt_, other->daygetflag1cnt_);
    std::swap(accgetflag1cnt_, other->accgetflag1cnt_);
    std::swap(accgetflag2cnt_, other->accgetflag2cnt_);
    std::swap(daygetflag2cnt_, other->daygetflag2cnt_);
    std::swap(lastgettime_, other->lastgettime_);
    std::swap(dayfreecnt_, other->dayfreecnt_);
    std::swap(daycostcredittime_, other->daycostcredittime_);
    std::swap(hasgetrank_, other->hasgetrank_);
    std::swap(dayagaincnt_, other->dayagaincnt_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DB_HolidayDraw::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DB_HolidayDraw_descriptor_;
  metadata.reflection = DB_HolidayDraw_reflection_;
  return metadata;
}


// ===================================================================

const ::std::string DB_LeaveMessage_Unit::_default_strmsg_;
const ::std::string DB_LeaveMessage_Unit::_default_strname_;
const ::std::string DB_LeaveMessage_Unit::_default_struid_;
#ifndef _MSC_VER
const int DB_LeaveMessage_Unit::kNTypeFieldNumber;
const int DB_LeaveMessage_Unit::kNIDFieldNumber;
const int DB_LeaveMessage_Unit::kStrMsgFieldNumber;
const int DB_LeaveMessage_Unit::kMsgtimeFieldNumber;
const int DB_LeaveMessage_Unit::kStrNameFieldNumber;
const int DB_LeaveMessage_Unit::kStrUidFieldNumber;
#endif  // !_MSC_VER

DB_LeaveMessage_Unit::DB_LeaveMessage_Unit() {
  SharedCtor();
}

void DB_LeaveMessage_Unit::InitAsDefaultInstance() {
}

DB_LeaveMessage_Unit::DB_LeaveMessage_Unit(const DB_LeaveMessage_Unit& from) {
  SharedCtor();
  MergeFrom(from);
}

void DB_LeaveMessage_Unit::SharedCtor() {
  _cached_size_ = 0;
  ntype_ = 0;
  nid_ = 0;
  strmsg_ = const_cast< ::std::string*>(&_default_strmsg_);
  msgtime_ = 0u;
  strname_ = const_cast< ::std::string*>(&_default_strname_);
  struid_ = const_cast< ::std::string*>(&_default_struid_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DB_LeaveMessage_Unit::~DB_LeaveMessage_Unit() {
  SharedDtor();
}

void DB_LeaveMessage_Unit::SharedDtor() {
  if (strmsg_ != &_default_strmsg_) {
    delete strmsg_;
  }
  if (strname_ != &_default_strname_) {
    delete strname_;
  }
  if (struid_ != &_default_struid_) {
    delete struid_;
  }
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* DB_LeaveMessage_Unit::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DB_LeaveMessage_Unit_descriptor_;
}

const DB_LeaveMessage_Unit& DB_LeaveMessage_Unit::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dbinterface_5fsub_2eproto();  return *default_instance_;
}

DB_LeaveMessage_Unit* DB_LeaveMessage_Unit::default_instance_ = NULL;

DB_LeaveMessage_Unit* DB_LeaveMessage_Unit::New() const {
  return new DB_LeaveMessage_Unit;
}

void DB_LeaveMessage_Unit::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ntype_ = 0;
    nid_ = 0;
    if (_has_bit(2)) {
      if (strmsg_ != &_default_strmsg_) {
        strmsg_->clear();
      }
    }
    msgtime_ = 0u;
    if (_has_bit(4)) {
      if (strname_ != &_default_strname_) {
        strname_->clear();
      }
    }
    if (_has_bit(5)) {
      if (struid_ != &_default_struid_) {
        struid_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DB_LeaveMessage_Unit::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 nType = 1 [default = 0];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &ntype_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_nID;
        break;
      }
      
      // optional int32 nID = 2 [default = 0];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_nID:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &nid_));
        _set_bit(1);
        if (input->ExpectTag(26)) goto parse_strMsg;
        break;
      }
      
      // optional string strMsg = 3 [default = ""];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_strMsg:
        DO_(::google::protobuf::internal::WireFormatLite::ReadString(
              input, this->mutable_strmsg()));
        ::google::protobuf::internal::WireFormat::VerifyUTF8String(
          this->strmsg().data(), this->strmsg().length(),
          ::google::protobuf::internal::WireFormat::PARSE);
        if (input->ExpectTag(32)) goto parse_msgtime;
        break;
      }
      
      // optional uint32 msgtime = 4 [default = 0];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_msgtime:
        DO_(::google::protobuf::internal::WireFormatLite::ReadUInt32(
              input, &msgtime_));
        _set_bit(3);
        if (input->ExpectTag(42)) goto parse_strName;
        break;
      }
      
      // optional string strName = 5 [default = ""];
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_strName:
        DO_(::google::protobuf::internal::WireFormatLite::ReadString(
              input, this->mutable_strname()));
        ::google::protobuf::internal::WireFormat::VerifyUTF8String(
          this->strname().data(), this->strname().length(),
          ::google::protobuf::internal::WireFormat::PARSE);
        if (input->ExpectTag(50)) goto parse_strUid;
        break;
      }
      
      // optional string strUid = 6 [default = ""];
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_strUid:
        DO_(::google::protobuf::internal::WireFormatLite::ReadString(
              input, this->mutable_struid()));
        ::google::protobuf::internal::WireFormat::VerifyUTF8String(
          this->struid().data(), this->struid().length(),
          ::google::protobuf::internal::WireFormat::PARSE);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DB_LeaveMessage_Unit::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    DB_LeaveMessage_Unit::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional int32 nType = 1 [default = 0];
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ntype(), output);
  }
  
  // optional int32 nID = 2 [default = 0];
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->nid(), output);
  }
  
  // optional string strMsg = 3 [default = ""];
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->strmsg().data(), this->strmsg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->strmsg(), output);
  }
  
  // optional uint32 msgtime = 4 [default = 0];
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->msgtime(), output);
  }
  
  // optional string strName = 5 [default = ""];
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->strname().data(), this->strname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->strname(), output);
  }
  
  // optional string strUid = 6 [default = ""];
  if (_has_bit(5)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->struid().data(), this->struid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->struid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DB_LeaveMessage_Unit::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 nType = 1 [default = 0];
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ntype(), target);
  }
  
  // optional int32 nID = 2 [default = 0];
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->nid(), target);
  }
  
  // optional string strMsg = 3 [default = ""];
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->strmsg().data(), this->strmsg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->strmsg(), target);
  }
  
  // optional uint32 msgtime = 4 [default = 0];
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->msgtime(), target);
  }
  
  // optional string strName = 5 [default = ""];
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->strname().data(), this->strname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->strname(), target);
  }
  
  // optional string strUid = 6 [default = ""];
  if (_has_bit(5)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->struid().data(), this->struid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->struid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DB_LeaveMessage_Unit::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 nType = 1 [default = 0];
    if (has_ntype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ntype());
    }
    
    // optional int32 nID = 2 [default = 0];
    if (has_nid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->nid());
    }
    
    // optional string strMsg = 3 [default = ""];
    if (has_strmsg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->strmsg());
    }
    
    // optional uint32 msgtime = 4 [default = 0];
    if (has_msgtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->msgtime());
    }
    
    // optional string strName = 5 [default = ""];
    if (has_strname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->strname());
    }
    
    // optional string strUid = 6 [default = ""];
    if (has_struid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->struid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void DB_LeaveMessage_Unit::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DB_LeaveMessage_Unit* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DB_LeaveMessage_Unit*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DB_LeaveMessage_Unit::MergeFrom(const DB_LeaveMessage_Unit& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_ntype(from.ntype());
    }
    if (from._has_bit(1)) {
      set_nid(from.nid());
    }
    if (from._has_bit(2)) {
      set_strmsg(from.strmsg());
    }
    if (from._has_bit(3)) {
      set_msgtime(from.msgtime());
    }
    if (from._has_bit(4)) {
      set_strname(from.strname());
    }
    if (from._has_bit(5)) {
      set_struid(from.struid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DB_LeaveMessage_Unit::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DB_LeaveMessage_Unit::CopyFrom(const DB_LeaveMessage_Unit& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DB_LeaveMessage_Unit::IsInitialized() const {
  
  return true;
}

void DB_LeaveMessage_Unit::Swap(DB_LeaveMessage_Unit* other) {
  if (other != this) {
    std::swap(ntype_, other->ntype_);
    std::swap(nid_, other->nid_);
    std::swap(strmsg_, other->strmsg_);
    std::swap(msgtime_, other->msgtime_);
    std::swap(strname_, other->strname_);
    std::swap(struid_, other->struid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DB_LeaveMessage_Unit::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DB_LeaveMessage_Unit_descriptor_;
  metadata.reflection = DB_LeaveMessage_Unit_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DB_LeaveMessage::kNTimesFieldNumber;
const int DB_LeaveMessage::kViewtargetuinFieldNumber;
const int DB_LeaveMessage::kBIsNewFieldNumber;
const int DB_LeaveMessage::kLeavemessagearrFieldNumber;
#endif  // !_MSC_VER

DB_LeaveMessage::DB_LeaveMessage() {
  SharedCtor();
}

void DB_LeaveMessage::InitAsDefaultInstance() {
}

DB_LeaveMessage::DB_LeaveMessage(const DB_LeaveMessage& from) {
  SharedCtor();
  MergeFrom(from);
}

void DB_LeaveMessage::SharedCtor() {
  _cached_size_ = 0;
  ntimes_ = 0;
  viewtargetuin_ = GOOGLE_LONGLONG(0);
  bisnew_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DB_LeaveMessage::~DB_LeaveMessage() {
  SharedDtor();
}

void DB_LeaveMessage::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* DB_LeaveMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DB_LeaveMessage_descriptor_;
}

const DB_LeaveMessage& DB_LeaveMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dbinterface_5fsub_2eproto();  return *default_instance_;
}

DB_LeaveMessage* DB_LeaveMessage::default_instance_ = NULL;

DB_LeaveMessage* DB_LeaveMessage::New() const {
  return new DB_LeaveMessage;
}

void DB_LeaveMessage::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ntimes_ = 0;
    viewtargetuin_ = GOOGLE_LONGLONG(0);
    bisnew_ = false;
  }
  leavemessagearr_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DB_LeaveMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 nTimes = 1 [default = 0];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &ntimes_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_viewtargetuin;
        break;
      }
      
      // optional int64 viewtargetuin = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_viewtargetuin:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt64(
              input, &viewtargetuin_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_bIsNew;
        break;
      }
      
      // optional bool bIsNew = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_bIsNew:
        DO_(::google::protobuf::internal::WireFormatLite::ReadBool(
              input, &bisnew_));
        _set_bit(2);
        if (input->ExpectTag(34)) goto parse_leavemessagearr;
        break;
      }
      
      // repeated .DB_LeaveMessage_Unit leavemessagearr = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_leavemessagearr:
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, add_leavemessagearr()));
        if (input->ExpectTag(34)) goto parse_leavemessagearr;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DB_LeaveMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    DB_LeaveMessage::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional int32 nTimes = 1 [default = 0];
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ntimes(), output);
  }
  
  // optional int64 viewtargetuin = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->viewtargetuin(), output);
  }
  
  // optional bool bIsNew = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->bisnew(), output);
  }
  
  // repeated .DB_LeaveMessage_Unit leavemessagearr = 4;
  for (int i = 0; i < this->leavemessagearr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      4, this->leavemessagearr(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DB_LeaveMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 nTimes = 1 [default = 0];
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ntimes(), target);
  }
  
  // optional int64 viewtargetuin = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->viewtargetuin(), target);
  }
  
  // optional bool bIsNew = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->bisnew(), target);
  }
  
  // repeated .DB_LeaveMessage_Unit leavemessagearr = 4;
  for (int i = 0; i < this->leavemessagearr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->leavemessagearr(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DB_LeaveMessage::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 nTimes = 1 [default = 0];
    if (has_ntimes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ntimes());
    }
    
    // optional int64 viewtargetuin = 2;
    if (has_viewtargetuin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->viewtargetuin());
    }
    
    // optional bool bIsNew = 3;
    if (has_bisnew()) {
      total_size += 1 + 1;
    }
    
  }
  // repeated .DB_LeaveMessage_Unit leavemessagearr = 4;
  total_size += 1 * this->leavemessagearr_size();
  for (int i = 0; i < this->leavemessagearr_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->leavemessagearr(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void DB_LeaveMessage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DB_LeaveMessage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DB_LeaveMessage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DB_LeaveMessage::MergeFrom(const DB_LeaveMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  leavemessagearr_.MergeFrom(from.leavemessagearr_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_ntimes(from.ntimes());
    }
    if (from._has_bit(1)) {
      set_viewtargetuin(from.viewtargetuin());
    }
    if (from._has_bit(2)) {
      set_bisnew(from.bisnew());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DB_LeaveMessage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DB_LeaveMessage::CopyFrom(const DB_LeaveMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DB_LeaveMessage::IsInitialized() const {
  
  return true;
}

void DB_LeaveMessage::Swap(DB_LeaveMessage* other) {
  if (other != this) {
    std::swap(ntimes_, other->ntimes_);
    std::swap(viewtargetuin_, other->viewtargetuin_);
    std::swap(bisnew_, other->bisnew_);
    leavemessagearr_.Swap(&other->leavemessagearr_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DB_LeaveMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DB_LeaveMessage_descriptor_;
  metadata.reflection = DB_LeaveMessage_reflection_;
  return metadata;
}


// ===================================================================

const ::std::string DB_TXMissionData::_default_missionid_;
#ifndef _MSC_VER
const int DB_TXMissionData::kMissionidFieldNumber;
const int DB_TXMissionData::kMissionstateFieldNumber;
#endif  // !_MSC_VER

DB_TXMissionData::DB_TXMissionData() {
  SharedCtor();
}

void DB_TXMissionData::InitAsDefaultInstance() {
}

DB_TXMissionData::DB_TXMissionData(const DB_TXMissionData& from) {
  SharedCtor();
  MergeFrom(from);
}

void DB_TXMissionData::SharedCtor() {
  _cached_size_ = 0;
  missionid_ = const_cast< ::std::string*>(&_default_missionid_);
  missionstate_ = -1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DB_TXMissionData::~DB_TXMissionData() {
  SharedDtor();
}

void DB_TXMissionData::SharedDtor() {
  if (missionid_ != &_default_missionid_) {
    delete missionid_;
  }
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* DB_TXMissionData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DB_TXMissionData_descriptor_;
}

const DB_TXMissionData& DB_TXMissionData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dbinterface_5fsub_2eproto();  return *default_instance_;
}

DB_TXMissionData* DB_TXMissionData::default_instance_ = NULL;

DB_TXMissionData* DB_TXMissionData::New() const {
  return new DB_TXMissionData;
}

void DB_TXMissionData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (missionid_ != &_default_missionid_) {
        missionid_->clear();
      }
    }
    missionstate_ = -1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DB_TXMissionData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string missionid = 1 [default = ""];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadString(
              input, this->mutable_missionid()));
        ::google::protobuf::internal::WireFormat::VerifyUTF8String(
          this->missionid().data(), this->missionid().length(),
          ::google::protobuf::internal::WireFormat::PARSE);
        if (input->ExpectTag(16)) goto parse_missionstate;
        break;
      }
      
      // optional int32 missionstate = 2 [default = -1];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_missionstate:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &missionstate_));
        _set_bit(1);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DB_TXMissionData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    DB_TXMissionData::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional string missionid = 1 [default = ""];
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->missionid().data(), this->missionid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->missionid(), output);
  }
  
  // optional int32 missionstate = 2 [default = -1];
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->missionstate(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DB_TXMissionData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string missionid = 1 [default = ""];
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->missionid().data(), this->missionid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->missionid(), target);
  }
  
  // optional int32 missionstate = 2 [default = -1];
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->missionstate(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DB_TXMissionData::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string missionid = 1 [default = ""];
    if (has_missionid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->missionid());
    }
    
    // optional int32 missionstate = 2 [default = -1];
    if (has_missionstate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->missionstate());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void DB_TXMissionData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DB_TXMissionData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DB_TXMissionData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DB_TXMissionData::MergeFrom(const DB_TXMissionData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_missionid(from.missionid());
    }
    if (from._has_bit(1)) {
      set_missionstate(from.missionstate());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DB_TXMissionData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DB_TXMissionData::CopyFrom(const DB_TXMissionData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DB_TXMissionData::IsInitialized() const {
  
  return true;
}

void DB_TXMissionData::Swap(DB_TXMissionData* other) {
  if (other != this) {
    std::swap(missionid_, other->missionid_);
    std::swap(missionstate_, other->missionstate_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DB_TXMissionData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DB_TXMissionData_descriptor_;
  metadata.reflection = DB_TXMissionData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DB_ClientNumStat::kDayStatTypeFieldNumber;
const int DB_ClientNumStat::kDayStatNumFieldNumber;
#endif  // !_MSC_VER

DB_ClientNumStat::DB_ClientNumStat() {
  SharedCtor();
}

void DB_ClientNumStat::InitAsDefaultInstance() {
}

DB_ClientNumStat::DB_ClientNumStat(const DB_ClientNumStat& from) {
  SharedCtor();
  MergeFrom(from);
}

void DB_ClientNumStat::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DB_ClientNumStat::~DB_ClientNumStat() {
  SharedDtor();
}

void DB_ClientNumStat::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* DB_ClientNumStat::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DB_ClientNumStat_descriptor_;
}

const DB_ClientNumStat& DB_ClientNumStat::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dbinterface_5fsub_2eproto();  return *default_instance_;
}

DB_ClientNumStat* DB_ClientNumStat::default_instance_ = NULL;

DB_ClientNumStat* DB_ClientNumStat::New() const {
  return new DB_ClientNumStat;
}

void DB_ClientNumStat::Clear() {
  daystattype_.Clear();
  daystatnum_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DB_ClientNumStat::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated int32 dayStatType = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_dayStatType:
        ::google::protobuf::int32 value;
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &value));
        add_daystattype(value);
        if (input->ExpectTag(16)) goto parse_dayStatType;
        if (input->ExpectTag(24)) goto parse_dayStatNum;
        break;
      }
      
      // repeated int32 dayStatNum = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_dayStatNum:
        ::google::protobuf::int32 value;
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &value));
        add_daystatnum(value);
        if (input->ExpectTag(24)) goto parse_dayStatNum;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DB_ClientNumStat::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    DB_ClientNumStat::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // repeated int32 dayStatType = 2;
  for (int i = 0; i < this->daystattype_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      2, this->daystattype(i), output);
  }
  
  // repeated int32 dayStatNum = 3;
  for (int i = 0; i < this->daystatnum_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      3, this->daystatnum(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DB_ClientNumStat::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated int32 dayStatType = 2;
  for (int i = 0; i < this->daystattype_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(2, this->daystattype(i), target);
  }
  
  // repeated int32 dayStatNum = 3;
  for (int i = 0; i < this->daystatnum_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(3, this->daystatnum(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DB_ClientNumStat::ByteSize() const {
  int total_size = 0;
  
  // repeated int32 dayStatType = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->daystattype_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->daystattype(i));
    }
    total_size += 1 * this->daystattype_size() + data_size;
  }
  
  // repeated int32 dayStatNum = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->daystatnum_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->daystatnum(i));
    }
    total_size += 1 * this->daystatnum_size() + data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void DB_ClientNumStat::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DB_ClientNumStat* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DB_ClientNumStat*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DB_ClientNumStat::MergeFrom(const DB_ClientNumStat& from) {
  GOOGLE_CHECK_NE(&from, this);
  daystattype_.MergeFrom(from.daystattype_);
  daystatnum_.MergeFrom(from.daystatnum_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DB_ClientNumStat::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DB_ClientNumStat::CopyFrom(const DB_ClientNumStat& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DB_ClientNumStat::IsInitialized() const {
  
  return true;
}

void DB_ClientNumStat::Swap(DB_ClientNumStat* other) {
  if (other != this) {
    daystattype_.Swap(&other->daystattype_);
    daystatnum_.Swap(&other->daystatnum_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DB_ClientNumStat::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DB_ClientNumStat_descriptor_;
  metadata.reflection = DB_ClientNumStat_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DB_PokerInfo::kPokerNoFieldNumber;
const int DB_PokerInfo::kPokerColourFieldNumber;
#endif  // !_MSC_VER

DB_PokerInfo::DB_PokerInfo() {
  SharedCtor();
}

void DB_PokerInfo::InitAsDefaultInstance() {
}

DB_PokerInfo::DB_PokerInfo(const DB_PokerInfo& from) {
  SharedCtor();
  MergeFrom(from);
}

void DB_PokerInfo::SharedCtor() {
  _cached_size_ = 0;
  pokerno_ = 0;
  pokercolour_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DB_PokerInfo::~DB_PokerInfo() {
  SharedDtor();
}

void DB_PokerInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* DB_PokerInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DB_PokerInfo_descriptor_;
}

const DB_PokerInfo& DB_PokerInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dbinterface_5fsub_2eproto();  return *default_instance_;
}

DB_PokerInfo* DB_PokerInfo::default_instance_ = NULL;

DB_PokerInfo* DB_PokerInfo::New() const {
  return new DB_PokerInfo;
}

void DB_PokerInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    pokerno_ = 0;
    pokercolour_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DB_PokerInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 pokerNo = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &pokerno_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_pokerColour;
        break;
      }
      
      // optional int32 pokerColour = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_pokerColour:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &pokercolour_));
        _set_bit(1);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DB_PokerInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    DB_PokerInfo::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional int32 pokerNo = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->pokerno(), output);
  }
  
  // optional int32 pokerColour = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->pokercolour(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DB_PokerInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 pokerNo = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->pokerno(), target);
  }
  
  // optional int32 pokerColour = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->pokercolour(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DB_PokerInfo::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 pokerNo = 1;
    if (has_pokerno()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pokerno());
    }
    
    // optional int32 pokerColour = 2;
    if (has_pokercolour()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pokercolour());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void DB_PokerInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DB_PokerInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DB_PokerInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DB_PokerInfo::MergeFrom(const DB_PokerInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_pokerno(from.pokerno());
    }
    if (from._has_bit(1)) {
      set_pokercolour(from.pokercolour());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DB_PokerInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DB_PokerInfo::CopyFrom(const DB_PokerInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DB_PokerInfo::IsInitialized() const {
  
  return true;
}

void DB_PokerInfo::Swap(DB_PokerInfo* other) {
  if (other != this) {
    std::swap(pokerno_, other->pokerno_);
    std::swap(pokercolour_, other->pokercolour_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DB_PokerInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DB_PokerInfo_descriptor_;
  metadata.reflection = DB_PokerInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DB_CurrPokerInfo::kUserPokersFieldNumber;
const int DB_CurrPokerInfo::kNpcPokersFieldNumber;
const int DB_CurrPokerInfo::kUserTypeFieldNumber;
const int DB_CurrPokerInfo::kNPCTypeFieldNumber;
#endif  // !_MSC_VER

DB_CurrPokerInfo::DB_CurrPokerInfo() {
  SharedCtor();
}

void DB_CurrPokerInfo::InitAsDefaultInstance() {
}

DB_CurrPokerInfo::DB_CurrPokerInfo(const DB_CurrPokerInfo& from) {
  SharedCtor();
  MergeFrom(from);
}

void DB_CurrPokerInfo::SharedCtor() {
  _cached_size_ = 0;
  usertype_ = 0;
  npctype_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DB_CurrPokerInfo::~DB_CurrPokerInfo() {
  SharedDtor();
}

void DB_CurrPokerInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* DB_CurrPokerInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DB_CurrPokerInfo_descriptor_;
}

const DB_CurrPokerInfo& DB_CurrPokerInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dbinterface_5fsub_2eproto();  return *default_instance_;
}

DB_CurrPokerInfo* DB_CurrPokerInfo::default_instance_ = NULL;

DB_CurrPokerInfo* DB_CurrPokerInfo::New() const {
  return new DB_CurrPokerInfo;
}

void DB_CurrPokerInfo::Clear() {
  if (_has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    usertype_ = 0;
    npctype_ = 0;
  }
  userpokers_.Clear();
  npcpokers_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DB_CurrPokerInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .DB_PokerInfo userPokers = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_userPokers:
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, add_userpokers()));
        if (input->ExpectTag(10)) goto parse_userPokers;
        if (input->ExpectTag(18)) goto parse_npcPokers;
        break;
      }
      
      // repeated .DB_PokerInfo npcPokers = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_npcPokers:
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, add_npcpokers()));
        if (input->ExpectTag(18)) goto parse_npcPokers;
        if (input->ExpectTag(24)) goto parse_userType;
        break;
      }
      
      // optional int32 userType = 3 [default = 0];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_userType:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &usertype_));
        _set_bit(2);
        if (input->ExpectTag(32)) goto parse_NPCType;
        break;
      }
      
      // optional int32 NPCType = 4 [default = 0];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_NPCType:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &npctype_));
        _set_bit(3);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DB_CurrPokerInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    DB_CurrPokerInfo::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // repeated .DB_PokerInfo userPokers = 1;
  for (int i = 0; i < this->userpokers_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      1, this->userpokers(i), output);
  }
  
  // repeated .DB_PokerInfo npcPokers = 2;
  for (int i = 0; i < this->npcpokers_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      2, this->npcpokers(i), output);
  }
  
  // optional int32 userType = 3 [default = 0];
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->usertype(), output);
  }
  
  // optional int32 NPCType = 4 [default = 0];
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->npctype(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DB_CurrPokerInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .DB_PokerInfo userPokers = 1;
  for (int i = 0; i < this->userpokers_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->userpokers(i), target);
  }
  
  // repeated .DB_PokerInfo npcPokers = 2;
  for (int i = 0; i < this->npcpokers_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->npcpokers(i), target);
  }
  
  // optional int32 userType = 3 [default = 0];
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->usertype(), target);
  }
  
  // optional int32 NPCType = 4 [default = 0];
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->npctype(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DB_CurrPokerInfo::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    // optional int32 userType = 3 [default = 0];
    if (has_usertype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->usertype());
    }
    
    // optional int32 NPCType = 4 [default = 0];
    if (has_npctype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->npctype());
    }
    
  }
  // repeated .DB_PokerInfo userPokers = 1;
  total_size += 1 * this->userpokers_size();
  for (int i = 0; i < this->userpokers_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->userpokers(i));
  }
  
  // repeated .DB_PokerInfo npcPokers = 2;
  total_size += 1 * this->npcpokers_size();
  for (int i = 0; i < this->npcpokers_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->npcpokers(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void DB_CurrPokerInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DB_CurrPokerInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DB_CurrPokerInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DB_CurrPokerInfo::MergeFrom(const DB_CurrPokerInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  userpokers_.MergeFrom(from.userpokers_);
  npcpokers_.MergeFrom(from.npcpokers_);
  if (from._has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    if (from._has_bit(2)) {
      set_usertype(from.usertype());
    }
    if (from._has_bit(3)) {
      set_npctype(from.npctype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DB_CurrPokerInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DB_CurrPokerInfo::CopyFrom(const DB_CurrPokerInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DB_CurrPokerInfo::IsInitialized() const {
  
  return true;
}

void DB_CurrPokerInfo::Swap(DB_CurrPokerInfo* other) {
  if (other != this) {
    userpokers_.Swap(&other->userpokers_);
    npcpokers_.Swap(&other->npcpokers_);
    std::swap(usertype_, other->usertype_);
    std::swap(npctype_, other->npctype_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DB_CurrPokerInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DB_CurrPokerInfo_descriptor_;
  metadata.reflection = DB_CurrPokerInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DB_PokerExchanges::kGift0FieldNumber;
const int DB_PokerExchanges::kGift1FieldNumber;
const int DB_PokerExchanges::kGift2FieldNumber;
const int DB_PokerExchanges::kGift3FieldNumber;
const int DB_PokerExchanges::kGift4FieldNumber;
const int DB_PokerExchanges::kIsGetRarityGiftFieldNumber;
const int DB_PokerExchanges::kGiftnum0FieldNumber;
const int DB_PokerExchanges::kGiftnum1FieldNumber;
const int DB_PokerExchanges::kGiftnum2FieldNumber;
const int DB_PokerExchanges::kGiftnum3FieldNumber;
const int DB_PokerExchanges::kGiftnum4FieldNumber;
const int DB_PokerExchanges::kRefreshExcCntFieldNumber;
#endif  // !_MSC_VER

DB_PokerExchanges::DB_PokerExchanges() {
  SharedCtor();
}

void DB_PokerExchanges::InitAsDefaultInstance() {
}

DB_PokerExchanges::DB_PokerExchanges(const DB_PokerExchanges& from) {
  SharedCtor();
  MergeFrom(from);
}

void DB_PokerExchanges::SharedCtor() {
  _cached_size_ = 0;
  gift0_ = 0;
  gift1_ = 0;
  gift2_ = 0;
  gift3_ = 0;
  gift4_ = 0;
  isgetraritygift_ = false;
  giftnum0_ = 0;
  giftnum1_ = 0;
  giftnum2_ = 0;
  giftnum3_ = 0;
  giftnum4_ = 0;
  refreshexccnt_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DB_PokerExchanges::~DB_PokerExchanges() {
  SharedDtor();
}

void DB_PokerExchanges::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* DB_PokerExchanges::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DB_PokerExchanges_descriptor_;
}

const DB_PokerExchanges& DB_PokerExchanges::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dbinterface_5fsub_2eproto();  return *default_instance_;
}

DB_PokerExchanges* DB_PokerExchanges::default_instance_ = NULL;

DB_PokerExchanges* DB_PokerExchanges::New() const {
  return new DB_PokerExchanges;
}

void DB_PokerExchanges::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    gift0_ = 0;
    gift1_ = 0;
    gift2_ = 0;
    gift3_ = 0;
    gift4_ = 0;
    isgetraritygift_ = false;
    giftnum0_ = 0;
    giftnum1_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    giftnum2_ = 0;
    giftnum3_ = 0;
    giftnum4_ = 0;
    refreshexccnt_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DB_PokerExchanges::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 gift0 = 1 [default = 0];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &gift0_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_gift1;
        break;
      }
      
      // optional int32 gift1 = 2 [default = 0];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_gift1:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &gift1_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_gift2;
        break;
      }
      
      // optional int32 gift2 = 3 [default = 0];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_gift2:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &gift2_));
        _set_bit(2);
        if (input->ExpectTag(32)) goto parse_gift3;
        break;
      }
      
      // optional int32 gift3 = 4 [default = 0];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_gift3:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &gift3_));
        _set_bit(3);
        if (input->ExpectTag(40)) goto parse_gift4;
        break;
      }
      
      // optional int32 gift4 = 5 [default = 0];
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_gift4:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &gift4_));
        _set_bit(4);
        if (input->ExpectTag(48)) goto parse_isGetRarityGift;
        break;
      }
      
      // optional bool isGetRarityGift = 6 [default = false];
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_isGetRarityGift:
        DO_(::google::protobuf::internal::WireFormatLite::ReadBool(
              input, &isgetraritygift_));
        _set_bit(5);
        if (input->ExpectTag(56)) goto parse_giftnum0;
        break;
      }
      
      // optional int32 giftnum0 = 7 [default = 0];
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_giftnum0:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &giftnum0_));
        _set_bit(6);
        if (input->ExpectTag(64)) goto parse_giftnum1;
        break;
      }
      
      // optional int32 giftnum1 = 8 [default = 0];
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_giftnum1:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &giftnum1_));
        _set_bit(7);
        if (input->ExpectTag(72)) goto parse_giftnum2;
        break;
      }
      
      // optional int32 giftnum2 = 9 [default = 0];
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_giftnum2:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &giftnum2_));
        _set_bit(8);
        if (input->ExpectTag(80)) goto parse_giftnum3;
        break;
      }
      
      // optional int32 giftnum3 = 10 [default = 0];
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_giftnum3:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &giftnum3_));
        _set_bit(9);
        if (input->ExpectTag(88)) goto parse_giftnum4;
        break;
      }
      
      // optional int32 giftnum4 = 11 [default = 0];
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_giftnum4:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &giftnum4_));
        _set_bit(10);
        if (input->ExpectTag(96)) goto parse_refreshExcCnt;
        break;
      }
      
      // optional int32 refreshExcCnt = 12 [default = 0];
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_refreshExcCnt:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &refreshexccnt_));
        _set_bit(11);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DB_PokerExchanges::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    DB_PokerExchanges::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional int32 gift0 = 1 [default = 0];
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->gift0(), output);
  }
  
  // optional int32 gift1 = 2 [default = 0];
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->gift1(), output);
  }
  
  // optional int32 gift2 = 3 [default = 0];
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->gift2(), output);
  }
  
  // optional int32 gift3 = 4 [default = 0];
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->gift3(), output);
  }
  
  // optional int32 gift4 = 5 [default = 0];
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->gift4(), output);
  }
  
  // optional bool isGetRarityGift = 6 [default = false];
  if (_has_bit(5)) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->isgetraritygift(), output);
  }
  
  // optional int32 giftnum0 = 7 [default = 0];
  if (_has_bit(6)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->giftnum0(), output);
  }
  
  // optional int32 giftnum1 = 8 [default = 0];
  if (_has_bit(7)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->giftnum1(), output);
  }
  
  // optional int32 giftnum2 = 9 [default = 0];
  if (_has_bit(8)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->giftnum2(), output);
  }
  
  // optional int32 giftnum3 = 10 [default = 0];
  if (_has_bit(9)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->giftnum3(), output);
  }
  
  // optional int32 giftnum4 = 11 [default = 0];
  if (_has_bit(10)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->giftnum4(), output);
  }
  
  // optional int32 refreshExcCnt = 12 [default = 0];
  if (_has_bit(11)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->refreshexccnt(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DB_PokerExchanges::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 gift0 = 1 [default = 0];
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->gift0(), target);
  }
  
  // optional int32 gift1 = 2 [default = 0];
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->gift1(), target);
  }
  
  // optional int32 gift2 = 3 [default = 0];
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->gift2(), target);
  }
  
  // optional int32 gift3 = 4 [default = 0];
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->gift3(), target);
  }
  
  // optional int32 gift4 = 5 [default = 0];
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->gift4(), target);
  }
  
  // optional bool isGetRarityGift = 6 [default = false];
  if (_has_bit(5)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->isgetraritygift(), target);
  }
  
  // optional int32 giftnum0 = 7 [default = 0];
  if (_has_bit(6)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->giftnum0(), target);
  }
  
  // optional int32 giftnum1 = 8 [default = 0];
  if (_has_bit(7)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->giftnum1(), target);
  }
  
  // optional int32 giftnum2 = 9 [default = 0];
  if (_has_bit(8)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->giftnum2(), target);
  }
  
  // optional int32 giftnum3 = 10 [default = 0];
  if (_has_bit(9)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->giftnum3(), target);
  }
  
  // optional int32 giftnum4 = 11 [default = 0];
  if (_has_bit(10)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->giftnum4(), target);
  }
  
  // optional int32 refreshExcCnt = 12 [default = 0];
  if (_has_bit(11)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->refreshexccnt(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DB_PokerExchanges::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 gift0 = 1 [default = 0];
    if (has_gift0()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gift0());
    }
    
    // optional int32 gift1 = 2 [default = 0];
    if (has_gift1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gift1());
    }
    
    // optional int32 gift2 = 3 [default = 0];
    if (has_gift2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gift2());
    }
    
    // optional int32 gift3 = 4 [default = 0];
    if (has_gift3()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gift3());
    }
    
    // optional int32 gift4 = 5 [default = 0];
    if (has_gift4()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gift4());
    }
    
    // optional bool isGetRarityGift = 6 [default = false];
    if (has_isgetraritygift()) {
      total_size += 1 + 1;
    }
    
    // optional int32 giftnum0 = 7 [default = 0];
    if (has_giftnum0()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->giftnum0());
    }
    
    // optional int32 giftnum1 = 8 [default = 0];
    if (has_giftnum1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->giftnum1());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 giftnum2 = 9 [default = 0];
    if (has_giftnum2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->giftnum2());
    }
    
    // optional int32 giftnum3 = 10 [default = 0];
    if (has_giftnum3()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->giftnum3());
    }
    
    // optional int32 giftnum4 = 11 [default = 0];
    if (has_giftnum4()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->giftnum4());
    }
    
    // optional int32 refreshExcCnt = 12 [default = 0];
    if (has_refreshexccnt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->refreshexccnt());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void DB_PokerExchanges::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DB_PokerExchanges* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DB_PokerExchanges*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DB_PokerExchanges::MergeFrom(const DB_PokerExchanges& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_gift0(from.gift0());
    }
    if (from._has_bit(1)) {
      set_gift1(from.gift1());
    }
    if (from._has_bit(2)) {
      set_gift2(from.gift2());
    }
    if (from._has_bit(3)) {
      set_gift3(from.gift3());
    }
    if (from._has_bit(4)) {
      set_gift4(from.gift4());
    }
    if (from._has_bit(5)) {
      set_isgetraritygift(from.isgetraritygift());
    }
    if (from._has_bit(6)) {
      set_giftnum0(from.giftnum0());
    }
    if (from._has_bit(7)) {
      set_giftnum1(from.giftnum1());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from._has_bit(8)) {
      set_giftnum2(from.giftnum2());
    }
    if (from._has_bit(9)) {
      set_giftnum3(from.giftnum3());
    }
    if (from._has_bit(10)) {
      set_giftnum4(from.giftnum4());
    }
    if (from._has_bit(11)) {
      set_refreshexccnt(from.refreshexccnt());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DB_PokerExchanges::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DB_PokerExchanges::CopyFrom(const DB_PokerExchanges& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DB_PokerExchanges::IsInitialized() const {
  
  return true;
}

void DB_PokerExchanges::Swap(DB_PokerExchanges* other) {
  if (other != this) {
    std::swap(gift0_, other->gift0_);
    std::swap(gift1_, other->gift1_);
    std::swap(gift2_, other->gift2_);
    std::swap(gift3_, other->gift3_);
    std::swap(gift4_, other->gift4_);
    std::swap(isgetraritygift_, other->isgetraritygift_);
    std::swap(giftnum0_, other->giftnum0_);
    std::swap(giftnum1_, other->giftnum1_);
    std::swap(giftnum2_, other->giftnum2_);
    std::swap(giftnum3_, other->giftnum3_);
    std::swap(giftnum4_, other->giftnum4_);
    std::swap(refreshexccnt_, other->refreshexccnt_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DB_PokerExchanges::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DB_PokerExchanges_descriptor_;
  metadata.reflection = DB_PokerExchanges_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DB_WorldCupPredictions::kIsBetFieldNumber;
const int DB_WorldCupPredictions::kBetInfoFieldNumber;
const int DB_WorldCupPredictions::kNRewardFieldNumber;
#endif  // !_MSC_VER

DB_WorldCupPredictions::DB_WorldCupPredictions() {
  SharedCtor();
}

void DB_WorldCupPredictions::InitAsDefaultInstance() {
}

DB_WorldCupPredictions::DB_WorldCupPredictions(const DB_WorldCupPredictions& from) {
  SharedCtor();
  MergeFrom(from);
}

void DB_WorldCupPredictions::SharedCtor() {
  _cached_size_ = 0;
  isbet_ = false;
  nreward_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DB_WorldCupPredictions::~DB_WorldCupPredictions() {
  SharedDtor();
}

void DB_WorldCupPredictions::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* DB_WorldCupPredictions::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DB_WorldCupPredictions_descriptor_;
}

const DB_WorldCupPredictions& DB_WorldCupPredictions::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dbinterface_5fsub_2eproto();  return *default_instance_;
}

DB_WorldCupPredictions* DB_WorldCupPredictions::default_instance_ = NULL;

DB_WorldCupPredictions* DB_WorldCupPredictions::New() const {
  return new DB_WorldCupPredictions;
}

void DB_WorldCupPredictions::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    isbet_ = false;
    nreward_ = 0;
  }
  betinfo_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DB_WorldCupPredictions::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool isBet = 1 [default = false];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadBool(
              input, &isbet_));
        _set_bit(0);
        if (input->ExpectTag(18)) goto parse_betInfo;
        break;
      }
      
      // repeated .DB_WCBetInfo betInfo = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_betInfo:
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, add_betinfo()));
        if (input->ExpectTag(18)) goto parse_betInfo;
        if (input->ExpectTag(24)) goto parse_nReward;
        break;
      }
      
      // optional int32 nReward = 3 [default = 0];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_nReward:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &nreward_));
        _set_bit(2);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DB_WorldCupPredictions::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    DB_WorldCupPredictions::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional bool isBet = 1 [default = false];
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->isbet(), output);
  }
  
  // repeated .DB_WCBetInfo betInfo = 2;
  for (int i = 0; i < this->betinfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      2, this->betinfo(i), output);
  }
  
  // optional int32 nReward = 3 [default = 0];
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->nreward(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DB_WorldCupPredictions::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bool isBet = 1 [default = false];
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->isbet(), target);
  }
  
  // repeated .DB_WCBetInfo betInfo = 2;
  for (int i = 0; i < this->betinfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->betinfo(i), target);
  }
  
  // optional int32 nReward = 3 [default = 0];
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->nreward(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DB_WorldCupPredictions::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bool isBet = 1 [default = false];
    if (has_isbet()) {
      total_size += 1 + 1;
    }
    
    // optional int32 nReward = 3 [default = 0];
    if (has_nreward()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->nreward());
    }
    
  }
  // repeated .DB_WCBetInfo betInfo = 2;
  total_size += 1 * this->betinfo_size();
  for (int i = 0; i < this->betinfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->betinfo(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void DB_WorldCupPredictions::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DB_WorldCupPredictions* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DB_WorldCupPredictions*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DB_WorldCupPredictions::MergeFrom(const DB_WorldCupPredictions& from) {
  GOOGLE_CHECK_NE(&from, this);
  betinfo_.MergeFrom(from.betinfo_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_isbet(from.isbet());
    }
    if (from._has_bit(2)) {
      set_nreward(from.nreward());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DB_WorldCupPredictions::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DB_WorldCupPredictions::CopyFrom(const DB_WorldCupPredictions& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DB_WorldCupPredictions::IsInitialized() const {
  
  return true;
}

void DB_WorldCupPredictions::Swap(DB_WorldCupPredictions* other) {
  if (other != this) {
    std::swap(isbet_, other->isbet_);
    betinfo_.Swap(&other->betinfo_);
    std::swap(nreward_, other->nreward_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DB_WorldCupPredictions::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DB_WorldCupPredictions_descriptor_;
  metadata.reflection = DB_WorldCupPredictions_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DB_WCBetInfo::kNTypeFieldNumber;
const int DB_WCBetInfo::kNJettonNumFieldNumber;
const int DB_WCBetInfo::kNOddsFieldNumber;
const int DB_WCBetInfo::kTeamIDFieldNumber;
#endif  // !_MSC_VER

DB_WCBetInfo::DB_WCBetInfo() {
  SharedCtor();
}

void DB_WCBetInfo::InitAsDefaultInstance() {
}

DB_WCBetInfo::DB_WCBetInfo(const DB_WCBetInfo& from) {
  SharedCtor();
  MergeFrom(from);
}

void DB_WCBetInfo::SharedCtor() {
  _cached_size_ = 0;
  ntype_ = 0;
  njettonnum_ = 0;
  nodds_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DB_WCBetInfo::~DB_WCBetInfo() {
  SharedDtor();
}

void DB_WCBetInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* DB_WCBetInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DB_WCBetInfo_descriptor_;
}

const DB_WCBetInfo& DB_WCBetInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dbinterface_5fsub_2eproto();  return *default_instance_;
}

DB_WCBetInfo* DB_WCBetInfo::default_instance_ = NULL;

DB_WCBetInfo* DB_WCBetInfo::New() const {
  return new DB_WCBetInfo;
}

void DB_WCBetInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ntype_ = 0;
    njettonnum_ = 0;
    nodds_ = 0;
  }
  teamid_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DB_WCBetInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 nType = 1 [default = 0];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &ntype_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_nJettonNum;
        break;
      }
      
      // optional int32 nJettonNum = 2 [default = 0];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_nJettonNum:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &njettonnum_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_nOdds;
        break;
      }
      
      // optional int32 nOdds = 3 [default = 0];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_nOdds:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &nodds_));
        _set_bit(2);
        if (input->ExpectTag(32)) goto parse_teamID;
        break;
      }
      
      // repeated int32 teamID = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_teamID:
        ::google::protobuf::int32 value;
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &value));
        add_teamid(value);
        if (input->ExpectTag(32)) goto parse_teamID;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DB_WCBetInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    DB_WCBetInfo::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional int32 nType = 1 [default = 0];
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ntype(), output);
  }
  
  // optional int32 nJettonNum = 2 [default = 0];
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->njettonnum(), output);
  }
  
  // optional int32 nOdds = 3 [default = 0];
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->nodds(), output);
  }
  
  // repeated int32 teamID = 4;
  for (int i = 0; i < this->teamid_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      4, this->teamid(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DB_WCBetInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 nType = 1 [default = 0];
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ntype(), target);
  }
  
  // optional int32 nJettonNum = 2 [default = 0];
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->njettonnum(), target);
  }
  
  // optional int32 nOdds = 3 [default = 0];
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->nodds(), target);
  }
  
  // repeated int32 teamID = 4;
  for (int i = 0; i < this->teamid_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(4, this->teamid(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DB_WCBetInfo::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 nType = 1 [default = 0];
    if (has_ntype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ntype());
    }
    
    // optional int32 nJettonNum = 2 [default = 0];
    if (has_njettonnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->njettonnum());
    }
    
    // optional int32 nOdds = 3 [default = 0];
    if (has_nodds()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->nodds());
    }
    
  }
  // repeated int32 teamID = 4;
  {
    int data_size = 0;
    for (int i = 0; i < this->teamid_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->teamid(i));
    }
    total_size += 1 * this->teamid_size() + data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void DB_WCBetInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DB_WCBetInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DB_WCBetInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DB_WCBetInfo::MergeFrom(const DB_WCBetInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  teamid_.MergeFrom(from.teamid_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_ntype(from.ntype());
    }
    if (from._has_bit(1)) {
      set_njettonnum(from.njettonnum());
    }
    if (from._has_bit(2)) {
      set_nodds(from.nodds());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DB_WCBetInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DB_WCBetInfo::CopyFrom(const DB_WCBetInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DB_WCBetInfo::IsInitialized() const {
  
  return true;
}

void DB_WCBetInfo::Swap(DB_WCBetInfo* other) {
  if (other != this) {
    std::swap(ntype_, other->ntype_);
    std::swap(njettonnum_, other->njettonnum_);
    std::swap(nodds_, other->nodds_);
    teamid_.Swap(&other->teamid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DB_WCBetInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DB_WCBetInfo_descriptor_;
  metadata.reflection = DB_WCBetInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DB_CardDuelInfo::kMyCardTypeFieldNumber;
const int DB_CardDuelInfo::kOppIDFieldNumber;
const int DB_CardDuelInfo::kBNpcFieldNumber;
const int DB_CardDuelInfo::kWinNumFieldNumber;
const int DB_CardDuelInfo::kBMatchFieldNumber;
const int DB_CardDuelInfo::kAddupCreditFieldNumber;
const int DB_CardDuelInfo::kMaxwinNumFieldNumber;
#endif  // !_MSC_VER

DB_CardDuelInfo::DB_CardDuelInfo() {
  SharedCtor();
}

void DB_CardDuelInfo::InitAsDefaultInstance() {
}

DB_CardDuelInfo::DB_CardDuelInfo(const DB_CardDuelInfo& from) {
  SharedCtor();
  MergeFrom(from);
}

void DB_CardDuelInfo::SharedCtor() {
  _cached_size_ = 0;
  mycardtype_ = 0;
  oppid_ = GOOGLE_LONGLONG(0);
  bnpc_ = false;
  winnum_ = 0;
  bmatch_ = false;
  addupcredit_ = 0;
  maxwinnum_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DB_CardDuelInfo::~DB_CardDuelInfo() {
  SharedDtor();
}

void DB_CardDuelInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* DB_CardDuelInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DB_CardDuelInfo_descriptor_;
}

const DB_CardDuelInfo& DB_CardDuelInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dbinterface_5fsub_2eproto();  return *default_instance_;
}

DB_CardDuelInfo* DB_CardDuelInfo::default_instance_ = NULL;

DB_CardDuelInfo* DB_CardDuelInfo::New() const {
  return new DB_CardDuelInfo;
}

void DB_CardDuelInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    mycardtype_ = 0;
    oppid_ = GOOGLE_LONGLONG(0);
    bnpc_ = false;
    winnum_ = 0;
    bmatch_ = false;
    addupcredit_ = 0;
    maxwinnum_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DB_CardDuelInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 myCardType = 1 [default = 0];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &mycardtype_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_oppID;
        break;
      }
      
      // optional int64 oppID = 2 [default = 0];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_oppID:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt64(
              input, &oppid_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_bNpc;
        break;
      }
      
      // optional bool bNpc = 3 [default = false];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_bNpc:
        DO_(::google::protobuf::internal::WireFormatLite::ReadBool(
              input, &bnpc_));
        _set_bit(2);
        if (input->ExpectTag(32)) goto parse_winNum;
        break;
      }
      
      // optional int32 winNum = 4 [default = 0];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_winNum:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &winnum_));
        _set_bit(3);
        if (input->ExpectTag(40)) goto parse_bMatch;
        break;
      }
      
      // optional bool bMatch = 5 [default = false];
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_bMatch:
        DO_(::google::protobuf::internal::WireFormatLite::ReadBool(
              input, &bmatch_));
        _set_bit(4);
        if (input->ExpectTag(48)) goto parse_addupCredit;
        break;
      }
      
      // optional int32 addupCredit = 6 [default = 0];
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_addupCredit:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &addupcredit_));
        _set_bit(5);
        if (input->ExpectTag(56)) goto parse_maxwinNum;
        break;
      }
      
      // optional int32 maxwinNum = 7 [default = 0];
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_maxwinNum:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &maxwinnum_));
        _set_bit(6);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DB_CardDuelInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    DB_CardDuelInfo::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional int32 myCardType = 1 [default = 0];
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->mycardtype(), output);
  }
  
  // optional int64 oppID = 2 [default = 0];
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->oppid(), output);
  }
  
  // optional bool bNpc = 3 [default = false];
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->bnpc(), output);
  }
  
  // optional int32 winNum = 4 [default = 0];
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->winnum(), output);
  }
  
  // optional bool bMatch = 5 [default = false];
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->bmatch(), output);
  }
  
  // optional int32 addupCredit = 6 [default = 0];
  if (_has_bit(5)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->addupcredit(), output);
  }
  
  // optional int32 maxwinNum = 7 [default = 0];
  if (_has_bit(6)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->maxwinnum(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DB_CardDuelInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 myCardType = 1 [default = 0];
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->mycardtype(), target);
  }
  
  // optional int64 oppID = 2 [default = 0];
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->oppid(), target);
  }
  
  // optional bool bNpc = 3 [default = false];
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->bnpc(), target);
  }
  
  // optional int32 winNum = 4 [default = 0];
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->winnum(), target);
  }
  
  // optional bool bMatch = 5 [default = false];
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->bmatch(), target);
  }
  
  // optional int32 addupCredit = 6 [default = 0];
  if (_has_bit(5)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->addupcredit(), target);
  }
  
  // optional int32 maxwinNum = 7 [default = 0];
  if (_has_bit(6)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->maxwinnum(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DB_CardDuelInfo::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 myCardType = 1 [default = 0];
    if (has_mycardtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->mycardtype());
    }
    
    // optional int64 oppID = 2 [default = 0];
    if (has_oppid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->oppid());
    }
    
    // optional bool bNpc = 3 [default = false];
    if (has_bnpc()) {
      total_size += 1 + 1;
    }
    
    // optional int32 winNum = 4 [default = 0];
    if (has_winnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->winnum());
    }
    
    // optional bool bMatch = 5 [default = false];
    if (has_bmatch()) {
      total_size += 1 + 1;
    }
    
    // optional int32 addupCredit = 6 [default = 0];
    if (has_addupcredit()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->addupcredit());
    }
    
    // optional int32 maxwinNum = 7 [default = 0];
    if (has_maxwinnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->maxwinnum());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void DB_CardDuelInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DB_CardDuelInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DB_CardDuelInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DB_CardDuelInfo::MergeFrom(const DB_CardDuelInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_mycardtype(from.mycardtype());
    }
    if (from._has_bit(1)) {
      set_oppid(from.oppid());
    }
    if (from._has_bit(2)) {
      set_bnpc(from.bnpc());
    }
    if (from._has_bit(3)) {
      set_winnum(from.winnum());
    }
    if (from._has_bit(4)) {
      set_bmatch(from.bmatch());
    }
    if (from._has_bit(5)) {
      set_addupcredit(from.addupcredit());
    }
    if (from._has_bit(6)) {
      set_maxwinnum(from.maxwinnum());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DB_CardDuelInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DB_CardDuelInfo::CopyFrom(const DB_CardDuelInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DB_CardDuelInfo::IsInitialized() const {
  
  return true;
}

void DB_CardDuelInfo::Swap(DB_CardDuelInfo* other) {
  if (other != this) {
    std::swap(mycardtype_, other->mycardtype_);
    std::swap(oppid_, other->oppid_);
    std::swap(bnpc_, other->bnpc_);
    std::swap(winnum_, other->winnum_);
    std::swap(bmatch_, other->bmatch_);
    std::swap(addupcredit_, other->addupcredit_);
    std::swap(maxwinnum_, other->maxwinnum_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DB_CardDuelInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DB_CardDuelInfo_descriptor_;
  metadata.reflection = DB_CardDuelInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DB_MiddleYearGift::kFirstGiftFieldNumber;
const int DB_MiddleYearGift::kSecdGiftFieldNumber;
const int DB_MiddleYearGift::kNTotalCreditFieldNumber;
const int DB_MiddleYearGift::kNFlagFieldNumber;
#endif  // !_MSC_VER

DB_MiddleYearGift::DB_MiddleYearGift() {
  SharedCtor();
}

void DB_MiddleYearGift::InitAsDefaultInstance() {
}

DB_MiddleYearGift::DB_MiddleYearGift(const DB_MiddleYearGift& from) {
  SharedCtor();
  MergeFrom(from);
}

void DB_MiddleYearGift::SharedCtor() {
  _cached_size_ = 0;
  firstgift_ = 0;
  secdgift_ = 0;
  ntotalcredit_ = 0;
  nflag_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DB_MiddleYearGift::~DB_MiddleYearGift() {
  SharedDtor();
}

void DB_MiddleYearGift::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* DB_MiddleYearGift::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DB_MiddleYearGift_descriptor_;
}

const DB_MiddleYearGift& DB_MiddleYearGift::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dbinterface_5fsub_2eproto();  return *default_instance_;
}

DB_MiddleYearGift* DB_MiddleYearGift::default_instance_ = NULL;

DB_MiddleYearGift* DB_MiddleYearGift::New() const {
  return new DB_MiddleYearGift;
}

void DB_MiddleYearGift::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    firstgift_ = 0;
    secdgift_ = 0;
    ntotalcredit_ = 0;
    nflag_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DB_MiddleYearGift::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 firstGift = 1 [default = 0];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &firstgift_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_secdGift;
        break;
      }
      
      // optional int32 secdGift = 2 [default = 0];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_secdGift:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &secdgift_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_nTotalCredit;
        break;
      }
      
      // optional int32 nTotalCredit = 3 [default = 0];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_nTotalCredit:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &ntotalcredit_));
        _set_bit(2);
        if (input->ExpectTag(32)) goto parse_nFlag;
        break;
      }
      
      // optional int32 nFlag = 4 [default = 0];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_nFlag:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &nflag_));
        _set_bit(3);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DB_MiddleYearGift::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    DB_MiddleYearGift::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional int32 firstGift = 1 [default = 0];
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->firstgift(), output);
  }
  
  // optional int32 secdGift = 2 [default = 0];
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->secdgift(), output);
  }
  
  // optional int32 nTotalCredit = 3 [default = 0];
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->ntotalcredit(), output);
  }
  
  // optional int32 nFlag = 4 [default = 0];
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->nflag(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DB_MiddleYearGift::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 firstGift = 1 [default = 0];
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->firstgift(), target);
  }
  
  // optional int32 secdGift = 2 [default = 0];
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->secdgift(), target);
  }
  
  // optional int32 nTotalCredit = 3 [default = 0];
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->ntotalcredit(), target);
  }
  
  // optional int32 nFlag = 4 [default = 0];
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->nflag(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DB_MiddleYearGift::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 firstGift = 1 [default = 0];
    if (has_firstgift()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->firstgift());
    }
    
    // optional int32 secdGift = 2 [default = 0];
    if (has_secdgift()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->secdgift());
    }
    
    // optional int32 nTotalCredit = 3 [default = 0];
    if (has_ntotalcredit()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ntotalcredit());
    }
    
    // optional int32 nFlag = 4 [default = 0];
    if (has_nflag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->nflag());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void DB_MiddleYearGift::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DB_MiddleYearGift* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DB_MiddleYearGift*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DB_MiddleYearGift::MergeFrom(const DB_MiddleYearGift& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_firstgift(from.firstgift());
    }
    if (from._has_bit(1)) {
      set_secdgift(from.secdgift());
    }
    if (from._has_bit(2)) {
      set_ntotalcredit(from.ntotalcredit());
    }
    if (from._has_bit(3)) {
      set_nflag(from.nflag());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DB_MiddleYearGift::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DB_MiddleYearGift::CopyFrom(const DB_MiddleYearGift& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DB_MiddleYearGift::IsInitialized() const {
  
  return true;
}

void DB_MiddleYearGift::Swap(DB_MiddleYearGift* other) {
  if (other != this) {
    std::swap(firstgift_, other->firstgift_);
    std::swap(secdgift_, other->secdgift_);
    std::swap(ntotalcredit_, other->ntotalcredit_);
    std::swap(nflag_, other->nflag_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DB_MiddleYearGift::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DB_MiddleYearGift_descriptor_;
  metadata.reflection = DB_MiddleYearGift_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DB_OpenSNSGift::kNTypeFieldNumber;
const int DB_OpenSNSGift::kNFlagFieldNumber;
const int DB_OpenSNSGift::kNTimeFieldNumber;
#endif  // !_MSC_VER

DB_OpenSNSGift::DB_OpenSNSGift() {
  SharedCtor();
}

void DB_OpenSNSGift::InitAsDefaultInstance() {
}

DB_OpenSNSGift::DB_OpenSNSGift(const DB_OpenSNSGift& from) {
  SharedCtor();
  MergeFrom(from);
}

void DB_OpenSNSGift::SharedCtor() {
  _cached_size_ = 0;
  ntype_ = -1;
  nflag_ = 0;
  ntime_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DB_OpenSNSGift::~DB_OpenSNSGift() {
  SharedDtor();
}

void DB_OpenSNSGift::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* DB_OpenSNSGift::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DB_OpenSNSGift_descriptor_;
}

const DB_OpenSNSGift& DB_OpenSNSGift::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dbinterface_5fsub_2eproto();  return *default_instance_;
}

DB_OpenSNSGift* DB_OpenSNSGift::default_instance_ = NULL;

DB_OpenSNSGift* DB_OpenSNSGift::New() const {
  return new DB_OpenSNSGift;
}

void DB_OpenSNSGift::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ntype_ = -1;
    nflag_ = 0;
    ntime_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DB_OpenSNSGift::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 nType = 1 [default = -1];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &ntype_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_nFlag;
        break;
      }
      
      // optional int32 nFlag = 2 [default = 0];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_nFlag:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &nflag_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_nTime;
        break;
      }
      
      // optional int64 nTime = 3 [default = 0];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_nTime:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt64(
              input, &ntime_));
        _set_bit(2);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DB_OpenSNSGift::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    DB_OpenSNSGift::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional int32 nType = 1 [default = -1];
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ntype(), output);
  }
  
  // optional int32 nFlag = 2 [default = 0];
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->nflag(), output);
  }
  
  // optional int64 nTime = 3 [default = 0];
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->ntime(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DB_OpenSNSGift::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 nType = 1 [default = -1];
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ntype(), target);
  }
  
  // optional int32 nFlag = 2 [default = 0];
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->nflag(), target);
  }
  
  // optional int64 nTime = 3 [default = 0];
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->ntime(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DB_OpenSNSGift::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 nType = 1 [default = -1];
    if (has_ntype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ntype());
    }
    
    // optional int32 nFlag = 2 [default = 0];
    if (has_nflag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->nflag());
    }
    
    // optional int64 nTime = 3 [default = 0];
    if (has_ntime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->ntime());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void DB_OpenSNSGift::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DB_OpenSNSGift* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DB_OpenSNSGift*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DB_OpenSNSGift::MergeFrom(const DB_OpenSNSGift& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_ntype(from.ntype());
    }
    if (from._has_bit(1)) {
      set_nflag(from.nflag());
    }
    if (from._has_bit(2)) {
      set_ntime(from.ntime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DB_OpenSNSGift::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DB_OpenSNSGift::CopyFrom(const DB_OpenSNSGift& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DB_OpenSNSGift::IsInitialized() const {
  
  return true;
}

void DB_OpenSNSGift::Swap(DB_OpenSNSGift* other) {
  if (other != this) {
    std::swap(ntype_, other->ntype_);
    std::swap(nflag_, other->nflag_);
    std::swap(ntime_, other->ntime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DB_OpenSNSGift::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DB_OpenSNSGift_descriptor_;
  metadata.reflection = DB_OpenSNSGift_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DB_CallBackFriend::kFrdplatidsFieldNumber;
#endif  // !_MSC_VER

DB_CallBackFriend::DB_CallBackFriend() {
  SharedCtor();
}

void DB_CallBackFriend::InitAsDefaultInstance() {
}

DB_CallBackFriend::DB_CallBackFriend(const DB_CallBackFriend& from) {
  SharedCtor();
  MergeFrom(from);
}

void DB_CallBackFriend::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DB_CallBackFriend::~DB_CallBackFriend() {
  SharedDtor();
}

void DB_CallBackFriend::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* DB_CallBackFriend::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DB_CallBackFriend_descriptor_;
}

const DB_CallBackFriend& DB_CallBackFriend::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dbinterface_5fsub_2eproto();  return *default_instance_;
}

DB_CallBackFriend* DB_CallBackFriend::default_instance_ = NULL;

DB_CallBackFriend* DB_CallBackFriend::New() const {
  return new DB_CallBackFriend;
}

void DB_CallBackFriend::Clear() {
  frdplatids_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DB_CallBackFriend::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated string frdplatids = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_frdplatids:
        DO_(::google::protobuf::internal::WireFormatLite::ReadString(
              input, this->add_frdplatids()));
        ::google::protobuf::internal::WireFormat::VerifyUTF8String(
          this->frdplatids(0).data(), this->frdplatids(0).length(),
          ::google::protobuf::internal::WireFormat::PARSE);
        if (input->ExpectTag(10)) goto parse_frdplatids;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DB_CallBackFriend::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    DB_CallBackFriend::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // repeated string frdplatids = 1;
  for (int i = 0; i < this->frdplatids_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->frdplatids(i).data(), this->frdplatids(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->frdplatids(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DB_CallBackFriend::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated string frdplatids = 1;
  for (int i = 0; i < this->frdplatids_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->frdplatids(i).data(), this->frdplatids(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(1, this->frdplatids(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DB_CallBackFriend::ByteSize() const {
  int total_size = 0;
  
  // repeated string frdplatids = 1;
  total_size += 1 * this->frdplatids_size();
  for (int i = 0; i < this->frdplatids_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->frdplatids(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void DB_CallBackFriend::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DB_CallBackFriend* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DB_CallBackFriend*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DB_CallBackFriend::MergeFrom(const DB_CallBackFriend& from) {
  GOOGLE_CHECK_NE(&from, this);
  frdplatids_.MergeFrom(from.frdplatids_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DB_CallBackFriend::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DB_CallBackFriend::CopyFrom(const DB_CallBackFriend& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DB_CallBackFriend::IsInitialized() const {
  
  return true;
}

void DB_CallBackFriend::Swap(DB_CallBackFriend* other) {
  if (other != this) {
    frdplatids_.Swap(&other->frdplatids_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DB_CallBackFriend::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DB_CallBackFriend_descriptor_;
  metadata.reflection = DB_CallBackFriend_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DB_AttackCount::kUidFieldNumber;
const int DB_AttackCount::kCountFieldNumber;
#endif  // !_MSC_VER

DB_AttackCount::DB_AttackCount() {
  SharedCtor();
}

void DB_AttackCount::InitAsDefaultInstance() {
}

DB_AttackCount::DB_AttackCount(const DB_AttackCount& from) {
  SharedCtor();
  MergeFrom(from);
}

void DB_AttackCount::SharedCtor() {
  _cached_size_ = 0;
  uid_ = GOOGLE_LONGLONG(0);
  count_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DB_AttackCount::~DB_AttackCount() {
  SharedDtor();
}

void DB_AttackCount::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* DB_AttackCount::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DB_AttackCount_descriptor_;
}

const DB_AttackCount& DB_AttackCount::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dbinterface_5fsub_2eproto();  return *default_instance_;
}

DB_AttackCount* DB_AttackCount::default_instance_ = NULL;

DB_AttackCount* DB_AttackCount::New() const {
  return new DB_AttackCount;
}

void DB_AttackCount::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    uid_ = GOOGLE_LONGLONG(0);
    count_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DB_AttackCount::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 uid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt64(
              input, &uid_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_count;
        break;
      }
      
      // optional int32 count = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_count:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &count_));
        _set_bit(1);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DB_AttackCount::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    DB_AttackCount::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // required int64 uid = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->uid(), output);
  }
  
  // optional int32 count = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->count(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DB_AttackCount::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 uid = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->uid(), target);
  }
  
  // optional int32 count = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->count(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DB_AttackCount::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 uid = 1;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->uid());
    }
    
    // optional int32 count = 2;
    if (has_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->count());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void DB_AttackCount::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DB_AttackCount* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DB_AttackCount*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DB_AttackCount::MergeFrom(const DB_AttackCount& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_uid(from.uid());
    }
    if (from._has_bit(1)) {
      set_count(from.count());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DB_AttackCount::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DB_AttackCount::CopyFrom(const DB_AttackCount& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DB_AttackCount::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void DB_AttackCount::Swap(DB_AttackCount* other) {
  if (other != this) {
    std::swap(uid_, other->uid_);
    std::swap(count_, other->count_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DB_AttackCount::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DB_AttackCount_descriptor_;
  metadata.reflection = DB_AttackCount_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DB_Science::kRecruitlandlevelFieldNumber;
const int DB_Science::kRecruitairlevelFieldNumber;
const int DB_Science::kAttacklandlevelFieldNumber;
const int DB_Science::kExtrahonorlevelFieldNumber;
const int DB_Science::kExttimelevelFieldNumber;
const int DB_Science::kRedtimelevelFieldNumber;
const int DB_Science::kExtresFieldNumber;
const int DB_Science::kRedresFieldNumber;
const int DB_Science::kAddbuildhpFieldNumber;
const int DB_Science::kAddgunattackFieldNumber;
const int DB_Science::kAddmissileatkFieldNumber;
const int DB_Science::kMinewarfareFieldNumber;
#endif  // !_MSC_VER

DB_Science::DB_Science() {
  SharedCtor();
}

void DB_Science::InitAsDefaultInstance() {
}

DB_Science::DB_Science(const DB_Science& from) {
  SharedCtor();
  MergeFrom(from);
}

void DB_Science::SharedCtor() {
  _cached_size_ = 0;
  recruitlandlevel_ = 0;
  recruitairlevel_ = 0;
  attacklandlevel_ = 0;
  extrahonorlevel_ = 0;
  exttimelevel_ = 0;
  redtimelevel_ = 0;
  extres_ = 0;
  redres_ = 0;
  addbuildhp_ = 0;
  addgunattack_ = 0;
  addmissileatk_ = 0;
  minewarfare_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DB_Science::~DB_Science() {
  SharedDtor();
}

void DB_Science::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* DB_Science::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DB_Science_descriptor_;
}

const DB_Science& DB_Science::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dbinterface_5fsub_2eproto();  return *default_instance_;
}

DB_Science* DB_Science::default_instance_ = NULL;

DB_Science* DB_Science::New() const {
  return new DB_Science;
}

void DB_Science::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    recruitlandlevel_ = 0;
    recruitairlevel_ = 0;
    attacklandlevel_ = 0;
    extrahonorlevel_ = 0;
    exttimelevel_ = 0;
    redtimelevel_ = 0;
    extres_ = 0;
    redres_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    addbuildhp_ = 0;
    addgunattack_ = 0;
    addmissileatk_ = 0;
    minewarfare_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DB_Science::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 recruitlandlevel = 1 [default = 0];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &recruitlandlevel_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_recruitairlevel;
        break;
      }
      
      // optional int32 recruitairlevel = 2 [default = 0];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_recruitairlevel:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &recruitairlevel_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_attacklandlevel;
        break;
      }
      
      // optional int32 attacklandlevel = 3 [default = 0];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_attacklandlevel:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &attacklandlevel_));
        _set_bit(2);
        if (input->ExpectTag(32)) goto parse_extrahonorlevel;
        break;
      }
      
      // optional int32 extrahonorlevel = 4 [default = 0];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_extrahonorlevel:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &extrahonorlevel_));
        _set_bit(3);
        if (input->ExpectTag(40)) goto parse_exttimelevel;
        break;
      }
      
      // optional int32 exttimelevel = 5 [default = 0];
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_exttimelevel:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &exttimelevel_));
        _set_bit(4);
        if (input->ExpectTag(48)) goto parse_redtimelevel;
        break;
      }
      
      // optional int32 redtimelevel = 6 [default = 0];
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_redtimelevel:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &redtimelevel_));
        _set_bit(5);
        if (input->ExpectTag(56)) goto parse_extres;
        break;
      }
      
      // optional int32 extres = 7 [default = 0];
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_extres:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &extres_));
        _set_bit(6);
        if (input->ExpectTag(64)) goto parse_redres;
        break;
      }
      
      // optional int32 redres = 8 [default = 0];
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_redres:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &redres_));
        _set_bit(7);
        if (input->ExpectTag(72)) goto parse_addbuildhp;
        break;
      }
      
      // optional int32 addbuildhp = 9 [default = 0];
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_addbuildhp:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &addbuildhp_));
        _set_bit(8);
        if (input->ExpectTag(80)) goto parse_addgunattack;
        break;
      }
      
      // optional int32 addgunattack = 10 [default = 0];
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_addgunattack:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &addgunattack_));
        _set_bit(9);
        if (input->ExpectTag(88)) goto parse_addmissileatk;
        break;
      }
      
      // optional int32 addmissileatk = 11 [default = 0];
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_addmissileatk:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &addmissileatk_));
        _set_bit(10);
        if (input->ExpectTag(96)) goto parse_minewarfare;
        break;
      }
      
      // optional int32 minewarfare = 12 [default = 0];
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_minewarfare:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &minewarfare_));
        _set_bit(11);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DB_Science::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    DB_Science::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional int32 recruitlandlevel = 1 [default = 0];
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->recruitlandlevel(), output);
  }
  
  // optional int32 recruitairlevel = 2 [default = 0];
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->recruitairlevel(), output);
  }
  
  // optional int32 attacklandlevel = 3 [default = 0];
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->attacklandlevel(), output);
  }
  
  // optional int32 extrahonorlevel = 4 [default = 0];
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->extrahonorlevel(), output);
  }
  
  // optional int32 exttimelevel = 5 [default = 0];
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->exttimelevel(), output);
  }
  
  // optional int32 redtimelevel = 6 [default = 0];
  if (_has_bit(5)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->redtimelevel(), output);
  }
  
  // optional int32 extres = 7 [default = 0];
  if (_has_bit(6)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->extres(), output);
  }
  
  // optional int32 redres = 8 [default = 0];
  if (_has_bit(7)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->redres(), output);
  }
  
  // optional int32 addbuildhp = 9 [default = 0];
  if (_has_bit(8)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->addbuildhp(), output);
  }
  
  // optional int32 addgunattack = 10 [default = 0];
  if (_has_bit(9)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->addgunattack(), output);
  }
  
  // optional int32 addmissileatk = 11 [default = 0];
  if (_has_bit(10)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->addmissileatk(), output);
  }
  
  // optional int32 minewarfare = 12 [default = 0];
  if (_has_bit(11)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->minewarfare(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DB_Science::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 recruitlandlevel = 1 [default = 0];
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->recruitlandlevel(), target);
  }
  
  // optional int32 recruitairlevel = 2 [default = 0];
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->recruitairlevel(), target);
  }
  
  // optional int32 attacklandlevel = 3 [default = 0];
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->attacklandlevel(), target);
  }
  
  // optional int32 extrahonorlevel = 4 [default = 0];
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->extrahonorlevel(), target);
  }
  
  // optional int32 exttimelevel = 5 [default = 0];
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->exttimelevel(), target);
  }
  
  // optional int32 redtimelevel = 6 [default = 0];
  if (_has_bit(5)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->redtimelevel(), target);
  }
  
  // optional int32 extres = 7 [default = 0];
  if (_has_bit(6)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->extres(), target);
  }
  
  // optional int32 redres = 8 [default = 0];
  if (_has_bit(7)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->redres(), target);
  }
  
  // optional int32 addbuildhp = 9 [default = 0];
  if (_has_bit(8)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->addbuildhp(), target);
  }
  
  // optional int32 addgunattack = 10 [default = 0];
  if (_has_bit(9)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->addgunattack(), target);
  }
  
  // optional int32 addmissileatk = 11 [default = 0];
  if (_has_bit(10)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->addmissileatk(), target);
  }
  
  // optional int32 minewarfare = 12 [default = 0];
  if (_has_bit(11)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->minewarfare(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DB_Science::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 recruitlandlevel = 1 [default = 0];
    if (has_recruitlandlevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->recruitlandlevel());
    }
    
    // optional int32 recruitairlevel = 2 [default = 0];
    if (has_recruitairlevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->recruitairlevel());
    }
    
    // optional int32 attacklandlevel = 3 [default = 0];
    if (has_attacklandlevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->attacklandlevel());
    }
    
    // optional int32 extrahonorlevel = 4 [default = 0];
    if (has_extrahonorlevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->extrahonorlevel());
    }
    
    // optional int32 exttimelevel = 5 [default = 0];
    if (has_exttimelevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->exttimelevel());
    }
    
    // optional int32 redtimelevel = 6 [default = 0];
    if (has_redtimelevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->redtimelevel());
    }
    
    // optional int32 extres = 7 [default = 0];
    if (has_extres()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->extres());
    }
    
    // optional int32 redres = 8 [default = 0];
    if (has_redres()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->redres());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 addbuildhp = 9 [default = 0];
    if (has_addbuildhp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->addbuildhp());
    }
    
    // optional int32 addgunattack = 10 [default = 0];
    if (has_addgunattack()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->addgunattack());
    }
    
    // optional int32 addmissileatk = 11 [default = 0];
    if (has_addmissileatk()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->addmissileatk());
    }
    
    // optional int32 minewarfare = 12 [default = 0];
    if (has_minewarfare()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->minewarfare());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void DB_Science::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DB_Science* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DB_Science*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DB_Science::MergeFrom(const DB_Science& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_recruitlandlevel(from.recruitlandlevel());
    }
    if (from._has_bit(1)) {
      set_recruitairlevel(from.recruitairlevel());
    }
    if (from._has_bit(2)) {
      set_attacklandlevel(from.attacklandlevel());
    }
    if (from._has_bit(3)) {
      set_extrahonorlevel(from.extrahonorlevel());
    }
    if (from._has_bit(4)) {
      set_exttimelevel(from.exttimelevel());
    }
    if (from._has_bit(5)) {
      set_redtimelevel(from.redtimelevel());
    }
    if (from._has_bit(6)) {
      set_extres(from.extres());
    }
    if (from._has_bit(7)) {
      set_redres(from.redres());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from._has_bit(8)) {
      set_addbuildhp(from.addbuildhp());
    }
    if (from._has_bit(9)) {
      set_addgunattack(from.addgunattack());
    }
    if (from._has_bit(10)) {
      set_addmissileatk(from.addmissileatk());
    }
    if (from._has_bit(11)) {
      set_minewarfare(from.minewarfare());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DB_Science::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DB_Science::CopyFrom(const DB_Science& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DB_Science::IsInitialized() const {
  
  return true;
}

void DB_Science::Swap(DB_Science* other) {
  if (other != this) {
    std::swap(recruitlandlevel_, other->recruitlandlevel_);
    std::swap(recruitairlevel_, other->recruitairlevel_);
    std::swap(attacklandlevel_, other->attacklandlevel_);
    std::swap(extrahonorlevel_, other->extrahonorlevel_);
    std::swap(exttimelevel_, other->exttimelevel_);
    std::swap(redtimelevel_, other->redtimelevel_);
    std::swap(extres_, other->extres_);
    std::swap(redres_, other->redres_);
    std::swap(addbuildhp_, other->addbuildhp_);
    std::swap(addgunattack_, other->addgunattack_);
    std::swap(addmissileatk_, other->addmissileatk_);
    std::swap(minewarfare_, other->minewarfare_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DB_Science::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DB_Science_descriptor_;
  metadata.reflection = DB_Science_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DB_Effect::kEffectsFieldNumber;
#endif  // !_MSC_VER

DB_Effect::DB_Effect() {
  SharedCtor();
}

void DB_Effect::InitAsDefaultInstance() {
}

DB_Effect::DB_Effect(const DB_Effect& from) {
  SharedCtor();
  MergeFrom(from);
}

void DB_Effect::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DB_Effect::~DB_Effect() {
  SharedDtor();
}

void DB_Effect::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* DB_Effect::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DB_Effect_descriptor_;
}

const DB_Effect& DB_Effect::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dbinterface_5fsub_2eproto();  return *default_instance_;
}

DB_Effect* DB_Effect::default_instance_ = NULL;

DB_Effect* DB_Effect::New() const {
  return new DB_Effect;
}

void DB_Effect::Clear() {
  effects_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DB_Effect::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated string effects = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_effects:
        DO_(::google::protobuf::internal::WireFormatLite::ReadString(
              input, this->add_effects()));
        ::google::protobuf::internal::WireFormat::VerifyUTF8String(
          this->effects(0).data(), this->effects(0).length(),
          ::google::protobuf::internal::WireFormat::PARSE);
        if (input->ExpectTag(18)) goto parse_effects;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DB_Effect::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    DB_Effect::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // repeated string effects = 2;
  for (int i = 0; i < this->effects_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->effects(i).data(), this->effects(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->effects(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DB_Effect::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated string effects = 2;
  for (int i = 0; i < this->effects_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->effects(i).data(), this->effects(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(2, this->effects(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DB_Effect::ByteSize() const {
  int total_size = 0;
  
  // repeated string effects = 2;
  total_size += 1 * this->effects_size();
  for (int i = 0; i < this->effects_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->effects(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void DB_Effect::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DB_Effect* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DB_Effect*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DB_Effect::MergeFrom(const DB_Effect& from) {
  GOOGLE_CHECK_NE(&from, this);
  effects_.MergeFrom(from.effects_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DB_Effect::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DB_Effect::CopyFrom(const DB_Effect& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DB_Effect::IsInitialized() const {
  
  return true;
}

void DB_Effect::Swap(DB_Effect* other) {
  if (other != this) {
    effects_.Swap(&other->effects_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DB_Effect::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DB_Effect_descriptor_;
  metadata.reflection = DB_Effect_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DB_Officer::kOfficerPositionFieldNumber;
const int DB_Officer::kOfficerRightUseFlagFieldNumber;
const int DB_Officer::kOfficerRightEffectFlagFieldNumber;
const int DB_Officer::kUpdateTimeFieldNumber;
#endif  // !_MSC_VER

DB_Officer::DB_Officer() {
  SharedCtor();
}

void DB_Officer::InitAsDefaultInstance() {
}

DB_Officer::DB_Officer(const DB_Officer& from) {
  SharedCtor();
  MergeFrom(from);
}

void DB_Officer::SharedCtor() {
  _cached_size_ = 0;
  officerposition_ = 0;
  officerrightuseflag_ = 0;
  officerrighteffectflag_ = 0;
  updatetime_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DB_Officer::~DB_Officer() {
  SharedDtor();
}

void DB_Officer::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* DB_Officer::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DB_Officer_descriptor_;
}

const DB_Officer& DB_Officer::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dbinterface_5fsub_2eproto();  return *default_instance_;
}

DB_Officer* DB_Officer::default_instance_ = NULL;

DB_Officer* DB_Officer::New() const {
  return new DB_Officer;
}

void DB_Officer::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    officerposition_ = 0;
    officerrightuseflag_ = 0;
    officerrighteffectflag_ = 0;
    updatetime_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DB_Officer::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 officerPosition = 1 [default = 0];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &officerposition_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_officerRightUseFlag;
        break;
      }
      
      // optional int32 officerRightUseFlag = 2 [default = 0];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_officerRightUseFlag:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &officerrightuseflag_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_officerRightEffectFlag;
        break;
      }
      
      // optional int32 officerRightEffectFlag = 3 [default = 0];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_officerRightEffectFlag:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &officerrighteffectflag_));
        _set_bit(2);
        if (input->ExpectTag(32)) goto parse_updateTime;
        break;
      }
      
      // optional int32 updateTime = 4 [default = 0];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_updateTime:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &updatetime_));
        _set_bit(3);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DB_Officer::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    DB_Officer::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional int32 officerPosition = 1 [default = 0];
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->officerposition(), output);
  }
  
  // optional int32 officerRightUseFlag = 2 [default = 0];
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->officerrightuseflag(), output);
  }
  
  // optional int32 officerRightEffectFlag = 3 [default = 0];
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->officerrighteffectflag(), output);
  }
  
  // optional int32 updateTime = 4 [default = 0];
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->updatetime(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DB_Officer::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 officerPosition = 1 [default = 0];
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->officerposition(), target);
  }
  
  // optional int32 officerRightUseFlag = 2 [default = 0];
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->officerrightuseflag(), target);
  }
  
  // optional int32 officerRightEffectFlag = 3 [default = 0];
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->officerrighteffectflag(), target);
  }
  
  // optional int32 updateTime = 4 [default = 0];
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->updatetime(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DB_Officer::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 officerPosition = 1 [default = 0];
    if (has_officerposition()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->officerposition());
    }
    
    // optional int32 officerRightUseFlag = 2 [default = 0];
    if (has_officerrightuseflag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->officerrightuseflag());
    }
    
    // optional int32 officerRightEffectFlag = 3 [default = 0];
    if (has_officerrighteffectflag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->officerrighteffectflag());
    }
    
    // optional int32 updateTime = 4 [default = 0];
    if (has_updatetime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->updatetime());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void DB_Officer::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DB_Officer* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DB_Officer*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DB_Officer::MergeFrom(const DB_Officer& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_officerposition(from.officerposition());
    }
    if (from._has_bit(1)) {
      set_officerrightuseflag(from.officerrightuseflag());
    }
    if (from._has_bit(2)) {
      set_officerrighteffectflag(from.officerrighteffectflag());
    }
    if (from._has_bit(3)) {
      set_updatetime(from.updatetime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DB_Officer::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DB_Officer::CopyFrom(const DB_Officer& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DB_Officer::IsInitialized() const {
  
  return true;
}

void DB_Officer::Swap(DB_Officer* other) {
  if (other != this) {
    std::swap(officerposition_, other->officerposition_);
    std::swap(officerrightuseflag_, other->officerrightuseflag_);
    std::swap(officerrighteffectflag_, other->officerrighteffectflag_);
    std::swap(updatetime_, other->updatetime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DB_Officer::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DB_Officer_descriptor_;
  metadata.reflection = DB_Officer_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DB_WpcRank::kRightIDFieldNumber;
const int DB_WpcRank::kUpdateTimeFieldNumber;
const int DB_WpcRank::kSearchTimeFieldNumber;
const int DB_WpcRank::kActiveIDFieldNumber;
const int DB_WpcRank::kOverTimeSearchTimeFieldNumber;
#endif  // !_MSC_VER

DB_WpcRank::DB_WpcRank() {
  SharedCtor();
}

void DB_WpcRank::InitAsDefaultInstance() {
}

DB_WpcRank::DB_WpcRank(const DB_WpcRank& from) {
  SharedCtor();
  MergeFrom(from);
}

void DB_WpcRank::SharedCtor() {
  _cached_size_ = 0;
  rightid_ = 0;
  updatetime_ = 0;
  searchtime_ = 0;
  activeid_ = 0;
  overtimesearchtime_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DB_WpcRank::~DB_WpcRank() {
  SharedDtor();
}

void DB_WpcRank::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* DB_WpcRank::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DB_WpcRank_descriptor_;
}

const DB_WpcRank& DB_WpcRank::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dbinterface_5fsub_2eproto();  return *default_instance_;
}

DB_WpcRank* DB_WpcRank::default_instance_ = NULL;

DB_WpcRank* DB_WpcRank::New() const {
  return new DB_WpcRank;
}

void DB_WpcRank::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    rightid_ = 0;
    updatetime_ = 0;
    searchtime_ = 0;
    activeid_ = 0;
    overtimesearchtime_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DB_WpcRank::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 rightID = 1 [default = 0];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &rightid_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_updateTime;
        break;
      }
      
      // optional int32 updateTime = 2 [default = 0];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_updateTime:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &updatetime_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_searchTime;
        break;
      }
      
      // optional int32 searchTime = 3 [default = 0];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_searchTime:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &searchtime_));
        _set_bit(2);
        if (input->ExpectTag(32)) goto parse_activeID;
        break;
      }
      
      // optional int32 activeID = 4 [default = 0];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_activeID:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &activeid_));
        _set_bit(3);
        if (input->ExpectTag(40)) goto parse_overTimeSearchTime;
        break;
      }
      
      // optional int32 overTimeSearchTime = 5 [default = 0];
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_overTimeSearchTime:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &overtimesearchtime_));
        _set_bit(4);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DB_WpcRank::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    DB_WpcRank::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional int32 rightID = 1 [default = 0];
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->rightid(), output);
  }
  
  // optional int32 updateTime = 2 [default = 0];
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->updatetime(), output);
  }
  
  // optional int32 searchTime = 3 [default = 0];
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->searchtime(), output);
  }
  
  // optional int32 activeID = 4 [default = 0];
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->activeid(), output);
  }
  
  // optional int32 overTimeSearchTime = 5 [default = 0];
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->overtimesearchtime(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DB_WpcRank::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 rightID = 1 [default = 0];
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->rightid(), target);
  }
  
  // optional int32 updateTime = 2 [default = 0];
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->updatetime(), target);
  }
  
  // optional int32 searchTime = 3 [default = 0];
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->searchtime(), target);
  }
  
  // optional int32 activeID = 4 [default = 0];
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->activeid(), target);
  }
  
  // optional int32 overTimeSearchTime = 5 [default = 0];
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->overtimesearchtime(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DB_WpcRank::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 rightID = 1 [default = 0];
    if (has_rightid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rightid());
    }
    
    // optional int32 updateTime = 2 [default = 0];
    if (has_updatetime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->updatetime());
    }
    
    // optional int32 searchTime = 3 [default = 0];
    if (has_searchtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->searchtime());
    }
    
    // optional int32 activeID = 4 [default = 0];
    if (has_activeid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->activeid());
    }
    
    // optional int32 overTimeSearchTime = 5 [default = 0];
    if (has_overtimesearchtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->overtimesearchtime());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void DB_WpcRank::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DB_WpcRank* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DB_WpcRank*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DB_WpcRank::MergeFrom(const DB_WpcRank& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_rightid(from.rightid());
    }
    if (from._has_bit(1)) {
      set_updatetime(from.updatetime());
    }
    if (from._has_bit(2)) {
      set_searchtime(from.searchtime());
    }
    if (from._has_bit(3)) {
      set_activeid(from.activeid());
    }
    if (from._has_bit(4)) {
      set_overtimesearchtime(from.overtimesearchtime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DB_WpcRank::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DB_WpcRank::CopyFrom(const DB_WpcRank& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DB_WpcRank::IsInitialized() const {
  
  return true;
}

void DB_WpcRank::Swap(DB_WpcRank* other) {
  if (other != this) {
    std::swap(rightid_, other->rightid_);
    std::swap(updatetime_, other->updatetime_);
    std::swap(searchtime_, other->searchtime_);
    std::swap(activeid_, other->activeid_);
    std::swap(overtimesearchtime_, other->overtimesearchtime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DB_WpcRank::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DB_WpcRank_descriptor_;
  metadata.reflection = DB_WpcRank_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DB_LeagueBtl::kActiveIDFieldNumber;
const int DB_LeagueBtl::kLeaguePointFieldNumber;
const int DB_LeagueBtl::kRewardGetFieldNumber;
#endif  // !_MSC_VER

DB_LeagueBtl::DB_LeagueBtl() {
  SharedCtor();
}

void DB_LeagueBtl::InitAsDefaultInstance() {
}

DB_LeagueBtl::DB_LeagueBtl(const DB_LeagueBtl& from) {
  SharedCtor();
  MergeFrom(from);
}

void DB_LeagueBtl::SharedCtor() {
  _cached_size_ = 0;
  activeid_ = 0;
  leaguepoint_ = 0;
  rewardget_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DB_LeagueBtl::~DB_LeagueBtl() {
  SharedDtor();
}

void DB_LeagueBtl::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* DB_LeagueBtl::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DB_LeagueBtl_descriptor_;
}

const DB_LeagueBtl& DB_LeagueBtl::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dbinterface_5fsub_2eproto();  return *default_instance_;
}

DB_LeagueBtl* DB_LeagueBtl::default_instance_ = NULL;

DB_LeagueBtl* DB_LeagueBtl::New() const {
  return new DB_LeagueBtl;
}

void DB_LeagueBtl::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    activeid_ = 0;
    leaguepoint_ = 0;
    rewardget_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DB_LeagueBtl::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 activeID = 1 [default = 0];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &activeid_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_leaguePoint;
        break;
      }
      
      // optional int32 leaguePoint = 2 [default = 0];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_leaguePoint:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &leaguepoint_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_rewardGet;
        break;
      }
      
      // optional bool rewardGet = 3 [default = false];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_rewardGet:
        DO_(::google::protobuf::internal::WireFormatLite::ReadBool(
              input, &rewardget_));
        _set_bit(2);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DB_LeagueBtl::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    DB_LeagueBtl::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional int32 activeID = 1 [default = 0];
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->activeid(), output);
  }
  
  // optional int32 leaguePoint = 2 [default = 0];
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->leaguepoint(), output);
  }
  
  // optional bool rewardGet = 3 [default = false];
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->rewardget(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DB_LeagueBtl::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 activeID = 1 [default = 0];
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->activeid(), target);
  }
  
  // optional int32 leaguePoint = 2 [default = 0];
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->leaguepoint(), target);
  }
  
  // optional bool rewardGet = 3 [default = false];
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->rewardget(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DB_LeagueBtl::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 activeID = 1 [default = 0];
    if (has_activeid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->activeid());
    }
    
    // optional int32 leaguePoint = 2 [default = 0];
    if (has_leaguepoint()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->leaguepoint());
    }
    
    // optional bool rewardGet = 3 [default = false];
    if (has_rewardget()) {
      total_size += 1 + 1;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void DB_LeagueBtl::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DB_LeagueBtl* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DB_LeagueBtl*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DB_LeagueBtl::MergeFrom(const DB_LeagueBtl& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_activeid(from.activeid());
    }
    if (from._has_bit(1)) {
      set_leaguepoint(from.leaguepoint());
    }
    if (from._has_bit(2)) {
      set_rewardget(from.rewardget());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DB_LeagueBtl::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DB_LeagueBtl::CopyFrom(const DB_LeagueBtl& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DB_LeagueBtl::IsInitialized() const {
  
  return true;
}

void DB_LeagueBtl::Swap(DB_LeagueBtl* other) {
  if (other != this) {
    std::swap(activeid_, other->activeid_);
    std::swap(leaguepoint_, other->leaguepoint_);
    std::swap(rewardget_, other->rewardget_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DB_LeagueBtl::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DB_LeagueBtl_descriptor_;
  metadata.reflection = DB_LeagueBtl_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DB_HappylibAward::kTimesFieldNumber;
const int DB_HappylibAward::kAwardidFieldNumber;
const int DB_HappylibAward::kAwardnumFieldNumber;
#endif  // !_MSC_VER

DB_HappylibAward::DB_HappylibAward() {
  SharedCtor();
}

void DB_HappylibAward::InitAsDefaultInstance() {
}

DB_HappylibAward::DB_HappylibAward(const DB_HappylibAward& from) {
  SharedCtor();
  MergeFrom(from);
}

void DB_HappylibAward::SharedCtor() {
  _cached_size_ = 0;
  times_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DB_HappylibAward::~DB_HappylibAward() {
  SharedDtor();
}

void DB_HappylibAward::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* DB_HappylibAward::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DB_HappylibAward_descriptor_;
}

const DB_HappylibAward& DB_HappylibAward::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dbinterface_5fsub_2eproto();  return *default_instance_;
}

DB_HappylibAward* DB_HappylibAward::default_instance_ = NULL;

DB_HappylibAward* DB_HappylibAward::New() const {
  return new DB_HappylibAward;
}

void DB_HappylibAward::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    times_ = 0;
  }
  awardid_.Clear();
  awardnum_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DB_HappylibAward::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 times = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &times_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_awardid;
        break;
      }
      
      // repeated int32 awardid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_awardid:
        ::google::protobuf::int32 value;
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &value));
        add_awardid(value);
        if (input->ExpectTag(16)) goto parse_awardid;
        if (input->ExpectTag(24)) goto parse_awardnum;
        break;
      }
      
      // repeated int32 awardnum = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_awardnum:
        ::google::protobuf::int32 value;
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &value));
        add_awardnum(value);
        if (input->ExpectTag(24)) goto parse_awardnum;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DB_HappylibAward::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    DB_HappylibAward::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional int32 times = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->times(), output);
  }
  
  // repeated int32 awardid = 2;
  for (int i = 0; i < this->awardid_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      2, this->awardid(i), output);
  }
  
  // repeated int32 awardnum = 3;
  for (int i = 0; i < this->awardnum_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      3, this->awardnum(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DB_HappylibAward::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 times = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->times(), target);
  }
  
  // repeated int32 awardid = 2;
  for (int i = 0; i < this->awardid_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(2, this->awardid(i), target);
  }
  
  // repeated int32 awardnum = 3;
  for (int i = 0; i < this->awardnum_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(3, this->awardnum(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DB_HappylibAward::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 times = 1;
    if (has_times()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->times());
    }
    
  }
  // repeated int32 awardid = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->awardid_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->awardid(i));
    }
    total_size += 1 * this->awardid_size() + data_size;
  }
  
  // repeated int32 awardnum = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->awardnum_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->awardnum(i));
    }
    total_size += 1 * this->awardnum_size() + data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void DB_HappylibAward::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DB_HappylibAward* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DB_HappylibAward*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DB_HappylibAward::MergeFrom(const DB_HappylibAward& from) {
  GOOGLE_CHECK_NE(&from, this);
  awardid_.MergeFrom(from.awardid_);
  awardnum_.MergeFrom(from.awardnum_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_times(from.times());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DB_HappylibAward::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DB_HappylibAward::CopyFrom(const DB_HappylibAward& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DB_HappylibAward::IsInitialized() const {
  
  return true;
}

void DB_HappylibAward::Swap(DB_HappylibAward* other) {
  if (other != this) {
    std::swap(times_, other->times_);
    awardid_.Swap(&other->awardid_);
    awardnum_.Swap(&other->awardnum_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DB_HappylibAward::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DB_HappylibAward_descriptor_;
  metadata.reflection = DB_HappylibAward_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DB_HappyLib::kActiveendFieldNumber;
const int DB_HappyLib::kTimesFieldNumber;
const int DB_HappyLib::kGetawardFieldNumber;
const int DB_HappyLib::kAwardFieldNumber;
#endif  // !_MSC_VER

DB_HappyLib::DB_HappyLib() {
  SharedCtor();
}

void DB_HappyLib::InitAsDefaultInstance() {
}

DB_HappyLib::DB_HappyLib(const DB_HappyLib& from) {
  SharedCtor();
  MergeFrom(from);
}

void DB_HappyLib::SharedCtor() {
  _cached_size_ = 0;
  activeend_ = 0;
  times_ = 0;
  getaward_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DB_HappyLib::~DB_HappyLib() {
  SharedDtor();
}

void DB_HappyLib::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* DB_HappyLib::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DB_HappyLib_descriptor_;
}

const DB_HappyLib& DB_HappyLib::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dbinterface_5fsub_2eproto();  return *default_instance_;
}

DB_HappyLib* DB_HappyLib::default_instance_ = NULL;

DB_HappyLib* DB_HappyLib::New() const {
  return new DB_HappyLib;
}

void DB_HappyLib::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    activeend_ = 0;
    times_ = 0;
    getaward_ = 0;
  }
  award_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DB_HappyLib::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 activeend = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &activeend_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_times;
        break;
      }
      
      // optional int32 times = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_times:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &times_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_getaward;
        break;
      }
      
      // optional int32 getaward = 3 [default = 0];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_getaward:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &getaward_));
        _set_bit(2);
        if (input->ExpectTag(34)) goto parse_award;
        break;
      }
      
      // repeated .DB_HappylibAward award = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_award:
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, add_award()));
        if (input->ExpectTag(34)) goto parse_award;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DB_HappyLib::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    DB_HappyLib::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional int32 activeend = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->activeend(), output);
  }
  
  // optional int32 times = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->times(), output);
  }
  
  // optional int32 getaward = 3 [default = 0];
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->getaward(), output);
  }
  
  // repeated .DB_HappylibAward award = 4;
  for (int i = 0; i < this->award_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      4, this->award(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DB_HappyLib::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 activeend = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->activeend(), target);
  }
  
  // optional int32 times = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->times(), target);
  }
  
  // optional int32 getaward = 3 [default = 0];
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->getaward(), target);
  }
  
  // repeated .DB_HappylibAward award = 4;
  for (int i = 0; i < this->award_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->award(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DB_HappyLib::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 activeend = 1;
    if (has_activeend()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->activeend());
    }
    
    // optional int32 times = 2;
    if (has_times()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->times());
    }
    
    // optional int32 getaward = 3 [default = 0];
    if (has_getaward()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->getaward());
    }
    
  }
  // repeated .DB_HappylibAward award = 4;
  total_size += 1 * this->award_size();
  for (int i = 0; i < this->award_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->award(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void DB_HappyLib::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DB_HappyLib* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DB_HappyLib*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DB_HappyLib::MergeFrom(const DB_HappyLib& from) {
  GOOGLE_CHECK_NE(&from, this);
  award_.MergeFrom(from.award_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_activeend(from.activeend());
    }
    if (from._has_bit(1)) {
      set_times(from.times());
    }
    if (from._has_bit(2)) {
      set_getaward(from.getaward());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DB_HappyLib::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DB_HappyLib::CopyFrom(const DB_HappyLib& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DB_HappyLib::IsInitialized() const {
  
  return true;
}

void DB_HappyLib::Swap(DB_HappyLib* other) {
  if (other != this) {
    std::swap(activeend_, other->activeend_);
    std::swap(times_, other->times_);
    std::swap(getaward_, other->getaward_);
    award_.Swap(&other->award_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DB_HappyLib::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DB_HappyLib_descriptor_;
  metadata.reflection = DB_HappyLib_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DB_BossBtlMsg::kNBossBtlFlagFieldNumber;
const int DB_BossBtlMsg::kTotalDmgFieldNumber;
const int DB_BossBtlMsg::kHonorEmbraveCntFieldNumber;
const int DB_BossBtlMsg::kAddAtkPctFieldNumber;
const int DB_BossBtlMsg::kHasPickRewardFieldNumber;
const int DB_BossBtlMsg::kUpListFieldNumber;
#endif  // !_MSC_VER

DB_BossBtlMsg::DB_BossBtlMsg() {
  SharedCtor();
}

void DB_BossBtlMsg::InitAsDefaultInstance() {
}

DB_BossBtlMsg::DB_BossBtlMsg(const DB_BossBtlMsg& from) {
  SharedCtor();
  MergeFrom(from);
}

void DB_BossBtlMsg::SharedCtor() {
  _cached_size_ = 0;
  nbossbtlflag_ = 0;
  totaldmg_ = GOOGLE_LONGLONG(0);
  honorembravecnt_ = 0;
  addatkpct_ = 0;
  haspickreward_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DB_BossBtlMsg::~DB_BossBtlMsg() {
  SharedDtor();
}

void DB_BossBtlMsg::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* DB_BossBtlMsg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DB_BossBtlMsg_descriptor_;
}

const DB_BossBtlMsg& DB_BossBtlMsg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dbinterface_5fsub_2eproto();  return *default_instance_;
}

DB_BossBtlMsg* DB_BossBtlMsg::default_instance_ = NULL;

DB_BossBtlMsg* DB_BossBtlMsg::New() const {
  return new DB_BossBtlMsg;
}

void DB_BossBtlMsg::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    nbossbtlflag_ = 0;
    totaldmg_ = GOOGLE_LONGLONG(0);
    honorembravecnt_ = 0;
    addatkpct_ = 0;
    haspickreward_ = 0;
  }
  uplist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DB_BossBtlMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 nBossBtlFlag = 1 [default = 0];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &nbossbtlflag_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_totalDmg;
        break;
      }
      
      // optional int64 totalDmg = 2 [default = 0];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_totalDmg:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt64(
              input, &totaldmg_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_honorEmbraveCnt;
        break;
      }
      
      // optional int32 honorEmbraveCnt = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_honorEmbraveCnt:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &honorembravecnt_));
        _set_bit(2);
        if (input->ExpectTag(32)) goto parse_addAtkPct;
        break;
      }
      
      // optional int32 addAtkPct = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_addAtkPct:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &addatkpct_));
        _set_bit(3);
        if (input->ExpectTag(40)) goto parse_hasPickReward;
        break;
      }
      
      // optional int32 hasPickReward = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_hasPickReward:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &haspickreward_));
        _set_bit(4);
        if (input->ExpectTag(48)) goto parse_upList;
        break;
      }
      
      // repeated bool upList = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_upList:
        bool value;
        DO_(::google::protobuf::internal::WireFormatLite::ReadBool(
              input, &value));
        add_uplist(value);
        if (input->ExpectTag(48)) goto parse_upList;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DB_BossBtlMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    DB_BossBtlMsg::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional int32 nBossBtlFlag = 1 [default = 0];
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->nbossbtlflag(), output);
  }
  
  // optional int64 totalDmg = 2 [default = 0];
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->totaldmg(), output);
  }
  
  // optional int32 honorEmbraveCnt = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->honorembravecnt(), output);
  }
  
  // optional int32 addAtkPct = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->addatkpct(), output);
  }
  
  // optional int32 hasPickReward = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->haspickreward(), output);
  }
  
  // repeated bool upList = 6;
  for (int i = 0; i < this->uplist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(
      6, this->uplist(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DB_BossBtlMsg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 nBossBtlFlag = 1 [default = 0];
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->nbossbtlflag(), target);
  }
  
  // optional int64 totalDmg = 2 [default = 0];
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->totaldmg(), target);
  }
  
  // optional int32 honorEmbraveCnt = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->honorembravecnt(), target);
  }
  
  // optional int32 addAtkPct = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->addatkpct(), target);
  }
  
  // optional int32 hasPickReward = 5;
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->haspickreward(), target);
  }
  
  // repeated bool upList = 6;
  for (int i = 0; i < this->uplist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteBoolToArray(6, this->uplist(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DB_BossBtlMsg::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 nBossBtlFlag = 1 [default = 0];
    if (has_nbossbtlflag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->nbossbtlflag());
    }
    
    // optional int64 totalDmg = 2 [default = 0];
    if (has_totaldmg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->totaldmg());
    }
    
    // optional int32 honorEmbraveCnt = 3;
    if (has_honorembravecnt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->honorembravecnt());
    }
    
    // optional int32 addAtkPct = 4;
    if (has_addatkpct()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->addatkpct());
    }
    
    // optional int32 hasPickReward = 5;
    if (has_haspickreward()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->haspickreward());
    }
    
  }
  // repeated bool upList = 6;
  {
    int data_size = 0;
    data_size = 1 * this->uplist_size();
    total_size += 1 * this->uplist_size() + data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void DB_BossBtlMsg::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DB_BossBtlMsg* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DB_BossBtlMsg*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DB_BossBtlMsg::MergeFrom(const DB_BossBtlMsg& from) {
  GOOGLE_CHECK_NE(&from, this);
  uplist_.MergeFrom(from.uplist_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_nbossbtlflag(from.nbossbtlflag());
    }
    if (from._has_bit(1)) {
      set_totaldmg(from.totaldmg());
    }
    if (from._has_bit(2)) {
      set_honorembravecnt(from.honorembravecnt());
    }
    if (from._has_bit(3)) {
      set_addatkpct(from.addatkpct());
    }
    if (from._has_bit(4)) {
      set_haspickreward(from.haspickreward());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DB_BossBtlMsg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DB_BossBtlMsg::CopyFrom(const DB_BossBtlMsg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DB_BossBtlMsg::IsInitialized() const {
  
  return true;
}

void DB_BossBtlMsg::Swap(DB_BossBtlMsg* other) {
  if (other != this) {
    std::swap(nbossbtlflag_, other->nbossbtlflag_);
    std::swap(totaldmg_, other->totaldmg_);
    std::swap(honorembravecnt_, other->honorembravecnt_);
    std::swap(addatkpct_, other->addatkpct_);
    std::swap(haspickreward_, other->haspickreward_);
    uplist_.Swap(&other->uplist_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DB_BossBtlMsg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DB_BossBtlMsg_descriptor_;
  metadata.reflection = DB_BossBtlMsg_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DB_MedalHonorInfo::kFreeCastNumFieldNumber;
const int DB_MedalHonorInfo::kNTokenNumFieldNumber;
const int DB_MedalHonorInfo::kDecorateTypeFieldNumber;
const int DB_MedalHonorInfo::kHallHonorListFieldNumber;
const int DB_MedalHonorInfo::kMedalHonorListFieldNumber;
#endif  // !_MSC_VER

DB_MedalHonorInfo::DB_MedalHonorInfo() {
  SharedCtor();
}

void DB_MedalHonorInfo::InitAsDefaultInstance() {
}

DB_MedalHonorInfo::DB_MedalHonorInfo(const DB_MedalHonorInfo& from) {
  SharedCtor();
  MergeFrom(from);
}

void DB_MedalHonorInfo::SharedCtor() {
  _cached_size_ = 0;
  freecastnum_ = 50;
  ntokennum_ = 0;
  decoratetype_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DB_MedalHonorInfo::~DB_MedalHonorInfo() {
  SharedDtor();
}

void DB_MedalHonorInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* DB_MedalHonorInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DB_MedalHonorInfo_descriptor_;
}

const DB_MedalHonorInfo& DB_MedalHonorInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dbinterface_5fsub_2eproto();  return *default_instance_;
}

DB_MedalHonorInfo* DB_MedalHonorInfo::default_instance_ = NULL;

DB_MedalHonorInfo* DB_MedalHonorInfo::New() const {
  return new DB_MedalHonorInfo;
}

void DB_MedalHonorInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    freecastnum_ = 50;
    ntokennum_ = 0;
    decoratetype_ = 0;
  }
  hallhonorlist_.Clear();
  medalhonorlist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DB_MedalHonorInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 freeCastNum = 1 [default = 50];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &freecastnum_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_nTokenNum;
        break;
      }
      
      // optional int32 nTokenNum = 2 [default = 0];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_nTokenNum:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &ntokennum_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_decorateType;
        break;
      }
      
      // optional int32 decorateType = 3 [default = 0];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_decorateType:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &decoratetype_));
        _set_bit(2);
        if (input->ExpectTag(32)) goto parse_hallHonorList;
        break;
      }
      
      // repeated int32 hallHonorList = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_hallHonorList:
        ::google::protobuf::int32 value;
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &value));
        add_hallhonorlist(value);
        if (input->ExpectTag(32)) goto parse_hallHonorList;
        if (input->ExpectTag(42)) goto parse_medalHonorList;
        break;
      }
      
      // repeated .DB_MedalHonor medalHonorList = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_medalHonorList:
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, add_medalhonorlist()));
        if (input->ExpectTag(42)) goto parse_medalHonorList;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DB_MedalHonorInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    DB_MedalHonorInfo::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional int32 freeCastNum = 1 [default = 50];
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->freecastnum(), output);
  }
  
  // optional int32 nTokenNum = 2 [default = 0];
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->ntokennum(), output);
  }
  
  // optional int32 decorateType = 3 [default = 0];
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->decoratetype(), output);
  }
  
  // repeated int32 hallHonorList = 4;
  for (int i = 0; i < this->hallhonorlist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      4, this->hallhonorlist(i), output);
  }
  
  // repeated .DB_MedalHonor medalHonorList = 5;
  for (int i = 0; i < this->medalhonorlist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      5, this->medalhonorlist(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DB_MedalHonorInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 freeCastNum = 1 [default = 50];
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->freecastnum(), target);
  }
  
  // optional int32 nTokenNum = 2 [default = 0];
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->ntokennum(), target);
  }
  
  // optional int32 decorateType = 3 [default = 0];
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->decoratetype(), target);
  }
  
  // repeated int32 hallHonorList = 4;
  for (int i = 0; i < this->hallhonorlist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(4, this->hallhonorlist(i), target);
  }
  
  // repeated .DB_MedalHonor medalHonorList = 5;
  for (int i = 0; i < this->medalhonorlist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->medalhonorlist(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DB_MedalHonorInfo::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 freeCastNum = 1 [default = 50];
    if (has_freecastnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->freecastnum());
    }
    
    // optional int32 nTokenNum = 2 [default = 0];
    if (has_ntokennum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ntokennum());
    }
    
    // optional int32 decorateType = 3 [default = 0];
    if (has_decoratetype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->decoratetype());
    }
    
  }
  // repeated int32 hallHonorList = 4;
  {
    int data_size = 0;
    for (int i = 0; i < this->hallhonorlist_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->hallhonorlist(i));
    }
    total_size += 1 * this->hallhonorlist_size() + data_size;
  }
  
  // repeated .DB_MedalHonor medalHonorList = 5;
  total_size += 1 * this->medalhonorlist_size();
  for (int i = 0; i < this->medalhonorlist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->medalhonorlist(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void DB_MedalHonorInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DB_MedalHonorInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DB_MedalHonorInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DB_MedalHonorInfo::MergeFrom(const DB_MedalHonorInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  hallhonorlist_.MergeFrom(from.hallhonorlist_);
  medalhonorlist_.MergeFrom(from.medalhonorlist_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_freecastnum(from.freecastnum());
    }
    if (from._has_bit(1)) {
      set_ntokennum(from.ntokennum());
    }
    if (from._has_bit(2)) {
      set_decoratetype(from.decoratetype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DB_MedalHonorInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DB_MedalHonorInfo::CopyFrom(const DB_MedalHonorInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DB_MedalHonorInfo::IsInitialized() const {
  
  return true;
}

void DB_MedalHonorInfo::Swap(DB_MedalHonorInfo* other) {
  if (other != this) {
    std::swap(freecastnum_, other->freecastnum_);
    std::swap(ntokennum_, other->ntokennum_);
    std::swap(decoratetype_, other->decoratetype_);
    hallhonorlist_.Swap(&other->hallhonorlist_);
    medalhonorlist_.Swap(&other->medalhonorlist_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DB_MedalHonorInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DB_MedalHonorInfo_descriptor_;
  metadata.reflection = DB_MedalHonorInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DB_MedalHonor::kNIDFieldNumber;
const int DB_MedalHonor::kMedalHonorIDFieldNumber;
const int DB_MedalHonor::kNExpFieldNumber;
const int DB_MedalHonor::kNLVFieldNumber;
const int DB_MedalHonor::kNBagTypeFieldNumber;
const int DB_MedalHonor::kNAdmiralIDFieldNumber;
const int DB_MedalHonor::kBLockFieldNumber;
#endif  // !_MSC_VER

DB_MedalHonor::DB_MedalHonor() {
  SharedCtor();
}

void DB_MedalHonor::InitAsDefaultInstance() {
}

DB_MedalHonor::DB_MedalHonor(const DB_MedalHonor& from) {
  SharedCtor();
  MergeFrom(from);
}

void DB_MedalHonor::SharedCtor() {
  _cached_size_ = 0;
  nid_ = 0;
  medalhonorid_ = 0;
  nexp_ = 0;
  nlv_ = 0;
  nbagtype_ = 0;
  nadmiralid_ = 0;
  block_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DB_MedalHonor::~DB_MedalHonor() {
  SharedDtor();
}

void DB_MedalHonor::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* DB_MedalHonor::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DB_MedalHonor_descriptor_;
}

const DB_MedalHonor& DB_MedalHonor::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dbinterface_5fsub_2eproto();  return *default_instance_;
}

DB_MedalHonor* DB_MedalHonor::default_instance_ = NULL;

DB_MedalHonor* DB_MedalHonor::New() const {
  return new DB_MedalHonor;
}

void DB_MedalHonor::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    nid_ = 0;
    medalhonorid_ = 0;
    nexp_ = 0;
    nlv_ = 0;
    nbagtype_ = 0;
    nadmiralid_ = 0;
    block_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DB_MedalHonor::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 nID = 1 [default = 0];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &nid_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_medalHonorID;
        break;
      }
      
      // optional int32 medalHonorID = 2 [default = 0];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_medalHonorID:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &medalhonorid_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_nExp;
        break;
      }
      
      // optional int32 nExp = 3 [default = 0];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_nExp:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &nexp_));
        _set_bit(2);
        if (input->ExpectTag(32)) goto parse_nLV;
        break;
      }
      
      // optional int32 nLV = 4 [default = 0];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_nLV:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &nlv_));
        _set_bit(3);
        if (input->ExpectTag(40)) goto parse_nBagType;
        break;
      }
      
      // optional int32 nBagType = 5 [default = 0];
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_nBagType:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &nbagtype_));
        _set_bit(4);
        if (input->ExpectTag(48)) goto parse_nAdmiralID;
        break;
      }
      
      // optional int32 nAdmiralID = 6 [default = 0];
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_nAdmiralID:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &nadmiralid_));
        _set_bit(5);
        if (input->ExpectTag(56)) goto parse_bLock;
        break;
      }
      
      // optional bool bLock = 7 [default = false];
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_bLock:
        DO_(::google::protobuf::internal::WireFormatLite::ReadBool(
              input, &block_));
        _set_bit(6);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DB_MedalHonor::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    DB_MedalHonor::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional int32 nID = 1 [default = 0];
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->nid(), output);
  }
  
  // optional int32 medalHonorID = 2 [default = 0];
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->medalhonorid(), output);
  }
  
  // optional int32 nExp = 3 [default = 0];
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->nexp(), output);
  }
  
  // optional int32 nLV = 4 [default = 0];
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->nlv(), output);
  }
  
  // optional int32 nBagType = 5 [default = 0];
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->nbagtype(), output);
  }
  
  // optional int32 nAdmiralID = 6 [default = 0];
  if (_has_bit(5)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->nadmiralid(), output);
  }
  
  // optional bool bLock = 7 [default = false];
  if (_has_bit(6)) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->block(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DB_MedalHonor::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 nID = 1 [default = 0];
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->nid(), target);
  }
  
  // optional int32 medalHonorID = 2 [default = 0];
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->medalhonorid(), target);
  }
  
  // optional int32 nExp = 3 [default = 0];
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->nexp(), target);
  }
  
  // optional int32 nLV = 4 [default = 0];
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->nlv(), target);
  }
  
  // optional int32 nBagType = 5 [default = 0];
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->nbagtype(), target);
  }
  
  // optional int32 nAdmiralID = 6 [default = 0];
  if (_has_bit(5)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->nadmiralid(), target);
  }
  
  // optional bool bLock = 7 [default = false];
  if (_has_bit(6)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->block(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DB_MedalHonor::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 nID = 1 [default = 0];
    if (has_nid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->nid());
    }
    
    // optional int32 medalHonorID = 2 [default = 0];
    if (has_medalhonorid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->medalhonorid());
    }
    
    // optional int32 nExp = 3 [default = 0];
    if (has_nexp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->nexp());
    }
    
    // optional int32 nLV = 4 [default = 0];
    if (has_nlv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->nlv());
    }
    
    // optional int32 nBagType = 5 [default = 0];
    if (has_nbagtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->nbagtype());
    }
    
    // optional int32 nAdmiralID = 6 [default = 0];
    if (has_nadmiralid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->nadmiralid());
    }
    
    // optional bool bLock = 7 [default = false];
    if (has_block()) {
      total_size += 1 + 1;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void DB_MedalHonor::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DB_MedalHonor* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DB_MedalHonor*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DB_MedalHonor::MergeFrom(const DB_MedalHonor& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_nid(from.nid());
    }
    if (from._has_bit(1)) {
      set_medalhonorid(from.medalhonorid());
    }
    if (from._has_bit(2)) {
      set_nexp(from.nexp());
    }
    if (from._has_bit(3)) {
      set_nlv(from.nlv());
    }
    if (from._has_bit(4)) {
      set_nbagtype(from.nbagtype());
    }
    if (from._has_bit(5)) {
      set_nadmiralid(from.nadmiralid());
    }
    if (from._has_bit(6)) {
      set_block(from.block());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DB_MedalHonor::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DB_MedalHonor::CopyFrom(const DB_MedalHonor& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DB_MedalHonor::IsInitialized() const {
  
  return true;
}

void DB_MedalHonor::Swap(DB_MedalHonor* other) {
  if (other != this) {
    std::swap(nid_, other->nid_);
    std::swap(medalhonorid_, other->medalhonorid_);
    std::swap(nexp_, other->nexp_);
    std::swap(nlv_, other->nlv_);
    std::swap(nbagtype_, other->nbagtype_);
    std::swap(nadmiralid_, other->nadmiralid_);
    std::swap(block_, other->block_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DB_MedalHonor::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DB_MedalHonor_descriptor_;
  metadata.reflection = DB_MedalHonor_reflection_;
  return metadata;
}

