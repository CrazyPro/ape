// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "dbinterface.pb.h"
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>

namespace {

const ::google::protobuf::Descriptor* DB_Model_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DB_Model_reflection_ = NULL;
const ::google::protobuf::Descriptor* DB_State_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DB_State_reflection_ = NULL;
const ::google::protobuf::Descriptor* DB_PlanetLiteInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DB_PlanetLiteInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* DB_Item_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DB_Item_reflection_ = NULL;
const ::google::protobuf::Descriptor* DB_HangarUnit_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DB_HangarUnit_reflection_ = NULL;
const ::google::protobuf::Descriptor* DB_Hangar_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DB_Hangar_reflection_ = NULL;
const ::google::protobuf::Descriptor* DB_GameUnit_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DB_GameUnit_reflection_ = NULL;
const ::google::protobuf::Descriptor* DB_BattleDeployUnit_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DB_BattleDeployUnit_reflection_ = NULL;
const ::google::protobuf::Descriptor* DB_BattleReplay_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DB_BattleReplay_reflection_ = NULL;
const ::google::protobuf::Descriptor* DB_Shipyard_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DB_Shipyard_reflection_ = NULL;
const ::google::protobuf::Descriptor* DB_Slot_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DB_Slot_reflection_ = NULL;
const ::google::protobuf::Descriptor* DB_BunkerUnit_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DB_BunkerUnit_reflection_ = NULL;
const ::google::protobuf::Descriptor* DB_Bunker_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DB_Bunker_reflection_ = NULL;
const ::google::protobuf::Descriptor* DB_StarLite_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DB_StarLite_reflection_ = NULL;
const ::google::protobuf::Descriptor* DB_Planet_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DB_Planet_reflection_ = NULL;
const ::google::protobuf::Descriptor* DB_NPC_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DB_NPC_reflection_ = NULL;
const ::google::protobuf::Descriptor* DB_SocialItem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DB_SocialItem_reflection_ = NULL;
const ::google::protobuf::Descriptor* DB_MissionParam_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DB_MissionParam_reflection_ = NULL;
const ::google::protobuf::Descriptor* DB_Mission_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DB_Mission_reflection_ = NULL;
const ::google::protobuf::Descriptor* DB_WishItem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DB_WishItem_reflection_ = NULL;
const ::google::protobuf::Descriptor* DB_WishItemList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DB_WishItemList_reflection_ = NULL;
const ::google::protobuf::Descriptor* DB_StarsBookmark_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DB_StarsBookmark_reflection_ = NULL;
const ::google::protobuf::Descriptor* DB_Player_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DB_Player_reflection_ = NULL;
const ::google::protobuf::Descriptor* DB_DailyLogon_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DB_DailyLogon_reflection_ = NULL;
const ::google::protobuf::Descriptor* DB_ActiveContinueLogon_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DB_ActiveContinueLogon_reflection_ = NULL;
const ::google::protobuf::Descriptor* DB_User_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DB_User_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_dbinterface_2eproto() {
  protobuf_AddDesc_dbinterface_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "dbinterface.proto");
  GOOGLE_CHECK(file != NULL);
  DB_Model_descriptor_ = file->message_type(0);
  static const int DB_Model_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_Model, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_Model, coins_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_Model, minerals_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_Model, coinstotal_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_Model, mineralstotal_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_Model, score_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_Model, exp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_Model, cash_),
  };
  DB_Model_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DB_Model_descriptor_,
      DB_Model::default_instance_,
      DB_Model_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_Model, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_Model, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DB_Model));
  DB_State_descriptor_ = file->message_type(1);
  static const int DB_State_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_State, tutorialcompleted_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_State, dmgprotectiontimeleft_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_State, dmgprotectiontimetotal_),
  };
  DB_State_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DB_State_descriptor_,
      DB_State::default_instance_,
      DB_State_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_State, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_State, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DB_State));
  DB_PlanetLiteInfo_descriptor_ = file->message_type(2);
  static const int DB_PlanetLiteInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_PlanetLiteInfo, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_PlanetLiteInfo, planetid_),
  };
  DB_PlanetLiteInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DB_PlanetLiteInfo_descriptor_,
      DB_PlanetLiteInfo::default_instance_,
      DB_PlanetLiteInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_PlanetLiteInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_PlanetLiteInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DB_PlanetLiteInfo));
  DB_Item_descriptor_ = file->message_type(3);
  static const int DB_Item_offsets_[17] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_Item, sid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_Item, sku_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_Item, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_Item, upgradeid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_Item, isflipped_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_Item, energypercent_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_Item, energy_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_Item, x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_Item, y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_Item, state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_Item, time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_Item, incometorestore_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_Item, repairing_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_Item, repairstart_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_Item, updateat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_Item, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_Item, collecttime_),
  };
  DB_Item_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DB_Item_descriptor_,
      DB_Item::default_instance_,
      DB_Item_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_Item, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_Item, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DB_Item));
  DB_HangarUnit_descriptor_ = file->message_type(4);
  static const int DB_HangarUnit_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_HangarUnit, sku_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_HangarUnit, num_),
  };
  DB_HangarUnit_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DB_HangarUnit_descriptor_,
      DB_HangarUnit::default_instance_,
      DB_HangarUnit_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_HangarUnit, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_HangarUnit, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DB_HangarUnit));
  DB_Hangar_descriptor_ = file->message_type(5);
  static const int DB_Hangar_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_Hangar, sid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_Hangar, units_),
  };
  DB_Hangar_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DB_Hangar_descriptor_,
      DB_Hangar::default_instance_,
      DB_Hangar_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_Hangar, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_Hangar, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DB_Hangar));
  DB_GameUnit_descriptor_ = file->message_type(6);
  static const int DB_GameUnit_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_GameUnit, sku_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_GameUnit, unlock_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_GameUnit, upgradeid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_GameUnit, timeleft_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_GameUnit, updateat_),
  };
  DB_GameUnit_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DB_GameUnit_descriptor_,
      DB_GameUnit::default_instance_,
      DB_GameUnit_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_GameUnit, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_GameUnit, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DB_GameUnit));
  DB_BattleDeployUnit_descriptor_ = file->message_type(7);
  static const int DB_BattleDeployUnit_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_BattleDeployUnit, sku_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_BattleDeployUnit, x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_BattleDeployUnit, y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_BattleDeployUnit, millis_),
  };
  DB_BattleDeployUnit_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DB_BattleDeployUnit_descriptor_,
      DB_BattleDeployUnit::default_instance_,
      DB_BattleDeployUnit_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_BattleDeployUnit, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_BattleDeployUnit, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DB_BattleDeployUnit));
  DB_BattleReplay_descriptor_ = file->message_type(8);
  static const int DB_BattleReplay_offsets_[13] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_BattleReplay, time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_BattleReplay, accountid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_BattleReplay, planetid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_BattleReplay, starsku_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_BattleReplay, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_BattleReplay, url_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_BattleReplay, damage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_BattleReplay, planetdamage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_BattleReplay, coinstaken_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_BattleReplay, mineralstaken_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_BattleReplay, deployunits_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_BattleReplay, units_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_BattleReplay, copyuser_),
  };
  DB_BattleReplay_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DB_BattleReplay_descriptor_,
      DB_BattleReplay::default_instance_,
      DB_BattleReplay_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_BattleReplay, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_BattleReplay, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DB_BattleReplay));
  DB_Shipyard_descriptor_ = file->message_type(9);
  static const int DB_Shipyard_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_Shipyard, sid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_Shipyard, unlockedslots_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_Shipyard, updatedat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_Shipyard, slot_),
  };
  DB_Shipyard_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DB_Shipyard_descriptor_,
      DB_Shipyard::default_instance_,
      DB_Shipyard_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_Shipyard, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_Shipyard, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DB_Shipyard));
  DB_Slot_descriptor_ = file->message_type(10);
  static const int DB_Slot_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_Slot, skunum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_Slot, sku_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_Slot, timeleft_),
  };
  DB_Slot_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DB_Slot_descriptor_,
      DB_Slot::default_instance_,
      DB_Slot_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_Slot, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_Slot, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DB_Slot));
  DB_BunkerUnit_descriptor_ = file->message_type(11);
  static const int DB_BunkerUnit_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_BunkerUnit, sku_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_BunkerUnit, num_),
  };
  DB_BunkerUnit_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DB_BunkerUnit_descriptor_,
      DB_BunkerUnit::default_instance_,
      DB_BunkerUnit_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_BunkerUnit, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_BunkerUnit, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DB_BunkerUnit));
  DB_Bunker_descriptor_ = file->message_type(12);
  static const int DB_Bunker_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_Bunker, sid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_Bunker, helpersaccountids_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_Bunker, bunker_),
  };
  DB_Bunker_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DB_Bunker_descriptor_,
      DB_Bunker::default_instance_,
      DB_Bunker_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_Bunker, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_Bunker, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DB_Bunker));
  DB_StarLite_descriptor_ = file->message_type(13);
  static const int DB_StarLite_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_StarLite, starid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_StarLite, starname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_StarLite, startype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_StarLite, sku_),
  };
  DB_StarLite_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DB_StarLite_descriptor_,
      DB_StarLite::default_instance_,
      DB_StarLite_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_StarLite, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_StarLite, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DB_StarLite));
  DB_Planet_descriptor_ = file->message_type(14);
  static const int DB_Planet_offsets_[14] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_Planet, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_Planet, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_Planet, hqlevel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_Planet, droids_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_Planet, droidinuse_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_Planet, capital_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_Planet, coinslimit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_Planet, minerallimit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_Planet, star_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_Planet, items_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_Planet, hangars_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_Planet, units_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_Planet, shipyard_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_Planet, bunkers_),
  };
  DB_Planet_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DB_Planet_descriptor_,
      DB_Planet::default_instance_,
      DB_Planet_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_Planet, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_Planet, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DB_Planet));
  DB_NPC_descriptor_ = file->message_type(15);
  static const int DB_NPC_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_NPC, sku_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_NPC, exp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_NPC, hqlevel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_NPC, npcid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_NPC, items_),
  };
  DB_NPC_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DB_NPC_descriptor_,
      DB_NPC::default_instance_,
      DB_NPC_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_NPC, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_NPC, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DB_NPC));
  DB_SocialItem_descriptor_ = file->message_type(16);
  static const int DB_SocialItem_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_SocialItem, sku_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_SocialItem, amount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_SocialItem, counter_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_SocialItem, timeleft_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_SocialItem, timeover_),
  };
  DB_SocialItem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DB_SocialItem_descriptor_,
      DB_SocialItem::default_instance_,
      DB_SocialItem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_SocialItem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_SocialItem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DB_SocialItem));
  DB_MissionParam_descriptor_ = file->message_type(17);
  static const int DB_MissionParam_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_MissionParam, target_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_MissionParam, endtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_MissionParam, sku_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_MissionParam, progress_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_MissionParam, state_),
  };
  DB_MissionParam_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DB_MissionParam_descriptor_,
      DB_MissionParam::default_instance_,
      DB_MissionParam_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_MissionParam, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_MissionParam, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DB_MissionParam));
  DB_Mission_descriptor_ = file->message_type(18);
  static const int DB_Mission_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_Mission, readytostart_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_Mission, available_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_Mission, rewarded_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_Mission, completed_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_Mission, params_),
  };
  DB_Mission_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DB_Mission_descriptor_,
      DB_Mission::default_instance_,
      DB_Mission_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_Mission, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_Mission, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DB_Mission));
  DB_WishItem_descriptor_ = file->message_type(19);
  static const int DB_WishItem_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_WishItem, sku_),
  };
  DB_WishItem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DB_WishItem_descriptor_,
      DB_WishItem::default_instance_,
      DB_WishItem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_WishItem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_WishItem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DB_WishItem));
  DB_WishItemList_descriptor_ = file->message_type(20);
  static const int DB_WishItemList_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_WishItemList, wishitem_),
  };
  DB_WishItemList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DB_WishItemList_descriptor_,
      DB_WishItemList::default_instance_,
      DB_WishItemList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_WishItemList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_WishItemList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DB_WishItemList));
  DB_StarsBookmark_descriptor_ = file->message_type(21);
  static const int DB_StarsBookmark_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_StarsBookmark, starname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_StarsBookmark, sku_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_StarsBookmark, startype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_StarsBookmark, starid_),
  };
  DB_StarsBookmark_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DB_StarsBookmark_descriptor_,
      DB_StarsBookmark::default_instance_,
      DB_StarsBookmark_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_StarsBookmark, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_StarsBookmark, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DB_StarsBookmark));
  DB_Player_descriptor_ = file->message_type(22);
  static const int DB_Player_offsets_[11] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_Player, model_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_Player, state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_Player, planets_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_Player, npcs_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_Player, flag_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_Player, socialitems_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_Player, missions_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_Player, wishitemlist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_Player, bookmarks_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_Player, battlereplay_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_Player, pve_),
  };
  DB_Player_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DB_Player_descriptor_,
      DB_Player::default_instance_,
      DB_Player_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_Player, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_Player, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DB_Player));
  DB_DailyLogon_descriptor_ = file->message_type(23);
  static const int DB_DailyLogon_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_DailyLogon, firstday_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_DailyLogon, daycount_),
  };
  DB_DailyLogon_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DB_DailyLogon_descriptor_,
      DB_DailyLogon::default_instance_,
      DB_DailyLogon_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_DailyLogon, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_DailyLogon, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DB_DailyLogon));
  DB_ActiveContinueLogon_descriptor_ = file->message_type(24);
  static const int DB_ActiveContinueLogon_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_ActiveContinueLogon, logondays_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_ActiveContinueLogon, hasget_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_ActiveContinueLogon, lastlogontime_),
  };
  DB_ActiveContinueLogon_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DB_ActiveContinueLogon_descriptor_,
      DB_ActiveContinueLogon::default_instance_,
      DB_ActiveContinueLogon_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_ActiveContinueLogon, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_ActiveContinueLogon, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DB_ActiveContinueLogon));
  DB_User_descriptor_ = file->message_type(25);
  static const int DB_User_offsets_[49] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_User, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_User, platform_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_User, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_User, profile_link_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_User, gender_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_User, last_login_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_User, last_login_ip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_User, regist_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_User, yellowdmdlvl_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_User, isyellowdmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_User, isyellowdmdyear_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_User, getdayyellowgiftday_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_User, getnewyellowgift_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_User, last_logout_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_User, player_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_User, banlogin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_User, transferbymysql_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_User, mysqluserid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_User, expiateflag_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_User, sendgiftcount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_User, selfgiftcount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_User, giftwincount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_User, destroytime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_User, fightrecord_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_User, dailylogin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_User, bannergift_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_User, landingdaygiftbit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_User, landdaycount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_User, webonceflag_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_User, giftinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_User, qqdmdlvl_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_User, isqqdmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_User, isqqdmdyear_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_User, getdayqqgiftday_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_User, getnewqqgift_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_User, region_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_User, logondaycount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_User, city_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_User, ishighyellowdmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_User, activecontinuelogon_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_User, isactivelogon_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_User, hasgetrecall_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_User, lastrepairtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_User, landdaycountex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_User, landdaygiftex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_User, officer_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_User, destroynpctime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_User, bregisternum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_User, badult_),
  };
  DB_User_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DB_User_descriptor_,
      DB_User::default_instance_,
      DB_User_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_User, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_User, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DB_User));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_dbinterface_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DB_Model_descriptor_, &DB_Model::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DB_State_descriptor_, &DB_State::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DB_PlanetLiteInfo_descriptor_, &DB_PlanetLiteInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DB_Item_descriptor_, &DB_Item::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DB_HangarUnit_descriptor_, &DB_HangarUnit::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DB_Hangar_descriptor_, &DB_Hangar::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DB_GameUnit_descriptor_, &DB_GameUnit::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DB_BattleDeployUnit_descriptor_, &DB_BattleDeployUnit::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DB_BattleReplay_descriptor_, &DB_BattleReplay::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DB_Shipyard_descriptor_, &DB_Shipyard::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DB_Slot_descriptor_, &DB_Slot::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DB_BunkerUnit_descriptor_, &DB_BunkerUnit::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DB_Bunker_descriptor_, &DB_Bunker::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DB_StarLite_descriptor_, &DB_StarLite::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DB_Planet_descriptor_, &DB_Planet::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DB_NPC_descriptor_, &DB_NPC::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DB_SocialItem_descriptor_, &DB_SocialItem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DB_MissionParam_descriptor_, &DB_MissionParam::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DB_Mission_descriptor_, &DB_Mission::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DB_WishItem_descriptor_, &DB_WishItem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DB_WishItemList_descriptor_, &DB_WishItemList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DB_StarsBookmark_descriptor_, &DB_StarsBookmark::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DB_Player_descriptor_, &DB_Player::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DB_DailyLogon_descriptor_, &DB_DailyLogon::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DB_ActiveContinueLogon_descriptor_, &DB_ActiveContinueLogon::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DB_User_descriptor_, &DB_User::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_dbinterface_2eproto() {
  delete DB_Model::default_instance_;
  delete DB_Model_reflection_;
  delete DB_State::default_instance_;
  delete DB_State_reflection_;
  delete DB_PlanetLiteInfo::default_instance_;
  delete DB_PlanetLiteInfo_reflection_;
  delete DB_Item::default_instance_;
  delete DB_Item_reflection_;
  delete DB_HangarUnit::default_instance_;
  delete DB_HangarUnit_reflection_;
  delete DB_Hangar::default_instance_;
  delete DB_Hangar_reflection_;
  delete DB_GameUnit::default_instance_;
  delete DB_GameUnit_reflection_;
  delete DB_BattleDeployUnit::default_instance_;
  delete DB_BattleDeployUnit_reflection_;
  delete DB_BattleReplay::default_instance_;
  delete DB_BattleReplay_reflection_;
  delete DB_Shipyard::default_instance_;
  delete DB_Shipyard_reflection_;
  delete DB_Slot::default_instance_;
  delete DB_Slot_reflection_;
  delete DB_BunkerUnit::default_instance_;
  delete DB_BunkerUnit_reflection_;
  delete DB_Bunker::default_instance_;
  delete DB_Bunker_reflection_;
  delete DB_StarLite::default_instance_;
  delete DB_StarLite_reflection_;
  delete DB_Planet::default_instance_;
  delete DB_Planet_reflection_;
  delete DB_NPC::default_instance_;
  delete DB_NPC_reflection_;
  delete DB_SocialItem::default_instance_;
  delete DB_SocialItem_reflection_;
  delete DB_MissionParam::default_instance_;
  delete DB_MissionParam_reflection_;
  delete DB_Mission::default_instance_;
  delete DB_Mission_reflection_;
  delete DB_WishItem::default_instance_;
  delete DB_WishItem_reflection_;
  delete DB_WishItemList::default_instance_;
  delete DB_WishItemList_reflection_;
  delete DB_StarsBookmark::default_instance_;
  delete DB_StarsBookmark_reflection_;
  delete DB_Player::default_instance_;
  delete DB_Player_reflection_;
  delete DB_DailyLogon::default_instance_;
  delete DB_DailyLogon_reflection_;
  delete DB_ActiveContinueLogon::default_instance_;
  delete DB_ActiveContinueLogon_reflection_;
  delete DB_User::default_instance_;
  delete DB_User_reflection_;
}

void protobuf_AddDesc_dbinterface_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::protobuf_AddDesc_dbinterface_5fsub_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\021dbinterface.proto\032\025dbinterface_sub.pro"
    "to\"\217\001\n\010DB_Model\022\r\n\005level\030\001 \001(\005\022\r\n\005coins\030"
    "\002 \001(\003\022\020\n\010minerals\030\003 \001(\003\022\022\n\ncoinsTotal\030\004 "
    "\001(\003\022\025\n\rmineralsTotal\030\005 \001(\003\022\r\n\005score\030\006 \001("
    "\003\022\013\n\003exp\030\007 \001(\003\022\014\n\004cash\030\010 \001(\003\"d\n\010DB_State"
    "\022\031\n\021tutorialCompleted\030\001 \001(\005\022\035\n\025dmgProtec"
    "tionTimeLeft\030\002 \001(\003\022\036\n\026dmgProtectionTimeT"
    "otal\030\003 \001(\003\"2\n\021DB_PlanetLiteInfo\022\013\n\003uid\030\001"
    " \001(\003\022\020\n\010planetId\030\002 \001(\t\"\245\002\n\007DB_Item\022\013\n\003si"
    "d\030\001 \001(\005\022\013\n\003sku\030\002 \001(\t\022\014\n\004type\030\003 \001(\005\022\021\n\tup"
    "gradeId\030\004 \001(\005\022\021\n\tisFlipped\030\005 \001(\005\022\025\n\rener"
    "gyPercent\030\006 \001(\005\022\016\n\006energy\030\007 \001(\005\022\t\n\001x\030\010 \001"
    "(\005\022\t\n\001y\030\t \001(\005\022\r\n\005state\030\n \001(\005\022\014\n\004time\030\013 \001"
    "(\003\022\027\n\017incomeToRestore\030\014 \001(\005\022\021\n\trepairing"
    "\030\r \001(\005\022\023\n\013repairStart\030\016 \001(\003\022\020\n\010updateAt\030"
    "\017 \001(\003\022\n\n\002id\030\020 \001(\005\022\023\n\013collecttime\030\021 \001(\005\")"
    "\n\rDB_HangarUnit\022\013\n\003sku\030\001 \001(\005\022\013\n\003num\030\002 \001("
    "\005\"7\n\tDB_Hangar\022\013\n\003sid\030\001 \001(\005\022\035\n\005units\030\002 \003"
    "(\0132\016.DB_HangarUnit\"a\n\013DB_GameUnit\022\013\n\003sku"
    "\030\001 \001(\005\022\016\n\006unlock\030\002 \001(\005\022\021\n\tupgradeId\030\003 \001("
    "\005\022\020\n\010timeLeft\030\004 \001(\005\022\020\n\010updateAt\030\005 \001(\003\"H\n"
    "\023DB_BattleDeployUnit\022\013\n\003sku\030\001 \001(\t\022\t\n\001x\030\002"
    " \001(\005\022\t\n\001y\030\003 \001(\005\022\016\n\006millis\030\004 \001(\005\"\245\002\n\017DB_B"
    "attleReplay\022\014\n\004time\030\001 \001(\003\022\021\n\taccountId\030\002"
    " \001(\003\022\020\n\010planetId\030\003 \001(\005\022\017\n\007starSku\030\004 \001(\t\022"
    "\014\n\004name\030\005 \001(\t\022\013\n\003url\030\006 \001(\t\022\016\n\006damage\030\007 \001"
    "(\005\022\024\n\014planetDamage\030\010 \001(\005\022\022\n\ncoinsTaken\030\t"
    " \001(\005\022\025\n\rmineralsTaken\030\n \001(\005\022)\n\013deployUni"
    "ts\030\013 \003(\0132\024.DB_BattleDeployUnit\022\033\n\005units\030"
    "\014 \003(\0132\014.DB_GameUnit\022\032\n\010copyUser\030\r \001(\0132\010."
    "DB_User\"\\\n\013DB_Shipyard\022\013\n\003sid\030\001 \001(\005\022\025\n\ru"
    "nlockedSlots\030\002 \001(\005\022\021\n\tupdatedAt\030\003 \001(\005\022\026\n"
    "\004slot\030\004 \003(\0132\010.DB_Slot\"8\n\007DB_Slot\022\016\n\006skuN"
    "um\030\001 \001(\005\022\013\n\003sku\030\002 \001(\t\022\020\n\010timeLeft\030\003 \001(\005\""
    ")\n\rDB_BunkerUnit\022\013\n\003sku\030\001 \001(\t\022\013\n\003num\030\002 \001"
    "(\005\"S\n\tDB_Bunker\022\013\n\003sid\030\001 \001(\005\022\031\n\021helpersA"
    "ccountIds\030\002 \001(\t\022\036\n\006Bunker\030\003 \003(\0132\016.DB_Bun"
    "kerUnit\"N\n\013DB_StarLite\022\016\n\006starId\030\001 \001(\005\022\020"
    "\n\010starName\030\002 \001(\005\022\020\n\010starType\030\003 \001(\005\022\013\n\003sk"
    "u\030\004 \001(\t\"\301\002\n\tDB_Planet\022\n\n\002id\030\001 \001(\005\022\014\n\004typ"
    "e\030\002 \001(\005\022\017\n\007HQLevel\030\003 \001(\005\022\016\n\006Droids\030\004 \001(\005"
    "\022\022\n\nDroidInUse\030\005 \001(\005\022\017\n\007Capital\030\006 \001(\005\022\022\n"
    "\nCoinsLimit\030\007 \001(\003\022\024\n\014MineralLimit\030\010 \001(\003\022"
    "\032\n\004star\030\t \001(\0132\014.DB_StarLite\022\027\n\005items\030\n \003"
    "(\0132\010.DB_Item\022\033\n\007hangars\030\013 \003(\0132\n.DB_Hanga"
    "r\022\033\n\005units\030\014 \003(\0132\014.DB_GameUnit\022\036\n\010shipya"
    "rd\030\r \003(\0132\014.DB_Shipyard\022\033\n\007bunkers\030\016 \003(\0132"
    "\n.DB_Bunker\"[\n\006DB_NPC\022\013\n\003sku\030\001 \001(\005\022\013\n\003ex"
    "p\030\002 \001(\005\022\017\n\007HQLevel\030\003 \001(\005\022\r\n\005npcId\030\004 \001(\005\022"
    "\027\n\005items\030\005 \003(\0132\010.DB_Item\"a\n\rDB_SocialIte"
    "m\022\013\n\003sku\030\001 \001(\t\022\016\n\006amount\030\002 \001(\005\022\017\n\007counte"
    "r\030\003 \001(\005\022\020\n\010timeLeft\030\004 \001(\003\022\020\n\010timeOver\030\005 "
    "\001(\003\"`\n\017DB_MissionParam\022\016\n\006Target\030\001 \001(\t\022\017"
    "\n\007endTime\030\002 \001(\005\022\013\n\003sku\030\003 \001(\t\022\020\n\010progress"
    "\030\004 \001(\t\022\r\n\005state\030\005 \001(\005\"|\n\nDB_Mission\022\024\n\014R"
    "eadyToStart\030\001 \001(\t\022\021\n\tAvailable\030\002 \001(\t\022\020\n\010"
    "Rewarded\030\003 \001(\t\022\021\n\tCompleted\030\004 \001(\t\022 \n\006Par"
    "ams\030\005 \003(\0132\020.DB_MissionParam\"\032\n\013DB_WishIt"
    "em\022\013\n\003sku\030\001 \001(\t\"1\n\017DB_WishItemList\022\036\n\010wi"
    "shItem\030\001 \003(\0132\014.DB_WishItem\"S\n\020DB_StarsBo"
    "okmark\022\020\n\010starName\030\001 \001(\005\022\013\n\003sku\030\002 \001(\t\022\020\n"
    "\010starType\030\003 \001(\005\022\016\n\006starId\030\004 \001(\005\"\340\002\n\tDB_P"
    "layer\022\030\n\005model\030\001 \001(\0132\t.DB_Model\022\030\n\005state"
    "\030\002 \001(\0132\t.DB_State\022\033\n\007planets\030\003 \003(\0132\n.DB_"
    "Planet\022\025\n\004npcs\030\004 \003(\0132\007.DB_NPC\022\026\n\004flag\030\005 "
    "\001(\0132\010.DB_Flag\022#\n\013socialItems\030\006 \003(\0132\016.DB_"
    "SocialItem\022\035\n\010missions\030\007 \001(\0132\013.DB_Missio"
    "n\022&\n\014wishItemList\030\010 \001(\0132\020.DB_WishItemLis"
    "t\022$\n\tbookmarks\030\t \003(\0132\021.DB_StarsBookmark\022"
    "&\n\014battleReplay\030\n \003(\0132\020.DB_BattleReplay\022"
    "\031\n\003pve\030\013 \003(\0132\014.DB_KeyValue\"9\n\rDB_DailyLo"
    "gon\022\023\n\010firstday\030\001 \001(\005:\0010\022\023\n\010daycount\030\002 \001"
    "(\005:\0010\"_\n\026DB_ActiveContinueLogon\022\024\n\tlogon"
    "Days\030\001 \001(\005:\0010\022\025\n\006hasGet\030\002 \001(\010:\005false\022\030\n\r"
    "lastLogonTime\030\003 \001(\005:\0010\"\245\n\n\007DB_User\022\r\n\002id"
    "\030\001 \001(\003:\0010\022\025\n\013platform_id\030\002 \001(\t:\000\022\014\n\004name"
    "\030\003 \003(\t\022\024\n\014profile_link\030\004 \003(\t\022\016\n\006gender\030\005"
    " \001(\005\022\032\n\017last_login_time\030\006 \001(\003:\0010\022\027\n\rlast"
    "_login_ip\030\007 \001(\t:\000\022\026\n\013regist_time\030\010 \001(\003:\001"
    "0\022\027\n\014yellowDmdLvl\030\t \001(\005:\0010\022\032\n\013isYellowDm"
    "d\030\n \001(\010:\005false\022\036\n\017isYellowDmdYear\030\013 \001(\010:"
    "\005false\022\036\n\023getDayYellowGiftDay\030\014 \001(\003:\0010\022\037"
    "\n\020getNewYellowGift\030\r \001(\010:\005false\022\030\n\020last_"
    "logout_time\030\016 \001(\003\022\032\n\006player\030\017 \001(\0132\n.DB_P"
    "layer\022\036\n\010banlogin\030\020 \001(\0132\014.DB_BanLogin\022\036\n"
    "\017transferbymysql\030\021 \001(\010:\005false\022\026\n\013mysqlus"
    "erid\030\022 \001(\005:\0010\022\023\n\013ExpiateFlag\030\023 \001(\005\022\025\n\rse"
    "ndgiftcount\030\024 \001(\005\022\025\n\rselfgiftcount\030\025 \001(\005"
    "\022\024\n\014giftwincount\030\026 \001(\005\022\026\n\013destroytime\030\027 "
    "\001(\005:\0010\022#\n\013fightrecord\030\030 \003(\0132\016.DB_LootRep"
    "ort\022\"\n\ndailylogin\030\031 \001(\0132\016.DB_DailyLogon\022"
    "\031\n\nbannergift\030\032 \001(\010:\005false\022\034\n\021landingday"
    "giftbit\030\033 \001(\005:\0010\022\027\n\014landdaycount\030\034 \001(\005:\001"
    "0\022\026\n\013webOnceFlag\030\035 \001(\003:\0010\022\036\n\010giftInfo\030\036 "
    "\001(\0132\014.DB_GiftInfo\022\023\n\010QQDmdLvl\030\037 \001(\005:\0010\022\026"
    "\n\007isQQDmd\030  \001(\010:\005false\022\032\n\013isQQDmdYear\030! "
    "\001(\010:\005false\022\032\n\017getDayQQGiftDay\030\" \001(\003:\0010\022\033"
    "\n\014getNewQQGift\030# \001(\010:\005false\022\021\n\006region\030$ "
    "\001(\005:\0010\022\030\n\rlogondaycount\030% \001(\005:\0010\022\017\n\004city"
    "\030& \001(\005:\0010\022\036\n\017isHighYellowDmd\030\' \001(\010:\005fals"
    "e\0224\n\023activeContinueLogon\030( \001(\0132\027.DB_Acti"
    "veContinueLogon\022\034\n\risActiveLogon\030) \001(\010:\005"
    "false\022\033\n\014hasGetRecall\030* \001(\010:\005false\022\031\n\016la"
    "stRepairTime\030+ \001(\005:\0010\022\031\n\016landDayCountEx\030"
    ", \001(\005:\0010\022\030\n\rlandDayGiftEx\030- \001(\005:\0010\022\034\n\007of"
    "ficer\030. \001(\0132\013.DB_Officer\022\031\n\016destroynpcti"
    "me\030/ \001(\005:\0010\022\033\n\014bRegisterNum\0300 \001(\010:\005false"
    "\022\024\n\006bAdult\0303 \001(\010:\004true", 4302);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "dbinterface.proto", &protobuf_RegisterTypes);
  DB_Model::default_instance_ = new DB_Model();
  DB_State::default_instance_ = new DB_State();
  DB_PlanetLiteInfo::default_instance_ = new DB_PlanetLiteInfo();
  DB_Item::default_instance_ = new DB_Item();
  DB_HangarUnit::default_instance_ = new DB_HangarUnit();
  DB_Hangar::default_instance_ = new DB_Hangar();
  DB_GameUnit::default_instance_ = new DB_GameUnit();
  DB_BattleDeployUnit::default_instance_ = new DB_BattleDeployUnit();
  DB_BattleReplay::default_instance_ = new DB_BattleReplay();
  DB_Shipyard::default_instance_ = new DB_Shipyard();
  DB_Slot::default_instance_ = new DB_Slot();
  DB_BunkerUnit::default_instance_ = new DB_BunkerUnit();
  DB_Bunker::default_instance_ = new DB_Bunker();
  DB_StarLite::default_instance_ = new DB_StarLite();
  DB_Planet::default_instance_ = new DB_Planet();
  DB_NPC::default_instance_ = new DB_NPC();
  DB_SocialItem::default_instance_ = new DB_SocialItem();
  DB_MissionParam::default_instance_ = new DB_MissionParam();
  DB_Mission::default_instance_ = new DB_Mission();
  DB_WishItem::default_instance_ = new DB_WishItem();
  DB_WishItemList::default_instance_ = new DB_WishItemList();
  DB_StarsBookmark::default_instance_ = new DB_StarsBookmark();
  DB_Player::default_instance_ = new DB_Player();
  DB_DailyLogon::default_instance_ = new DB_DailyLogon();
  DB_ActiveContinueLogon::default_instance_ = new DB_ActiveContinueLogon();
  DB_User::default_instance_ = new DB_User();
  DB_Model::default_instance_->InitAsDefaultInstance();
  DB_State::default_instance_->InitAsDefaultInstance();
  DB_PlanetLiteInfo::default_instance_->InitAsDefaultInstance();
  DB_Item::default_instance_->InitAsDefaultInstance();
  DB_HangarUnit::default_instance_->InitAsDefaultInstance();
  DB_Hangar::default_instance_->InitAsDefaultInstance();
  DB_GameUnit::default_instance_->InitAsDefaultInstance();
  DB_BattleDeployUnit::default_instance_->InitAsDefaultInstance();
  DB_BattleReplay::default_instance_->InitAsDefaultInstance();
  DB_Shipyard::default_instance_->InitAsDefaultInstance();
  DB_Slot::default_instance_->InitAsDefaultInstance();
  DB_BunkerUnit::default_instance_->InitAsDefaultInstance();
  DB_Bunker::default_instance_->InitAsDefaultInstance();
  DB_StarLite::default_instance_->InitAsDefaultInstance();
  DB_Planet::default_instance_->InitAsDefaultInstance();
  DB_NPC::default_instance_->InitAsDefaultInstance();
  DB_SocialItem::default_instance_->InitAsDefaultInstance();
  DB_MissionParam::default_instance_->InitAsDefaultInstance();
  DB_Mission::default_instance_->InitAsDefaultInstance();
  DB_WishItem::default_instance_->InitAsDefaultInstance();
  DB_WishItemList::default_instance_->InitAsDefaultInstance();
  DB_StarsBookmark::default_instance_->InitAsDefaultInstance();
  DB_Player::default_instance_->InitAsDefaultInstance();
  DB_DailyLogon::default_instance_->InitAsDefaultInstance();
  DB_ActiveContinueLogon::default_instance_->InitAsDefaultInstance();
  DB_User::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_dbinterface_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_dbinterface_2eproto {
  StaticDescriptorInitializer_dbinterface_2eproto() {
    protobuf_AddDesc_dbinterface_2eproto();
  }
} static_descriptor_initializer_dbinterface_2eproto_;


// ===================================================================

#ifndef _MSC_VER
const int DB_Model::kLevelFieldNumber;
const int DB_Model::kCoinsFieldNumber;
const int DB_Model::kMineralsFieldNumber;
const int DB_Model::kCoinsTotalFieldNumber;
const int DB_Model::kMineralsTotalFieldNumber;
const int DB_Model::kScoreFieldNumber;
const int DB_Model::kExpFieldNumber;
const int DB_Model::kCashFieldNumber;
#endif  // !_MSC_VER

DB_Model::DB_Model() {
  SharedCtor();
}

void DB_Model::InitAsDefaultInstance() {
}

DB_Model::DB_Model(const DB_Model& from) {
  SharedCtor();
  MergeFrom(from);
}

void DB_Model::SharedCtor() {
  _cached_size_ = 0;
  level_ = 0;
  coins_ = GOOGLE_LONGLONG(0);
  minerals_ = GOOGLE_LONGLONG(0);
  coinstotal_ = GOOGLE_LONGLONG(0);
  mineralstotal_ = GOOGLE_LONGLONG(0);
  score_ = GOOGLE_LONGLONG(0);
  exp_ = GOOGLE_LONGLONG(0);
  cash_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DB_Model::~DB_Model() {
  SharedDtor();
}

void DB_Model::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* DB_Model::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DB_Model_descriptor_;
}

const DB_Model& DB_Model::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dbinterface_2eproto();  return *default_instance_;
}

DB_Model* DB_Model::default_instance_ = NULL;

DB_Model* DB_Model::New() const {
  return new DB_Model;
}

void DB_Model::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    level_ = 0;
    coins_ = GOOGLE_LONGLONG(0);
    minerals_ = GOOGLE_LONGLONG(0);
    coinstotal_ = GOOGLE_LONGLONG(0);
    mineralstotal_ = GOOGLE_LONGLONG(0);
    score_ = GOOGLE_LONGLONG(0);
    exp_ = GOOGLE_LONGLONG(0);
    cash_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DB_Model::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 level = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &level_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_coins;
        break;
      }
      
      // optional int64 coins = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_coins:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt64(
              input, &coins_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_minerals;
        break;
      }
      
      // optional int64 minerals = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_minerals:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt64(
              input, &minerals_));
        _set_bit(2);
        if (input->ExpectTag(32)) goto parse_coinsTotal;
        break;
      }
      
      // optional int64 coinsTotal = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_coinsTotal:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt64(
              input, &coinstotal_));
        _set_bit(3);
        if (input->ExpectTag(40)) goto parse_mineralsTotal;
        break;
      }
      
      // optional int64 mineralsTotal = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_mineralsTotal:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt64(
              input, &mineralstotal_));
        _set_bit(4);
        if (input->ExpectTag(48)) goto parse_score;
        break;
      }
      
      // optional int64 score = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_score:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt64(
              input, &score_));
        _set_bit(5);
        if (input->ExpectTag(56)) goto parse_exp;
        break;
      }
      
      // optional int64 exp = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_exp:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt64(
              input, &exp_));
        _set_bit(6);
        if (input->ExpectTag(64)) goto parse_cash;
        break;
      }
      
      // optional int64 cash = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_cash:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt64(
              input, &cash_));
        _set_bit(7);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DB_Model::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    DB_Model::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional int32 level = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->level(), output);
  }
  
  // optional int64 coins = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->coins(), output);
  }
  
  // optional int64 minerals = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->minerals(), output);
  }
  
  // optional int64 coinsTotal = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->coinstotal(), output);
  }
  
  // optional int64 mineralsTotal = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->mineralstotal(), output);
  }
  
  // optional int64 score = 6;
  if (_has_bit(5)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(6, this->score(), output);
  }
  
  // optional int64 exp = 7;
  if (_has_bit(6)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(7, this->exp(), output);
  }
  
  // optional int64 cash = 8;
  if (_has_bit(7)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(8, this->cash(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DB_Model::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 level = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->level(), target);
  }
  
  // optional int64 coins = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->coins(), target);
  }
  
  // optional int64 minerals = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->minerals(), target);
  }
  
  // optional int64 coinsTotal = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->coinstotal(), target);
  }
  
  // optional int64 mineralsTotal = 5;
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->mineralstotal(), target);
  }
  
  // optional int64 score = 6;
  if (_has_bit(5)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(6, this->score(), target);
  }
  
  // optional int64 exp = 7;
  if (_has_bit(6)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(7, this->exp(), target);
  }
  
  // optional int64 cash = 8;
  if (_has_bit(7)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(8, this->cash(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DB_Model::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 level = 1;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->level());
    }
    
    // optional int64 coins = 2;
    if (has_coins()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->coins());
    }
    
    // optional int64 minerals = 3;
    if (has_minerals()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->minerals());
    }
    
    // optional int64 coinsTotal = 4;
    if (has_coinstotal()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->coinstotal());
    }
    
    // optional int64 mineralsTotal = 5;
    if (has_mineralstotal()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->mineralstotal());
    }
    
    // optional int64 score = 6;
    if (has_score()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->score());
    }
    
    // optional int64 exp = 7;
    if (has_exp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->exp());
    }
    
    // optional int64 cash = 8;
    if (has_cash()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->cash());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void DB_Model::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DB_Model* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DB_Model*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DB_Model::MergeFrom(const DB_Model& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_level(from.level());
    }
    if (from._has_bit(1)) {
      set_coins(from.coins());
    }
    if (from._has_bit(2)) {
      set_minerals(from.minerals());
    }
    if (from._has_bit(3)) {
      set_coinstotal(from.coinstotal());
    }
    if (from._has_bit(4)) {
      set_mineralstotal(from.mineralstotal());
    }
    if (from._has_bit(5)) {
      set_score(from.score());
    }
    if (from._has_bit(6)) {
      set_exp(from.exp());
    }
    if (from._has_bit(7)) {
      set_cash(from.cash());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DB_Model::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DB_Model::CopyFrom(const DB_Model& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DB_Model::IsInitialized() const {
  
  return true;
}

void DB_Model::Swap(DB_Model* other) {
  if (other != this) {
    std::swap(level_, other->level_);
    std::swap(coins_, other->coins_);
    std::swap(minerals_, other->minerals_);
    std::swap(coinstotal_, other->coinstotal_);
    std::swap(mineralstotal_, other->mineralstotal_);
    std::swap(score_, other->score_);
    std::swap(exp_, other->exp_);
    std::swap(cash_, other->cash_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DB_Model::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DB_Model_descriptor_;
  metadata.reflection = DB_Model_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DB_State::kTutorialCompletedFieldNumber;
const int DB_State::kDmgProtectionTimeLeftFieldNumber;
const int DB_State::kDmgProtectionTimeTotalFieldNumber;
#endif  // !_MSC_VER

DB_State::DB_State() {
  SharedCtor();
}

void DB_State::InitAsDefaultInstance() {
}

DB_State::DB_State(const DB_State& from) {
  SharedCtor();
  MergeFrom(from);
}

void DB_State::SharedCtor() {
  _cached_size_ = 0;
  tutorialcompleted_ = 0;
  dmgprotectiontimeleft_ = GOOGLE_LONGLONG(0);
  dmgprotectiontimetotal_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DB_State::~DB_State() {
  SharedDtor();
}

void DB_State::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* DB_State::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DB_State_descriptor_;
}

const DB_State& DB_State::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dbinterface_2eproto();  return *default_instance_;
}

DB_State* DB_State::default_instance_ = NULL;

DB_State* DB_State::New() const {
  return new DB_State;
}

void DB_State::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    tutorialcompleted_ = 0;
    dmgprotectiontimeleft_ = GOOGLE_LONGLONG(0);
    dmgprotectiontimetotal_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DB_State::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 tutorialCompleted = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &tutorialcompleted_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_dmgProtectionTimeLeft;
        break;
      }
      
      // optional int64 dmgProtectionTimeLeft = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_dmgProtectionTimeLeft:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt64(
              input, &dmgprotectiontimeleft_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_dmgProtectionTimeTotal;
        break;
      }
      
      // optional int64 dmgProtectionTimeTotal = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_dmgProtectionTimeTotal:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt64(
              input, &dmgprotectiontimetotal_));
        _set_bit(2);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DB_State::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    DB_State::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional int32 tutorialCompleted = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->tutorialcompleted(), output);
  }
  
  // optional int64 dmgProtectionTimeLeft = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->dmgprotectiontimeleft(), output);
  }
  
  // optional int64 dmgProtectionTimeTotal = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->dmgprotectiontimetotal(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DB_State::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 tutorialCompleted = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->tutorialcompleted(), target);
  }
  
  // optional int64 dmgProtectionTimeLeft = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->dmgprotectiontimeleft(), target);
  }
  
  // optional int64 dmgProtectionTimeTotal = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->dmgprotectiontimetotal(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DB_State::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 tutorialCompleted = 1;
    if (has_tutorialcompleted()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tutorialcompleted());
    }
    
    // optional int64 dmgProtectionTimeLeft = 2;
    if (has_dmgprotectiontimeleft()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->dmgprotectiontimeleft());
    }
    
    // optional int64 dmgProtectionTimeTotal = 3;
    if (has_dmgprotectiontimetotal()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->dmgprotectiontimetotal());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void DB_State::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DB_State* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DB_State*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DB_State::MergeFrom(const DB_State& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_tutorialcompleted(from.tutorialcompleted());
    }
    if (from._has_bit(1)) {
      set_dmgprotectiontimeleft(from.dmgprotectiontimeleft());
    }
    if (from._has_bit(2)) {
      set_dmgprotectiontimetotal(from.dmgprotectiontimetotal());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DB_State::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DB_State::CopyFrom(const DB_State& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DB_State::IsInitialized() const {
  
  return true;
}

void DB_State::Swap(DB_State* other) {
  if (other != this) {
    std::swap(tutorialcompleted_, other->tutorialcompleted_);
    std::swap(dmgprotectiontimeleft_, other->dmgprotectiontimeleft_);
    std::swap(dmgprotectiontimetotal_, other->dmgprotectiontimetotal_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DB_State::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DB_State_descriptor_;
  metadata.reflection = DB_State_reflection_;
  return metadata;
}


// ===================================================================

const ::std::string DB_PlanetLiteInfo::_default_planetid_;
#ifndef _MSC_VER
const int DB_PlanetLiteInfo::kUidFieldNumber;
const int DB_PlanetLiteInfo::kPlanetIdFieldNumber;
#endif  // !_MSC_VER

DB_PlanetLiteInfo::DB_PlanetLiteInfo() {
  SharedCtor();
}

void DB_PlanetLiteInfo::InitAsDefaultInstance() {
}

DB_PlanetLiteInfo::DB_PlanetLiteInfo(const DB_PlanetLiteInfo& from) {
  SharedCtor();
  MergeFrom(from);
}

void DB_PlanetLiteInfo::SharedCtor() {
  _cached_size_ = 0;
  uid_ = GOOGLE_LONGLONG(0);
  planetid_ = const_cast< ::std::string*>(&_default_planetid_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DB_PlanetLiteInfo::~DB_PlanetLiteInfo() {
  SharedDtor();
}

void DB_PlanetLiteInfo::SharedDtor() {
  if (planetid_ != &_default_planetid_) {
    delete planetid_;
  }
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* DB_PlanetLiteInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DB_PlanetLiteInfo_descriptor_;
}

const DB_PlanetLiteInfo& DB_PlanetLiteInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dbinterface_2eproto();  return *default_instance_;
}

DB_PlanetLiteInfo* DB_PlanetLiteInfo::default_instance_ = NULL;

DB_PlanetLiteInfo* DB_PlanetLiteInfo::New() const {
  return new DB_PlanetLiteInfo;
}

void DB_PlanetLiteInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    uid_ = GOOGLE_LONGLONG(0);
    if (_has_bit(1)) {
      if (planetid_ != &_default_planetid_) {
        planetid_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DB_PlanetLiteInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 uid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt64(
              input, &uid_));
        _set_bit(0);
        if (input->ExpectTag(18)) goto parse_planetId;
        break;
      }
      
      // optional string planetId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_planetId:
        DO_(::google::protobuf::internal::WireFormatLite::ReadString(
              input, this->mutable_planetid()));
        ::google::protobuf::internal::WireFormat::VerifyUTF8String(
          this->planetid().data(), this->planetid().length(),
          ::google::protobuf::internal::WireFormat::PARSE);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DB_PlanetLiteInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    DB_PlanetLiteInfo::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional int64 uid = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->uid(), output);
  }
  
  // optional string planetId = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->planetid().data(), this->planetid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->planetid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DB_PlanetLiteInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int64 uid = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->uid(), target);
  }
  
  // optional string planetId = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->planetid().data(), this->planetid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->planetid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DB_PlanetLiteInfo::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 uid = 1;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->uid());
    }
    
    // optional string planetId = 2;
    if (has_planetid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->planetid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void DB_PlanetLiteInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DB_PlanetLiteInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DB_PlanetLiteInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DB_PlanetLiteInfo::MergeFrom(const DB_PlanetLiteInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_uid(from.uid());
    }
    if (from._has_bit(1)) {
      set_planetid(from.planetid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DB_PlanetLiteInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DB_PlanetLiteInfo::CopyFrom(const DB_PlanetLiteInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DB_PlanetLiteInfo::IsInitialized() const {
  
  return true;
}

void DB_PlanetLiteInfo::Swap(DB_PlanetLiteInfo* other) {
  if (other != this) {
    std::swap(uid_, other->uid_);
    std::swap(planetid_, other->planetid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DB_PlanetLiteInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DB_PlanetLiteInfo_descriptor_;
  metadata.reflection = DB_PlanetLiteInfo_reflection_;
  return metadata;
}


// ===================================================================

const ::std::string DB_Item::_default_sku_;
#ifndef _MSC_VER
const int DB_Item::kSidFieldNumber;
const int DB_Item::kSkuFieldNumber;
const int DB_Item::kTypeFieldNumber;
const int DB_Item::kUpgradeIdFieldNumber;
const int DB_Item::kIsFlippedFieldNumber;
const int DB_Item::kEnergyPercentFieldNumber;
const int DB_Item::kEnergyFieldNumber;
const int DB_Item::kXFieldNumber;
const int DB_Item::kYFieldNumber;
const int DB_Item::kStateFieldNumber;
const int DB_Item::kTimeFieldNumber;
const int DB_Item::kIncomeToRestoreFieldNumber;
const int DB_Item::kRepairingFieldNumber;
const int DB_Item::kRepairStartFieldNumber;
const int DB_Item::kUpdateAtFieldNumber;
const int DB_Item::kIdFieldNumber;
const int DB_Item::kCollecttimeFieldNumber;
#endif  // !_MSC_VER

DB_Item::DB_Item() {
  SharedCtor();
}

void DB_Item::InitAsDefaultInstance() {
}

DB_Item::DB_Item(const DB_Item& from) {
  SharedCtor();
  MergeFrom(from);
}

void DB_Item::SharedCtor() {
  _cached_size_ = 0;
  sid_ = 0;
  sku_ = const_cast< ::std::string*>(&_default_sku_);
  type_ = 0;
  upgradeid_ = 0;
  isflipped_ = 0;
  energypercent_ = 0;
  energy_ = 0;
  x_ = 0;
  y_ = 0;
  state_ = 0;
  time_ = GOOGLE_LONGLONG(0);
  incometorestore_ = 0;
  repairing_ = 0;
  repairstart_ = GOOGLE_LONGLONG(0);
  updateat_ = GOOGLE_LONGLONG(0);
  id_ = 0;
  collecttime_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DB_Item::~DB_Item() {
  SharedDtor();
}

void DB_Item::SharedDtor() {
  if (sku_ != &_default_sku_) {
    delete sku_;
  }
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* DB_Item::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DB_Item_descriptor_;
}

const DB_Item& DB_Item::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dbinterface_2eproto();  return *default_instance_;
}

DB_Item* DB_Item::default_instance_ = NULL;

DB_Item* DB_Item::New() const {
  return new DB_Item;
}

void DB_Item::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    sid_ = 0;
    if (_has_bit(1)) {
      if (sku_ != &_default_sku_) {
        sku_->clear();
      }
    }
    type_ = 0;
    upgradeid_ = 0;
    isflipped_ = 0;
    energypercent_ = 0;
    energy_ = 0;
    x_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    y_ = 0;
    state_ = 0;
    time_ = GOOGLE_LONGLONG(0);
    incometorestore_ = 0;
    repairing_ = 0;
    repairstart_ = GOOGLE_LONGLONG(0);
    updateat_ = GOOGLE_LONGLONG(0);
    id_ = 0;
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    collecttime_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DB_Item::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 sid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &sid_));
        _set_bit(0);
        if (input->ExpectTag(18)) goto parse_sku;
        break;
      }
      
      // optional string sku = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_sku:
        DO_(::google::protobuf::internal::WireFormatLite::ReadString(
              input, this->mutable_sku()));
        ::google::protobuf::internal::WireFormat::VerifyUTF8String(
          this->sku().data(), this->sku().length(),
          ::google::protobuf::internal::WireFormat::PARSE);
        if (input->ExpectTag(24)) goto parse_type;
        break;
      }
      
      // optional int32 type = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_type:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &type_));
        _set_bit(2);
        if (input->ExpectTag(32)) goto parse_upgradeId;
        break;
      }
      
      // optional int32 upgradeId = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_upgradeId:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &upgradeid_));
        _set_bit(3);
        if (input->ExpectTag(40)) goto parse_isFlipped;
        break;
      }
      
      // optional int32 isFlipped = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_isFlipped:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &isflipped_));
        _set_bit(4);
        if (input->ExpectTag(48)) goto parse_energyPercent;
        break;
      }
      
      // optional int32 energyPercent = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_energyPercent:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &energypercent_));
        _set_bit(5);
        if (input->ExpectTag(56)) goto parse_energy;
        break;
      }
      
      // optional int32 energy = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_energy:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &energy_));
        _set_bit(6);
        if (input->ExpectTag(64)) goto parse_x;
        break;
      }
      
      // optional int32 x = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_x:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &x_));
        _set_bit(7);
        if (input->ExpectTag(72)) goto parse_y;
        break;
      }
      
      // optional int32 y = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_y:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &y_));
        _set_bit(8);
        if (input->ExpectTag(80)) goto parse_state;
        break;
      }
      
      // optional int32 state = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_state:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &state_));
        _set_bit(9);
        if (input->ExpectTag(88)) goto parse_time;
        break;
      }
      
      // optional int64 time = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_time:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt64(
              input, &time_));
        _set_bit(10);
        if (input->ExpectTag(96)) goto parse_incomeToRestore;
        break;
      }
      
      // optional int32 incomeToRestore = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_incomeToRestore:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &incometorestore_));
        _set_bit(11);
        if (input->ExpectTag(104)) goto parse_repairing;
        break;
      }
      
      // optional int32 repairing = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_repairing:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &repairing_));
        _set_bit(12);
        if (input->ExpectTag(112)) goto parse_repairStart;
        break;
      }
      
      // optional int64 repairStart = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_repairStart:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt64(
              input, &repairstart_));
        _set_bit(13);
        if (input->ExpectTag(120)) goto parse_updateAt;
        break;
      }
      
      // optional int64 updateAt = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_updateAt:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt64(
              input, &updateat_));
        _set_bit(14);
        if (input->ExpectTag(128)) goto parse_id;
        break;
      }
      
      // optional int32 id = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_id:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &id_));
        _set_bit(15);
        if (input->ExpectTag(136)) goto parse_collecttime;
        break;
      }
      
      // optional int32 collecttime = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_collecttime:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &collecttime_));
        _set_bit(16);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DB_Item::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    DB_Item::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional int32 sid = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->sid(), output);
  }
  
  // optional string sku = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->sku().data(), this->sku().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->sku(), output);
  }
  
  // optional int32 type = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->type(), output);
  }
  
  // optional int32 upgradeId = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->upgradeid(), output);
  }
  
  // optional int32 isFlipped = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->isflipped(), output);
  }
  
  // optional int32 energyPercent = 6;
  if (_has_bit(5)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->energypercent(), output);
  }
  
  // optional int32 energy = 7;
  if (_has_bit(6)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->energy(), output);
  }
  
  // optional int32 x = 8;
  if (_has_bit(7)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->x(), output);
  }
  
  // optional int32 y = 9;
  if (_has_bit(8)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->y(), output);
  }
  
  // optional int32 state = 10;
  if (_has_bit(9)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->state(), output);
  }
  
  // optional int64 time = 11;
  if (_has_bit(10)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(11, this->time(), output);
  }
  
  // optional int32 incomeToRestore = 12;
  if (_has_bit(11)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->incometorestore(), output);
  }
  
  // optional int32 repairing = 13;
  if (_has_bit(12)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->repairing(), output);
  }
  
  // optional int64 repairStart = 14;
  if (_has_bit(13)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(14, this->repairstart(), output);
  }
  
  // optional int64 updateAt = 15;
  if (_has_bit(14)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(15, this->updateat(), output);
  }
  
  // optional int32 id = 16;
  if (_has_bit(15)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(16, this->id(), output);
  }
  
  // optional int32 collecttime = 17;
  if (_has_bit(16)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(17, this->collecttime(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DB_Item::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 sid = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->sid(), target);
  }
  
  // optional string sku = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->sku().data(), this->sku().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->sku(), target);
  }
  
  // optional int32 type = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->type(), target);
  }
  
  // optional int32 upgradeId = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->upgradeid(), target);
  }
  
  // optional int32 isFlipped = 5;
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->isflipped(), target);
  }
  
  // optional int32 energyPercent = 6;
  if (_has_bit(5)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->energypercent(), target);
  }
  
  // optional int32 energy = 7;
  if (_has_bit(6)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->energy(), target);
  }
  
  // optional int32 x = 8;
  if (_has_bit(7)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->x(), target);
  }
  
  // optional int32 y = 9;
  if (_has_bit(8)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->y(), target);
  }
  
  // optional int32 state = 10;
  if (_has_bit(9)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->state(), target);
  }
  
  // optional int64 time = 11;
  if (_has_bit(10)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(11, this->time(), target);
  }
  
  // optional int32 incomeToRestore = 12;
  if (_has_bit(11)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->incometorestore(), target);
  }
  
  // optional int32 repairing = 13;
  if (_has_bit(12)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->repairing(), target);
  }
  
  // optional int64 repairStart = 14;
  if (_has_bit(13)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(14, this->repairstart(), target);
  }
  
  // optional int64 updateAt = 15;
  if (_has_bit(14)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(15, this->updateat(), target);
  }
  
  // optional int32 id = 16;
  if (_has_bit(15)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(16, this->id(), target);
  }
  
  // optional int32 collecttime = 17;
  if (_has_bit(16)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(17, this->collecttime(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DB_Item::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 sid = 1;
    if (has_sid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sid());
    }
    
    // optional string sku = 2;
    if (has_sku()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->sku());
    }
    
    // optional int32 type = 3;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }
    
    // optional int32 upgradeId = 4;
    if (has_upgradeid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->upgradeid());
    }
    
    // optional int32 isFlipped = 5;
    if (has_isflipped()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->isflipped());
    }
    
    // optional int32 energyPercent = 6;
    if (has_energypercent()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->energypercent());
    }
    
    // optional int32 energy = 7;
    if (has_energy()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->energy());
    }
    
    // optional int32 x = 8;
    if (has_x()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->x());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 y = 9;
    if (has_y()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->y());
    }
    
    // optional int32 state = 10;
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->state());
    }
    
    // optional int64 time = 11;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->time());
    }
    
    // optional int32 incomeToRestore = 12;
    if (has_incometorestore()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->incometorestore());
    }
    
    // optional int32 repairing = 13;
    if (has_repairing()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->repairing());
    }
    
    // optional int64 repairStart = 14;
    if (has_repairstart()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->repairstart());
    }
    
    // optional int64 updateAt = 15;
    if (has_updateat()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->updateat());
    }
    
    // optional int32 id = 16;
    if (has_id()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }
    
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional int32 collecttime = 17;
    if (has_collecttime()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->collecttime());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void DB_Item::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DB_Item* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DB_Item*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DB_Item::MergeFrom(const DB_Item& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_sid(from.sid());
    }
    if (from._has_bit(1)) {
      set_sku(from.sku());
    }
    if (from._has_bit(2)) {
      set_type(from.type());
    }
    if (from._has_bit(3)) {
      set_upgradeid(from.upgradeid());
    }
    if (from._has_bit(4)) {
      set_isflipped(from.isflipped());
    }
    if (from._has_bit(5)) {
      set_energypercent(from.energypercent());
    }
    if (from._has_bit(6)) {
      set_energy(from.energy());
    }
    if (from._has_bit(7)) {
      set_x(from.x());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from._has_bit(8)) {
      set_y(from.y());
    }
    if (from._has_bit(9)) {
      set_state(from.state());
    }
    if (from._has_bit(10)) {
      set_time(from.time());
    }
    if (from._has_bit(11)) {
      set_incometorestore(from.incometorestore());
    }
    if (from._has_bit(12)) {
      set_repairing(from.repairing());
    }
    if (from._has_bit(13)) {
      set_repairstart(from.repairstart());
    }
    if (from._has_bit(14)) {
      set_updateat(from.updateat());
    }
    if (from._has_bit(15)) {
      set_id(from.id());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from._has_bit(16)) {
      set_collecttime(from.collecttime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DB_Item::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DB_Item::CopyFrom(const DB_Item& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DB_Item::IsInitialized() const {
  
  return true;
}

void DB_Item::Swap(DB_Item* other) {
  if (other != this) {
    std::swap(sid_, other->sid_);
    std::swap(sku_, other->sku_);
    std::swap(type_, other->type_);
    std::swap(upgradeid_, other->upgradeid_);
    std::swap(isflipped_, other->isflipped_);
    std::swap(energypercent_, other->energypercent_);
    std::swap(energy_, other->energy_);
    std::swap(x_, other->x_);
    std::swap(y_, other->y_);
    std::swap(state_, other->state_);
    std::swap(time_, other->time_);
    std::swap(incometorestore_, other->incometorestore_);
    std::swap(repairing_, other->repairing_);
    std::swap(repairstart_, other->repairstart_);
    std::swap(updateat_, other->updateat_);
    std::swap(id_, other->id_);
    std::swap(collecttime_, other->collecttime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DB_Item::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DB_Item_descriptor_;
  metadata.reflection = DB_Item_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DB_HangarUnit::kSkuFieldNumber;
const int DB_HangarUnit::kNumFieldNumber;
#endif  // !_MSC_VER

DB_HangarUnit::DB_HangarUnit() {
  SharedCtor();
}

void DB_HangarUnit::InitAsDefaultInstance() {
}

DB_HangarUnit::DB_HangarUnit(const DB_HangarUnit& from) {
  SharedCtor();
  MergeFrom(from);
}

void DB_HangarUnit::SharedCtor() {
  _cached_size_ = 0;
  sku_ = 0;
  num_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DB_HangarUnit::~DB_HangarUnit() {
  SharedDtor();
}

void DB_HangarUnit::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* DB_HangarUnit::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DB_HangarUnit_descriptor_;
}

const DB_HangarUnit& DB_HangarUnit::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dbinterface_2eproto();  return *default_instance_;
}

DB_HangarUnit* DB_HangarUnit::default_instance_ = NULL;

DB_HangarUnit* DB_HangarUnit::New() const {
  return new DB_HangarUnit;
}

void DB_HangarUnit::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    sku_ = 0;
    num_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DB_HangarUnit::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 sku = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &sku_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_num;
        break;
      }
      
      // optional int32 num = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_num:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &num_));
        _set_bit(1);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DB_HangarUnit::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    DB_HangarUnit::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional int32 sku = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->sku(), output);
  }
  
  // optional int32 num = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->num(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DB_HangarUnit::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 sku = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->sku(), target);
  }
  
  // optional int32 num = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->num(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DB_HangarUnit::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 sku = 1;
    if (has_sku()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sku());
    }
    
    // optional int32 num = 2;
    if (has_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->num());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void DB_HangarUnit::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DB_HangarUnit* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DB_HangarUnit*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DB_HangarUnit::MergeFrom(const DB_HangarUnit& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_sku(from.sku());
    }
    if (from._has_bit(1)) {
      set_num(from.num());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DB_HangarUnit::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DB_HangarUnit::CopyFrom(const DB_HangarUnit& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DB_HangarUnit::IsInitialized() const {
  
  return true;
}

void DB_HangarUnit::Swap(DB_HangarUnit* other) {
  if (other != this) {
    std::swap(sku_, other->sku_);
    std::swap(num_, other->num_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DB_HangarUnit::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DB_HangarUnit_descriptor_;
  metadata.reflection = DB_HangarUnit_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DB_Hangar::kSidFieldNumber;
const int DB_Hangar::kUnitsFieldNumber;
#endif  // !_MSC_VER

DB_Hangar::DB_Hangar() {
  SharedCtor();
}

void DB_Hangar::InitAsDefaultInstance() {
}

DB_Hangar::DB_Hangar(const DB_Hangar& from) {
  SharedCtor();
  MergeFrom(from);
}

void DB_Hangar::SharedCtor() {
  _cached_size_ = 0;
  sid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DB_Hangar::~DB_Hangar() {
  SharedDtor();
}

void DB_Hangar::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* DB_Hangar::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DB_Hangar_descriptor_;
}

const DB_Hangar& DB_Hangar::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dbinterface_2eproto();  return *default_instance_;
}

DB_Hangar* DB_Hangar::default_instance_ = NULL;

DB_Hangar* DB_Hangar::New() const {
  return new DB_Hangar;
}

void DB_Hangar::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    sid_ = 0;
  }
  units_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DB_Hangar::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 sid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &sid_));
        _set_bit(0);
        if (input->ExpectTag(18)) goto parse_units;
        break;
      }
      
      // repeated .DB_HangarUnit units = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_units:
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, add_units()));
        if (input->ExpectTag(18)) goto parse_units;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DB_Hangar::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    DB_Hangar::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional int32 sid = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->sid(), output);
  }
  
  // repeated .DB_HangarUnit units = 2;
  for (int i = 0; i < this->units_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      2, this->units(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DB_Hangar::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 sid = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->sid(), target);
  }
  
  // repeated .DB_HangarUnit units = 2;
  for (int i = 0; i < this->units_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->units(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DB_Hangar::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 sid = 1;
    if (has_sid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sid());
    }
    
  }
  // repeated .DB_HangarUnit units = 2;
  total_size += 1 * this->units_size();
  for (int i = 0; i < this->units_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->units(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void DB_Hangar::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DB_Hangar* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DB_Hangar*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DB_Hangar::MergeFrom(const DB_Hangar& from) {
  GOOGLE_CHECK_NE(&from, this);
  units_.MergeFrom(from.units_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_sid(from.sid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DB_Hangar::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DB_Hangar::CopyFrom(const DB_Hangar& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DB_Hangar::IsInitialized() const {
  
  return true;
}

void DB_Hangar::Swap(DB_Hangar* other) {
  if (other != this) {
    std::swap(sid_, other->sid_);
    units_.Swap(&other->units_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DB_Hangar::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DB_Hangar_descriptor_;
  metadata.reflection = DB_Hangar_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DB_GameUnit::kSkuFieldNumber;
const int DB_GameUnit::kUnlockFieldNumber;
const int DB_GameUnit::kUpgradeIdFieldNumber;
const int DB_GameUnit::kTimeLeftFieldNumber;
const int DB_GameUnit::kUpdateAtFieldNumber;
#endif  // !_MSC_VER

DB_GameUnit::DB_GameUnit() {
  SharedCtor();
}

void DB_GameUnit::InitAsDefaultInstance() {
}

DB_GameUnit::DB_GameUnit(const DB_GameUnit& from) {
  SharedCtor();
  MergeFrom(from);
}

void DB_GameUnit::SharedCtor() {
  _cached_size_ = 0;
  sku_ = 0;
  unlock_ = 0;
  upgradeid_ = 0;
  timeleft_ = 0;
  updateat_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DB_GameUnit::~DB_GameUnit() {
  SharedDtor();
}

void DB_GameUnit::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* DB_GameUnit::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DB_GameUnit_descriptor_;
}

const DB_GameUnit& DB_GameUnit::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dbinterface_2eproto();  return *default_instance_;
}

DB_GameUnit* DB_GameUnit::default_instance_ = NULL;

DB_GameUnit* DB_GameUnit::New() const {
  return new DB_GameUnit;
}

void DB_GameUnit::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    sku_ = 0;
    unlock_ = 0;
    upgradeid_ = 0;
    timeleft_ = 0;
    updateat_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DB_GameUnit::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 sku = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &sku_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_unlock;
        break;
      }
      
      // optional int32 unlock = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_unlock:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &unlock_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_upgradeId;
        break;
      }
      
      // optional int32 upgradeId = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_upgradeId:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &upgradeid_));
        _set_bit(2);
        if (input->ExpectTag(32)) goto parse_timeLeft;
        break;
      }
      
      // optional int32 timeLeft = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_timeLeft:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &timeleft_));
        _set_bit(3);
        if (input->ExpectTag(40)) goto parse_updateAt;
        break;
      }
      
      // optional int64 updateAt = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_updateAt:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt64(
              input, &updateat_));
        _set_bit(4);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DB_GameUnit::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    DB_GameUnit::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional int32 sku = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->sku(), output);
  }
  
  // optional int32 unlock = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->unlock(), output);
  }
  
  // optional int32 upgradeId = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->upgradeid(), output);
  }
  
  // optional int32 timeLeft = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->timeleft(), output);
  }
  
  // optional int64 updateAt = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->updateat(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DB_GameUnit::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 sku = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->sku(), target);
  }
  
  // optional int32 unlock = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->unlock(), target);
  }
  
  // optional int32 upgradeId = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->upgradeid(), target);
  }
  
  // optional int32 timeLeft = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->timeleft(), target);
  }
  
  // optional int64 updateAt = 5;
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->updateat(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DB_GameUnit::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 sku = 1;
    if (has_sku()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sku());
    }
    
    // optional int32 unlock = 2;
    if (has_unlock()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->unlock());
    }
    
    // optional int32 upgradeId = 3;
    if (has_upgradeid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->upgradeid());
    }
    
    // optional int32 timeLeft = 4;
    if (has_timeleft()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->timeleft());
    }
    
    // optional int64 updateAt = 5;
    if (has_updateat()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->updateat());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void DB_GameUnit::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DB_GameUnit* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DB_GameUnit*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DB_GameUnit::MergeFrom(const DB_GameUnit& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_sku(from.sku());
    }
    if (from._has_bit(1)) {
      set_unlock(from.unlock());
    }
    if (from._has_bit(2)) {
      set_upgradeid(from.upgradeid());
    }
    if (from._has_bit(3)) {
      set_timeleft(from.timeleft());
    }
    if (from._has_bit(4)) {
      set_updateat(from.updateat());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DB_GameUnit::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DB_GameUnit::CopyFrom(const DB_GameUnit& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DB_GameUnit::IsInitialized() const {
  
  return true;
}

void DB_GameUnit::Swap(DB_GameUnit* other) {
  if (other != this) {
    std::swap(sku_, other->sku_);
    std::swap(unlock_, other->unlock_);
    std::swap(upgradeid_, other->upgradeid_);
    std::swap(timeleft_, other->timeleft_);
    std::swap(updateat_, other->updateat_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DB_GameUnit::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DB_GameUnit_descriptor_;
  metadata.reflection = DB_GameUnit_reflection_;
  return metadata;
}


// ===================================================================

const ::std::string DB_BattleDeployUnit::_default_sku_;
#ifndef _MSC_VER
const int DB_BattleDeployUnit::kSkuFieldNumber;
const int DB_BattleDeployUnit::kXFieldNumber;
const int DB_BattleDeployUnit::kYFieldNumber;
const int DB_BattleDeployUnit::kMillisFieldNumber;
#endif  // !_MSC_VER

DB_BattleDeployUnit::DB_BattleDeployUnit() {
  SharedCtor();
}

void DB_BattleDeployUnit::InitAsDefaultInstance() {
}

DB_BattleDeployUnit::DB_BattleDeployUnit(const DB_BattleDeployUnit& from) {
  SharedCtor();
  MergeFrom(from);
}

void DB_BattleDeployUnit::SharedCtor() {
  _cached_size_ = 0;
  sku_ = const_cast< ::std::string*>(&_default_sku_);
  x_ = 0;
  y_ = 0;
  millis_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DB_BattleDeployUnit::~DB_BattleDeployUnit() {
  SharedDtor();
}

void DB_BattleDeployUnit::SharedDtor() {
  if (sku_ != &_default_sku_) {
    delete sku_;
  }
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* DB_BattleDeployUnit::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DB_BattleDeployUnit_descriptor_;
}

const DB_BattleDeployUnit& DB_BattleDeployUnit::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dbinterface_2eproto();  return *default_instance_;
}

DB_BattleDeployUnit* DB_BattleDeployUnit::default_instance_ = NULL;

DB_BattleDeployUnit* DB_BattleDeployUnit::New() const {
  return new DB_BattleDeployUnit;
}

void DB_BattleDeployUnit::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (sku_ != &_default_sku_) {
        sku_->clear();
      }
    }
    x_ = 0;
    y_ = 0;
    millis_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DB_BattleDeployUnit::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string sku = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadString(
              input, this->mutable_sku()));
        ::google::protobuf::internal::WireFormat::VerifyUTF8String(
          this->sku().data(), this->sku().length(),
          ::google::protobuf::internal::WireFormat::PARSE);
        if (input->ExpectTag(16)) goto parse_x;
        break;
      }
      
      // optional int32 x = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_x:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &x_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_y;
        break;
      }
      
      // optional int32 y = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_y:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &y_));
        _set_bit(2);
        if (input->ExpectTag(32)) goto parse_millis;
        break;
      }
      
      // optional int32 millis = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_millis:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &millis_));
        _set_bit(3);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DB_BattleDeployUnit::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    DB_BattleDeployUnit::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional string sku = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->sku().data(), this->sku().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->sku(), output);
  }
  
  // optional int32 x = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->x(), output);
  }
  
  // optional int32 y = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->y(), output);
  }
  
  // optional int32 millis = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->millis(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DB_BattleDeployUnit::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string sku = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->sku().data(), this->sku().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->sku(), target);
  }
  
  // optional int32 x = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->x(), target);
  }
  
  // optional int32 y = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->y(), target);
  }
  
  // optional int32 millis = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->millis(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DB_BattleDeployUnit::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string sku = 1;
    if (has_sku()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->sku());
    }
    
    // optional int32 x = 2;
    if (has_x()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->x());
    }
    
    // optional int32 y = 3;
    if (has_y()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->y());
    }
    
    // optional int32 millis = 4;
    if (has_millis()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->millis());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void DB_BattleDeployUnit::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DB_BattleDeployUnit* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DB_BattleDeployUnit*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DB_BattleDeployUnit::MergeFrom(const DB_BattleDeployUnit& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_sku(from.sku());
    }
    if (from._has_bit(1)) {
      set_x(from.x());
    }
    if (from._has_bit(2)) {
      set_y(from.y());
    }
    if (from._has_bit(3)) {
      set_millis(from.millis());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DB_BattleDeployUnit::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DB_BattleDeployUnit::CopyFrom(const DB_BattleDeployUnit& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DB_BattleDeployUnit::IsInitialized() const {
  
  return true;
}

void DB_BattleDeployUnit::Swap(DB_BattleDeployUnit* other) {
  if (other != this) {
    std::swap(sku_, other->sku_);
    std::swap(x_, other->x_);
    std::swap(y_, other->y_);
    std::swap(millis_, other->millis_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DB_BattleDeployUnit::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DB_BattleDeployUnit_descriptor_;
  metadata.reflection = DB_BattleDeployUnit_reflection_;
  return metadata;
}


// ===================================================================

const ::std::string DB_BattleReplay::_default_starsku_;
const ::std::string DB_BattleReplay::_default_name_;
const ::std::string DB_BattleReplay::_default_url_;
#ifndef _MSC_VER
const int DB_BattleReplay::kTimeFieldNumber;
const int DB_BattleReplay::kAccountIdFieldNumber;
const int DB_BattleReplay::kPlanetIdFieldNumber;
const int DB_BattleReplay::kStarSkuFieldNumber;
const int DB_BattleReplay::kNameFieldNumber;
const int DB_BattleReplay::kUrlFieldNumber;
const int DB_BattleReplay::kDamageFieldNumber;
const int DB_BattleReplay::kPlanetDamageFieldNumber;
const int DB_BattleReplay::kCoinsTakenFieldNumber;
const int DB_BattleReplay::kMineralsTakenFieldNumber;
const int DB_BattleReplay::kDeployUnitsFieldNumber;
const int DB_BattleReplay::kUnitsFieldNumber;
const int DB_BattleReplay::kCopyUserFieldNumber;
#endif  // !_MSC_VER

DB_BattleReplay::DB_BattleReplay() {
  SharedCtor();
}

void DB_BattleReplay::InitAsDefaultInstance() {
  copyuser_ = const_cast< ::DB_User*>(&::DB_User::default_instance());
}

DB_BattleReplay::DB_BattleReplay(const DB_BattleReplay& from) {
  SharedCtor();
  MergeFrom(from);
}

void DB_BattleReplay::SharedCtor() {
  _cached_size_ = 0;
  time_ = GOOGLE_LONGLONG(0);
  accountid_ = GOOGLE_LONGLONG(0);
  planetid_ = 0;
  starsku_ = const_cast< ::std::string*>(&_default_starsku_);
  name_ = const_cast< ::std::string*>(&_default_name_);
  url_ = const_cast< ::std::string*>(&_default_url_);
  damage_ = 0;
  planetdamage_ = 0;
  coinstaken_ = 0;
  mineralstaken_ = 0;
  copyuser_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DB_BattleReplay::~DB_BattleReplay() {
  SharedDtor();
}

void DB_BattleReplay::SharedDtor() {
  if (starsku_ != &_default_starsku_) {
    delete starsku_;
  }
  if (name_ != &_default_name_) {
    delete name_;
  }
  if (url_ != &_default_url_) {
    delete url_;
  }
  if (this != default_instance_) {
    delete copyuser_;
  }
}

const ::google::protobuf::Descriptor* DB_BattleReplay::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DB_BattleReplay_descriptor_;
}

const DB_BattleReplay& DB_BattleReplay::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dbinterface_2eproto();  return *default_instance_;
}

DB_BattleReplay* DB_BattleReplay::default_instance_ = NULL;

DB_BattleReplay* DB_BattleReplay::New() const {
  return new DB_BattleReplay;
}

void DB_BattleReplay::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    time_ = GOOGLE_LONGLONG(0);
    accountid_ = GOOGLE_LONGLONG(0);
    planetid_ = 0;
    if (_has_bit(3)) {
      if (starsku_ != &_default_starsku_) {
        starsku_->clear();
      }
    }
    if (_has_bit(4)) {
      if (name_ != &_default_name_) {
        name_->clear();
      }
    }
    if (_has_bit(5)) {
      if (url_ != &_default_url_) {
        url_->clear();
      }
    }
    damage_ = 0;
    planetdamage_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    coinstaken_ = 0;
    mineralstaken_ = 0;
    if (_has_bit(12)) {
      if (copyuser_ != NULL) copyuser_->::DB_User::Clear();
    }
  }
  deployunits_.Clear();
  units_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DB_BattleReplay::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 time = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt64(
              input, &time_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_accountId;
        break;
      }
      
      // optional int64 accountId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_accountId:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt64(
              input, &accountid_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_planetId;
        break;
      }
      
      // optional int32 planetId = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_planetId:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &planetid_));
        _set_bit(2);
        if (input->ExpectTag(34)) goto parse_starSku;
        break;
      }
      
      // optional string starSku = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_starSku:
        DO_(::google::protobuf::internal::WireFormatLite::ReadString(
              input, this->mutable_starsku()));
        ::google::protobuf::internal::WireFormat::VerifyUTF8String(
          this->starsku().data(), this->starsku().length(),
          ::google::protobuf::internal::WireFormat::PARSE);
        if (input->ExpectTag(42)) goto parse_name;
        break;
      }
      
      // optional string name = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_name:
        DO_(::google::protobuf::internal::WireFormatLite::ReadString(
              input, this->mutable_name()));
        ::google::protobuf::internal::WireFormat::VerifyUTF8String(
          this->name().data(), this->name().length(),
          ::google::protobuf::internal::WireFormat::PARSE);
        if (input->ExpectTag(50)) goto parse_url;
        break;
      }
      
      // optional string url = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_url:
        DO_(::google::protobuf::internal::WireFormatLite::ReadString(
              input, this->mutable_url()));
        ::google::protobuf::internal::WireFormat::VerifyUTF8String(
          this->url().data(), this->url().length(),
          ::google::protobuf::internal::WireFormat::PARSE);
        if (input->ExpectTag(56)) goto parse_damage;
        break;
      }
      
      // optional int32 damage = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_damage:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &damage_));
        _set_bit(6);
        if (input->ExpectTag(64)) goto parse_planetDamage;
        break;
      }
      
      // optional int32 planetDamage = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_planetDamage:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &planetdamage_));
        _set_bit(7);
        if (input->ExpectTag(72)) goto parse_coinsTaken;
        break;
      }
      
      // optional int32 coinsTaken = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_coinsTaken:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &coinstaken_));
        _set_bit(8);
        if (input->ExpectTag(80)) goto parse_mineralsTaken;
        break;
      }
      
      // optional int32 mineralsTaken = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_mineralsTaken:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &mineralstaken_));
        _set_bit(9);
        if (input->ExpectTag(90)) goto parse_deployUnits;
        break;
      }
      
      // repeated .DB_BattleDeployUnit deployUnits = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_deployUnits:
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, add_deployunits()));
        if (input->ExpectTag(90)) goto parse_deployUnits;
        if (input->ExpectTag(98)) goto parse_units;
        break;
      }
      
      // repeated .DB_GameUnit units = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_units:
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, add_units()));
        if (input->ExpectTag(98)) goto parse_units;
        if (input->ExpectTag(106)) goto parse_copyUser;
        break;
      }
      
      // optional .DB_User copyUser = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_copyUser:
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
             input, mutable_copyuser()));
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DB_BattleReplay::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    DB_BattleReplay::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional int64 time = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->time(), output);
  }
  
  // optional int64 accountId = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->accountid(), output);
  }
  
  // optional int32 planetId = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->planetid(), output);
  }
  
  // optional string starSku = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->starsku().data(), this->starsku().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->starsku(), output);
  }
  
  // optional string name = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->name(), output);
  }
  
  // optional string url = 6;
  if (_has_bit(5)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->url().data(), this->url().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->url(), output);
  }
  
  // optional int32 damage = 7;
  if (_has_bit(6)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->damage(), output);
  }
  
  // optional int32 planetDamage = 8;
  if (_has_bit(7)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->planetdamage(), output);
  }
  
  // optional int32 coinsTaken = 9;
  if (_has_bit(8)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->coinstaken(), output);
  }
  
  // optional int32 mineralsTaken = 10;
  if (_has_bit(9)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->mineralstaken(), output);
  }
  
  // repeated .DB_BattleDeployUnit deployUnits = 11;
  for (int i = 0; i < this->deployunits_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      11, this->deployunits(i), output);
  }
  
  // repeated .DB_GameUnit units = 12;
  for (int i = 0; i < this->units_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      12, this->units(i), output);
  }
  
  // optional .DB_User copyUser = 13;
  if (_has_bit(12)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      13, this->copyuser(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DB_BattleReplay::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int64 time = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->time(), target);
  }
  
  // optional int64 accountId = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->accountid(), target);
  }
  
  // optional int32 planetId = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->planetid(), target);
  }
  
  // optional string starSku = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->starsku().data(), this->starsku().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->starsku(), target);
  }
  
  // optional string name = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->name(), target);
  }
  
  // optional string url = 6;
  if (_has_bit(5)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->url().data(), this->url().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->url(), target);
  }
  
  // optional int32 damage = 7;
  if (_has_bit(6)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->damage(), target);
  }
  
  // optional int32 planetDamage = 8;
  if (_has_bit(7)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->planetdamage(), target);
  }
  
  // optional int32 coinsTaken = 9;
  if (_has_bit(8)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->coinstaken(), target);
  }
  
  // optional int32 mineralsTaken = 10;
  if (_has_bit(9)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->mineralstaken(), target);
  }
  
  // repeated .DB_BattleDeployUnit deployUnits = 11;
  for (int i = 0; i < this->deployunits_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        11, this->deployunits(i), target);
  }
  
  // repeated .DB_GameUnit units = 12;
  for (int i = 0; i < this->units_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        12, this->units(i), target);
  }
  
  // optional .DB_User copyUser = 13;
  if (_has_bit(12)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        13, this->copyuser(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DB_BattleReplay::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 time = 1;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->time());
    }
    
    // optional int64 accountId = 2;
    if (has_accountid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->accountid());
    }
    
    // optional int32 planetId = 3;
    if (has_planetid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->planetid());
    }
    
    // optional string starSku = 4;
    if (has_starsku()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->starsku());
    }
    
    // optional string name = 5;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }
    
    // optional string url = 6;
    if (has_url()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->url());
    }
    
    // optional int32 damage = 7;
    if (has_damage()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->damage());
    }
    
    // optional int32 planetDamage = 8;
    if (has_planetdamage()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->planetdamage());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 coinsTaken = 9;
    if (has_coinstaken()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->coinstaken());
    }
    
    // optional int32 mineralsTaken = 10;
    if (has_mineralstaken()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->mineralstaken());
    }
    
    // optional .DB_User copyUser = 13;
    if (has_copyuser()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->copyuser());
    }
    
  }
  // repeated .DB_BattleDeployUnit deployUnits = 11;
  total_size += 1 * this->deployunits_size();
  for (int i = 0; i < this->deployunits_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->deployunits(i));
  }
  
  // repeated .DB_GameUnit units = 12;
  total_size += 1 * this->units_size();
  for (int i = 0; i < this->units_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->units(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void DB_BattleReplay::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DB_BattleReplay* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DB_BattleReplay*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DB_BattleReplay::MergeFrom(const DB_BattleReplay& from) {
  GOOGLE_CHECK_NE(&from, this);
  deployunits_.MergeFrom(from.deployunits_);
  units_.MergeFrom(from.units_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_time(from.time());
    }
    if (from._has_bit(1)) {
      set_accountid(from.accountid());
    }
    if (from._has_bit(2)) {
      set_planetid(from.planetid());
    }
    if (from._has_bit(3)) {
      set_starsku(from.starsku());
    }
    if (from._has_bit(4)) {
      set_name(from.name());
    }
    if (from._has_bit(5)) {
      set_url(from.url());
    }
    if (from._has_bit(6)) {
      set_damage(from.damage());
    }
    if (from._has_bit(7)) {
      set_planetdamage(from.planetdamage());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from._has_bit(8)) {
      set_coinstaken(from.coinstaken());
    }
    if (from._has_bit(9)) {
      set_mineralstaken(from.mineralstaken());
    }
    if (from._has_bit(12)) {
      mutable_copyuser()->::DB_User::MergeFrom(from.copyuser());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DB_BattleReplay::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DB_BattleReplay::CopyFrom(const DB_BattleReplay& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DB_BattleReplay::IsInitialized() const {
  
  return true;
}

void DB_BattleReplay::Swap(DB_BattleReplay* other) {
  if (other != this) {
    std::swap(time_, other->time_);
    std::swap(accountid_, other->accountid_);
    std::swap(planetid_, other->planetid_);
    std::swap(starsku_, other->starsku_);
    std::swap(name_, other->name_);
    std::swap(url_, other->url_);
    std::swap(damage_, other->damage_);
    std::swap(planetdamage_, other->planetdamage_);
    std::swap(coinstaken_, other->coinstaken_);
    std::swap(mineralstaken_, other->mineralstaken_);
    deployunits_.Swap(&other->deployunits_);
    units_.Swap(&other->units_);
    std::swap(copyuser_, other->copyuser_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DB_BattleReplay::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DB_BattleReplay_descriptor_;
  metadata.reflection = DB_BattleReplay_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DB_Shipyard::kSidFieldNumber;
const int DB_Shipyard::kUnlockedSlotsFieldNumber;
const int DB_Shipyard::kUpdatedAtFieldNumber;
const int DB_Shipyard::kSlotFieldNumber;
#endif  // !_MSC_VER

DB_Shipyard::DB_Shipyard() {
  SharedCtor();
}

void DB_Shipyard::InitAsDefaultInstance() {
}

DB_Shipyard::DB_Shipyard(const DB_Shipyard& from) {
  SharedCtor();
  MergeFrom(from);
}

void DB_Shipyard::SharedCtor() {
  _cached_size_ = 0;
  sid_ = 0;
  unlockedslots_ = 0;
  updatedat_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DB_Shipyard::~DB_Shipyard() {
  SharedDtor();
}

void DB_Shipyard::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* DB_Shipyard::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DB_Shipyard_descriptor_;
}

const DB_Shipyard& DB_Shipyard::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dbinterface_2eproto();  return *default_instance_;
}

DB_Shipyard* DB_Shipyard::default_instance_ = NULL;

DB_Shipyard* DB_Shipyard::New() const {
  return new DB_Shipyard;
}

void DB_Shipyard::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    sid_ = 0;
    unlockedslots_ = 0;
    updatedat_ = 0;
  }
  slot_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DB_Shipyard::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 sid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &sid_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_unlockedSlots;
        break;
      }
      
      // optional int32 unlockedSlots = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_unlockedSlots:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &unlockedslots_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_updatedAt;
        break;
      }
      
      // optional int32 updatedAt = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_updatedAt:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &updatedat_));
        _set_bit(2);
        if (input->ExpectTag(34)) goto parse_slot;
        break;
      }
      
      // repeated .DB_Slot slot = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_slot:
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, add_slot()));
        if (input->ExpectTag(34)) goto parse_slot;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DB_Shipyard::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    DB_Shipyard::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional int32 sid = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->sid(), output);
  }
  
  // optional int32 unlockedSlots = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->unlockedslots(), output);
  }
  
  // optional int32 updatedAt = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->updatedat(), output);
  }
  
  // repeated .DB_Slot slot = 4;
  for (int i = 0; i < this->slot_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      4, this->slot(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DB_Shipyard::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 sid = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->sid(), target);
  }
  
  // optional int32 unlockedSlots = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->unlockedslots(), target);
  }
  
  // optional int32 updatedAt = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->updatedat(), target);
  }
  
  // repeated .DB_Slot slot = 4;
  for (int i = 0; i < this->slot_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->slot(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DB_Shipyard::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 sid = 1;
    if (has_sid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sid());
    }
    
    // optional int32 unlockedSlots = 2;
    if (has_unlockedslots()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->unlockedslots());
    }
    
    // optional int32 updatedAt = 3;
    if (has_updatedat()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->updatedat());
    }
    
  }
  // repeated .DB_Slot slot = 4;
  total_size += 1 * this->slot_size();
  for (int i = 0; i < this->slot_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->slot(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void DB_Shipyard::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DB_Shipyard* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DB_Shipyard*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DB_Shipyard::MergeFrom(const DB_Shipyard& from) {
  GOOGLE_CHECK_NE(&from, this);
  slot_.MergeFrom(from.slot_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_sid(from.sid());
    }
    if (from._has_bit(1)) {
      set_unlockedslots(from.unlockedslots());
    }
    if (from._has_bit(2)) {
      set_updatedat(from.updatedat());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DB_Shipyard::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DB_Shipyard::CopyFrom(const DB_Shipyard& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DB_Shipyard::IsInitialized() const {
  
  return true;
}

void DB_Shipyard::Swap(DB_Shipyard* other) {
  if (other != this) {
    std::swap(sid_, other->sid_);
    std::swap(unlockedslots_, other->unlockedslots_);
    std::swap(updatedat_, other->updatedat_);
    slot_.Swap(&other->slot_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DB_Shipyard::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DB_Shipyard_descriptor_;
  metadata.reflection = DB_Shipyard_reflection_;
  return metadata;
}


// ===================================================================

const ::std::string DB_Slot::_default_sku_;
#ifndef _MSC_VER
const int DB_Slot::kSkuNumFieldNumber;
const int DB_Slot::kSkuFieldNumber;
const int DB_Slot::kTimeLeftFieldNumber;
#endif  // !_MSC_VER

DB_Slot::DB_Slot() {
  SharedCtor();
}

void DB_Slot::InitAsDefaultInstance() {
}

DB_Slot::DB_Slot(const DB_Slot& from) {
  SharedCtor();
  MergeFrom(from);
}

void DB_Slot::SharedCtor() {
  _cached_size_ = 0;
  skunum_ = 0;
  sku_ = const_cast< ::std::string*>(&_default_sku_);
  timeleft_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DB_Slot::~DB_Slot() {
  SharedDtor();
}

void DB_Slot::SharedDtor() {
  if (sku_ != &_default_sku_) {
    delete sku_;
  }
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* DB_Slot::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DB_Slot_descriptor_;
}

const DB_Slot& DB_Slot::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dbinterface_2eproto();  return *default_instance_;
}

DB_Slot* DB_Slot::default_instance_ = NULL;

DB_Slot* DB_Slot::New() const {
  return new DB_Slot;
}

void DB_Slot::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    skunum_ = 0;
    if (_has_bit(1)) {
      if (sku_ != &_default_sku_) {
        sku_->clear();
      }
    }
    timeleft_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DB_Slot::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 skuNum = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &skunum_));
        _set_bit(0);
        if (input->ExpectTag(18)) goto parse_sku;
        break;
      }
      
      // optional string sku = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_sku:
        DO_(::google::protobuf::internal::WireFormatLite::ReadString(
              input, this->mutable_sku()));
        ::google::protobuf::internal::WireFormat::VerifyUTF8String(
          this->sku().data(), this->sku().length(),
          ::google::protobuf::internal::WireFormat::PARSE);
        if (input->ExpectTag(24)) goto parse_timeLeft;
        break;
      }
      
      // optional int32 timeLeft = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_timeLeft:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &timeleft_));
        _set_bit(2);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DB_Slot::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    DB_Slot::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional int32 skuNum = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->skunum(), output);
  }
  
  // optional string sku = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->sku().data(), this->sku().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->sku(), output);
  }
  
  // optional int32 timeLeft = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->timeleft(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DB_Slot::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 skuNum = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->skunum(), target);
  }
  
  // optional string sku = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->sku().data(), this->sku().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->sku(), target);
  }
  
  // optional int32 timeLeft = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->timeleft(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DB_Slot::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 skuNum = 1;
    if (has_skunum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->skunum());
    }
    
    // optional string sku = 2;
    if (has_sku()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->sku());
    }
    
    // optional int32 timeLeft = 3;
    if (has_timeleft()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->timeleft());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void DB_Slot::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DB_Slot* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DB_Slot*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DB_Slot::MergeFrom(const DB_Slot& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_skunum(from.skunum());
    }
    if (from._has_bit(1)) {
      set_sku(from.sku());
    }
    if (from._has_bit(2)) {
      set_timeleft(from.timeleft());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DB_Slot::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DB_Slot::CopyFrom(const DB_Slot& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DB_Slot::IsInitialized() const {
  
  return true;
}

void DB_Slot::Swap(DB_Slot* other) {
  if (other != this) {
    std::swap(skunum_, other->skunum_);
    std::swap(sku_, other->sku_);
    std::swap(timeleft_, other->timeleft_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DB_Slot::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DB_Slot_descriptor_;
  metadata.reflection = DB_Slot_reflection_;
  return metadata;
}


// ===================================================================

const ::std::string DB_BunkerUnit::_default_sku_;
#ifndef _MSC_VER
const int DB_BunkerUnit::kSkuFieldNumber;
const int DB_BunkerUnit::kNumFieldNumber;
#endif  // !_MSC_VER

DB_BunkerUnit::DB_BunkerUnit() {
  SharedCtor();
}

void DB_BunkerUnit::InitAsDefaultInstance() {
}

DB_BunkerUnit::DB_BunkerUnit(const DB_BunkerUnit& from) {
  SharedCtor();
  MergeFrom(from);
}

void DB_BunkerUnit::SharedCtor() {
  _cached_size_ = 0;
  sku_ = const_cast< ::std::string*>(&_default_sku_);
  num_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DB_BunkerUnit::~DB_BunkerUnit() {
  SharedDtor();
}

void DB_BunkerUnit::SharedDtor() {
  if (sku_ != &_default_sku_) {
    delete sku_;
  }
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* DB_BunkerUnit::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DB_BunkerUnit_descriptor_;
}

const DB_BunkerUnit& DB_BunkerUnit::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dbinterface_2eproto();  return *default_instance_;
}

DB_BunkerUnit* DB_BunkerUnit::default_instance_ = NULL;

DB_BunkerUnit* DB_BunkerUnit::New() const {
  return new DB_BunkerUnit;
}

void DB_BunkerUnit::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (sku_ != &_default_sku_) {
        sku_->clear();
      }
    }
    num_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DB_BunkerUnit::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string sku = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadString(
              input, this->mutable_sku()));
        ::google::protobuf::internal::WireFormat::VerifyUTF8String(
          this->sku().data(), this->sku().length(),
          ::google::protobuf::internal::WireFormat::PARSE);
        if (input->ExpectTag(16)) goto parse_num;
        break;
      }
      
      // optional int32 num = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_num:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &num_));
        _set_bit(1);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DB_BunkerUnit::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    DB_BunkerUnit::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional string sku = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->sku().data(), this->sku().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->sku(), output);
  }
  
  // optional int32 num = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->num(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DB_BunkerUnit::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string sku = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->sku().data(), this->sku().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->sku(), target);
  }
  
  // optional int32 num = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->num(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DB_BunkerUnit::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string sku = 1;
    if (has_sku()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->sku());
    }
    
    // optional int32 num = 2;
    if (has_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->num());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void DB_BunkerUnit::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DB_BunkerUnit* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DB_BunkerUnit*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DB_BunkerUnit::MergeFrom(const DB_BunkerUnit& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_sku(from.sku());
    }
    if (from._has_bit(1)) {
      set_num(from.num());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DB_BunkerUnit::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DB_BunkerUnit::CopyFrom(const DB_BunkerUnit& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DB_BunkerUnit::IsInitialized() const {
  
  return true;
}

void DB_BunkerUnit::Swap(DB_BunkerUnit* other) {
  if (other != this) {
    std::swap(sku_, other->sku_);
    std::swap(num_, other->num_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DB_BunkerUnit::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DB_BunkerUnit_descriptor_;
  metadata.reflection = DB_BunkerUnit_reflection_;
  return metadata;
}


// ===================================================================

const ::std::string DB_Bunker::_default_helpersaccountids_;
#ifndef _MSC_VER
const int DB_Bunker::kSidFieldNumber;
const int DB_Bunker::kHelpersAccountIdsFieldNumber;
const int DB_Bunker::kBunkerFieldNumber;
#endif  // !_MSC_VER

DB_Bunker::DB_Bunker() {
  SharedCtor();
}

void DB_Bunker::InitAsDefaultInstance() {
}

DB_Bunker::DB_Bunker(const DB_Bunker& from) {
  SharedCtor();
  MergeFrom(from);
}

void DB_Bunker::SharedCtor() {
  _cached_size_ = 0;
  sid_ = 0;
  helpersaccountids_ = const_cast< ::std::string*>(&_default_helpersaccountids_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DB_Bunker::~DB_Bunker() {
  SharedDtor();
}

void DB_Bunker::SharedDtor() {
  if (helpersaccountids_ != &_default_helpersaccountids_) {
    delete helpersaccountids_;
  }
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* DB_Bunker::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DB_Bunker_descriptor_;
}

const DB_Bunker& DB_Bunker::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dbinterface_2eproto();  return *default_instance_;
}

DB_Bunker* DB_Bunker::default_instance_ = NULL;

DB_Bunker* DB_Bunker::New() const {
  return new DB_Bunker;
}

void DB_Bunker::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    sid_ = 0;
    if (_has_bit(1)) {
      if (helpersaccountids_ != &_default_helpersaccountids_) {
        helpersaccountids_->clear();
      }
    }
  }
  bunker_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DB_Bunker::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 sid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &sid_));
        _set_bit(0);
        if (input->ExpectTag(18)) goto parse_helpersAccountIds;
        break;
      }
      
      // optional string helpersAccountIds = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_helpersAccountIds:
        DO_(::google::protobuf::internal::WireFormatLite::ReadString(
              input, this->mutable_helpersaccountids()));
        ::google::protobuf::internal::WireFormat::VerifyUTF8String(
          this->helpersaccountids().data(), this->helpersaccountids().length(),
          ::google::protobuf::internal::WireFormat::PARSE);
        if (input->ExpectTag(26)) goto parse_Bunker;
        break;
      }
      
      // repeated .DB_BunkerUnit Bunker = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_Bunker:
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, add_bunker()));
        if (input->ExpectTag(26)) goto parse_Bunker;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DB_Bunker::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    DB_Bunker::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional int32 sid = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->sid(), output);
  }
  
  // optional string helpersAccountIds = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->helpersaccountids().data(), this->helpersaccountids().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->helpersaccountids(), output);
  }
  
  // repeated .DB_BunkerUnit Bunker = 3;
  for (int i = 0; i < this->bunker_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      3, this->bunker(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DB_Bunker::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 sid = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->sid(), target);
  }
  
  // optional string helpersAccountIds = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->helpersaccountids().data(), this->helpersaccountids().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->helpersaccountids(), target);
  }
  
  // repeated .DB_BunkerUnit Bunker = 3;
  for (int i = 0; i < this->bunker_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->bunker(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DB_Bunker::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 sid = 1;
    if (has_sid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sid());
    }
    
    // optional string helpersAccountIds = 2;
    if (has_helpersaccountids()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->helpersaccountids());
    }
    
  }
  // repeated .DB_BunkerUnit Bunker = 3;
  total_size += 1 * this->bunker_size();
  for (int i = 0; i < this->bunker_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->bunker(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void DB_Bunker::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DB_Bunker* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DB_Bunker*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DB_Bunker::MergeFrom(const DB_Bunker& from) {
  GOOGLE_CHECK_NE(&from, this);
  bunker_.MergeFrom(from.bunker_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_sid(from.sid());
    }
    if (from._has_bit(1)) {
      set_helpersaccountids(from.helpersaccountids());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DB_Bunker::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DB_Bunker::CopyFrom(const DB_Bunker& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DB_Bunker::IsInitialized() const {
  
  return true;
}

void DB_Bunker::Swap(DB_Bunker* other) {
  if (other != this) {
    std::swap(sid_, other->sid_);
    std::swap(helpersaccountids_, other->helpersaccountids_);
    bunker_.Swap(&other->bunker_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DB_Bunker::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DB_Bunker_descriptor_;
  metadata.reflection = DB_Bunker_reflection_;
  return metadata;
}


// ===================================================================

const ::std::string DB_StarLite::_default_sku_;
#ifndef _MSC_VER
const int DB_StarLite::kStarIdFieldNumber;
const int DB_StarLite::kStarNameFieldNumber;
const int DB_StarLite::kStarTypeFieldNumber;
const int DB_StarLite::kSkuFieldNumber;
#endif  // !_MSC_VER

DB_StarLite::DB_StarLite() {
  SharedCtor();
}

void DB_StarLite::InitAsDefaultInstance() {
}

DB_StarLite::DB_StarLite(const DB_StarLite& from) {
  SharedCtor();
  MergeFrom(from);
}

void DB_StarLite::SharedCtor() {
  _cached_size_ = 0;
  starid_ = 0;
  starname_ = 0;
  startype_ = 0;
  sku_ = const_cast< ::std::string*>(&_default_sku_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DB_StarLite::~DB_StarLite() {
  SharedDtor();
}

void DB_StarLite::SharedDtor() {
  if (sku_ != &_default_sku_) {
    delete sku_;
  }
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* DB_StarLite::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DB_StarLite_descriptor_;
}

const DB_StarLite& DB_StarLite::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dbinterface_2eproto();  return *default_instance_;
}

DB_StarLite* DB_StarLite::default_instance_ = NULL;

DB_StarLite* DB_StarLite::New() const {
  return new DB_StarLite;
}

void DB_StarLite::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    starid_ = 0;
    starname_ = 0;
    startype_ = 0;
    if (_has_bit(3)) {
      if (sku_ != &_default_sku_) {
        sku_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DB_StarLite::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 starId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &starid_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_starName;
        break;
      }
      
      // optional int32 starName = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_starName:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &starname_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_starType;
        break;
      }
      
      // optional int32 starType = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_starType:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &startype_));
        _set_bit(2);
        if (input->ExpectTag(34)) goto parse_sku;
        break;
      }
      
      // optional string sku = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_sku:
        DO_(::google::protobuf::internal::WireFormatLite::ReadString(
              input, this->mutable_sku()));
        ::google::protobuf::internal::WireFormat::VerifyUTF8String(
          this->sku().data(), this->sku().length(),
          ::google::protobuf::internal::WireFormat::PARSE);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DB_StarLite::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    DB_StarLite::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional int32 starId = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->starid(), output);
  }
  
  // optional int32 starName = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->starname(), output);
  }
  
  // optional int32 starType = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->startype(), output);
  }
  
  // optional string sku = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->sku().data(), this->sku().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->sku(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DB_StarLite::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 starId = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->starid(), target);
  }
  
  // optional int32 starName = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->starname(), target);
  }
  
  // optional int32 starType = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->startype(), target);
  }
  
  // optional string sku = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->sku().data(), this->sku().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->sku(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DB_StarLite::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 starId = 1;
    if (has_starid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->starid());
    }
    
    // optional int32 starName = 2;
    if (has_starname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->starname());
    }
    
    // optional int32 starType = 3;
    if (has_startype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->startype());
    }
    
    // optional string sku = 4;
    if (has_sku()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->sku());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void DB_StarLite::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DB_StarLite* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DB_StarLite*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DB_StarLite::MergeFrom(const DB_StarLite& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_starid(from.starid());
    }
    if (from._has_bit(1)) {
      set_starname(from.starname());
    }
    if (from._has_bit(2)) {
      set_startype(from.startype());
    }
    if (from._has_bit(3)) {
      set_sku(from.sku());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DB_StarLite::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DB_StarLite::CopyFrom(const DB_StarLite& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DB_StarLite::IsInitialized() const {
  
  return true;
}

void DB_StarLite::Swap(DB_StarLite* other) {
  if (other != this) {
    std::swap(starid_, other->starid_);
    std::swap(starname_, other->starname_);
    std::swap(startype_, other->startype_);
    std::swap(sku_, other->sku_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DB_StarLite::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DB_StarLite_descriptor_;
  metadata.reflection = DB_StarLite_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DB_Planet::kIdFieldNumber;
const int DB_Planet::kTypeFieldNumber;
const int DB_Planet::kHQLevelFieldNumber;
const int DB_Planet::kDroidsFieldNumber;
const int DB_Planet::kDroidInUseFieldNumber;
const int DB_Planet::kCapitalFieldNumber;
const int DB_Planet::kCoinsLimitFieldNumber;
const int DB_Planet::kMineralLimitFieldNumber;
const int DB_Planet::kStarFieldNumber;
const int DB_Planet::kItemsFieldNumber;
const int DB_Planet::kHangarsFieldNumber;
const int DB_Planet::kUnitsFieldNumber;
const int DB_Planet::kShipyardFieldNumber;
const int DB_Planet::kBunkersFieldNumber;
#endif  // !_MSC_VER

DB_Planet::DB_Planet() {
  SharedCtor();
}

void DB_Planet::InitAsDefaultInstance() {
  star_ = const_cast< ::DB_StarLite*>(&::DB_StarLite::default_instance());
}

DB_Planet::DB_Planet(const DB_Planet& from) {
  SharedCtor();
  MergeFrom(from);
}

void DB_Planet::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  type_ = 0;
  hqlevel_ = 0;
  droids_ = 0;
  droidinuse_ = 0;
  capital_ = 0;
  coinslimit_ = GOOGLE_LONGLONG(0);
  minerallimit_ = GOOGLE_LONGLONG(0);
  star_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DB_Planet::~DB_Planet() {
  SharedDtor();
}

void DB_Planet::SharedDtor() {
  if (this != default_instance_) {
    delete star_;
  }
}

const ::google::protobuf::Descriptor* DB_Planet::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DB_Planet_descriptor_;
}

const DB_Planet& DB_Planet::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dbinterface_2eproto();  return *default_instance_;
}

DB_Planet* DB_Planet::default_instance_ = NULL;

DB_Planet* DB_Planet::New() const {
  return new DB_Planet;
}

void DB_Planet::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    type_ = 0;
    hqlevel_ = 0;
    droids_ = 0;
    droidinuse_ = 0;
    capital_ = 0;
    coinslimit_ = GOOGLE_LONGLONG(0);
    minerallimit_ = GOOGLE_LONGLONG(0);
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (_has_bit(8)) {
      if (star_ != NULL) star_->::DB_StarLite::Clear();
    }
  }
  items_.Clear();
  hangars_.Clear();
  units_.Clear();
  shipyard_.Clear();
  bunkers_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DB_Planet::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &id_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }
      
      // optional int32 type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_type:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &type_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_HQLevel;
        break;
      }
      
      // optional int32 HQLevel = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_HQLevel:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &hqlevel_));
        _set_bit(2);
        if (input->ExpectTag(32)) goto parse_Droids;
        break;
      }
      
      // optional int32 Droids = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Droids:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &droids_));
        _set_bit(3);
        if (input->ExpectTag(40)) goto parse_DroidInUse;
        break;
      }
      
      // optional int32 DroidInUse = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_DroidInUse:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &droidinuse_));
        _set_bit(4);
        if (input->ExpectTag(48)) goto parse_Capital;
        break;
      }
      
      // optional int32 Capital = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Capital:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &capital_));
        _set_bit(5);
        if (input->ExpectTag(56)) goto parse_CoinsLimit;
        break;
      }
      
      // optional int64 CoinsLimit = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_CoinsLimit:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt64(
              input, &coinslimit_));
        _set_bit(6);
        if (input->ExpectTag(64)) goto parse_MineralLimit;
        break;
      }
      
      // optional int64 MineralLimit = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_MineralLimit:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt64(
              input, &minerallimit_));
        _set_bit(7);
        if (input->ExpectTag(74)) goto parse_star;
        break;
      }
      
      // optional .DB_StarLite star = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_star:
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
             input, mutable_star()));
        if (input->ExpectTag(82)) goto parse_items;
        break;
      }
      
      // repeated .DB_Item items = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_items:
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, add_items()));
        if (input->ExpectTag(82)) goto parse_items;
        if (input->ExpectTag(90)) goto parse_hangars;
        break;
      }
      
      // repeated .DB_Hangar hangars = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_hangars:
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, add_hangars()));
        if (input->ExpectTag(90)) goto parse_hangars;
        if (input->ExpectTag(98)) goto parse_units;
        break;
      }
      
      // repeated .DB_GameUnit units = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_units:
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, add_units()));
        if (input->ExpectTag(98)) goto parse_units;
        if (input->ExpectTag(106)) goto parse_shipyard;
        break;
      }
      
      // repeated .DB_Shipyard shipyard = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_shipyard:
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, add_shipyard()));
        if (input->ExpectTag(106)) goto parse_shipyard;
        if (input->ExpectTag(114)) goto parse_bunkers;
        break;
      }
      
      // repeated .DB_Bunker bunkers = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_bunkers:
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, add_bunkers()));
        if (input->ExpectTag(114)) goto parse_bunkers;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DB_Planet::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    DB_Planet::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional int32 id = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }
  
  // optional int32 type = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->type(), output);
  }
  
  // optional int32 HQLevel = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->hqlevel(), output);
  }
  
  // optional int32 Droids = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->droids(), output);
  }
  
  // optional int32 DroidInUse = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->droidinuse(), output);
  }
  
  // optional int32 Capital = 6;
  if (_has_bit(5)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->capital(), output);
  }
  
  // optional int64 CoinsLimit = 7;
  if (_has_bit(6)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(7, this->coinslimit(), output);
  }
  
  // optional int64 MineralLimit = 8;
  if (_has_bit(7)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(8, this->minerallimit(), output);
  }
  
  // optional .DB_StarLite star = 9;
  if (_has_bit(8)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      9, this->star(), output);
  }
  
  // repeated .DB_Item items = 10;
  for (int i = 0; i < this->items_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      10, this->items(i), output);
  }
  
  // repeated .DB_Hangar hangars = 11;
  for (int i = 0; i < this->hangars_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      11, this->hangars(i), output);
  }
  
  // repeated .DB_GameUnit units = 12;
  for (int i = 0; i < this->units_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      12, this->units(i), output);
  }
  
  // repeated .DB_Shipyard shipyard = 13;
  for (int i = 0; i < this->shipyard_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      13, this->shipyard(i), output);
  }
  
  // repeated .DB_Bunker bunkers = 14;
  for (int i = 0; i < this->bunkers_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      14, this->bunkers(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DB_Planet::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 id = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }
  
  // optional int32 type = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->type(), target);
  }
  
  // optional int32 HQLevel = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->hqlevel(), target);
  }
  
  // optional int32 Droids = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->droids(), target);
  }
  
  // optional int32 DroidInUse = 5;
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->droidinuse(), target);
  }
  
  // optional int32 Capital = 6;
  if (_has_bit(5)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->capital(), target);
  }
  
  // optional int64 CoinsLimit = 7;
  if (_has_bit(6)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(7, this->coinslimit(), target);
  }
  
  // optional int64 MineralLimit = 8;
  if (_has_bit(7)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(8, this->minerallimit(), target);
  }
  
  // optional .DB_StarLite star = 9;
  if (_has_bit(8)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->star(), target);
  }
  
  // repeated .DB_Item items = 10;
  for (int i = 0; i < this->items_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->items(i), target);
  }
  
  // repeated .DB_Hangar hangars = 11;
  for (int i = 0; i < this->hangars_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        11, this->hangars(i), target);
  }
  
  // repeated .DB_GameUnit units = 12;
  for (int i = 0; i < this->units_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        12, this->units(i), target);
  }
  
  // repeated .DB_Shipyard shipyard = 13;
  for (int i = 0; i < this->shipyard_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        13, this->shipyard(i), target);
  }
  
  // repeated .DB_Bunker bunkers = 14;
  for (int i = 0; i < this->bunkers_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        14, this->bunkers(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DB_Planet::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }
    
    // optional int32 type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }
    
    // optional int32 HQLevel = 3;
    if (has_hqlevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->hqlevel());
    }
    
    // optional int32 Droids = 4;
    if (has_droids()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->droids());
    }
    
    // optional int32 DroidInUse = 5;
    if (has_droidinuse()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->droidinuse());
    }
    
    // optional int32 Capital = 6;
    if (has_capital()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->capital());
    }
    
    // optional int64 CoinsLimit = 7;
    if (has_coinslimit()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->coinslimit());
    }
    
    // optional int64 MineralLimit = 8;
    if (has_minerallimit()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->minerallimit());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional .DB_StarLite star = 9;
    if (has_star()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->star());
    }
    
  }
  // repeated .DB_Item items = 10;
  total_size += 1 * this->items_size();
  for (int i = 0; i < this->items_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->items(i));
  }
  
  // repeated .DB_Hangar hangars = 11;
  total_size += 1 * this->hangars_size();
  for (int i = 0; i < this->hangars_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->hangars(i));
  }
  
  // repeated .DB_GameUnit units = 12;
  total_size += 1 * this->units_size();
  for (int i = 0; i < this->units_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->units(i));
  }
  
  // repeated .DB_Shipyard shipyard = 13;
  total_size += 1 * this->shipyard_size();
  for (int i = 0; i < this->shipyard_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->shipyard(i));
  }
  
  // repeated .DB_Bunker bunkers = 14;
  total_size += 1 * this->bunkers_size();
  for (int i = 0; i < this->bunkers_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->bunkers(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void DB_Planet::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DB_Planet* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DB_Planet*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DB_Planet::MergeFrom(const DB_Planet& from) {
  GOOGLE_CHECK_NE(&from, this);
  items_.MergeFrom(from.items_);
  hangars_.MergeFrom(from.hangars_);
  units_.MergeFrom(from.units_);
  shipyard_.MergeFrom(from.shipyard_);
  bunkers_.MergeFrom(from.bunkers_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_id(from.id());
    }
    if (from._has_bit(1)) {
      set_type(from.type());
    }
    if (from._has_bit(2)) {
      set_hqlevel(from.hqlevel());
    }
    if (from._has_bit(3)) {
      set_droids(from.droids());
    }
    if (from._has_bit(4)) {
      set_droidinuse(from.droidinuse());
    }
    if (from._has_bit(5)) {
      set_capital(from.capital());
    }
    if (from._has_bit(6)) {
      set_coinslimit(from.coinslimit());
    }
    if (from._has_bit(7)) {
      set_minerallimit(from.minerallimit());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from._has_bit(8)) {
      mutable_star()->::DB_StarLite::MergeFrom(from.star());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DB_Planet::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DB_Planet::CopyFrom(const DB_Planet& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DB_Planet::IsInitialized() const {
  
  return true;
}

void DB_Planet::Swap(DB_Planet* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(type_, other->type_);
    std::swap(hqlevel_, other->hqlevel_);
    std::swap(droids_, other->droids_);
    std::swap(droidinuse_, other->droidinuse_);
    std::swap(capital_, other->capital_);
    std::swap(coinslimit_, other->coinslimit_);
    std::swap(minerallimit_, other->minerallimit_);
    std::swap(star_, other->star_);
    items_.Swap(&other->items_);
    hangars_.Swap(&other->hangars_);
    units_.Swap(&other->units_);
    shipyard_.Swap(&other->shipyard_);
    bunkers_.Swap(&other->bunkers_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DB_Planet::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DB_Planet_descriptor_;
  metadata.reflection = DB_Planet_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DB_NPC::kSkuFieldNumber;
const int DB_NPC::kExpFieldNumber;
const int DB_NPC::kHQLevelFieldNumber;
const int DB_NPC::kNpcIdFieldNumber;
const int DB_NPC::kItemsFieldNumber;
#endif  // !_MSC_VER

DB_NPC::DB_NPC() {
  SharedCtor();
}

void DB_NPC::InitAsDefaultInstance() {
}

DB_NPC::DB_NPC(const DB_NPC& from) {
  SharedCtor();
  MergeFrom(from);
}

void DB_NPC::SharedCtor() {
  _cached_size_ = 0;
  sku_ = 0;
  exp_ = 0;
  hqlevel_ = 0;
  npcid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DB_NPC::~DB_NPC() {
  SharedDtor();
}

void DB_NPC::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* DB_NPC::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DB_NPC_descriptor_;
}

const DB_NPC& DB_NPC::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dbinterface_2eproto();  return *default_instance_;
}

DB_NPC* DB_NPC::default_instance_ = NULL;

DB_NPC* DB_NPC::New() const {
  return new DB_NPC;
}

void DB_NPC::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    sku_ = 0;
    exp_ = 0;
    hqlevel_ = 0;
    npcid_ = 0;
  }
  items_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DB_NPC::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 sku = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &sku_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_exp;
        break;
      }
      
      // optional int32 exp = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_exp:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &exp_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_HQLevel;
        break;
      }
      
      // optional int32 HQLevel = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_HQLevel:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &hqlevel_));
        _set_bit(2);
        if (input->ExpectTag(32)) goto parse_npcId;
        break;
      }
      
      // optional int32 npcId = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_npcId:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &npcid_));
        _set_bit(3);
        if (input->ExpectTag(42)) goto parse_items;
        break;
      }
      
      // repeated .DB_Item items = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_items:
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, add_items()));
        if (input->ExpectTag(42)) goto parse_items;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DB_NPC::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    DB_NPC::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional int32 sku = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->sku(), output);
  }
  
  // optional int32 exp = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->exp(), output);
  }
  
  // optional int32 HQLevel = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->hqlevel(), output);
  }
  
  // optional int32 npcId = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->npcid(), output);
  }
  
  // repeated .DB_Item items = 5;
  for (int i = 0; i < this->items_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      5, this->items(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DB_NPC::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 sku = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->sku(), target);
  }
  
  // optional int32 exp = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->exp(), target);
  }
  
  // optional int32 HQLevel = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->hqlevel(), target);
  }
  
  // optional int32 npcId = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->npcid(), target);
  }
  
  // repeated .DB_Item items = 5;
  for (int i = 0; i < this->items_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->items(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DB_NPC::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 sku = 1;
    if (has_sku()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sku());
    }
    
    // optional int32 exp = 2;
    if (has_exp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->exp());
    }
    
    // optional int32 HQLevel = 3;
    if (has_hqlevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->hqlevel());
    }
    
    // optional int32 npcId = 4;
    if (has_npcid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->npcid());
    }
    
  }
  // repeated .DB_Item items = 5;
  total_size += 1 * this->items_size();
  for (int i = 0; i < this->items_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->items(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void DB_NPC::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DB_NPC* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DB_NPC*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DB_NPC::MergeFrom(const DB_NPC& from) {
  GOOGLE_CHECK_NE(&from, this);
  items_.MergeFrom(from.items_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_sku(from.sku());
    }
    if (from._has_bit(1)) {
      set_exp(from.exp());
    }
    if (from._has_bit(2)) {
      set_hqlevel(from.hqlevel());
    }
    if (from._has_bit(3)) {
      set_npcid(from.npcid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DB_NPC::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DB_NPC::CopyFrom(const DB_NPC& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DB_NPC::IsInitialized() const {
  
  return true;
}

void DB_NPC::Swap(DB_NPC* other) {
  if (other != this) {
    std::swap(sku_, other->sku_);
    std::swap(exp_, other->exp_);
    std::swap(hqlevel_, other->hqlevel_);
    std::swap(npcid_, other->npcid_);
    items_.Swap(&other->items_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DB_NPC::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DB_NPC_descriptor_;
  metadata.reflection = DB_NPC_reflection_;
  return metadata;
}


// ===================================================================

const ::std::string DB_SocialItem::_default_sku_;
#ifndef _MSC_VER
const int DB_SocialItem::kSkuFieldNumber;
const int DB_SocialItem::kAmountFieldNumber;
const int DB_SocialItem::kCounterFieldNumber;
const int DB_SocialItem::kTimeLeftFieldNumber;
const int DB_SocialItem::kTimeOverFieldNumber;
#endif  // !_MSC_VER

DB_SocialItem::DB_SocialItem() {
  SharedCtor();
}

void DB_SocialItem::InitAsDefaultInstance() {
}

DB_SocialItem::DB_SocialItem(const DB_SocialItem& from) {
  SharedCtor();
  MergeFrom(from);
}

void DB_SocialItem::SharedCtor() {
  _cached_size_ = 0;
  sku_ = const_cast< ::std::string*>(&_default_sku_);
  amount_ = 0;
  counter_ = 0;
  timeleft_ = GOOGLE_LONGLONG(0);
  timeover_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DB_SocialItem::~DB_SocialItem() {
  SharedDtor();
}

void DB_SocialItem::SharedDtor() {
  if (sku_ != &_default_sku_) {
    delete sku_;
  }
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* DB_SocialItem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DB_SocialItem_descriptor_;
}

const DB_SocialItem& DB_SocialItem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dbinterface_2eproto();  return *default_instance_;
}

DB_SocialItem* DB_SocialItem::default_instance_ = NULL;

DB_SocialItem* DB_SocialItem::New() const {
  return new DB_SocialItem;
}

void DB_SocialItem::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (sku_ != &_default_sku_) {
        sku_->clear();
      }
    }
    amount_ = 0;
    counter_ = 0;
    timeleft_ = GOOGLE_LONGLONG(0);
    timeover_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DB_SocialItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string sku = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadString(
              input, this->mutable_sku()));
        ::google::protobuf::internal::WireFormat::VerifyUTF8String(
          this->sku().data(), this->sku().length(),
          ::google::protobuf::internal::WireFormat::PARSE);
        if (input->ExpectTag(16)) goto parse_amount;
        break;
      }
      
      // optional int32 amount = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_amount:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &amount_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_counter;
        break;
      }
      
      // optional int32 counter = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_counter:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &counter_));
        _set_bit(2);
        if (input->ExpectTag(32)) goto parse_timeLeft;
        break;
      }
      
      // optional int64 timeLeft = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_timeLeft:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt64(
              input, &timeleft_));
        _set_bit(3);
        if (input->ExpectTag(40)) goto parse_timeOver;
        break;
      }
      
      // optional int64 timeOver = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_timeOver:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt64(
              input, &timeover_));
        _set_bit(4);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DB_SocialItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    DB_SocialItem::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional string sku = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->sku().data(), this->sku().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->sku(), output);
  }
  
  // optional int32 amount = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->amount(), output);
  }
  
  // optional int32 counter = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->counter(), output);
  }
  
  // optional int64 timeLeft = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->timeleft(), output);
  }
  
  // optional int64 timeOver = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->timeover(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DB_SocialItem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string sku = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->sku().data(), this->sku().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->sku(), target);
  }
  
  // optional int32 amount = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->amount(), target);
  }
  
  // optional int32 counter = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->counter(), target);
  }
  
  // optional int64 timeLeft = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->timeleft(), target);
  }
  
  // optional int64 timeOver = 5;
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->timeover(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DB_SocialItem::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string sku = 1;
    if (has_sku()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->sku());
    }
    
    // optional int32 amount = 2;
    if (has_amount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->amount());
    }
    
    // optional int32 counter = 3;
    if (has_counter()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->counter());
    }
    
    // optional int64 timeLeft = 4;
    if (has_timeleft()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->timeleft());
    }
    
    // optional int64 timeOver = 5;
    if (has_timeover()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->timeover());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void DB_SocialItem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DB_SocialItem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DB_SocialItem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DB_SocialItem::MergeFrom(const DB_SocialItem& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_sku(from.sku());
    }
    if (from._has_bit(1)) {
      set_amount(from.amount());
    }
    if (from._has_bit(2)) {
      set_counter(from.counter());
    }
    if (from._has_bit(3)) {
      set_timeleft(from.timeleft());
    }
    if (from._has_bit(4)) {
      set_timeover(from.timeover());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DB_SocialItem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DB_SocialItem::CopyFrom(const DB_SocialItem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DB_SocialItem::IsInitialized() const {
  
  return true;
}

void DB_SocialItem::Swap(DB_SocialItem* other) {
  if (other != this) {
    std::swap(sku_, other->sku_);
    std::swap(amount_, other->amount_);
    std::swap(counter_, other->counter_);
    std::swap(timeleft_, other->timeleft_);
    std::swap(timeover_, other->timeover_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DB_SocialItem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DB_SocialItem_descriptor_;
  metadata.reflection = DB_SocialItem_reflection_;
  return metadata;
}


// ===================================================================

const ::std::string DB_MissionParam::_default_target_;
const ::std::string DB_MissionParam::_default_sku_;
const ::std::string DB_MissionParam::_default_progress_;
#ifndef _MSC_VER
const int DB_MissionParam::kTargetFieldNumber;
const int DB_MissionParam::kEndTimeFieldNumber;
const int DB_MissionParam::kSkuFieldNumber;
const int DB_MissionParam::kProgressFieldNumber;
const int DB_MissionParam::kStateFieldNumber;
#endif  // !_MSC_VER

DB_MissionParam::DB_MissionParam() {
  SharedCtor();
}

void DB_MissionParam::InitAsDefaultInstance() {
}

DB_MissionParam::DB_MissionParam(const DB_MissionParam& from) {
  SharedCtor();
  MergeFrom(from);
}

void DB_MissionParam::SharedCtor() {
  _cached_size_ = 0;
  target_ = const_cast< ::std::string*>(&_default_target_);
  endtime_ = 0;
  sku_ = const_cast< ::std::string*>(&_default_sku_);
  progress_ = const_cast< ::std::string*>(&_default_progress_);
  state_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DB_MissionParam::~DB_MissionParam() {
  SharedDtor();
}

void DB_MissionParam::SharedDtor() {
  if (target_ != &_default_target_) {
    delete target_;
  }
  if (sku_ != &_default_sku_) {
    delete sku_;
  }
  if (progress_ != &_default_progress_) {
    delete progress_;
  }
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* DB_MissionParam::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DB_MissionParam_descriptor_;
}

const DB_MissionParam& DB_MissionParam::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dbinterface_2eproto();  return *default_instance_;
}

DB_MissionParam* DB_MissionParam::default_instance_ = NULL;

DB_MissionParam* DB_MissionParam::New() const {
  return new DB_MissionParam;
}

void DB_MissionParam::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (target_ != &_default_target_) {
        target_->clear();
      }
    }
    endtime_ = 0;
    if (_has_bit(2)) {
      if (sku_ != &_default_sku_) {
        sku_->clear();
      }
    }
    if (_has_bit(3)) {
      if (progress_ != &_default_progress_) {
        progress_->clear();
      }
    }
    state_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DB_MissionParam::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string Target = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadString(
              input, this->mutable_target()));
        ::google::protobuf::internal::WireFormat::VerifyUTF8String(
          this->target().data(), this->target().length(),
          ::google::protobuf::internal::WireFormat::PARSE);
        if (input->ExpectTag(16)) goto parse_endTime;
        break;
      }
      
      // optional int32 endTime = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_endTime:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &endtime_));
        _set_bit(1);
        if (input->ExpectTag(26)) goto parse_sku;
        break;
      }
      
      // optional string sku = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_sku:
        DO_(::google::protobuf::internal::WireFormatLite::ReadString(
              input, this->mutable_sku()));
        ::google::protobuf::internal::WireFormat::VerifyUTF8String(
          this->sku().data(), this->sku().length(),
          ::google::protobuf::internal::WireFormat::PARSE);
        if (input->ExpectTag(34)) goto parse_progress;
        break;
      }
      
      // optional string progress = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_progress:
        DO_(::google::protobuf::internal::WireFormatLite::ReadString(
              input, this->mutable_progress()));
        ::google::protobuf::internal::WireFormat::VerifyUTF8String(
          this->progress().data(), this->progress().length(),
          ::google::protobuf::internal::WireFormat::PARSE);
        if (input->ExpectTag(40)) goto parse_state;
        break;
      }
      
      // optional int32 state = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_state:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &state_));
        _set_bit(4);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DB_MissionParam::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    DB_MissionParam::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional string Target = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->target().data(), this->target().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->target(), output);
  }
  
  // optional int32 endTime = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->endtime(), output);
  }
  
  // optional string sku = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->sku().data(), this->sku().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->sku(), output);
  }
  
  // optional string progress = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->progress().data(), this->progress().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->progress(), output);
  }
  
  // optional int32 state = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->state(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DB_MissionParam::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string Target = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->target().data(), this->target().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->target(), target);
  }
  
  // optional int32 endTime = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->endtime(), target);
  }
  
  // optional string sku = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->sku().data(), this->sku().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->sku(), target);
  }
  
  // optional string progress = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->progress().data(), this->progress().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->progress(), target);
  }
  
  // optional int32 state = 5;
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->state(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DB_MissionParam::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string Target = 1;
    if (has_target()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->target());
    }
    
    // optional int32 endTime = 2;
    if (has_endtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->endtime());
    }
    
    // optional string sku = 3;
    if (has_sku()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->sku());
    }
    
    // optional string progress = 4;
    if (has_progress()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->progress());
    }
    
    // optional int32 state = 5;
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->state());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void DB_MissionParam::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DB_MissionParam* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DB_MissionParam*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DB_MissionParam::MergeFrom(const DB_MissionParam& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_target(from.target());
    }
    if (from._has_bit(1)) {
      set_endtime(from.endtime());
    }
    if (from._has_bit(2)) {
      set_sku(from.sku());
    }
    if (from._has_bit(3)) {
      set_progress(from.progress());
    }
    if (from._has_bit(4)) {
      set_state(from.state());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DB_MissionParam::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DB_MissionParam::CopyFrom(const DB_MissionParam& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DB_MissionParam::IsInitialized() const {
  
  return true;
}

void DB_MissionParam::Swap(DB_MissionParam* other) {
  if (other != this) {
    std::swap(target_, other->target_);
    std::swap(endtime_, other->endtime_);
    std::swap(sku_, other->sku_);
    std::swap(progress_, other->progress_);
    std::swap(state_, other->state_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DB_MissionParam::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DB_MissionParam_descriptor_;
  metadata.reflection = DB_MissionParam_reflection_;
  return metadata;
}


// ===================================================================

const ::std::string DB_Mission::_default_readytostart_;
const ::std::string DB_Mission::_default_available_;
const ::std::string DB_Mission::_default_rewarded_;
const ::std::string DB_Mission::_default_completed_;
#ifndef _MSC_VER
const int DB_Mission::kReadyToStartFieldNumber;
const int DB_Mission::kAvailableFieldNumber;
const int DB_Mission::kRewardedFieldNumber;
const int DB_Mission::kCompletedFieldNumber;
const int DB_Mission::kParamsFieldNumber;
#endif  // !_MSC_VER

DB_Mission::DB_Mission() {
  SharedCtor();
}

void DB_Mission::InitAsDefaultInstance() {
}

DB_Mission::DB_Mission(const DB_Mission& from) {
  SharedCtor();
  MergeFrom(from);
}

void DB_Mission::SharedCtor() {
  _cached_size_ = 0;
  readytostart_ = const_cast< ::std::string*>(&_default_readytostart_);
  available_ = const_cast< ::std::string*>(&_default_available_);
  rewarded_ = const_cast< ::std::string*>(&_default_rewarded_);
  completed_ = const_cast< ::std::string*>(&_default_completed_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DB_Mission::~DB_Mission() {
  SharedDtor();
}

void DB_Mission::SharedDtor() {
  if (readytostart_ != &_default_readytostart_) {
    delete readytostart_;
  }
  if (available_ != &_default_available_) {
    delete available_;
  }
  if (rewarded_ != &_default_rewarded_) {
    delete rewarded_;
  }
  if (completed_ != &_default_completed_) {
    delete completed_;
  }
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* DB_Mission::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DB_Mission_descriptor_;
}

const DB_Mission& DB_Mission::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dbinterface_2eproto();  return *default_instance_;
}

DB_Mission* DB_Mission::default_instance_ = NULL;

DB_Mission* DB_Mission::New() const {
  return new DB_Mission;
}

void DB_Mission::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (readytostart_ != &_default_readytostart_) {
        readytostart_->clear();
      }
    }
    if (_has_bit(1)) {
      if (available_ != &_default_available_) {
        available_->clear();
      }
    }
    if (_has_bit(2)) {
      if (rewarded_ != &_default_rewarded_) {
        rewarded_->clear();
      }
    }
    if (_has_bit(3)) {
      if (completed_ != &_default_completed_) {
        completed_->clear();
      }
    }
  }
  params_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DB_Mission::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string ReadyToStart = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadString(
              input, this->mutable_readytostart()));
        ::google::protobuf::internal::WireFormat::VerifyUTF8String(
          this->readytostart().data(), this->readytostart().length(),
          ::google::protobuf::internal::WireFormat::PARSE);
        if (input->ExpectTag(18)) goto parse_Available;
        break;
      }
      
      // optional string Available = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_Available:
        DO_(::google::protobuf::internal::WireFormatLite::ReadString(
              input, this->mutable_available()));
        ::google::protobuf::internal::WireFormat::VerifyUTF8String(
          this->available().data(), this->available().length(),
          ::google::protobuf::internal::WireFormat::PARSE);
        if (input->ExpectTag(26)) goto parse_Rewarded;
        break;
      }
      
      // optional string Rewarded = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_Rewarded:
        DO_(::google::protobuf::internal::WireFormatLite::ReadString(
              input, this->mutable_rewarded()));
        ::google::protobuf::internal::WireFormat::VerifyUTF8String(
          this->rewarded().data(), this->rewarded().length(),
          ::google::protobuf::internal::WireFormat::PARSE);
        if (input->ExpectTag(34)) goto parse_Completed;
        break;
      }
      
      // optional string Completed = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_Completed:
        DO_(::google::protobuf::internal::WireFormatLite::ReadString(
              input, this->mutable_completed()));
        ::google::protobuf::internal::WireFormat::VerifyUTF8String(
          this->completed().data(), this->completed().length(),
          ::google::protobuf::internal::WireFormat::PARSE);
        if (input->ExpectTag(42)) goto parse_Params;
        break;
      }
      
      // repeated .DB_MissionParam Params = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_Params:
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, add_params()));
        if (input->ExpectTag(42)) goto parse_Params;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DB_Mission::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    DB_Mission::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional string ReadyToStart = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->readytostart().data(), this->readytostart().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->readytostart(), output);
  }
  
  // optional string Available = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->available().data(), this->available().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->available(), output);
  }
  
  // optional string Rewarded = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->rewarded().data(), this->rewarded().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->rewarded(), output);
  }
  
  // optional string Completed = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->completed().data(), this->completed().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->completed(), output);
  }
  
  // repeated .DB_MissionParam Params = 5;
  for (int i = 0; i < this->params_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      5, this->params(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DB_Mission::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string ReadyToStart = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->readytostart().data(), this->readytostart().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->readytostart(), target);
  }
  
  // optional string Available = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->available().data(), this->available().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->available(), target);
  }
  
  // optional string Rewarded = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->rewarded().data(), this->rewarded().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->rewarded(), target);
  }
  
  // optional string Completed = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->completed().data(), this->completed().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->completed(), target);
  }
  
  // repeated .DB_MissionParam Params = 5;
  for (int i = 0; i < this->params_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->params(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DB_Mission::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string ReadyToStart = 1;
    if (has_readytostart()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->readytostart());
    }
    
    // optional string Available = 2;
    if (has_available()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->available());
    }
    
    // optional string Rewarded = 3;
    if (has_rewarded()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->rewarded());
    }
    
    // optional string Completed = 4;
    if (has_completed()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->completed());
    }
    
  }
  // repeated .DB_MissionParam Params = 5;
  total_size += 1 * this->params_size();
  for (int i = 0; i < this->params_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->params(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void DB_Mission::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DB_Mission* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DB_Mission*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DB_Mission::MergeFrom(const DB_Mission& from) {
  GOOGLE_CHECK_NE(&from, this);
  params_.MergeFrom(from.params_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_readytostart(from.readytostart());
    }
    if (from._has_bit(1)) {
      set_available(from.available());
    }
    if (from._has_bit(2)) {
      set_rewarded(from.rewarded());
    }
    if (from._has_bit(3)) {
      set_completed(from.completed());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DB_Mission::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DB_Mission::CopyFrom(const DB_Mission& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DB_Mission::IsInitialized() const {
  
  return true;
}

void DB_Mission::Swap(DB_Mission* other) {
  if (other != this) {
    std::swap(readytostart_, other->readytostart_);
    std::swap(available_, other->available_);
    std::swap(rewarded_, other->rewarded_);
    std::swap(completed_, other->completed_);
    params_.Swap(&other->params_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DB_Mission::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DB_Mission_descriptor_;
  metadata.reflection = DB_Mission_reflection_;
  return metadata;
}


// ===================================================================

const ::std::string DB_WishItem::_default_sku_;
#ifndef _MSC_VER
const int DB_WishItem::kSkuFieldNumber;
#endif  // !_MSC_VER

DB_WishItem::DB_WishItem() {
  SharedCtor();
}

void DB_WishItem::InitAsDefaultInstance() {
}

DB_WishItem::DB_WishItem(const DB_WishItem& from) {
  SharedCtor();
  MergeFrom(from);
}

void DB_WishItem::SharedCtor() {
  _cached_size_ = 0;
  sku_ = const_cast< ::std::string*>(&_default_sku_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DB_WishItem::~DB_WishItem() {
  SharedDtor();
}

void DB_WishItem::SharedDtor() {
  if (sku_ != &_default_sku_) {
    delete sku_;
  }
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* DB_WishItem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DB_WishItem_descriptor_;
}

const DB_WishItem& DB_WishItem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dbinterface_2eproto();  return *default_instance_;
}

DB_WishItem* DB_WishItem::default_instance_ = NULL;

DB_WishItem* DB_WishItem::New() const {
  return new DB_WishItem;
}

void DB_WishItem::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (sku_ != &_default_sku_) {
        sku_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DB_WishItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string sku = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadString(
              input, this->mutable_sku()));
        ::google::protobuf::internal::WireFormat::VerifyUTF8String(
          this->sku().data(), this->sku().length(),
          ::google::protobuf::internal::WireFormat::PARSE);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DB_WishItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    DB_WishItem::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional string sku = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->sku().data(), this->sku().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->sku(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DB_WishItem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string sku = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->sku().data(), this->sku().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->sku(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DB_WishItem::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string sku = 1;
    if (has_sku()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->sku());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void DB_WishItem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DB_WishItem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DB_WishItem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DB_WishItem::MergeFrom(const DB_WishItem& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_sku(from.sku());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DB_WishItem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DB_WishItem::CopyFrom(const DB_WishItem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DB_WishItem::IsInitialized() const {
  
  return true;
}

void DB_WishItem::Swap(DB_WishItem* other) {
  if (other != this) {
    std::swap(sku_, other->sku_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DB_WishItem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DB_WishItem_descriptor_;
  metadata.reflection = DB_WishItem_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DB_WishItemList::kWishItemFieldNumber;
#endif  // !_MSC_VER

DB_WishItemList::DB_WishItemList() {
  SharedCtor();
}

void DB_WishItemList::InitAsDefaultInstance() {
}

DB_WishItemList::DB_WishItemList(const DB_WishItemList& from) {
  SharedCtor();
  MergeFrom(from);
}

void DB_WishItemList::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DB_WishItemList::~DB_WishItemList() {
  SharedDtor();
}

void DB_WishItemList::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* DB_WishItemList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DB_WishItemList_descriptor_;
}

const DB_WishItemList& DB_WishItemList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dbinterface_2eproto();  return *default_instance_;
}

DB_WishItemList* DB_WishItemList::default_instance_ = NULL;

DB_WishItemList* DB_WishItemList::New() const {
  return new DB_WishItemList;
}

void DB_WishItemList::Clear() {
  wishitem_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DB_WishItemList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .DB_WishItem wishItem = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_wishItem:
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, add_wishitem()));
        if (input->ExpectTag(10)) goto parse_wishItem;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DB_WishItemList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    DB_WishItemList::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // repeated .DB_WishItem wishItem = 1;
  for (int i = 0; i < this->wishitem_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      1, this->wishitem(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DB_WishItemList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .DB_WishItem wishItem = 1;
  for (int i = 0; i < this->wishitem_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->wishitem(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DB_WishItemList::ByteSize() const {
  int total_size = 0;
  
  // repeated .DB_WishItem wishItem = 1;
  total_size += 1 * this->wishitem_size();
  for (int i = 0; i < this->wishitem_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->wishitem(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void DB_WishItemList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DB_WishItemList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DB_WishItemList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DB_WishItemList::MergeFrom(const DB_WishItemList& from) {
  GOOGLE_CHECK_NE(&from, this);
  wishitem_.MergeFrom(from.wishitem_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DB_WishItemList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DB_WishItemList::CopyFrom(const DB_WishItemList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DB_WishItemList::IsInitialized() const {
  
  return true;
}

void DB_WishItemList::Swap(DB_WishItemList* other) {
  if (other != this) {
    wishitem_.Swap(&other->wishitem_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DB_WishItemList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DB_WishItemList_descriptor_;
  metadata.reflection = DB_WishItemList_reflection_;
  return metadata;
}


// ===================================================================

const ::std::string DB_StarsBookmark::_default_sku_;
#ifndef _MSC_VER
const int DB_StarsBookmark::kStarNameFieldNumber;
const int DB_StarsBookmark::kSkuFieldNumber;
const int DB_StarsBookmark::kStarTypeFieldNumber;
const int DB_StarsBookmark::kStarIdFieldNumber;
#endif  // !_MSC_VER

DB_StarsBookmark::DB_StarsBookmark() {
  SharedCtor();
}

void DB_StarsBookmark::InitAsDefaultInstance() {
}

DB_StarsBookmark::DB_StarsBookmark(const DB_StarsBookmark& from) {
  SharedCtor();
  MergeFrom(from);
}

void DB_StarsBookmark::SharedCtor() {
  _cached_size_ = 0;
  starname_ = 0;
  sku_ = const_cast< ::std::string*>(&_default_sku_);
  startype_ = 0;
  starid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DB_StarsBookmark::~DB_StarsBookmark() {
  SharedDtor();
}

void DB_StarsBookmark::SharedDtor() {
  if (sku_ != &_default_sku_) {
    delete sku_;
  }
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* DB_StarsBookmark::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DB_StarsBookmark_descriptor_;
}

const DB_StarsBookmark& DB_StarsBookmark::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dbinterface_2eproto();  return *default_instance_;
}

DB_StarsBookmark* DB_StarsBookmark::default_instance_ = NULL;

DB_StarsBookmark* DB_StarsBookmark::New() const {
  return new DB_StarsBookmark;
}

void DB_StarsBookmark::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    starname_ = 0;
    if (_has_bit(1)) {
      if (sku_ != &_default_sku_) {
        sku_->clear();
      }
    }
    startype_ = 0;
    starid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DB_StarsBookmark::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 starName = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &starname_));
        _set_bit(0);
        if (input->ExpectTag(18)) goto parse_sku;
        break;
      }
      
      // optional string sku = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_sku:
        DO_(::google::protobuf::internal::WireFormatLite::ReadString(
              input, this->mutable_sku()));
        ::google::protobuf::internal::WireFormat::VerifyUTF8String(
          this->sku().data(), this->sku().length(),
          ::google::protobuf::internal::WireFormat::PARSE);
        if (input->ExpectTag(24)) goto parse_starType;
        break;
      }
      
      // optional int32 starType = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_starType:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &startype_));
        _set_bit(2);
        if (input->ExpectTag(32)) goto parse_starId;
        break;
      }
      
      // optional int32 starId = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_starId:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &starid_));
        _set_bit(3);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DB_StarsBookmark::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    DB_StarsBookmark::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional int32 starName = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->starname(), output);
  }
  
  // optional string sku = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->sku().data(), this->sku().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->sku(), output);
  }
  
  // optional int32 starType = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->startype(), output);
  }
  
  // optional int32 starId = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->starid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DB_StarsBookmark::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 starName = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->starname(), target);
  }
  
  // optional string sku = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->sku().data(), this->sku().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->sku(), target);
  }
  
  // optional int32 starType = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->startype(), target);
  }
  
  // optional int32 starId = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->starid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DB_StarsBookmark::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 starName = 1;
    if (has_starname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->starname());
    }
    
    // optional string sku = 2;
    if (has_sku()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->sku());
    }
    
    // optional int32 starType = 3;
    if (has_startype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->startype());
    }
    
    // optional int32 starId = 4;
    if (has_starid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->starid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void DB_StarsBookmark::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DB_StarsBookmark* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DB_StarsBookmark*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DB_StarsBookmark::MergeFrom(const DB_StarsBookmark& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_starname(from.starname());
    }
    if (from._has_bit(1)) {
      set_sku(from.sku());
    }
    if (from._has_bit(2)) {
      set_startype(from.startype());
    }
    if (from._has_bit(3)) {
      set_starid(from.starid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DB_StarsBookmark::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DB_StarsBookmark::CopyFrom(const DB_StarsBookmark& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DB_StarsBookmark::IsInitialized() const {
  
  return true;
}

void DB_StarsBookmark::Swap(DB_StarsBookmark* other) {
  if (other != this) {
    std::swap(starname_, other->starname_);
    std::swap(sku_, other->sku_);
    std::swap(startype_, other->startype_);
    std::swap(starid_, other->starid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DB_StarsBookmark::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DB_StarsBookmark_descriptor_;
  metadata.reflection = DB_StarsBookmark_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DB_Player::kModelFieldNumber;
const int DB_Player::kStateFieldNumber;
const int DB_Player::kPlanetsFieldNumber;
const int DB_Player::kNpcsFieldNumber;
const int DB_Player::kFlagFieldNumber;
const int DB_Player::kSocialItemsFieldNumber;
const int DB_Player::kMissionsFieldNumber;
const int DB_Player::kWishItemListFieldNumber;
const int DB_Player::kBookmarksFieldNumber;
const int DB_Player::kBattleReplayFieldNumber;
const int DB_Player::kPveFieldNumber;
#endif  // !_MSC_VER

DB_Player::DB_Player() {
  SharedCtor();
}

void DB_Player::InitAsDefaultInstance() {
  model_ = const_cast< ::DB_Model*>(&::DB_Model::default_instance());
  state_ = const_cast< ::DB_State*>(&::DB_State::default_instance());
  flag_ = const_cast< ::DB_Flag*>(&::DB_Flag::default_instance());
  missions_ = const_cast< ::DB_Mission*>(&::DB_Mission::default_instance());
  wishitemlist_ = const_cast< ::DB_WishItemList*>(&::DB_WishItemList::default_instance());
}

DB_Player::DB_Player(const DB_Player& from) {
  SharedCtor();
  MergeFrom(from);
}

void DB_Player::SharedCtor() {
  _cached_size_ = 0;
  model_ = NULL;
  state_ = NULL;
  flag_ = NULL;
  missions_ = NULL;
  wishitemlist_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DB_Player::~DB_Player() {
  SharedDtor();
}

void DB_Player::SharedDtor() {
  if (this != default_instance_) {
    delete model_;
    delete state_;
    delete flag_;
    delete missions_;
    delete wishitemlist_;
  }
}

const ::google::protobuf::Descriptor* DB_Player::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DB_Player_descriptor_;
}

const DB_Player& DB_Player::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dbinterface_2eproto();  return *default_instance_;
}

DB_Player* DB_Player::default_instance_ = NULL;

DB_Player* DB_Player::New() const {
  return new DB_Player;
}

void DB_Player::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (model_ != NULL) model_->::DB_Model::Clear();
    }
    if (_has_bit(1)) {
      if (state_ != NULL) state_->::DB_State::Clear();
    }
    if (_has_bit(4)) {
      if (flag_ != NULL) flag_->::DB_Flag::Clear();
    }
    if (_has_bit(6)) {
      if (missions_ != NULL) missions_->::DB_Mission::Clear();
    }
    if (_has_bit(7)) {
      if (wishitemlist_ != NULL) wishitemlist_->::DB_WishItemList::Clear();
    }
  }
  planets_.Clear();
  npcs_.Clear();
  socialitems_.Clear();
  bookmarks_.Clear();
  battlereplay_.Clear();
  pve_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DB_Player::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .DB_Model model = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
             input, mutable_model()));
        if (input->ExpectTag(18)) goto parse_state;
        break;
      }
      
      // optional .DB_State state = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_state:
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
             input, mutable_state()));
        if (input->ExpectTag(26)) goto parse_planets;
        break;
      }
      
      // repeated .DB_Planet planets = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_planets:
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, add_planets()));
        if (input->ExpectTag(26)) goto parse_planets;
        if (input->ExpectTag(34)) goto parse_npcs;
        break;
      }
      
      // repeated .DB_NPC npcs = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_npcs:
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, add_npcs()));
        if (input->ExpectTag(34)) goto parse_npcs;
        if (input->ExpectTag(42)) goto parse_flag;
        break;
      }
      
      // optional .DB_Flag flag = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_flag:
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
             input, mutable_flag()));
        if (input->ExpectTag(50)) goto parse_socialItems;
        break;
      }
      
      // repeated .DB_SocialItem socialItems = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_socialItems:
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, add_socialitems()));
        if (input->ExpectTag(50)) goto parse_socialItems;
        if (input->ExpectTag(58)) goto parse_missions;
        break;
      }
      
      // optional .DB_Mission missions = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_missions:
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
             input, mutable_missions()));
        if (input->ExpectTag(66)) goto parse_wishItemList;
        break;
      }
      
      // optional .DB_WishItemList wishItemList = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_wishItemList:
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
             input, mutable_wishitemlist()));
        if (input->ExpectTag(74)) goto parse_bookmarks;
        break;
      }
      
      // repeated .DB_StarsBookmark bookmarks = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_bookmarks:
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, add_bookmarks()));
        if (input->ExpectTag(74)) goto parse_bookmarks;
        if (input->ExpectTag(82)) goto parse_battleReplay;
        break;
      }
      
      // repeated .DB_BattleReplay battleReplay = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_battleReplay:
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, add_battlereplay()));
        if (input->ExpectTag(82)) goto parse_battleReplay;
        if (input->ExpectTag(90)) goto parse_pve;
        break;
      }
      
      // repeated .DB_KeyValue pve = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_pve:
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, add_pve()));
        if (input->ExpectTag(90)) goto parse_pve;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DB_Player::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    DB_Player::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional .DB_Model model = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      1, this->model(), output);
  }
  
  // optional .DB_State state = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      2, this->state(), output);
  }
  
  // repeated .DB_Planet planets = 3;
  for (int i = 0; i < this->planets_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      3, this->planets(i), output);
  }
  
  // repeated .DB_NPC npcs = 4;
  for (int i = 0; i < this->npcs_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      4, this->npcs(i), output);
  }
  
  // optional .DB_Flag flag = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      5, this->flag(), output);
  }
  
  // repeated .DB_SocialItem socialItems = 6;
  for (int i = 0; i < this->socialitems_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      6, this->socialitems(i), output);
  }
  
  // optional .DB_Mission missions = 7;
  if (_has_bit(6)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      7, this->missions(), output);
  }
  
  // optional .DB_WishItemList wishItemList = 8;
  if (_has_bit(7)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      8, this->wishitemlist(), output);
  }
  
  // repeated .DB_StarsBookmark bookmarks = 9;
  for (int i = 0; i < this->bookmarks_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      9, this->bookmarks(i), output);
  }
  
  // repeated .DB_BattleReplay battleReplay = 10;
  for (int i = 0; i < this->battlereplay_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      10, this->battlereplay(i), output);
  }
  
  // repeated .DB_KeyValue pve = 11;
  for (int i = 0; i < this->pve_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      11, this->pve(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DB_Player::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .DB_Model model = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->model(), target);
  }
  
  // optional .DB_State state = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->state(), target);
  }
  
  // repeated .DB_Planet planets = 3;
  for (int i = 0; i < this->planets_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->planets(i), target);
  }
  
  // repeated .DB_NPC npcs = 4;
  for (int i = 0; i < this->npcs_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->npcs(i), target);
  }
  
  // optional .DB_Flag flag = 5;
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->flag(), target);
  }
  
  // repeated .DB_SocialItem socialItems = 6;
  for (int i = 0; i < this->socialitems_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->socialitems(i), target);
  }
  
  // optional .DB_Mission missions = 7;
  if (_has_bit(6)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->missions(), target);
  }
  
  // optional .DB_WishItemList wishItemList = 8;
  if (_has_bit(7)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->wishitemlist(), target);
  }
  
  // repeated .DB_StarsBookmark bookmarks = 9;
  for (int i = 0; i < this->bookmarks_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->bookmarks(i), target);
  }
  
  // repeated .DB_BattleReplay battleReplay = 10;
  for (int i = 0; i < this->battlereplay_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->battlereplay(i), target);
  }
  
  // repeated .DB_KeyValue pve = 11;
  for (int i = 0; i < this->pve_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        11, this->pve(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DB_Player::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .DB_Model model = 1;
    if (has_model()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->model());
    }
    
    // optional .DB_State state = 2;
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->state());
    }
    
    // optional .DB_Flag flag = 5;
    if (has_flag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->flag());
    }
    
    // optional .DB_Mission missions = 7;
    if (has_missions()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->missions());
    }
    
    // optional .DB_WishItemList wishItemList = 8;
    if (has_wishitemlist()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->wishitemlist());
    }
    
  }
  // repeated .DB_Planet planets = 3;
  total_size += 1 * this->planets_size();
  for (int i = 0; i < this->planets_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->planets(i));
  }
  
  // repeated .DB_NPC npcs = 4;
  total_size += 1 * this->npcs_size();
  for (int i = 0; i < this->npcs_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->npcs(i));
  }
  
  // repeated .DB_SocialItem socialItems = 6;
  total_size += 1 * this->socialitems_size();
  for (int i = 0; i < this->socialitems_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->socialitems(i));
  }
  
  // repeated .DB_StarsBookmark bookmarks = 9;
  total_size += 1 * this->bookmarks_size();
  for (int i = 0; i < this->bookmarks_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->bookmarks(i));
  }
  
  // repeated .DB_BattleReplay battleReplay = 10;
  total_size += 1 * this->battlereplay_size();
  for (int i = 0; i < this->battlereplay_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->battlereplay(i));
  }
  
  // repeated .DB_KeyValue pve = 11;
  total_size += 1 * this->pve_size();
  for (int i = 0; i < this->pve_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->pve(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void DB_Player::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DB_Player* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DB_Player*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DB_Player::MergeFrom(const DB_Player& from) {
  GOOGLE_CHECK_NE(&from, this);
  planets_.MergeFrom(from.planets_);
  npcs_.MergeFrom(from.npcs_);
  socialitems_.MergeFrom(from.socialitems_);
  bookmarks_.MergeFrom(from.bookmarks_);
  battlereplay_.MergeFrom(from.battlereplay_);
  pve_.MergeFrom(from.pve_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      mutable_model()->::DB_Model::MergeFrom(from.model());
    }
    if (from._has_bit(1)) {
      mutable_state()->::DB_State::MergeFrom(from.state());
    }
    if (from._has_bit(4)) {
      mutable_flag()->::DB_Flag::MergeFrom(from.flag());
    }
    if (from._has_bit(6)) {
      mutable_missions()->::DB_Mission::MergeFrom(from.missions());
    }
    if (from._has_bit(7)) {
      mutable_wishitemlist()->::DB_WishItemList::MergeFrom(from.wishitemlist());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DB_Player::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DB_Player::CopyFrom(const DB_Player& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DB_Player::IsInitialized() const {
  
  return true;
}

void DB_Player::Swap(DB_Player* other) {
  if (other != this) {
    std::swap(model_, other->model_);
    std::swap(state_, other->state_);
    planets_.Swap(&other->planets_);
    npcs_.Swap(&other->npcs_);
    std::swap(flag_, other->flag_);
    socialitems_.Swap(&other->socialitems_);
    std::swap(missions_, other->missions_);
    std::swap(wishitemlist_, other->wishitemlist_);
    bookmarks_.Swap(&other->bookmarks_);
    battlereplay_.Swap(&other->battlereplay_);
    pve_.Swap(&other->pve_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DB_Player::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DB_Player_descriptor_;
  metadata.reflection = DB_Player_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DB_DailyLogon::kFirstdayFieldNumber;
const int DB_DailyLogon::kDaycountFieldNumber;
#endif  // !_MSC_VER

DB_DailyLogon::DB_DailyLogon() {
  SharedCtor();
}

void DB_DailyLogon::InitAsDefaultInstance() {
}

DB_DailyLogon::DB_DailyLogon(const DB_DailyLogon& from) {
  SharedCtor();
  MergeFrom(from);
}

void DB_DailyLogon::SharedCtor() {
  _cached_size_ = 0;
  firstday_ = 0;
  daycount_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DB_DailyLogon::~DB_DailyLogon() {
  SharedDtor();
}

void DB_DailyLogon::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* DB_DailyLogon::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DB_DailyLogon_descriptor_;
}

const DB_DailyLogon& DB_DailyLogon::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dbinterface_2eproto();  return *default_instance_;
}

DB_DailyLogon* DB_DailyLogon::default_instance_ = NULL;

DB_DailyLogon* DB_DailyLogon::New() const {
  return new DB_DailyLogon;
}

void DB_DailyLogon::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    firstday_ = 0;
    daycount_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DB_DailyLogon::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 firstday = 1 [default = 0];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &firstday_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_daycount;
        break;
      }
      
      // optional int32 daycount = 2 [default = 0];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_daycount:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &daycount_));
        _set_bit(1);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DB_DailyLogon::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    DB_DailyLogon::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional int32 firstday = 1 [default = 0];
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->firstday(), output);
  }
  
  // optional int32 daycount = 2 [default = 0];
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->daycount(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DB_DailyLogon::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 firstday = 1 [default = 0];
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->firstday(), target);
  }
  
  // optional int32 daycount = 2 [default = 0];
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->daycount(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DB_DailyLogon::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 firstday = 1 [default = 0];
    if (has_firstday()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->firstday());
    }
    
    // optional int32 daycount = 2 [default = 0];
    if (has_daycount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->daycount());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void DB_DailyLogon::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DB_DailyLogon* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DB_DailyLogon*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DB_DailyLogon::MergeFrom(const DB_DailyLogon& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_firstday(from.firstday());
    }
    if (from._has_bit(1)) {
      set_daycount(from.daycount());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DB_DailyLogon::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DB_DailyLogon::CopyFrom(const DB_DailyLogon& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DB_DailyLogon::IsInitialized() const {
  
  return true;
}

void DB_DailyLogon::Swap(DB_DailyLogon* other) {
  if (other != this) {
    std::swap(firstday_, other->firstday_);
    std::swap(daycount_, other->daycount_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DB_DailyLogon::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DB_DailyLogon_descriptor_;
  metadata.reflection = DB_DailyLogon_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DB_ActiveContinueLogon::kLogonDaysFieldNumber;
const int DB_ActiveContinueLogon::kHasGetFieldNumber;
const int DB_ActiveContinueLogon::kLastLogonTimeFieldNumber;
#endif  // !_MSC_VER

DB_ActiveContinueLogon::DB_ActiveContinueLogon() {
  SharedCtor();
}

void DB_ActiveContinueLogon::InitAsDefaultInstance() {
}

DB_ActiveContinueLogon::DB_ActiveContinueLogon(const DB_ActiveContinueLogon& from) {
  SharedCtor();
  MergeFrom(from);
}

void DB_ActiveContinueLogon::SharedCtor() {
  _cached_size_ = 0;
  logondays_ = 0;
  hasget_ = false;
  lastlogontime_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DB_ActiveContinueLogon::~DB_ActiveContinueLogon() {
  SharedDtor();
}

void DB_ActiveContinueLogon::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* DB_ActiveContinueLogon::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DB_ActiveContinueLogon_descriptor_;
}

const DB_ActiveContinueLogon& DB_ActiveContinueLogon::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dbinterface_2eproto();  return *default_instance_;
}

DB_ActiveContinueLogon* DB_ActiveContinueLogon::default_instance_ = NULL;

DB_ActiveContinueLogon* DB_ActiveContinueLogon::New() const {
  return new DB_ActiveContinueLogon;
}

void DB_ActiveContinueLogon::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    logondays_ = 0;
    hasget_ = false;
    lastlogontime_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DB_ActiveContinueLogon::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 logonDays = 1 [default = 0];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &logondays_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_hasGet;
        break;
      }
      
      // optional bool hasGet = 2 [default = false];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_hasGet:
        DO_(::google::protobuf::internal::WireFormatLite::ReadBool(
              input, &hasget_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_lastLogonTime;
        break;
      }
      
      // optional int32 lastLogonTime = 3 [default = 0];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_lastLogonTime:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &lastlogontime_));
        _set_bit(2);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DB_ActiveContinueLogon::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    DB_ActiveContinueLogon::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional int32 logonDays = 1 [default = 0];
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->logondays(), output);
  }
  
  // optional bool hasGet = 2 [default = false];
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->hasget(), output);
  }
  
  // optional int32 lastLogonTime = 3 [default = 0];
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->lastlogontime(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DB_ActiveContinueLogon::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 logonDays = 1 [default = 0];
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->logondays(), target);
  }
  
  // optional bool hasGet = 2 [default = false];
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->hasget(), target);
  }
  
  // optional int32 lastLogonTime = 3 [default = 0];
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->lastlogontime(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DB_ActiveContinueLogon::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 logonDays = 1 [default = 0];
    if (has_logondays()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->logondays());
    }
    
    // optional bool hasGet = 2 [default = false];
    if (has_hasget()) {
      total_size += 1 + 1;
    }
    
    // optional int32 lastLogonTime = 3 [default = 0];
    if (has_lastlogontime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->lastlogontime());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void DB_ActiveContinueLogon::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DB_ActiveContinueLogon* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DB_ActiveContinueLogon*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DB_ActiveContinueLogon::MergeFrom(const DB_ActiveContinueLogon& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_logondays(from.logondays());
    }
    if (from._has_bit(1)) {
      set_hasget(from.hasget());
    }
    if (from._has_bit(2)) {
      set_lastlogontime(from.lastlogontime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DB_ActiveContinueLogon::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DB_ActiveContinueLogon::CopyFrom(const DB_ActiveContinueLogon& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DB_ActiveContinueLogon::IsInitialized() const {
  
  return true;
}

void DB_ActiveContinueLogon::Swap(DB_ActiveContinueLogon* other) {
  if (other != this) {
    std::swap(logondays_, other->logondays_);
    std::swap(hasget_, other->hasget_);
    std::swap(lastlogontime_, other->lastlogontime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DB_ActiveContinueLogon::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DB_ActiveContinueLogon_descriptor_;
  metadata.reflection = DB_ActiveContinueLogon_reflection_;
  return metadata;
}


// ===================================================================

const ::std::string DB_User::_default_platform_id_;
const ::std::string DB_User::_default_last_login_ip_;
#ifndef _MSC_VER
const int DB_User::kIdFieldNumber;
const int DB_User::kPlatformIdFieldNumber;
const int DB_User::kNameFieldNumber;
const int DB_User::kProfileLinkFieldNumber;
const int DB_User::kGenderFieldNumber;
const int DB_User::kLastLoginTimeFieldNumber;
const int DB_User::kLastLoginIpFieldNumber;
const int DB_User::kRegistTimeFieldNumber;
const int DB_User::kYellowDmdLvlFieldNumber;
const int DB_User::kIsYellowDmdFieldNumber;
const int DB_User::kIsYellowDmdYearFieldNumber;
const int DB_User::kGetDayYellowGiftDayFieldNumber;
const int DB_User::kGetNewYellowGiftFieldNumber;
const int DB_User::kLastLogoutTimeFieldNumber;
const int DB_User::kPlayerFieldNumber;
const int DB_User::kBanloginFieldNumber;
const int DB_User::kTransferbymysqlFieldNumber;
const int DB_User::kMysqluseridFieldNumber;
const int DB_User::kExpiateFlagFieldNumber;
const int DB_User::kSendgiftcountFieldNumber;
const int DB_User::kSelfgiftcountFieldNumber;
const int DB_User::kGiftwincountFieldNumber;
const int DB_User::kDestroytimeFieldNumber;
const int DB_User::kFightrecordFieldNumber;
const int DB_User::kDailyloginFieldNumber;
const int DB_User::kBannergiftFieldNumber;
const int DB_User::kLandingdaygiftbitFieldNumber;
const int DB_User::kLanddaycountFieldNumber;
const int DB_User::kWebOnceFlagFieldNumber;
const int DB_User::kGiftInfoFieldNumber;
const int DB_User::kQQDmdLvlFieldNumber;
const int DB_User::kIsQQDmdFieldNumber;
const int DB_User::kIsQQDmdYearFieldNumber;
const int DB_User::kGetDayQQGiftDayFieldNumber;
const int DB_User::kGetNewQQGiftFieldNumber;
const int DB_User::kRegionFieldNumber;
const int DB_User::kLogondaycountFieldNumber;
const int DB_User::kCityFieldNumber;
const int DB_User::kIsHighYellowDmdFieldNumber;
const int DB_User::kActiveContinueLogonFieldNumber;
const int DB_User::kIsActiveLogonFieldNumber;
const int DB_User::kHasGetRecallFieldNumber;
const int DB_User::kLastRepairTimeFieldNumber;
const int DB_User::kLandDayCountExFieldNumber;
const int DB_User::kLandDayGiftExFieldNumber;
const int DB_User::kOfficerFieldNumber;
const int DB_User::kDestroynpctimeFieldNumber;
const int DB_User::kBRegisterNumFieldNumber;
const int DB_User::kBAdultFieldNumber;
#endif  // !_MSC_VER

DB_User::DB_User() {
  SharedCtor();
}

void DB_User::InitAsDefaultInstance() {
  player_ = const_cast< ::DB_Player*>(&::DB_Player::default_instance());
  banlogin_ = const_cast< ::DB_BanLogin*>(&::DB_BanLogin::default_instance());
  dailylogin_ = const_cast< ::DB_DailyLogon*>(&::DB_DailyLogon::default_instance());
  giftinfo_ = const_cast< ::DB_GiftInfo*>(&::DB_GiftInfo::default_instance());
  activecontinuelogon_ = const_cast< ::DB_ActiveContinueLogon*>(&::DB_ActiveContinueLogon::default_instance());
  officer_ = const_cast< ::DB_Officer*>(&::DB_Officer::default_instance());
}

DB_User::DB_User(const DB_User& from) {
  SharedCtor();
  MergeFrom(from);
}

void DB_User::SharedCtor() {
  _cached_size_ = 0;
  id_ = GOOGLE_LONGLONG(0);
  platform_id_ = const_cast< ::std::string*>(&_default_platform_id_);
  gender_ = 0;
  last_login_time_ = GOOGLE_LONGLONG(0);
  last_login_ip_ = const_cast< ::std::string*>(&_default_last_login_ip_);
  regist_time_ = GOOGLE_LONGLONG(0);
  yellowdmdlvl_ = 0;
  isyellowdmd_ = false;
  isyellowdmdyear_ = false;
  getdayyellowgiftday_ = GOOGLE_LONGLONG(0);
  getnewyellowgift_ = false;
  last_logout_time_ = GOOGLE_LONGLONG(0);
  player_ = NULL;
  banlogin_ = NULL;
  transferbymysql_ = false;
  mysqluserid_ = 0;
  expiateflag_ = 0;
  sendgiftcount_ = 0;
  selfgiftcount_ = 0;
  giftwincount_ = 0;
  destroytime_ = 0;
  dailylogin_ = NULL;
  bannergift_ = false;
  landingdaygiftbit_ = 0;
  landdaycount_ = 0;
  webonceflag_ = GOOGLE_LONGLONG(0);
  giftinfo_ = NULL;
  qqdmdlvl_ = 0;
  isqqdmd_ = false;
  isqqdmdyear_ = false;
  getdayqqgiftday_ = GOOGLE_LONGLONG(0);
  getnewqqgift_ = false;
  region_ = 0;
  logondaycount_ = 0;
  city_ = 0;
  ishighyellowdmd_ = false;
  activecontinuelogon_ = NULL;
  isactivelogon_ = false;
  hasgetrecall_ = false;
  lastrepairtime_ = 0;
  landdaycountex_ = 0;
  landdaygiftex_ = 0;
  officer_ = NULL;
  destroynpctime_ = 0;
  bregisternum_ = false;
  badult_ = true;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DB_User::~DB_User() {
  SharedDtor();
}

void DB_User::SharedDtor() {
  if (platform_id_ != &_default_platform_id_) {
    delete platform_id_;
  }
  if (last_login_ip_ != &_default_last_login_ip_) {
    delete last_login_ip_;
  }
  if (this != default_instance_) {
    delete player_;
    delete banlogin_;
    delete dailylogin_;
    delete giftinfo_;
    delete activecontinuelogon_;
    delete officer_;
  }
}

const ::google::protobuf::Descriptor* DB_User::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DB_User_descriptor_;
}

const DB_User& DB_User::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dbinterface_2eproto();  return *default_instance_;
}

DB_User* DB_User::default_instance_ = NULL;

DB_User* DB_User::New() const {
  return new DB_User;
}

void DB_User::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = GOOGLE_LONGLONG(0);
    if (_has_bit(1)) {
      if (platform_id_ != &_default_platform_id_) {
        platform_id_->clear();
      }
    }
    gender_ = 0;
    last_login_time_ = GOOGLE_LONGLONG(0);
    if (_has_bit(6)) {
      if (last_login_ip_ != &_default_last_login_ip_) {
        last_login_ip_->clear();
      }
    }
    regist_time_ = GOOGLE_LONGLONG(0);
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    yellowdmdlvl_ = 0;
    isyellowdmd_ = false;
    isyellowdmdyear_ = false;
    getdayyellowgiftday_ = GOOGLE_LONGLONG(0);
    getnewyellowgift_ = false;
    last_logout_time_ = GOOGLE_LONGLONG(0);
    if (_has_bit(14)) {
      if (player_ != NULL) player_->::DB_Player::Clear();
    }
    if (_has_bit(15)) {
      if (banlogin_ != NULL) banlogin_->::DB_BanLogin::Clear();
    }
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    transferbymysql_ = false;
    mysqluserid_ = 0;
    expiateflag_ = 0;
    sendgiftcount_ = 0;
    selfgiftcount_ = 0;
    giftwincount_ = 0;
    destroytime_ = 0;
  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (_has_bit(24)) {
      if (dailylogin_ != NULL) dailylogin_->::DB_DailyLogon::Clear();
    }
    bannergift_ = false;
    landingdaygiftbit_ = 0;
    landdaycount_ = 0;
    webonceflag_ = GOOGLE_LONGLONG(0);
    if (_has_bit(29)) {
      if (giftinfo_ != NULL) giftinfo_->::DB_GiftInfo::Clear();
    }
    qqdmdlvl_ = 0;
    isqqdmd_ = false;
  }
  if (_has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    isqqdmdyear_ = false;
    getdayqqgiftday_ = GOOGLE_LONGLONG(0);
    getnewqqgift_ = false;
    region_ = 0;
    logondaycount_ = 0;
    city_ = 0;
    ishighyellowdmd_ = false;
    if (_has_bit(39)) {
      if (activecontinuelogon_ != NULL) activecontinuelogon_->::DB_ActiveContinueLogon::Clear();
    }
  }
  if (_has_bits_[40 / 32] & (0xffu << (40 % 32))) {
    isactivelogon_ = false;
    hasgetrecall_ = false;
    lastrepairtime_ = 0;
    landdaycountex_ = 0;
    landdaygiftex_ = 0;
    if (_has_bit(45)) {
      if (officer_ != NULL) officer_->::DB_Officer::Clear();
    }
    destroynpctime_ = 0;
    bregisternum_ = false;
  }
  if (_has_bits_[48 / 32] & (0xffu << (48 % 32))) {
    badult_ = true;
  }
  name_.Clear();
  profile_link_.Clear();
  fightrecord_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DB_User::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 id = 1 [default = 0];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt64(
              input, &id_));
        _set_bit(0);
        if (input->ExpectTag(18)) goto parse_platform_id;
        break;
      }
      
      // optional string platform_id = 2 [default = ""];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_platform_id:
        DO_(::google::protobuf::internal::WireFormatLite::ReadString(
              input, this->mutable_platform_id()));
        ::google::protobuf::internal::WireFormat::VerifyUTF8String(
          this->platform_id().data(), this->platform_id().length(),
          ::google::protobuf::internal::WireFormat::PARSE);
        if (input->ExpectTag(26)) goto parse_name;
        break;
      }
      
      // repeated string name = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_name:
        DO_(::google::protobuf::internal::WireFormatLite::ReadString(
              input, this->add_name()));
        ::google::protobuf::internal::WireFormat::VerifyUTF8String(
          this->name(0).data(), this->name(0).length(),
          ::google::protobuf::internal::WireFormat::PARSE);
        if (input->ExpectTag(26)) goto parse_name;
        if (input->ExpectTag(34)) goto parse_profile_link;
        break;
      }
      
      // repeated string profile_link = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_profile_link:
        DO_(::google::protobuf::internal::WireFormatLite::ReadString(
              input, this->add_profile_link()));
        ::google::protobuf::internal::WireFormat::VerifyUTF8String(
          this->profile_link(0).data(), this->profile_link(0).length(),
          ::google::protobuf::internal::WireFormat::PARSE);
        if (input->ExpectTag(34)) goto parse_profile_link;
        if (input->ExpectTag(40)) goto parse_gender;
        break;
      }
      
      // optional int32 gender = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_gender:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &gender_));
        _set_bit(4);
        if (input->ExpectTag(48)) goto parse_last_login_time;
        break;
      }
      
      // optional int64 last_login_time = 6 [default = 0];
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_last_login_time:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt64(
              input, &last_login_time_));
        _set_bit(5);
        if (input->ExpectTag(58)) goto parse_last_login_ip;
        break;
      }
      
      // optional string last_login_ip = 7 [default = ""];
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_last_login_ip:
        DO_(::google::protobuf::internal::WireFormatLite::ReadString(
              input, this->mutable_last_login_ip()));
        ::google::protobuf::internal::WireFormat::VerifyUTF8String(
          this->last_login_ip().data(), this->last_login_ip().length(),
          ::google::protobuf::internal::WireFormat::PARSE);
        if (input->ExpectTag(64)) goto parse_regist_time;
        break;
      }
      
      // optional int64 regist_time = 8 [default = 0];
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_regist_time:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt64(
              input, &regist_time_));
        _set_bit(7);
        if (input->ExpectTag(72)) goto parse_yellowDmdLvl;
        break;
      }
      
      // optional int32 yellowDmdLvl = 9 [default = 0];
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_yellowDmdLvl:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &yellowdmdlvl_));
        _set_bit(8);
        if (input->ExpectTag(80)) goto parse_isYellowDmd;
        break;
      }
      
      // optional bool isYellowDmd = 10 [default = false];
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_isYellowDmd:
        DO_(::google::protobuf::internal::WireFormatLite::ReadBool(
              input, &isyellowdmd_));
        _set_bit(9);
        if (input->ExpectTag(88)) goto parse_isYellowDmdYear;
        break;
      }
      
      // optional bool isYellowDmdYear = 11 [default = false];
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_isYellowDmdYear:
        DO_(::google::protobuf::internal::WireFormatLite::ReadBool(
              input, &isyellowdmdyear_));
        _set_bit(10);
        if (input->ExpectTag(96)) goto parse_getDayYellowGiftDay;
        break;
      }
      
      // optional int64 getDayYellowGiftDay = 12 [default = 0];
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_getDayYellowGiftDay:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt64(
              input, &getdayyellowgiftday_));
        _set_bit(11);
        if (input->ExpectTag(104)) goto parse_getNewYellowGift;
        break;
      }
      
      // optional bool getNewYellowGift = 13 [default = false];
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_getNewYellowGift:
        DO_(::google::protobuf::internal::WireFormatLite::ReadBool(
              input, &getnewyellowgift_));
        _set_bit(12);
        if (input->ExpectTag(112)) goto parse_last_logout_time;
        break;
      }
      
      // optional int64 last_logout_time = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_last_logout_time:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt64(
              input, &last_logout_time_));
        _set_bit(13);
        if (input->ExpectTag(122)) goto parse_player;
        break;
      }
      
      // optional .DB_Player player = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_player:
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
             input, mutable_player()));
        if (input->ExpectTag(130)) goto parse_banlogin;
        break;
      }
      
      // optional .DB_BanLogin banlogin = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_banlogin:
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
             input, mutable_banlogin()));
        if (input->ExpectTag(136)) goto parse_transferbymysql;
        break;
      }
      
      // optional bool transferbymysql = 17 [default = false];
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_transferbymysql:
        DO_(::google::protobuf::internal::WireFormatLite::ReadBool(
              input, &transferbymysql_));
        _set_bit(16);
        if (input->ExpectTag(144)) goto parse_mysqluserid;
        break;
      }
      
      // optional int32 mysqluserid = 18 [default = 0];
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_mysqluserid:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &mysqluserid_));
        _set_bit(17);
        if (input->ExpectTag(152)) goto parse_ExpiateFlag;
        break;
      }
      
      // optional int32 ExpiateFlag = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_ExpiateFlag:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &expiateflag_));
        _set_bit(18);
        if (input->ExpectTag(160)) goto parse_sendgiftcount;
        break;
      }
      
      // optional int32 sendgiftcount = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_sendgiftcount:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &sendgiftcount_));
        _set_bit(19);
        if (input->ExpectTag(168)) goto parse_selfgiftcount;
        break;
      }
      
      // optional int32 selfgiftcount = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_selfgiftcount:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &selfgiftcount_));
        _set_bit(20);
        if (input->ExpectTag(176)) goto parse_giftwincount;
        break;
      }
      
      // optional int32 giftwincount = 22;
      case 22: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_giftwincount:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &giftwincount_));
        _set_bit(21);
        if (input->ExpectTag(184)) goto parse_destroytime;
        break;
      }
      
      // optional int32 destroytime = 23 [default = 0];
      case 23: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_destroytime:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &destroytime_));
        _set_bit(22);
        if (input->ExpectTag(194)) goto parse_fightrecord;
        break;
      }
      
      // repeated .DB_LootReport fightrecord = 24;
      case 24: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_fightrecord:
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, add_fightrecord()));
        if (input->ExpectTag(194)) goto parse_fightrecord;
        if (input->ExpectTag(202)) goto parse_dailylogin;
        break;
      }
      
      // optional .DB_DailyLogon dailylogin = 25;
      case 25: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_dailylogin:
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
             input, mutable_dailylogin()));
        if (input->ExpectTag(208)) goto parse_bannergift;
        break;
      }
      
      // optional bool bannergift = 26 [default = false];
      case 26: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_bannergift:
        DO_(::google::protobuf::internal::WireFormatLite::ReadBool(
              input, &bannergift_));
        _set_bit(25);
        if (input->ExpectTag(216)) goto parse_landingdaygiftbit;
        break;
      }
      
      // optional int32 landingdaygiftbit = 27 [default = 0];
      case 27: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_landingdaygiftbit:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &landingdaygiftbit_));
        _set_bit(26);
        if (input->ExpectTag(224)) goto parse_landdaycount;
        break;
      }
      
      // optional int32 landdaycount = 28 [default = 0];
      case 28: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_landdaycount:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &landdaycount_));
        _set_bit(27);
        if (input->ExpectTag(232)) goto parse_webOnceFlag;
        break;
      }
      
      // optional int64 webOnceFlag = 29 [default = 0];
      case 29: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_webOnceFlag:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt64(
              input, &webonceflag_));
        _set_bit(28);
        if (input->ExpectTag(242)) goto parse_giftInfo;
        break;
      }
      
      // optional .DB_GiftInfo giftInfo = 30;
      case 30: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_giftInfo:
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
             input, mutable_giftinfo()));
        if (input->ExpectTag(248)) goto parse_QQDmdLvl;
        break;
      }
      
      // optional int32 QQDmdLvl = 31 [default = 0];
      case 31: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_QQDmdLvl:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &qqdmdlvl_));
        _set_bit(30);
        if (input->ExpectTag(256)) goto parse_isQQDmd;
        break;
      }
      
      // optional bool isQQDmd = 32 [default = false];
      case 32: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_isQQDmd:
        DO_(::google::protobuf::internal::WireFormatLite::ReadBool(
              input, &isqqdmd_));
        _set_bit(31);
        if (input->ExpectTag(264)) goto parse_isQQDmdYear;
        break;
      }
      
      // optional bool isQQDmdYear = 33 [default = false];
      case 33: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_isQQDmdYear:
        DO_(::google::protobuf::internal::WireFormatLite::ReadBool(
              input, &isqqdmdyear_));
        _set_bit(32);
        if (input->ExpectTag(272)) goto parse_getDayQQGiftDay;
        break;
      }
      
      // optional int64 getDayQQGiftDay = 34 [default = 0];
      case 34: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_getDayQQGiftDay:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt64(
              input, &getdayqqgiftday_));
        _set_bit(33);
        if (input->ExpectTag(280)) goto parse_getNewQQGift;
        break;
      }
      
      // optional bool getNewQQGift = 35 [default = false];
      case 35: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_getNewQQGift:
        DO_(::google::protobuf::internal::WireFormatLite::ReadBool(
              input, &getnewqqgift_));
        _set_bit(34);
        if (input->ExpectTag(288)) goto parse_region;
        break;
      }
      
      // optional int32 region = 36 [default = 0];
      case 36: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_region:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &region_));
        _set_bit(35);
        if (input->ExpectTag(296)) goto parse_logondaycount;
        break;
      }
      
      // optional int32 logondaycount = 37 [default = 0];
      case 37: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_logondaycount:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &logondaycount_));
        _set_bit(36);
        if (input->ExpectTag(304)) goto parse_city;
        break;
      }
      
      // optional int32 city = 38 [default = 0];
      case 38: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_city:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &city_));
        _set_bit(37);
        if (input->ExpectTag(312)) goto parse_isHighYellowDmd;
        break;
      }
      
      // optional bool isHighYellowDmd = 39 [default = false];
      case 39: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_isHighYellowDmd:
        DO_(::google::protobuf::internal::WireFormatLite::ReadBool(
              input, &ishighyellowdmd_));
        _set_bit(38);
        if (input->ExpectTag(322)) goto parse_activeContinueLogon;
        break;
      }
      
      // optional .DB_ActiveContinueLogon activeContinueLogon = 40;
      case 40: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_activeContinueLogon:
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
             input, mutable_activecontinuelogon()));
        if (input->ExpectTag(328)) goto parse_isActiveLogon;
        break;
      }
      
      // optional bool isActiveLogon = 41 [default = false];
      case 41: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_isActiveLogon:
        DO_(::google::protobuf::internal::WireFormatLite::ReadBool(
              input, &isactivelogon_));
        _set_bit(40);
        if (input->ExpectTag(336)) goto parse_hasGetRecall;
        break;
      }
      
      // optional bool hasGetRecall = 42 [default = false];
      case 42: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_hasGetRecall:
        DO_(::google::protobuf::internal::WireFormatLite::ReadBool(
              input, &hasgetrecall_));
        _set_bit(41);
        if (input->ExpectTag(344)) goto parse_lastRepairTime;
        break;
      }
      
      // optional int32 lastRepairTime = 43 [default = 0];
      case 43: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_lastRepairTime:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &lastrepairtime_));
        _set_bit(42);
        if (input->ExpectTag(352)) goto parse_landDayCountEx;
        break;
      }
      
      // optional int32 landDayCountEx = 44 [default = 0];
      case 44: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_landDayCountEx:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &landdaycountex_));
        _set_bit(43);
        if (input->ExpectTag(360)) goto parse_landDayGiftEx;
        break;
      }
      
      // optional int32 landDayGiftEx = 45 [default = 0];
      case 45: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_landDayGiftEx:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &landdaygiftex_));
        _set_bit(44);
        if (input->ExpectTag(370)) goto parse_officer;
        break;
      }
      
      // optional .DB_Officer officer = 46;
      case 46: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_officer:
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
             input, mutable_officer()));
        if (input->ExpectTag(376)) goto parse_destroynpctime;
        break;
      }
      
      // optional int32 destroynpctime = 47 [default = 0];
      case 47: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_destroynpctime:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &destroynpctime_));
        _set_bit(46);
        if (input->ExpectTag(384)) goto parse_bRegisterNum;
        break;
      }
      
      // optional bool bRegisterNum = 48 [default = false];
      case 48: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_bRegisterNum:
        DO_(::google::protobuf::internal::WireFormatLite::ReadBool(
              input, &bregisternum_));
        _set_bit(47);
        if (input->ExpectTag(408)) goto parse_bAdult;
        break;
      }
      
      // optional bool bAdult = 51 [default = true];
      case 51: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_bAdult:
        DO_(::google::protobuf::internal::WireFormatLite::ReadBool(
              input, &badult_));
        _set_bit(48);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DB_User::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    DB_User::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional int64 id = 1 [default = 0];
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->id(), output);
  }
  
  // optional string platform_id = 2 [default = ""];
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->platform_id().data(), this->platform_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->platform_id(), output);
  }
  
  // repeated string name = 3;
  for (int i = 0; i < this->name_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->name(i).data(), this->name(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->name(i), output);
  }
  
  // repeated string profile_link = 4;
  for (int i = 0; i < this->profile_link_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->profile_link(i).data(), this->profile_link(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->profile_link(i), output);
  }
  
  // optional int32 gender = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->gender(), output);
  }
  
  // optional int64 last_login_time = 6 [default = 0];
  if (_has_bit(5)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(6, this->last_login_time(), output);
  }
  
  // optional string last_login_ip = 7 [default = ""];
  if (_has_bit(6)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->last_login_ip().data(), this->last_login_ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->last_login_ip(), output);
  }
  
  // optional int64 regist_time = 8 [default = 0];
  if (_has_bit(7)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(8, this->regist_time(), output);
  }
  
  // optional int32 yellowDmdLvl = 9 [default = 0];
  if (_has_bit(8)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->yellowdmdlvl(), output);
  }
  
  // optional bool isYellowDmd = 10 [default = false];
  if (_has_bit(9)) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(10, this->isyellowdmd(), output);
  }
  
  // optional bool isYellowDmdYear = 11 [default = false];
  if (_has_bit(10)) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(11, this->isyellowdmdyear(), output);
  }
  
  // optional int64 getDayYellowGiftDay = 12 [default = 0];
  if (_has_bit(11)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(12, this->getdayyellowgiftday(), output);
  }
  
  // optional bool getNewYellowGift = 13 [default = false];
  if (_has_bit(12)) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(13, this->getnewyellowgift(), output);
  }
  
  // optional int64 last_logout_time = 14;
  if (_has_bit(13)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(14, this->last_logout_time(), output);
  }
  
  // optional .DB_Player player = 15;
  if (_has_bit(14)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      15, this->player(), output);
  }
  
  // optional .DB_BanLogin banlogin = 16;
  if (_has_bit(15)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      16, this->banlogin(), output);
  }
  
  // optional bool transferbymysql = 17 [default = false];
  if (_has_bit(16)) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(17, this->transferbymysql(), output);
  }
  
  // optional int32 mysqluserid = 18 [default = 0];
  if (_has_bit(17)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(18, this->mysqluserid(), output);
  }
  
  // optional int32 ExpiateFlag = 19;
  if (_has_bit(18)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(19, this->expiateflag(), output);
  }
  
  // optional int32 sendgiftcount = 20;
  if (_has_bit(19)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(20, this->sendgiftcount(), output);
  }
  
  // optional int32 selfgiftcount = 21;
  if (_has_bit(20)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(21, this->selfgiftcount(), output);
  }
  
  // optional int32 giftwincount = 22;
  if (_has_bit(21)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(22, this->giftwincount(), output);
  }
  
  // optional int32 destroytime = 23 [default = 0];
  if (_has_bit(22)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(23, this->destroytime(), output);
  }
  
  // repeated .DB_LootReport fightrecord = 24;
  for (int i = 0; i < this->fightrecord_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      24, this->fightrecord(i), output);
  }
  
  // optional .DB_DailyLogon dailylogin = 25;
  if (_has_bit(24)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      25, this->dailylogin(), output);
  }
  
  // optional bool bannergift = 26 [default = false];
  if (_has_bit(25)) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(26, this->bannergift(), output);
  }
  
  // optional int32 landingdaygiftbit = 27 [default = 0];
  if (_has_bit(26)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(27, this->landingdaygiftbit(), output);
  }
  
  // optional int32 landdaycount = 28 [default = 0];
  if (_has_bit(27)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(28, this->landdaycount(), output);
  }
  
  // optional int64 webOnceFlag = 29 [default = 0];
  if (_has_bit(28)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(29, this->webonceflag(), output);
  }
  
  // optional .DB_GiftInfo giftInfo = 30;
  if (_has_bit(29)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      30, this->giftinfo(), output);
  }
  
  // optional int32 QQDmdLvl = 31 [default = 0];
  if (_has_bit(30)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(31, this->qqdmdlvl(), output);
  }
  
  // optional bool isQQDmd = 32 [default = false];
  if (_has_bit(31)) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(32, this->isqqdmd(), output);
  }
  
  // optional bool isQQDmdYear = 33 [default = false];
  if (_has_bit(32)) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(33, this->isqqdmdyear(), output);
  }
  
  // optional int64 getDayQQGiftDay = 34 [default = 0];
  if (_has_bit(33)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(34, this->getdayqqgiftday(), output);
  }
  
  // optional bool getNewQQGift = 35 [default = false];
  if (_has_bit(34)) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(35, this->getnewqqgift(), output);
  }
  
  // optional int32 region = 36 [default = 0];
  if (_has_bit(35)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(36, this->region(), output);
  }
  
  // optional int32 logondaycount = 37 [default = 0];
  if (_has_bit(36)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(37, this->logondaycount(), output);
  }
  
  // optional int32 city = 38 [default = 0];
  if (_has_bit(37)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(38, this->city(), output);
  }
  
  // optional bool isHighYellowDmd = 39 [default = false];
  if (_has_bit(38)) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(39, this->ishighyellowdmd(), output);
  }
  
  // optional .DB_ActiveContinueLogon activeContinueLogon = 40;
  if (_has_bit(39)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      40, this->activecontinuelogon(), output);
  }
  
  // optional bool isActiveLogon = 41 [default = false];
  if (_has_bit(40)) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(41, this->isactivelogon(), output);
  }
  
  // optional bool hasGetRecall = 42 [default = false];
  if (_has_bit(41)) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(42, this->hasgetrecall(), output);
  }
  
  // optional int32 lastRepairTime = 43 [default = 0];
  if (_has_bit(42)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(43, this->lastrepairtime(), output);
  }
  
  // optional int32 landDayCountEx = 44 [default = 0];
  if (_has_bit(43)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(44, this->landdaycountex(), output);
  }
  
  // optional int32 landDayGiftEx = 45 [default = 0];
  if (_has_bit(44)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(45, this->landdaygiftex(), output);
  }
  
  // optional .DB_Officer officer = 46;
  if (_has_bit(45)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      46, this->officer(), output);
  }
  
  // optional int32 destroynpctime = 47 [default = 0];
  if (_has_bit(46)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(47, this->destroynpctime(), output);
  }
  
  // optional bool bRegisterNum = 48 [default = false];
  if (_has_bit(47)) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(48, this->bregisternum(), output);
  }
  
  // optional bool bAdult = 51 [default = true];
  if (_has_bit(48)) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(51, this->badult(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DB_User::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int64 id = 1 [default = 0];
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->id(), target);
  }
  
  // optional string platform_id = 2 [default = ""];
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->platform_id().data(), this->platform_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->platform_id(), target);
  }
  
  // repeated string name = 3;
  for (int i = 0; i < this->name_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name(i).data(), this->name(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(3, this->name(i), target);
  }
  
  // repeated string profile_link = 4;
  for (int i = 0; i < this->profile_link_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->profile_link(i).data(), this->profile_link(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(4, this->profile_link(i), target);
  }
  
  // optional int32 gender = 5;
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->gender(), target);
  }
  
  // optional int64 last_login_time = 6 [default = 0];
  if (_has_bit(5)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(6, this->last_login_time(), target);
  }
  
  // optional string last_login_ip = 7 [default = ""];
  if (_has_bit(6)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->last_login_ip().data(), this->last_login_ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->last_login_ip(), target);
  }
  
  // optional int64 regist_time = 8 [default = 0];
  if (_has_bit(7)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(8, this->regist_time(), target);
  }
  
  // optional int32 yellowDmdLvl = 9 [default = 0];
  if (_has_bit(8)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->yellowdmdlvl(), target);
  }
  
  // optional bool isYellowDmd = 10 [default = false];
  if (_has_bit(9)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(10, this->isyellowdmd(), target);
  }
  
  // optional bool isYellowDmdYear = 11 [default = false];
  if (_has_bit(10)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(11, this->isyellowdmdyear(), target);
  }
  
  // optional int64 getDayYellowGiftDay = 12 [default = 0];
  if (_has_bit(11)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(12, this->getdayyellowgiftday(), target);
  }
  
  // optional bool getNewYellowGift = 13 [default = false];
  if (_has_bit(12)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(13, this->getnewyellowgift(), target);
  }
  
  // optional int64 last_logout_time = 14;
  if (_has_bit(13)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(14, this->last_logout_time(), target);
  }
  
  // optional .DB_Player player = 15;
  if (_has_bit(14)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        15, this->player(), target);
  }
  
  // optional .DB_BanLogin banlogin = 16;
  if (_has_bit(15)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        16, this->banlogin(), target);
  }
  
  // optional bool transferbymysql = 17 [default = false];
  if (_has_bit(16)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(17, this->transferbymysql(), target);
  }
  
  // optional int32 mysqluserid = 18 [default = 0];
  if (_has_bit(17)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(18, this->mysqluserid(), target);
  }
  
  // optional int32 ExpiateFlag = 19;
  if (_has_bit(18)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(19, this->expiateflag(), target);
  }
  
  // optional int32 sendgiftcount = 20;
  if (_has_bit(19)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(20, this->sendgiftcount(), target);
  }
  
  // optional int32 selfgiftcount = 21;
  if (_has_bit(20)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(21, this->selfgiftcount(), target);
  }
  
  // optional int32 giftwincount = 22;
  if (_has_bit(21)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(22, this->giftwincount(), target);
  }
  
  // optional int32 destroytime = 23 [default = 0];
  if (_has_bit(22)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(23, this->destroytime(), target);
  }
  
  // repeated .DB_LootReport fightrecord = 24;
  for (int i = 0; i < this->fightrecord_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        24, this->fightrecord(i), target);
  }
  
  // optional .DB_DailyLogon dailylogin = 25;
  if (_has_bit(24)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        25, this->dailylogin(), target);
  }
  
  // optional bool bannergift = 26 [default = false];
  if (_has_bit(25)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(26, this->bannergift(), target);
  }
  
  // optional int32 landingdaygiftbit = 27 [default = 0];
  if (_has_bit(26)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(27, this->landingdaygiftbit(), target);
  }
  
  // optional int32 landdaycount = 28 [default = 0];
  if (_has_bit(27)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(28, this->landdaycount(), target);
  }
  
  // optional int64 webOnceFlag = 29 [default = 0];
  if (_has_bit(28)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(29, this->webonceflag(), target);
  }
  
  // optional .DB_GiftInfo giftInfo = 30;
  if (_has_bit(29)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        30, this->giftinfo(), target);
  }
  
  // optional int32 QQDmdLvl = 31 [default = 0];
  if (_has_bit(30)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(31, this->qqdmdlvl(), target);
  }
  
  // optional bool isQQDmd = 32 [default = false];
  if (_has_bit(31)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(32, this->isqqdmd(), target);
  }
  
  // optional bool isQQDmdYear = 33 [default = false];
  if (_has_bit(32)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(33, this->isqqdmdyear(), target);
  }
  
  // optional int64 getDayQQGiftDay = 34 [default = 0];
  if (_has_bit(33)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(34, this->getdayqqgiftday(), target);
  }
  
  // optional bool getNewQQGift = 35 [default = false];
  if (_has_bit(34)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(35, this->getnewqqgift(), target);
  }
  
  // optional int32 region = 36 [default = 0];
  if (_has_bit(35)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(36, this->region(), target);
  }
  
  // optional int32 logondaycount = 37 [default = 0];
  if (_has_bit(36)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(37, this->logondaycount(), target);
  }
  
  // optional int32 city = 38 [default = 0];
  if (_has_bit(37)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(38, this->city(), target);
  }
  
  // optional bool isHighYellowDmd = 39 [default = false];
  if (_has_bit(38)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(39, this->ishighyellowdmd(), target);
  }
  
  // optional .DB_ActiveContinueLogon activeContinueLogon = 40;
  if (_has_bit(39)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        40, this->activecontinuelogon(), target);
  }
  
  // optional bool isActiveLogon = 41 [default = false];
  if (_has_bit(40)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(41, this->isactivelogon(), target);
  }
  
  // optional bool hasGetRecall = 42 [default = false];
  if (_has_bit(41)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(42, this->hasgetrecall(), target);
  }
  
  // optional int32 lastRepairTime = 43 [default = 0];
  if (_has_bit(42)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(43, this->lastrepairtime(), target);
  }
  
  // optional int32 landDayCountEx = 44 [default = 0];
  if (_has_bit(43)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(44, this->landdaycountex(), target);
  }
  
  // optional int32 landDayGiftEx = 45 [default = 0];
  if (_has_bit(44)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(45, this->landdaygiftex(), target);
  }
  
  // optional .DB_Officer officer = 46;
  if (_has_bit(45)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        46, this->officer(), target);
  }
  
  // optional int32 destroynpctime = 47 [default = 0];
  if (_has_bit(46)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(47, this->destroynpctime(), target);
  }
  
  // optional bool bRegisterNum = 48 [default = false];
  if (_has_bit(47)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(48, this->bregisternum(), target);
  }
  
  // optional bool bAdult = 51 [default = true];
  if (_has_bit(48)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(51, this->badult(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DB_User::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 id = 1 [default = 0];
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->id());
    }
    
    // optional string platform_id = 2 [default = ""];
    if (has_platform_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->platform_id());
    }
    
    // optional int32 gender = 5;
    if (has_gender()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gender());
    }
    
    // optional int64 last_login_time = 6 [default = 0];
    if (has_last_login_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->last_login_time());
    }
    
    // optional string last_login_ip = 7 [default = ""];
    if (has_last_login_ip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->last_login_ip());
    }
    
    // optional int64 regist_time = 8 [default = 0];
    if (has_regist_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->regist_time());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 yellowDmdLvl = 9 [default = 0];
    if (has_yellowdmdlvl()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->yellowdmdlvl());
    }
    
    // optional bool isYellowDmd = 10 [default = false];
    if (has_isyellowdmd()) {
      total_size += 1 + 1;
    }
    
    // optional bool isYellowDmdYear = 11 [default = false];
    if (has_isyellowdmdyear()) {
      total_size += 1 + 1;
    }
    
    // optional int64 getDayYellowGiftDay = 12 [default = 0];
    if (has_getdayyellowgiftday()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->getdayyellowgiftday());
    }
    
    // optional bool getNewYellowGift = 13 [default = false];
    if (has_getnewyellowgift()) {
      total_size += 1 + 1;
    }
    
    // optional int64 last_logout_time = 14;
    if (has_last_logout_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->last_logout_time());
    }
    
    // optional .DB_Player player = 15;
    if (has_player()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->player());
    }
    
    // optional .DB_BanLogin banlogin = 16;
    if (has_banlogin()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->banlogin());
    }
    
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional bool transferbymysql = 17 [default = false];
    if (has_transferbymysql()) {
      total_size += 2 + 1;
    }
    
    // optional int32 mysqluserid = 18 [default = 0];
    if (has_mysqluserid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->mysqluserid());
    }
    
    // optional int32 ExpiateFlag = 19;
    if (has_expiateflag()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->expiateflag());
    }
    
    // optional int32 sendgiftcount = 20;
    if (has_sendgiftcount()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sendgiftcount());
    }
    
    // optional int32 selfgiftcount = 21;
    if (has_selfgiftcount()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->selfgiftcount());
    }
    
    // optional int32 giftwincount = 22;
    if (has_giftwincount()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->giftwincount());
    }
    
    // optional int32 destroytime = 23 [default = 0];
    if (has_destroytime()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->destroytime());
    }
    
  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    // optional .DB_DailyLogon dailylogin = 25;
    if (has_dailylogin()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->dailylogin());
    }
    
    // optional bool bannergift = 26 [default = false];
    if (has_bannergift()) {
      total_size += 2 + 1;
    }
    
    // optional int32 landingdaygiftbit = 27 [default = 0];
    if (has_landingdaygiftbit()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->landingdaygiftbit());
    }
    
    // optional int32 landdaycount = 28 [default = 0];
    if (has_landdaycount()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->landdaycount());
    }
    
    // optional int64 webOnceFlag = 29 [default = 0];
    if (has_webonceflag()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->webonceflag());
    }
    
    // optional .DB_GiftInfo giftInfo = 30;
    if (has_giftinfo()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->giftinfo());
    }
    
    // optional int32 QQDmdLvl = 31 [default = 0];
    if (has_qqdmdlvl()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->qqdmdlvl());
    }
    
    // optional bool isQQDmd = 32 [default = false];
    if (has_isqqdmd()) {
      total_size += 2 + 1;
    }
    
  }
  if (_has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    // optional bool isQQDmdYear = 33 [default = false];
    if (has_isqqdmdyear()) {
      total_size += 2 + 1;
    }
    
    // optional int64 getDayQQGiftDay = 34 [default = 0];
    if (has_getdayqqgiftday()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->getdayqqgiftday());
    }
    
    // optional bool getNewQQGift = 35 [default = false];
    if (has_getnewqqgift()) {
      total_size += 2 + 1;
    }
    
    // optional int32 region = 36 [default = 0];
    if (has_region()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->region());
    }
    
    // optional int32 logondaycount = 37 [default = 0];
    if (has_logondaycount()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->logondaycount());
    }
    
    // optional int32 city = 38 [default = 0];
    if (has_city()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->city());
    }
    
    // optional bool isHighYellowDmd = 39 [default = false];
    if (has_ishighyellowdmd()) {
      total_size += 2 + 1;
    }
    
    // optional .DB_ActiveContinueLogon activeContinueLogon = 40;
    if (has_activecontinuelogon()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->activecontinuelogon());
    }
    
  }
  if (_has_bits_[40 / 32] & (0xffu << (40 % 32))) {
    // optional bool isActiveLogon = 41 [default = false];
    if (has_isactivelogon()) {
      total_size += 2 + 1;
    }
    
    // optional bool hasGetRecall = 42 [default = false];
    if (has_hasgetrecall()) {
      total_size += 2 + 1;
    }
    
    // optional int32 lastRepairTime = 43 [default = 0];
    if (has_lastrepairtime()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->lastrepairtime());
    }
    
    // optional int32 landDayCountEx = 44 [default = 0];
    if (has_landdaycountex()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->landdaycountex());
    }
    
    // optional int32 landDayGiftEx = 45 [default = 0];
    if (has_landdaygiftex()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->landdaygiftex());
    }
    
    // optional .DB_Officer officer = 46;
    if (has_officer()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->officer());
    }
    
    // optional int32 destroynpctime = 47 [default = 0];
    if (has_destroynpctime()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->destroynpctime());
    }
    
    // optional bool bRegisterNum = 48 [default = false];
    if (has_bregisternum()) {
      total_size += 2 + 1;
    }
    
  }
  if (_has_bits_[48 / 32] & (0xffu << (48 % 32))) {
    // optional bool bAdult = 51 [default = true];
    if (has_badult()) {
      total_size += 2 + 1;
    }
    
  }
  // repeated string name = 3;
  total_size += 1 * this->name_size();
  for (int i = 0; i < this->name_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->name(i));
  }
  
  // repeated string profile_link = 4;
  total_size += 1 * this->profile_link_size();
  for (int i = 0; i < this->profile_link_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->profile_link(i));
  }
  
  // repeated .DB_LootReport fightrecord = 24;
  total_size += 2 * this->fightrecord_size();
  for (int i = 0; i < this->fightrecord_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->fightrecord(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void DB_User::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DB_User* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DB_User*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DB_User::MergeFrom(const DB_User& from) {
  GOOGLE_CHECK_NE(&from, this);
  name_.MergeFrom(from.name_);
  profile_link_.MergeFrom(from.profile_link_);
  fightrecord_.MergeFrom(from.fightrecord_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_id(from.id());
    }
    if (from._has_bit(1)) {
      set_platform_id(from.platform_id());
    }
    if (from._has_bit(4)) {
      set_gender(from.gender());
    }
    if (from._has_bit(5)) {
      set_last_login_time(from.last_login_time());
    }
    if (from._has_bit(6)) {
      set_last_login_ip(from.last_login_ip());
    }
    if (from._has_bit(7)) {
      set_regist_time(from.regist_time());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from._has_bit(8)) {
      set_yellowdmdlvl(from.yellowdmdlvl());
    }
    if (from._has_bit(9)) {
      set_isyellowdmd(from.isyellowdmd());
    }
    if (from._has_bit(10)) {
      set_isyellowdmdyear(from.isyellowdmdyear());
    }
    if (from._has_bit(11)) {
      set_getdayyellowgiftday(from.getdayyellowgiftday());
    }
    if (from._has_bit(12)) {
      set_getnewyellowgift(from.getnewyellowgift());
    }
    if (from._has_bit(13)) {
      set_last_logout_time(from.last_logout_time());
    }
    if (from._has_bit(14)) {
      mutable_player()->::DB_Player::MergeFrom(from.player());
    }
    if (from._has_bit(15)) {
      mutable_banlogin()->::DB_BanLogin::MergeFrom(from.banlogin());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from._has_bit(16)) {
      set_transferbymysql(from.transferbymysql());
    }
    if (from._has_bit(17)) {
      set_mysqluserid(from.mysqluserid());
    }
    if (from._has_bit(18)) {
      set_expiateflag(from.expiateflag());
    }
    if (from._has_bit(19)) {
      set_sendgiftcount(from.sendgiftcount());
    }
    if (from._has_bit(20)) {
      set_selfgiftcount(from.selfgiftcount());
    }
    if (from._has_bit(21)) {
      set_giftwincount(from.giftwincount());
    }
    if (from._has_bit(22)) {
      set_destroytime(from.destroytime());
    }
  }
  if (from._has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (from._has_bit(24)) {
      mutable_dailylogin()->::DB_DailyLogon::MergeFrom(from.dailylogin());
    }
    if (from._has_bit(25)) {
      set_bannergift(from.bannergift());
    }
    if (from._has_bit(26)) {
      set_landingdaygiftbit(from.landingdaygiftbit());
    }
    if (from._has_bit(27)) {
      set_landdaycount(from.landdaycount());
    }
    if (from._has_bit(28)) {
      set_webonceflag(from.webonceflag());
    }
    if (from._has_bit(29)) {
      mutable_giftinfo()->::DB_GiftInfo::MergeFrom(from.giftinfo());
    }
    if (from._has_bit(30)) {
      set_qqdmdlvl(from.qqdmdlvl());
    }
    if (from._has_bit(31)) {
      set_isqqdmd(from.isqqdmd());
    }
  }
  if (from._has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    if (from._has_bit(32)) {
      set_isqqdmdyear(from.isqqdmdyear());
    }
    if (from._has_bit(33)) {
      set_getdayqqgiftday(from.getdayqqgiftday());
    }
    if (from._has_bit(34)) {
      set_getnewqqgift(from.getnewqqgift());
    }
    if (from._has_bit(35)) {
      set_region(from.region());
    }
    if (from._has_bit(36)) {
      set_logondaycount(from.logondaycount());
    }
    if (from._has_bit(37)) {
      set_city(from.city());
    }
    if (from._has_bit(38)) {
      set_ishighyellowdmd(from.ishighyellowdmd());
    }
    if (from._has_bit(39)) {
      mutable_activecontinuelogon()->::DB_ActiveContinueLogon::MergeFrom(from.activecontinuelogon());
    }
  }
  if (from._has_bits_[40 / 32] & (0xffu << (40 % 32))) {
    if (from._has_bit(40)) {
      set_isactivelogon(from.isactivelogon());
    }
    if (from._has_bit(41)) {
      set_hasgetrecall(from.hasgetrecall());
    }
    if (from._has_bit(42)) {
      set_lastrepairtime(from.lastrepairtime());
    }
    if (from._has_bit(43)) {
      set_landdaycountex(from.landdaycountex());
    }
    if (from._has_bit(44)) {
      set_landdaygiftex(from.landdaygiftex());
    }
    if (from._has_bit(45)) {
      mutable_officer()->::DB_Officer::MergeFrom(from.officer());
    }
    if (from._has_bit(46)) {
      set_destroynpctime(from.destroynpctime());
    }
    if (from._has_bit(47)) {
      set_bregisternum(from.bregisternum());
    }
  }
  if (from._has_bits_[48 / 32] & (0xffu << (48 % 32))) {
    if (from._has_bit(48)) {
      set_badult(from.badult());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DB_User::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DB_User::CopyFrom(const DB_User& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DB_User::IsInitialized() const {
  
  return true;
}

void DB_User::Swap(DB_User* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(platform_id_, other->platform_id_);
    name_.Swap(&other->name_);
    profile_link_.Swap(&other->profile_link_);
    std::swap(gender_, other->gender_);
    std::swap(last_login_time_, other->last_login_time_);
    std::swap(last_login_ip_, other->last_login_ip_);
    std::swap(regist_time_, other->regist_time_);
    std::swap(yellowdmdlvl_, other->yellowdmdlvl_);
    std::swap(isyellowdmd_, other->isyellowdmd_);
    std::swap(isyellowdmdyear_, other->isyellowdmdyear_);
    std::swap(getdayyellowgiftday_, other->getdayyellowgiftday_);
    std::swap(getnewyellowgift_, other->getnewyellowgift_);
    std::swap(last_logout_time_, other->last_logout_time_);
    std::swap(player_, other->player_);
    std::swap(banlogin_, other->banlogin_);
    std::swap(transferbymysql_, other->transferbymysql_);
    std::swap(mysqluserid_, other->mysqluserid_);
    std::swap(expiateflag_, other->expiateflag_);
    std::swap(sendgiftcount_, other->sendgiftcount_);
    std::swap(selfgiftcount_, other->selfgiftcount_);
    std::swap(giftwincount_, other->giftwincount_);
    std::swap(destroytime_, other->destroytime_);
    fightrecord_.Swap(&other->fightrecord_);
    std::swap(dailylogin_, other->dailylogin_);
    std::swap(bannergift_, other->bannergift_);
    std::swap(landingdaygiftbit_, other->landingdaygiftbit_);
    std::swap(landdaycount_, other->landdaycount_);
    std::swap(webonceflag_, other->webonceflag_);
    std::swap(giftinfo_, other->giftinfo_);
    std::swap(qqdmdlvl_, other->qqdmdlvl_);
    std::swap(isqqdmd_, other->isqqdmd_);
    std::swap(isqqdmdyear_, other->isqqdmdyear_);
    std::swap(getdayqqgiftday_, other->getdayqqgiftday_);
    std::swap(getnewqqgift_, other->getnewqqgift_);
    std::swap(region_, other->region_);
    std::swap(logondaycount_, other->logondaycount_);
    std::swap(city_, other->city_);
    std::swap(ishighyellowdmd_, other->ishighyellowdmd_);
    std::swap(activecontinuelogon_, other->activecontinuelogon_);
    std::swap(isactivelogon_, other->isactivelogon_);
    std::swap(hasgetrecall_, other->hasgetrecall_);
    std::swap(lastrepairtime_, other->lastrepairtime_);
    std::swap(landdaycountex_, other->landdaycountex_);
    std::swap(landdaygiftex_, other->landdaygiftex_);
    std::swap(officer_, other->officer_);
    std::swap(destroynpctime_, other->destroynpctime_);
    std::swap(bregisternum_, other->bregisternum_);
    std::swap(badult_, other->badult_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_has_bits_[1], other->_has_bits_[1]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DB_User::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DB_User_descriptor_;
  metadata.reflection = DB_User_reflection_;
  return metadata;
}

