// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "dbinterface.pb.h"
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>

namespace {

const ::google::protobuf::Descriptor* DB_BitCache_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DB_BitCache_reflection_ = NULL;
const ::google::protobuf::Descriptor* DB_Model_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DB_Model_reflection_ = NULL;
const ::google::protobuf::Descriptor* DB_State_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DB_State_reflection_ = NULL;
const ::google::protobuf::Descriptor* DB_PlanetLiteInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DB_PlanetLiteInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* DB_Star_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DB_Star_reflection_ = NULL;
const ::google::protobuf::Descriptor* DB_Item_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DB_Item_reflection_ = NULL;
const ::google::protobuf::Descriptor* DB_Hangar_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DB_Hangar_reflection_ = NULL;
const ::google::protobuf::Descriptor* DB_GameUnit_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DB_GameUnit_reflection_ = NULL;
const ::google::protobuf::Descriptor* DB_Planet_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DB_Planet_reflection_ = NULL;
const ::google::protobuf::Descriptor* DB_NPC_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DB_NPC_reflection_ = NULL;
const ::google::protobuf::Descriptor* DB_Player_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DB_Player_reflection_ = NULL;
const ::google::protobuf::Descriptor* DB_User_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DB_User_reflection_ = NULL;
const ::google::protobuf::Descriptor* DB_GlobalStarInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DB_GlobalStarInfo_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_dbinterface_2eproto() {
  protobuf_AddDesc_dbinterface_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "dbinterface.proto");
  GOOGLE_CHECK(file != NULL);
  DB_BitCache_descriptor_ = file->message_type(0);
  static const int DB_BitCache_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_BitCache, bit_),
  };
  DB_BitCache_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DB_BitCache_descriptor_,
      DB_BitCache::default_instance_,
      DB_BitCache_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_BitCache, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_BitCache, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DB_BitCache));
  DB_Model_descriptor_ = file->message_type(1);
  static const int DB_Model_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_Model, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_Model, coins_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_Model, minerals_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_Model, coinstotal_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_Model, mineralstotal_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_Model, score_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_Model, exp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_Model, cash_),
  };
  DB_Model_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DB_Model_descriptor_,
      DB_Model::default_instance_,
      DB_Model_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_Model, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_Model, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DB_Model));
  DB_State_descriptor_ = file->message_type(2);
  static const int DB_State_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_State, tutorialcompleted_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_State, dmgprotectiontimeleft_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_State, dmgprotectiontimetotal_),
  };
  DB_State_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DB_State_descriptor_,
      DB_State::default_instance_,
      DB_State_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_State, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_State, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DB_State));
  DB_PlanetLiteInfo_descriptor_ = file->message_type(3);
  static const int DB_PlanetLiteInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_PlanetLiteInfo, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_PlanetLiteInfo, planetid_),
  };
  DB_PlanetLiteInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DB_PlanetLiteInfo_descriptor_,
      DB_PlanetLiteInfo::default_instance_,
      DB_PlanetLiteInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_PlanetLiteInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_PlanetLiteInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DB_PlanetLiteInfo));
  DB_Star_descriptor_ = file->message_type(4);
  static const int DB_Star_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_Star, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_Star, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_Star, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_Star, x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_Star, y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_Star, lite_),
  };
  DB_Star_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DB_Star_descriptor_,
      DB_Star::default_instance_,
      DB_Star_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_Star, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_Star, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DB_Star));
  DB_Item_descriptor_ = file->message_type(5);
  static const int DB_Item_offsets_[15] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_Item, sid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_Item, sku_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_Item, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_Item, upgradeid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_Item, isflipped_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_Item, energypercent_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_Item, energy_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_Item, x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_Item, y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_Item, state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_Item, time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_Item, incometorestore_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_Item, repairing_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_Item, repairstart_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_Item, updateat_),
  };
  DB_Item_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DB_Item_descriptor_,
      DB_Item::default_instance_,
      DB_Item_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_Item, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_Item, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DB_Item));
  DB_Hangar_descriptor_ = file->message_type(6);
  static const int DB_Hangar_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_Hangar, sid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_Hangar, sku_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_Hangar, num_),
  };
  DB_Hangar_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DB_Hangar_descriptor_,
      DB_Hangar::default_instance_,
      DB_Hangar_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_Hangar, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_Hangar, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DB_Hangar));
  DB_GameUnit_descriptor_ = file->message_type(7);
  static const int DB_GameUnit_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_GameUnit, sku_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_GameUnit, unlock_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_GameUnit, upgradeid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_GameUnit, timeleft_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_GameUnit, updateat_),
  };
  DB_GameUnit_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DB_GameUnit_descriptor_,
      DB_GameUnit::default_instance_,
      DB_GameUnit_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_GameUnit, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_GameUnit, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DB_GameUnit));
  DB_Planet_descriptor_ = file->message_type(8);
  static const int DB_Planet_offsets_[12] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_Planet, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_Planet, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_Planet, hqlevel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_Planet, droids_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_Planet, droidinuse_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_Planet, capital_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_Planet, coinslimit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_Planet, minerallimit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_Planet, star_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_Planet, items_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_Planet, hangars_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_Planet, units_),
  };
  DB_Planet_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DB_Planet_descriptor_,
      DB_Planet::default_instance_,
      DB_Planet_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_Planet, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_Planet, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DB_Planet));
  DB_NPC_descriptor_ = file->message_type(9);
  static const int DB_NPC_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_NPC, sku_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_NPC, exp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_NPC, hqlevel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_NPC, npcid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_NPC, items_),
  };
  DB_NPC_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DB_NPC_descriptor_,
      DB_NPC::default_instance_,
      DB_NPC_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_NPC, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_NPC, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DB_NPC));
  DB_Player_descriptor_ = file->message_type(10);
  static const int DB_Player_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_Player, model_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_Player, state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_Player, planets_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_Player, npcs_),
  };
  DB_Player_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DB_Player_descriptor_,
      DB_Player::default_instance_,
      DB_Player_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_Player, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_Player, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DB_Player));
  DB_User_descriptor_ = file->message_type(11);
  static const int DB_User_offsets_[11] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_User, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_User, openid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_User, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_User, head_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_User, last_login_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_User, regist_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_User, unbreaklogin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_User, isvalid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_User, orgin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_User, last_logout_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_User, player_),
  };
  DB_User_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DB_User_descriptor_,
      DB_User::default_instance_,
      DB_User_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_User, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_User, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DB_User));
  DB_GlobalStarInfo_descriptor_ = file->message_type(12);
  static const int DB_GlobalStarInfo_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_GlobalStarInfo, stars_),
  };
  DB_GlobalStarInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DB_GlobalStarInfo_descriptor_,
      DB_GlobalStarInfo::default_instance_,
      DB_GlobalStarInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_GlobalStarInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_GlobalStarInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DB_GlobalStarInfo));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_dbinterface_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DB_BitCache_descriptor_, &DB_BitCache::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DB_Model_descriptor_, &DB_Model::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DB_State_descriptor_, &DB_State::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DB_PlanetLiteInfo_descriptor_, &DB_PlanetLiteInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DB_Star_descriptor_, &DB_Star::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DB_Item_descriptor_, &DB_Item::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DB_Hangar_descriptor_, &DB_Hangar::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DB_GameUnit_descriptor_, &DB_GameUnit::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DB_Planet_descriptor_, &DB_Planet::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DB_NPC_descriptor_, &DB_NPC::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DB_Player_descriptor_, &DB_Player::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DB_User_descriptor_, &DB_User::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DB_GlobalStarInfo_descriptor_, &DB_GlobalStarInfo::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_dbinterface_2eproto() {
  delete DB_BitCache::default_instance_;
  delete DB_BitCache_reflection_;
  delete DB_Model::default_instance_;
  delete DB_Model_reflection_;
  delete DB_State::default_instance_;
  delete DB_State_reflection_;
  delete DB_PlanetLiteInfo::default_instance_;
  delete DB_PlanetLiteInfo_reflection_;
  delete DB_Star::default_instance_;
  delete DB_Star_reflection_;
  delete DB_Item::default_instance_;
  delete DB_Item_reflection_;
  delete DB_Hangar::default_instance_;
  delete DB_Hangar_reflection_;
  delete DB_GameUnit::default_instance_;
  delete DB_GameUnit_reflection_;
  delete DB_Planet::default_instance_;
  delete DB_Planet_reflection_;
  delete DB_NPC::default_instance_;
  delete DB_NPC_reflection_;
  delete DB_Player::default_instance_;
  delete DB_Player_reflection_;
  delete DB_User::default_instance_;
  delete DB_User_reflection_;
  delete DB_GlobalStarInfo::default_instance_;
  delete DB_GlobalStarInfo_reflection_;
}

void protobuf_AddDesc_dbinterface_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\021dbinterface.proto\"\032\n\013DB_BitCache\022\013\n\003bi"
    "t\030\001 \003(\005\"\217\001\n\010DB_Model\022\r\n\005level\030\001 \001(\005\022\r\n\005c"
    "oins\030\002 \001(\003\022\020\n\010minerals\030\003 \001(\003\022\022\n\ncoinsTot"
    "al\030\004 \001(\003\022\025\n\rmineralsTotal\030\005 \001(\003\022\r\n\005score"
    "\030\006 \001(\005\022\013\n\003exp\030\007 \001(\005\022\014\n\004cash\030\010 \001(\005\"d\n\010DB_"
    "State\022\031\n\021tutorialCompleted\030\001 \001(\005\022\035\n\025dmgP"
    "rotectionTimeLeft\030\002 \001(\005\022\036\n\026dmgProtection"
    "TimeTotal\030\003 \001(\005\"2\n\021DB_PlanetLiteInfo\022\013\n\003"
    "uid\030\001 \001(\003\022\020\n\010planetId\030\002 \001(\003\"i\n\007DB_Star\022\n"
    "\n\002id\030\001 \001(\005\022\014\n\004type\030\002 \001(\005\022\014\n\004name\030\003 \001(\005\022\t"
    "\n\001x\030\004 \001(\005\022\t\n\001y\030\005 \001(\005\022 \n\004lite\030\006 \003(\0132\022.DB_"
    "PlanetLiteInfo\"\204\002\n\007DB_Item\022\013\n\003sid\030\001 \001(\005\022"
    "\013\n\003sku\030\002 \001(\005\022\014\n\004type\030\003 \001(\005\022\021\n\tupgradeId\030"
    "\004 \001(\005\022\021\n\tisFlipped\030\005 \001(\005\022\025\n\renergyPercen"
    "t\030\006 \001(\005\022\016\n\006energy\030\007 \001(\005\022\t\n\001x\030\010 \001(\005\022\t\n\001y\030"
    "\t \001(\005\022\r\n\005state\030\n \001(\005\022\014\n\004time\030\013 \001(\005\022\027\n\017in"
    "comeToRestore\030\014 \001(\005\022\021\n\trepairing\030\r \001(\005\022\023"
    "\n\013repairStart\030\016 \001(\003\022\020\n\010updateAt\030\017 \001(\003\"2\n"
    "\tDB_Hangar\022\013\n\003sid\030\001 \001(\005\022\013\n\003sku\030\002 \001(\005\022\013\n\003"
    "num\030\003 \001(\005\"a\n\013DB_GameUnit\022\013\n\003sku\030\001 \001(\005\022\016\n"
    "\006unlock\030\002 \001(\005\022\021\n\tupgradeId\030\003 \001(\005\022\020\n\010time"
    "Left\030\004 \001(\005\022\020\n\010updateAt\030\005 \001(\003\"\366\001\n\tDB_Plan"
    "et\022\n\n\002id\030\001 \001(\005\022\014\n\004type\030\002 \001(\005\022\017\n\007HQLevel\030"
    "\003 \001(\005\022\016\n\006Droids\030\004 \001(\005\022\022\n\nDroidInUse\030\005 \001("
    "\005\022\017\n\007Capital\030\006 \001(\005\022\022\n\nCoinsLimit\030\007 \001(\003\022\024"
    "\n\014MineralLimit\030\010 \001(\003\022\014\n\004star\030\t \001(\005\022\027\n\005it"
    "ems\030\n \003(\0132\010.DB_Item\022\033\n\007hangars\030\013 \003(\0132\n.D"
    "B_Hangar\022\033\n\005units\030\014 \003(\0132\014.DB_GameUnit\"[\n"
    "\006DB_NPC\022\013\n\003sku\030\001 \001(\005\022\013\n\003exp\030\002 \001(\005\022\017\n\007HQL"
    "evel\030\003 \001(\005\022\r\n\005npcId\030\004 \001(\005\022\027\n\005items\030\005 \003(\013"
    "2\010.DB_Item\"s\n\tDB_Player\022\030\n\005model\030\001 \001(\0132\t"
    ".DB_Model\022\030\n\005state\030\002 \001(\0132\t.DB_State\022\033\n\007p"
    "lanets\030\003 \003(\0132\n.DB_Planet\022\025\n\004npcs\030\004 \003(\0132\007"
    ".DB_NPC\"\333\001\n\007DB_User\022\n\n\002id\030\001 \002(\003\022\016\n\006openi"
    "d\030\002 \002(\t\022\014\n\004name\030\003 \001(\t\022\014\n\004head\030\004 \001(\005\022\027\n\017l"
    "ast_login_time\030\005 \001(\003\022\023\n\013regist_time\030\006 \001("
    "\003\022\024\n\014unbreakLogin\030\007 \001(\005\022\017\n\007isValid\030\010 \001(\005"
    "\022\r\n\005orgin\030\t \001(\005\022\030\n\020last_logout_time\030\n \001("
    "\003\022\032\n\006player\030\013 \002(\0132\n.DB_Player\",\n\021DB_Glob"
    "alStarInfo\022\027\n\005stars\030\001 \003(\0132\010.DB_Star", 1595);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "dbinterface.proto", &protobuf_RegisterTypes);
  DB_BitCache::default_instance_ = new DB_BitCache();
  DB_Model::default_instance_ = new DB_Model();
  DB_State::default_instance_ = new DB_State();
  DB_PlanetLiteInfo::default_instance_ = new DB_PlanetLiteInfo();
  DB_Star::default_instance_ = new DB_Star();
  DB_Item::default_instance_ = new DB_Item();
  DB_Hangar::default_instance_ = new DB_Hangar();
  DB_GameUnit::default_instance_ = new DB_GameUnit();
  DB_Planet::default_instance_ = new DB_Planet();
  DB_NPC::default_instance_ = new DB_NPC();
  DB_Player::default_instance_ = new DB_Player();
  DB_User::default_instance_ = new DB_User();
  DB_GlobalStarInfo::default_instance_ = new DB_GlobalStarInfo();
  DB_BitCache::default_instance_->InitAsDefaultInstance();
  DB_Model::default_instance_->InitAsDefaultInstance();
  DB_State::default_instance_->InitAsDefaultInstance();
  DB_PlanetLiteInfo::default_instance_->InitAsDefaultInstance();
  DB_Star::default_instance_->InitAsDefaultInstance();
  DB_Item::default_instance_->InitAsDefaultInstance();
  DB_Hangar::default_instance_->InitAsDefaultInstance();
  DB_GameUnit::default_instance_->InitAsDefaultInstance();
  DB_Planet::default_instance_->InitAsDefaultInstance();
  DB_NPC::default_instance_->InitAsDefaultInstance();
  DB_Player::default_instance_->InitAsDefaultInstance();
  DB_User::default_instance_->InitAsDefaultInstance();
  DB_GlobalStarInfo::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_dbinterface_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_dbinterface_2eproto {
  StaticDescriptorInitializer_dbinterface_2eproto() {
    protobuf_AddDesc_dbinterface_2eproto();
  }
} static_descriptor_initializer_dbinterface_2eproto_;


// ===================================================================

#ifndef _MSC_VER
const int DB_BitCache::kBitFieldNumber;
#endif  // !_MSC_VER

DB_BitCache::DB_BitCache() {
  SharedCtor();
}

void DB_BitCache::InitAsDefaultInstance() {
}

DB_BitCache::DB_BitCache(const DB_BitCache& from) {
  SharedCtor();
  MergeFrom(from);
}

void DB_BitCache::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DB_BitCache::~DB_BitCache() {
  SharedDtor();
}

void DB_BitCache::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* DB_BitCache::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DB_BitCache_descriptor_;
}

const DB_BitCache& DB_BitCache::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dbinterface_2eproto();  return *default_instance_;
}

DB_BitCache* DB_BitCache::default_instance_ = NULL;

DB_BitCache* DB_BitCache::New() const {
  return new DB_BitCache;
}

void DB_BitCache::Clear() {
  bit_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DB_BitCache::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated int32 bit = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_bit:
        ::google::protobuf::int32 value;
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &value));
        add_bit(value);
        if (input->ExpectTag(8)) goto parse_bit;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DB_BitCache::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    DB_BitCache::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // repeated int32 bit = 1;
  for (int i = 0; i < this->bit_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      1, this->bit(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DB_BitCache::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated int32 bit = 1;
  for (int i = 0; i < this->bit_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(1, this->bit(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DB_BitCache::ByteSize() const {
  int total_size = 0;
  
  // repeated int32 bit = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->bit_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->bit(i));
    }
    total_size += 1 * this->bit_size() + data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void DB_BitCache::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DB_BitCache* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DB_BitCache*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DB_BitCache::MergeFrom(const DB_BitCache& from) {
  GOOGLE_CHECK_NE(&from, this);
  bit_.MergeFrom(from.bit_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DB_BitCache::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DB_BitCache::CopyFrom(const DB_BitCache& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DB_BitCache::IsInitialized() const {
  
  return true;
}

void DB_BitCache::Swap(DB_BitCache* other) {
  if (other != this) {
    bit_.Swap(&other->bit_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DB_BitCache::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DB_BitCache_descriptor_;
  metadata.reflection = DB_BitCache_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DB_Model::kLevelFieldNumber;
const int DB_Model::kCoinsFieldNumber;
const int DB_Model::kMineralsFieldNumber;
const int DB_Model::kCoinsTotalFieldNumber;
const int DB_Model::kMineralsTotalFieldNumber;
const int DB_Model::kScoreFieldNumber;
const int DB_Model::kExpFieldNumber;
const int DB_Model::kCashFieldNumber;
#endif  // !_MSC_VER

DB_Model::DB_Model() {
  SharedCtor();
}

void DB_Model::InitAsDefaultInstance() {
}

DB_Model::DB_Model(const DB_Model& from) {
  SharedCtor();
  MergeFrom(from);
}

void DB_Model::SharedCtor() {
  _cached_size_ = 0;
  level_ = 0;
  coins_ = GOOGLE_LONGLONG(0);
  minerals_ = GOOGLE_LONGLONG(0);
  coinstotal_ = GOOGLE_LONGLONG(0);
  mineralstotal_ = GOOGLE_LONGLONG(0);
  score_ = 0;
  exp_ = 0;
  cash_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DB_Model::~DB_Model() {
  SharedDtor();
}

void DB_Model::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* DB_Model::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DB_Model_descriptor_;
}

const DB_Model& DB_Model::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dbinterface_2eproto();  return *default_instance_;
}

DB_Model* DB_Model::default_instance_ = NULL;

DB_Model* DB_Model::New() const {
  return new DB_Model;
}

void DB_Model::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    level_ = 0;
    coins_ = GOOGLE_LONGLONG(0);
    minerals_ = GOOGLE_LONGLONG(0);
    coinstotal_ = GOOGLE_LONGLONG(0);
    mineralstotal_ = GOOGLE_LONGLONG(0);
    score_ = 0;
    exp_ = 0;
    cash_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DB_Model::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 level = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &level_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_coins;
        break;
      }
      
      // optional int64 coins = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_coins:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt64(
              input, &coins_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_minerals;
        break;
      }
      
      // optional int64 minerals = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_minerals:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt64(
              input, &minerals_));
        _set_bit(2);
        if (input->ExpectTag(32)) goto parse_coinsTotal;
        break;
      }
      
      // optional int64 coinsTotal = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_coinsTotal:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt64(
              input, &coinstotal_));
        _set_bit(3);
        if (input->ExpectTag(40)) goto parse_mineralsTotal;
        break;
      }
      
      // optional int64 mineralsTotal = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_mineralsTotal:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt64(
              input, &mineralstotal_));
        _set_bit(4);
        if (input->ExpectTag(48)) goto parse_score;
        break;
      }
      
      // optional int32 score = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_score:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &score_));
        _set_bit(5);
        if (input->ExpectTag(56)) goto parse_exp;
        break;
      }
      
      // optional int32 exp = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_exp:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &exp_));
        _set_bit(6);
        if (input->ExpectTag(64)) goto parse_cash;
        break;
      }
      
      // optional int32 cash = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_cash:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &cash_));
        _set_bit(7);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DB_Model::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    DB_Model::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional int32 level = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->level(), output);
  }
  
  // optional int64 coins = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->coins(), output);
  }
  
  // optional int64 minerals = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->minerals(), output);
  }
  
  // optional int64 coinsTotal = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->coinstotal(), output);
  }
  
  // optional int64 mineralsTotal = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->mineralstotal(), output);
  }
  
  // optional int32 score = 6;
  if (_has_bit(5)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->score(), output);
  }
  
  // optional int32 exp = 7;
  if (_has_bit(6)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->exp(), output);
  }
  
  // optional int32 cash = 8;
  if (_has_bit(7)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->cash(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DB_Model::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 level = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->level(), target);
  }
  
  // optional int64 coins = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->coins(), target);
  }
  
  // optional int64 minerals = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->minerals(), target);
  }
  
  // optional int64 coinsTotal = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->coinstotal(), target);
  }
  
  // optional int64 mineralsTotal = 5;
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->mineralstotal(), target);
  }
  
  // optional int32 score = 6;
  if (_has_bit(5)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->score(), target);
  }
  
  // optional int32 exp = 7;
  if (_has_bit(6)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->exp(), target);
  }
  
  // optional int32 cash = 8;
  if (_has_bit(7)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->cash(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DB_Model::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 level = 1;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->level());
    }
    
    // optional int64 coins = 2;
    if (has_coins()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->coins());
    }
    
    // optional int64 minerals = 3;
    if (has_minerals()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->minerals());
    }
    
    // optional int64 coinsTotal = 4;
    if (has_coinstotal()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->coinstotal());
    }
    
    // optional int64 mineralsTotal = 5;
    if (has_mineralstotal()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->mineralstotal());
    }
    
    // optional int32 score = 6;
    if (has_score()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->score());
    }
    
    // optional int32 exp = 7;
    if (has_exp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->exp());
    }
    
    // optional int32 cash = 8;
    if (has_cash()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cash());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void DB_Model::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DB_Model* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DB_Model*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DB_Model::MergeFrom(const DB_Model& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_level(from.level());
    }
    if (from._has_bit(1)) {
      set_coins(from.coins());
    }
    if (from._has_bit(2)) {
      set_minerals(from.minerals());
    }
    if (from._has_bit(3)) {
      set_coinstotal(from.coinstotal());
    }
    if (from._has_bit(4)) {
      set_mineralstotal(from.mineralstotal());
    }
    if (from._has_bit(5)) {
      set_score(from.score());
    }
    if (from._has_bit(6)) {
      set_exp(from.exp());
    }
    if (from._has_bit(7)) {
      set_cash(from.cash());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DB_Model::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DB_Model::CopyFrom(const DB_Model& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DB_Model::IsInitialized() const {
  
  return true;
}

void DB_Model::Swap(DB_Model* other) {
  if (other != this) {
    std::swap(level_, other->level_);
    std::swap(coins_, other->coins_);
    std::swap(minerals_, other->minerals_);
    std::swap(coinstotal_, other->coinstotal_);
    std::swap(mineralstotal_, other->mineralstotal_);
    std::swap(score_, other->score_);
    std::swap(exp_, other->exp_);
    std::swap(cash_, other->cash_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DB_Model::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DB_Model_descriptor_;
  metadata.reflection = DB_Model_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DB_State::kTutorialCompletedFieldNumber;
const int DB_State::kDmgProtectionTimeLeftFieldNumber;
const int DB_State::kDmgProtectionTimeTotalFieldNumber;
#endif  // !_MSC_VER

DB_State::DB_State() {
  SharedCtor();
}

void DB_State::InitAsDefaultInstance() {
}

DB_State::DB_State(const DB_State& from) {
  SharedCtor();
  MergeFrom(from);
}

void DB_State::SharedCtor() {
  _cached_size_ = 0;
  tutorialcompleted_ = 0;
  dmgprotectiontimeleft_ = 0;
  dmgprotectiontimetotal_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DB_State::~DB_State() {
  SharedDtor();
}

void DB_State::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* DB_State::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DB_State_descriptor_;
}

const DB_State& DB_State::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dbinterface_2eproto();  return *default_instance_;
}

DB_State* DB_State::default_instance_ = NULL;

DB_State* DB_State::New() const {
  return new DB_State;
}

void DB_State::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    tutorialcompleted_ = 0;
    dmgprotectiontimeleft_ = 0;
    dmgprotectiontimetotal_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DB_State::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 tutorialCompleted = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &tutorialcompleted_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_dmgProtectionTimeLeft;
        break;
      }
      
      // optional int32 dmgProtectionTimeLeft = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_dmgProtectionTimeLeft:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &dmgprotectiontimeleft_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_dmgProtectionTimeTotal;
        break;
      }
      
      // optional int32 dmgProtectionTimeTotal = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_dmgProtectionTimeTotal:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &dmgprotectiontimetotal_));
        _set_bit(2);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DB_State::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    DB_State::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional int32 tutorialCompleted = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->tutorialcompleted(), output);
  }
  
  // optional int32 dmgProtectionTimeLeft = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->dmgprotectiontimeleft(), output);
  }
  
  // optional int32 dmgProtectionTimeTotal = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->dmgprotectiontimetotal(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DB_State::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 tutorialCompleted = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->tutorialcompleted(), target);
  }
  
  // optional int32 dmgProtectionTimeLeft = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->dmgprotectiontimeleft(), target);
  }
  
  // optional int32 dmgProtectionTimeTotal = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->dmgprotectiontimetotal(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DB_State::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 tutorialCompleted = 1;
    if (has_tutorialcompleted()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tutorialcompleted());
    }
    
    // optional int32 dmgProtectionTimeLeft = 2;
    if (has_dmgprotectiontimeleft()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->dmgprotectiontimeleft());
    }
    
    // optional int32 dmgProtectionTimeTotal = 3;
    if (has_dmgprotectiontimetotal()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->dmgprotectiontimetotal());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void DB_State::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DB_State* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DB_State*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DB_State::MergeFrom(const DB_State& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_tutorialcompleted(from.tutorialcompleted());
    }
    if (from._has_bit(1)) {
      set_dmgprotectiontimeleft(from.dmgprotectiontimeleft());
    }
    if (from._has_bit(2)) {
      set_dmgprotectiontimetotal(from.dmgprotectiontimetotal());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DB_State::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DB_State::CopyFrom(const DB_State& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DB_State::IsInitialized() const {
  
  return true;
}

void DB_State::Swap(DB_State* other) {
  if (other != this) {
    std::swap(tutorialcompleted_, other->tutorialcompleted_);
    std::swap(dmgprotectiontimeleft_, other->dmgprotectiontimeleft_);
    std::swap(dmgprotectiontimetotal_, other->dmgprotectiontimetotal_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DB_State::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DB_State_descriptor_;
  metadata.reflection = DB_State_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DB_PlanetLiteInfo::kUidFieldNumber;
const int DB_PlanetLiteInfo::kPlanetIdFieldNumber;
#endif  // !_MSC_VER

DB_PlanetLiteInfo::DB_PlanetLiteInfo() {
  SharedCtor();
}

void DB_PlanetLiteInfo::InitAsDefaultInstance() {
}

DB_PlanetLiteInfo::DB_PlanetLiteInfo(const DB_PlanetLiteInfo& from) {
  SharedCtor();
  MergeFrom(from);
}

void DB_PlanetLiteInfo::SharedCtor() {
  _cached_size_ = 0;
  uid_ = GOOGLE_LONGLONG(0);
  planetid_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DB_PlanetLiteInfo::~DB_PlanetLiteInfo() {
  SharedDtor();
}

void DB_PlanetLiteInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* DB_PlanetLiteInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DB_PlanetLiteInfo_descriptor_;
}

const DB_PlanetLiteInfo& DB_PlanetLiteInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dbinterface_2eproto();  return *default_instance_;
}

DB_PlanetLiteInfo* DB_PlanetLiteInfo::default_instance_ = NULL;

DB_PlanetLiteInfo* DB_PlanetLiteInfo::New() const {
  return new DB_PlanetLiteInfo;
}

void DB_PlanetLiteInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    uid_ = GOOGLE_LONGLONG(0);
    planetid_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DB_PlanetLiteInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 uid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt64(
              input, &uid_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_planetId;
        break;
      }
      
      // optional int64 planetId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_planetId:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt64(
              input, &planetid_));
        _set_bit(1);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DB_PlanetLiteInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    DB_PlanetLiteInfo::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional int64 uid = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->uid(), output);
  }
  
  // optional int64 planetId = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->planetid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DB_PlanetLiteInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int64 uid = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->uid(), target);
  }
  
  // optional int64 planetId = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->planetid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DB_PlanetLiteInfo::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 uid = 1;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->uid());
    }
    
    // optional int64 planetId = 2;
    if (has_planetid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->planetid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void DB_PlanetLiteInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DB_PlanetLiteInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DB_PlanetLiteInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DB_PlanetLiteInfo::MergeFrom(const DB_PlanetLiteInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_uid(from.uid());
    }
    if (from._has_bit(1)) {
      set_planetid(from.planetid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DB_PlanetLiteInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DB_PlanetLiteInfo::CopyFrom(const DB_PlanetLiteInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DB_PlanetLiteInfo::IsInitialized() const {
  
  return true;
}

void DB_PlanetLiteInfo::Swap(DB_PlanetLiteInfo* other) {
  if (other != this) {
    std::swap(uid_, other->uid_);
    std::swap(planetid_, other->planetid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DB_PlanetLiteInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DB_PlanetLiteInfo_descriptor_;
  metadata.reflection = DB_PlanetLiteInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DB_Star::kIdFieldNumber;
const int DB_Star::kTypeFieldNumber;
const int DB_Star::kNameFieldNumber;
const int DB_Star::kXFieldNumber;
const int DB_Star::kYFieldNumber;
const int DB_Star::kLiteFieldNumber;
#endif  // !_MSC_VER

DB_Star::DB_Star() {
  SharedCtor();
}

void DB_Star::InitAsDefaultInstance() {
}

DB_Star::DB_Star(const DB_Star& from) {
  SharedCtor();
  MergeFrom(from);
}

void DB_Star::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  type_ = 0;
  name_ = 0;
  x_ = 0;
  y_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DB_Star::~DB_Star() {
  SharedDtor();
}

void DB_Star::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* DB_Star::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DB_Star_descriptor_;
}

const DB_Star& DB_Star::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dbinterface_2eproto();  return *default_instance_;
}

DB_Star* DB_Star::default_instance_ = NULL;

DB_Star* DB_Star::New() const {
  return new DB_Star;
}

void DB_Star::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    type_ = 0;
    name_ = 0;
    x_ = 0;
    y_ = 0;
  }
  lite_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DB_Star::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &id_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }
      
      // optional int32 type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_type:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &type_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_name;
        break;
      }
      
      // optional int32 name = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_name:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &name_));
        _set_bit(2);
        if (input->ExpectTag(32)) goto parse_x;
        break;
      }
      
      // optional int32 x = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_x:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &x_));
        _set_bit(3);
        if (input->ExpectTag(40)) goto parse_y;
        break;
      }
      
      // optional int32 y = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_y:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &y_));
        _set_bit(4);
        if (input->ExpectTag(50)) goto parse_lite;
        break;
      }
      
      // repeated .DB_PlanetLiteInfo lite = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_lite:
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, add_lite()));
        if (input->ExpectTag(50)) goto parse_lite;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DB_Star::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    DB_Star::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional int32 id = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }
  
  // optional int32 type = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->type(), output);
  }
  
  // optional int32 name = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->name(), output);
  }
  
  // optional int32 x = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->x(), output);
  }
  
  // optional int32 y = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->y(), output);
  }
  
  // repeated .DB_PlanetLiteInfo lite = 6;
  for (int i = 0; i < this->lite_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      6, this->lite(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DB_Star::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 id = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }
  
  // optional int32 type = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->type(), target);
  }
  
  // optional int32 name = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->name(), target);
  }
  
  // optional int32 x = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->x(), target);
  }
  
  // optional int32 y = 5;
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->y(), target);
  }
  
  // repeated .DB_PlanetLiteInfo lite = 6;
  for (int i = 0; i < this->lite_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->lite(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DB_Star::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }
    
    // optional int32 type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }
    
    // optional int32 name = 3;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->name());
    }
    
    // optional int32 x = 4;
    if (has_x()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->x());
    }
    
    // optional int32 y = 5;
    if (has_y()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->y());
    }
    
  }
  // repeated .DB_PlanetLiteInfo lite = 6;
  total_size += 1 * this->lite_size();
  for (int i = 0; i < this->lite_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->lite(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void DB_Star::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DB_Star* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DB_Star*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DB_Star::MergeFrom(const DB_Star& from) {
  GOOGLE_CHECK_NE(&from, this);
  lite_.MergeFrom(from.lite_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_id(from.id());
    }
    if (from._has_bit(1)) {
      set_type(from.type());
    }
    if (from._has_bit(2)) {
      set_name(from.name());
    }
    if (from._has_bit(3)) {
      set_x(from.x());
    }
    if (from._has_bit(4)) {
      set_y(from.y());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DB_Star::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DB_Star::CopyFrom(const DB_Star& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DB_Star::IsInitialized() const {
  
  return true;
}

void DB_Star::Swap(DB_Star* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(type_, other->type_);
    std::swap(name_, other->name_);
    std::swap(x_, other->x_);
    std::swap(y_, other->y_);
    lite_.Swap(&other->lite_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DB_Star::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DB_Star_descriptor_;
  metadata.reflection = DB_Star_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DB_Item::kSidFieldNumber;
const int DB_Item::kSkuFieldNumber;
const int DB_Item::kTypeFieldNumber;
const int DB_Item::kUpgradeIdFieldNumber;
const int DB_Item::kIsFlippedFieldNumber;
const int DB_Item::kEnergyPercentFieldNumber;
const int DB_Item::kEnergyFieldNumber;
const int DB_Item::kXFieldNumber;
const int DB_Item::kYFieldNumber;
const int DB_Item::kStateFieldNumber;
const int DB_Item::kTimeFieldNumber;
const int DB_Item::kIncomeToRestoreFieldNumber;
const int DB_Item::kRepairingFieldNumber;
const int DB_Item::kRepairStartFieldNumber;
const int DB_Item::kUpdateAtFieldNumber;
#endif  // !_MSC_VER

DB_Item::DB_Item() {
  SharedCtor();
}

void DB_Item::InitAsDefaultInstance() {
}

DB_Item::DB_Item(const DB_Item& from) {
  SharedCtor();
  MergeFrom(from);
}

void DB_Item::SharedCtor() {
  _cached_size_ = 0;
  sid_ = 0;
  sku_ = 0;
  type_ = 0;
  upgradeid_ = 0;
  isflipped_ = 0;
  energypercent_ = 0;
  energy_ = 0;
  x_ = 0;
  y_ = 0;
  state_ = 0;
  time_ = 0;
  incometorestore_ = 0;
  repairing_ = 0;
  repairstart_ = GOOGLE_LONGLONG(0);
  updateat_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DB_Item::~DB_Item() {
  SharedDtor();
}

void DB_Item::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* DB_Item::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DB_Item_descriptor_;
}

const DB_Item& DB_Item::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dbinterface_2eproto();  return *default_instance_;
}

DB_Item* DB_Item::default_instance_ = NULL;

DB_Item* DB_Item::New() const {
  return new DB_Item;
}

void DB_Item::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    sid_ = 0;
    sku_ = 0;
    type_ = 0;
    upgradeid_ = 0;
    isflipped_ = 0;
    energypercent_ = 0;
    energy_ = 0;
    x_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    y_ = 0;
    state_ = 0;
    time_ = 0;
    incometorestore_ = 0;
    repairing_ = 0;
    repairstart_ = GOOGLE_LONGLONG(0);
    updateat_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DB_Item::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 sid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &sid_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_sku;
        break;
      }
      
      // optional int32 sku = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_sku:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &sku_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_type;
        break;
      }
      
      // optional int32 type = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_type:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &type_));
        _set_bit(2);
        if (input->ExpectTag(32)) goto parse_upgradeId;
        break;
      }
      
      // optional int32 upgradeId = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_upgradeId:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &upgradeid_));
        _set_bit(3);
        if (input->ExpectTag(40)) goto parse_isFlipped;
        break;
      }
      
      // optional int32 isFlipped = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_isFlipped:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &isflipped_));
        _set_bit(4);
        if (input->ExpectTag(48)) goto parse_energyPercent;
        break;
      }
      
      // optional int32 energyPercent = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_energyPercent:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &energypercent_));
        _set_bit(5);
        if (input->ExpectTag(56)) goto parse_energy;
        break;
      }
      
      // optional int32 energy = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_energy:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &energy_));
        _set_bit(6);
        if (input->ExpectTag(64)) goto parse_x;
        break;
      }
      
      // optional int32 x = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_x:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &x_));
        _set_bit(7);
        if (input->ExpectTag(72)) goto parse_y;
        break;
      }
      
      // optional int32 y = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_y:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &y_));
        _set_bit(8);
        if (input->ExpectTag(80)) goto parse_state;
        break;
      }
      
      // optional int32 state = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_state:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &state_));
        _set_bit(9);
        if (input->ExpectTag(88)) goto parse_time;
        break;
      }
      
      // optional int32 time = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_time:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &time_));
        _set_bit(10);
        if (input->ExpectTag(96)) goto parse_incomeToRestore;
        break;
      }
      
      // optional int32 incomeToRestore = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_incomeToRestore:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &incometorestore_));
        _set_bit(11);
        if (input->ExpectTag(104)) goto parse_repairing;
        break;
      }
      
      // optional int32 repairing = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_repairing:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &repairing_));
        _set_bit(12);
        if (input->ExpectTag(112)) goto parse_repairStart;
        break;
      }
      
      // optional int64 repairStart = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_repairStart:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt64(
              input, &repairstart_));
        _set_bit(13);
        if (input->ExpectTag(120)) goto parse_updateAt;
        break;
      }
      
      // optional int64 updateAt = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_updateAt:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt64(
              input, &updateat_));
        _set_bit(14);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DB_Item::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    DB_Item::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional int32 sid = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->sid(), output);
  }
  
  // optional int32 sku = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->sku(), output);
  }
  
  // optional int32 type = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->type(), output);
  }
  
  // optional int32 upgradeId = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->upgradeid(), output);
  }
  
  // optional int32 isFlipped = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->isflipped(), output);
  }
  
  // optional int32 energyPercent = 6;
  if (_has_bit(5)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->energypercent(), output);
  }
  
  // optional int32 energy = 7;
  if (_has_bit(6)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->energy(), output);
  }
  
  // optional int32 x = 8;
  if (_has_bit(7)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->x(), output);
  }
  
  // optional int32 y = 9;
  if (_has_bit(8)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->y(), output);
  }
  
  // optional int32 state = 10;
  if (_has_bit(9)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->state(), output);
  }
  
  // optional int32 time = 11;
  if (_has_bit(10)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->time(), output);
  }
  
  // optional int32 incomeToRestore = 12;
  if (_has_bit(11)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->incometorestore(), output);
  }
  
  // optional int32 repairing = 13;
  if (_has_bit(12)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->repairing(), output);
  }
  
  // optional int64 repairStart = 14;
  if (_has_bit(13)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(14, this->repairstart(), output);
  }
  
  // optional int64 updateAt = 15;
  if (_has_bit(14)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(15, this->updateat(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DB_Item::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 sid = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->sid(), target);
  }
  
  // optional int32 sku = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->sku(), target);
  }
  
  // optional int32 type = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->type(), target);
  }
  
  // optional int32 upgradeId = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->upgradeid(), target);
  }
  
  // optional int32 isFlipped = 5;
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->isflipped(), target);
  }
  
  // optional int32 energyPercent = 6;
  if (_has_bit(5)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->energypercent(), target);
  }
  
  // optional int32 energy = 7;
  if (_has_bit(6)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->energy(), target);
  }
  
  // optional int32 x = 8;
  if (_has_bit(7)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->x(), target);
  }
  
  // optional int32 y = 9;
  if (_has_bit(8)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->y(), target);
  }
  
  // optional int32 state = 10;
  if (_has_bit(9)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->state(), target);
  }
  
  // optional int32 time = 11;
  if (_has_bit(10)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->time(), target);
  }
  
  // optional int32 incomeToRestore = 12;
  if (_has_bit(11)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->incometorestore(), target);
  }
  
  // optional int32 repairing = 13;
  if (_has_bit(12)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->repairing(), target);
  }
  
  // optional int64 repairStart = 14;
  if (_has_bit(13)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(14, this->repairstart(), target);
  }
  
  // optional int64 updateAt = 15;
  if (_has_bit(14)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(15, this->updateat(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DB_Item::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 sid = 1;
    if (has_sid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sid());
    }
    
    // optional int32 sku = 2;
    if (has_sku()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sku());
    }
    
    // optional int32 type = 3;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }
    
    // optional int32 upgradeId = 4;
    if (has_upgradeid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->upgradeid());
    }
    
    // optional int32 isFlipped = 5;
    if (has_isflipped()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->isflipped());
    }
    
    // optional int32 energyPercent = 6;
    if (has_energypercent()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->energypercent());
    }
    
    // optional int32 energy = 7;
    if (has_energy()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->energy());
    }
    
    // optional int32 x = 8;
    if (has_x()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->x());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 y = 9;
    if (has_y()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->y());
    }
    
    // optional int32 state = 10;
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->state());
    }
    
    // optional int32 time = 11;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->time());
    }
    
    // optional int32 incomeToRestore = 12;
    if (has_incometorestore()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->incometorestore());
    }
    
    // optional int32 repairing = 13;
    if (has_repairing()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->repairing());
    }
    
    // optional int64 repairStart = 14;
    if (has_repairstart()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->repairstart());
    }
    
    // optional int64 updateAt = 15;
    if (has_updateat()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->updateat());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void DB_Item::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DB_Item* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DB_Item*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DB_Item::MergeFrom(const DB_Item& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_sid(from.sid());
    }
    if (from._has_bit(1)) {
      set_sku(from.sku());
    }
    if (from._has_bit(2)) {
      set_type(from.type());
    }
    if (from._has_bit(3)) {
      set_upgradeid(from.upgradeid());
    }
    if (from._has_bit(4)) {
      set_isflipped(from.isflipped());
    }
    if (from._has_bit(5)) {
      set_energypercent(from.energypercent());
    }
    if (from._has_bit(6)) {
      set_energy(from.energy());
    }
    if (from._has_bit(7)) {
      set_x(from.x());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from._has_bit(8)) {
      set_y(from.y());
    }
    if (from._has_bit(9)) {
      set_state(from.state());
    }
    if (from._has_bit(10)) {
      set_time(from.time());
    }
    if (from._has_bit(11)) {
      set_incometorestore(from.incometorestore());
    }
    if (from._has_bit(12)) {
      set_repairing(from.repairing());
    }
    if (from._has_bit(13)) {
      set_repairstart(from.repairstart());
    }
    if (from._has_bit(14)) {
      set_updateat(from.updateat());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DB_Item::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DB_Item::CopyFrom(const DB_Item& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DB_Item::IsInitialized() const {
  
  return true;
}

void DB_Item::Swap(DB_Item* other) {
  if (other != this) {
    std::swap(sid_, other->sid_);
    std::swap(sku_, other->sku_);
    std::swap(type_, other->type_);
    std::swap(upgradeid_, other->upgradeid_);
    std::swap(isflipped_, other->isflipped_);
    std::swap(energypercent_, other->energypercent_);
    std::swap(energy_, other->energy_);
    std::swap(x_, other->x_);
    std::swap(y_, other->y_);
    std::swap(state_, other->state_);
    std::swap(time_, other->time_);
    std::swap(incometorestore_, other->incometorestore_);
    std::swap(repairing_, other->repairing_);
    std::swap(repairstart_, other->repairstart_);
    std::swap(updateat_, other->updateat_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DB_Item::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DB_Item_descriptor_;
  metadata.reflection = DB_Item_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DB_Hangar::kSidFieldNumber;
const int DB_Hangar::kSkuFieldNumber;
const int DB_Hangar::kNumFieldNumber;
#endif  // !_MSC_VER

DB_Hangar::DB_Hangar() {
  SharedCtor();
}

void DB_Hangar::InitAsDefaultInstance() {
}

DB_Hangar::DB_Hangar(const DB_Hangar& from) {
  SharedCtor();
  MergeFrom(from);
}

void DB_Hangar::SharedCtor() {
  _cached_size_ = 0;
  sid_ = 0;
  sku_ = 0;
  num_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DB_Hangar::~DB_Hangar() {
  SharedDtor();
}

void DB_Hangar::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* DB_Hangar::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DB_Hangar_descriptor_;
}

const DB_Hangar& DB_Hangar::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dbinterface_2eproto();  return *default_instance_;
}

DB_Hangar* DB_Hangar::default_instance_ = NULL;

DB_Hangar* DB_Hangar::New() const {
  return new DB_Hangar;
}

void DB_Hangar::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    sid_ = 0;
    sku_ = 0;
    num_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DB_Hangar::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 sid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &sid_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_sku;
        break;
      }
      
      // optional int32 sku = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_sku:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &sku_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_num;
        break;
      }
      
      // optional int32 num = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_num:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &num_));
        _set_bit(2);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DB_Hangar::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    DB_Hangar::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional int32 sid = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->sid(), output);
  }
  
  // optional int32 sku = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->sku(), output);
  }
  
  // optional int32 num = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->num(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DB_Hangar::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 sid = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->sid(), target);
  }
  
  // optional int32 sku = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->sku(), target);
  }
  
  // optional int32 num = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->num(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DB_Hangar::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 sid = 1;
    if (has_sid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sid());
    }
    
    // optional int32 sku = 2;
    if (has_sku()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sku());
    }
    
    // optional int32 num = 3;
    if (has_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->num());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void DB_Hangar::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DB_Hangar* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DB_Hangar*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DB_Hangar::MergeFrom(const DB_Hangar& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_sid(from.sid());
    }
    if (from._has_bit(1)) {
      set_sku(from.sku());
    }
    if (from._has_bit(2)) {
      set_num(from.num());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DB_Hangar::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DB_Hangar::CopyFrom(const DB_Hangar& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DB_Hangar::IsInitialized() const {
  
  return true;
}

void DB_Hangar::Swap(DB_Hangar* other) {
  if (other != this) {
    std::swap(sid_, other->sid_);
    std::swap(sku_, other->sku_);
    std::swap(num_, other->num_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DB_Hangar::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DB_Hangar_descriptor_;
  metadata.reflection = DB_Hangar_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DB_GameUnit::kSkuFieldNumber;
const int DB_GameUnit::kUnlockFieldNumber;
const int DB_GameUnit::kUpgradeIdFieldNumber;
const int DB_GameUnit::kTimeLeftFieldNumber;
const int DB_GameUnit::kUpdateAtFieldNumber;
#endif  // !_MSC_VER

DB_GameUnit::DB_GameUnit() {
  SharedCtor();
}

void DB_GameUnit::InitAsDefaultInstance() {
}

DB_GameUnit::DB_GameUnit(const DB_GameUnit& from) {
  SharedCtor();
  MergeFrom(from);
}

void DB_GameUnit::SharedCtor() {
  _cached_size_ = 0;
  sku_ = 0;
  unlock_ = 0;
  upgradeid_ = 0;
  timeleft_ = 0;
  updateat_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DB_GameUnit::~DB_GameUnit() {
  SharedDtor();
}

void DB_GameUnit::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* DB_GameUnit::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DB_GameUnit_descriptor_;
}

const DB_GameUnit& DB_GameUnit::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dbinterface_2eproto();  return *default_instance_;
}

DB_GameUnit* DB_GameUnit::default_instance_ = NULL;

DB_GameUnit* DB_GameUnit::New() const {
  return new DB_GameUnit;
}

void DB_GameUnit::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    sku_ = 0;
    unlock_ = 0;
    upgradeid_ = 0;
    timeleft_ = 0;
    updateat_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DB_GameUnit::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 sku = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &sku_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_unlock;
        break;
      }
      
      // optional int32 unlock = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_unlock:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &unlock_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_upgradeId;
        break;
      }
      
      // optional int32 upgradeId = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_upgradeId:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &upgradeid_));
        _set_bit(2);
        if (input->ExpectTag(32)) goto parse_timeLeft;
        break;
      }
      
      // optional int32 timeLeft = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_timeLeft:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &timeleft_));
        _set_bit(3);
        if (input->ExpectTag(40)) goto parse_updateAt;
        break;
      }
      
      // optional int64 updateAt = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_updateAt:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt64(
              input, &updateat_));
        _set_bit(4);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DB_GameUnit::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    DB_GameUnit::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional int32 sku = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->sku(), output);
  }
  
  // optional int32 unlock = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->unlock(), output);
  }
  
  // optional int32 upgradeId = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->upgradeid(), output);
  }
  
  // optional int32 timeLeft = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->timeleft(), output);
  }
  
  // optional int64 updateAt = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->updateat(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DB_GameUnit::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 sku = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->sku(), target);
  }
  
  // optional int32 unlock = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->unlock(), target);
  }
  
  // optional int32 upgradeId = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->upgradeid(), target);
  }
  
  // optional int32 timeLeft = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->timeleft(), target);
  }
  
  // optional int64 updateAt = 5;
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->updateat(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DB_GameUnit::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 sku = 1;
    if (has_sku()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sku());
    }
    
    // optional int32 unlock = 2;
    if (has_unlock()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->unlock());
    }
    
    // optional int32 upgradeId = 3;
    if (has_upgradeid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->upgradeid());
    }
    
    // optional int32 timeLeft = 4;
    if (has_timeleft()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->timeleft());
    }
    
    // optional int64 updateAt = 5;
    if (has_updateat()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->updateat());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void DB_GameUnit::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DB_GameUnit* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DB_GameUnit*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DB_GameUnit::MergeFrom(const DB_GameUnit& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_sku(from.sku());
    }
    if (from._has_bit(1)) {
      set_unlock(from.unlock());
    }
    if (from._has_bit(2)) {
      set_upgradeid(from.upgradeid());
    }
    if (from._has_bit(3)) {
      set_timeleft(from.timeleft());
    }
    if (from._has_bit(4)) {
      set_updateat(from.updateat());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DB_GameUnit::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DB_GameUnit::CopyFrom(const DB_GameUnit& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DB_GameUnit::IsInitialized() const {
  
  return true;
}

void DB_GameUnit::Swap(DB_GameUnit* other) {
  if (other != this) {
    std::swap(sku_, other->sku_);
    std::swap(unlock_, other->unlock_);
    std::swap(upgradeid_, other->upgradeid_);
    std::swap(timeleft_, other->timeleft_);
    std::swap(updateat_, other->updateat_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DB_GameUnit::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DB_GameUnit_descriptor_;
  metadata.reflection = DB_GameUnit_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DB_Planet::kIdFieldNumber;
const int DB_Planet::kTypeFieldNumber;
const int DB_Planet::kHQLevelFieldNumber;
const int DB_Planet::kDroidsFieldNumber;
const int DB_Planet::kDroidInUseFieldNumber;
const int DB_Planet::kCapitalFieldNumber;
const int DB_Planet::kCoinsLimitFieldNumber;
const int DB_Planet::kMineralLimitFieldNumber;
const int DB_Planet::kStarFieldNumber;
const int DB_Planet::kItemsFieldNumber;
const int DB_Planet::kHangarsFieldNumber;
const int DB_Planet::kUnitsFieldNumber;
#endif  // !_MSC_VER

DB_Planet::DB_Planet() {
  SharedCtor();
}

void DB_Planet::InitAsDefaultInstance() {
}

DB_Planet::DB_Planet(const DB_Planet& from) {
  SharedCtor();
  MergeFrom(from);
}

void DB_Planet::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  type_ = 0;
  hqlevel_ = 0;
  droids_ = 0;
  droidinuse_ = 0;
  capital_ = 0;
  coinslimit_ = GOOGLE_LONGLONG(0);
  minerallimit_ = GOOGLE_LONGLONG(0);
  star_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DB_Planet::~DB_Planet() {
  SharedDtor();
}

void DB_Planet::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* DB_Planet::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DB_Planet_descriptor_;
}

const DB_Planet& DB_Planet::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dbinterface_2eproto();  return *default_instance_;
}

DB_Planet* DB_Planet::default_instance_ = NULL;

DB_Planet* DB_Planet::New() const {
  return new DB_Planet;
}

void DB_Planet::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    type_ = 0;
    hqlevel_ = 0;
    droids_ = 0;
    droidinuse_ = 0;
    capital_ = 0;
    coinslimit_ = GOOGLE_LONGLONG(0);
    minerallimit_ = GOOGLE_LONGLONG(0);
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    star_ = 0;
  }
  items_.Clear();
  hangars_.Clear();
  units_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DB_Planet::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &id_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }
      
      // optional int32 type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_type:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &type_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_HQLevel;
        break;
      }
      
      // optional int32 HQLevel = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_HQLevel:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &hqlevel_));
        _set_bit(2);
        if (input->ExpectTag(32)) goto parse_Droids;
        break;
      }
      
      // optional int32 Droids = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Droids:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &droids_));
        _set_bit(3);
        if (input->ExpectTag(40)) goto parse_DroidInUse;
        break;
      }
      
      // optional int32 DroidInUse = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_DroidInUse:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &droidinuse_));
        _set_bit(4);
        if (input->ExpectTag(48)) goto parse_Capital;
        break;
      }
      
      // optional int32 Capital = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Capital:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &capital_));
        _set_bit(5);
        if (input->ExpectTag(56)) goto parse_CoinsLimit;
        break;
      }
      
      // optional int64 CoinsLimit = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_CoinsLimit:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt64(
              input, &coinslimit_));
        _set_bit(6);
        if (input->ExpectTag(64)) goto parse_MineralLimit;
        break;
      }
      
      // optional int64 MineralLimit = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_MineralLimit:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt64(
              input, &minerallimit_));
        _set_bit(7);
        if (input->ExpectTag(72)) goto parse_star;
        break;
      }
      
      // optional int32 star = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_star:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &star_));
        _set_bit(8);
        if (input->ExpectTag(82)) goto parse_items;
        break;
      }
      
      // repeated .DB_Item items = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_items:
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, add_items()));
        if (input->ExpectTag(82)) goto parse_items;
        if (input->ExpectTag(90)) goto parse_hangars;
        break;
      }
      
      // repeated .DB_Hangar hangars = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_hangars:
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, add_hangars()));
        if (input->ExpectTag(90)) goto parse_hangars;
        if (input->ExpectTag(98)) goto parse_units;
        break;
      }
      
      // repeated .DB_GameUnit units = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_units:
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, add_units()));
        if (input->ExpectTag(98)) goto parse_units;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DB_Planet::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    DB_Planet::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional int32 id = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }
  
  // optional int32 type = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->type(), output);
  }
  
  // optional int32 HQLevel = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->hqlevel(), output);
  }
  
  // optional int32 Droids = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->droids(), output);
  }
  
  // optional int32 DroidInUse = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->droidinuse(), output);
  }
  
  // optional int32 Capital = 6;
  if (_has_bit(5)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->capital(), output);
  }
  
  // optional int64 CoinsLimit = 7;
  if (_has_bit(6)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(7, this->coinslimit(), output);
  }
  
  // optional int64 MineralLimit = 8;
  if (_has_bit(7)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(8, this->minerallimit(), output);
  }
  
  // optional int32 star = 9;
  if (_has_bit(8)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->star(), output);
  }
  
  // repeated .DB_Item items = 10;
  for (int i = 0; i < this->items_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      10, this->items(i), output);
  }
  
  // repeated .DB_Hangar hangars = 11;
  for (int i = 0; i < this->hangars_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      11, this->hangars(i), output);
  }
  
  // repeated .DB_GameUnit units = 12;
  for (int i = 0; i < this->units_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      12, this->units(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DB_Planet::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 id = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }
  
  // optional int32 type = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->type(), target);
  }
  
  // optional int32 HQLevel = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->hqlevel(), target);
  }
  
  // optional int32 Droids = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->droids(), target);
  }
  
  // optional int32 DroidInUse = 5;
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->droidinuse(), target);
  }
  
  // optional int32 Capital = 6;
  if (_has_bit(5)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->capital(), target);
  }
  
  // optional int64 CoinsLimit = 7;
  if (_has_bit(6)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(7, this->coinslimit(), target);
  }
  
  // optional int64 MineralLimit = 8;
  if (_has_bit(7)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(8, this->minerallimit(), target);
  }
  
  // optional int32 star = 9;
  if (_has_bit(8)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->star(), target);
  }
  
  // repeated .DB_Item items = 10;
  for (int i = 0; i < this->items_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->items(i), target);
  }
  
  // repeated .DB_Hangar hangars = 11;
  for (int i = 0; i < this->hangars_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        11, this->hangars(i), target);
  }
  
  // repeated .DB_GameUnit units = 12;
  for (int i = 0; i < this->units_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        12, this->units(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DB_Planet::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }
    
    // optional int32 type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }
    
    // optional int32 HQLevel = 3;
    if (has_hqlevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->hqlevel());
    }
    
    // optional int32 Droids = 4;
    if (has_droids()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->droids());
    }
    
    // optional int32 DroidInUse = 5;
    if (has_droidinuse()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->droidinuse());
    }
    
    // optional int32 Capital = 6;
    if (has_capital()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->capital());
    }
    
    // optional int64 CoinsLimit = 7;
    if (has_coinslimit()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->coinslimit());
    }
    
    // optional int64 MineralLimit = 8;
    if (has_minerallimit()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->minerallimit());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 star = 9;
    if (has_star()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->star());
    }
    
  }
  // repeated .DB_Item items = 10;
  total_size += 1 * this->items_size();
  for (int i = 0; i < this->items_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->items(i));
  }
  
  // repeated .DB_Hangar hangars = 11;
  total_size += 1 * this->hangars_size();
  for (int i = 0; i < this->hangars_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->hangars(i));
  }
  
  // repeated .DB_GameUnit units = 12;
  total_size += 1 * this->units_size();
  for (int i = 0; i < this->units_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->units(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void DB_Planet::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DB_Planet* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DB_Planet*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DB_Planet::MergeFrom(const DB_Planet& from) {
  GOOGLE_CHECK_NE(&from, this);
  items_.MergeFrom(from.items_);
  hangars_.MergeFrom(from.hangars_);
  units_.MergeFrom(from.units_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_id(from.id());
    }
    if (from._has_bit(1)) {
      set_type(from.type());
    }
    if (from._has_bit(2)) {
      set_hqlevel(from.hqlevel());
    }
    if (from._has_bit(3)) {
      set_droids(from.droids());
    }
    if (from._has_bit(4)) {
      set_droidinuse(from.droidinuse());
    }
    if (from._has_bit(5)) {
      set_capital(from.capital());
    }
    if (from._has_bit(6)) {
      set_coinslimit(from.coinslimit());
    }
    if (from._has_bit(7)) {
      set_minerallimit(from.minerallimit());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from._has_bit(8)) {
      set_star(from.star());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DB_Planet::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DB_Planet::CopyFrom(const DB_Planet& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DB_Planet::IsInitialized() const {
  
  return true;
}

void DB_Planet::Swap(DB_Planet* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(type_, other->type_);
    std::swap(hqlevel_, other->hqlevel_);
    std::swap(droids_, other->droids_);
    std::swap(droidinuse_, other->droidinuse_);
    std::swap(capital_, other->capital_);
    std::swap(coinslimit_, other->coinslimit_);
    std::swap(minerallimit_, other->minerallimit_);
    std::swap(star_, other->star_);
    items_.Swap(&other->items_);
    hangars_.Swap(&other->hangars_);
    units_.Swap(&other->units_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DB_Planet::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DB_Planet_descriptor_;
  metadata.reflection = DB_Planet_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DB_NPC::kSkuFieldNumber;
const int DB_NPC::kExpFieldNumber;
const int DB_NPC::kHQLevelFieldNumber;
const int DB_NPC::kNpcIdFieldNumber;
const int DB_NPC::kItemsFieldNumber;
#endif  // !_MSC_VER

DB_NPC::DB_NPC() {
  SharedCtor();
}

void DB_NPC::InitAsDefaultInstance() {
}

DB_NPC::DB_NPC(const DB_NPC& from) {
  SharedCtor();
  MergeFrom(from);
}

void DB_NPC::SharedCtor() {
  _cached_size_ = 0;
  sku_ = 0;
  exp_ = 0;
  hqlevel_ = 0;
  npcid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DB_NPC::~DB_NPC() {
  SharedDtor();
}

void DB_NPC::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* DB_NPC::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DB_NPC_descriptor_;
}

const DB_NPC& DB_NPC::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dbinterface_2eproto();  return *default_instance_;
}

DB_NPC* DB_NPC::default_instance_ = NULL;

DB_NPC* DB_NPC::New() const {
  return new DB_NPC;
}

void DB_NPC::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    sku_ = 0;
    exp_ = 0;
    hqlevel_ = 0;
    npcid_ = 0;
  }
  items_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DB_NPC::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 sku = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &sku_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_exp;
        break;
      }
      
      // optional int32 exp = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_exp:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &exp_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_HQLevel;
        break;
      }
      
      // optional int32 HQLevel = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_HQLevel:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &hqlevel_));
        _set_bit(2);
        if (input->ExpectTag(32)) goto parse_npcId;
        break;
      }
      
      // optional int32 npcId = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_npcId:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &npcid_));
        _set_bit(3);
        if (input->ExpectTag(42)) goto parse_items;
        break;
      }
      
      // repeated .DB_Item items = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_items:
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, add_items()));
        if (input->ExpectTag(42)) goto parse_items;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DB_NPC::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    DB_NPC::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional int32 sku = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->sku(), output);
  }
  
  // optional int32 exp = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->exp(), output);
  }
  
  // optional int32 HQLevel = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->hqlevel(), output);
  }
  
  // optional int32 npcId = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->npcid(), output);
  }
  
  // repeated .DB_Item items = 5;
  for (int i = 0; i < this->items_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      5, this->items(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DB_NPC::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 sku = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->sku(), target);
  }
  
  // optional int32 exp = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->exp(), target);
  }
  
  // optional int32 HQLevel = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->hqlevel(), target);
  }
  
  // optional int32 npcId = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->npcid(), target);
  }
  
  // repeated .DB_Item items = 5;
  for (int i = 0; i < this->items_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->items(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DB_NPC::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 sku = 1;
    if (has_sku()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sku());
    }
    
    // optional int32 exp = 2;
    if (has_exp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->exp());
    }
    
    // optional int32 HQLevel = 3;
    if (has_hqlevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->hqlevel());
    }
    
    // optional int32 npcId = 4;
    if (has_npcid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->npcid());
    }
    
  }
  // repeated .DB_Item items = 5;
  total_size += 1 * this->items_size();
  for (int i = 0; i < this->items_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->items(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void DB_NPC::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DB_NPC* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DB_NPC*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DB_NPC::MergeFrom(const DB_NPC& from) {
  GOOGLE_CHECK_NE(&from, this);
  items_.MergeFrom(from.items_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_sku(from.sku());
    }
    if (from._has_bit(1)) {
      set_exp(from.exp());
    }
    if (from._has_bit(2)) {
      set_hqlevel(from.hqlevel());
    }
    if (from._has_bit(3)) {
      set_npcid(from.npcid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DB_NPC::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DB_NPC::CopyFrom(const DB_NPC& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DB_NPC::IsInitialized() const {
  
  return true;
}

void DB_NPC::Swap(DB_NPC* other) {
  if (other != this) {
    std::swap(sku_, other->sku_);
    std::swap(exp_, other->exp_);
    std::swap(hqlevel_, other->hqlevel_);
    std::swap(npcid_, other->npcid_);
    items_.Swap(&other->items_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DB_NPC::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DB_NPC_descriptor_;
  metadata.reflection = DB_NPC_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DB_Player::kModelFieldNumber;
const int DB_Player::kStateFieldNumber;
const int DB_Player::kPlanetsFieldNumber;
const int DB_Player::kNpcsFieldNumber;
#endif  // !_MSC_VER

DB_Player::DB_Player() {
  SharedCtor();
}

void DB_Player::InitAsDefaultInstance() {
  model_ = const_cast< ::DB_Model*>(&::DB_Model::default_instance());
  state_ = const_cast< ::DB_State*>(&::DB_State::default_instance());
}

DB_Player::DB_Player(const DB_Player& from) {
  SharedCtor();
  MergeFrom(from);
}

void DB_Player::SharedCtor() {
  _cached_size_ = 0;
  model_ = NULL;
  state_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DB_Player::~DB_Player() {
  SharedDtor();
}

void DB_Player::SharedDtor() {
  if (this != default_instance_) {
    delete model_;
    delete state_;
  }
}

const ::google::protobuf::Descriptor* DB_Player::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DB_Player_descriptor_;
}

const DB_Player& DB_Player::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dbinterface_2eproto();  return *default_instance_;
}

DB_Player* DB_Player::default_instance_ = NULL;

DB_Player* DB_Player::New() const {
  return new DB_Player;
}

void DB_Player::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (model_ != NULL) model_->::DB_Model::Clear();
    }
    if (_has_bit(1)) {
      if (state_ != NULL) state_->::DB_State::Clear();
    }
  }
  planets_.Clear();
  npcs_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DB_Player::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .DB_Model model = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
             input, mutable_model()));
        if (input->ExpectTag(18)) goto parse_state;
        break;
      }
      
      // optional .DB_State state = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_state:
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
             input, mutable_state()));
        if (input->ExpectTag(26)) goto parse_planets;
        break;
      }
      
      // repeated .DB_Planet planets = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_planets:
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, add_planets()));
        if (input->ExpectTag(26)) goto parse_planets;
        if (input->ExpectTag(34)) goto parse_npcs;
        break;
      }
      
      // repeated .DB_NPC npcs = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_npcs:
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, add_npcs()));
        if (input->ExpectTag(34)) goto parse_npcs;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DB_Player::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    DB_Player::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional .DB_Model model = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      1, this->model(), output);
  }
  
  // optional .DB_State state = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      2, this->state(), output);
  }
  
  // repeated .DB_Planet planets = 3;
  for (int i = 0; i < this->planets_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      3, this->planets(i), output);
  }
  
  // repeated .DB_NPC npcs = 4;
  for (int i = 0; i < this->npcs_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      4, this->npcs(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DB_Player::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .DB_Model model = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->model(), target);
  }
  
  // optional .DB_State state = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->state(), target);
  }
  
  // repeated .DB_Planet planets = 3;
  for (int i = 0; i < this->planets_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->planets(i), target);
  }
  
  // repeated .DB_NPC npcs = 4;
  for (int i = 0; i < this->npcs_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->npcs(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DB_Player::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .DB_Model model = 1;
    if (has_model()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->model());
    }
    
    // optional .DB_State state = 2;
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->state());
    }
    
  }
  // repeated .DB_Planet planets = 3;
  total_size += 1 * this->planets_size();
  for (int i = 0; i < this->planets_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->planets(i));
  }
  
  // repeated .DB_NPC npcs = 4;
  total_size += 1 * this->npcs_size();
  for (int i = 0; i < this->npcs_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->npcs(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void DB_Player::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DB_Player* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DB_Player*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DB_Player::MergeFrom(const DB_Player& from) {
  GOOGLE_CHECK_NE(&from, this);
  planets_.MergeFrom(from.planets_);
  npcs_.MergeFrom(from.npcs_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      mutable_model()->::DB_Model::MergeFrom(from.model());
    }
    if (from._has_bit(1)) {
      mutable_state()->::DB_State::MergeFrom(from.state());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DB_Player::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DB_Player::CopyFrom(const DB_Player& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DB_Player::IsInitialized() const {
  
  return true;
}

void DB_Player::Swap(DB_Player* other) {
  if (other != this) {
    std::swap(model_, other->model_);
    std::swap(state_, other->state_);
    planets_.Swap(&other->planets_);
    npcs_.Swap(&other->npcs_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DB_Player::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DB_Player_descriptor_;
  metadata.reflection = DB_Player_reflection_;
  return metadata;
}


// ===================================================================

const ::std::string DB_User::_default_openid_;
const ::std::string DB_User::_default_name_;
#ifndef _MSC_VER
const int DB_User::kIdFieldNumber;
const int DB_User::kOpenidFieldNumber;
const int DB_User::kNameFieldNumber;
const int DB_User::kHeadFieldNumber;
const int DB_User::kLastLoginTimeFieldNumber;
const int DB_User::kRegistTimeFieldNumber;
const int DB_User::kUnbreakLoginFieldNumber;
const int DB_User::kIsValidFieldNumber;
const int DB_User::kOrginFieldNumber;
const int DB_User::kLastLogoutTimeFieldNumber;
const int DB_User::kPlayerFieldNumber;
#endif  // !_MSC_VER

DB_User::DB_User() {
  SharedCtor();
}

void DB_User::InitAsDefaultInstance() {
  player_ = const_cast< ::DB_Player*>(&::DB_Player::default_instance());
}

DB_User::DB_User(const DB_User& from) {
  SharedCtor();
  MergeFrom(from);
}

void DB_User::SharedCtor() {
  _cached_size_ = 0;
  id_ = GOOGLE_LONGLONG(0);
  openid_ = const_cast< ::std::string*>(&_default_openid_);
  name_ = const_cast< ::std::string*>(&_default_name_);
  head_ = 0;
  last_login_time_ = GOOGLE_LONGLONG(0);
  regist_time_ = GOOGLE_LONGLONG(0);
  unbreaklogin_ = 0;
  isvalid_ = 0;
  orgin_ = 0;
  last_logout_time_ = GOOGLE_LONGLONG(0);
  player_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DB_User::~DB_User() {
  SharedDtor();
}

void DB_User::SharedDtor() {
  if (openid_ != &_default_openid_) {
    delete openid_;
  }
  if (name_ != &_default_name_) {
    delete name_;
  }
  if (this != default_instance_) {
    delete player_;
  }
}

const ::google::protobuf::Descriptor* DB_User::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DB_User_descriptor_;
}

const DB_User& DB_User::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dbinterface_2eproto();  return *default_instance_;
}

DB_User* DB_User::default_instance_ = NULL;

DB_User* DB_User::New() const {
  return new DB_User;
}

void DB_User::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = GOOGLE_LONGLONG(0);
    if (_has_bit(1)) {
      if (openid_ != &_default_openid_) {
        openid_->clear();
      }
    }
    if (_has_bit(2)) {
      if (name_ != &_default_name_) {
        name_->clear();
      }
    }
    head_ = 0;
    last_login_time_ = GOOGLE_LONGLONG(0);
    regist_time_ = GOOGLE_LONGLONG(0);
    unbreaklogin_ = 0;
    isvalid_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    orgin_ = 0;
    last_logout_time_ = GOOGLE_LONGLONG(0);
    if (_has_bit(10)) {
      if (player_ != NULL) player_->::DB_Player::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DB_User::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt64(
              input, &id_));
        _set_bit(0);
        if (input->ExpectTag(18)) goto parse_openid;
        break;
      }
      
      // required string openid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_openid:
        DO_(::google::protobuf::internal::WireFormatLite::ReadString(
              input, this->mutable_openid()));
        ::google::protobuf::internal::WireFormat::VerifyUTF8String(
          this->openid().data(), this->openid().length(),
          ::google::protobuf::internal::WireFormat::PARSE);
        if (input->ExpectTag(26)) goto parse_name;
        break;
      }
      
      // optional string name = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_name:
        DO_(::google::protobuf::internal::WireFormatLite::ReadString(
              input, this->mutable_name()));
        ::google::protobuf::internal::WireFormat::VerifyUTF8String(
          this->name().data(), this->name().length(),
          ::google::protobuf::internal::WireFormat::PARSE);
        if (input->ExpectTag(32)) goto parse_head;
        break;
      }
      
      // optional int32 head = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_head:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &head_));
        _set_bit(3);
        if (input->ExpectTag(40)) goto parse_last_login_time;
        break;
      }
      
      // optional int64 last_login_time = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_last_login_time:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt64(
              input, &last_login_time_));
        _set_bit(4);
        if (input->ExpectTag(48)) goto parse_regist_time;
        break;
      }
      
      // optional int64 regist_time = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_regist_time:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt64(
              input, &regist_time_));
        _set_bit(5);
        if (input->ExpectTag(56)) goto parse_unbreakLogin;
        break;
      }
      
      // optional int32 unbreakLogin = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_unbreakLogin:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &unbreaklogin_));
        _set_bit(6);
        if (input->ExpectTag(64)) goto parse_isValid;
        break;
      }
      
      // optional int32 isValid = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_isValid:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &isvalid_));
        _set_bit(7);
        if (input->ExpectTag(72)) goto parse_orgin;
        break;
      }
      
      // optional int32 orgin = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_orgin:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &orgin_));
        _set_bit(8);
        if (input->ExpectTag(80)) goto parse_last_logout_time;
        break;
      }
      
      // optional int64 last_logout_time = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_last_logout_time:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt64(
              input, &last_logout_time_));
        _set_bit(9);
        if (input->ExpectTag(90)) goto parse_player;
        break;
      }
      
      // required .DB_Player player = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_player:
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
             input, mutable_player()));
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DB_User::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    DB_User::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // required int64 id = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->id(), output);
  }
  
  // required string openid = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->openid().data(), this->openid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->openid(), output);
  }
  
  // optional string name = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->name(), output);
  }
  
  // optional int32 head = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->head(), output);
  }
  
  // optional int64 last_login_time = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->last_login_time(), output);
  }
  
  // optional int64 regist_time = 6;
  if (_has_bit(5)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(6, this->regist_time(), output);
  }
  
  // optional int32 unbreakLogin = 7;
  if (_has_bit(6)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->unbreaklogin(), output);
  }
  
  // optional int32 isValid = 8;
  if (_has_bit(7)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->isvalid(), output);
  }
  
  // optional int32 orgin = 9;
  if (_has_bit(8)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->orgin(), output);
  }
  
  // optional int64 last_logout_time = 10;
  if (_has_bit(9)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(10, this->last_logout_time(), output);
  }
  
  // required .DB_Player player = 11;
  if (_has_bit(10)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      11, this->player(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DB_User::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 id = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->id(), target);
  }
  
  // required string openid = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->openid().data(), this->openid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->openid(), target);
  }
  
  // optional string name = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->name(), target);
  }
  
  // optional int32 head = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->head(), target);
  }
  
  // optional int64 last_login_time = 5;
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->last_login_time(), target);
  }
  
  // optional int64 regist_time = 6;
  if (_has_bit(5)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(6, this->regist_time(), target);
  }
  
  // optional int32 unbreakLogin = 7;
  if (_has_bit(6)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->unbreaklogin(), target);
  }
  
  // optional int32 isValid = 8;
  if (_has_bit(7)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->isvalid(), target);
  }
  
  // optional int32 orgin = 9;
  if (_has_bit(8)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->orgin(), target);
  }
  
  // optional int64 last_logout_time = 10;
  if (_has_bit(9)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(10, this->last_logout_time(), target);
  }
  
  // required .DB_Player player = 11;
  if (_has_bit(10)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        11, this->player(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DB_User::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->id());
    }
    
    // required string openid = 2;
    if (has_openid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->openid());
    }
    
    // optional string name = 3;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }
    
    // optional int32 head = 4;
    if (has_head()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->head());
    }
    
    // optional int64 last_login_time = 5;
    if (has_last_login_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->last_login_time());
    }
    
    // optional int64 regist_time = 6;
    if (has_regist_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->regist_time());
    }
    
    // optional int32 unbreakLogin = 7;
    if (has_unbreaklogin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->unbreaklogin());
    }
    
    // optional int32 isValid = 8;
    if (has_isvalid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->isvalid());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 orgin = 9;
    if (has_orgin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->orgin());
    }
    
    // optional int64 last_logout_time = 10;
    if (has_last_logout_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->last_logout_time());
    }
    
    // required .DB_Player player = 11;
    if (has_player()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->player());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void DB_User::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DB_User* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DB_User*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DB_User::MergeFrom(const DB_User& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_id(from.id());
    }
    if (from._has_bit(1)) {
      set_openid(from.openid());
    }
    if (from._has_bit(2)) {
      set_name(from.name());
    }
    if (from._has_bit(3)) {
      set_head(from.head());
    }
    if (from._has_bit(4)) {
      set_last_login_time(from.last_login_time());
    }
    if (from._has_bit(5)) {
      set_regist_time(from.regist_time());
    }
    if (from._has_bit(6)) {
      set_unbreaklogin(from.unbreaklogin());
    }
    if (from._has_bit(7)) {
      set_isvalid(from.isvalid());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from._has_bit(8)) {
      set_orgin(from.orgin());
    }
    if (from._has_bit(9)) {
      set_last_logout_time(from.last_logout_time());
    }
    if (from._has_bit(10)) {
      mutable_player()->::DB_Player::MergeFrom(from.player());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DB_User::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DB_User::CopyFrom(const DB_User& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DB_User::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000403) != 0x00000403) return false;
  
  return true;
}

void DB_User::Swap(DB_User* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(openid_, other->openid_);
    std::swap(name_, other->name_);
    std::swap(head_, other->head_);
    std::swap(last_login_time_, other->last_login_time_);
    std::swap(regist_time_, other->regist_time_);
    std::swap(unbreaklogin_, other->unbreaklogin_);
    std::swap(isvalid_, other->isvalid_);
    std::swap(orgin_, other->orgin_);
    std::swap(last_logout_time_, other->last_logout_time_);
    std::swap(player_, other->player_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DB_User::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DB_User_descriptor_;
  metadata.reflection = DB_User_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DB_GlobalStarInfo::kStarsFieldNumber;
#endif  // !_MSC_VER

DB_GlobalStarInfo::DB_GlobalStarInfo() {
  SharedCtor();
}

void DB_GlobalStarInfo::InitAsDefaultInstance() {
}

DB_GlobalStarInfo::DB_GlobalStarInfo(const DB_GlobalStarInfo& from) {
  SharedCtor();
  MergeFrom(from);
}

void DB_GlobalStarInfo::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DB_GlobalStarInfo::~DB_GlobalStarInfo() {
  SharedDtor();
}

void DB_GlobalStarInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* DB_GlobalStarInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DB_GlobalStarInfo_descriptor_;
}

const DB_GlobalStarInfo& DB_GlobalStarInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dbinterface_2eproto();  return *default_instance_;
}

DB_GlobalStarInfo* DB_GlobalStarInfo::default_instance_ = NULL;

DB_GlobalStarInfo* DB_GlobalStarInfo::New() const {
  return new DB_GlobalStarInfo;
}

void DB_GlobalStarInfo::Clear() {
  stars_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DB_GlobalStarInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .DB_Star stars = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_stars:
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, add_stars()));
        if (input->ExpectTag(10)) goto parse_stars;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DB_GlobalStarInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    DB_GlobalStarInfo::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // repeated .DB_Star stars = 1;
  for (int i = 0; i < this->stars_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      1, this->stars(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DB_GlobalStarInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .DB_Star stars = 1;
  for (int i = 0; i < this->stars_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->stars(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DB_GlobalStarInfo::ByteSize() const {
  int total_size = 0;
  
  // repeated .DB_Star stars = 1;
  total_size += 1 * this->stars_size();
  for (int i = 0; i < this->stars_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->stars(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void DB_GlobalStarInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DB_GlobalStarInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DB_GlobalStarInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DB_GlobalStarInfo::MergeFrom(const DB_GlobalStarInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  stars_.MergeFrom(from.stars_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DB_GlobalStarInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DB_GlobalStarInfo::CopyFrom(const DB_GlobalStarInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DB_GlobalStarInfo::IsInitialized() const {
  
  return true;
}

void DB_GlobalStarInfo::Swap(DB_GlobalStarInfo* other) {
  if (other != this) {
    stars_.Swap(&other->stars_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DB_GlobalStarInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DB_GlobalStarInfo_descriptor_;
  metadata.reflection = DB_GlobalStarInfo_reflection_;
  return metadata;
}

