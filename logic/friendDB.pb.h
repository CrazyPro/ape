// Generated by the protocol buffer compiler.  DO NOT EDIT!

#ifndef PROTOBUF_friendDB_2eproto__INCLUDED
#define PROTOBUF_friendDB_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2002000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2002000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_friendDB_2eproto();
void protobuf_AssignDesc_friendDB_2eproto();
void protobuf_ShutdownFile_friendDB_2eproto();

class DB_FrdRegionInfo;
class DB_FrdPlatInfo;
class DB_FrdInfoLite;

// ===================================================================

class DB_FrdRegionInfo : public ::google::protobuf::Message {
 public:
  DB_FrdRegionInfo();
  virtual ~DB_FrdRegionInfo();
  
  DB_FrdRegionInfo(const DB_FrdRegionInfo& from);
  
  inline DB_FrdRegionInfo& operator=(const DB_FrdRegionInfo& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const DB_FrdRegionInfo& default_instance();
  void Swap(DB_FrdRegionInfo* other);
  
  // implements Message ----------------------------------------------
  
  DB_FrdRegionInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DB_FrdRegionInfo& from);
  void MergeFrom(const DB_FrdRegionInfo& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const { _cached_size_ = size; }
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional int64 uid = 1 [default = 0];
  inline bool has_uid() const;
  inline void clear_uid();
  static const int kUidFieldNumber = 1;
  inline ::google::protobuf::int64 uid() const;
  inline void set_uid(::google::protobuf::int64 value);
  
  // optional int32 region = 2 [default = 0];
  inline bool has_region() const;
  inline void clear_region();
  static const int kRegionFieldNumber = 2;
  inline ::google::protobuf::int32 region() const;
  inline void set_region(::google::protobuf::int32 value);
  
  // optional int32 level = 3 [default = 0];
  inline bool has_level() const;
  inline void clear_level();
  static const int kLevelFieldNumber = 3;
  inline ::google::protobuf::int32 level() const;
  inline void set_level(::google::protobuf::int32 value);
  
  // optional int32 finishCaptureTm = 4 [default = 0];
  inline bool has_finishcapturetm() const;
  inline void clear_finishcapturetm();
  static const int kFinishCaptureTmFieldNumber = 4;
  inline ::google::protobuf::int32 finishcapturetm() const;
  inline void set_finishcapturetm(::google::protobuf::int32 value);
  
  // optional int32 lastLogonTime = 5 [default = 0];
  inline bool has_lastlogontime() const;
  inline void clear_lastlogontime();
  static const int kLastLogonTimeFieldNumber = 5;
  inline ::google::protobuf::int32 lastlogontime() const;
  inline void set_lastlogontime(::google::protobuf::int32 value);
  
  // optional int32 viplevel = 6 [default = 0];
  inline bool has_viplevel() const;
  inline void clear_viplevel();
  static const int kViplevelFieldNumber = 6;
  inline ::google::protobuf::int32 viplevel() const;
  inline void set_viplevel(::google::protobuf::int32 value);
  
  // optional int32 viptype = 7 [default = 0];
  inline bool has_viptype() const;
  inline void clear_viptype();
  static const int kViptypeFieldNumber = 7;
  inline ::google::protobuf::int32 viptype() const;
  inline void set_viptype(::google::protobuf::int32 value);
  
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::google::protobuf::int64 uid_;
  ::google::protobuf::int32 region_;
  ::google::protobuf::int32 level_;
  ::google::protobuf::int32 finishcapturetm_;
  ::google::protobuf::int32 lastlogontime_;
  ::google::protobuf::int32 viplevel_;
  ::google::protobuf::int32 viptype_;
  friend void  protobuf_AddDesc_friendDB_2eproto();
  friend void protobuf_AssignDesc_friendDB_2eproto();
  friend void protobuf_ShutdownFile_friendDB_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(7 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static DB_FrdRegionInfo* default_instance_;
};
// -------------------------------------------------------------------

class DB_FrdPlatInfo : public ::google::protobuf::Message {
 public:
  DB_FrdPlatInfo();
  virtual ~DB_FrdPlatInfo();
  
  DB_FrdPlatInfo(const DB_FrdPlatInfo& from);
  
  inline DB_FrdPlatInfo& operator=(const DB_FrdPlatInfo& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const DB_FrdPlatInfo& default_instance();
  void Swap(DB_FrdPlatInfo* other);
  
  // implements Message ----------------------------------------------
  
  DB_FrdPlatInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DB_FrdPlatInfo& from);
  void MergeFrom(const DB_FrdPlatInfo& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const { _cached_size_ = size; }
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional string name = 1;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 1;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  
  // optional string profile_link = 2;
  inline bool has_profile_link() const;
  inline void clear_profile_link();
  static const int kProfileLinkFieldNumber = 2;
  inline const ::std::string& profile_link() const;
  inline void set_profile_link(const ::std::string& value);
  inline void set_profile_link(const char* value);
  inline void set_profile_link(const char* value, size_t size);
  inline ::std::string* mutable_profile_link();
  
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::std::string* name_;
  static const ::std::string _default_name_;
  ::std::string* profile_link_;
  static const ::std::string _default_profile_link_;
  friend void  protobuf_AddDesc_friendDB_2eproto();
  friend void protobuf_AssignDesc_friendDB_2eproto();
  friend void protobuf_ShutdownFile_friendDB_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static DB_FrdPlatInfo* default_instance_;
};
// -------------------------------------------------------------------

class DB_FrdInfoLite : public ::google::protobuf::Message {
 public:
  DB_FrdInfoLite();
  virtual ~DB_FrdInfoLite();
  
  DB_FrdInfoLite(const DB_FrdInfoLite& from);
  
  inline DB_FrdInfoLite& operator=(const DB_FrdInfoLite& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const DB_FrdInfoLite& default_instance();
  void Swap(DB_FrdInfoLite* other);
  
  // implements Message ----------------------------------------------
  
  DB_FrdInfoLite* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DB_FrdInfoLite& from);
  void MergeFrom(const DB_FrdInfoLite& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const { _cached_size_ = size; }
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required string userid = 1;
  inline bool has_userid() const;
  inline void clear_userid();
  static const int kUseridFieldNumber = 1;
  inline const ::std::string& userid() const;
  inline void set_userid(const ::std::string& value);
  inline void set_userid(const char* value);
  inline void set_userid(const char* value, size_t size);
  inline ::std::string* mutable_userid();
  
  // repeated string name = 2;
  inline int name_size() const;
  inline void clear_name();
  static const int kNameFieldNumber = 2;
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& name() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_name();
  inline const ::std::string& name(int index) const;
  inline ::std::string* mutable_name(int index);
  inline void set_name(int index, const ::std::string& value);
  inline void set_name(int index, const char* value);
  inline void set_name(int index, const char* value, size_t size);
  inline ::std::string* add_name();
  inline void add_name(const ::std::string& value);
  inline void add_name(const char* value);
  inline void add_name(const char* value, size_t size);
  
  // repeated string profile_link = 3;
  inline int profile_link_size() const;
  inline void clear_profile_link();
  static const int kProfileLinkFieldNumber = 3;
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& profile_link() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_profile_link();
  inline const ::std::string& profile_link(int index) const;
  inline ::std::string* mutable_profile_link(int index);
  inline void set_profile_link(int index, const ::std::string& value);
  inline void set_profile_link(int index, const char* value);
  inline void set_profile_link(int index, const char* value, size_t size);
  inline ::std::string* add_profile_link();
  inline void add_profile_link(const ::std::string& value);
  inline void add_profile_link(const char* value);
  inline void add_profile_link(const char* value, size_t size);
  
  // optional uint32 level = 4;
  inline bool has_level() const;
  inline void clear_level();
  static const int kLevelFieldNumber = 4;
  inline ::google::protobuf::uint32 level() const;
  inline void set_level(::google::protobuf::uint32 value);
  
  // optional bool is_yellow_vip = 5 [default = false];
  inline bool has_is_yellow_vip() const;
  inline void clear_is_yellow_vip();
  static const int kIsYellowVipFieldNumber = 5;
  inline bool is_yellow_vip() const;
  inline void set_is_yellow_vip(bool value);
  
  // optional bool is_yellow_year_vip = 6 [default = false];
  inline bool has_is_yellow_year_vip() const;
  inline void clear_is_yellow_year_vip();
  static const int kIsYellowYearVipFieldNumber = 6;
  inline bool is_yellow_year_vip() const;
  inline void set_is_yellow_year_vip(bool value);
  
  // optional int32 yellow_vip_level = 7 [default = 0];
  inline bool has_yellow_vip_level() const;
  inline void clear_yellow_vip_level();
  static const int kYellowVipLevelFieldNumber = 7;
  inline ::google::protobuf::int32 yellow_vip_level() const;
  inline void set_yellow_vip_level(::google::protobuf::int32 value);
  
  // optional int32 QQDmdLvl = 8 [default = 0];
  inline bool has_qqdmdlvl() const;
  inline void clear_qqdmdlvl();
  static const int kQQDmdLvlFieldNumber = 8;
  inline ::google::protobuf::int32 qqdmdlvl() const;
  inline void set_qqdmdlvl(::google::protobuf::int32 value);
  
  // optional bool isQQDmd = 9 [default = false];
  inline bool has_isqqdmd() const;
  inline void clear_isqqdmd();
  static const int kIsQQDmdFieldNumber = 9;
  inline bool isqqdmd() const;
  inline void set_isqqdmd(bool value);
  
  // optional bool isQQDmdYear = 10 [default = false];
  inline bool has_isqqdmdyear() const;
  inline void clear_isqqdmdyear();
  static const int kIsQQDmdYearFieldNumber = 10;
  inline bool isqqdmdyear() const;
  inline void set_isqqdmdyear(bool value);
  
  // repeated .DB_FrdRegionInfo region = 11;
  inline int region_size() const;
  inline void clear_region();
  static const int kRegionFieldNumber = 11;
  inline const ::google::protobuf::RepeatedPtrField< ::DB_FrdRegionInfo >& region() const;
  inline ::google::protobuf::RepeatedPtrField< ::DB_FrdRegionInfo >* mutable_region();
  inline const ::DB_FrdRegionInfo& region(int index) const;
  inline ::DB_FrdRegionInfo* mutable_region(int index);
  inline ::DB_FrdRegionInfo* add_region();
  
  // repeated .DB_FrdPlatInfo platInfo = 12;
  inline int platinfo_size() const;
  inline void clear_platinfo();
  static const int kPlatInfoFieldNumber = 12;
  inline const ::google::protobuf::RepeatedPtrField< ::DB_FrdPlatInfo >& platinfo() const;
  inline ::google::protobuf::RepeatedPtrField< ::DB_FrdPlatInfo >* mutable_platinfo();
  inline const ::DB_FrdPlatInfo& platinfo(int index) const;
  inline ::DB_FrdPlatInfo* mutable_platinfo(int index);
  inline ::DB_FrdPlatInfo* add_platinfo();
  
  // optional int32 is_high_yellow_vip = 13 [default = 0];
  inline bool has_is_high_yellow_vip() const;
  inline void clear_is_high_yellow_vip();
  static const int kIsHighYellowVipFieldNumber = 13;
  inline ::google::protobuf::int32 is_high_yellow_vip() const;
  inline void set_is_high_yellow_vip(::google::protobuf::int32 value);
  
  // optional int32 QHallDmdLvl = 14 [default = 0];
  inline bool has_qhalldmdlvl() const;
  inline void clear_qhalldmdlvl();
  static const int kQHallDmdLvlFieldNumber = 14;
  inline ::google::protobuf::int32 qhalldmdlvl() const;
  inline void set_qhalldmdlvl(::google::protobuf::int32 value);
  
  // optional bool isQHallDmd = 15 [default = false];
  inline bool has_isqhalldmd() const;
  inline void clear_isqhalldmd();
  static const int kIsQHallDmdFieldNumber = 15;
  inline bool isqhalldmd() const;
  inline void set_isqhalldmd(bool value);
  
  // optional bool isQHallDmdYear = 16;
  inline bool has_isqhalldmdyear() const;
  inline void clear_isqhalldmdyear();
  static const int kIsQHallDmdYearFieldNumber = 16;
  inline bool isqhalldmdyear() const;
  inline void set_isqhalldmdyear(bool value);
  
  // optional bool isHighQHallDmd = 17;
  inline bool has_ishighqhalldmd() const;
  inline void clear_ishighqhalldmd();
  static const int kIsHighQHallDmdFieldNumber = 17;
  inline bool ishighqhalldmd() const;
  inline void set_ishighqhalldmd(bool value);
  
  // optional bool isHighQHallDmdYear = 18;
  inline bool has_ishighqhalldmdyear() const;
  inline void clear_ishighqhalldmdyear();
  static const int kIsHighQHallDmdYearFieldNumber = 18;
  inline bool ishighqhalldmdyear() const;
  inline void set_ishighqhalldmdyear(bool value);
  
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::std::string* userid_;
  static const ::std::string _default_userid_;
  ::google::protobuf::RepeatedPtrField< ::std::string> name_;
  ::google::protobuf::RepeatedPtrField< ::std::string> profile_link_;
  ::google::protobuf::uint32 level_;
  bool is_yellow_vip_;
  bool is_yellow_year_vip_;
  ::google::protobuf::int32 yellow_vip_level_;
  ::google::protobuf::int32 qqdmdlvl_;
  bool isqqdmd_;
  bool isqqdmdyear_;
  ::google::protobuf::RepeatedPtrField< ::DB_FrdRegionInfo > region_;
  ::google::protobuf::RepeatedPtrField< ::DB_FrdPlatInfo > platinfo_;
  ::google::protobuf::int32 is_high_yellow_vip_;
  ::google::protobuf::int32 qhalldmdlvl_;
  bool isqhalldmd_;
  bool isqhalldmdyear_;
  bool ishighqhalldmd_;
  bool ishighqhalldmdyear_;
  friend void  protobuf_AddDesc_friendDB_2eproto();
  friend void protobuf_AssignDesc_friendDB_2eproto();
  friend void protobuf_ShutdownFile_friendDB_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(18 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static DB_FrdInfoLite* default_instance_;
};
// ===================================================================


// ===================================================================


// ===================================================================

// DB_FrdRegionInfo

// optional int64 uid = 1 [default = 0];
inline bool DB_FrdRegionInfo::has_uid() const {
  return _has_bit(0);
}
inline void DB_FrdRegionInfo::clear_uid() {
  uid_ = GOOGLE_LONGLONG(0);
  _clear_bit(0);
}
inline ::google::protobuf::int64 DB_FrdRegionInfo::uid() const {
  return uid_;
}
inline void DB_FrdRegionInfo::set_uid(::google::protobuf::int64 value) {
  _set_bit(0);
  uid_ = value;
}

// optional int32 region = 2 [default = 0];
inline bool DB_FrdRegionInfo::has_region() const {
  return _has_bit(1);
}
inline void DB_FrdRegionInfo::clear_region() {
  region_ = 0;
  _clear_bit(1);
}
inline ::google::protobuf::int32 DB_FrdRegionInfo::region() const {
  return region_;
}
inline void DB_FrdRegionInfo::set_region(::google::protobuf::int32 value) {
  _set_bit(1);
  region_ = value;
}

// optional int32 level = 3 [default = 0];
inline bool DB_FrdRegionInfo::has_level() const {
  return _has_bit(2);
}
inline void DB_FrdRegionInfo::clear_level() {
  level_ = 0;
  _clear_bit(2);
}
inline ::google::protobuf::int32 DB_FrdRegionInfo::level() const {
  return level_;
}
inline void DB_FrdRegionInfo::set_level(::google::protobuf::int32 value) {
  _set_bit(2);
  level_ = value;
}

// optional int32 finishCaptureTm = 4 [default = 0];
inline bool DB_FrdRegionInfo::has_finishcapturetm() const {
  return _has_bit(3);
}
inline void DB_FrdRegionInfo::clear_finishcapturetm() {
  finishcapturetm_ = 0;
  _clear_bit(3);
}
inline ::google::protobuf::int32 DB_FrdRegionInfo::finishcapturetm() const {
  return finishcapturetm_;
}
inline void DB_FrdRegionInfo::set_finishcapturetm(::google::protobuf::int32 value) {
  _set_bit(3);
  finishcapturetm_ = value;
}

// optional int32 lastLogonTime = 5 [default = 0];
inline bool DB_FrdRegionInfo::has_lastlogontime() const {
  return _has_bit(4);
}
inline void DB_FrdRegionInfo::clear_lastlogontime() {
  lastlogontime_ = 0;
  _clear_bit(4);
}
inline ::google::protobuf::int32 DB_FrdRegionInfo::lastlogontime() const {
  return lastlogontime_;
}
inline void DB_FrdRegionInfo::set_lastlogontime(::google::protobuf::int32 value) {
  _set_bit(4);
  lastlogontime_ = value;
}

// optional int32 viplevel = 6 [default = 0];
inline bool DB_FrdRegionInfo::has_viplevel() const {
  return _has_bit(5);
}
inline void DB_FrdRegionInfo::clear_viplevel() {
  viplevel_ = 0;
  _clear_bit(5);
}
inline ::google::protobuf::int32 DB_FrdRegionInfo::viplevel() const {
  return viplevel_;
}
inline void DB_FrdRegionInfo::set_viplevel(::google::protobuf::int32 value) {
  _set_bit(5);
  viplevel_ = value;
}

// optional int32 viptype = 7 [default = 0];
inline bool DB_FrdRegionInfo::has_viptype() const {
  return _has_bit(6);
}
inline void DB_FrdRegionInfo::clear_viptype() {
  viptype_ = 0;
  _clear_bit(6);
}
inline ::google::protobuf::int32 DB_FrdRegionInfo::viptype() const {
  return viptype_;
}
inline void DB_FrdRegionInfo::set_viptype(::google::protobuf::int32 value) {
  _set_bit(6);
  viptype_ = value;
}

// -------------------------------------------------------------------

// DB_FrdPlatInfo

// optional string name = 1;
inline bool DB_FrdPlatInfo::has_name() const {
  return _has_bit(0);
}
inline void DB_FrdPlatInfo::clear_name() {
  if (name_ != &_default_name_) {
    name_->clear();
  }
  _clear_bit(0);
}
inline const ::std::string& DB_FrdPlatInfo::name() const {
  return *name_;
}
inline void DB_FrdPlatInfo::set_name(const ::std::string& value) {
  _set_bit(0);
  if (name_ == &_default_name_) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void DB_FrdPlatInfo::set_name(const char* value) {
  _set_bit(0);
  if (name_ == &_default_name_) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void DB_FrdPlatInfo::set_name(const char* value, size_t size) {
  _set_bit(0);
  if (name_ == &_default_name_) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* DB_FrdPlatInfo::mutable_name() {
  _set_bit(0);
  if (name_ == &_default_name_) {
    name_ = new ::std::string;
  }
  return name_;
}

// optional string profile_link = 2;
inline bool DB_FrdPlatInfo::has_profile_link() const {
  return _has_bit(1);
}
inline void DB_FrdPlatInfo::clear_profile_link() {
  if (profile_link_ != &_default_profile_link_) {
    profile_link_->clear();
  }
  _clear_bit(1);
}
inline const ::std::string& DB_FrdPlatInfo::profile_link() const {
  return *profile_link_;
}
inline void DB_FrdPlatInfo::set_profile_link(const ::std::string& value) {
  _set_bit(1);
  if (profile_link_ == &_default_profile_link_) {
    profile_link_ = new ::std::string;
  }
  profile_link_->assign(value);
}
inline void DB_FrdPlatInfo::set_profile_link(const char* value) {
  _set_bit(1);
  if (profile_link_ == &_default_profile_link_) {
    profile_link_ = new ::std::string;
  }
  profile_link_->assign(value);
}
inline void DB_FrdPlatInfo::set_profile_link(const char* value, size_t size) {
  _set_bit(1);
  if (profile_link_ == &_default_profile_link_) {
    profile_link_ = new ::std::string;
  }
  profile_link_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* DB_FrdPlatInfo::mutable_profile_link() {
  _set_bit(1);
  if (profile_link_ == &_default_profile_link_) {
    profile_link_ = new ::std::string;
  }
  return profile_link_;
}

// -------------------------------------------------------------------

// DB_FrdInfoLite

// required string userid = 1;
inline bool DB_FrdInfoLite::has_userid() const {
  return _has_bit(0);
}
inline void DB_FrdInfoLite::clear_userid() {
  if (userid_ != &_default_userid_) {
    userid_->clear();
  }
  _clear_bit(0);
}
inline const ::std::string& DB_FrdInfoLite::userid() const {
  return *userid_;
}
inline void DB_FrdInfoLite::set_userid(const ::std::string& value) {
  _set_bit(0);
  if (userid_ == &_default_userid_) {
    userid_ = new ::std::string;
  }
  userid_->assign(value);
}
inline void DB_FrdInfoLite::set_userid(const char* value) {
  _set_bit(0);
  if (userid_ == &_default_userid_) {
    userid_ = new ::std::string;
  }
  userid_->assign(value);
}
inline void DB_FrdInfoLite::set_userid(const char* value, size_t size) {
  _set_bit(0);
  if (userid_ == &_default_userid_) {
    userid_ = new ::std::string;
  }
  userid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* DB_FrdInfoLite::mutable_userid() {
  _set_bit(0);
  if (userid_ == &_default_userid_) {
    userid_ = new ::std::string;
  }
  return userid_;
}

// repeated string name = 2;
inline int DB_FrdInfoLite::name_size() const {
  return name_.size();
}
inline void DB_FrdInfoLite::clear_name() {
  name_.Clear();
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
DB_FrdInfoLite::name() const {
  return name_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
DB_FrdInfoLite::mutable_name() {
  return &name_;
}
inline const ::std::string& DB_FrdInfoLite::name(int index) const {
  return name_.Get(index);
}
inline ::std::string* DB_FrdInfoLite::mutable_name(int index) {
  return name_.Mutable(index);
}
inline void DB_FrdInfoLite::set_name(int index, const ::std::string& value) {
  name_.Mutable(index)->assign(value);
}
inline void DB_FrdInfoLite::set_name(int index, const char* value) {
  name_.Mutable(index)->assign(value);
}
inline void DB_FrdInfoLite::set_name(int index, const char* value, size_t size) {
  name_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* DB_FrdInfoLite::add_name() {
  return name_.Add();
}
inline void DB_FrdInfoLite::add_name(const ::std::string& value) {
  name_.Add()->assign(value);
}
inline void DB_FrdInfoLite::add_name(const char* value) {
  name_.Add()->assign(value);
}
inline void DB_FrdInfoLite::add_name(const char* value, size_t size) {
  name_.Add()->assign(reinterpret_cast<const char*>(value), size);
}

// repeated string profile_link = 3;
inline int DB_FrdInfoLite::profile_link_size() const {
  return profile_link_.size();
}
inline void DB_FrdInfoLite::clear_profile_link() {
  profile_link_.Clear();
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
DB_FrdInfoLite::profile_link() const {
  return profile_link_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
DB_FrdInfoLite::mutable_profile_link() {
  return &profile_link_;
}
inline const ::std::string& DB_FrdInfoLite::profile_link(int index) const {
  return profile_link_.Get(index);
}
inline ::std::string* DB_FrdInfoLite::mutable_profile_link(int index) {
  return profile_link_.Mutable(index);
}
inline void DB_FrdInfoLite::set_profile_link(int index, const ::std::string& value) {
  profile_link_.Mutable(index)->assign(value);
}
inline void DB_FrdInfoLite::set_profile_link(int index, const char* value) {
  profile_link_.Mutable(index)->assign(value);
}
inline void DB_FrdInfoLite::set_profile_link(int index, const char* value, size_t size) {
  profile_link_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* DB_FrdInfoLite::add_profile_link() {
  return profile_link_.Add();
}
inline void DB_FrdInfoLite::add_profile_link(const ::std::string& value) {
  profile_link_.Add()->assign(value);
}
inline void DB_FrdInfoLite::add_profile_link(const char* value) {
  profile_link_.Add()->assign(value);
}
inline void DB_FrdInfoLite::add_profile_link(const char* value, size_t size) {
  profile_link_.Add()->assign(reinterpret_cast<const char*>(value), size);
}

// optional uint32 level = 4;
inline bool DB_FrdInfoLite::has_level() const {
  return _has_bit(3);
}
inline void DB_FrdInfoLite::clear_level() {
  level_ = 0u;
  _clear_bit(3);
}
inline ::google::protobuf::uint32 DB_FrdInfoLite::level() const {
  return level_;
}
inline void DB_FrdInfoLite::set_level(::google::protobuf::uint32 value) {
  _set_bit(3);
  level_ = value;
}

// optional bool is_yellow_vip = 5 [default = false];
inline bool DB_FrdInfoLite::has_is_yellow_vip() const {
  return _has_bit(4);
}
inline void DB_FrdInfoLite::clear_is_yellow_vip() {
  is_yellow_vip_ = false;
  _clear_bit(4);
}
inline bool DB_FrdInfoLite::is_yellow_vip() const {
  return is_yellow_vip_;
}
inline void DB_FrdInfoLite::set_is_yellow_vip(bool value) {
  _set_bit(4);
  is_yellow_vip_ = value;
}

// optional bool is_yellow_year_vip = 6 [default = false];
inline bool DB_FrdInfoLite::has_is_yellow_year_vip() const {
  return _has_bit(5);
}
inline void DB_FrdInfoLite::clear_is_yellow_year_vip() {
  is_yellow_year_vip_ = false;
  _clear_bit(5);
}
inline bool DB_FrdInfoLite::is_yellow_year_vip() const {
  return is_yellow_year_vip_;
}
inline void DB_FrdInfoLite::set_is_yellow_year_vip(bool value) {
  _set_bit(5);
  is_yellow_year_vip_ = value;
}

// optional int32 yellow_vip_level = 7 [default = 0];
inline bool DB_FrdInfoLite::has_yellow_vip_level() const {
  return _has_bit(6);
}
inline void DB_FrdInfoLite::clear_yellow_vip_level() {
  yellow_vip_level_ = 0;
  _clear_bit(6);
}
inline ::google::protobuf::int32 DB_FrdInfoLite::yellow_vip_level() const {
  return yellow_vip_level_;
}
inline void DB_FrdInfoLite::set_yellow_vip_level(::google::protobuf::int32 value) {
  _set_bit(6);
  yellow_vip_level_ = value;
}

// optional int32 QQDmdLvl = 8 [default = 0];
inline bool DB_FrdInfoLite::has_qqdmdlvl() const {
  return _has_bit(7);
}
inline void DB_FrdInfoLite::clear_qqdmdlvl() {
  qqdmdlvl_ = 0;
  _clear_bit(7);
}
inline ::google::protobuf::int32 DB_FrdInfoLite::qqdmdlvl() const {
  return qqdmdlvl_;
}
inline void DB_FrdInfoLite::set_qqdmdlvl(::google::protobuf::int32 value) {
  _set_bit(7);
  qqdmdlvl_ = value;
}

// optional bool isQQDmd = 9 [default = false];
inline bool DB_FrdInfoLite::has_isqqdmd() const {
  return _has_bit(8);
}
inline void DB_FrdInfoLite::clear_isqqdmd() {
  isqqdmd_ = false;
  _clear_bit(8);
}
inline bool DB_FrdInfoLite::isqqdmd() const {
  return isqqdmd_;
}
inline void DB_FrdInfoLite::set_isqqdmd(bool value) {
  _set_bit(8);
  isqqdmd_ = value;
}

// optional bool isQQDmdYear = 10 [default = false];
inline bool DB_FrdInfoLite::has_isqqdmdyear() const {
  return _has_bit(9);
}
inline void DB_FrdInfoLite::clear_isqqdmdyear() {
  isqqdmdyear_ = false;
  _clear_bit(9);
}
inline bool DB_FrdInfoLite::isqqdmdyear() const {
  return isqqdmdyear_;
}
inline void DB_FrdInfoLite::set_isqqdmdyear(bool value) {
  _set_bit(9);
  isqqdmdyear_ = value;
}

// repeated .DB_FrdRegionInfo region = 11;
inline int DB_FrdInfoLite::region_size() const {
  return region_.size();
}
inline void DB_FrdInfoLite::clear_region() {
  region_.Clear();
}
inline const ::google::protobuf::RepeatedPtrField< ::DB_FrdRegionInfo >&
DB_FrdInfoLite::region() const {
  return region_;
}
inline ::google::protobuf::RepeatedPtrField< ::DB_FrdRegionInfo >*
DB_FrdInfoLite::mutable_region() {
  return &region_;
}
inline const ::DB_FrdRegionInfo& DB_FrdInfoLite::region(int index) const {
  return region_.Get(index);
}
inline ::DB_FrdRegionInfo* DB_FrdInfoLite::mutable_region(int index) {
  return region_.Mutable(index);
}
inline ::DB_FrdRegionInfo* DB_FrdInfoLite::add_region() {
  return region_.Add();
}

// repeated .DB_FrdPlatInfo platInfo = 12;
inline int DB_FrdInfoLite::platinfo_size() const {
  return platinfo_.size();
}
inline void DB_FrdInfoLite::clear_platinfo() {
  platinfo_.Clear();
}
inline const ::google::protobuf::RepeatedPtrField< ::DB_FrdPlatInfo >&
DB_FrdInfoLite::platinfo() const {
  return platinfo_;
}
inline ::google::protobuf::RepeatedPtrField< ::DB_FrdPlatInfo >*
DB_FrdInfoLite::mutable_platinfo() {
  return &platinfo_;
}
inline const ::DB_FrdPlatInfo& DB_FrdInfoLite::platinfo(int index) const {
  return platinfo_.Get(index);
}
inline ::DB_FrdPlatInfo* DB_FrdInfoLite::mutable_platinfo(int index) {
  return platinfo_.Mutable(index);
}
inline ::DB_FrdPlatInfo* DB_FrdInfoLite::add_platinfo() {
  return platinfo_.Add();
}

// optional int32 is_high_yellow_vip = 13 [default = 0];
inline bool DB_FrdInfoLite::has_is_high_yellow_vip() const {
  return _has_bit(12);
}
inline void DB_FrdInfoLite::clear_is_high_yellow_vip() {
  is_high_yellow_vip_ = 0;
  _clear_bit(12);
}
inline ::google::protobuf::int32 DB_FrdInfoLite::is_high_yellow_vip() const {
  return is_high_yellow_vip_;
}
inline void DB_FrdInfoLite::set_is_high_yellow_vip(::google::protobuf::int32 value) {
  _set_bit(12);
  is_high_yellow_vip_ = value;
}

// optional int32 QHallDmdLvl = 14 [default = 0];
inline bool DB_FrdInfoLite::has_qhalldmdlvl() const {
  return _has_bit(13);
}
inline void DB_FrdInfoLite::clear_qhalldmdlvl() {
  qhalldmdlvl_ = 0;
  _clear_bit(13);
}
inline ::google::protobuf::int32 DB_FrdInfoLite::qhalldmdlvl() const {
  return qhalldmdlvl_;
}
inline void DB_FrdInfoLite::set_qhalldmdlvl(::google::protobuf::int32 value) {
  _set_bit(13);
  qhalldmdlvl_ = value;
}

// optional bool isQHallDmd = 15 [default = false];
inline bool DB_FrdInfoLite::has_isqhalldmd() const {
  return _has_bit(14);
}
inline void DB_FrdInfoLite::clear_isqhalldmd() {
  isqhalldmd_ = false;
  _clear_bit(14);
}
inline bool DB_FrdInfoLite::isqhalldmd() const {
  return isqhalldmd_;
}
inline void DB_FrdInfoLite::set_isqhalldmd(bool value) {
  _set_bit(14);
  isqhalldmd_ = value;
}

// optional bool isQHallDmdYear = 16;
inline bool DB_FrdInfoLite::has_isqhalldmdyear() const {
  return _has_bit(15);
}
inline void DB_FrdInfoLite::clear_isqhalldmdyear() {
  isqhalldmdyear_ = false;
  _clear_bit(15);
}
inline bool DB_FrdInfoLite::isqhalldmdyear() const {
  return isqhalldmdyear_;
}
inline void DB_FrdInfoLite::set_isqhalldmdyear(bool value) {
  _set_bit(15);
  isqhalldmdyear_ = value;
}

// optional bool isHighQHallDmd = 17;
inline bool DB_FrdInfoLite::has_ishighqhalldmd() const {
  return _has_bit(16);
}
inline void DB_FrdInfoLite::clear_ishighqhalldmd() {
  ishighqhalldmd_ = false;
  _clear_bit(16);
}
inline bool DB_FrdInfoLite::ishighqhalldmd() const {
  return ishighqhalldmd_;
}
inline void DB_FrdInfoLite::set_ishighqhalldmd(bool value) {
  _set_bit(16);
  ishighqhalldmd_ = value;
}

// optional bool isHighQHallDmdYear = 18;
inline bool DB_FrdInfoLite::has_ishighqhalldmdyear() const {
  return _has_bit(17);
}
inline void DB_FrdInfoLite::clear_ishighqhalldmdyear() {
  ishighqhalldmdyear_ = false;
  _clear_bit(17);
}
inline bool DB_FrdInfoLite::ishighqhalldmdyear() const {
  return ishighqhalldmdyear_;
}
inline void DB_FrdInfoLite::set_ishighqhalldmdyear(bool value) {
  _set_bit(17);
  ishighqhalldmdyear_ = value;
}


#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

#endif  // PROTOBUF_friendDB_2eproto__INCLUDED
