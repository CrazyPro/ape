// Generated by the protocol buffer compiler.  DO NOT EDIT!

#ifndef PROTOBUF_RceQueryCheckAndLockAccountIfPossible_2eproto__INCLUDED
#define PROTOBUF_RceQueryCheckAndLockAccountIfPossible_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2002000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2002000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_RceQueryCheckAndLockAccountIfPossible_2eproto();
void protobuf_AssignDesc_RceQueryCheckAndLockAccountIfPossible_2eproto();
void protobuf_ShutdownFile_RceQueryCheckAndLockAccountIfPossible_2eproto();

class RceQueryCheckAndLockAccountIfPossible;
class HangarsUnitsInfo;

// ===================================================================

class RceQueryCheckAndLockAccountIfPossible : public ::google::protobuf::Message {
 public:
  RceQueryCheckAndLockAccountIfPossible();
  virtual ~RceQueryCheckAndLockAccountIfPossible();
  
  RceQueryCheckAndLockAccountIfPossible(const RceQueryCheckAndLockAccountIfPossible& from);
  
  inline RceQueryCheckAndLockAccountIfPossible& operator=(const RceQueryCheckAndLockAccountIfPossible& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const RceQueryCheckAndLockAccountIfPossible& default_instance();
  void Swap(RceQueryCheckAndLockAccountIfPossible* other);
  
  // implements Message ----------------------------------------------
  
  RceQueryCheckAndLockAccountIfPossible* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RceQueryCheckAndLockAccountIfPossible& from);
  void MergeFrom(const RceQueryCheckAndLockAccountIfPossible& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const { _cached_size_ = size; }
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // repeated .HangarsUnitsInfo hangarsUnitsInfo = 1;
  inline int hangarsunitsinfo_size() const;
  inline void clear_hangarsunitsinfo();
  static const int kHangarsUnitsInfoFieldNumber = 1;
  inline const ::google::protobuf::RepeatedPtrField< ::HangarsUnitsInfo >& hangarsunitsinfo() const;
  inline ::google::protobuf::RepeatedPtrField< ::HangarsUnitsInfo >* mutable_hangarsunitsinfo();
  inline const ::HangarsUnitsInfo& hangarsunitsinfo(int index) const;
  inline ::HangarsUnitsInfo* mutable_hangarsunitsinfo(int index);
  inline ::HangarsUnitsInfo* add_hangarsunitsinfo();
  
  // optional int32 planetId = 2;
  inline bool has_planetid() const;
  inline void clear_planetid();
  static const int kPlanetIdFieldNumber = 2;
  inline ::google::protobuf::int32 planetid() const;
  inline void set_planetid(::google::protobuf::int32 value);
  
  // optional int32 applyLock = 3;
  inline bool has_applylock() const;
  inline void clear_applylock();
  static const int kApplyLockFieldNumber = 3;
  inline ::google::protobuf::int32 applylock() const;
  inline void set_applylock(::google::protobuf::int32 value);
  
  // optional string targetAccountId = 4;
  inline bool has_targetaccountid() const;
  inline void clear_targetaccountid();
  static const int kTargetAccountIdFieldNumber = 4;
  inline const ::std::string& targetaccountid() const;
  inline void set_targetaccountid(const ::std::string& value);
  inline void set_targetaccountid(const char* value);
  inline void set_targetaccountid(const char* value, size_t size);
  inline ::std::string* mutable_targetaccountid();
  
  // optional int32 isAllianceWar = 5;
  inline bool has_isalliancewar() const;
  inline void clear_isalliancewar();
  static const int kIsAllianceWarFieldNumber = 5;
  inline ::google::protobuf::int32 isalliancewar() const;
  inline void set_isalliancewar(::google::protobuf::int32 value);
  
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::google::protobuf::RepeatedPtrField< ::HangarsUnitsInfo > hangarsunitsinfo_;
  ::google::protobuf::int32 planetid_;
  ::google::protobuf::int32 applylock_;
  ::std::string* targetaccountid_;
  static const ::std::string _default_targetaccountid_;
  ::google::protobuf::int32 isalliancewar_;
  friend void  protobuf_AddDesc_RceQueryCheckAndLockAccountIfPossible_2eproto();
  friend void protobuf_AssignDesc_RceQueryCheckAndLockAccountIfPossible_2eproto();
  friend void protobuf_ShutdownFile_RceQueryCheckAndLockAccountIfPossible_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static RceQueryCheckAndLockAccountIfPossible* default_instance_;
};
// -------------------------------------------------------------------

class HangarsUnitsInfo : public ::google::protobuf::Message {
 public:
  HangarsUnitsInfo();
  virtual ~HangarsUnitsInfo();
  
  HangarsUnitsInfo(const HangarsUnitsInfo& from);
  
  inline HangarsUnitsInfo& operator=(const HangarsUnitsInfo& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const HangarsUnitsInfo& default_instance();
  void Swap(HangarsUnitsInfo* other);
  
  // implements Message ----------------------------------------------
  
  HangarsUnitsInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const HangarsUnitsInfo& from);
  void MergeFrom(const HangarsUnitsInfo& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const { _cached_size_ = size; }
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional int32 sid = 1;
  inline bool has_sid() const;
  inline void clear_sid();
  static const int kSidFieldNumber = 1;
  inline ::google::protobuf::int32 sid() const;
  inline void set_sid(::google::protobuf::int32 value);
  
  // optional string sku = 2;
  inline bool has_sku() const;
  inline void clear_sku();
  static const int kSkuFieldNumber = 2;
  inline const ::std::string& sku() const;
  inline void set_sku(const ::std::string& value);
  inline void set_sku(const char* value);
  inline void set_sku(const char* value, size_t size);
  inline ::std::string* mutable_sku();
  
  // optional int32 num = 3;
  inline bool has_num() const;
  inline void clear_num();
  static const int kNumFieldNumber = 3;
  inline ::google::protobuf::int32 num() const;
  inline void set_num(::google::protobuf::int32 value);
  
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::google::protobuf::int32 sid_;
  ::std::string* sku_;
  static const ::std::string _default_sku_;
  ::google::protobuf::int32 num_;
  friend void  protobuf_AddDesc_RceQueryCheckAndLockAccountIfPossible_2eproto();
  friend void protobuf_AssignDesc_RceQueryCheckAndLockAccountIfPossible_2eproto();
  friend void protobuf_ShutdownFile_RceQueryCheckAndLockAccountIfPossible_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static HangarsUnitsInfo* default_instance_;
};
// ===================================================================


// ===================================================================


// ===================================================================

// RceQueryCheckAndLockAccountIfPossible

// repeated .HangarsUnitsInfo hangarsUnitsInfo = 1;
inline int RceQueryCheckAndLockAccountIfPossible::hangarsunitsinfo_size() const {
  return hangarsunitsinfo_.size();
}
inline void RceQueryCheckAndLockAccountIfPossible::clear_hangarsunitsinfo() {
  hangarsunitsinfo_.Clear();
}
inline const ::google::protobuf::RepeatedPtrField< ::HangarsUnitsInfo >&
RceQueryCheckAndLockAccountIfPossible::hangarsunitsinfo() const {
  return hangarsunitsinfo_;
}
inline ::google::protobuf::RepeatedPtrField< ::HangarsUnitsInfo >*
RceQueryCheckAndLockAccountIfPossible::mutable_hangarsunitsinfo() {
  return &hangarsunitsinfo_;
}
inline const ::HangarsUnitsInfo& RceQueryCheckAndLockAccountIfPossible::hangarsunitsinfo(int index) const {
  return hangarsunitsinfo_.Get(index);
}
inline ::HangarsUnitsInfo* RceQueryCheckAndLockAccountIfPossible::mutable_hangarsunitsinfo(int index) {
  return hangarsunitsinfo_.Mutable(index);
}
inline ::HangarsUnitsInfo* RceQueryCheckAndLockAccountIfPossible::add_hangarsunitsinfo() {
  return hangarsunitsinfo_.Add();
}

// optional int32 planetId = 2;
inline bool RceQueryCheckAndLockAccountIfPossible::has_planetid() const {
  return _has_bit(1);
}
inline void RceQueryCheckAndLockAccountIfPossible::clear_planetid() {
  planetid_ = 0;
  _clear_bit(1);
}
inline ::google::protobuf::int32 RceQueryCheckAndLockAccountIfPossible::planetid() const {
  return planetid_;
}
inline void RceQueryCheckAndLockAccountIfPossible::set_planetid(::google::protobuf::int32 value) {
  _set_bit(1);
  planetid_ = value;
}

// optional int32 applyLock = 3;
inline bool RceQueryCheckAndLockAccountIfPossible::has_applylock() const {
  return _has_bit(2);
}
inline void RceQueryCheckAndLockAccountIfPossible::clear_applylock() {
  applylock_ = 0;
  _clear_bit(2);
}
inline ::google::protobuf::int32 RceQueryCheckAndLockAccountIfPossible::applylock() const {
  return applylock_;
}
inline void RceQueryCheckAndLockAccountIfPossible::set_applylock(::google::protobuf::int32 value) {
  _set_bit(2);
  applylock_ = value;
}

// optional string targetAccountId = 4;
inline bool RceQueryCheckAndLockAccountIfPossible::has_targetaccountid() const {
  return _has_bit(3);
}
inline void RceQueryCheckAndLockAccountIfPossible::clear_targetaccountid() {
  if (targetaccountid_ != &_default_targetaccountid_) {
    targetaccountid_->clear();
  }
  _clear_bit(3);
}
inline const ::std::string& RceQueryCheckAndLockAccountIfPossible::targetaccountid() const {
  return *targetaccountid_;
}
inline void RceQueryCheckAndLockAccountIfPossible::set_targetaccountid(const ::std::string& value) {
  _set_bit(3);
  if (targetaccountid_ == &_default_targetaccountid_) {
    targetaccountid_ = new ::std::string;
  }
  targetaccountid_->assign(value);
}
inline void RceQueryCheckAndLockAccountIfPossible::set_targetaccountid(const char* value) {
  _set_bit(3);
  if (targetaccountid_ == &_default_targetaccountid_) {
    targetaccountid_ = new ::std::string;
  }
  targetaccountid_->assign(value);
}
inline void RceQueryCheckAndLockAccountIfPossible::set_targetaccountid(const char* value, size_t size) {
  _set_bit(3);
  if (targetaccountid_ == &_default_targetaccountid_) {
    targetaccountid_ = new ::std::string;
  }
  targetaccountid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RceQueryCheckAndLockAccountIfPossible::mutable_targetaccountid() {
  _set_bit(3);
  if (targetaccountid_ == &_default_targetaccountid_) {
    targetaccountid_ = new ::std::string;
  }
  return targetaccountid_;
}

// optional int32 isAllianceWar = 5;
inline bool RceQueryCheckAndLockAccountIfPossible::has_isalliancewar() const {
  return _has_bit(4);
}
inline void RceQueryCheckAndLockAccountIfPossible::clear_isalliancewar() {
  isalliancewar_ = 0;
  _clear_bit(4);
}
inline ::google::protobuf::int32 RceQueryCheckAndLockAccountIfPossible::isalliancewar() const {
  return isalliancewar_;
}
inline void RceQueryCheckAndLockAccountIfPossible::set_isalliancewar(::google::protobuf::int32 value) {
  _set_bit(4);
  isalliancewar_ = value;
}

// -------------------------------------------------------------------

// HangarsUnitsInfo

// optional int32 sid = 1;
inline bool HangarsUnitsInfo::has_sid() const {
  return _has_bit(0);
}
inline void HangarsUnitsInfo::clear_sid() {
  sid_ = 0;
  _clear_bit(0);
}
inline ::google::protobuf::int32 HangarsUnitsInfo::sid() const {
  return sid_;
}
inline void HangarsUnitsInfo::set_sid(::google::protobuf::int32 value) {
  _set_bit(0);
  sid_ = value;
}

// optional string sku = 2;
inline bool HangarsUnitsInfo::has_sku() const {
  return _has_bit(1);
}
inline void HangarsUnitsInfo::clear_sku() {
  if (sku_ != &_default_sku_) {
    sku_->clear();
  }
  _clear_bit(1);
}
inline const ::std::string& HangarsUnitsInfo::sku() const {
  return *sku_;
}
inline void HangarsUnitsInfo::set_sku(const ::std::string& value) {
  _set_bit(1);
  if (sku_ == &_default_sku_) {
    sku_ = new ::std::string;
  }
  sku_->assign(value);
}
inline void HangarsUnitsInfo::set_sku(const char* value) {
  _set_bit(1);
  if (sku_ == &_default_sku_) {
    sku_ = new ::std::string;
  }
  sku_->assign(value);
}
inline void HangarsUnitsInfo::set_sku(const char* value, size_t size) {
  _set_bit(1);
  if (sku_ == &_default_sku_) {
    sku_ = new ::std::string;
  }
  sku_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* HangarsUnitsInfo::mutable_sku() {
  _set_bit(1);
  if (sku_ == &_default_sku_) {
    sku_ = new ::std::string;
  }
  return sku_;
}

// optional int32 num = 3;
inline bool HangarsUnitsInfo::has_num() const {
  return _has_bit(2);
}
inline void HangarsUnitsInfo::clear_num() {
  num_ = 0;
  _clear_bit(2);
}
inline ::google::protobuf::int32 HangarsUnitsInfo::num() const {
  return num_;
}
inline void HangarsUnitsInfo::set_num(::google::protobuf::int32 value) {
  _set_bit(2);
  num_ = value;
}


#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

#endif  // PROTOBUF_RceQueryCheckAndLockAccountIfPossible_2eproto__INCLUDED
