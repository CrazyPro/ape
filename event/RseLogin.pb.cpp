// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "RseLogin.pb.h"
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>

namespace {

const ::google::protobuf::Descriptor* RseLogin_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RseLogin_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_RseLogin_2eproto() {
  protobuf_AddDesc_RseLogin_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "RseLogin.proto");
  GOOGLE_CHECK(file != NULL);
  RseLogin_descriptor_ = file->message_type(0);
  static const int RseLogin_offsets_[13] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RseLogin, currenttimemillis_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RseLogin, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RseLogin, levelbasedonscore_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RseLogin, myaccountislocked_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RseLogin, pop_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RseLogin, rqid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RseLogin, sync_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RseLogin, timefromlastlogin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RseLogin, timefromlastupdate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RseLogin, token_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RseLogin, userid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RseLogin, version_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RseLogin, vip_),
  };
  RseLogin_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RseLogin_descriptor_,
      RseLogin::default_instance_,
      RseLogin_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RseLogin, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RseLogin, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RseLogin));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_RseLogin_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RseLogin_descriptor_, &RseLogin::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_RseLogin_2eproto() {
  delete RseLogin::default_instance_;
  delete RseLogin_reflection_;
}

void protobuf_AddDesc_RseLogin_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\016RseLogin.proto\"\204\002\n\010RseLogin\022\031\n\021current"
    "TimeMillis\030\001 \001(\005\022\n\n\002id\030\002 \001(\005\022\031\n\021levelBas"
    "edOnScore\030\003 \001(\005\022\031\n\021myAccountIsLocked\030\004 \001"
    "(\005\022\013\n\003pop\030\005 \001(\010\022\014\n\004rqId\030\006 \001(\005\022\014\n\004sync\030\007 "
    "\001(\005\022\031\n\021timeFromLastLogin\030\010 \001(\005\022\032\n\022timeFr"
    "omLastUpdate\030\t \001(\005\022\r\n\005token\030\n \001(\005\022\016\n\006use"
    "rId\030\013 \001(\t\022\017\n\007version\030\014 \001(\t\022\013\n\003vip\030\r \001(\005", 279);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "RseLogin.proto", &protobuf_RegisterTypes);
  RseLogin::default_instance_ = new RseLogin();
  RseLogin::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_RseLogin_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_RseLogin_2eproto {
  StaticDescriptorInitializer_RseLogin_2eproto() {
    protobuf_AddDesc_RseLogin_2eproto();
  }
} static_descriptor_initializer_RseLogin_2eproto_;


// ===================================================================

const ::std::string RseLogin::_default_userid_;
const ::std::string RseLogin::_default_version_;
#ifndef _MSC_VER
const int RseLogin::kCurrentTimeMillisFieldNumber;
const int RseLogin::kIdFieldNumber;
const int RseLogin::kLevelBasedOnScoreFieldNumber;
const int RseLogin::kMyAccountIsLockedFieldNumber;
const int RseLogin::kPopFieldNumber;
const int RseLogin::kRqIdFieldNumber;
const int RseLogin::kSyncFieldNumber;
const int RseLogin::kTimeFromLastLoginFieldNumber;
const int RseLogin::kTimeFromLastUpdateFieldNumber;
const int RseLogin::kTokenFieldNumber;
const int RseLogin::kUserIdFieldNumber;
const int RseLogin::kVersionFieldNumber;
const int RseLogin::kVipFieldNumber;
#endif  // !_MSC_VER

RseLogin::RseLogin() {
  SharedCtor();
}

void RseLogin::InitAsDefaultInstance() {
}

RseLogin::RseLogin(const RseLogin& from) {
  SharedCtor();
  MergeFrom(from);
}

void RseLogin::SharedCtor() {
  _cached_size_ = 0;
  currenttimemillis_ = 0;
  id_ = 0;
  levelbasedonscore_ = 0;
  myaccountislocked_ = 0;
  pop_ = false;
  rqid_ = 0;
  sync_ = 0;
  timefromlastlogin_ = 0;
  timefromlastupdate_ = 0;
  token_ = 0;
  userid_ = const_cast< ::std::string*>(&_default_userid_);
  version_ = const_cast< ::std::string*>(&_default_version_);
  vip_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RseLogin::~RseLogin() {
  SharedDtor();
}

void RseLogin::SharedDtor() {
  if (userid_ != &_default_userid_) {
    delete userid_;
  }
  if (version_ != &_default_version_) {
    delete version_;
  }
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* RseLogin::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RseLogin_descriptor_;
}

const RseLogin& RseLogin::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_RseLogin_2eproto();  return *default_instance_;
}

RseLogin* RseLogin::default_instance_ = NULL;

RseLogin* RseLogin::New() const {
  return new RseLogin;
}

void RseLogin::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    currenttimemillis_ = 0;
    id_ = 0;
    levelbasedonscore_ = 0;
    myaccountislocked_ = 0;
    pop_ = false;
    rqid_ = 0;
    sync_ = 0;
    timefromlastlogin_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    timefromlastupdate_ = 0;
    token_ = 0;
    if (_has_bit(10)) {
      if (userid_ != &_default_userid_) {
        userid_->clear();
      }
    }
    if (_has_bit(11)) {
      if (version_ != &_default_version_) {
        version_->clear();
      }
    }
    vip_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RseLogin::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 currentTimeMillis = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &currenttimemillis_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_id;
        break;
      }
      
      // optional int32 id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_id:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &id_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_levelBasedOnScore;
        break;
      }
      
      // optional int32 levelBasedOnScore = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_levelBasedOnScore:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &levelbasedonscore_));
        _set_bit(2);
        if (input->ExpectTag(32)) goto parse_myAccountIsLocked;
        break;
      }
      
      // optional int32 myAccountIsLocked = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_myAccountIsLocked:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &myaccountislocked_));
        _set_bit(3);
        if (input->ExpectTag(40)) goto parse_pop;
        break;
      }
      
      // optional bool pop = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_pop:
        DO_(::google::protobuf::internal::WireFormatLite::ReadBool(
              input, &pop_));
        _set_bit(4);
        if (input->ExpectTag(48)) goto parse_rqId;
        break;
      }
      
      // optional int32 rqId = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_rqId:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &rqid_));
        _set_bit(5);
        if (input->ExpectTag(56)) goto parse_sync;
        break;
      }
      
      // optional int32 sync = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_sync:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &sync_));
        _set_bit(6);
        if (input->ExpectTag(64)) goto parse_timeFromLastLogin;
        break;
      }
      
      // optional int32 timeFromLastLogin = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_timeFromLastLogin:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &timefromlastlogin_));
        _set_bit(7);
        if (input->ExpectTag(72)) goto parse_timeFromLastUpdate;
        break;
      }
      
      // optional int32 timeFromLastUpdate = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_timeFromLastUpdate:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &timefromlastupdate_));
        _set_bit(8);
        if (input->ExpectTag(80)) goto parse_token;
        break;
      }
      
      // optional int32 token = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_token:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &token_));
        _set_bit(9);
        if (input->ExpectTag(90)) goto parse_userId;
        break;
      }
      
      // optional string userId = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_userId:
        DO_(::google::protobuf::internal::WireFormatLite::ReadString(
              input, this->mutable_userid()));
        ::google::protobuf::internal::WireFormat::VerifyUTF8String(
          this->userid().data(), this->userid().length(),
          ::google::protobuf::internal::WireFormat::PARSE);
        if (input->ExpectTag(98)) goto parse_version;
        break;
      }
      
      // optional string version = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_version:
        DO_(::google::protobuf::internal::WireFormatLite::ReadString(
              input, this->mutable_version()));
        ::google::protobuf::internal::WireFormat::VerifyUTF8String(
          this->version().data(), this->version().length(),
          ::google::protobuf::internal::WireFormat::PARSE);
        if (input->ExpectTag(104)) goto parse_vip;
        break;
      }
      
      // optional int32 vip = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_vip:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &vip_));
        _set_bit(12);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RseLogin::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    RseLogin::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional int32 currentTimeMillis = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->currenttimemillis(), output);
  }
  
  // optional int32 id = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->id(), output);
  }
  
  // optional int32 levelBasedOnScore = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->levelbasedonscore(), output);
  }
  
  // optional int32 myAccountIsLocked = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->myaccountislocked(), output);
  }
  
  // optional bool pop = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->pop(), output);
  }
  
  // optional int32 rqId = 6;
  if (_has_bit(5)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->rqid(), output);
  }
  
  // optional int32 sync = 7;
  if (_has_bit(6)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->sync(), output);
  }
  
  // optional int32 timeFromLastLogin = 8;
  if (_has_bit(7)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->timefromlastlogin(), output);
  }
  
  // optional int32 timeFromLastUpdate = 9;
  if (_has_bit(8)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->timefromlastupdate(), output);
  }
  
  // optional int32 token = 10;
  if (_has_bit(9)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->token(), output);
  }
  
  // optional string userId = 11;
  if (_has_bit(10)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->userid().data(), this->userid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      11, this->userid(), output);
  }
  
  // optional string version = 12;
  if (_has_bit(11)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->version().data(), this->version().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      12, this->version(), output);
  }
  
  // optional int32 vip = 13;
  if (_has_bit(12)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->vip(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RseLogin::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 currentTimeMillis = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->currenttimemillis(), target);
  }
  
  // optional int32 id = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->id(), target);
  }
  
  // optional int32 levelBasedOnScore = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->levelbasedonscore(), target);
  }
  
  // optional int32 myAccountIsLocked = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->myaccountislocked(), target);
  }
  
  // optional bool pop = 5;
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->pop(), target);
  }
  
  // optional int32 rqId = 6;
  if (_has_bit(5)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->rqid(), target);
  }
  
  // optional int32 sync = 7;
  if (_has_bit(6)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->sync(), target);
  }
  
  // optional int32 timeFromLastLogin = 8;
  if (_has_bit(7)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->timefromlastlogin(), target);
  }
  
  // optional int32 timeFromLastUpdate = 9;
  if (_has_bit(8)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->timefromlastupdate(), target);
  }
  
  // optional int32 token = 10;
  if (_has_bit(9)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->token(), target);
  }
  
  // optional string userId = 11;
  if (_has_bit(10)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->userid().data(), this->userid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        11, this->userid(), target);
  }
  
  // optional string version = 12;
  if (_has_bit(11)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->version().data(), this->version().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        12, this->version(), target);
  }
  
  // optional int32 vip = 13;
  if (_has_bit(12)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->vip(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RseLogin::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 currentTimeMillis = 1;
    if (has_currenttimemillis()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->currenttimemillis());
    }
    
    // optional int32 id = 2;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }
    
    // optional int32 levelBasedOnScore = 3;
    if (has_levelbasedonscore()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->levelbasedonscore());
    }
    
    // optional int32 myAccountIsLocked = 4;
    if (has_myaccountislocked()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->myaccountislocked());
    }
    
    // optional bool pop = 5;
    if (has_pop()) {
      total_size += 1 + 1;
    }
    
    // optional int32 rqId = 6;
    if (has_rqid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rqid());
    }
    
    // optional int32 sync = 7;
    if (has_sync()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sync());
    }
    
    // optional int32 timeFromLastLogin = 8;
    if (has_timefromlastlogin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->timefromlastlogin());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 timeFromLastUpdate = 9;
    if (has_timefromlastupdate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->timefromlastupdate());
    }
    
    // optional int32 token = 10;
    if (has_token()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->token());
    }
    
    // optional string userId = 11;
    if (has_userid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->userid());
    }
    
    // optional string version = 12;
    if (has_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->version());
    }
    
    // optional int32 vip = 13;
    if (has_vip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->vip());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void RseLogin::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RseLogin* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RseLogin*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RseLogin::MergeFrom(const RseLogin& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_currenttimemillis(from.currenttimemillis());
    }
    if (from._has_bit(1)) {
      set_id(from.id());
    }
    if (from._has_bit(2)) {
      set_levelbasedonscore(from.levelbasedonscore());
    }
    if (from._has_bit(3)) {
      set_myaccountislocked(from.myaccountislocked());
    }
    if (from._has_bit(4)) {
      set_pop(from.pop());
    }
    if (from._has_bit(5)) {
      set_rqid(from.rqid());
    }
    if (from._has_bit(6)) {
      set_sync(from.sync());
    }
    if (from._has_bit(7)) {
      set_timefromlastlogin(from.timefromlastlogin());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from._has_bit(8)) {
      set_timefromlastupdate(from.timefromlastupdate());
    }
    if (from._has_bit(9)) {
      set_token(from.token());
    }
    if (from._has_bit(10)) {
      set_userid(from.userid());
    }
    if (from._has_bit(11)) {
      set_version(from.version());
    }
    if (from._has_bit(12)) {
      set_vip(from.vip());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RseLogin::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RseLogin::CopyFrom(const RseLogin& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RseLogin::IsInitialized() const {
  
  return true;
}

void RseLogin::Swap(RseLogin* other) {
  if (other != this) {
    std::swap(currenttimemillis_, other->currenttimemillis_);
    std::swap(id_, other->id_);
    std::swap(levelbasedonscore_, other->levelbasedonscore_);
    std::swap(myaccountislocked_, other->myaccountislocked_);
    std::swap(pop_, other->pop_);
    std::swap(rqid_, other->rqid_);
    std::swap(sync_, other->sync_);
    std::swap(timefromlastlogin_, other->timefromlastlogin_);
    std::swap(timefromlastupdate_, other->timefromlastupdate_);
    std::swap(token_, other->token_);
    std::swap(userid_, other->userid_);
    std::swap(version_, other->version_);
    std::swap(vip_, other->vip_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RseLogin::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RseLogin_descriptor_;
  metadata.reflection = RseLogin_reflection_;
  return metadata;
}

