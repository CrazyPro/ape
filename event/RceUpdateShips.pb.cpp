// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "RceUpdateShips.pb.h"
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>

namespace {

const ::google::protobuf::Descriptor* SlotsContentsAccelerated_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SlotsContentsAccelerated_reflection_ = NULL;
const ::google::protobuf::Descriptor* RceUpdateShips_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RceUpdateShips_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_RceUpdateShips_2eproto() {
  protobuf_AddDesc_RceUpdateShips_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "RceUpdateShips.proto");
  GOOGLE_CHECK(file != NULL);
  SlotsContentsAccelerated_descriptor_ = file->message_type(0);
  static const int SlotsContentsAccelerated_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SlotsContentsAccelerated, sku_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SlotsContentsAccelerated, amount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SlotsContentsAccelerated, slot_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SlotsContentsAccelerated, hangarsid_),
  };
  SlotsContentsAccelerated_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SlotsContentsAccelerated_descriptor_,
      SlotsContentsAccelerated::default_instance_,
      SlotsContentsAccelerated_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SlotsContentsAccelerated, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SlotsContentsAccelerated, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SlotsContentsAccelerated));
  RceUpdateShips_descriptor_ = file->message_type(1);
  static const int RceUpdateShips_offsets_[13] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RceUpdateShips, transaction_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RceUpdateShips, planetid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RceUpdateShips, action_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RceUpdateShips, sid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RceUpdateShips, sku_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RceUpdateShips, hangarsid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RceUpdateShips, bunkersid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RceUpdateShips, unitsku_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RceUpdateShips, amount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RceUpdateShips, block_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RceUpdateShips, slot_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RceUpdateShips, timeleft_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RceUpdateShips, slotscontentsaccelerated_),
  };
  RceUpdateShips_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RceUpdateShips_descriptor_,
      RceUpdateShips::default_instance_,
      RceUpdateShips_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RceUpdateShips, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RceUpdateShips, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RceUpdateShips));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_RceUpdateShips_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SlotsContentsAccelerated_descriptor_, &SlotsContentsAccelerated::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RceUpdateShips_descriptor_, &RceUpdateShips::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_RceUpdateShips_2eproto() {
  delete SlotsContentsAccelerated::default_instance_;
  delete SlotsContentsAccelerated_reflection_;
  delete RceUpdateShips::default_instance_;
  delete RceUpdateShips_reflection_;
}

void protobuf_AddDesc_RceUpdateShips_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::protobuf_AddDesc_MsgTransaction_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\024RceUpdateShips.proto\032\024MsgTransaction.p"
    "roto\"X\n\030SlotsContentsAccelerated\022\013\n\003sku\030"
    "\001 \001(\t\022\016\n\006amount\030\002 \001(\005\022\014\n\004slot\030\003 \001(\005\022\021\n\th"
    "angarSid\030\004 \001(\005\"\245\002\n\016RceUpdateShips\022$\n\013tra"
    "nsaction\030\001 \001(\0132\017.MsgTransaction\022\020\n\010plane"
    "tId\030\002 \001(\005\022\016\n\006action\030\003 \001(\t\022\013\n\003sid\030\004 \001(\005\022\013"
    "\n\003sku\030\005 \001(\t\022\021\n\thangarSid\030\006 \001(\005\022\021\n\tbunker"
    "Sid\030\007 \001(\005\022\017\n\007unitSku\030\010 \001(\t\022\016\n\006amount\030\t \001"
    "(\005\022\r\n\005block\030\n \001(\005\022\014\n\004slot\030\013 \001(\005\022\020\n\010timeL"
    "eft\030\014 \001(\005\022;\n\030slotsContentsAccelerated\030\r "
    "\003(\0132\031.SlotsContentsAccelerated", 430);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "RceUpdateShips.proto", &protobuf_RegisterTypes);
  SlotsContentsAccelerated::default_instance_ = new SlotsContentsAccelerated();
  RceUpdateShips::default_instance_ = new RceUpdateShips();
  SlotsContentsAccelerated::default_instance_->InitAsDefaultInstance();
  RceUpdateShips::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_RceUpdateShips_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_RceUpdateShips_2eproto {
  StaticDescriptorInitializer_RceUpdateShips_2eproto() {
    protobuf_AddDesc_RceUpdateShips_2eproto();
  }
} static_descriptor_initializer_RceUpdateShips_2eproto_;


// ===================================================================

const ::std::string SlotsContentsAccelerated::_default_sku_;
#ifndef _MSC_VER
const int SlotsContentsAccelerated::kSkuFieldNumber;
const int SlotsContentsAccelerated::kAmountFieldNumber;
const int SlotsContentsAccelerated::kSlotFieldNumber;
const int SlotsContentsAccelerated::kHangarSidFieldNumber;
#endif  // !_MSC_VER

SlotsContentsAccelerated::SlotsContentsAccelerated() {
  SharedCtor();
}

void SlotsContentsAccelerated::InitAsDefaultInstance() {
}

SlotsContentsAccelerated::SlotsContentsAccelerated(const SlotsContentsAccelerated& from) {
  SharedCtor();
  MergeFrom(from);
}

void SlotsContentsAccelerated::SharedCtor() {
  _cached_size_ = 0;
  sku_ = const_cast< ::std::string*>(&_default_sku_);
  amount_ = 0;
  slot_ = 0;
  hangarsid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SlotsContentsAccelerated::~SlotsContentsAccelerated() {
  SharedDtor();
}

void SlotsContentsAccelerated::SharedDtor() {
  if (sku_ != &_default_sku_) {
    delete sku_;
  }
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* SlotsContentsAccelerated::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SlotsContentsAccelerated_descriptor_;
}

const SlotsContentsAccelerated& SlotsContentsAccelerated::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_RceUpdateShips_2eproto();  return *default_instance_;
}

SlotsContentsAccelerated* SlotsContentsAccelerated::default_instance_ = NULL;

SlotsContentsAccelerated* SlotsContentsAccelerated::New() const {
  return new SlotsContentsAccelerated;
}

void SlotsContentsAccelerated::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (sku_ != &_default_sku_) {
        sku_->clear();
      }
    }
    amount_ = 0;
    slot_ = 0;
    hangarsid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SlotsContentsAccelerated::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string sku = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadString(
              input, this->mutable_sku()));
        ::google::protobuf::internal::WireFormat::VerifyUTF8String(
          this->sku().data(), this->sku().length(),
          ::google::protobuf::internal::WireFormat::PARSE);
        if (input->ExpectTag(16)) goto parse_amount;
        break;
      }
      
      // optional int32 amount = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_amount:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &amount_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_slot;
        break;
      }
      
      // optional int32 slot = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_slot:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &slot_));
        _set_bit(2);
        if (input->ExpectTag(32)) goto parse_hangarSid;
        break;
      }
      
      // optional int32 hangarSid = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_hangarSid:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &hangarsid_));
        _set_bit(3);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SlotsContentsAccelerated::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    SlotsContentsAccelerated::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional string sku = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->sku().data(), this->sku().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->sku(), output);
  }
  
  // optional int32 amount = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->amount(), output);
  }
  
  // optional int32 slot = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->slot(), output);
  }
  
  // optional int32 hangarSid = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->hangarsid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SlotsContentsAccelerated::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string sku = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->sku().data(), this->sku().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->sku(), target);
  }
  
  // optional int32 amount = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->amount(), target);
  }
  
  // optional int32 slot = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->slot(), target);
  }
  
  // optional int32 hangarSid = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->hangarsid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SlotsContentsAccelerated::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string sku = 1;
    if (has_sku()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->sku());
    }
    
    // optional int32 amount = 2;
    if (has_amount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->amount());
    }
    
    // optional int32 slot = 3;
    if (has_slot()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->slot());
    }
    
    // optional int32 hangarSid = 4;
    if (has_hangarsid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->hangarsid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void SlotsContentsAccelerated::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SlotsContentsAccelerated* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SlotsContentsAccelerated*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SlotsContentsAccelerated::MergeFrom(const SlotsContentsAccelerated& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_sku(from.sku());
    }
    if (from._has_bit(1)) {
      set_amount(from.amount());
    }
    if (from._has_bit(2)) {
      set_slot(from.slot());
    }
    if (from._has_bit(3)) {
      set_hangarsid(from.hangarsid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SlotsContentsAccelerated::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SlotsContentsAccelerated::CopyFrom(const SlotsContentsAccelerated& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SlotsContentsAccelerated::IsInitialized() const {
  
  return true;
}

void SlotsContentsAccelerated::Swap(SlotsContentsAccelerated* other) {
  if (other != this) {
    std::swap(sku_, other->sku_);
    std::swap(amount_, other->amount_);
    std::swap(slot_, other->slot_);
    std::swap(hangarsid_, other->hangarsid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SlotsContentsAccelerated::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SlotsContentsAccelerated_descriptor_;
  metadata.reflection = SlotsContentsAccelerated_reflection_;
  return metadata;
}


// ===================================================================

const ::std::string RceUpdateShips::_default_action_;
const ::std::string RceUpdateShips::_default_sku_;
const ::std::string RceUpdateShips::_default_unitsku_;
#ifndef _MSC_VER
const int RceUpdateShips::kTransactionFieldNumber;
const int RceUpdateShips::kPlanetIdFieldNumber;
const int RceUpdateShips::kActionFieldNumber;
const int RceUpdateShips::kSidFieldNumber;
const int RceUpdateShips::kSkuFieldNumber;
const int RceUpdateShips::kHangarSidFieldNumber;
const int RceUpdateShips::kBunkerSidFieldNumber;
const int RceUpdateShips::kUnitSkuFieldNumber;
const int RceUpdateShips::kAmountFieldNumber;
const int RceUpdateShips::kBlockFieldNumber;
const int RceUpdateShips::kSlotFieldNumber;
const int RceUpdateShips::kTimeLeftFieldNumber;
const int RceUpdateShips::kSlotsContentsAcceleratedFieldNumber;
#endif  // !_MSC_VER

RceUpdateShips::RceUpdateShips() {
  SharedCtor();
}

void RceUpdateShips::InitAsDefaultInstance() {
  transaction_ = const_cast< ::MsgTransaction*>(&::MsgTransaction::default_instance());
}

RceUpdateShips::RceUpdateShips(const RceUpdateShips& from) {
  SharedCtor();
  MergeFrom(from);
}

void RceUpdateShips::SharedCtor() {
  _cached_size_ = 0;
  transaction_ = NULL;
  planetid_ = 0;
  action_ = const_cast< ::std::string*>(&_default_action_);
  sid_ = 0;
  sku_ = const_cast< ::std::string*>(&_default_sku_);
  hangarsid_ = 0;
  bunkersid_ = 0;
  unitsku_ = const_cast< ::std::string*>(&_default_unitsku_);
  amount_ = 0;
  block_ = 0;
  slot_ = 0;
  timeleft_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RceUpdateShips::~RceUpdateShips() {
  SharedDtor();
}

void RceUpdateShips::SharedDtor() {
  if (action_ != &_default_action_) {
    delete action_;
  }
  if (sku_ != &_default_sku_) {
    delete sku_;
  }
  if (unitsku_ != &_default_unitsku_) {
    delete unitsku_;
  }
  if (this != default_instance_) {
    delete transaction_;
  }
}

const ::google::protobuf::Descriptor* RceUpdateShips::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RceUpdateShips_descriptor_;
}

const RceUpdateShips& RceUpdateShips::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_RceUpdateShips_2eproto();  return *default_instance_;
}

RceUpdateShips* RceUpdateShips::default_instance_ = NULL;

RceUpdateShips* RceUpdateShips::New() const {
  return new RceUpdateShips;
}

void RceUpdateShips::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (transaction_ != NULL) transaction_->::MsgTransaction::Clear();
    }
    planetid_ = 0;
    if (_has_bit(2)) {
      if (action_ != &_default_action_) {
        action_->clear();
      }
    }
    sid_ = 0;
    if (_has_bit(4)) {
      if (sku_ != &_default_sku_) {
        sku_->clear();
      }
    }
    hangarsid_ = 0;
    bunkersid_ = 0;
    if (_has_bit(7)) {
      if (unitsku_ != &_default_unitsku_) {
        unitsku_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    amount_ = 0;
    block_ = 0;
    slot_ = 0;
    timeleft_ = 0;
  }
  slotscontentsaccelerated_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RceUpdateShips::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .MsgTransaction transaction = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
             input, mutable_transaction()));
        if (input->ExpectTag(16)) goto parse_planetId;
        break;
      }
      
      // optional int32 planetId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_planetId:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &planetid_));
        _set_bit(1);
        if (input->ExpectTag(26)) goto parse_action;
        break;
      }
      
      // optional string action = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_action:
        DO_(::google::protobuf::internal::WireFormatLite::ReadString(
              input, this->mutable_action()));
        ::google::protobuf::internal::WireFormat::VerifyUTF8String(
          this->action().data(), this->action().length(),
          ::google::protobuf::internal::WireFormat::PARSE);
        if (input->ExpectTag(32)) goto parse_sid;
        break;
      }
      
      // optional int32 sid = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_sid:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &sid_));
        _set_bit(3);
        if (input->ExpectTag(42)) goto parse_sku;
        break;
      }
      
      // optional string sku = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_sku:
        DO_(::google::protobuf::internal::WireFormatLite::ReadString(
              input, this->mutable_sku()));
        ::google::protobuf::internal::WireFormat::VerifyUTF8String(
          this->sku().data(), this->sku().length(),
          ::google::protobuf::internal::WireFormat::PARSE);
        if (input->ExpectTag(48)) goto parse_hangarSid;
        break;
      }
      
      // optional int32 hangarSid = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_hangarSid:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &hangarsid_));
        _set_bit(5);
        if (input->ExpectTag(56)) goto parse_bunkerSid;
        break;
      }
      
      // optional int32 bunkerSid = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_bunkerSid:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &bunkersid_));
        _set_bit(6);
        if (input->ExpectTag(66)) goto parse_unitSku;
        break;
      }
      
      // optional string unitSku = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_unitSku:
        DO_(::google::protobuf::internal::WireFormatLite::ReadString(
              input, this->mutable_unitsku()));
        ::google::protobuf::internal::WireFormat::VerifyUTF8String(
          this->unitsku().data(), this->unitsku().length(),
          ::google::protobuf::internal::WireFormat::PARSE);
        if (input->ExpectTag(72)) goto parse_amount;
        break;
      }
      
      // optional int32 amount = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_amount:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &amount_));
        _set_bit(8);
        if (input->ExpectTag(80)) goto parse_block;
        break;
      }
      
      // optional int32 block = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_block:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &block_));
        _set_bit(9);
        if (input->ExpectTag(88)) goto parse_slot;
        break;
      }
      
      // optional int32 slot = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_slot:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &slot_));
        _set_bit(10);
        if (input->ExpectTag(96)) goto parse_timeLeft;
        break;
      }
      
      // optional int32 timeLeft = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_timeLeft:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &timeleft_));
        _set_bit(11);
        if (input->ExpectTag(106)) goto parse_slotsContentsAccelerated;
        break;
      }
      
      // repeated .SlotsContentsAccelerated slotsContentsAccelerated = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_slotsContentsAccelerated:
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, add_slotscontentsaccelerated()));
        if (input->ExpectTag(106)) goto parse_slotsContentsAccelerated;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RceUpdateShips::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    RceUpdateShips::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional .MsgTransaction transaction = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      1, this->transaction(), output);
  }
  
  // optional int32 planetId = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->planetid(), output);
  }
  
  // optional string action = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->action().data(), this->action().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->action(), output);
  }
  
  // optional int32 sid = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->sid(), output);
  }
  
  // optional string sku = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->sku().data(), this->sku().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->sku(), output);
  }
  
  // optional int32 hangarSid = 6;
  if (_has_bit(5)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->hangarsid(), output);
  }
  
  // optional int32 bunkerSid = 7;
  if (_has_bit(6)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->bunkersid(), output);
  }
  
  // optional string unitSku = 8;
  if (_has_bit(7)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->unitsku().data(), this->unitsku().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      8, this->unitsku(), output);
  }
  
  // optional int32 amount = 9;
  if (_has_bit(8)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->amount(), output);
  }
  
  // optional int32 block = 10;
  if (_has_bit(9)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->block(), output);
  }
  
  // optional int32 slot = 11;
  if (_has_bit(10)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->slot(), output);
  }
  
  // optional int32 timeLeft = 12;
  if (_has_bit(11)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->timeleft(), output);
  }
  
  // repeated .SlotsContentsAccelerated slotsContentsAccelerated = 13;
  for (int i = 0; i < this->slotscontentsaccelerated_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      13, this->slotscontentsaccelerated(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RceUpdateShips::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .MsgTransaction transaction = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->transaction(), target);
  }
  
  // optional int32 planetId = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->planetid(), target);
  }
  
  // optional string action = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->action().data(), this->action().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->action(), target);
  }
  
  // optional int32 sid = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->sid(), target);
  }
  
  // optional string sku = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->sku().data(), this->sku().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->sku(), target);
  }
  
  // optional int32 hangarSid = 6;
  if (_has_bit(5)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->hangarsid(), target);
  }
  
  // optional int32 bunkerSid = 7;
  if (_has_bit(6)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->bunkersid(), target);
  }
  
  // optional string unitSku = 8;
  if (_has_bit(7)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->unitsku().data(), this->unitsku().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->unitsku(), target);
  }
  
  // optional int32 amount = 9;
  if (_has_bit(8)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->amount(), target);
  }
  
  // optional int32 block = 10;
  if (_has_bit(9)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->block(), target);
  }
  
  // optional int32 slot = 11;
  if (_has_bit(10)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->slot(), target);
  }
  
  // optional int32 timeLeft = 12;
  if (_has_bit(11)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->timeleft(), target);
  }
  
  // repeated .SlotsContentsAccelerated slotsContentsAccelerated = 13;
  for (int i = 0; i < this->slotscontentsaccelerated_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        13, this->slotscontentsaccelerated(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RceUpdateShips::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .MsgTransaction transaction = 1;
    if (has_transaction()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->transaction());
    }
    
    // optional int32 planetId = 2;
    if (has_planetid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->planetid());
    }
    
    // optional string action = 3;
    if (has_action()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->action());
    }
    
    // optional int32 sid = 4;
    if (has_sid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sid());
    }
    
    // optional string sku = 5;
    if (has_sku()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->sku());
    }
    
    // optional int32 hangarSid = 6;
    if (has_hangarsid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->hangarsid());
    }
    
    // optional int32 bunkerSid = 7;
    if (has_bunkersid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bunkersid());
    }
    
    // optional string unitSku = 8;
    if (has_unitsku()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->unitsku());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 amount = 9;
    if (has_amount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->amount());
    }
    
    // optional int32 block = 10;
    if (has_block()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->block());
    }
    
    // optional int32 slot = 11;
    if (has_slot()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->slot());
    }
    
    // optional int32 timeLeft = 12;
    if (has_timeleft()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->timeleft());
    }
    
  }
  // repeated .SlotsContentsAccelerated slotsContentsAccelerated = 13;
  total_size += 1 * this->slotscontentsaccelerated_size();
  for (int i = 0; i < this->slotscontentsaccelerated_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->slotscontentsaccelerated(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void RceUpdateShips::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RceUpdateShips* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RceUpdateShips*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RceUpdateShips::MergeFrom(const RceUpdateShips& from) {
  GOOGLE_CHECK_NE(&from, this);
  slotscontentsaccelerated_.MergeFrom(from.slotscontentsaccelerated_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      mutable_transaction()->::MsgTransaction::MergeFrom(from.transaction());
    }
    if (from._has_bit(1)) {
      set_planetid(from.planetid());
    }
    if (from._has_bit(2)) {
      set_action(from.action());
    }
    if (from._has_bit(3)) {
      set_sid(from.sid());
    }
    if (from._has_bit(4)) {
      set_sku(from.sku());
    }
    if (from._has_bit(5)) {
      set_hangarsid(from.hangarsid());
    }
    if (from._has_bit(6)) {
      set_bunkersid(from.bunkersid());
    }
    if (from._has_bit(7)) {
      set_unitsku(from.unitsku());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from._has_bit(8)) {
      set_amount(from.amount());
    }
    if (from._has_bit(9)) {
      set_block(from.block());
    }
    if (from._has_bit(10)) {
      set_slot(from.slot());
    }
    if (from._has_bit(11)) {
      set_timeleft(from.timeleft());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RceUpdateShips::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RceUpdateShips::CopyFrom(const RceUpdateShips& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RceUpdateShips::IsInitialized() const {
  
  return true;
}

void RceUpdateShips::Swap(RceUpdateShips* other) {
  if (other != this) {
    std::swap(transaction_, other->transaction_);
    std::swap(planetid_, other->planetid_);
    std::swap(action_, other->action_);
    std::swap(sid_, other->sid_);
    std::swap(sku_, other->sku_);
    std::swap(hangarsid_, other->hangarsid_);
    std::swap(bunkersid_, other->bunkersid_);
    std::swap(unitsku_, other->unitsku_);
    std::swap(amount_, other->amount_);
    std::swap(block_, other->block_);
    std::swap(slot_, other->slot_);
    std::swap(timeleft_, other->timeleft_);
    slotscontentsaccelerated_.Swap(&other->slotscontentsaccelerated_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RceUpdateShips::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RceUpdateShips_descriptor_;
  metadata.reflection = RceUpdateShips_reflection_;
  return metadata;
}

