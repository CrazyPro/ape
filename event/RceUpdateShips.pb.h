// Generated by the protocol buffer compiler.  DO NOT EDIT!

#ifndef PROTOBUF_RceUpdateShips_2eproto__INCLUDED
#define PROTOBUF_RceUpdateShips_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2002000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2002000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>
#include "MsgTransaction.pb.h"

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_RceUpdateShips_2eproto();
void protobuf_AssignDesc_RceUpdateShips_2eproto();
void protobuf_ShutdownFile_RceUpdateShips_2eproto();

class SlotsContentsAccelerated;
class RceUpdateShips;

// ===================================================================

class SlotsContentsAccelerated : public ::google::protobuf::Message {
 public:
  SlotsContentsAccelerated();
  virtual ~SlotsContentsAccelerated();
  
  SlotsContentsAccelerated(const SlotsContentsAccelerated& from);
  
  inline SlotsContentsAccelerated& operator=(const SlotsContentsAccelerated& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const SlotsContentsAccelerated& default_instance();
  void Swap(SlotsContentsAccelerated* other);
  
  // implements Message ----------------------------------------------
  
  SlotsContentsAccelerated* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SlotsContentsAccelerated& from);
  void MergeFrom(const SlotsContentsAccelerated& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const { _cached_size_ = size; }
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional string sku = 1;
  inline bool has_sku() const;
  inline void clear_sku();
  static const int kSkuFieldNumber = 1;
  inline const ::std::string& sku() const;
  inline void set_sku(const ::std::string& value);
  inline void set_sku(const char* value);
  inline void set_sku(const char* value, size_t size);
  inline ::std::string* mutable_sku();
  
  // optional int32 amount = 2;
  inline bool has_amount() const;
  inline void clear_amount();
  static const int kAmountFieldNumber = 2;
  inline ::google::protobuf::int32 amount() const;
  inline void set_amount(::google::protobuf::int32 value);
  
  // optional int32 slot = 3;
  inline bool has_slot() const;
  inline void clear_slot();
  static const int kSlotFieldNumber = 3;
  inline ::google::protobuf::int32 slot() const;
  inline void set_slot(::google::protobuf::int32 value);
  
  // optional int32 hangarSid = 4;
  inline bool has_hangarsid() const;
  inline void clear_hangarsid();
  static const int kHangarSidFieldNumber = 4;
  inline ::google::protobuf::int32 hangarsid() const;
  inline void set_hangarsid(::google::protobuf::int32 value);
  
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::std::string* sku_;
  static const ::std::string _default_sku_;
  ::google::protobuf::int32 amount_;
  ::google::protobuf::int32 slot_;
  ::google::protobuf::int32 hangarsid_;
  friend void  protobuf_AddDesc_RceUpdateShips_2eproto();
  friend void protobuf_AssignDesc_RceUpdateShips_2eproto();
  friend void protobuf_ShutdownFile_RceUpdateShips_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static SlotsContentsAccelerated* default_instance_;
};
// -------------------------------------------------------------------

class RceUpdateShips : public ::google::protobuf::Message {
 public:
  RceUpdateShips();
  virtual ~RceUpdateShips();
  
  RceUpdateShips(const RceUpdateShips& from);
  
  inline RceUpdateShips& operator=(const RceUpdateShips& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const RceUpdateShips& default_instance();
  void Swap(RceUpdateShips* other);
  
  // implements Message ----------------------------------------------
  
  RceUpdateShips* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RceUpdateShips& from);
  void MergeFrom(const RceUpdateShips& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const { _cached_size_ = size; }
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional .MsgTransaction transaction = 1;
  inline bool has_transaction() const;
  inline void clear_transaction();
  static const int kTransactionFieldNumber = 1;
  inline const ::MsgTransaction& transaction() const;
  inline ::MsgTransaction* mutable_transaction();
  
  // optional int32 planetId = 2;
  inline bool has_planetid() const;
  inline void clear_planetid();
  static const int kPlanetIdFieldNumber = 2;
  inline ::google::protobuf::int32 planetid() const;
  inline void set_planetid(::google::protobuf::int32 value);
  
  // optional string action = 3;
  inline bool has_action() const;
  inline void clear_action();
  static const int kActionFieldNumber = 3;
  inline const ::std::string& action() const;
  inline void set_action(const ::std::string& value);
  inline void set_action(const char* value);
  inline void set_action(const char* value, size_t size);
  inline ::std::string* mutable_action();
  
  // optional int32 sid = 4;
  inline bool has_sid() const;
  inline void clear_sid();
  static const int kSidFieldNumber = 4;
  inline ::google::protobuf::int32 sid() const;
  inline void set_sid(::google::protobuf::int32 value);
  
  // optional string sku = 5;
  inline bool has_sku() const;
  inline void clear_sku();
  static const int kSkuFieldNumber = 5;
  inline const ::std::string& sku() const;
  inline void set_sku(const ::std::string& value);
  inline void set_sku(const char* value);
  inline void set_sku(const char* value, size_t size);
  inline ::std::string* mutable_sku();
  
  // optional int32 hangarSid = 6;
  inline bool has_hangarsid() const;
  inline void clear_hangarsid();
  static const int kHangarSidFieldNumber = 6;
  inline ::google::protobuf::int32 hangarsid() const;
  inline void set_hangarsid(::google::protobuf::int32 value);
  
  // optional int32 bunkerSid = 7;
  inline bool has_bunkersid() const;
  inline void clear_bunkersid();
  static const int kBunkerSidFieldNumber = 7;
  inline ::google::protobuf::int32 bunkersid() const;
  inline void set_bunkersid(::google::protobuf::int32 value);
  
  // optional string unitSku = 8;
  inline bool has_unitsku() const;
  inline void clear_unitsku();
  static const int kUnitSkuFieldNumber = 8;
  inline const ::std::string& unitsku() const;
  inline void set_unitsku(const ::std::string& value);
  inline void set_unitsku(const char* value);
  inline void set_unitsku(const char* value, size_t size);
  inline ::std::string* mutable_unitsku();
  
  // optional int32 amount = 9;
  inline bool has_amount() const;
  inline void clear_amount();
  static const int kAmountFieldNumber = 9;
  inline ::google::protobuf::int32 amount() const;
  inline void set_amount(::google::protobuf::int32 value);
  
  // optional int32 block = 10;
  inline bool has_block() const;
  inline void clear_block();
  static const int kBlockFieldNumber = 10;
  inline ::google::protobuf::int32 block() const;
  inline void set_block(::google::protobuf::int32 value);
  
  // optional int32 slot = 11;
  inline bool has_slot() const;
  inline void clear_slot();
  static const int kSlotFieldNumber = 11;
  inline ::google::protobuf::int32 slot() const;
  inline void set_slot(::google::protobuf::int32 value);
  
  // optional int32 timeLeft = 12;
  inline bool has_timeleft() const;
  inline void clear_timeleft();
  static const int kTimeLeftFieldNumber = 12;
  inline ::google::protobuf::int32 timeleft() const;
  inline void set_timeleft(::google::protobuf::int32 value);
  
  // repeated .SlotsContentsAccelerated slotsContentsAccelerated = 13;
  inline int slotscontentsaccelerated_size() const;
  inline void clear_slotscontentsaccelerated();
  static const int kSlotsContentsAcceleratedFieldNumber = 13;
  inline const ::google::protobuf::RepeatedPtrField< ::SlotsContentsAccelerated >& slotscontentsaccelerated() const;
  inline ::google::protobuf::RepeatedPtrField< ::SlotsContentsAccelerated >* mutable_slotscontentsaccelerated();
  inline const ::SlotsContentsAccelerated& slotscontentsaccelerated(int index) const;
  inline ::SlotsContentsAccelerated* mutable_slotscontentsaccelerated(int index);
  inline ::SlotsContentsAccelerated* add_slotscontentsaccelerated();
  
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::MsgTransaction* transaction_;
  ::google::protobuf::int32 planetid_;
  ::std::string* action_;
  static const ::std::string _default_action_;
  ::google::protobuf::int32 sid_;
  ::std::string* sku_;
  static const ::std::string _default_sku_;
  ::google::protobuf::int32 hangarsid_;
  ::google::protobuf::int32 bunkersid_;
  ::std::string* unitsku_;
  static const ::std::string _default_unitsku_;
  ::google::protobuf::int32 amount_;
  ::google::protobuf::int32 block_;
  ::google::protobuf::int32 slot_;
  ::google::protobuf::int32 timeleft_;
  ::google::protobuf::RepeatedPtrField< ::SlotsContentsAccelerated > slotscontentsaccelerated_;
  friend void  protobuf_AddDesc_RceUpdateShips_2eproto();
  friend void protobuf_AssignDesc_RceUpdateShips_2eproto();
  friend void protobuf_ShutdownFile_RceUpdateShips_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(13 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static RceUpdateShips* default_instance_;
};
// ===================================================================


// ===================================================================


// ===================================================================

// SlotsContentsAccelerated

// optional string sku = 1;
inline bool SlotsContentsAccelerated::has_sku() const {
  return _has_bit(0);
}
inline void SlotsContentsAccelerated::clear_sku() {
  if (sku_ != &_default_sku_) {
    sku_->clear();
  }
  _clear_bit(0);
}
inline const ::std::string& SlotsContentsAccelerated::sku() const {
  return *sku_;
}
inline void SlotsContentsAccelerated::set_sku(const ::std::string& value) {
  _set_bit(0);
  if (sku_ == &_default_sku_) {
    sku_ = new ::std::string;
  }
  sku_->assign(value);
}
inline void SlotsContentsAccelerated::set_sku(const char* value) {
  _set_bit(0);
  if (sku_ == &_default_sku_) {
    sku_ = new ::std::string;
  }
  sku_->assign(value);
}
inline void SlotsContentsAccelerated::set_sku(const char* value, size_t size) {
  _set_bit(0);
  if (sku_ == &_default_sku_) {
    sku_ = new ::std::string;
  }
  sku_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SlotsContentsAccelerated::mutable_sku() {
  _set_bit(0);
  if (sku_ == &_default_sku_) {
    sku_ = new ::std::string;
  }
  return sku_;
}

// optional int32 amount = 2;
inline bool SlotsContentsAccelerated::has_amount() const {
  return _has_bit(1);
}
inline void SlotsContentsAccelerated::clear_amount() {
  amount_ = 0;
  _clear_bit(1);
}
inline ::google::protobuf::int32 SlotsContentsAccelerated::amount() const {
  return amount_;
}
inline void SlotsContentsAccelerated::set_amount(::google::protobuf::int32 value) {
  _set_bit(1);
  amount_ = value;
}

// optional int32 slot = 3;
inline bool SlotsContentsAccelerated::has_slot() const {
  return _has_bit(2);
}
inline void SlotsContentsAccelerated::clear_slot() {
  slot_ = 0;
  _clear_bit(2);
}
inline ::google::protobuf::int32 SlotsContentsAccelerated::slot() const {
  return slot_;
}
inline void SlotsContentsAccelerated::set_slot(::google::protobuf::int32 value) {
  _set_bit(2);
  slot_ = value;
}

// optional int32 hangarSid = 4;
inline bool SlotsContentsAccelerated::has_hangarsid() const {
  return _has_bit(3);
}
inline void SlotsContentsAccelerated::clear_hangarsid() {
  hangarsid_ = 0;
  _clear_bit(3);
}
inline ::google::protobuf::int32 SlotsContentsAccelerated::hangarsid() const {
  return hangarsid_;
}
inline void SlotsContentsAccelerated::set_hangarsid(::google::protobuf::int32 value) {
  _set_bit(3);
  hangarsid_ = value;
}

// -------------------------------------------------------------------

// RceUpdateShips

// optional .MsgTransaction transaction = 1;
inline bool RceUpdateShips::has_transaction() const {
  return _has_bit(0);
}
inline void RceUpdateShips::clear_transaction() {
  if (transaction_ != NULL) transaction_->::MsgTransaction::Clear();
  _clear_bit(0);
}
inline const ::MsgTransaction& RceUpdateShips::transaction() const {
  return transaction_ != NULL ? *transaction_ : *default_instance_->transaction_;
}
inline ::MsgTransaction* RceUpdateShips::mutable_transaction() {
  _set_bit(0);
  if (transaction_ == NULL) transaction_ = new ::MsgTransaction;
  return transaction_;
}

// optional int32 planetId = 2;
inline bool RceUpdateShips::has_planetid() const {
  return _has_bit(1);
}
inline void RceUpdateShips::clear_planetid() {
  planetid_ = 0;
  _clear_bit(1);
}
inline ::google::protobuf::int32 RceUpdateShips::planetid() const {
  return planetid_;
}
inline void RceUpdateShips::set_planetid(::google::protobuf::int32 value) {
  _set_bit(1);
  planetid_ = value;
}

// optional string action = 3;
inline bool RceUpdateShips::has_action() const {
  return _has_bit(2);
}
inline void RceUpdateShips::clear_action() {
  if (action_ != &_default_action_) {
    action_->clear();
  }
  _clear_bit(2);
}
inline const ::std::string& RceUpdateShips::action() const {
  return *action_;
}
inline void RceUpdateShips::set_action(const ::std::string& value) {
  _set_bit(2);
  if (action_ == &_default_action_) {
    action_ = new ::std::string;
  }
  action_->assign(value);
}
inline void RceUpdateShips::set_action(const char* value) {
  _set_bit(2);
  if (action_ == &_default_action_) {
    action_ = new ::std::string;
  }
  action_->assign(value);
}
inline void RceUpdateShips::set_action(const char* value, size_t size) {
  _set_bit(2);
  if (action_ == &_default_action_) {
    action_ = new ::std::string;
  }
  action_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RceUpdateShips::mutable_action() {
  _set_bit(2);
  if (action_ == &_default_action_) {
    action_ = new ::std::string;
  }
  return action_;
}

// optional int32 sid = 4;
inline bool RceUpdateShips::has_sid() const {
  return _has_bit(3);
}
inline void RceUpdateShips::clear_sid() {
  sid_ = 0;
  _clear_bit(3);
}
inline ::google::protobuf::int32 RceUpdateShips::sid() const {
  return sid_;
}
inline void RceUpdateShips::set_sid(::google::protobuf::int32 value) {
  _set_bit(3);
  sid_ = value;
}

// optional string sku = 5;
inline bool RceUpdateShips::has_sku() const {
  return _has_bit(4);
}
inline void RceUpdateShips::clear_sku() {
  if (sku_ != &_default_sku_) {
    sku_->clear();
  }
  _clear_bit(4);
}
inline const ::std::string& RceUpdateShips::sku() const {
  return *sku_;
}
inline void RceUpdateShips::set_sku(const ::std::string& value) {
  _set_bit(4);
  if (sku_ == &_default_sku_) {
    sku_ = new ::std::string;
  }
  sku_->assign(value);
}
inline void RceUpdateShips::set_sku(const char* value) {
  _set_bit(4);
  if (sku_ == &_default_sku_) {
    sku_ = new ::std::string;
  }
  sku_->assign(value);
}
inline void RceUpdateShips::set_sku(const char* value, size_t size) {
  _set_bit(4);
  if (sku_ == &_default_sku_) {
    sku_ = new ::std::string;
  }
  sku_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RceUpdateShips::mutable_sku() {
  _set_bit(4);
  if (sku_ == &_default_sku_) {
    sku_ = new ::std::string;
  }
  return sku_;
}

// optional int32 hangarSid = 6;
inline bool RceUpdateShips::has_hangarsid() const {
  return _has_bit(5);
}
inline void RceUpdateShips::clear_hangarsid() {
  hangarsid_ = 0;
  _clear_bit(5);
}
inline ::google::protobuf::int32 RceUpdateShips::hangarsid() const {
  return hangarsid_;
}
inline void RceUpdateShips::set_hangarsid(::google::protobuf::int32 value) {
  _set_bit(5);
  hangarsid_ = value;
}

// optional int32 bunkerSid = 7;
inline bool RceUpdateShips::has_bunkersid() const {
  return _has_bit(6);
}
inline void RceUpdateShips::clear_bunkersid() {
  bunkersid_ = 0;
  _clear_bit(6);
}
inline ::google::protobuf::int32 RceUpdateShips::bunkersid() const {
  return bunkersid_;
}
inline void RceUpdateShips::set_bunkersid(::google::protobuf::int32 value) {
  _set_bit(6);
  bunkersid_ = value;
}

// optional string unitSku = 8;
inline bool RceUpdateShips::has_unitsku() const {
  return _has_bit(7);
}
inline void RceUpdateShips::clear_unitsku() {
  if (unitsku_ != &_default_unitsku_) {
    unitsku_->clear();
  }
  _clear_bit(7);
}
inline const ::std::string& RceUpdateShips::unitsku() const {
  return *unitsku_;
}
inline void RceUpdateShips::set_unitsku(const ::std::string& value) {
  _set_bit(7);
  if (unitsku_ == &_default_unitsku_) {
    unitsku_ = new ::std::string;
  }
  unitsku_->assign(value);
}
inline void RceUpdateShips::set_unitsku(const char* value) {
  _set_bit(7);
  if (unitsku_ == &_default_unitsku_) {
    unitsku_ = new ::std::string;
  }
  unitsku_->assign(value);
}
inline void RceUpdateShips::set_unitsku(const char* value, size_t size) {
  _set_bit(7);
  if (unitsku_ == &_default_unitsku_) {
    unitsku_ = new ::std::string;
  }
  unitsku_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RceUpdateShips::mutable_unitsku() {
  _set_bit(7);
  if (unitsku_ == &_default_unitsku_) {
    unitsku_ = new ::std::string;
  }
  return unitsku_;
}

// optional int32 amount = 9;
inline bool RceUpdateShips::has_amount() const {
  return _has_bit(8);
}
inline void RceUpdateShips::clear_amount() {
  amount_ = 0;
  _clear_bit(8);
}
inline ::google::protobuf::int32 RceUpdateShips::amount() const {
  return amount_;
}
inline void RceUpdateShips::set_amount(::google::protobuf::int32 value) {
  _set_bit(8);
  amount_ = value;
}

// optional int32 block = 10;
inline bool RceUpdateShips::has_block() const {
  return _has_bit(9);
}
inline void RceUpdateShips::clear_block() {
  block_ = 0;
  _clear_bit(9);
}
inline ::google::protobuf::int32 RceUpdateShips::block() const {
  return block_;
}
inline void RceUpdateShips::set_block(::google::protobuf::int32 value) {
  _set_bit(9);
  block_ = value;
}

// optional int32 slot = 11;
inline bool RceUpdateShips::has_slot() const {
  return _has_bit(10);
}
inline void RceUpdateShips::clear_slot() {
  slot_ = 0;
  _clear_bit(10);
}
inline ::google::protobuf::int32 RceUpdateShips::slot() const {
  return slot_;
}
inline void RceUpdateShips::set_slot(::google::protobuf::int32 value) {
  _set_bit(10);
  slot_ = value;
}

// optional int32 timeLeft = 12;
inline bool RceUpdateShips::has_timeleft() const {
  return _has_bit(11);
}
inline void RceUpdateShips::clear_timeleft() {
  timeleft_ = 0;
  _clear_bit(11);
}
inline ::google::protobuf::int32 RceUpdateShips::timeleft() const {
  return timeleft_;
}
inline void RceUpdateShips::set_timeleft(::google::protobuf::int32 value) {
  _set_bit(11);
  timeleft_ = value;
}

// repeated .SlotsContentsAccelerated slotsContentsAccelerated = 13;
inline int RceUpdateShips::slotscontentsaccelerated_size() const {
  return slotscontentsaccelerated_.size();
}
inline void RceUpdateShips::clear_slotscontentsaccelerated() {
  slotscontentsaccelerated_.Clear();
}
inline const ::google::protobuf::RepeatedPtrField< ::SlotsContentsAccelerated >&
RceUpdateShips::slotscontentsaccelerated() const {
  return slotscontentsaccelerated_;
}
inline ::google::protobuf::RepeatedPtrField< ::SlotsContentsAccelerated >*
RceUpdateShips::mutable_slotscontentsaccelerated() {
  return &slotscontentsaccelerated_;
}
inline const ::SlotsContentsAccelerated& RceUpdateShips::slotscontentsaccelerated(int index) const {
  return slotscontentsaccelerated_.Get(index);
}
inline ::SlotsContentsAccelerated* RceUpdateShips::mutable_slotscontentsaccelerated(int index) {
  return slotscontentsaccelerated_.Mutable(index);
}
inline ::SlotsContentsAccelerated* RceUpdateShips::add_slotscontentsaccelerated() {
  return slotscontentsaccelerated_.Add();
}


#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

#endif  // PROTOBUF_RceUpdateShips_2eproto__INCLUDED
