// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "event_sub.pb.h"
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>

namespace {

const ::google::protobuf::Descriptor* WebCrossPromotion_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  WebCrossPromotion_reflection_ = NULL;
const ::google::protobuf::Descriptor* UserLogin_Req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UserLogin_Req_reflection_ = NULL;
const ::google::protobuf::Descriptor* UserLogin_Rsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UserLogin_Rsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* WorkingStatus_Req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  WorkingStatus_Req_reflection_ = NULL;
const ::google::protobuf::Descriptor* UserAuth_Req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UserAuth_Req_reflection_ = NULL;
const ::google::protobuf::Descriptor* UserAuth_Rsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UserAuth_Rsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* SendRemoteUser_Req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SendRemoteUser_Req_reflection_ = NULL;
const ::google::protobuf::Descriptor* WG_UserLeave_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  WG_UserLeave_reflection_ = NULL;
const ::google::protobuf::Descriptor* GWG_FriendRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GWG_FriendRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* ForwardInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ForwardInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* WebGetRegion_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  WebGetRegion_reflection_ = NULL;
const ::google::protobuf::Descriptor* GCG_CountryNeed_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GCG_CountryNeed_reflection_ = NULL;
const ::google::protobuf::Descriptor* GRG_RegionNeed_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GRG_RegionNeed_reflection_ = NULL;
const ::google::protobuf::Descriptor* GRG_RankNeed_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GRG_RankNeed_reflection_ = NULL;
const ::google::protobuf::Descriptor* GSG_StatNeed_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GSG_StatNeed_reflection_ = NULL;
const ::google::protobuf::Descriptor* HttpAskMsg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  HttpAskMsg_reflection_ = NULL;
const ::google::protobuf::Descriptor* HttpAnswerMsg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  HttpAnswerMsg_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_event_5fsub_2eproto() {
  protobuf_AddDesc_event_5fsub_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "event_sub.proto");
  GOOGLE_CHECK(file != NULL);
  WebCrossPromotion_descriptor_ = file->message_type(0);
  static const int WebCrossPromotion_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WebCrossPromotion, chanle_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WebCrossPromotion, date_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WebCrossPromotion, cdk_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WebCrossPromotion, canuse_),
  };
  WebCrossPromotion_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      WebCrossPromotion_descriptor_,
      WebCrossPromotion::default_instance_,
      WebCrossPromotion_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WebCrossPromotion, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WebCrossPromotion, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(WebCrossPromotion));
  UserLogin_Req_descriptor_ = file->message_type(1);
  static const int UserLogin_Req_offsets_[44] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserLogin_Req, siteid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserLogin_Req, platform_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserLogin_Req, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserLogin_Req, profile_link_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserLogin_Req, gender_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserLogin_Req, is_yellow_dmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserLogin_Req, is_yellow_dmd_year_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserLogin_Req, yellow_dmd_lv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserLogin_Req, friends_platid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserLogin_Req, webfd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserLogin_Req, sid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserLogin_Req, mydb_ret_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserLogin_Req, mydb_oldid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserLogin_Req, region_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserLogin_Req, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserLogin_Req, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserLogin_Req, defregion_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserLogin_Req, undealgiftcnt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserLogin_Req, invitefrdcnt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserLogin_Req, yellowdmdtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserLogin_Req, gettime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserLogin_Req, invitefriendid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserLogin_Req, isnewplayer_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserLogin_Req, undealfrdgiftcnt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserLogin_Req, city_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserLogin_Req, via_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserLogin_Req, isrecall_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserLogin_Req, is_high_yellow_dmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserLogin_Req, isapp51act_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserLogin_Req, daysendgiftcnt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserLogin_Req, invitefrdcntday_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserLogin_Req, customflag_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserLogin_Req, taskmarketid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserLogin_Req, qqtaskstep_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserLogin_Req, promotion_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserLogin_Req, invitegiftrecord_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserLogin_Req, nbackflowflag_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserLogin_Req, nadultflag_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserLogin_Req, is_high_dmd_year_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserLogin_Req, bluedmdtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserLogin_Req, bluetime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserLogin_Req, blueyeartime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserLogin_Req, highbluetime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserLogin_Req, highblueyeartime_),
  };
  UserLogin_Req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UserLogin_Req_descriptor_,
      UserLogin_Req::default_instance_,
      UserLogin_Req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserLogin_Req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserLogin_Req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UserLogin_Req));
  UserLogin_Rsp_descriptor_ = file->message_type(2);
  static const int UserLogin_Rsp_offsets_[17] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserLogin_Rsp, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserLogin_Rsp, secret_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserLogin_Rsp, server_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserLogin_Rsp, port_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserLogin_Rsp, port1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserLogin_Rsp, webfd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserLogin_Rsp, sid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserLogin_Rsp, mainload_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserLogin_Rsp, version_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserLogin_Rsp, region_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserLogin_Rsp, gettime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserLogin_Rsp, platform_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserLogin_Rsp, logintimes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserLogin_Rsp, playerlvl_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserLogin_Rsp, isnewplayer_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserLogin_Rsp, customflag_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserLogin_Rsp, channel_),
  };
  UserLogin_Rsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UserLogin_Rsp_descriptor_,
      UserLogin_Rsp::default_instance_,
      UserLogin_Rsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserLogin_Rsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserLogin_Rsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UserLogin_Rsp));
  WorkingStatus_Req_descriptor_ = file->message_type(3);
  static const int WorkingStatus_Req_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorkingStatus_Req, gid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorkingStatus_Req, finish_),
  };
  WorkingStatus_Req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      WorkingStatus_Req_descriptor_,
      WorkingStatus_Req::default_instance_,
      WorkingStatus_Req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorkingStatus_Req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorkingStatus_Req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(WorkingStatus_Req));
  UserAuth_Req_descriptor_ = file->message_type(4);
  static const int UserAuth_Req_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserAuth_Req, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserAuth_Req, secret_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserAuth_Req, sockfd_),
  };
  UserAuth_Req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UserAuth_Req_descriptor_,
      UserAuth_Req::default_instance_,
      UserAuth_Req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserAuth_Req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserAuth_Req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UserAuth_Req));
  UserAuth_Rsp_descriptor_ = file->message_type(5);
  static const int UserAuth_Rsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserAuth_Rsp, pass_),
  };
  UserAuth_Rsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UserAuth_Rsp_descriptor_,
      UserAuth_Rsp::default_instance_,
      UserAuth_Rsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserAuth_Rsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserAuth_Rsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UserAuth_Rsp));
  SendRemoteUser_Req_descriptor_ = file->message_type(6);
  static const int SendRemoteUser_Req_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SendRemoteUser_Req, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SendRemoteUser_Req, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SendRemoteUser_Req, text_),
  };
  SendRemoteUser_Req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SendRemoteUser_Req_descriptor_,
      SendRemoteUser_Req::default_instance_,
      SendRemoteUser_Req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SendRemoteUser_Req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SendRemoteUser_Req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SendRemoteUser_Req));
  WG_UserLeave_descriptor_ = file->message_type(7);
  static const int WG_UserLeave_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WG_UserLeave, fd_),
  };
  WG_UserLeave_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      WG_UserLeave_descriptor_,
      WG_UserLeave::default_instance_,
      WG_UserLeave_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WG_UserLeave, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WG_UserLeave, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(WG_UserLeave));
  GWG_FriendRequest_descriptor_ = file->message_type(8);
  static const int GWG_FriendRequest_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GWG_FriendRequest, tuid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GWG_FriendRequest, ret_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GWG_FriendRequest, info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GWG_FriendRequest, plat_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GWG_FriendRequest, platid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GWG_FriendRequest, is_plat_friend_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GWG_FriendRequest, region_),
  };
  GWG_FriendRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GWG_FriendRequest_descriptor_,
      GWG_FriendRequest::default_instance_,
      GWG_FriendRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GWG_FriendRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GWG_FriendRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GWG_FriendRequest));
  ForwardInfo_descriptor_ = file->message_type(9);
  static const int ForwardInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ForwardInfo, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ForwardInfo, platid_),
  };
  ForwardInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ForwardInfo_descriptor_,
      ForwardInfo::default_instance_,
      ForwardInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ForwardInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ForwardInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ForwardInfo));
  WebGetRegion_descriptor_ = file->message_type(10);
  static const int WebGetRegion_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WebGetRegion, openid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WebGetRegion, fd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WebGetRegion, srvregion_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WebGetRegion, lastregion_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WebGetRegion, sid_),
  };
  WebGetRegion_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      WebGetRegion_descriptor_,
      WebGetRegion::default_instance_,
      WebGetRegion_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WebGetRegion, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WebGetRegion, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(WebGetRegion));
  GCG_CountryNeed_descriptor_ = file->message_type(11);
  static const int GCG_CountryNeed_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCG_CountryNeed, countrysrvid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCG_CountryNeed, region_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCG_CountryNeed, gamesrvid_),
  };
  GCG_CountryNeed_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GCG_CountryNeed_descriptor_,
      GCG_CountryNeed::default_instance_,
      GCG_CountryNeed_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCG_CountryNeed, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCG_CountryNeed, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GCG_CountryNeed));
  GRG_RegionNeed_descriptor_ = file->message_type(12);
  static const int GRG_RegionNeed_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GRG_RegionNeed, regionsrvid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GRG_RegionNeed, region_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GRG_RegionNeed, gamesrvid_),
  };
  GRG_RegionNeed_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GRG_RegionNeed_descriptor_,
      GRG_RegionNeed::default_instance_,
      GRG_RegionNeed_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GRG_RegionNeed, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GRG_RegionNeed, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GRG_RegionNeed));
  GRG_RankNeed_descriptor_ = file->message_type(13);
  static const int GRG_RankNeed_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GRG_RankNeed, ranksrvid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GRG_RankNeed, region_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GRG_RankNeed, gamesrvid_),
  };
  GRG_RankNeed_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GRG_RankNeed_descriptor_,
      GRG_RankNeed::default_instance_,
      GRG_RankNeed_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GRG_RankNeed, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GRG_RankNeed, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GRG_RankNeed));
  GSG_StatNeed_descriptor_ = file->message_type(14);
  static const int GSG_StatNeed_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GSG_StatNeed, statsrvid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GSG_StatNeed, region_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GSG_StatNeed, gamesrvid_),
  };
  GSG_StatNeed_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GSG_StatNeed_descriptor_,
      GSG_StatNeed::default_instance_,
      GSG_StatNeed_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GSG_StatNeed, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GSG_StatNeed, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GSG_StatNeed));
  HttpAskMsg_descriptor_ = file->message_type(15);
  static const int HttpAskMsg_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HttpAskMsg, szopenid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HttpAskMsg, nuid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HttpAskMsg, nregion_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HttpAskMsg, ntype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HttpAskMsg, ntypesec_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HttpAskMsg, szargvs_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HttpAskMsg, btoqq_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HttpAskMsg, nuserip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HttpAskMsg, nmodifyfee_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HttpAskMsg, ntime_),
  };
  HttpAskMsg_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      HttpAskMsg_descriptor_,
      HttpAskMsg::default_instance_,
      HttpAskMsg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HttpAskMsg, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HttpAskMsg, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(HttpAskMsg));
  HttpAnswerMsg_descriptor_ = file->message_type(16);
  static const int HttpAnswerMsg_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HttpAnswerMsg, szopenid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HttpAnswerMsg, nuid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HttpAnswerMsg, nregion_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HttpAnswerMsg, ntype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HttpAnswerMsg, ntypesec_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HttpAnswerMsg, szanswer_),
  };
  HttpAnswerMsg_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      HttpAnswerMsg_descriptor_,
      HttpAnswerMsg::default_instance_,
      HttpAnswerMsg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HttpAnswerMsg, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HttpAnswerMsg, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(HttpAnswerMsg));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_event_5fsub_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    WebCrossPromotion_descriptor_, &WebCrossPromotion::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UserLogin_Req_descriptor_, &UserLogin_Req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UserLogin_Rsp_descriptor_, &UserLogin_Rsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    WorkingStatus_Req_descriptor_, &WorkingStatus_Req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UserAuth_Req_descriptor_, &UserAuth_Req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UserAuth_Rsp_descriptor_, &UserAuth_Rsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SendRemoteUser_Req_descriptor_, &SendRemoteUser_Req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    WG_UserLeave_descriptor_, &WG_UserLeave::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GWG_FriendRequest_descriptor_, &GWG_FriendRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ForwardInfo_descriptor_, &ForwardInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    WebGetRegion_descriptor_, &WebGetRegion::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GCG_CountryNeed_descriptor_, &GCG_CountryNeed::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GRG_RegionNeed_descriptor_, &GRG_RegionNeed::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GRG_RankNeed_descriptor_, &GRG_RankNeed::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GSG_StatNeed_descriptor_, &GSG_StatNeed::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    HttpAskMsg_descriptor_, &HttpAskMsg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    HttpAnswerMsg_descriptor_, &HttpAnswerMsg::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_event_5fsub_2eproto() {
  delete WebCrossPromotion::default_instance_;
  delete WebCrossPromotion_reflection_;
  delete UserLogin_Req::default_instance_;
  delete UserLogin_Req_reflection_;
  delete UserLogin_Rsp::default_instance_;
  delete UserLogin_Rsp_reflection_;
  delete WorkingStatus_Req::default_instance_;
  delete WorkingStatus_Req_reflection_;
  delete UserAuth_Req::default_instance_;
  delete UserAuth_Req_reflection_;
  delete UserAuth_Rsp::default_instance_;
  delete UserAuth_Rsp_reflection_;
  delete SendRemoteUser_Req::default_instance_;
  delete SendRemoteUser_Req_reflection_;
  delete WG_UserLeave::default_instance_;
  delete WG_UserLeave_reflection_;
  delete GWG_FriendRequest::default_instance_;
  delete GWG_FriendRequest_reflection_;
  delete ForwardInfo::default_instance_;
  delete ForwardInfo_reflection_;
  delete WebGetRegion::default_instance_;
  delete WebGetRegion_reflection_;
  delete GCG_CountryNeed::default_instance_;
  delete GCG_CountryNeed_reflection_;
  delete GRG_RegionNeed::default_instance_;
  delete GRG_RegionNeed_reflection_;
  delete GRG_RankNeed::default_instance_;
  delete GRG_RankNeed_reflection_;
  delete GSG_StatNeed::default_instance_;
  delete GSG_StatNeed_reflection_;
  delete HttpAskMsg::default_instance_;
  delete HttpAskMsg_reflection_;
  delete HttpAnswerMsg::default_instance_;
  delete HttpAnswerMsg_reflection_;
}

void protobuf_AddDesc_event_5fsub_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::protobuf_AddDesc_FriendInfoLite_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\017event_sub.proto\032\024FriendInfoLite.proto\""
    "U\n\021WebCrossPromotion\022\016\n\006chanle\030\001 \001(\t\022\014\n\004"
    "date\030\002 \001(\t\022\013\n\003cdk\030\003 \003(\t\022\025\n\006canuse\030\004 \001(\010:"
    "\005false\"\221\010\n\rUserLogin_Req\022\016\n\006siteid\030\001 \002(\005"
    "\022\023\n\013platform_id\030\002 \002(\t\022\014\n\004name\030\003 \002(\t\022\024\n\014p"
    "rofile_link\030\004 \002(\t\022\016\n\006gender\030\005 \002(\005\022\025\n\ris_"
    "yellow_dmd\030\006 \002(\010\022\032\n\022is_yellow_dmd_year\030\007"
    " \002(\010\022\025\n\ryellow_dmd_lv\030\010 \002(\005\022\026\n\016friends_p"
    "latid\030\t \003(\t\022\r\n\005webfd\030\n \002(\005\022\013\n\003sid\030\013 \002(\t\022"
    "\023\n\010mydb_ret\030\014 \001(\005:\0010\022\025\n\nmydb_oldid\030\r \001(\005"
    ":\0010\022\016\n\006region\030\016 \002(\005\022\016\n\003uid\030\017 \001(\003:\0010\022\020\n\005l"
    "evel\030\020 \001(\005:\0010\022\024\n\tdefregion\030\021 \001(\003:\0010\022\030\n\ru"
    "ndealGiftCnt\030\022 \001(\005:\0010\022\027\n\014inviteFrdCnt\030\023 "
    "\001(\005:\0010\022\030\n\ryellowDmdtime\030\024 \001(\r:\0010\022\022\n\007gett"
    "ime\030\025 \001(\003:\0010\022\030\n\016invitefriendid\030\026 \001(\t:\000\022\032"
    "\n\013isnewplayer\030\027 \001(\010:\005false\022\033\n\020undealFrdG"
    "iftCnt\030\030 \001(\005:\0010\022\017\n\004city\030\031 \001(\005:\0010\022\013\n\003via\030"
    "\032 \001(\t\022\027\n\010isrecall\030\033 \001(\010:\005false\022!\n\022is_hig"
    "h_yellow_dmd\030\034 \001(\010:\005false\022\031\n\nisApp51Act\030"
    "\035 \001(\010:\005false\022\031\n\016daySendGiftCnt\030\036 \001(\005:\0010\022"
    "\032\n\017inviteFrdCntDay\030\037 \001(\005:\0010\022\025\n\ncustomFla"
    "g\030  \001(\005:\0010\022\026\n\014taskMarketId\030! \001(\t:\000\022\025\n\nqq"
    "TaskStep\030\" \001(\005:\0010\022%\n\tpromotion\030# \001(\0132\022.W"
    "ebCrossPromotion\022\030\n\020inviteGiftRecord\030$ \003"
    "(\005\022\030\n\rnBackFlowFlag\030% \001(\005:\0010\022\027\n\nnAdultFl"
    "ag\030& \001(\005:\003100\022\037\n\020is_high_dmd_year\030\' \001(\010:"
    "\005false\022\026\n\013bluedmdtime\030( \001(\r:\0010\022\023\n\010blueti"
    "me\030) \001(\005:\0010\022\027\n\014blueyeartime\030* \001(\005:\0010\022\027\n\014"
    "highbluetime\030+ \001(\005:\0010\022\033\n\020highblueyeartim"
    "e\030, \001(\005:\0010\"\276\002\n\rUserLogin_Rsp\022\013\n\003uid\030\001 \002("
    "\003\022\016\n\006secret\030\002 \002(\t\022\016\n\006server\030\003 \002(\t\022\014\n\004por"
    "t\030\004 \002(\005\022\r\n\005port1\030\005 \002(\005\022\r\n\005webfd\030\006 \002(\005\022\013\n"
    "\003sid\030\007 \002(\t\022\020\n\010mainload\030\010 \002(\t\022\017\n\007version\030"
    "\t \002(\t\022\016\n\006region\030\n \002(\005\022\022\n\007gettime\030\013 \001(\003:\001"
    "0\022\023\n\013platform_id\030\014 \001(\t\022\022\n\nlogintimes\030\r \001"
    "(\005\022\021\n\tplayerlvl\030\016 \001(\005\022\032\n\013isnewplayer\030\017 \001"
    "(\010:\005false\022\025\n\ncustomFlag\030\020 \001(\005:\0010\022\021\n\007chan"
    "nel\030\021 \001(\t:\000\"0\n\021WorkingStatus_Req\022\013\n\003gid\030"
    "\001 \002(\005\022\016\n\006finish\030\002 \002(\010\";\n\014UserAuth_Req\022\013\n"
    "\003uid\030\001 \002(\003\022\016\n\006secret\030\002 \002(\003\022\016\n\006sockfd\030\003 \002"
    "(\005\"\034\n\014UserAuth_Rsp\022\014\n\004pass\030\001 \002(\010\"<\n\022Send"
    "RemoteUser_Req\022\013\n\003uid\030\001 \002(\003\022\013\n\003cmd\030\002 \002(\005"
    "\022\014\n\004text\030\003 \002(\t\"\032\n\014WG_UserLeave\022\n\n\002fd\030\001 \002"
    "(\005\"\256\001\n\021GWG_FriendRequest\022\020\n\004tuid\030\001 \001(\003:\002"
    "-1\022\022\n\003ret\030\002 \001(\010:\005false\022\035\n\004info\030\003 \001(\0132\017.F"
    "riendInfoLite\022\024\n\tplat_type\030\004 \001(\005:\0010\022\020\n\006p"
    "latid\030\005 \001(\t:\000\022\034\n\016is_plat_friend\030\006 \001(\010:\004t"
    "rue\022\016\n\006region\030\007 \001(\005\"1\n\013ForwardInfo\022\017\n\003ui"
    "d\030\001 \001(\003:\002-1\022\021\n\006platid\030\002 \001(\t:\0010\"^\n\014WebGet"
    "Region\022\016\n\006openid\030\001 \002(\t\022\n\n\002fd\030\002 \002(\005\022\021\n\tsr"
    "vRegion\030\003 \003(\005\022\022\n\nlastregion\030\004 \001(\005\022\013\n\003sid"
    "\030\005 \002(\t\"J\n\017GCG_CountryNeed\022\024\n\014countrySrvI"
    "D\030\001 \001(\005\022\016\n\006region\030\002 \001(\005\022\021\n\tgameSrvID\030\003 \001"
    "(\005\"H\n\016GRG_RegionNeed\022\023\n\013regionSrvID\030\001 \001("
    "\005\022\016\n\006region\030\002 \001(\005\022\021\n\tgameSrvID\030\003 \001(\005\"D\n\014"
    "GRG_RankNeed\022\021\n\trankSrvID\030\001 \001(\005\022\016\n\006regio"
    "n\030\002 \001(\005\022\021\n\tgameSrvID\030\003 \001(\005\"D\n\014GSG_StatNe"
    "ed\022\021\n\tstatSrvID\030\001 \001(\005\022\016\n\006region\030\002 \001(\005\022\021\n"
    "\tgameSrvID\030\003 \001(\005\"\302\001\n\nHttpAskMsg\022\020\n\010szOpe"
    "nid\030\001 \001(\t\022\014\n\004nUid\030\002 \001(\003\022\017\n\007nRegion\030\003 \001(\005"
    "\022\r\n\005nType\030\004 \001(\005\022\020\n\010nTypeSec\030\005 \001(\005\022\017\n\007szA"
    "rgvs\030\006 \001(\t\022\024\n\005bToQQ\030\007 \001(\010:\005false\022\022\n\007nUse"
    "rIP\030\010 \001(\005:\0010\022\025\n\nnModifyfee\030\t \001(\005:\0010\022\020\n\005n"
    "Time\030\n \001(\005:\0010\"s\n\rHttpAnswerMsg\022\020\n\010szOpen"
    "id\030\001 \001(\t\022\014\n\004nUid\030\002 \001(\003\022\017\n\007nRegion\030\003 \001(\005\022"
    "\r\n\005nType\030\004 \001(\005\022\020\n\010nTypeSec\030\005 \001(\005\022\020\n\010szAn"
    "swer\030\006 \001(\t", 2650);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "event_sub.proto", &protobuf_RegisterTypes);
  WebCrossPromotion::default_instance_ = new WebCrossPromotion();
  UserLogin_Req::default_instance_ = new UserLogin_Req();
  UserLogin_Rsp::default_instance_ = new UserLogin_Rsp();
  WorkingStatus_Req::default_instance_ = new WorkingStatus_Req();
  UserAuth_Req::default_instance_ = new UserAuth_Req();
  UserAuth_Rsp::default_instance_ = new UserAuth_Rsp();
  SendRemoteUser_Req::default_instance_ = new SendRemoteUser_Req();
  WG_UserLeave::default_instance_ = new WG_UserLeave();
  GWG_FriendRequest::default_instance_ = new GWG_FriendRequest();
  ForwardInfo::default_instance_ = new ForwardInfo();
  WebGetRegion::default_instance_ = new WebGetRegion();
  GCG_CountryNeed::default_instance_ = new GCG_CountryNeed();
  GRG_RegionNeed::default_instance_ = new GRG_RegionNeed();
  GRG_RankNeed::default_instance_ = new GRG_RankNeed();
  GSG_StatNeed::default_instance_ = new GSG_StatNeed();
  HttpAskMsg::default_instance_ = new HttpAskMsg();
  HttpAnswerMsg::default_instance_ = new HttpAnswerMsg();
  WebCrossPromotion::default_instance_->InitAsDefaultInstance();
  UserLogin_Req::default_instance_->InitAsDefaultInstance();
  UserLogin_Rsp::default_instance_->InitAsDefaultInstance();
  WorkingStatus_Req::default_instance_->InitAsDefaultInstance();
  UserAuth_Req::default_instance_->InitAsDefaultInstance();
  UserAuth_Rsp::default_instance_->InitAsDefaultInstance();
  SendRemoteUser_Req::default_instance_->InitAsDefaultInstance();
  WG_UserLeave::default_instance_->InitAsDefaultInstance();
  GWG_FriendRequest::default_instance_->InitAsDefaultInstance();
  ForwardInfo::default_instance_->InitAsDefaultInstance();
  WebGetRegion::default_instance_->InitAsDefaultInstance();
  GCG_CountryNeed::default_instance_->InitAsDefaultInstance();
  GRG_RegionNeed::default_instance_->InitAsDefaultInstance();
  GRG_RankNeed::default_instance_->InitAsDefaultInstance();
  GSG_StatNeed::default_instance_->InitAsDefaultInstance();
  HttpAskMsg::default_instance_->InitAsDefaultInstance();
  HttpAnswerMsg::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_event_5fsub_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_event_5fsub_2eproto {
  StaticDescriptorInitializer_event_5fsub_2eproto() {
    protobuf_AddDesc_event_5fsub_2eproto();
  }
} static_descriptor_initializer_event_5fsub_2eproto_;


// ===================================================================

const ::std::string WebCrossPromotion::_default_chanle_;
const ::std::string WebCrossPromotion::_default_date_;
#ifndef _MSC_VER
const int WebCrossPromotion::kChanleFieldNumber;
const int WebCrossPromotion::kDateFieldNumber;
const int WebCrossPromotion::kCdkFieldNumber;
const int WebCrossPromotion::kCanuseFieldNumber;
#endif  // !_MSC_VER

WebCrossPromotion::WebCrossPromotion() {
  SharedCtor();
}

void WebCrossPromotion::InitAsDefaultInstance() {
}

WebCrossPromotion::WebCrossPromotion(const WebCrossPromotion& from) {
  SharedCtor();
  MergeFrom(from);
}

void WebCrossPromotion::SharedCtor() {
  _cached_size_ = 0;
  chanle_ = const_cast< ::std::string*>(&_default_chanle_);
  date_ = const_cast< ::std::string*>(&_default_date_);
  canuse_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

WebCrossPromotion::~WebCrossPromotion() {
  SharedDtor();
}

void WebCrossPromotion::SharedDtor() {
  if (chanle_ != &_default_chanle_) {
    delete chanle_;
  }
  if (date_ != &_default_date_) {
    delete date_;
  }
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* WebCrossPromotion::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WebCrossPromotion_descriptor_;
}

const WebCrossPromotion& WebCrossPromotion::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_event_5fsub_2eproto();  return *default_instance_;
}

WebCrossPromotion* WebCrossPromotion::default_instance_ = NULL;

WebCrossPromotion* WebCrossPromotion::New() const {
  return new WebCrossPromotion;
}

void WebCrossPromotion::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (chanle_ != &_default_chanle_) {
        chanle_->clear();
      }
    }
    if (_has_bit(1)) {
      if (date_ != &_default_date_) {
        date_->clear();
      }
    }
    canuse_ = false;
  }
  cdk_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool WebCrossPromotion::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string chanle = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadString(
              input, this->mutable_chanle()));
        ::google::protobuf::internal::WireFormat::VerifyUTF8String(
          this->chanle().data(), this->chanle().length(),
          ::google::protobuf::internal::WireFormat::PARSE);
        if (input->ExpectTag(18)) goto parse_date;
        break;
      }
      
      // optional string date = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_date:
        DO_(::google::protobuf::internal::WireFormatLite::ReadString(
              input, this->mutable_date()));
        ::google::protobuf::internal::WireFormat::VerifyUTF8String(
          this->date().data(), this->date().length(),
          ::google::protobuf::internal::WireFormat::PARSE);
        if (input->ExpectTag(26)) goto parse_cdk;
        break;
      }
      
      // repeated string cdk = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_cdk:
        DO_(::google::protobuf::internal::WireFormatLite::ReadString(
              input, this->add_cdk()));
        ::google::protobuf::internal::WireFormat::VerifyUTF8String(
          this->cdk(0).data(), this->cdk(0).length(),
          ::google::protobuf::internal::WireFormat::PARSE);
        if (input->ExpectTag(26)) goto parse_cdk;
        if (input->ExpectTag(32)) goto parse_canuse;
        break;
      }
      
      // optional bool canuse = 4 [default = false];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_canuse:
        DO_(::google::protobuf::internal::WireFormatLite::ReadBool(
              input, &canuse_));
        _set_bit(3);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void WebCrossPromotion::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    WebCrossPromotion::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional string chanle = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->chanle().data(), this->chanle().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->chanle(), output);
  }
  
  // optional string date = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->date().data(), this->date().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->date(), output);
  }
  
  // repeated string cdk = 3;
  for (int i = 0; i < this->cdk_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->cdk(i).data(), this->cdk(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->cdk(i), output);
  }
  
  // optional bool canuse = 4 [default = false];
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->canuse(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* WebCrossPromotion::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string chanle = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->chanle().data(), this->chanle().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->chanle(), target);
  }
  
  // optional string date = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->date().data(), this->date().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->date(), target);
  }
  
  // repeated string cdk = 3;
  for (int i = 0; i < this->cdk_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->cdk(i).data(), this->cdk(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(3, this->cdk(i), target);
  }
  
  // optional bool canuse = 4 [default = false];
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->canuse(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int WebCrossPromotion::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string chanle = 1;
    if (has_chanle()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->chanle());
    }
    
    // optional string date = 2;
    if (has_date()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->date());
    }
    
    // optional bool canuse = 4 [default = false];
    if (has_canuse()) {
      total_size += 1 + 1;
    }
    
  }
  // repeated string cdk = 3;
  total_size += 1 * this->cdk_size();
  for (int i = 0; i < this->cdk_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->cdk(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void WebCrossPromotion::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const WebCrossPromotion* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const WebCrossPromotion*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void WebCrossPromotion::MergeFrom(const WebCrossPromotion& from) {
  GOOGLE_CHECK_NE(&from, this);
  cdk_.MergeFrom(from.cdk_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_chanle(from.chanle());
    }
    if (from._has_bit(1)) {
      set_date(from.date());
    }
    if (from._has_bit(3)) {
      set_canuse(from.canuse());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void WebCrossPromotion::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WebCrossPromotion::CopyFrom(const WebCrossPromotion& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WebCrossPromotion::IsInitialized() const {
  
  return true;
}

void WebCrossPromotion::Swap(WebCrossPromotion* other) {
  if (other != this) {
    std::swap(chanle_, other->chanle_);
    std::swap(date_, other->date_);
    cdk_.Swap(&other->cdk_);
    std::swap(canuse_, other->canuse_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata WebCrossPromotion::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = WebCrossPromotion_descriptor_;
  metadata.reflection = WebCrossPromotion_reflection_;
  return metadata;
}


// ===================================================================

const ::std::string UserLogin_Req::_default_platform_id_;
const ::std::string UserLogin_Req::_default_name_;
const ::std::string UserLogin_Req::_default_profile_link_;
const ::std::string UserLogin_Req::_default_sid_;
const ::std::string UserLogin_Req::_default_invitefriendid_;
const ::std::string UserLogin_Req::_default_via_;
const ::std::string UserLogin_Req::_default_taskmarketid_;
#ifndef _MSC_VER
const int UserLogin_Req::kSiteidFieldNumber;
const int UserLogin_Req::kPlatformIdFieldNumber;
const int UserLogin_Req::kNameFieldNumber;
const int UserLogin_Req::kProfileLinkFieldNumber;
const int UserLogin_Req::kGenderFieldNumber;
const int UserLogin_Req::kIsYellowDmdFieldNumber;
const int UserLogin_Req::kIsYellowDmdYearFieldNumber;
const int UserLogin_Req::kYellowDmdLvFieldNumber;
const int UserLogin_Req::kFriendsPlatidFieldNumber;
const int UserLogin_Req::kWebfdFieldNumber;
const int UserLogin_Req::kSidFieldNumber;
const int UserLogin_Req::kMydbRetFieldNumber;
const int UserLogin_Req::kMydbOldidFieldNumber;
const int UserLogin_Req::kRegionFieldNumber;
const int UserLogin_Req::kUidFieldNumber;
const int UserLogin_Req::kLevelFieldNumber;
const int UserLogin_Req::kDefregionFieldNumber;
const int UserLogin_Req::kUndealGiftCntFieldNumber;
const int UserLogin_Req::kInviteFrdCntFieldNumber;
const int UserLogin_Req::kYellowDmdtimeFieldNumber;
const int UserLogin_Req::kGettimeFieldNumber;
const int UserLogin_Req::kInvitefriendidFieldNumber;
const int UserLogin_Req::kIsnewplayerFieldNumber;
const int UserLogin_Req::kUndealFrdGiftCntFieldNumber;
const int UserLogin_Req::kCityFieldNumber;
const int UserLogin_Req::kViaFieldNumber;
const int UserLogin_Req::kIsrecallFieldNumber;
const int UserLogin_Req::kIsHighYellowDmdFieldNumber;
const int UserLogin_Req::kIsApp51ActFieldNumber;
const int UserLogin_Req::kDaySendGiftCntFieldNumber;
const int UserLogin_Req::kInviteFrdCntDayFieldNumber;
const int UserLogin_Req::kCustomFlagFieldNumber;
const int UserLogin_Req::kTaskMarketIdFieldNumber;
const int UserLogin_Req::kQqTaskStepFieldNumber;
const int UserLogin_Req::kPromotionFieldNumber;
const int UserLogin_Req::kInviteGiftRecordFieldNumber;
const int UserLogin_Req::kNBackFlowFlagFieldNumber;
const int UserLogin_Req::kNAdultFlagFieldNumber;
const int UserLogin_Req::kIsHighDmdYearFieldNumber;
const int UserLogin_Req::kBluedmdtimeFieldNumber;
const int UserLogin_Req::kBluetimeFieldNumber;
const int UserLogin_Req::kBlueyeartimeFieldNumber;
const int UserLogin_Req::kHighbluetimeFieldNumber;
const int UserLogin_Req::kHighblueyeartimeFieldNumber;
#endif  // !_MSC_VER

UserLogin_Req::UserLogin_Req() {
  SharedCtor();
}

void UserLogin_Req::InitAsDefaultInstance() {
  promotion_ = const_cast< ::WebCrossPromotion*>(&::WebCrossPromotion::default_instance());
}

UserLogin_Req::UserLogin_Req(const UserLogin_Req& from) {
  SharedCtor();
  MergeFrom(from);
}

void UserLogin_Req::SharedCtor() {
  _cached_size_ = 0;
  siteid_ = 0;
  platform_id_ = const_cast< ::std::string*>(&_default_platform_id_);
  name_ = const_cast< ::std::string*>(&_default_name_);
  profile_link_ = const_cast< ::std::string*>(&_default_profile_link_);
  gender_ = 0;
  is_yellow_dmd_ = false;
  is_yellow_dmd_year_ = false;
  yellow_dmd_lv_ = 0;
  webfd_ = 0;
  sid_ = const_cast< ::std::string*>(&_default_sid_);
  mydb_ret_ = 0;
  mydb_oldid_ = 0;
  region_ = 0;
  uid_ = GOOGLE_LONGLONG(0);
  level_ = 0;
  defregion_ = GOOGLE_LONGLONG(0);
  undealgiftcnt_ = 0;
  invitefrdcnt_ = 0;
  yellowdmdtime_ = 0u;
  gettime_ = GOOGLE_LONGLONG(0);
  invitefriendid_ = const_cast< ::std::string*>(&_default_invitefriendid_);
  isnewplayer_ = false;
  undealfrdgiftcnt_ = 0;
  city_ = 0;
  via_ = const_cast< ::std::string*>(&_default_via_);
  isrecall_ = false;
  is_high_yellow_dmd_ = false;
  isapp51act_ = false;
  daysendgiftcnt_ = 0;
  invitefrdcntday_ = 0;
  customflag_ = 0;
  taskmarketid_ = const_cast< ::std::string*>(&_default_taskmarketid_);
  qqtaskstep_ = 0;
  promotion_ = NULL;
  nbackflowflag_ = 0;
  nadultflag_ = 100;
  is_high_dmd_year_ = false;
  bluedmdtime_ = 0u;
  bluetime_ = 0;
  blueyeartime_ = 0;
  highbluetime_ = 0;
  highblueyeartime_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UserLogin_Req::~UserLogin_Req() {
  SharedDtor();
}

void UserLogin_Req::SharedDtor() {
  if (platform_id_ != &_default_platform_id_) {
    delete platform_id_;
  }
  if (name_ != &_default_name_) {
    delete name_;
  }
  if (profile_link_ != &_default_profile_link_) {
    delete profile_link_;
  }
  if (sid_ != &_default_sid_) {
    delete sid_;
  }
  if (invitefriendid_ != &_default_invitefriendid_) {
    delete invitefriendid_;
  }
  if (via_ != &_default_via_) {
    delete via_;
  }
  if (taskmarketid_ != &_default_taskmarketid_) {
    delete taskmarketid_;
  }
  if (this != default_instance_) {
    delete promotion_;
  }
}

const ::google::protobuf::Descriptor* UserLogin_Req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UserLogin_Req_descriptor_;
}

const UserLogin_Req& UserLogin_Req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_event_5fsub_2eproto();  return *default_instance_;
}

UserLogin_Req* UserLogin_Req::default_instance_ = NULL;

UserLogin_Req* UserLogin_Req::New() const {
  return new UserLogin_Req;
}

void UserLogin_Req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    siteid_ = 0;
    if (_has_bit(1)) {
      if (platform_id_ != &_default_platform_id_) {
        platform_id_->clear();
      }
    }
    if (_has_bit(2)) {
      if (name_ != &_default_name_) {
        name_->clear();
      }
    }
    if (_has_bit(3)) {
      if (profile_link_ != &_default_profile_link_) {
        profile_link_->clear();
      }
    }
    gender_ = 0;
    is_yellow_dmd_ = false;
    is_yellow_dmd_year_ = false;
    yellow_dmd_lv_ = 0;
  }
  if (_has_bits_[9 / 32] & (0xffu << (9 % 32))) {
    webfd_ = 0;
    if (_has_bit(10)) {
      if (sid_ != &_default_sid_) {
        sid_->clear();
      }
    }
    mydb_ret_ = 0;
    mydb_oldid_ = 0;
    region_ = 0;
    uid_ = GOOGLE_LONGLONG(0);
    level_ = 0;
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    defregion_ = GOOGLE_LONGLONG(0);
    undealgiftcnt_ = 0;
    invitefrdcnt_ = 0;
    yellowdmdtime_ = 0u;
    gettime_ = GOOGLE_LONGLONG(0);
    if (_has_bit(21)) {
      if (invitefriendid_ != &_default_invitefriendid_) {
        invitefriendid_->clear();
      }
    }
    isnewplayer_ = false;
    undealfrdgiftcnt_ = 0;
  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    city_ = 0;
    if (_has_bit(25)) {
      if (via_ != &_default_via_) {
        via_->clear();
      }
    }
    isrecall_ = false;
    is_high_yellow_dmd_ = false;
    isapp51act_ = false;
    daysendgiftcnt_ = 0;
    invitefrdcntday_ = 0;
    customflag_ = 0;
  }
  if (_has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    if (_has_bit(32)) {
      if (taskmarketid_ != &_default_taskmarketid_) {
        taskmarketid_->clear();
      }
    }
    qqtaskstep_ = 0;
    if (_has_bit(34)) {
      if (promotion_ != NULL) promotion_->::WebCrossPromotion::Clear();
    }
    nbackflowflag_ = 0;
    nadultflag_ = 100;
    is_high_dmd_year_ = false;
    bluedmdtime_ = 0u;
  }
  if (_has_bits_[40 / 32] & (0xffu << (40 % 32))) {
    bluetime_ = 0;
    blueyeartime_ = 0;
    highbluetime_ = 0;
    highblueyeartime_ = 0;
  }
  friends_platid_.Clear();
  invitegiftrecord_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UserLogin_Req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 siteid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &siteid_));
        _set_bit(0);
        if (input->ExpectTag(18)) goto parse_platform_id;
        break;
      }
      
      // required string platform_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_platform_id:
        DO_(::google::protobuf::internal::WireFormatLite::ReadString(
              input, this->mutable_platform_id()));
        ::google::protobuf::internal::WireFormat::VerifyUTF8String(
          this->platform_id().data(), this->platform_id().length(),
          ::google::protobuf::internal::WireFormat::PARSE);
        if (input->ExpectTag(26)) goto parse_name;
        break;
      }
      
      // required string name = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_name:
        DO_(::google::protobuf::internal::WireFormatLite::ReadString(
              input, this->mutable_name()));
        ::google::protobuf::internal::WireFormat::VerifyUTF8String(
          this->name().data(), this->name().length(),
          ::google::protobuf::internal::WireFormat::PARSE);
        if (input->ExpectTag(34)) goto parse_profile_link;
        break;
      }
      
      // required string profile_link = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_profile_link:
        DO_(::google::protobuf::internal::WireFormatLite::ReadString(
              input, this->mutable_profile_link()));
        ::google::protobuf::internal::WireFormat::VerifyUTF8String(
          this->profile_link().data(), this->profile_link().length(),
          ::google::protobuf::internal::WireFormat::PARSE);
        if (input->ExpectTag(40)) goto parse_gender;
        break;
      }
      
      // required int32 gender = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_gender:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &gender_));
        _set_bit(4);
        if (input->ExpectTag(48)) goto parse_is_yellow_dmd;
        break;
      }
      
      // required bool is_yellow_dmd = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_is_yellow_dmd:
        DO_(::google::protobuf::internal::WireFormatLite::ReadBool(
              input, &is_yellow_dmd_));
        _set_bit(5);
        if (input->ExpectTag(56)) goto parse_is_yellow_dmd_year;
        break;
      }
      
      // required bool is_yellow_dmd_year = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_is_yellow_dmd_year:
        DO_(::google::protobuf::internal::WireFormatLite::ReadBool(
              input, &is_yellow_dmd_year_));
        _set_bit(6);
        if (input->ExpectTag(64)) goto parse_yellow_dmd_lv;
        break;
      }
      
      // required int32 yellow_dmd_lv = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_yellow_dmd_lv:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &yellow_dmd_lv_));
        _set_bit(7);
        if (input->ExpectTag(74)) goto parse_friends_platid;
        break;
      }
      
      // repeated string friends_platid = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_friends_platid:
        DO_(::google::protobuf::internal::WireFormatLite::ReadString(
              input, this->add_friends_platid()));
        ::google::protobuf::internal::WireFormat::VerifyUTF8String(
          this->friends_platid(0).data(), this->friends_platid(0).length(),
          ::google::protobuf::internal::WireFormat::PARSE);
        if (input->ExpectTag(74)) goto parse_friends_platid;
        if (input->ExpectTag(80)) goto parse_webfd;
        break;
      }
      
      // required int32 webfd = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_webfd:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &webfd_));
        _set_bit(9);
        if (input->ExpectTag(90)) goto parse_sid;
        break;
      }
      
      // required string sid = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_sid:
        DO_(::google::protobuf::internal::WireFormatLite::ReadString(
              input, this->mutable_sid()));
        ::google::protobuf::internal::WireFormat::VerifyUTF8String(
          this->sid().data(), this->sid().length(),
          ::google::protobuf::internal::WireFormat::PARSE);
        if (input->ExpectTag(96)) goto parse_mydb_ret;
        break;
      }
      
      // optional int32 mydb_ret = 12 [default = 0];
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_mydb_ret:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &mydb_ret_));
        _set_bit(11);
        if (input->ExpectTag(104)) goto parse_mydb_oldid;
        break;
      }
      
      // optional int32 mydb_oldid = 13 [default = 0];
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_mydb_oldid:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &mydb_oldid_));
        _set_bit(12);
        if (input->ExpectTag(112)) goto parse_region;
        break;
      }
      
      // required int32 region = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_region:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &region_));
        _set_bit(13);
        if (input->ExpectTag(120)) goto parse_uid;
        break;
      }
      
      // optional int64 uid = 15 [default = 0];
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_uid:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt64(
              input, &uid_));
        _set_bit(14);
        if (input->ExpectTag(128)) goto parse_level;
        break;
      }
      
      // optional int32 level = 16 [default = 0];
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_level:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &level_));
        _set_bit(15);
        if (input->ExpectTag(136)) goto parse_defregion;
        break;
      }
      
      // optional int64 defregion = 17 [default = 0];
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_defregion:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt64(
              input, &defregion_));
        _set_bit(16);
        if (input->ExpectTag(144)) goto parse_undealGiftCnt;
        break;
      }
      
      // optional int32 undealGiftCnt = 18 [default = 0];
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_undealGiftCnt:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &undealgiftcnt_));
        _set_bit(17);
        if (input->ExpectTag(152)) goto parse_inviteFrdCnt;
        break;
      }
      
      // optional int32 inviteFrdCnt = 19 [default = 0];
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_inviteFrdCnt:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &invitefrdcnt_));
        _set_bit(18);
        if (input->ExpectTag(160)) goto parse_yellowDmdtime;
        break;
      }
      
      // optional uint32 yellowDmdtime = 20 [default = 0];
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_yellowDmdtime:
        DO_(::google::protobuf::internal::WireFormatLite::ReadUInt32(
              input, &yellowdmdtime_));
        _set_bit(19);
        if (input->ExpectTag(168)) goto parse_gettime;
        break;
      }
      
      // optional int64 gettime = 21 [default = 0];
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_gettime:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt64(
              input, &gettime_));
        _set_bit(20);
        if (input->ExpectTag(178)) goto parse_invitefriendid;
        break;
      }
      
      // optional string invitefriendid = 22 [default = ""];
      case 22: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_invitefriendid:
        DO_(::google::protobuf::internal::WireFormatLite::ReadString(
              input, this->mutable_invitefriendid()));
        ::google::protobuf::internal::WireFormat::VerifyUTF8String(
          this->invitefriendid().data(), this->invitefriendid().length(),
          ::google::protobuf::internal::WireFormat::PARSE);
        if (input->ExpectTag(184)) goto parse_isnewplayer;
        break;
      }
      
      // optional bool isnewplayer = 23 [default = false];
      case 23: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_isnewplayer:
        DO_(::google::protobuf::internal::WireFormatLite::ReadBool(
              input, &isnewplayer_));
        _set_bit(22);
        if (input->ExpectTag(192)) goto parse_undealFrdGiftCnt;
        break;
      }
      
      // optional int32 undealFrdGiftCnt = 24 [default = 0];
      case 24: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_undealFrdGiftCnt:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &undealfrdgiftcnt_));
        _set_bit(23);
        if (input->ExpectTag(200)) goto parse_city;
        break;
      }
      
      // optional int32 city = 25 [default = 0];
      case 25: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_city:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &city_));
        _set_bit(24);
        if (input->ExpectTag(210)) goto parse_via;
        break;
      }
      
      // optional string via = 26;
      case 26: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_via:
        DO_(::google::protobuf::internal::WireFormatLite::ReadString(
              input, this->mutable_via()));
        ::google::protobuf::internal::WireFormat::VerifyUTF8String(
          this->via().data(), this->via().length(),
          ::google::protobuf::internal::WireFormat::PARSE);
        if (input->ExpectTag(216)) goto parse_isrecall;
        break;
      }
      
      // optional bool isrecall = 27 [default = false];
      case 27: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_isrecall:
        DO_(::google::protobuf::internal::WireFormatLite::ReadBool(
              input, &isrecall_));
        _set_bit(26);
        if (input->ExpectTag(224)) goto parse_is_high_yellow_dmd;
        break;
      }
      
      // optional bool is_high_yellow_dmd = 28 [default = false];
      case 28: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_is_high_yellow_dmd:
        DO_(::google::protobuf::internal::WireFormatLite::ReadBool(
              input, &is_high_yellow_dmd_));
        _set_bit(27);
        if (input->ExpectTag(232)) goto parse_isApp51Act;
        break;
      }
      
      // optional bool isApp51Act = 29 [default = false];
      case 29: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_isApp51Act:
        DO_(::google::protobuf::internal::WireFormatLite::ReadBool(
              input, &isapp51act_));
        _set_bit(28);
        if (input->ExpectTag(240)) goto parse_daySendGiftCnt;
        break;
      }
      
      // optional int32 daySendGiftCnt = 30 [default = 0];
      case 30: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_daySendGiftCnt:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &daysendgiftcnt_));
        _set_bit(29);
        if (input->ExpectTag(248)) goto parse_inviteFrdCntDay;
        break;
      }
      
      // optional int32 inviteFrdCntDay = 31 [default = 0];
      case 31: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_inviteFrdCntDay:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &invitefrdcntday_));
        _set_bit(30);
        if (input->ExpectTag(256)) goto parse_customFlag;
        break;
      }
      
      // optional int32 customFlag = 32 [default = 0];
      case 32: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_customFlag:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &customflag_));
        _set_bit(31);
        if (input->ExpectTag(266)) goto parse_taskMarketId;
        break;
      }
      
      // optional string taskMarketId = 33 [default = ""];
      case 33: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_taskMarketId:
        DO_(::google::protobuf::internal::WireFormatLite::ReadString(
              input, this->mutable_taskmarketid()));
        ::google::protobuf::internal::WireFormat::VerifyUTF8String(
          this->taskmarketid().data(), this->taskmarketid().length(),
          ::google::protobuf::internal::WireFormat::PARSE);
        if (input->ExpectTag(272)) goto parse_qqTaskStep;
        break;
      }
      
      // optional int32 qqTaskStep = 34 [default = 0];
      case 34: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_qqTaskStep:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &qqtaskstep_));
        _set_bit(33);
        if (input->ExpectTag(282)) goto parse_promotion;
        break;
      }
      
      // optional .WebCrossPromotion promotion = 35;
      case 35: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_promotion:
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
             input, mutable_promotion()));
        if (input->ExpectTag(288)) goto parse_inviteGiftRecord;
        break;
      }
      
      // repeated int32 inviteGiftRecord = 36;
      case 36: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_inviteGiftRecord:
        ::google::protobuf::int32 value;
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &value));
        add_invitegiftrecord(value);
        if (input->ExpectTag(288)) goto parse_inviteGiftRecord;
        if (input->ExpectTag(296)) goto parse_nBackFlowFlag;
        break;
      }
      
      // optional int32 nBackFlowFlag = 37 [default = 0];
      case 37: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_nBackFlowFlag:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &nbackflowflag_));
        _set_bit(36);
        if (input->ExpectTag(304)) goto parse_nAdultFlag;
        break;
      }
      
      // optional int32 nAdultFlag = 38 [default = 100];
      case 38: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_nAdultFlag:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &nadultflag_));
        _set_bit(37);
        if (input->ExpectTag(312)) goto parse_is_high_dmd_year;
        break;
      }
      
      // optional bool is_high_dmd_year = 39 [default = false];
      case 39: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_is_high_dmd_year:
        DO_(::google::protobuf::internal::WireFormatLite::ReadBool(
              input, &is_high_dmd_year_));
        _set_bit(38);
        if (input->ExpectTag(320)) goto parse_bluedmdtime;
        break;
      }
      
      // optional uint32 bluedmdtime = 40 [default = 0];
      case 40: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_bluedmdtime:
        DO_(::google::protobuf::internal::WireFormatLite::ReadUInt32(
              input, &bluedmdtime_));
        _set_bit(39);
        if (input->ExpectTag(328)) goto parse_bluetime;
        break;
      }
      
      // optional int32 bluetime = 41 [default = 0];
      case 41: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_bluetime:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &bluetime_));
        _set_bit(40);
        if (input->ExpectTag(336)) goto parse_blueyeartime;
        break;
      }
      
      // optional int32 blueyeartime = 42 [default = 0];
      case 42: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_blueyeartime:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &blueyeartime_));
        _set_bit(41);
        if (input->ExpectTag(344)) goto parse_highbluetime;
        break;
      }
      
      // optional int32 highbluetime = 43 [default = 0];
      case 43: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_highbluetime:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &highbluetime_));
        _set_bit(42);
        if (input->ExpectTag(352)) goto parse_highblueyeartime;
        break;
      }
      
      // optional int32 highblueyeartime = 44 [default = 0];
      case 44: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_highblueyeartime:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &highblueyeartime_));
        _set_bit(43);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void UserLogin_Req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    UserLogin_Req::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // required int32 siteid = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->siteid(), output);
  }
  
  // required string platform_id = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->platform_id().data(), this->platform_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->platform_id(), output);
  }
  
  // required string name = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->name(), output);
  }
  
  // required string profile_link = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->profile_link().data(), this->profile_link().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->profile_link(), output);
  }
  
  // required int32 gender = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->gender(), output);
  }
  
  // required bool is_yellow_dmd = 6;
  if (_has_bit(5)) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->is_yellow_dmd(), output);
  }
  
  // required bool is_yellow_dmd_year = 7;
  if (_has_bit(6)) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->is_yellow_dmd_year(), output);
  }
  
  // required int32 yellow_dmd_lv = 8;
  if (_has_bit(7)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->yellow_dmd_lv(), output);
  }
  
  // repeated string friends_platid = 9;
  for (int i = 0; i < this->friends_platid_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->friends_platid(i).data(), this->friends_platid(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      9, this->friends_platid(i), output);
  }
  
  // required int32 webfd = 10;
  if (_has_bit(9)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->webfd(), output);
  }
  
  // required string sid = 11;
  if (_has_bit(10)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->sid().data(), this->sid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      11, this->sid(), output);
  }
  
  // optional int32 mydb_ret = 12 [default = 0];
  if (_has_bit(11)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->mydb_ret(), output);
  }
  
  // optional int32 mydb_oldid = 13 [default = 0];
  if (_has_bit(12)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->mydb_oldid(), output);
  }
  
  // required int32 region = 14;
  if (_has_bit(13)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->region(), output);
  }
  
  // optional int64 uid = 15 [default = 0];
  if (_has_bit(14)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(15, this->uid(), output);
  }
  
  // optional int32 level = 16 [default = 0];
  if (_has_bit(15)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(16, this->level(), output);
  }
  
  // optional int64 defregion = 17 [default = 0];
  if (_has_bit(16)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(17, this->defregion(), output);
  }
  
  // optional int32 undealGiftCnt = 18 [default = 0];
  if (_has_bit(17)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(18, this->undealgiftcnt(), output);
  }
  
  // optional int32 inviteFrdCnt = 19 [default = 0];
  if (_has_bit(18)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(19, this->invitefrdcnt(), output);
  }
  
  // optional uint32 yellowDmdtime = 20 [default = 0];
  if (_has_bit(19)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(20, this->yellowdmdtime(), output);
  }
  
  // optional int64 gettime = 21 [default = 0];
  if (_has_bit(20)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(21, this->gettime(), output);
  }
  
  // optional string invitefriendid = 22 [default = ""];
  if (_has_bit(21)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->invitefriendid().data(), this->invitefriendid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      22, this->invitefriendid(), output);
  }
  
  // optional bool isnewplayer = 23 [default = false];
  if (_has_bit(22)) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(23, this->isnewplayer(), output);
  }
  
  // optional int32 undealFrdGiftCnt = 24 [default = 0];
  if (_has_bit(23)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(24, this->undealfrdgiftcnt(), output);
  }
  
  // optional int32 city = 25 [default = 0];
  if (_has_bit(24)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(25, this->city(), output);
  }
  
  // optional string via = 26;
  if (_has_bit(25)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->via().data(), this->via().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      26, this->via(), output);
  }
  
  // optional bool isrecall = 27 [default = false];
  if (_has_bit(26)) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(27, this->isrecall(), output);
  }
  
  // optional bool is_high_yellow_dmd = 28 [default = false];
  if (_has_bit(27)) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(28, this->is_high_yellow_dmd(), output);
  }
  
  // optional bool isApp51Act = 29 [default = false];
  if (_has_bit(28)) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(29, this->isapp51act(), output);
  }
  
  // optional int32 daySendGiftCnt = 30 [default = 0];
  if (_has_bit(29)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(30, this->daysendgiftcnt(), output);
  }
  
  // optional int32 inviteFrdCntDay = 31 [default = 0];
  if (_has_bit(30)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(31, this->invitefrdcntday(), output);
  }
  
  // optional int32 customFlag = 32 [default = 0];
  if (_has_bit(31)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(32, this->customflag(), output);
  }
  
  // optional string taskMarketId = 33 [default = ""];
  if (_has_bit(32)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->taskmarketid().data(), this->taskmarketid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      33, this->taskmarketid(), output);
  }
  
  // optional int32 qqTaskStep = 34 [default = 0];
  if (_has_bit(33)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(34, this->qqtaskstep(), output);
  }
  
  // optional .WebCrossPromotion promotion = 35;
  if (_has_bit(34)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      35, this->promotion(), output);
  }
  
  // repeated int32 inviteGiftRecord = 36;
  for (int i = 0; i < this->invitegiftrecord_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      36, this->invitegiftrecord(i), output);
  }
  
  // optional int32 nBackFlowFlag = 37 [default = 0];
  if (_has_bit(36)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(37, this->nbackflowflag(), output);
  }
  
  // optional int32 nAdultFlag = 38 [default = 100];
  if (_has_bit(37)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(38, this->nadultflag(), output);
  }
  
  // optional bool is_high_dmd_year = 39 [default = false];
  if (_has_bit(38)) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(39, this->is_high_dmd_year(), output);
  }
  
  // optional uint32 bluedmdtime = 40 [default = 0];
  if (_has_bit(39)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(40, this->bluedmdtime(), output);
  }
  
  // optional int32 bluetime = 41 [default = 0];
  if (_has_bit(40)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(41, this->bluetime(), output);
  }
  
  // optional int32 blueyeartime = 42 [default = 0];
  if (_has_bit(41)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(42, this->blueyeartime(), output);
  }
  
  // optional int32 highbluetime = 43 [default = 0];
  if (_has_bit(42)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(43, this->highbluetime(), output);
  }
  
  // optional int32 highblueyeartime = 44 [default = 0];
  if (_has_bit(43)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(44, this->highblueyeartime(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* UserLogin_Req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 siteid = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->siteid(), target);
  }
  
  // required string platform_id = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->platform_id().data(), this->platform_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->platform_id(), target);
  }
  
  // required string name = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->name(), target);
  }
  
  // required string profile_link = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->profile_link().data(), this->profile_link().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->profile_link(), target);
  }
  
  // required int32 gender = 5;
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->gender(), target);
  }
  
  // required bool is_yellow_dmd = 6;
  if (_has_bit(5)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->is_yellow_dmd(), target);
  }
  
  // required bool is_yellow_dmd_year = 7;
  if (_has_bit(6)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->is_yellow_dmd_year(), target);
  }
  
  // required int32 yellow_dmd_lv = 8;
  if (_has_bit(7)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->yellow_dmd_lv(), target);
  }
  
  // repeated string friends_platid = 9;
  for (int i = 0; i < this->friends_platid_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->friends_platid(i).data(), this->friends_platid(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(9, this->friends_platid(i), target);
  }
  
  // required int32 webfd = 10;
  if (_has_bit(9)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->webfd(), target);
  }
  
  // required string sid = 11;
  if (_has_bit(10)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->sid().data(), this->sid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        11, this->sid(), target);
  }
  
  // optional int32 mydb_ret = 12 [default = 0];
  if (_has_bit(11)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->mydb_ret(), target);
  }
  
  // optional int32 mydb_oldid = 13 [default = 0];
  if (_has_bit(12)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->mydb_oldid(), target);
  }
  
  // required int32 region = 14;
  if (_has_bit(13)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(14, this->region(), target);
  }
  
  // optional int64 uid = 15 [default = 0];
  if (_has_bit(14)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(15, this->uid(), target);
  }
  
  // optional int32 level = 16 [default = 0];
  if (_has_bit(15)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(16, this->level(), target);
  }
  
  // optional int64 defregion = 17 [default = 0];
  if (_has_bit(16)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(17, this->defregion(), target);
  }
  
  // optional int32 undealGiftCnt = 18 [default = 0];
  if (_has_bit(17)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(18, this->undealgiftcnt(), target);
  }
  
  // optional int32 inviteFrdCnt = 19 [default = 0];
  if (_has_bit(18)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(19, this->invitefrdcnt(), target);
  }
  
  // optional uint32 yellowDmdtime = 20 [default = 0];
  if (_has_bit(19)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(20, this->yellowdmdtime(), target);
  }
  
  // optional int64 gettime = 21 [default = 0];
  if (_has_bit(20)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(21, this->gettime(), target);
  }
  
  // optional string invitefriendid = 22 [default = ""];
  if (_has_bit(21)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->invitefriendid().data(), this->invitefriendid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        22, this->invitefriendid(), target);
  }
  
  // optional bool isnewplayer = 23 [default = false];
  if (_has_bit(22)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(23, this->isnewplayer(), target);
  }
  
  // optional int32 undealFrdGiftCnt = 24 [default = 0];
  if (_has_bit(23)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(24, this->undealfrdgiftcnt(), target);
  }
  
  // optional int32 city = 25 [default = 0];
  if (_has_bit(24)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(25, this->city(), target);
  }
  
  // optional string via = 26;
  if (_has_bit(25)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->via().data(), this->via().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        26, this->via(), target);
  }
  
  // optional bool isrecall = 27 [default = false];
  if (_has_bit(26)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(27, this->isrecall(), target);
  }
  
  // optional bool is_high_yellow_dmd = 28 [default = false];
  if (_has_bit(27)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(28, this->is_high_yellow_dmd(), target);
  }
  
  // optional bool isApp51Act = 29 [default = false];
  if (_has_bit(28)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(29, this->isapp51act(), target);
  }
  
  // optional int32 daySendGiftCnt = 30 [default = 0];
  if (_has_bit(29)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(30, this->daysendgiftcnt(), target);
  }
  
  // optional int32 inviteFrdCntDay = 31 [default = 0];
  if (_has_bit(30)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(31, this->invitefrdcntday(), target);
  }
  
  // optional int32 customFlag = 32 [default = 0];
  if (_has_bit(31)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(32, this->customflag(), target);
  }
  
  // optional string taskMarketId = 33 [default = ""];
  if (_has_bit(32)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->taskmarketid().data(), this->taskmarketid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        33, this->taskmarketid(), target);
  }
  
  // optional int32 qqTaskStep = 34 [default = 0];
  if (_has_bit(33)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(34, this->qqtaskstep(), target);
  }
  
  // optional .WebCrossPromotion promotion = 35;
  if (_has_bit(34)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        35, this->promotion(), target);
  }
  
  // repeated int32 inviteGiftRecord = 36;
  for (int i = 0; i < this->invitegiftrecord_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(36, this->invitegiftrecord(i), target);
  }
  
  // optional int32 nBackFlowFlag = 37 [default = 0];
  if (_has_bit(36)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(37, this->nbackflowflag(), target);
  }
  
  // optional int32 nAdultFlag = 38 [default = 100];
  if (_has_bit(37)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(38, this->nadultflag(), target);
  }
  
  // optional bool is_high_dmd_year = 39 [default = false];
  if (_has_bit(38)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(39, this->is_high_dmd_year(), target);
  }
  
  // optional uint32 bluedmdtime = 40 [default = 0];
  if (_has_bit(39)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(40, this->bluedmdtime(), target);
  }
  
  // optional int32 bluetime = 41 [default = 0];
  if (_has_bit(40)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(41, this->bluetime(), target);
  }
  
  // optional int32 blueyeartime = 42 [default = 0];
  if (_has_bit(41)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(42, this->blueyeartime(), target);
  }
  
  // optional int32 highbluetime = 43 [default = 0];
  if (_has_bit(42)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(43, this->highbluetime(), target);
  }
  
  // optional int32 highblueyeartime = 44 [default = 0];
  if (_has_bit(43)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(44, this->highblueyeartime(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int UserLogin_Req::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 siteid = 1;
    if (has_siteid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->siteid());
    }
    
    // required string platform_id = 2;
    if (has_platform_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->platform_id());
    }
    
    // required string name = 3;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }
    
    // required string profile_link = 4;
    if (has_profile_link()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->profile_link());
    }
    
    // required int32 gender = 5;
    if (has_gender()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gender());
    }
    
    // required bool is_yellow_dmd = 6;
    if (has_is_yellow_dmd()) {
      total_size += 1 + 1;
    }
    
    // required bool is_yellow_dmd_year = 7;
    if (has_is_yellow_dmd_year()) {
      total_size += 1 + 1;
    }
    
    // required int32 yellow_dmd_lv = 8;
    if (has_yellow_dmd_lv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->yellow_dmd_lv());
    }
    
  }
  if (_has_bits_[9 / 32] & (0xffu << (9 % 32))) {
    // required int32 webfd = 10;
    if (has_webfd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->webfd());
    }
    
    // required string sid = 11;
    if (has_sid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->sid());
    }
    
    // optional int32 mydb_ret = 12 [default = 0];
    if (has_mydb_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->mydb_ret());
    }
    
    // optional int32 mydb_oldid = 13 [default = 0];
    if (has_mydb_oldid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->mydb_oldid());
    }
    
    // required int32 region = 14;
    if (has_region()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->region());
    }
    
    // optional int64 uid = 15 [default = 0];
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->uid());
    }
    
    // optional int32 level = 16 [default = 0];
    if (has_level()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->level());
    }
    
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional int64 defregion = 17 [default = 0];
    if (has_defregion()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->defregion());
    }
    
    // optional int32 undealGiftCnt = 18 [default = 0];
    if (has_undealgiftcnt()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->undealgiftcnt());
    }
    
    // optional int32 inviteFrdCnt = 19 [default = 0];
    if (has_invitefrdcnt()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->invitefrdcnt());
    }
    
    // optional uint32 yellowDmdtime = 20 [default = 0];
    if (has_yellowdmdtime()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->yellowdmdtime());
    }
    
    // optional int64 gettime = 21 [default = 0];
    if (has_gettime()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->gettime());
    }
    
    // optional string invitefriendid = 22 [default = ""];
    if (has_invitefriendid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->invitefriendid());
    }
    
    // optional bool isnewplayer = 23 [default = false];
    if (has_isnewplayer()) {
      total_size += 2 + 1;
    }
    
    // optional int32 undealFrdGiftCnt = 24 [default = 0];
    if (has_undealfrdgiftcnt()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->undealfrdgiftcnt());
    }
    
  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    // optional int32 city = 25 [default = 0];
    if (has_city()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->city());
    }
    
    // optional string via = 26;
    if (has_via()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->via());
    }
    
    // optional bool isrecall = 27 [default = false];
    if (has_isrecall()) {
      total_size += 2 + 1;
    }
    
    // optional bool is_high_yellow_dmd = 28 [default = false];
    if (has_is_high_yellow_dmd()) {
      total_size += 2 + 1;
    }
    
    // optional bool isApp51Act = 29 [default = false];
    if (has_isapp51act()) {
      total_size += 2 + 1;
    }
    
    // optional int32 daySendGiftCnt = 30 [default = 0];
    if (has_daysendgiftcnt()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->daysendgiftcnt());
    }
    
    // optional int32 inviteFrdCntDay = 31 [default = 0];
    if (has_invitefrdcntday()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->invitefrdcntday());
    }
    
    // optional int32 customFlag = 32 [default = 0];
    if (has_customflag()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->customflag());
    }
    
  }
  if (_has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    // optional string taskMarketId = 33 [default = ""];
    if (has_taskmarketid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->taskmarketid());
    }
    
    // optional int32 qqTaskStep = 34 [default = 0];
    if (has_qqtaskstep()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->qqtaskstep());
    }
    
    // optional .WebCrossPromotion promotion = 35;
    if (has_promotion()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->promotion());
    }
    
    // optional int32 nBackFlowFlag = 37 [default = 0];
    if (has_nbackflowflag()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->nbackflowflag());
    }
    
    // optional int32 nAdultFlag = 38 [default = 100];
    if (has_nadultflag()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->nadultflag());
    }
    
    // optional bool is_high_dmd_year = 39 [default = false];
    if (has_is_high_dmd_year()) {
      total_size += 2 + 1;
    }
    
    // optional uint32 bluedmdtime = 40 [default = 0];
    if (has_bluedmdtime()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->bluedmdtime());
    }
    
  }
  if (_has_bits_[40 / 32] & (0xffu << (40 % 32))) {
    // optional int32 bluetime = 41 [default = 0];
    if (has_bluetime()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bluetime());
    }
    
    // optional int32 blueyeartime = 42 [default = 0];
    if (has_blueyeartime()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->blueyeartime());
    }
    
    // optional int32 highbluetime = 43 [default = 0];
    if (has_highbluetime()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->highbluetime());
    }
    
    // optional int32 highblueyeartime = 44 [default = 0];
    if (has_highblueyeartime()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->highblueyeartime());
    }
    
  }
  // repeated string friends_platid = 9;
  total_size += 1 * this->friends_platid_size();
  for (int i = 0; i < this->friends_platid_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->friends_platid(i));
  }
  
  // repeated int32 inviteGiftRecord = 36;
  {
    int data_size = 0;
    for (int i = 0; i < this->invitegiftrecord_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->invitegiftrecord(i));
    }
    total_size += 2 * this->invitegiftrecord_size() + data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void UserLogin_Req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UserLogin_Req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UserLogin_Req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UserLogin_Req::MergeFrom(const UserLogin_Req& from) {
  GOOGLE_CHECK_NE(&from, this);
  friends_platid_.MergeFrom(from.friends_platid_);
  invitegiftrecord_.MergeFrom(from.invitegiftrecord_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_siteid(from.siteid());
    }
    if (from._has_bit(1)) {
      set_platform_id(from.platform_id());
    }
    if (from._has_bit(2)) {
      set_name(from.name());
    }
    if (from._has_bit(3)) {
      set_profile_link(from.profile_link());
    }
    if (from._has_bit(4)) {
      set_gender(from.gender());
    }
    if (from._has_bit(5)) {
      set_is_yellow_dmd(from.is_yellow_dmd());
    }
    if (from._has_bit(6)) {
      set_is_yellow_dmd_year(from.is_yellow_dmd_year());
    }
    if (from._has_bit(7)) {
      set_yellow_dmd_lv(from.yellow_dmd_lv());
    }
  }
  if (from._has_bits_[9 / 32] & (0xffu << (9 % 32))) {
    if (from._has_bit(9)) {
      set_webfd(from.webfd());
    }
    if (from._has_bit(10)) {
      set_sid(from.sid());
    }
    if (from._has_bit(11)) {
      set_mydb_ret(from.mydb_ret());
    }
    if (from._has_bit(12)) {
      set_mydb_oldid(from.mydb_oldid());
    }
    if (from._has_bit(13)) {
      set_region(from.region());
    }
    if (from._has_bit(14)) {
      set_uid(from.uid());
    }
    if (from._has_bit(15)) {
      set_level(from.level());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from._has_bit(16)) {
      set_defregion(from.defregion());
    }
    if (from._has_bit(17)) {
      set_undealgiftcnt(from.undealgiftcnt());
    }
    if (from._has_bit(18)) {
      set_invitefrdcnt(from.invitefrdcnt());
    }
    if (from._has_bit(19)) {
      set_yellowdmdtime(from.yellowdmdtime());
    }
    if (from._has_bit(20)) {
      set_gettime(from.gettime());
    }
    if (from._has_bit(21)) {
      set_invitefriendid(from.invitefriendid());
    }
    if (from._has_bit(22)) {
      set_isnewplayer(from.isnewplayer());
    }
    if (from._has_bit(23)) {
      set_undealfrdgiftcnt(from.undealfrdgiftcnt());
    }
  }
  if (from._has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (from._has_bit(24)) {
      set_city(from.city());
    }
    if (from._has_bit(25)) {
      set_via(from.via());
    }
    if (from._has_bit(26)) {
      set_isrecall(from.isrecall());
    }
    if (from._has_bit(27)) {
      set_is_high_yellow_dmd(from.is_high_yellow_dmd());
    }
    if (from._has_bit(28)) {
      set_isapp51act(from.isapp51act());
    }
    if (from._has_bit(29)) {
      set_daysendgiftcnt(from.daysendgiftcnt());
    }
    if (from._has_bit(30)) {
      set_invitefrdcntday(from.invitefrdcntday());
    }
    if (from._has_bit(31)) {
      set_customflag(from.customflag());
    }
  }
  if (from._has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    if (from._has_bit(32)) {
      set_taskmarketid(from.taskmarketid());
    }
    if (from._has_bit(33)) {
      set_qqtaskstep(from.qqtaskstep());
    }
    if (from._has_bit(34)) {
      mutable_promotion()->::WebCrossPromotion::MergeFrom(from.promotion());
    }
    if (from._has_bit(36)) {
      set_nbackflowflag(from.nbackflowflag());
    }
    if (from._has_bit(37)) {
      set_nadultflag(from.nadultflag());
    }
    if (from._has_bit(38)) {
      set_is_high_dmd_year(from.is_high_dmd_year());
    }
    if (from._has_bit(39)) {
      set_bluedmdtime(from.bluedmdtime());
    }
  }
  if (from._has_bits_[40 / 32] & (0xffu << (40 % 32))) {
    if (from._has_bit(40)) {
      set_bluetime(from.bluetime());
    }
    if (from._has_bit(41)) {
      set_blueyeartime(from.blueyeartime());
    }
    if (from._has_bit(42)) {
      set_highbluetime(from.highbluetime());
    }
    if (from._has_bit(43)) {
      set_highblueyeartime(from.highblueyeartime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UserLogin_Req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserLogin_Req::CopyFrom(const UserLogin_Req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserLogin_Req::IsInitialized() const {
  if ((_has_bits_[0] & 0x000026ff) != 0x000026ff) return false;
  
  return true;
}

void UserLogin_Req::Swap(UserLogin_Req* other) {
  if (other != this) {
    std::swap(siteid_, other->siteid_);
    std::swap(platform_id_, other->platform_id_);
    std::swap(name_, other->name_);
    std::swap(profile_link_, other->profile_link_);
    std::swap(gender_, other->gender_);
    std::swap(is_yellow_dmd_, other->is_yellow_dmd_);
    std::swap(is_yellow_dmd_year_, other->is_yellow_dmd_year_);
    std::swap(yellow_dmd_lv_, other->yellow_dmd_lv_);
    friends_platid_.Swap(&other->friends_platid_);
    std::swap(webfd_, other->webfd_);
    std::swap(sid_, other->sid_);
    std::swap(mydb_ret_, other->mydb_ret_);
    std::swap(mydb_oldid_, other->mydb_oldid_);
    std::swap(region_, other->region_);
    std::swap(uid_, other->uid_);
    std::swap(level_, other->level_);
    std::swap(defregion_, other->defregion_);
    std::swap(undealgiftcnt_, other->undealgiftcnt_);
    std::swap(invitefrdcnt_, other->invitefrdcnt_);
    std::swap(yellowdmdtime_, other->yellowdmdtime_);
    std::swap(gettime_, other->gettime_);
    std::swap(invitefriendid_, other->invitefriendid_);
    std::swap(isnewplayer_, other->isnewplayer_);
    std::swap(undealfrdgiftcnt_, other->undealfrdgiftcnt_);
    std::swap(city_, other->city_);
    std::swap(via_, other->via_);
    std::swap(isrecall_, other->isrecall_);
    std::swap(is_high_yellow_dmd_, other->is_high_yellow_dmd_);
    std::swap(isapp51act_, other->isapp51act_);
    std::swap(daysendgiftcnt_, other->daysendgiftcnt_);
    std::swap(invitefrdcntday_, other->invitefrdcntday_);
    std::swap(customflag_, other->customflag_);
    std::swap(taskmarketid_, other->taskmarketid_);
    std::swap(qqtaskstep_, other->qqtaskstep_);
    std::swap(promotion_, other->promotion_);
    invitegiftrecord_.Swap(&other->invitegiftrecord_);
    std::swap(nbackflowflag_, other->nbackflowflag_);
    std::swap(nadultflag_, other->nadultflag_);
    std::swap(is_high_dmd_year_, other->is_high_dmd_year_);
    std::swap(bluedmdtime_, other->bluedmdtime_);
    std::swap(bluetime_, other->bluetime_);
    std::swap(blueyeartime_, other->blueyeartime_);
    std::swap(highbluetime_, other->highbluetime_);
    std::swap(highblueyeartime_, other->highblueyeartime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_has_bits_[1], other->_has_bits_[1]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UserLogin_Req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UserLogin_Req_descriptor_;
  metadata.reflection = UserLogin_Req_reflection_;
  return metadata;
}


// ===================================================================

const ::std::string UserLogin_Rsp::_default_secret_;
const ::std::string UserLogin_Rsp::_default_server_;
const ::std::string UserLogin_Rsp::_default_sid_;
const ::std::string UserLogin_Rsp::_default_mainload_;
const ::std::string UserLogin_Rsp::_default_version_;
const ::std::string UserLogin_Rsp::_default_platform_id_;
const ::std::string UserLogin_Rsp::_default_channel_;
#ifndef _MSC_VER
const int UserLogin_Rsp::kUidFieldNumber;
const int UserLogin_Rsp::kSecretFieldNumber;
const int UserLogin_Rsp::kServerFieldNumber;
const int UserLogin_Rsp::kPortFieldNumber;
const int UserLogin_Rsp::kPort1FieldNumber;
const int UserLogin_Rsp::kWebfdFieldNumber;
const int UserLogin_Rsp::kSidFieldNumber;
const int UserLogin_Rsp::kMainloadFieldNumber;
const int UserLogin_Rsp::kVersionFieldNumber;
const int UserLogin_Rsp::kRegionFieldNumber;
const int UserLogin_Rsp::kGettimeFieldNumber;
const int UserLogin_Rsp::kPlatformIdFieldNumber;
const int UserLogin_Rsp::kLogintimesFieldNumber;
const int UserLogin_Rsp::kPlayerlvlFieldNumber;
const int UserLogin_Rsp::kIsnewplayerFieldNumber;
const int UserLogin_Rsp::kCustomFlagFieldNumber;
const int UserLogin_Rsp::kChannelFieldNumber;
#endif  // !_MSC_VER

UserLogin_Rsp::UserLogin_Rsp() {
  SharedCtor();
}

void UserLogin_Rsp::InitAsDefaultInstance() {
}

UserLogin_Rsp::UserLogin_Rsp(const UserLogin_Rsp& from) {
  SharedCtor();
  MergeFrom(from);
}

void UserLogin_Rsp::SharedCtor() {
  _cached_size_ = 0;
  uid_ = GOOGLE_LONGLONG(0);
  secret_ = const_cast< ::std::string*>(&_default_secret_);
  server_ = const_cast< ::std::string*>(&_default_server_);
  port_ = 0;
  port1_ = 0;
  webfd_ = 0;
  sid_ = const_cast< ::std::string*>(&_default_sid_);
  mainload_ = const_cast< ::std::string*>(&_default_mainload_);
  version_ = const_cast< ::std::string*>(&_default_version_);
  region_ = 0;
  gettime_ = GOOGLE_LONGLONG(0);
  platform_id_ = const_cast< ::std::string*>(&_default_platform_id_);
  logintimes_ = 0;
  playerlvl_ = 0;
  isnewplayer_ = false;
  customflag_ = 0;
  channel_ = const_cast< ::std::string*>(&_default_channel_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UserLogin_Rsp::~UserLogin_Rsp() {
  SharedDtor();
}

void UserLogin_Rsp::SharedDtor() {
  if (secret_ != &_default_secret_) {
    delete secret_;
  }
  if (server_ != &_default_server_) {
    delete server_;
  }
  if (sid_ != &_default_sid_) {
    delete sid_;
  }
  if (mainload_ != &_default_mainload_) {
    delete mainload_;
  }
  if (version_ != &_default_version_) {
    delete version_;
  }
  if (platform_id_ != &_default_platform_id_) {
    delete platform_id_;
  }
  if (channel_ != &_default_channel_) {
    delete channel_;
  }
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* UserLogin_Rsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UserLogin_Rsp_descriptor_;
}

const UserLogin_Rsp& UserLogin_Rsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_event_5fsub_2eproto();  return *default_instance_;
}

UserLogin_Rsp* UserLogin_Rsp::default_instance_ = NULL;

UserLogin_Rsp* UserLogin_Rsp::New() const {
  return new UserLogin_Rsp;
}

void UserLogin_Rsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    uid_ = GOOGLE_LONGLONG(0);
    if (_has_bit(1)) {
      if (secret_ != &_default_secret_) {
        secret_->clear();
      }
    }
    if (_has_bit(2)) {
      if (server_ != &_default_server_) {
        server_->clear();
      }
    }
    port_ = 0;
    port1_ = 0;
    webfd_ = 0;
    if (_has_bit(6)) {
      if (sid_ != &_default_sid_) {
        sid_->clear();
      }
    }
    if (_has_bit(7)) {
      if (mainload_ != &_default_mainload_) {
        mainload_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (_has_bit(8)) {
      if (version_ != &_default_version_) {
        version_->clear();
      }
    }
    region_ = 0;
    gettime_ = GOOGLE_LONGLONG(0);
    if (_has_bit(11)) {
      if (platform_id_ != &_default_platform_id_) {
        platform_id_->clear();
      }
    }
    logintimes_ = 0;
    playerlvl_ = 0;
    isnewplayer_ = false;
    customflag_ = 0;
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (_has_bit(16)) {
      if (channel_ != &_default_channel_) {
        channel_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UserLogin_Rsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 uid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt64(
              input, &uid_));
        _set_bit(0);
        if (input->ExpectTag(18)) goto parse_secret;
        break;
      }
      
      // required string secret = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_secret:
        DO_(::google::protobuf::internal::WireFormatLite::ReadString(
              input, this->mutable_secret()));
        ::google::protobuf::internal::WireFormat::VerifyUTF8String(
          this->secret().data(), this->secret().length(),
          ::google::protobuf::internal::WireFormat::PARSE);
        if (input->ExpectTag(26)) goto parse_server;
        break;
      }
      
      // required string server = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_server:
        DO_(::google::protobuf::internal::WireFormatLite::ReadString(
              input, this->mutable_server()));
        ::google::protobuf::internal::WireFormat::VerifyUTF8String(
          this->server().data(), this->server().length(),
          ::google::protobuf::internal::WireFormat::PARSE);
        if (input->ExpectTag(32)) goto parse_port;
        break;
      }
      
      // required int32 port = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_port:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &port_));
        _set_bit(3);
        if (input->ExpectTag(40)) goto parse_port1;
        break;
      }
      
      // required int32 port1 = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_port1:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &port1_));
        _set_bit(4);
        if (input->ExpectTag(48)) goto parse_webfd;
        break;
      }
      
      // required int32 webfd = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_webfd:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &webfd_));
        _set_bit(5);
        if (input->ExpectTag(58)) goto parse_sid;
        break;
      }
      
      // required string sid = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_sid:
        DO_(::google::protobuf::internal::WireFormatLite::ReadString(
              input, this->mutable_sid()));
        ::google::protobuf::internal::WireFormat::VerifyUTF8String(
          this->sid().data(), this->sid().length(),
          ::google::protobuf::internal::WireFormat::PARSE);
        if (input->ExpectTag(66)) goto parse_mainload;
        break;
      }
      
      // required string mainload = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_mainload:
        DO_(::google::protobuf::internal::WireFormatLite::ReadString(
              input, this->mutable_mainload()));
        ::google::protobuf::internal::WireFormat::VerifyUTF8String(
          this->mainload().data(), this->mainload().length(),
          ::google::protobuf::internal::WireFormat::PARSE);
        if (input->ExpectTag(74)) goto parse_version;
        break;
      }
      
      // required string version = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_version:
        DO_(::google::protobuf::internal::WireFormatLite::ReadString(
              input, this->mutable_version()));
        ::google::protobuf::internal::WireFormat::VerifyUTF8String(
          this->version().data(), this->version().length(),
          ::google::protobuf::internal::WireFormat::PARSE);
        if (input->ExpectTag(80)) goto parse_region;
        break;
      }
      
      // required int32 region = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_region:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &region_));
        _set_bit(9);
        if (input->ExpectTag(88)) goto parse_gettime;
        break;
      }
      
      // optional int64 gettime = 11 [default = 0];
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_gettime:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt64(
              input, &gettime_));
        _set_bit(10);
        if (input->ExpectTag(98)) goto parse_platform_id;
        break;
      }
      
      // optional string platform_id = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_platform_id:
        DO_(::google::protobuf::internal::WireFormatLite::ReadString(
              input, this->mutable_platform_id()));
        ::google::protobuf::internal::WireFormat::VerifyUTF8String(
          this->platform_id().data(), this->platform_id().length(),
          ::google::protobuf::internal::WireFormat::PARSE);
        if (input->ExpectTag(104)) goto parse_logintimes;
        break;
      }
      
      // optional int32 logintimes = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_logintimes:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &logintimes_));
        _set_bit(12);
        if (input->ExpectTag(112)) goto parse_playerlvl;
        break;
      }
      
      // optional int32 playerlvl = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_playerlvl:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &playerlvl_));
        _set_bit(13);
        if (input->ExpectTag(120)) goto parse_isnewplayer;
        break;
      }
      
      // optional bool isnewplayer = 15 [default = false];
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_isnewplayer:
        DO_(::google::protobuf::internal::WireFormatLite::ReadBool(
              input, &isnewplayer_));
        _set_bit(14);
        if (input->ExpectTag(128)) goto parse_customFlag;
        break;
      }
      
      // optional int32 customFlag = 16 [default = 0];
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_customFlag:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &customflag_));
        _set_bit(15);
        if (input->ExpectTag(138)) goto parse_channel;
        break;
      }
      
      // optional string channel = 17 [default = ""];
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_channel:
        DO_(::google::protobuf::internal::WireFormatLite::ReadString(
              input, this->mutable_channel()));
        ::google::protobuf::internal::WireFormat::VerifyUTF8String(
          this->channel().data(), this->channel().length(),
          ::google::protobuf::internal::WireFormat::PARSE);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void UserLogin_Rsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    UserLogin_Rsp::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // required int64 uid = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->uid(), output);
  }
  
  // required string secret = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->secret().data(), this->secret().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->secret(), output);
  }
  
  // required string server = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->server().data(), this->server().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->server(), output);
  }
  
  // required int32 port = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->port(), output);
  }
  
  // required int32 port1 = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->port1(), output);
  }
  
  // required int32 webfd = 6;
  if (_has_bit(5)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->webfd(), output);
  }
  
  // required string sid = 7;
  if (_has_bit(6)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->sid().data(), this->sid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->sid(), output);
  }
  
  // required string mainload = 8;
  if (_has_bit(7)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->mainload().data(), this->mainload().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      8, this->mainload(), output);
  }
  
  // required string version = 9;
  if (_has_bit(8)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->version().data(), this->version().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      9, this->version(), output);
  }
  
  // required int32 region = 10;
  if (_has_bit(9)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->region(), output);
  }
  
  // optional int64 gettime = 11 [default = 0];
  if (_has_bit(10)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(11, this->gettime(), output);
  }
  
  // optional string platform_id = 12;
  if (_has_bit(11)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->platform_id().data(), this->platform_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      12, this->platform_id(), output);
  }
  
  // optional int32 logintimes = 13;
  if (_has_bit(12)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->logintimes(), output);
  }
  
  // optional int32 playerlvl = 14;
  if (_has_bit(13)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->playerlvl(), output);
  }
  
  // optional bool isnewplayer = 15 [default = false];
  if (_has_bit(14)) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(15, this->isnewplayer(), output);
  }
  
  // optional int32 customFlag = 16 [default = 0];
  if (_has_bit(15)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(16, this->customflag(), output);
  }
  
  // optional string channel = 17 [default = ""];
  if (_has_bit(16)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->channel().data(), this->channel().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      17, this->channel(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* UserLogin_Rsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 uid = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->uid(), target);
  }
  
  // required string secret = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->secret().data(), this->secret().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->secret(), target);
  }
  
  // required string server = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->server().data(), this->server().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->server(), target);
  }
  
  // required int32 port = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->port(), target);
  }
  
  // required int32 port1 = 5;
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->port1(), target);
  }
  
  // required int32 webfd = 6;
  if (_has_bit(5)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->webfd(), target);
  }
  
  // required string sid = 7;
  if (_has_bit(6)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->sid().data(), this->sid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->sid(), target);
  }
  
  // required string mainload = 8;
  if (_has_bit(7)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->mainload().data(), this->mainload().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->mainload(), target);
  }
  
  // required string version = 9;
  if (_has_bit(8)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->version().data(), this->version().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->version(), target);
  }
  
  // required int32 region = 10;
  if (_has_bit(9)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->region(), target);
  }
  
  // optional int64 gettime = 11 [default = 0];
  if (_has_bit(10)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(11, this->gettime(), target);
  }
  
  // optional string platform_id = 12;
  if (_has_bit(11)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->platform_id().data(), this->platform_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        12, this->platform_id(), target);
  }
  
  // optional int32 logintimes = 13;
  if (_has_bit(12)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->logintimes(), target);
  }
  
  // optional int32 playerlvl = 14;
  if (_has_bit(13)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(14, this->playerlvl(), target);
  }
  
  // optional bool isnewplayer = 15 [default = false];
  if (_has_bit(14)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(15, this->isnewplayer(), target);
  }
  
  // optional int32 customFlag = 16 [default = 0];
  if (_has_bit(15)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(16, this->customflag(), target);
  }
  
  // optional string channel = 17 [default = ""];
  if (_has_bit(16)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->channel().data(), this->channel().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        17, this->channel(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int UserLogin_Rsp::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 uid = 1;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->uid());
    }
    
    // required string secret = 2;
    if (has_secret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->secret());
    }
    
    // required string server = 3;
    if (has_server()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->server());
    }
    
    // required int32 port = 4;
    if (has_port()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->port());
    }
    
    // required int32 port1 = 5;
    if (has_port1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->port1());
    }
    
    // required int32 webfd = 6;
    if (has_webfd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->webfd());
    }
    
    // required string sid = 7;
    if (has_sid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->sid());
    }
    
    // required string mainload = 8;
    if (has_mainload()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->mainload());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required string version = 9;
    if (has_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->version());
    }
    
    // required int32 region = 10;
    if (has_region()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->region());
    }
    
    // optional int64 gettime = 11 [default = 0];
    if (has_gettime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->gettime());
    }
    
    // optional string platform_id = 12;
    if (has_platform_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->platform_id());
    }
    
    // optional int32 logintimes = 13;
    if (has_logintimes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->logintimes());
    }
    
    // optional int32 playerlvl = 14;
    if (has_playerlvl()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->playerlvl());
    }
    
    // optional bool isnewplayer = 15 [default = false];
    if (has_isnewplayer()) {
      total_size += 1 + 1;
    }
    
    // optional int32 customFlag = 16 [default = 0];
    if (has_customflag()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->customflag());
    }
    
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional string channel = 17 [default = ""];
    if (has_channel()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->channel());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void UserLogin_Rsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UserLogin_Rsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UserLogin_Rsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UserLogin_Rsp::MergeFrom(const UserLogin_Rsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_uid(from.uid());
    }
    if (from._has_bit(1)) {
      set_secret(from.secret());
    }
    if (from._has_bit(2)) {
      set_server(from.server());
    }
    if (from._has_bit(3)) {
      set_port(from.port());
    }
    if (from._has_bit(4)) {
      set_port1(from.port1());
    }
    if (from._has_bit(5)) {
      set_webfd(from.webfd());
    }
    if (from._has_bit(6)) {
      set_sid(from.sid());
    }
    if (from._has_bit(7)) {
      set_mainload(from.mainload());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from._has_bit(8)) {
      set_version(from.version());
    }
    if (from._has_bit(9)) {
      set_region(from.region());
    }
    if (from._has_bit(10)) {
      set_gettime(from.gettime());
    }
    if (from._has_bit(11)) {
      set_platform_id(from.platform_id());
    }
    if (from._has_bit(12)) {
      set_logintimes(from.logintimes());
    }
    if (from._has_bit(13)) {
      set_playerlvl(from.playerlvl());
    }
    if (from._has_bit(14)) {
      set_isnewplayer(from.isnewplayer());
    }
    if (from._has_bit(15)) {
      set_customflag(from.customflag());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from._has_bit(16)) {
      set_channel(from.channel());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UserLogin_Rsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserLogin_Rsp::CopyFrom(const UserLogin_Rsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserLogin_Rsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x000003ff) != 0x000003ff) return false;
  
  return true;
}

void UserLogin_Rsp::Swap(UserLogin_Rsp* other) {
  if (other != this) {
    std::swap(uid_, other->uid_);
    std::swap(secret_, other->secret_);
    std::swap(server_, other->server_);
    std::swap(port_, other->port_);
    std::swap(port1_, other->port1_);
    std::swap(webfd_, other->webfd_);
    std::swap(sid_, other->sid_);
    std::swap(mainload_, other->mainload_);
    std::swap(version_, other->version_);
    std::swap(region_, other->region_);
    std::swap(gettime_, other->gettime_);
    std::swap(platform_id_, other->platform_id_);
    std::swap(logintimes_, other->logintimes_);
    std::swap(playerlvl_, other->playerlvl_);
    std::swap(isnewplayer_, other->isnewplayer_);
    std::swap(customflag_, other->customflag_);
    std::swap(channel_, other->channel_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UserLogin_Rsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UserLogin_Rsp_descriptor_;
  metadata.reflection = UserLogin_Rsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int WorkingStatus_Req::kGidFieldNumber;
const int WorkingStatus_Req::kFinishFieldNumber;
#endif  // !_MSC_VER

WorkingStatus_Req::WorkingStatus_Req() {
  SharedCtor();
}

void WorkingStatus_Req::InitAsDefaultInstance() {
}

WorkingStatus_Req::WorkingStatus_Req(const WorkingStatus_Req& from) {
  SharedCtor();
  MergeFrom(from);
}

void WorkingStatus_Req::SharedCtor() {
  _cached_size_ = 0;
  gid_ = 0;
  finish_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

WorkingStatus_Req::~WorkingStatus_Req() {
  SharedDtor();
}

void WorkingStatus_Req::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* WorkingStatus_Req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WorkingStatus_Req_descriptor_;
}

const WorkingStatus_Req& WorkingStatus_Req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_event_5fsub_2eproto();  return *default_instance_;
}

WorkingStatus_Req* WorkingStatus_Req::default_instance_ = NULL;

WorkingStatus_Req* WorkingStatus_Req::New() const {
  return new WorkingStatus_Req;
}

void WorkingStatus_Req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    gid_ = 0;
    finish_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool WorkingStatus_Req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 gid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &gid_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_finish;
        break;
      }
      
      // required bool finish = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_finish:
        DO_(::google::protobuf::internal::WireFormatLite::ReadBool(
              input, &finish_));
        _set_bit(1);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void WorkingStatus_Req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    WorkingStatus_Req::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // required int32 gid = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->gid(), output);
  }
  
  // required bool finish = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->finish(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* WorkingStatus_Req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 gid = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->gid(), target);
  }
  
  // required bool finish = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->finish(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int WorkingStatus_Req::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 gid = 1;
    if (has_gid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gid());
    }
    
    // required bool finish = 2;
    if (has_finish()) {
      total_size += 1 + 1;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void WorkingStatus_Req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const WorkingStatus_Req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const WorkingStatus_Req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void WorkingStatus_Req::MergeFrom(const WorkingStatus_Req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_gid(from.gid());
    }
    if (from._has_bit(1)) {
      set_finish(from.finish());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void WorkingStatus_Req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WorkingStatus_Req::CopyFrom(const WorkingStatus_Req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WorkingStatus_Req::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void WorkingStatus_Req::Swap(WorkingStatus_Req* other) {
  if (other != this) {
    std::swap(gid_, other->gid_);
    std::swap(finish_, other->finish_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata WorkingStatus_Req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = WorkingStatus_Req_descriptor_;
  metadata.reflection = WorkingStatus_Req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UserAuth_Req::kUidFieldNumber;
const int UserAuth_Req::kSecretFieldNumber;
const int UserAuth_Req::kSockfdFieldNumber;
#endif  // !_MSC_VER

UserAuth_Req::UserAuth_Req() {
  SharedCtor();
}

void UserAuth_Req::InitAsDefaultInstance() {
}

UserAuth_Req::UserAuth_Req(const UserAuth_Req& from) {
  SharedCtor();
  MergeFrom(from);
}

void UserAuth_Req::SharedCtor() {
  _cached_size_ = 0;
  uid_ = GOOGLE_LONGLONG(0);
  secret_ = GOOGLE_LONGLONG(0);
  sockfd_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UserAuth_Req::~UserAuth_Req() {
  SharedDtor();
}

void UserAuth_Req::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* UserAuth_Req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UserAuth_Req_descriptor_;
}

const UserAuth_Req& UserAuth_Req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_event_5fsub_2eproto();  return *default_instance_;
}

UserAuth_Req* UserAuth_Req::default_instance_ = NULL;

UserAuth_Req* UserAuth_Req::New() const {
  return new UserAuth_Req;
}

void UserAuth_Req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    uid_ = GOOGLE_LONGLONG(0);
    secret_ = GOOGLE_LONGLONG(0);
    sockfd_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UserAuth_Req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 uid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt64(
              input, &uid_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_secret;
        break;
      }
      
      // required int64 secret = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_secret:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt64(
              input, &secret_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_sockfd;
        break;
      }
      
      // required int32 sockfd = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_sockfd:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &sockfd_));
        _set_bit(2);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void UserAuth_Req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    UserAuth_Req::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // required int64 uid = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->uid(), output);
  }
  
  // required int64 secret = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->secret(), output);
  }
  
  // required int32 sockfd = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->sockfd(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* UserAuth_Req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 uid = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->uid(), target);
  }
  
  // required int64 secret = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->secret(), target);
  }
  
  // required int32 sockfd = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->sockfd(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int UserAuth_Req::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 uid = 1;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->uid());
    }
    
    // required int64 secret = 2;
    if (has_secret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->secret());
    }
    
    // required int32 sockfd = 3;
    if (has_sockfd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sockfd());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void UserAuth_Req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UserAuth_Req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UserAuth_Req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UserAuth_Req::MergeFrom(const UserAuth_Req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_uid(from.uid());
    }
    if (from._has_bit(1)) {
      set_secret(from.secret());
    }
    if (from._has_bit(2)) {
      set_sockfd(from.sockfd());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UserAuth_Req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserAuth_Req::CopyFrom(const UserAuth_Req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserAuth_Req::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  
  return true;
}

void UserAuth_Req::Swap(UserAuth_Req* other) {
  if (other != this) {
    std::swap(uid_, other->uid_);
    std::swap(secret_, other->secret_);
    std::swap(sockfd_, other->sockfd_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UserAuth_Req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UserAuth_Req_descriptor_;
  metadata.reflection = UserAuth_Req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UserAuth_Rsp::kPassFieldNumber;
#endif  // !_MSC_VER

UserAuth_Rsp::UserAuth_Rsp() {
  SharedCtor();
}

void UserAuth_Rsp::InitAsDefaultInstance() {
}

UserAuth_Rsp::UserAuth_Rsp(const UserAuth_Rsp& from) {
  SharedCtor();
  MergeFrom(from);
}

void UserAuth_Rsp::SharedCtor() {
  _cached_size_ = 0;
  pass_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UserAuth_Rsp::~UserAuth_Rsp() {
  SharedDtor();
}

void UserAuth_Rsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* UserAuth_Rsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UserAuth_Rsp_descriptor_;
}

const UserAuth_Rsp& UserAuth_Rsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_event_5fsub_2eproto();  return *default_instance_;
}

UserAuth_Rsp* UserAuth_Rsp::default_instance_ = NULL;

UserAuth_Rsp* UserAuth_Rsp::New() const {
  return new UserAuth_Rsp;
}

void UserAuth_Rsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    pass_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UserAuth_Rsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bool pass = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadBool(
              input, &pass_));
        _set_bit(0);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void UserAuth_Rsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    UserAuth_Rsp::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // required bool pass = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->pass(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* UserAuth_Rsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bool pass = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->pass(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int UserAuth_Rsp::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bool pass = 1;
    if (has_pass()) {
      total_size += 1 + 1;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void UserAuth_Rsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UserAuth_Rsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UserAuth_Rsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UserAuth_Rsp::MergeFrom(const UserAuth_Rsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_pass(from.pass());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UserAuth_Rsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserAuth_Rsp::CopyFrom(const UserAuth_Rsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserAuth_Rsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void UserAuth_Rsp::Swap(UserAuth_Rsp* other) {
  if (other != this) {
    std::swap(pass_, other->pass_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UserAuth_Rsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UserAuth_Rsp_descriptor_;
  metadata.reflection = UserAuth_Rsp_reflection_;
  return metadata;
}


// ===================================================================

const ::std::string SendRemoteUser_Req::_default_text_;
#ifndef _MSC_VER
const int SendRemoteUser_Req::kUidFieldNumber;
const int SendRemoteUser_Req::kCmdFieldNumber;
const int SendRemoteUser_Req::kTextFieldNumber;
#endif  // !_MSC_VER

SendRemoteUser_Req::SendRemoteUser_Req() {
  SharedCtor();
}

void SendRemoteUser_Req::InitAsDefaultInstance() {
}

SendRemoteUser_Req::SendRemoteUser_Req(const SendRemoteUser_Req& from) {
  SharedCtor();
  MergeFrom(from);
}

void SendRemoteUser_Req::SharedCtor() {
  _cached_size_ = 0;
  uid_ = GOOGLE_LONGLONG(0);
  cmd_ = 0;
  text_ = const_cast< ::std::string*>(&_default_text_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SendRemoteUser_Req::~SendRemoteUser_Req() {
  SharedDtor();
}

void SendRemoteUser_Req::SharedDtor() {
  if (text_ != &_default_text_) {
    delete text_;
  }
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* SendRemoteUser_Req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SendRemoteUser_Req_descriptor_;
}

const SendRemoteUser_Req& SendRemoteUser_Req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_event_5fsub_2eproto();  return *default_instance_;
}

SendRemoteUser_Req* SendRemoteUser_Req::default_instance_ = NULL;

SendRemoteUser_Req* SendRemoteUser_Req::New() const {
  return new SendRemoteUser_Req;
}

void SendRemoteUser_Req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    uid_ = GOOGLE_LONGLONG(0);
    cmd_ = 0;
    if (_has_bit(2)) {
      if (text_ != &_default_text_) {
        text_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SendRemoteUser_Req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 uid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt64(
              input, &uid_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_cmd;
        break;
      }
      
      // required int32 cmd = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_cmd:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &cmd_));
        _set_bit(1);
        if (input->ExpectTag(26)) goto parse_text;
        break;
      }
      
      // required string text = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_text:
        DO_(::google::protobuf::internal::WireFormatLite::ReadString(
              input, this->mutable_text()));
        ::google::protobuf::internal::WireFormat::VerifyUTF8String(
          this->text().data(), this->text().length(),
          ::google::protobuf::internal::WireFormat::PARSE);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SendRemoteUser_Req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    SendRemoteUser_Req::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // required int64 uid = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->uid(), output);
  }
  
  // required int32 cmd = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->cmd(), output);
  }
  
  // required string text = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->text().data(), this->text().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->text(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SendRemoteUser_Req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 uid = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->uid(), target);
  }
  
  // required int32 cmd = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->cmd(), target);
  }
  
  // required string text = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->text().data(), this->text().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->text(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SendRemoteUser_Req::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 uid = 1;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->uid());
    }
    
    // required int32 cmd = 2;
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cmd());
    }
    
    // required string text = 3;
    if (has_text()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->text());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void SendRemoteUser_Req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SendRemoteUser_Req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SendRemoteUser_Req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SendRemoteUser_Req::MergeFrom(const SendRemoteUser_Req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_uid(from.uid());
    }
    if (from._has_bit(1)) {
      set_cmd(from.cmd());
    }
    if (from._has_bit(2)) {
      set_text(from.text());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SendRemoteUser_Req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SendRemoteUser_Req::CopyFrom(const SendRemoteUser_Req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SendRemoteUser_Req::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  
  return true;
}

void SendRemoteUser_Req::Swap(SendRemoteUser_Req* other) {
  if (other != this) {
    std::swap(uid_, other->uid_);
    std::swap(cmd_, other->cmd_);
    std::swap(text_, other->text_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SendRemoteUser_Req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SendRemoteUser_Req_descriptor_;
  metadata.reflection = SendRemoteUser_Req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int WG_UserLeave::kFdFieldNumber;
#endif  // !_MSC_VER

WG_UserLeave::WG_UserLeave() {
  SharedCtor();
}

void WG_UserLeave::InitAsDefaultInstance() {
}

WG_UserLeave::WG_UserLeave(const WG_UserLeave& from) {
  SharedCtor();
  MergeFrom(from);
}

void WG_UserLeave::SharedCtor() {
  _cached_size_ = 0;
  fd_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

WG_UserLeave::~WG_UserLeave() {
  SharedDtor();
}

void WG_UserLeave::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* WG_UserLeave::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WG_UserLeave_descriptor_;
}

const WG_UserLeave& WG_UserLeave::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_event_5fsub_2eproto();  return *default_instance_;
}

WG_UserLeave* WG_UserLeave::default_instance_ = NULL;

WG_UserLeave* WG_UserLeave::New() const {
  return new WG_UserLeave;
}

void WG_UserLeave::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    fd_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool WG_UserLeave::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 fd = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &fd_));
        _set_bit(0);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void WG_UserLeave::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    WG_UserLeave::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // required int32 fd = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->fd(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* WG_UserLeave::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 fd = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->fd(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int WG_UserLeave::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 fd = 1;
    if (has_fd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->fd());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void WG_UserLeave::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const WG_UserLeave* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const WG_UserLeave*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void WG_UserLeave::MergeFrom(const WG_UserLeave& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_fd(from.fd());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void WG_UserLeave::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WG_UserLeave::CopyFrom(const WG_UserLeave& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WG_UserLeave::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void WG_UserLeave::Swap(WG_UserLeave* other) {
  if (other != this) {
    std::swap(fd_, other->fd_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata WG_UserLeave::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = WG_UserLeave_descriptor_;
  metadata.reflection = WG_UserLeave_reflection_;
  return metadata;
}


// ===================================================================

const ::std::string GWG_FriendRequest::_default_platid_;
#ifndef _MSC_VER
const int GWG_FriendRequest::kTuidFieldNumber;
const int GWG_FriendRequest::kRetFieldNumber;
const int GWG_FriendRequest::kInfoFieldNumber;
const int GWG_FriendRequest::kPlatTypeFieldNumber;
const int GWG_FriendRequest::kPlatidFieldNumber;
const int GWG_FriendRequest::kIsPlatFriendFieldNumber;
const int GWG_FriendRequest::kRegionFieldNumber;
#endif  // !_MSC_VER

GWG_FriendRequest::GWG_FriendRequest() {
  SharedCtor();
}

void GWG_FriendRequest::InitAsDefaultInstance() {
  info_ = const_cast< ::FriendInfoLite*>(&::FriendInfoLite::default_instance());
}

GWG_FriendRequest::GWG_FriendRequest(const GWG_FriendRequest& from) {
  SharedCtor();
  MergeFrom(from);
}

void GWG_FriendRequest::SharedCtor() {
  _cached_size_ = 0;
  tuid_ = GOOGLE_LONGLONG(-1);
  ret_ = false;
  info_ = NULL;
  plat_type_ = 0;
  platid_ = const_cast< ::std::string*>(&_default_platid_);
  is_plat_friend_ = true;
  region_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GWG_FriendRequest::~GWG_FriendRequest() {
  SharedDtor();
}

void GWG_FriendRequest::SharedDtor() {
  if (platid_ != &_default_platid_) {
    delete platid_;
  }
  if (this != default_instance_) {
    delete info_;
  }
}

const ::google::protobuf::Descriptor* GWG_FriendRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GWG_FriendRequest_descriptor_;
}

const GWG_FriendRequest& GWG_FriendRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_event_5fsub_2eproto();  return *default_instance_;
}

GWG_FriendRequest* GWG_FriendRequest::default_instance_ = NULL;

GWG_FriendRequest* GWG_FriendRequest::New() const {
  return new GWG_FriendRequest;
}

void GWG_FriendRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    tuid_ = GOOGLE_LONGLONG(-1);
    ret_ = false;
    if (_has_bit(2)) {
      if (info_ != NULL) info_->::FriendInfoLite::Clear();
    }
    plat_type_ = 0;
    if (_has_bit(4)) {
      if (platid_ != &_default_platid_) {
        platid_->clear();
      }
    }
    is_plat_friend_ = true;
    region_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GWG_FriendRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 tuid = 1 [default = -1];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt64(
              input, &tuid_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_ret;
        break;
      }
      
      // optional bool ret = 2 [default = false];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_ret:
        DO_(::google::protobuf::internal::WireFormatLite::ReadBool(
              input, &ret_));
        _set_bit(1);
        if (input->ExpectTag(26)) goto parse_info;
        break;
      }
      
      // optional .FriendInfoLite info = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_info:
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
             input, mutable_info()));
        if (input->ExpectTag(32)) goto parse_plat_type;
        break;
      }
      
      // optional int32 plat_type = 4 [default = 0];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_plat_type:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &plat_type_));
        _set_bit(3);
        if (input->ExpectTag(42)) goto parse_platid;
        break;
      }
      
      // optional string platid = 5 [default = ""];
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_platid:
        DO_(::google::protobuf::internal::WireFormatLite::ReadString(
              input, this->mutable_platid()));
        ::google::protobuf::internal::WireFormat::VerifyUTF8String(
          this->platid().data(), this->platid().length(),
          ::google::protobuf::internal::WireFormat::PARSE);
        if (input->ExpectTag(48)) goto parse_is_plat_friend;
        break;
      }
      
      // optional bool is_plat_friend = 6 [default = true];
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_is_plat_friend:
        DO_(::google::protobuf::internal::WireFormatLite::ReadBool(
              input, &is_plat_friend_));
        _set_bit(5);
        if (input->ExpectTag(56)) goto parse_region;
        break;
      }
      
      // optional int32 region = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_region:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &region_));
        _set_bit(6);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GWG_FriendRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    GWG_FriendRequest::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional int64 tuid = 1 [default = -1];
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->tuid(), output);
  }
  
  // optional bool ret = 2 [default = false];
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->ret(), output);
  }
  
  // optional .FriendInfoLite info = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      3, this->info(), output);
  }
  
  // optional int32 plat_type = 4 [default = 0];
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->plat_type(), output);
  }
  
  // optional string platid = 5 [default = ""];
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->platid().data(), this->platid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->platid(), output);
  }
  
  // optional bool is_plat_friend = 6 [default = true];
  if (_has_bit(5)) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->is_plat_friend(), output);
  }
  
  // optional int32 region = 7;
  if (_has_bit(6)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->region(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GWG_FriendRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int64 tuid = 1 [default = -1];
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->tuid(), target);
  }
  
  // optional bool ret = 2 [default = false];
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->ret(), target);
  }
  
  // optional .FriendInfoLite info = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->info(), target);
  }
  
  // optional int32 plat_type = 4 [default = 0];
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->plat_type(), target);
  }
  
  // optional string platid = 5 [default = ""];
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->platid().data(), this->platid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->platid(), target);
  }
  
  // optional bool is_plat_friend = 6 [default = true];
  if (_has_bit(5)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->is_plat_friend(), target);
  }
  
  // optional int32 region = 7;
  if (_has_bit(6)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->region(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GWG_FriendRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 tuid = 1 [default = -1];
    if (has_tuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->tuid());
    }
    
    // optional bool ret = 2 [default = false];
    if (has_ret()) {
      total_size += 1 + 1;
    }
    
    // optional .FriendInfoLite info = 3;
    if (has_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->info());
    }
    
    // optional int32 plat_type = 4 [default = 0];
    if (has_plat_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->plat_type());
    }
    
    // optional string platid = 5 [default = ""];
    if (has_platid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->platid());
    }
    
    // optional bool is_plat_friend = 6 [default = true];
    if (has_is_plat_friend()) {
      total_size += 1 + 1;
    }
    
    // optional int32 region = 7;
    if (has_region()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->region());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void GWG_FriendRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GWG_FriendRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GWG_FriendRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GWG_FriendRequest::MergeFrom(const GWG_FriendRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_tuid(from.tuid());
    }
    if (from._has_bit(1)) {
      set_ret(from.ret());
    }
    if (from._has_bit(2)) {
      mutable_info()->::FriendInfoLite::MergeFrom(from.info());
    }
    if (from._has_bit(3)) {
      set_plat_type(from.plat_type());
    }
    if (from._has_bit(4)) {
      set_platid(from.platid());
    }
    if (from._has_bit(5)) {
      set_is_plat_friend(from.is_plat_friend());
    }
    if (from._has_bit(6)) {
      set_region(from.region());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GWG_FriendRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GWG_FriendRequest::CopyFrom(const GWG_FriendRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GWG_FriendRequest::IsInitialized() const {
  
  if (has_info()) {
    if (!this->info().IsInitialized()) return false;
  }
  return true;
}

void GWG_FriendRequest::Swap(GWG_FriendRequest* other) {
  if (other != this) {
    std::swap(tuid_, other->tuid_);
    std::swap(ret_, other->ret_);
    std::swap(info_, other->info_);
    std::swap(plat_type_, other->plat_type_);
    std::swap(platid_, other->platid_);
    std::swap(is_plat_friend_, other->is_plat_friend_);
    std::swap(region_, other->region_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GWG_FriendRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GWG_FriendRequest_descriptor_;
  metadata.reflection = GWG_FriendRequest_reflection_;
  return metadata;
}


// ===================================================================

const ::std::string ForwardInfo::_default_platid_("0");
#ifndef _MSC_VER
const int ForwardInfo::kUidFieldNumber;
const int ForwardInfo::kPlatidFieldNumber;
#endif  // !_MSC_VER

ForwardInfo::ForwardInfo() {
  SharedCtor();
}

void ForwardInfo::InitAsDefaultInstance() {
}

ForwardInfo::ForwardInfo(const ForwardInfo& from) {
  SharedCtor();
  MergeFrom(from);
}

void ForwardInfo::SharedCtor() {
  _cached_size_ = 0;
  uid_ = GOOGLE_LONGLONG(-1);
  platid_ = const_cast< ::std::string*>(&_default_platid_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ForwardInfo::~ForwardInfo() {
  SharedDtor();
}

void ForwardInfo::SharedDtor() {
  if (platid_ != &_default_platid_) {
    delete platid_;
  }
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* ForwardInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ForwardInfo_descriptor_;
}

const ForwardInfo& ForwardInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_event_5fsub_2eproto();  return *default_instance_;
}

ForwardInfo* ForwardInfo::default_instance_ = NULL;

ForwardInfo* ForwardInfo::New() const {
  return new ForwardInfo;
}

void ForwardInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    uid_ = GOOGLE_LONGLONG(-1);
    if (_has_bit(1)) {
      if (platid_ != &_default_platid_) {
        platid_->assign(_default_platid_);
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ForwardInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 uid = 1 [default = -1];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt64(
              input, &uid_));
        _set_bit(0);
        if (input->ExpectTag(18)) goto parse_platid;
        break;
      }
      
      // optional string platid = 2 [default = "0"];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_platid:
        DO_(::google::protobuf::internal::WireFormatLite::ReadString(
              input, this->mutable_platid()));
        ::google::protobuf::internal::WireFormat::VerifyUTF8String(
          this->platid().data(), this->platid().length(),
          ::google::protobuf::internal::WireFormat::PARSE);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ForwardInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    ForwardInfo::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional int64 uid = 1 [default = -1];
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->uid(), output);
  }
  
  // optional string platid = 2 [default = "0"];
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->platid().data(), this->platid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->platid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ForwardInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int64 uid = 1 [default = -1];
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->uid(), target);
  }
  
  // optional string platid = 2 [default = "0"];
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->platid().data(), this->platid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->platid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ForwardInfo::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 uid = 1 [default = -1];
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->uid());
    }
    
    // optional string platid = 2 [default = "0"];
    if (has_platid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->platid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void ForwardInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ForwardInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ForwardInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ForwardInfo::MergeFrom(const ForwardInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_uid(from.uid());
    }
    if (from._has_bit(1)) {
      set_platid(from.platid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ForwardInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ForwardInfo::CopyFrom(const ForwardInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ForwardInfo::IsInitialized() const {
  
  return true;
}

void ForwardInfo::Swap(ForwardInfo* other) {
  if (other != this) {
    std::swap(uid_, other->uid_);
    std::swap(platid_, other->platid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ForwardInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ForwardInfo_descriptor_;
  metadata.reflection = ForwardInfo_reflection_;
  return metadata;
}


// ===================================================================

const ::std::string WebGetRegion::_default_openid_;
const ::std::string WebGetRegion::_default_sid_;
#ifndef _MSC_VER
const int WebGetRegion::kOpenidFieldNumber;
const int WebGetRegion::kFdFieldNumber;
const int WebGetRegion::kSrvRegionFieldNumber;
const int WebGetRegion::kLastregionFieldNumber;
const int WebGetRegion::kSidFieldNumber;
#endif  // !_MSC_VER

WebGetRegion::WebGetRegion() {
  SharedCtor();
}

void WebGetRegion::InitAsDefaultInstance() {
}

WebGetRegion::WebGetRegion(const WebGetRegion& from) {
  SharedCtor();
  MergeFrom(from);
}

void WebGetRegion::SharedCtor() {
  _cached_size_ = 0;
  openid_ = const_cast< ::std::string*>(&_default_openid_);
  fd_ = 0;
  lastregion_ = 0;
  sid_ = const_cast< ::std::string*>(&_default_sid_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

WebGetRegion::~WebGetRegion() {
  SharedDtor();
}

void WebGetRegion::SharedDtor() {
  if (openid_ != &_default_openid_) {
    delete openid_;
  }
  if (sid_ != &_default_sid_) {
    delete sid_;
  }
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* WebGetRegion::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WebGetRegion_descriptor_;
}

const WebGetRegion& WebGetRegion::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_event_5fsub_2eproto();  return *default_instance_;
}

WebGetRegion* WebGetRegion::default_instance_ = NULL;

WebGetRegion* WebGetRegion::New() const {
  return new WebGetRegion;
}

void WebGetRegion::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (openid_ != &_default_openid_) {
        openid_->clear();
      }
    }
    fd_ = 0;
    lastregion_ = 0;
    if (_has_bit(4)) {
      if (sid_ != &_default_sid_) {
        sid_->clear();
      }
    }
  }
  srvregion_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool WebGetRegion::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string openid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadString(
              input, this->mutable_openid()));
        ::google::protobuf::internal::WireFormat::VerifyUTF8String(
          this->openid().data(), this->openid().length(),
          ::google::protobuf::internal::WireFormat::PARSE);
        if (input->ExpectTag(16)) goto parse_fd;
        break;
      }
      
      // required int32 fd = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_fd:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &fd_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_srvRegion;
        break;
      }
      
      // repeated int32 srvRegion = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_srvRegion:
        ::google::protobuf::int32 value;
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &value));
        add_srvregion(value);
        if (input->ExpectTag(24)) goto parse_srvRegion;
        if (input->ExpectTag(32)) goto parse_lastregion;
        break;
      }
      
      // optional int32 lastregion = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_lastregion:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &lastregion_));
        _set_bit(3);
        if (input->ExpectTag(42)) goto parse_sid;
        break;
      }
      
      // required string sid = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_sid:
        DO_(::google::protobuf::internal::WireFormatLite::ReadString(
              input, this->mutable_sid()));
        ::google::protobuf::internal::WireFormat::VerifyUTF8String(
          this->sid().data(), this->sid().length(),
          ::google::protobuf::internal::WireFormat::PARSE);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void WebGetRegion::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    WebGetRegion::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // required string openid = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->openid().data(), this->openid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->openid(), output);
  }
  
  // required int32 fd = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->fd(), output);
  }
  
  // repeated int32 srvRegion = 3;
  for (int i = 0; i < this->srvregion_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      3, this->srvregion(i), output);
  }
  
  // optional int32 lastregion = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->lastregion(), output);
  }
  
  // required string sid = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->sid().data(), this->sid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->sid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* WebGetRegion::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string openid = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->openid().data(), this->openid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->openid(), target);
  }
  
  // required int32 fd = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->fd(), target);
  }
  
  // repeated int32 srvRegion = 3;
  for (int i = 0; i < this->srvregion_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(3, this->srvregion(i), target);
  }
  
  // optional int32 lastregion = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->lastregion(), target);
  }
  
  // required string sid = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->sid().data(), this->sid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->sid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int WebGetRegion::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string openid = 1;
    if (has_openid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->openid());
    }
    
    // required int32 fd = 2;
    if (has_fd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->fd());
    }
    
    // optional int32 lastregion = 4;
    if (has_lastregion()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->lastregion());
    }
    
    // required string sid = 5;
    if (has_sid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->sid());
    }
    
  }
  // repeated int32 srvRegion = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->srvregion_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->srvregion(i));
    }
    total_size += 1 * this->srvregion_size() + data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void WebGetRegion::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const WebGetRegion* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const WebGetRegion*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void WebGetRegion::MergeFrom(const WebGetRegion& from) {
  GOOGLE_CHECK_NE(&from, this);
  srvregion_.MergeFrom(from.srvregion_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_openid(from.openid());
    }
    if (from._has_bit(1)) {
      set_fd(from.fd());
    }
    if (from._has_bit(3)) {
      set_lastregion(from.lastregion());
    }
    if (from._has_bit(4)) {
      set_sid(from.sid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void WebGetRegion::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WebGetRegion::CopyFrom(const WebGetRegion& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WebGetRegion::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000013) != 0x00000013) return false;
  
  return true;
}

void WebGetRegion::Swap(WebGetRegion* other) {
  if (other != this) {
    std::swap(openid_, other->openid_);
    std::swap(fd_, other->fd_);
    srvregion_.Swap(&other->srvregion_);
    std::swap(lastregion_, other->lastregion_);
    std::swap(sid_, other->sid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata WebGetRegion::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = WebGetRegion_descriptor_;
  metadata.reflection = WebGetRegion_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GCG_CountryNeed::kCountrySrvIDFieldNumber;
const int GCG_CountryNeed::kRegionFieldNumber;
const int GCG_CountryNeed::kGameSrvIDFieldNumber;
#endif  // !_MSC_VER

GCG_CountryNeed::GCG_CountryNeed() {
  SharedCtor();
}

void GCG_CountryNeed::InitAsDefaultInstance() {
}

GCG_CountryNeed::GCG_CountryNeed(const GCG_CountryNeed& from) {
  SharedCtor();
  MergeFrom(from);
}

void GCG_CountryNeed::SharedCtor() {
  _cached_size_ = 0;
  countrysrvid_ = 0;
  region_ = 0;
  gamesrvid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GCG_CountryNeed::~GCG_CountryNeed() {
  SharedDtor();
}

void GCG_CountryNeed::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* GCG_CountryNeed::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GCG_CountryNeed_descriptor_;
}

const GCG_CountryNeed& GCG_CountryNeed::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_event_5fsub_2eproto();  return *default_instance_;
}

GCG_CountryNeed* GCG_CountryNeed::default_instance_ = NULL;

GCG_CountryNeed* GCG_CountryNeed::New() const {
  return new GCG_CountryNeed;
}

void GCG_CountryNeed::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    countrysrvid_ = 0;
    region_ = 0;
    gamesrvid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GCG_CountryNeed::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 countrySrvID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &countrysrvid_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_region;
        break;
      }
      
      // optional int32 region = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_region:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &region_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_gameSrvID;
        break;
      }
      
      // optional int32 gameSrvID = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_gameSrvID:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &gamesrvid_));
        _set_bit(2);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GCG_CountryNeed::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    GCG_CountryNeed::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional int32 countrySrvID = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->countrysrvid(), output);
  }
  
  // optional int32 region = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->region(), output);
  }
  
  // optional int32 gameSrvID = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->gamesrvid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GCG_CountryNeed::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 countrySrvID = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->countrysrvid(), target);
  }
  
  // optional int32 region = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->region(), target);
  }
  
  // optional int32 gameSrvID = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->gamesrvid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GCG_CountryNeed::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 countrySrvID = 1;
    if (has_countrysrvid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->countrysrvid());
    }
    
    // optional int32 region = 2;
    if (has_region()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->region());
    }
    
    // optional int32 gameSrvID = 3;
    if (has_gamesrvid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gamesrvid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void GCG_CountryNeed::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GCG_CountryNeed* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GCG_CountryNeed*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GCG_CountryNeed::MergeFrom(const GCG_CountryNeed& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_countrysrvid(from.countrysrvid());
    }
    if (from._has_bit(1)) {
      set_region(from.region());
    }
    if (from._has_bit(2)) {
      set_gamesrvid(from.gamesrvid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GCG_CountryNeed::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GCG_CountryNeed::CopyFrom(const GCG_CountryNeed& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCG_CountryNeed::IsInitialized() const {
  
  return true;
}

void GCG_CountryNeed::Swap(GCG_CountryNeed* other) {
  if (other != this) {
    std::swap(countrysrvid_, other->countrysrvid_);
    std::swap(region_, other->region_);
    std::swap(gamesrvid_, other->gamesrvid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GCG_CountryNeed::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GCG_CountryNeed_descriptor_;
  metadata.reflection = GCG_CountryNeed_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GRG_RegionNeed::kRegionSrvIDFieldNumber;
const int GRG_RegionNeed::kRegionFieldNumber;
const int GRG_RegionNeed::kGameSrvIDFieldNumber;
#endif  // !_MSC_VER

GRG_RegionNeed::GRG_RegionNeed() {
  SharedCtor();
}

void GRG_RegionNeed::InitAsDefaultInstance() {
}

GRG_RegionNeed::GRG_RegionNeed(const GRG_RegionNeed& from) {
  SharedCtor();
  MergeFrom(from);
}

void GRG_RegionNeed::SharedCtor() {
  _cached_size_ = 0;
  regionsrvid_ = 0;
  region_ = 0;
  gamesrvid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GRG_RegionNeed::~GRG_RegionNeed() {
  SharedDtor();
}

void GRG_RegionNeed::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* GRG_RegionNeed::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GRG_RegionNeed_descriptor_;
}

const GRG_RegionNeed& GRG_RegionNeed::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_event_5fsub_2eproto();  return *default_instance_;
}

GRG_RegionNeed* GRG_RegionNeed::default_instance_ = NULL;

GRG_RegionNeed* GRG_RegionNeed::New() const {
  return new GRG_RegionNeed;
}

void GRG_RegionNeed::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    regionsrvid_ = 0;
    region_ = 0;
    gamesrvid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GRG_RegionNeed::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 regionSrvID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &regionsrvid_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_region;
        break;
      }
      
      // optional int32 region = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_region:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &region_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_gameSrvID;
        break;
      }
      
      // optional int32 gameSrvID = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_gameSrvID:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &gamesrvid_));
        _set_bit(2);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GRG_RegionNeed::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    GRG_RegionNeed::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional int32 regionSrvID = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->regionsrvid(), output);
  }
  
  // optional int32 region = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->region(), output);
  }
  
  // optional int32 gameSrvID = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->gamesrvid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GRG_RegionNeed::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 regionSrvID = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->regionsrvid(), target);
  }
  
  // optional int32 region = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->region(), target);
  }
  
  // optional int32 gameSrvID = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->gamesrvid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GRG_RegionNeed::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 regionSrvID = 1;
    if (has_regionsrvid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->regionsrvid());
    }
    
    // optional int32 region = 2;
    if (has_region()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->region());
    }
    
    // optional int32 gameSrvID = 3;
    if (has_gamesrvid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gamesrvid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void GRG_RegionNeed::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GRG_RegionNeed* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GRG_RegionNeed*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GRG_RegionNeed::MergeFrom(const GRG_RegionNeed& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_regionsrvid(from.regionsrvid());
    }
    if (from._has_bit(1)) {
      set_region(from.region());
    }
    if (from._has_bit(2)) {
      set_gamesrvid(from.gamesrvid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GRG_RegionNeed::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GRG_RegionNeed::CopyFrom(const GRG_RegionNeed& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GRG_RegionNeed::IsInitialized() const {
  
  return true;
}

void GRG_RegionNeed::Swap(GRG_RegionNeed* other) {
  if (other != this) {
    std::swap(regionsrvid_, other->regionsrvid_);
    std::swap(region_, other->region_);
    std::swap(gamesrvid_, other->gamesrvid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GRG_RegionNeed::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GRG_RegionNeed_descriptor_;
  metadata.reflection = GRG_RegionNeed_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GRG_RankNeed::kRankSrvIDFieldNumber;
const int GRG_RankNeed::kRegionFieldNumber;
const int GRG_RankNeed::kGameSrvIDFieldNumber;
#endif  // !_MSC_VER

GRG_RankNeed::GRG_RankNeed() {
  SharedCtor();
}

void GRG_RankNeed::InitAsDefaultInstance() {
}

GRG_RankNeed::GRG_RankNeed(const GRG_RankNeed& from) {
  SharedCtor();
  MergeFrom(from);
}

void GRG_RankNeed::SharedCtor() {
  _cached_size_ = 0;
  ranksrvid_ = 0;
  region_ = 0;
  gamesrvid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GRG_RankNeed::~GRG_RankNeed() {
  SharedDtor();
}

void GRG_RankNeed::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* GRG_RankNeed::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GRG_RankNeed_descriptor_;
}

const GRG_RankNeed& GRG_RankNeed::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_event_5fsub_2eproto();  return *default_instance_;
}

GRG_RankNeed* GRG_RankNeed::default_instance_ = NULL;

GRG_RankNeed* GRG_RankNeed::New() const {
  return new GRG_RankNeed;
}

void GRG_RankNeed::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ranksrvid_ = 0;
    region_ = 0;
    gamesrvid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GRG_RankNeed::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 rankSrvID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &ranksrvid_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_region;
        break;
      }
      
      // optional int32 region = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_region:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &region_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_gameSrvID;
        break;
      }
      
      // optional int32 gameSrvID = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_gameSrvID:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &gamesrvid_));
        _set_bit(2);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GRG_RankNeed::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    GRG_RankNeed::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional int32 rankSrvID = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ranksrvid(), output);
  }
  
  // optional int32 region = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->region(), output);
  }
  
  // optional int32 gameSrvID = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->gamesrvid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GRG_RankNeed::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 rankSrvID = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ranksrvid(), target);
  }
  
  // optional int32 region = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->region(), target);
  }
  
  // optional int32 gameSrvID = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->gamesrvid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GRG_RankNeed::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 rankSrvID = 1;
    if (has_ranksrvid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ranksrvid());
    }
    
    // optional int32 region = 2;
    if (has_region()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->region());
    }
    
    // optional int32 gameSrvID = 3;
    if (has_gamesrvid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gamesrvid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void GRG_RankNeed::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GRG_RankNeed* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GRG_RankNeed*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GRG_RankNeed::MergeFrom(const GRG_RankNeed& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_ranksrvid(from.ranksrvid());
    }
    if (from._has_bit(1)) {
      set_region(from.region());
    }
    if (from._has_bit(2)) {
      set_gamesrvid(from.gamesrvid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GRG_RankNeed::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GRG_RankNeed::CopyFrom(const GRG_RankNeed& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GRG_RankNeed::IsInitialized() const {
  
  return true;
}

void GRG_RankNeed::Swap(GRG_RankNeed* other) {
  if (other != this) {
    std::swap(ranksrvid_, other->ranksrvid_);
    std::swap(region_, other->region_);
    std::swap(gamesrvid_, other->gamesrvid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GRG_RankNeed::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GRG_RankNeed_descriptor_;
  metadata.reflection = GRG_RankNeed_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GSG_StatNeed::kStatSrvIDFieldNumber;
const int GSG_StatNeed::kRegionFieldNumber;
const int GSG_StatNeed::kGameSrvIDFieldNumber;
#endif  // !_MSC_VER

GSG_StatNeed::GSG_StatNeed() {
  SharedCtor();
}

void GSG_StatNeed::InitAsDefaultInstance() {
}

GSG_StatNeed::GSG_StatNeed(const GSG_StatNeed& from) {
  SharedCtor();
  MergeFrom(from);
}

void GSG_StatNeed::SharedCtor() {
  _cached_size_ = 0;
  statsrvid_ = 0;
  region_ = 0;
  gamesrvid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GSG_StatNeed::~GSG_StatNeed() {
  SharedDtor();
}

void GSG_StatNeed::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* GSG_StatNeed::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GSG_StatNeed_descriptor_;
}

const GSG_StatNeed& GSG_StatNeed::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_event_5fsub_2eproto();  return *default_instance_;
}

GSG_StatNeed* GSG_StatNeed::default_instance_ = NULL;

GSG_StatNeed* GSG_StatNeed::New() const {
  return new GSG_StatNeed;
}

void GSG_StatNeed::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    statsrvid_ = 0;
    region_ = 0;
    gamesrvid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GSG_StatNeed::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 statSrvID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &statsrvid_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_region;
        break;
      }
      
      // optional int32 region = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_region:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &region_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_gameSrvID;
        break;
      }
      
      // optional int32 gameSrvID = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_gameSrvID:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &gamesrvid_));
        _set_bit(2);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GSG_StatNeed::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    GSG_StatNeed::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional int32 statSrvID = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->statsrvid(), output);
  }
  
  // optional int32 region = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->region(), output);
  }
  
  // optional int32 gameSrvID = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->gamesrvid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GSG_StatNeed::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 statSrvID = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->statsrvid(), target);
  }
  
  // optional int32 region = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->region(), target);
  }
  
  // optional int32 gameSrvID = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->gamesrvid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GSG_StatNeed::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 statSrvID = 1;
    if (has_statsrvid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->statsrvid());
    }
    
    // optional int32 region = 2;
    if (has_region()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->region());
    }
    
    // optional int32 gameSrvID = 3;
    if (has_gamesrvid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gamesrvid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void GSG_StatNeed::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GSG_StatNeed* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GSG_StatNeed*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GSG_StatNeed::MergeFrom(const GSG_StatNeed& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_statsrvid(from.statsrvid());
    }
    if (from._has_bit(1)) {
      set_region(from.region());
    }
    if (from._has_bit(2)) {
      set_gamesrvid(from.gamesrvid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GSG_StatNeed::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GSG_StatNeed::CopyFrom(const GSG_StatNeed& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GSG_StatNeed::IsInitialized() const {
  
  return true;
}

void GSG_StatNeed::Swap(GSG_StatNeed* other) {
  if (other != this) {
    std::swap(statsrvid_, other->statsrvid_);
    std::swap(region_, other->region_);
    std::swap(gamesrvid_, other->gamesrvid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GSG_StatNeed::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GSG_StatNeed_descriptor_;
  metadata.reflection = GSG_StatNeed_reflection_;
  return metadata;
}


// ===================================================================

const ::std::string HttpAskMsg::_default_szopenid_;
const ::std::string HttpAskMsg::_default_szargvs_;
#ifndef _MSC_VER
const int HttpAskMsg::kSzOpenidFieldNumber;
const int HttpAskMsg::kNUidFieldNumber;
const int HttpAskMsg::kNRegionFieldNumber;
const int HttpAskMsg::kNTypeFieldNumber;
const int HttpAskMsg::kNTypeSecFieldNumber;
const int HttpAskMsg::kSzArgvsFieldNumber;
const int HttpAskMsg::kBToQQFieldNumber;
const int HttpAskMsg::kNUserIPFieldNumber;
const int HttpAskMsg::kNModifyfeeFieldNumber;
const int HttpAskMsg::kNTimeFieldNumber;
#endif  // !_MSC_VER

HttpAskMsg::HttpAskMsg() {
  SharedCtor();
}

void HttpAskMsg::InitAsDefaultInstance() {
}

HttpAskMsg::HttpAskMsg(const HttpAskMsg& from) {
  SharedCtor();
  MergeFrom(from);
}

void HttpAskMsg::SharedCtor() {
  _cached_size_ = 0;
  szopenid_ = const_cast< ::std::string*>(&_default_szopenid_);
  nuid_ = GOOGLE_LONGLONG(0);
  nregion_ = 0;
  ntype_ = 0;
  ntypesec_ = 0;
  szargvs_ = const_cast< ::std::string*>(&_default_szargvs_);
  btoqq_ = false;
  nuserip_ = 0;
  nmodifyfee_ = 0;
  ntime_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

HttpAskMsg::~HttpAskMsg() {
  SharedDtor();
}

void HttpAskMsg::SharedDtor() {
  if (szopenid_ != &_default_szopenid_) {
    delete szopenid_;
  }
  if (szargvs_ != &_default_szargvs_) {
    delete szargvs_;
  }
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* HttpAskMsg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return HttpAskMsg_descriptor_;
}

const HttpAskMsg& HttpAskMsg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_event_5fsub_2eproto();  return *default_instance_;
}

HttpAskMsg* HttpAskMsg::default_instance_ = NULL;

HttpAskMsg* HttpAskMsg::New() const {
  return new HttpAskMsg;
}

void HttpAskMsg::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (szopenid_ != &_default_szopenid_) {
        szopenid_->clear();
      }
    }
    nuid_ = GOOGLE_LONGLONG(0);
    nregion_ = 0;
    ntype_ = 0;
    ntypesec_ = 0;
    if (_has_bit(5)) {
      if (szargvs_ != &_default_szargvs_) {
        szargvs_->clear();
      }
    }
    btoqq_ = false;
    nuserip_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    nmodifyfee_ = 0;
    ntime_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool HttpAskMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string szOpenid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadString(
              input, this->mutable_szopenid()));
        ::google::protobuf::internal::WireFormat::VerifyUTF8String(
          this->szopenid().data(), this->szopenid().length(),
          ::google::protobuf::internal::WireFormat::PARSE);
        if (input->ExpectTag(16)) goto parse_nUid;
        break;
      }
      
      // optional int64 nUid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_nUid:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt64(
              input, &nuid_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_nRegion;
        break;
      }
      
      // optional int32 nRegion = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_nRegion:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &nregion_));
        _set_bit(2);
        if (input->ExpectTag(32)) goto parse_nType;
        break;
      }
      
      // optional int32 nType = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_nType:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &ntype_));
        _set_bit(3);
        if (input->ExpectTag(40)) goto parse_nTypeSec;
        break;
      }
      
      // optional int32 nTypeSec = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_nTypeSec:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &ntypesec_));
        _set_bit(4);
        if (input->ExpectTag(50)) goto parse_szArgvs;
        break;
      }
      
      // optional string szArgvs = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_szArgvs:
        DO_(::google::protobuf::internal::WireFormatLite::ReadString(
              input, this->mutable_szargvs()));
        ::google::protobuf::internal::WireFormat::VerifyUTF8String(
          this->szargvs().data(), this->szargvs().length(),
          ::google::protobuf::internal::WireFormat::PARSE);
        if (input->ExpectTag(56)) goto parse_bToQQ;
        break;
      }
      
      // optional bool bToQQ = 7 [default = false];
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_bToQQ:
        DO_(::google::protobuf::internal::WireFormatLite::ReadBool(
              input, &btoqq_));
        _set_bit(6);
        if (input->ExpectTag(64)) goto parse_nUserIP;
        break;
      }
      
      // optional int32 nUserIP = 8 [default = 0];
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_nUserIP:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &nuserip_));
        _set_bit(7);
        if (input->ExpectTag(72)) goto parse_nModifyfee;
        break;
      }
      
      // optional int32 nModifyfee = 9 [default = 0];
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_nModifyfee:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &nmodifyfee_));
        _set_bit(8);
        if (input->ExpectTag(80)) goto parse_nTime;
        break;
      }
      
      // optional int32 nTime = 10 [default = 0];
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_nTime:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &ntime_));
        _set_bit(9);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void HttpAskMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    HttpAskMsg::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional string szOpenid = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->szopenid().data(), this->szopenid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->szopenid(), output);
  }
  
  // optional int64 nUid = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->nuid(), output);
  }
  
  // optional int32 nRegion = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->nregion(), output);
  }
  
  // optional int32 nType = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->ntype(), output);
  }
  
  // optional int32 nTypeSec = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->ntypesec(), output);
  }
  
  // optional string szArgvs = 6;
  if (_has_bit(5)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->szargvs().data(), this->szargvs().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->szargvs(), output);
  }
  
  // optional bool bToQQ = 7 [default = false];
  if (_has_bit(6)) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->btoqq(), output);
  }
  
  // optional int32 nUserIP = 8 [default = 0];
  if (_has_bit(7)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->nuserip(), output);
  }
  
  // optional int32 nModifyfee = 9 [default = 0];
  if (_has_bit(8)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->nmodifyfee(), output);
  }
  
  // optional int32 nTime = 10 [default = 0];
  if (_has_bit(9)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->ntime(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* HttpAskMsg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string szOpenid = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->szopenid().data(), this->szopenid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->szopenid(), target);
  }
  
  // optional int64 nUid = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->nuid(), target);
  }
  
  // optional int32 nRegion = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->nregion(), target);
  }
  
  // optional int32 nType = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->ntype(), target);
  }
  
  // optional int32 nTypeSec = 5;
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->ntypesec(), target);
  }
  
  // optional string szArgvs = 6;
  if (_has_bit(5)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->szargvs().data(), this->szargvs().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->szargvs(), target);
  }
  
  // optional bool bToQQ = 7 [default = false];
  if (_has_bit(6)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->btoqq(), target);
  }
  
  // optional int32 nUserIP = 8 [default = 0];
  if (_has_bit(7)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->nuserip(), target);
  }
  
  // optional int32 nModifyfee = 9 [default = 0];
  if (_has_bit(8)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->nmodifyfee(), target);
  }
  
  // optional int32 nTime = 10 [default = 0];
  if (_has_bit(9)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->ntime(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int HttpAskMsg::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string szOpenid = 1;
    if (has_szopenid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->szopenid());
    }
    
    // optional int64 nUid = 2;
    if (has_nuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->nuid());
    }
    
    // optional int32 nRegion = 3;
    if (has_nregion()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->nregion());
    }
    
    // optional int32 nType = 4;
    if (has_ntype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ntype());
    }
    
    // optional int32 nTypeSec = 5;
    if (has_ntypesec()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ntypesec());
    }
    
    // optional string szArgvs = 6;
    if (has_szargvs()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->szargvs());
    }
    
    // optional bool bToQQ = 7 [default = false];
    if (has_btoqq()) {
      total_size += 1 + 1;
    }
    
    // optional int32 nUserIP = 8 [default = 0];
    if (has_nuserip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->nuserip());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 nModifyfee = 9 [default = 0];
    if (has_nmodifyfee()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->nmodifyfee());
    }
    
    // optional int32 nTime = 10 [default = 0];
    if (has_ntime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ntime());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void HttpAskMsg::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const HttpAskMsg* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const HttpAskMsg*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void HttpAskMsg::MergeFrom(const HttpAskMsg& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_szopenid(from.szopenid());
    }
    if (from._has_bit(1)) {
      set_nuid(from.nuid());
    }
    if (from._has_bit(2)) {
      set_nregion(from.nregion());
    }
    if (from._has_bit(3)) {
      set_ntype(from.ntype());
    }
    if (from._has_bit(4)) {
      set_ntypesec(from.ntypesec());
    }
    if (from._has_bit(5)) {
      set_szargvs(from.szargvs());
    }
    if (from._has_bit(6)) {
      set_btoqq(from.btoqq());
    }
    if (from._has_bit(7)) {
      set_nuserip(from.nuserip());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from._has_bit(8)) {
      set_nmodifyfee(from.nmodifyfee());
    }
    if (from._has_bit(9)) {
      set_ntime(from.ntime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void HttpAskMsg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HttpAskMsg::CopyFrom(const HttpAskMsg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HttpAskMsg::IsInitialized() const {
  
  return true;
}

void HttpAskMsg::Swap(HttpAskMsg* other) {
  if (other != this) {
    std::swap(szopenid_, other->szopenid_);
    std::swap(nuid_, other->nuid_);
    std::swap(nregion_, other->nregion_);
    std::swap(ntype_, other->ntype_);
    std::swap(ntypesec_, other->ntypesec_);
    std::swap(szargvs_, other->szargvs_);
    std::swap(btoqq_, other->btoqq_);
    std::swap(nuserip_, other->nuserip_);
    std::swap(nmodifyfee_, other->nmodifyfee_);
    std::swap(ntime_, other->ntime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata HttpAskMsg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = HttpAskMsg_descriptor_;
  metadata.reflection = HttpAskMsg_reflection_;
  return metadata;
}


// ===================================================================

const ::std::string HttpAnswerMsg::_default_szopenid_;
const ::std::string HttpAnswerMsg::_default_szanswer_;
#ifndef _MSC_VER
const int HttpAnswerMsg::kSzOpenidFieldNumber;
const int HttpAnswerMsg::kNUidFieldNumber;
const int HttpAnswerMsg::kNRegionFieldNumber;
const int HttpAnswerMsg::kNTypeFieldNumber;
const int HttpAnswerMsg::kNTypeSecFieldNumber;
const int HttpAnswerMsg::kSzAnswerFieldNumber;
#endif  // !_MSC_VER

HttpAnswerMsg::HttpAnswerMsg() {
  SharedCtor();
}

void HttpAnswerMsg::InitAsDefaultInstance() {
}

HttpAnswerMsg::HttpAnswerMsg(const HttpAnswerMsg& from) {
  SharedCtor();
  MergeFrom(from);
}

void HttpAnswerMsg::SharedCtor() {
  _cached_size_ = 0;
  szopenid_ = const_cast< ::std::string*>(&_default_szopenid_);
  nuid_ = GOOGLE_LONGLONG(0);
  nregion_ = 0;
  ntype_ = 0;
  ntypesec_ = 0;
  szanswer_ = const_cast< ::std::string*>(&_default_szanswer_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

HttpAnswerMsg::~HttpAnswerMsg() {
  SharedDtor();
}

void HttpAnswerMsg::SharedDtor() {
  if (szopenid_ != &_default_szopenid_) {
    delete szopenid_;
  }
  if (szanswer_ != &_default_szanswer_) {
    delete szanswer_;
  }
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* HttpAnswerMsg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return HttpAnswerMsg_descriptor_;
}

const HttpAnswerMsg& HttpAnswerMsg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_event_5fsub_2eproto();  return *default_instance_;
}

HttpAnswerMsg* HttpAnswerMsg::default_instance_ = NULL;

HttpAnswerMsg* HttpAnswerMsg::New() const {
  return new HttpAnswerMsg;
}

void HttpAnswerMsg::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (szopenid_ != &_default_szopenid_) {
        szopenid_->clear();
      }
    }
    nuid_ = GOOGLE_LONGLONG(0);
    nregion_ = 0;
    ntype_ = 0;
    ntypesec_ = 0;
    if (_has_bit(5)) {
      if (szanswer_ != &_default_szanswer_) {
        szanswer_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool HttpAnswerMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string szOpenid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadString(
              input, this->mutable_szopenid()));
        ::google::protobuf::internal::WireFormat::VerifyUTF8String(
          this->szopenid().data(), this->szopenid().length(),
          ::google::protobuf::internal::WireFormat::PARSE);
        if (input->ExpectTag(16)) goto parse_nUid;
        break;
      }
      
      // optional int64 nUid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_nUid:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt64(
              input, &nuid_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_nRegion;
        break;
      }
      
      // optional int32 nRegion = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_nRegion:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &nregion_));
        _set_bit(2);
        if (input->ExpectTag(32)) goto parse_nType;
        break;
      }
      
      // optional int32 nType = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_nType:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &ntype_));
        _set_bit(3);
        if (input->ExpectTag(40)) goto parse_nTypeSec;
        break;
      }
      
      // optional int32 nTypeSec = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_nTypeSec:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &ntypesec_));
        _set_bit(4);
        if (input->ExpectTag(50)) goto parse_szAnswer;
        break;
      }
      
      // optional string szAnswer = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_szAnswer:
        DO_(::google::protobuf::internal::WireFormatLite::ReadString(
              input, this->mutable_szanswer()));
        ::google::protobuf::internal::WireFormat::VerifyUTF8String(
          this->szanswer().data(), this->szanswer().length(),
          ::google::protobuf::internal::WireFormat::PARSE);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void HttpAnswerMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    HttpAnswerMsg::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional string szOpenid = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->szopenid().data(), this->szopenid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->szopenid(), output);
  }
  
  // optional int64 nUid = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->nuid(), output);
  }
  
  // optional int32 nRegion = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->nregion(), output);
  }
  
  // optional int32 nType = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->ntype(), output);
  }
  
  // optional int32 nTypeSec = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->ntypesec(), output);
  }
  
  // optional string szAnswer = 6;
  if (_has_bit(5)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->szanswer().data(), this->szanswer().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->szanswer(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* HttpAnswerMsg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string szOpenid = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->szopenid().data(), this->szopenid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->szopenid(), target);
  }
  
  // optional int64 nUid = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->nuid(), target);
  }
  
  // optional int32 nRegion = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->nregion(), target);
  }
  
  // optional int32 nType = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->ntype(), target);
  }
  
  // optional int32 nTypeSec = 5;
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->ntypesec(), target);
  }
  
  // optional string szAnswer = 6;
  if (_has_bit(5)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->szanswer().data(), this->szanswer().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->szanswer(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int HttpAnswerMsg::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string szOpenid = 1;
    if (has_szopenid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->szopenid());
    }
    
    // optional int64 nUid = 2;
    if (has_nuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->nuid());
    }
    
    // optional int32 nRegion = 3;
    if (has_nregion()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->nregion());
    }
    
    // optional int32 nType = 4;
    if (has_ntype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ntype());
    }
    
    // optional int32 nTypeSec = 5;
    if (has_ntypesec()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ntypesec());
    }
    
    // optional string szAnswer = 6;
    if (has_szanswer()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->szanswer());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void HttpAnswerMsg::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const HttpAnswerMsg* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const HttpAnswerMsg*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void HttpAnswerMsg::MergeFrom(const HttpAnswerMsg& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_szopenid(from.szopenid());
    }
    if (from._has_bit(1)) {
      set_nuid(from.nuid());
    }
    if (from._has_bit(2)) {
      set_nregion(from.nregion());
    }
    if (from._has_bit(3)) {
      set_ntype(from.ntype());
    }
    if (from._has_bit(4)) {
      set_ntypesec(from.ntypesec());
    }
    if (from._has_bit(5)) {
      set_szanswer(from.szanswer());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void HttpAnswerMsg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HttpAnswerMsg::CopyFrom(const HttpAnswerMsg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HttpAnswerMsg::IsInitialized() const {
  
  return true;
}

void HttpAnswerMsg::Swap(HttpAnswerMsg* other) {
  if (other != this) {
    std::swap(szopenid_, other->szopenid_);
    std::swap(nuid_, other->nuid_);
    std::swap(nregion_, other->nregion_);
    std::swap(ntype_, other->ntype_);
    std::swap(ntypesec_, other->ntypesec_);
    std::swap(szanswer_, other->szanswer_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata HttpAnswerMsg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = HttpAnswerMsg_descriptor_;
  metadata.reflection = HttpAnswerMsg_reflection_;
  return metadata;
}

