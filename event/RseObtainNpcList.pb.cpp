// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "RseObtainNpcList.pb.h"
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>

namespace {

const ::google::protobuf::Descriptor* MsgNpc_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgNpc_reflection_ = NULL;
const ::google::protobuf::Descriptor* RseObtainNpcList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RseObtainNpcList_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_RseObtainNpcList_2eproto() {
  protobuf_AddDesc_RseObtainNpcList_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "RseObtainNpcList.proto");
  GOOGLE_CHECK(file != NULL);
  MsgNpc_descriptor_ = file->message_type(0);
  static const int MsgNpc_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgNpc, npc_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgNpc, xp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgNpc, hqlevel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgNpc, sku_),
  };
  MsgNpc_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgNpc_descriptor_,
      MsgNpc::default_instance_,
      MsgNpc_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgNpc, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgNpc, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgNpc));
  RseObtainNpcList_descriptor_ = file->message_type(1);
  static const int RseObtainNpcList_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RseObtainNpcList, npclist_),
  };
  RseObtainNpcList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RseObtainNpcList_descriptor_,
      RseObtainNpcList::default_instance_,
      RseObtainNpcList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RseObtainNpcList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RseObtainNpcList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RseObtainNpcList));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_RseObtainNpcList_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgNpc_descriptor_, &MsgNpc::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RseObtainNpcList_descriptor_, &RseObtainNpcList::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_RseObtainNpcList_2eproto() {
  delete MsgNpc::default_instance_;
  delete MsgNpc_reflection_;
  delete RseObtainNpcList::default_instance_;
  delete RseObtainNpcList_reflection_;
}

void protobuf_AddDesc_RseObtainNpcList_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\026RseObtainNpcList.proto\"?\n\006MsgNpc\022\013\n\003np"
    "c\030\001 \003(\t\022\n\n\002xp\030\002 \001(\005\022\017\n\007HQLevel\030\003 \001(\005\022\013\n\003"
    "sku\030\004 \001(\t\",\n\020RseObtainNpcList\022\030\n\007npcList"
    "\030\001 \003(\0132\007.MsgNpc", 135);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "RseObtainNpcList.proto", &protobuf_RegisterTypes);
  MsgNpc::default_instance_ = new MsgNpc();
  RseObtainNpcList::default_instance_ = new RseObtainNpcList();
  MsgNpc::default_instance_->InitAsDefaultInstance();
  RseObtainNpcList::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_RseObtainNpcList_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_RseObtainNpcList_2eproto {
  StaticDescriptorInitializer_RseObtainNpcList_2eproto() {
    protobuf_AddDesc_RseObtainNpcList_2eproto();
  }
} static_descriptor_initializer_RseObtainNpcList_2eproto_;


// ===================================================================

const ::std::string MsgNpc::_default_sku_;
#ifndef _MSC_VER
const int MsgNpc::kNpcFieldNumber;
const int MsgNpc::kXpFieldNumber;
const int MsgNpc::kHQLevelFieldNumber;
const int MsgNpc::kSkuFieldNumber;
#endif  // !_MSC_VER

MsgNpc::MsgNpc() {
  SharedCtor();
}

void MsgNpc::InitAsDefaultInstance() {
}

MsgNpc::MsgNpc(const MsgNpc& from) {
  SharedCtor();
  MergeFrom(from);
}

void MsgNpc::SharedCtor() {
  _cached_size_ = 0;
  xp_ = 0;
  hqlevel_ = 0;
  sku_ = const_cast< ::std::string*>(&_default_sku_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgNpc::~MsgNpc() {
  SharedDtor();
}

void MsgNpc::SharedDtor() {
  if (sku_ != &_default_sku_) {
    delete sku_;
  }
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* MsgNpc::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgNpc_descriptor_;
}

const MsgNpc& MsgNpc::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_RseObtainNpcList_2eproto();  return *default_instance_;
}

MsgNpc* MsgNpc::default_instance_ = NULL;

MsgNpc* MsgNpc::New() const {
  return new MsgNpc;
}

void MsgNpc::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    xp_ = 0;
    hqlevel_ = 0;
    if (_has_bit(3)) {
      if (sku_ != &_default_sku_) {
        sku_->clear();
      }
    }
  }
  npc_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgNpc::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated string npc = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_npc:
        DO_(::google::protobuf::internal::WireFormatLite::ReadString(
              input, this->add_npc()));
        ::google::protobuf::internal::WireFormat::VerifyUTF8String(
          this->npc(0).data(), this->npc(0).length(),
          ::google::protobuf::internal::WireFormat::PARSE);
        if (input->ExpectTag(10)) goto parse_npc;
        if (input->ExpectTag(16)) goto parse_xp;
        break;
      }
      
      // optional int32 xp = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_xp:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &xp_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_HQLevel;
        break;
      }
      
      // optional int32 HQLevel = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_HQLevel:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &hqlevel_));
        _set_bit(2);
        if (input->ExpectTag(34)) goto parse_sku;
        break;
      }
      
      // optional string sku = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_sku:
        DO_(::google::protobuf::internal::WireFormatLite::ReadString(
              input, this->mutable_sku()));
        ::google::protobuf::internal::WireFormat::VerifyUTF8String(
          this->sku().data(), this->sku().length(),
          ::google::protobuf::internal::WireFormat::PARSE);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MsgNpc::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    MsgNpc::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // repeated string npc = 1;
  for (int i = 0; i < this->npc_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->npc(i).data(), this->npc(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->npc(i), output);
  }
  
  // optional int32 xp = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->xp(), output);
  }
  
  // optional int32 HQLevel = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->hqlevel(), output);
  }
  
  // optional string sku = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->sku().data(), this->sku().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->sku(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MsgNpc::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated string npc = 1;
  for (int i = 0; i < this->npc_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->npc(i).data(), this->npc(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(1, this->npc(i), target);
  }
  
  // optional int32 xp = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->xp(), target);
  }
  
  // optional int32 HQLevel = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->hqlevel(), target);
  }
  
  // optional string sku = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->sku().data(), this->sku().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->sku(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MsgNpc::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional int32 xp = 2;
    if (has_xp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->xp());
    }
    
    // optional int32 HQLevel = 3;
    if (has_hqlevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->hqlevel());
    }
    
    // optional string sku = 4;
    if (has_sku()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->sku());
    }
    
  }
  // repeated string npc = 1;
  total_size += 1 * this->npc_size();
  for (int i = 0; i < this->npc_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->npc(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void MsgNpc::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgNpc* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgNpc*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgNpc::MergeFrom(const MsgNpc& from) {
  GOOGLE_CHECK_NE(&from, this);
  npc_.MergeFrom(from.npc_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from._has_bit(1)) {
      set_xp(from.xp());
    }
    if (from._has_bit(2)) {
      set_hqlevel(from.hqlevel());
    }
    if (from._has_bit(3)) {
      set_sku(from.sku());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgNpc::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgNpc::CopyFrom(const MsgNpc& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgNpc::IsInitialized() const {
  
  return true;
}

void MsgNpc::Swap(MsgNpc* other) {
  if (other != this) {
    npc_.Swap(&other->npc_);
    std::swap(xp_, other->xp_);
    std::swap(hqlevel_, other->hqlevel_);
    std::swap(sku_, other->sku_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgNpc::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgNpc_descriptor_;
  metadata.reflection = MsgNpc_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RseObtainNpcList::kNpcListFieldNumber;
#endif  // !_MSC_VER

RseObtainNpcList::RseObtainNpcList() {
  SharedCtor();
}

void RseObtainNpcList::InitAsDefaultInstance() {
}

RseObtainNpcList::RseObtainNpcList(const RseObtainNpcList& from) {
  SharedCtor();
  MergeFrom(from);
}

void RseObtainNpcList::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RseObtainNpcList::~RseObtainNpcList() {
  SharedDtor();
}

void RseObtainNpcList::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* RseObtainNpcList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RseObtainNpcList_descriptor_;
}

const RseObtainNpcList& RseObtainNpcList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_RseObtainNpcList_2eproto();  return *default_instance_;
}

RseObtainNpcList* RseObtainNpcList::default_instance_ = NULL;

RseObtainNpcList* RseObtainNpcList::New() const {
  return new RseObtainNpcList;
}

void RseObtainNpcList::Clear() {
  npclist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RseObtainNpcList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .MsgNpc npcList = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_npcList:
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, add_npclist()));
        if (input->ExpectTag(10)) goto parse_npcList;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RseObtainNpcList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    RseObtainNpcList::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // repeated .MsgNpc npcList = 1;
  for (int i = 0; i < this->npclist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      1, this->npclist(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RseObtainNpcList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .MsgNpc npcList = 1;
  for (int i = 0; i < this->npclist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->npclist(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RseObtainNpcList::ByteSize() const {
  int total_size = 0;
  
  // repeated .MsgNpc npcList = 1;
  total_size += 1 * this->npclist_size();
  for (int i = 0; i < this->npclist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->npclist(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void RseObtainNpcList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RseObtainNpcList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RseObtainNpcList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RseObtainNpcList::MergeFrom(const RseObtainNpcList& from) {
  GOOGLE_CHECK_NE(&from, this);
  npclist_.MergeFrom(from.npclist_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RseObtainNpcList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RseObtainNpcList::CopyFrom(const RseObtainNpcList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RseObtainNpcList::IsInitialized() const {
  
  return true;
}

void RseObtainNpcList::Swap(RseObtainNpcList* other) {
  if (other != this) {
    npclist_.Swap(&other->npclist_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RseObtainNpcList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RseObtainNpcList_descriptor_;
  metadata.reflection = RseObtainNpcList_reflection_;
  return metadata;
}

