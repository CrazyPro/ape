// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "RceDeployUnits.pb.h"
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>

namespace {

const ::google::protobuf::Descriptor* RceDeployUnits_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RceDeployUnits_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_RceDeployUnits_2eproto() {
  protobuf_AddDesc_RceDeployUnits_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "RceDeployUnits.proto");
  GOOGLE_CHECK(file != NULL);
  RceDeployUnits_descriptor_ = file->message_type(0);
  static const int RceDeployUnits_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RceDeployUnits, planetid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RceDeployUnits, x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RceDeployUnits, unitsids_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RceDeployUnits, hangarsid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RceDeployUnits, y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RceDeployUnits, skusd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RceDeployUnits, skue_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RceDeployUnits, millis_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RceDeployUnits, skuswt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RceDeployUnits, unitsskus_),
  };
  RceDeployUnits_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RceDeployUnits_descriptor_,
      RceDeployUnits::default_instance_,
      RceDeployUnits_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RceDeployUnits, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RceDeployUnits, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RceDeployUnits));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_RceDeployUnits_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RceDeployUnits_descriptor_, &RceDeployUnits::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_RceDeployUnits_2eproto() {
  delete RceDeployUnits::default_instance_;
  delete RceDeployUnits_reflection_;
}

void protobuf_AddDesc_RceDeployUnits_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\024RceDeployUnits.proto\"\255\001\n\016RceDeployUnit"
    "s\022\020\n\010planetId\030\001 \001(\005\022\t\n\001x\030\002 \001(\005\022\020\n\010unitsI"
    "ds\030\003 \003(\005\022\021\n\thangarSid\030\004 \001(\005\022\t\n\001y\030\005 \001(\005\022\r"
    "\n\005skuSD\030\006 \003(\005\022\014\n\004skuE\030\007 \003(\005\022\016\n\006millis\030\010 "
    "\001(\005\022\016\n\006skuSWT\030\t \003(\005\022\021\n\tunitsSkus\030\n \003(\t", 198);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "RceDeployUnits.proto", &protobuf_RegisterTypes);
  RceDeployUnits::default_instance_ = new RceDeployUnits();
  RceDeployUnits::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_RceDeployUnits_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_RceDeployUnits_2eproto {
  StaticDescriptorInitializer_RceDeployUnits_2eproto() {
    protobuf_AddDesc_RceDeployUnits_2eproto();
  }
} static_descriptor_initializer_RceDeployUnits_2eproto_;


// ===================================================================

#ifndef _MSC_VER
const int RceDeployUnits::kPlanetIdFieldNumber;
const int RceDeployUnits::kXFieldNumber;
const int RceDeployUnits::kUnitsIdsFieldNumber;
const int RceDeployUnits::kHangarSidFieldNumber;
const int RceDeployUnits::kYFieldNumber;
const int RceDeployUnits::kSkuSDFieldNumber;
const int RceDeployUnits::kSkuEFieldNumber;
const int RceDeployUnits::kMillisFieldNumber;
const int RceDeployUnits::kSkuSWTFieldNumber;
const int RceDeployUnits::kUnitsSkusFieldNumber;
#endif  // !_MSC_VER

RceDeployUnits::RceDeployUnits() {
  SharedCtor();
}

void RceDeployUnits::InitAsDefaultInstance() {
}

RceDeployUnits::RceDeployUnits(const RceDeployUnits& from) {
  SharedCtor();
  MergeFrom(from);
}

void RceDeployUnits::SharedCtor() {
  _cached_size_ = 0;
  planetid_ = 0;
  x_ = 0;
  hangarsid_ = 0;
  y_ = 0;
  millis_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RceDeployUnits::~RceDeployUnits() {
  SharedDtor();
}

void RceDeployUnits::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* RceDeployUnits::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RceDeployUnits_descriptor_;
}

const RceDeployUnits& RceDeployUnits::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_RceDeployUnits_2eproto();  return *default_instance_;
}

RceDeployUnits* RceDeployUnits::default_instance_ = NULL;

RceDeployUnits* RceDeployUnits::New() const {
  return new RceDeployUnits;
}

void RceDeployUnits::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    planetid_ = 0;
    x_ = 0;
    hangarsid_ = 0;
    y_ = 0;
    millis_ = 0;
  }
  unitsids_.Clear();
  skusd_.Clear();
  skue_.Clear();
  skuswt_.Clear();
  unitsskus_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RceDeployUnits::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 planetId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &planetid_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_x;
        break;
      }
      
      // optional int32 x = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_x:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &x_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_unitsIds;
        break;
      }
      
      // repeated int32 unitsIds = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_unitsIds:
        ::google::protobuf::int32 value;
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &value));
        add_unitsids(value);
        if (input->ExpectTag(24)) goto parse_unitsIds;
        if (input->ExpectTag(32)) goto parse_hangarSid;
        break;
      }
      
      // optional int32 hangarSid = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_hangarSid:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &hangarsid_));
        _set_bit(3);
        if (input->ExpectTag(40)) goto parse_y;
        break;
      }
      
      // optional int32 y = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_y:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &y_));
        _set_bit(4);
        if (input->ExpectTag(48)) goto parse_skuSD;
        break;
      }
      
      // repeated int32 skuSD = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_skuSD:
        ::google::protobuf::int32 value;
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &value));
        add_skusd(value);
        if (input->ExpectTag(48)) goto parse_skuSD;
        if (input->ExpectTag(56)) goto parse_skuE;
        break;
      }
      
      // repeated int32 skuE = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_skuE:
        ::google::protobuf::int32 value;
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &value));
        add_skue(value);
        if (input->ExpectTag(56)) goto parse_skuE;
        if (input->ExpectTag(64)) goto parse_millis;
        break;
      }
      
      // optional int32 millis = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_millis:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &millis_));
        _set_bit(7);
        if (input->ExpectTag(72)) goto parse_skuSWT;
        break;
      }
      
      // repeated int32 skuSWT = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_skuSWT:
        ::google::protobuf::int32 value;
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &value));
        add_skuswt(value);
        if (input->ExpectTag(72)) goto parse_skuSWT;
        if (input->ExpectTag(82)) goto parse_unitsSkus;
        break;
      }
      
      // repeated string unitsSkus = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_unitsSkus:
        DO_(::google::protobuf::internal::WireFormatLite::ReadString(
              input, this->add_unitsskus()));
        ::google::protobuf::internal::WireFormat::VerifyUTF8String(
          this->unitsskus(0).data(), this->unitsskus(0).length(),
          ::google::protobuf::internal::WireFormat::PARSE);
        if (input->ExpectTag(82)) goto parse_unitsSkus;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RceDeployUnits::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    RceDeployUnits::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional int32 planetId = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->planetid(), output);
  }
  
  // optional int32 x = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->x(), output);
  }
  
  // repeated int32 unitsIds = 3;
  for (int i = 0; i < this->unitsids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      3, this->unitsids(i), output);
  }
  
  // optional int32 hangarSid = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->hangarsid(), output);
  }
  
  // optional int32 y = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->y(), output);
  }
  
  // repeated int32 skuSD = 6;
  for (int i = 0; i < this->skusd_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      6, this->skusd(i), output);
  }
  
  // repeated int32 skuE = 7;
  for (int i = 0; i < this->skue_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      7, this->skue(i), output);
  }
  
  // optional int32 millis = 8;
  if (_has_bit(7)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->millis(), output);
  }
  
  // repeated int32 skuSWT = 9;
  for (int i = 0; i < this->skuswt_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      9, this->skuswt(i), output);
  }
  
  // repeated string unitsSkus = 10;
  for (int i = 0; i < this->unitsskus_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->unitsskus(i).data(), this->unitsskus(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      10, this->unitsskus(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RceDeployUnits::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 planetId = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->planetid(), target);
  }
  
  // optional int32 x = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->x(), target);
  }
  
  // repeated int32 unitsIds = 3;
  for (int i = 0; i < this->unitsids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(3, this->unitsids(i), target);
  }
  
  // optional int32 hangarSid = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->hangarsid(), target);
  }
  
  // optional int32 y = 5;
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->y(), target);
  }
  
  // repeated int32 skuSD = 6;
  for (int i = 0; i < this->skusd_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(6, this->skusd(i), target);
  }
  
  // repeated int32 skuE = 7;
  for (int i = 0; i < this->skue_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(7, this->skue(i), target);
  }
  
  // optional int32 millis = 8;
  if (_has_bit(7)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->millis(), target);
  }
  
  // repeated int32 skuSWT = 9;
  for (int i = 0; i < this->skuswt_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(9, this->skuswt(i), target);
  }
  
  // repeated string unitsSkus = 10;
  for (int i = 0; i < this->unitsskus_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->unitsskus(i).data(), this->unitsskus(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(10, this->unitsskus(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RceDeployUnits::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 planetId = 1;
    if (has_planetid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->planetid());
    }
    
    // optional int32 x = 2;
    if (has_x()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->x());
    }
    
    // optional int32 hangarSid = 4;
    if (has_hangarsid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->hangarsid());
    }
    
    // optional int32 y = 5;
    if (has_y()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->y());
    }
    
    // optional int32 millis = 8;
    if (has_millis()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->millis());
    }
    
  }
  // repeated int32 unitsIds = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->unitsids_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->unitsids(i));
    }
    total_size += 1 * this->unitsids_size() + data_size;
  }
  
  // repeated int32 skuSD = 6;
  {
    int data_size = 0;
    for (int i = 0; i < this->skusd_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->skusd(i));
    }
    total_size += 1 * this->skusd_size() + data_size;
  }
  
  // repeated int32 skuE = 7;
  {
    int data_size = 0;
    for (int i = 0; i < this->skue_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->skue(i));
    }
    total_size += 1 * this->skue_size() + data_size;
  }
  
  // repeated int32 skuSWT = 9;
  {
    int data_size = 0;
    for (int i = 0; i < this->skuswt_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->skuswt(i));
    }
    total_size += 1 * this->skuswt_size() + data_size;
  }
  
  // repeated string unitsSkus = 10;
  total_size += 1 * this->unitsskus_size();
  for (int i = 0; i < this->unitsskus_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->unitsskus(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void RceDeployUnits::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RceDeployUnits* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RceDeployUnits*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RceDeployUnits::MergeFrom(const RceDeployUnits& from) {
  GOOGLE_CHECK_NE(&from, this);
  unitsids_.MergeFrom(from.unitsids_);
  skusd_.MergeFrom(from.skusd_);
  skue_.MergeFrom(from.skue_);
  skuswt_.MergeFrom(from.skuswt_);
  unitsskus_.MergeFrom(from.unitsskus_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_planetid(from.planetid());
    }
    if (from._has_bit(1)) {
      set_x(from.x());
    }
    if (from._has_bit(3)) {
      set_hangarsid(from.hangarsid());
    }
    if (from._has_bit(4)) {
      set_y(from.y());
    }
    if (from._has_bit(7)) {
      set_millis(from.millis());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RceDeployUnits::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RceDeployUnits::CopyFrom(const RceDeployUnits& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RceDeployUnits::IsInitialized() const {
  
  return true;
}

void RceDeployUnits::Swap(RceDeployUnits* other) {
  if (other != this) {
    std::swap(planetid_, other->planetid_);
    std::swap(x_, other->x_);
    unitsids_.Swap(&other->unitsids_);
    std::swap(hangarsid_, other->hangarsid_);
    std::swap(y_, other->y_);
    skusd_.Swap(&other->skusd_);
    skue_.Swap(&other->skue_);
    std::swap(millis_, other->millis_);
    skuswt_.Swap(&other->skuswt_);
    unitsskus_.Swap(&other->unitsskus_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RceDeployUnits::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RceDeployUnits_descriptor_;
  metadata.reflection = RceDeployUnits_reflection_;
  return metadata;
}

