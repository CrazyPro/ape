// Generated by the protocol buffer compiler.  DO NOT EDIT!

#ifndef PROTOBUF_RceQuerySendWishItem_2eproto__INCLUDED
#define PROTOBUF_RceQuerySendWishItem_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2002000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2002000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_RceQuerySendWishItem_2eproto();
void protobuf_AssignDesc_RceQuerySendWishItem_2eproto();
void protobuf_ShutdownFile_RceQuerySendWishItem_2eproto();

class RceQuerySendWishItem;

// ===================================================================

class RceQuerySendWishItem : public ::google::protobuf::Message {
 public:
  RceQuerySendWishItem();
  virtual ~RceQuerySendWishItem();
  
  RceQuerySendWishItem(const RceQuerySendWishItem& from);
  
  inline RceQuerySendWishItem& operator=(const RceQuerySendWishItem& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const RceQuerySendWishItem& default_instance();
  void Swap(RceQuerySendWishItem* other);
  
  // implements Message ----------------------------------------------
  
  RceQuerySendWishItem* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RceQuerySendWishItem& from);
  void MergeFrom(const RceQuerySendWishItem& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const { _cached_size_ = size; }
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional string name = 1;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 1;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  
  // optional string platform = 2;
  inline bool has_platform() const;
  inline void clear_platform();
  static const int kPlatformFieldNumber = 2;
  inline const ::std::string& platform() const;
  inline void set_platform(const ::std::string& value);
  inline void set_platform(const char* value);
  inline void set_platform(const char* value, size_t size);
  inline ::std::string* mutable_platform();
  
  // optional string accountId = 3;
  inline bool has_accountid() const;
  inline void clear_accountid();
  static const int kAccountIdFieldNumber = 3;
  inline const ::std::string& accountid() const;
  inline void set_accountid(const ::std::string& value);
  inline void set_accountid(const char* value);
  inline void set_accountid(const char* value, size_t size);
  inline ::std::string* mutable_accountid();
  
  // optional string guid = 4;
  inline bool has_guid() const;
  inline void clear_guid();
  static const int kGuidFieldNumber = 4;
  inline const ::std::string& guid() const;
  inline void set_guid(const ::std::string& value);
  inline void set_guid(const char* value);
  inline void set_guid(const char* value, size_t size);
  inline ::std::string* mutable_guid();
  
  // optional string planetId = 5;
  inline bool has_planetid() const;
  inline void clear_planetid();
  static const int kPlanetIdFieldNumber = 5;
  inline const ::std::string& planetid() const;
  inline void set_planetid(const ::std::string& value);
  inline void set_planetid(const char* value);
  inline void set_planetid(const char* value, size_t size);
  inline ::std::string* mutable_planetid();
  
  // optional string itemSku = 6;
  inline bool has_itemsku() const;
  inline void clear_itemsku();
  static const int kItemSkuFieldNumber = 6;
  inline const ::std::string& itemsku() const;
  inline void set_itemsku(const ::std::string& value);
  inline void set_itemsku(const char* value);
  inline void set_itemsku(const char* value, size_t size);
  inline ::std::string* mutable_itemsku();
  
  // optional string url = 7;
  inline bool has_url() const;
  inline void clear_url();
  static const int kUrlFieldNumber = 7;
  inline const ::std::string& url() const;
  inline void set_url(const ::std::string& value);
  inline void set_url(const char* value);
  inline void set_url(const char* value, size_t size);
  inline ::std::string* mutable_url();
  
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::std::string* name_;
  static const ::std::string _default_name_;
  ::std::string* platform_;
  static const ::std::string _default_platform_;
  ::std::string* accountid_;
  static const ::std::string _default_accountid_;
  ::std::string* guid_;
  static const ::std::string _default_guid_;
  ::std::string* planetid_;
  static const ::std::string _default_planetid_;
  ::std::string* itemsku_;
  static const ::std::string _default_itemsku_;
  ::std::string* url_;
  static const ::std::string _default_url_;
  friend void  protobuf_AddDesc_RceQuerySendWishItem_2eproto();
  friend void protobuf_AssignDesc_RceQuerySendWishItem_2eproto();
  friend void protobuf_ShutdownFile_RceQuerySendWishItem_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(7 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static RceQuerySendWishItem* default_instance_;
};
// ===================================================================


// ===================================================================


// ===================================================================

// RceQuerySendWishItem

// optional string name = 1;
inline bool RceQuerySendWishItem::has_name() const {
  return _has_bit(0);
}
inline void RceQuerySendWishItem::clear_name() {
  if (name_ != &_default_name_) {
    name_->clear();
  }
  _clear_bit(0);
}
inline const ::std::string& RceQuerySendWishItem::name() const {
  return *name_;
}
inline void RceQuerySendWishItem::set_name(const ::std::string& value) {
  _set_bit(0);
  if (name_ == &_default_name_) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void RceQuerySendWishItem::set_name(const char* value) {
  _set_bit(0);
  if (name_ == &_default_name_) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void RceQuerySendWishItem::set_name(const char* value, size_t size) {
  _set_bit(0);
  if (name_ == &_default_name_) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RceQuerySendWishItem::mutable_name() {
  _set_bit(0);
  if (name_ == &_default_name_) {
    name_ = new ::std::string;
  }
  return name_;
}

// optional string platform = 2;
inline bool RceQuerySendWishItem::has_platform() const {
  return _has_bit(1);
}
inline void RceQuerySendWishItem::clear_platform() {
  if (platform_ != &_default_platform_) {
    platform_->clear();
  }
  _clear_bit(1);
}
inline const ::std::string& RceQuerySendWishItem::platform() const {
  return *platform_;
}
inline void RceQuerySendWishItem::set_platform(const ::std::string& value) {
  _set_bit(1);
  if (platform_ == &_default_platform_) {
    platform_ = new ::std::string;
  }
  platform_->assign(value);
}
inline void RceQuerySendWishItem::set_platform(const char* value) {
  _set_bit(1);
  if (platform_ == &_default_platform_) {
    platform_ = new ::std::string;
  }
  platform_->assign(value);
}
inline void RceQuerySendWishItem::set_platform(const char* value, size_t size) {
  _set_bit(1);
  if (platform_ == &_default_platform_) {
    platform_ = new ::std::string;
  }
  platform_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RceQuerySendWishItem::mutable_platform() {
  _set_bit(1);
  if (platform_ == &_default_platform_) {
    platform_ = new ::std::string;
  }
  return platform_;
}

// optional string accountId = 3;
inline bool RceQuerySendWishItem::has_accountid() const {
  return _has_bit(2);
}
inline void RceQuerySendWishItem::clear_accountid() {
  if (accountid_ != &_default_accountid_) {
    accountid_->clear();
  }
  _clear_bit(2);
}
inline const ::std::string& RceQuerySendWishItem::accountid() const {
  return *accountid_;
}
inline void RceQuerySendWishItem::set_accountid(const ::std::string& value) {
  _set_bit(2);
  if (accountid_ == &_default_accountid_) {
    accountid_ = new ::std::string;
  }
  accountid_->assign(value);
}
inline void RceQuerySendWishItem::set_accountid(const char* value) {
  _set_bit(2);
  if (accountid_ == &_default_accountid_) {
    accountid_ = new ::std::string;
  }
  accountid_->assign(value);
}
inline void RceQuerySendWishItem::set_accountid(const char* value, size_t size) {
  _set_bit(2);
  if (accountid_ == &_default_accountid_) {
    accountid_ = new ::std::string;
  }
  accountid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RceQuerySendWishItem::mutable_accountid() {
  _set_bit(2);
  if (accountid_ == &_default_accountid_) {
    accountid_ = new ::std::string;
  }
  return accountid_;
}

// optional string guid = 4;
inline bool RceQuerySendWishItem::has_guid() const {
  return _has_bit(3);
}
inline void RceQuerySendWishItem::clear_guid() {
  if (guid_ != &_default_guid_) {
    guid_->clear();
  }
  _clear_bit(3);
}
inline const ::std::string& RceQuerySendWishItem::guid() const {
  return *guid_;
}
inline void RceQuerySendWishItem::set_guid(const ::std::string& value) {
  _set_bit(3);
  if (guid_ == &_default_guid_) {
    guid_ = new ::std::string;
  }
  guid_->assign(value);
}
inline void RceQuerySendWishItem::set_guid(const char* value) {
  _set_bit(3);
  if (guid_ == &_default_guid_) {
    guid_ = new ::std::string;
  }
  guid_->assign(value);
}
inline void RceQuerySendWishItem::set_guid(const char* value, size_t size) {
  _set_bit(3);
  if (guid_ == &_default_guid_) {
    guid_ = new ::std::string;
  }
  guid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RceQuerySendWishItem::mutable_guid() {
  _set_bit(3);
  if (guid_ == &_default_guid_) {
    guid_ = new ::std::string;
  }
  return guid_;
}

// optional string planetId = 5;
inline bool RceQuerySendWishItem::has_planetid() const {
  return _has_bit(4);
}
inline void RceQuerySendWishItem::clear_planetid() {
  if (planetid_ != &_default_planetid_) {
    planetid_->clear();
  }
  _clear_bit(4);
}
inline const ::std::string& RceQuerySendWishItem::planetid() const {
  return *planetid_;
}
inline void RceQuerySendWishItem::set_planetid(const ::std::string& value) {
  _set_bit(4);
  if (planetid_ == &_default_planetid_) {
    planetid_ = new ::std::string;
  }
  planetid_->assign(value);
}
inline void RceQuerySendWishItem::set_planetid(const char* value) {
  _set_bit(4);
  if (planetid_ == &_default_planetid_) {
    planetid_ = new ::std::string;
  }
  planetid_->assign(value);
}
inline void RceQuerySendWishItem::set_planetid(const char* value, size_t size) {
  _set_bit(4);
  if (planetid_ == &_default_planetid_) {
    planetid_ = new ::std::string;
  }
  planetid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RceQuerySendWishItem::mutable_planetid() {
  _set_bit(4);
  if (planetid_ == &_default_planetid_) {
    planetid_ = new ::std::string;
  }
  return planetid_;
}

// optional string itemSku = 6;
inline bool RceQuerySendWishItem::has_itemsku() const {
  return _has_bit(5);
}
inline void RceQuerySendWishItem::clear_itemsku() {
  if (itemsku_ != &_default_itemsku_) {
    itemsku_->clear();
  }
  _clear_bit(5);
}
inline const ::std::string& RceQuerySendWishItem::itemsku() const {
  return *itemsku_;
}
inline void RceQuerySendWishItem::set_itemsku(const ::std::string& value) {
  _set_bit(5);
  if (itemsku_ == &_default_itemsku_) {
    itemsku_ = new ::std::string;
  }
  itemsku_->assign(value);
}
inline void RceQuerySendWishItem::set_itemsku(const char* value) {
  _set_bit(5);
  if (itemsku_ == &_default_itemsku_) {
    itemsku_ = new ::std::string;
  }
  itemsku_->assign(value);
}
inline void RceQuerySendWishItem::set_itemsku(const char* value, size_t size) {
  _set_bit(5);
  if (itemsku_ == &_default_itemsku_) {
    itemsku_ = new ::std::string;
  }
  itemsku_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RceQuerySendWishItem::mutable_itemsku() {
  _set_bit(5);
  if (itemsku_ == &_default_itemsku_) {
    itemsku_ = new ::std::string;
  }
  return itemsku_;
}

// optional string url = 7;
inline bool RceQuerySendWishItem::has_url() const {
  return _has_bit(6);
}
inline void RceQuerySendWishItem::clear_url() {
  if (url_ != &_default_url_) {
    url_->clear();
  }
  _clear_bit(6);
}
inline const ::std::string& RceQuerySendWishItem::url() const {
  return *url_;
}
inline void RceQuerySendWishItem::set_url(const ::std::string& value) {
  _set_bit(6);
  if (url_ == &_default_url_) {
    url_ = new ::std::string;
  }
  url_->assign(value);
}
inline void RceQuerySendWishItem::set_url(const char* value) {
  _set_bit(6);
  if (url_ == &_default_url_) {
    url_ = new ::std::string;
  }
  url_->assign(value);
}
inline void RceQuerySendWishItem::set_url(const char* value, size_t size) {
  _set_bit(6);
  if (url_ == &_default_url_) {
    url_ = new ::std::string;
  }
  url_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RceQuerySendWishItem::mutable_url() {
  _set_bit(6);
  if (url_ == &_default_url_) {
    url_ = new ::std::string;
  }
  return url_;
}


#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

#endif  // PROTOBUF_RceQuerySendWishItem_2eproto__INCLUDED
