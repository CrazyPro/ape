// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "MsgPlanet.pb.h"
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>

namespace {

const ::google::protobuf::Descriptor* MsgPlanet_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgPlanet_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_MsgPlanet_2eproto() {
  protobuf_AddDesc_MsgPlanet_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "MsgPlanet.proto");
  GOOGLE_CHECK(file != NULL);
  MsgPlanet_descriptor_ = file->message_type(0);
  static const int MsgPlanet_offsets_[11] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPlanet, planetid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPlanet, planettype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPlanet, starname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPlanet, coinslimit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPlanet, mineralslimit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPlanet, starid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPlanet, sku_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPlanet, startype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPlanet, hqlevel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPlanet, capital_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPlanet, planet_),
  };
  MsgPlanet_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgPlanet_descriptor_,
      MsgPlanet::default_instance_,
      MsgPlanet_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPlanet, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPlanet, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgPlanet));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_MsgPlanet_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgPlanet_descriptor_, &MsgPlanet::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_MsgPlanet_2eproto() {
  delete MsgPlanet::default_instance_;
  delete MsgPlanet_reflection_;
}

void protobuf_AddDesc_MsgPlanet_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\017MsgPlanet.proto\"\317\001\n\tMsgPlanet\022\020\n\010plane"
    "tId\030\001 \001(\005\022\022\n\nplanetType\030\002 \001(\005\022\020\n\010starNam"
    "e\030\003 \001(\005\022\022\n\ncoinsLimit\030\004 \001(\005\022\025\n\rmineralsL"
    "imit\030\005 \001(\005\022\016\n\006starId\030\006 \001(\005\022\013\n\003sku\030\007 \001(\t\022"
    "\020\n\010starType\030\010 \001(\005\022\017\n\007HQLevel\030\t \001(\005\022\017\n\007ca"
    "pital\030\n \001(\005\022\016\n\006Planet\030\013 \003(\005", 227);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "MsgPlanet.proto", &protobuf_RegisterTypes);
  MsgPlanet::default_instance_ = new MsgPlanet();
  MsgPlanet::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_MsgPlanet_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_MsgPlanet_2eproto {
  StaticDescriptorInitializer_MsgPlanet_2eproto() {
    protobuf_AddDesc_MsgPlanet_2eproto();
  }
} static_descriptor_initializer_MsgPlanet_2eproto_;


// ===================================================================

const ::std::string MsgPlanet::_default_sku_;
#ifndef _MSC_VER
const int MsgPlanet::kPlanetIdFieldNumber;
const int MsgPlanet::kPlanetTypeFieldNumber;
const int MsgPlanet::kStarNameFieldNumber;
const int MsgPlanet::kCoinsLimitFieldNumber;
const int MsgPlanet::kMineralsLimitFieldNumber;
const int MsgPlanet::kStarIdFieldNumber;
const int MsgPlanet::kSkuFieldNumber;
const int MsgPlanet::kStarTypeFieldNumber;
const int MsgPlanet::kHQLevelFieldNumber;
const int MsgPlanet::kCapitalFieldNumber;
const int MsgPlanet::kPlanetFieldNumber;
#endif  // !_MSC_VER

MsgPlanet::MsgPlanet() {
  SharedCtor();
}

void MsgPlanet::InitAsDefaultInstance() {
}

MsgPlanet::MsgPlanet(const MsgPlanet& from) {
  SharedCtor();
  MergeFrom(from);
}

void MsgPlanet::SharedCtor() {
  _cached_size_ = 0;
  planetid_ = 0;
  planettype_ = 0;
  starname_ = 0;
  coinslimit_ = 0;
  mineralslimit_ = 0;
  starid_ = 0;
  sku_ = const_cast< ::std::string*>(&_default_sku_);
  startype_ = 0;
  hqlevel_ = 0;
  capital_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgPlanet::~MsgPlanet() {
  SharedDtor();
}

void MsgPlanet::SharedDtor() {
  if (sku_ != &_default_sku_) {
    delete sku_;
  }
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* MsgPlanet::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgPlanet_descriptor_;
}

const MsgPlanet& MsgPlanet::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MsgPlanet_2eproto();  return *default_instance_;
}

MsgPlanet* MsgPlanet::default_instance_ = NULL;

MsgPlanet* MsgPlanet::New() const {
  return new MsgPlanet;
}

void MsgPlanet::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    planetid_ = 0;
    planettype_ = 0;
    starname_ = 0;
    coinslimit_ = 0;
    mineralslimit_ = 0;
    starid_ = 0;
    if (_has_bit(6)) {
      if (sku_ != &_default_sku_) {
        sku_->clear();
      }
    }
    startype_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    hqlevel_ = 0;
    capital_ = 0;
  }
  planet_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgPlanet::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 planetId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &planetid_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_planetType;
        break;
      }
      
      // optional int32 planetType = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_planetType:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &planettype_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_starName;
        break;
      }
      
      // optional int32 starName = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_starName:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &starname_));
        _set_bit(2);
        if (input->ExpectTag(32)) goto parse_coinsLimit;
        break;
      }
      
      // optional int32 coinsLimit = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_coinsLimit:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &coinslimit_));
        _set_bit(3);
        if (input->ExpectTag(40)) goto parse_mineralsLimit;
        break;
      }
      
      // optional int32 mineralsLimit = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_mineralsLimit:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &mineralslimit_));
        _set_bit(4);
        if (input->ExpectTag(48)) goto parse_starId;
        break;
      }
      
      // optional int32 starId = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_starId:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &starid_));
        _set_bit(5);
        if (input->ExpectTag(58)) goto parse_sku;
        break;
      }
      
      // optional string sku = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_sku:
        DO_(::google::protobuf::internal::WireFormatLite::ReadString(
              input, this->mutable_sku()));
        ::google::protobuf::internal::WireFormat::VerifyUTF8String(
          this->sku().data(), this->sku().length(),
          ::google::protobuf::internal::WireFormat::PARSE);
        if (input->ExpectTag(64)) goto parse_starType;
        break;
      }
      
      // optional int32 starType = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_starType:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &startype_));
        _set_bit(7);
        if (input->ExpectTag(72)) goto parse_HQLevel;
        break;
      }
      
      // optional int32 HQLevel = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_HQLevel:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &hqlevel_));
        _set_bit(8);
        if (input->ExpectTag(80)) goto parse_capital;
        break;
      }
      
      // optional int32 capital = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_capital:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &capital_));
        _set_bit(9);
        if (input->ExpectTag(88)) goto parse_Planet;
        break;
      }
      
      // repeated int32 Planet = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Planet:
        ::google::protobuf::int32 value;
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &value));
        add_planet(value);
        if (input->ExpectTag(88)) goto parse_Planet;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MsgPlanet::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    MsgPlanet::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional int32 planetId = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->planetid(), output);
  }
  
  // optional int32 planetType = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->planettype(), output);
  }
  
  // optional int32 starName = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->starname(), output);
  }
  
  // optional int32 coinsLimit = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->coinslimit(), output);
  }
  
  // optional int32 mineralsLimit = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->mineralslimit(), output);
  }
  
  // optional int32 starId = 6;
  if (_has_bit(5)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->starid(), output);
  }
  
  // optional string sku = 7;
  if (_has_bit(6)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->sku().data(), this->sku().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->sku(), output);
  }
  
  // optional int32 starType = 8;
  if (_has_bit(7)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->startype(), output);
  }
  
  // optional int32 HQLevel = 9;
  if (_has_bit(8)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->hqlevel(), output);
  }
  
  // optional int32 capital = 10;
  if (_has_bit(9)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->capital(), output);
  }
  
  // repeated int32 Planet = 11;
  for (int i = 0; i < this->planet_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      11, this->planet(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MsgPlanet::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 planetId = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->planetid(), target);
  }
  
  // optional int32 planetType = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->planettype(), target);
  }
  
  // optional int32 starName = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->starname(), target);
  }
  
  // optional int32 coinsLimit = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->coinslimit(), target);
  }
  
  // optional int32 mineralsLimit = 5;
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->mineralslimit(), target);
  }
  
  // optional int32 starId = 6;
  if (_has_bit(5)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->starid(), target);
  }
  
  // optional string sku = 7;
  if (_has_bit(6)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->sku().data(), this->sku().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->sku(), target);
  }
  
  // optional int32 starType = 8;
  if (_has_bit(7)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->startype(), target);
  }
  
  // optional int32 HQLevel = 9;
  if (_has_bit(8)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->hqlevel(), target);
  }
  
  // optional int32 capital = 10;
  if (_has_bit(9)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->capital(), target);
  }
  
  // repeated int32 Planet = 11;
  for (int i = 0; i < this->planet_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(11, this->planet(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MsgPlanet::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 planetId = 1;
    if (has_planetid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->planetid());
    }
    
    // optional int32 planetType = 2;
    if (has_planettype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->planettype());
    }
    
    // optional int32 starName = 3;
    if (has_starname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->starname());
    }
    
    // optional int32 coinsLimit = 4;
    if (has_coinslimit()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->coinslimit());
    }
    
    // optional int32 mineralsLimit = 5;
    if (has_mineralslimit()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->mineralslimit());
    }
    
    // optional int32 starId = 6;
    if (has_starid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->starid());
    }
    
    // optional string sku = 7;
    if (has_sku()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->sku());
    }
    
    // optional int32 starType = 8;
    if (has_startype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->startype());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 HQLevel = 9;
    if (has_hqlevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->hqlevel());
    }
    
    // optional int32 capital = 10;
    if (has_capital()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->capital());
    }
    
  }
  // repeated int32 Planet = 11;
  {
    int data_size = 0;
    for (int i = 0; i < this->planet_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->planet(i));
    }
    total_size += 1 * this->planet_size() + data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void MsgPlanet::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgPlanet* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgPlanet*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgPlanet::MergeFrom(const MsgPlanet& from) {
  GOOGLE_CHECK_NE(&from, this);
  planet_.MergeFrom(from.planet_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_planetid(from.planetid());
    }
    if (from._has_bit(1)) {
      set_planettype(from.planettype());
    }
    if (from._has_bit(2)) {
      set_starname(from.starname());
    }
    if (from._has_bit(3)) {
      set_coinslimit(from.coinslimit());
    }
    if (from._has_bit(4)) {
      set_mineralslimit(from.mineralslimit());
    }
    if (from._has_bit(5)) {
      set_starid(from.starid());
    }
    if (from._has_bit(6)) {
      set_sku(from.sku());
    }
    if (from._has_bit(7)) {
      set_startype(from.startype());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from._has_bit(8)) {
      set_hqlevel(from.hqlevel());
    }
    if (from._has_bit(9)) {
      set_capital(from.capital());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgPlanet::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgPlanet::CopyFrom(const MsgPlanet& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgPlanet::IsInitialized() const {
  
  return true;
}

void MsgPlanet::Swap(MsgPlanet* other) {
  if (other != this) {
    std::swap(planetid_, other->planetid_);
    std::swap(planettype_, other->planettype_);
    std::swap(starname_, other->starname_);
    std::swap(coinslimit_, other->coinslimit_);
    std::swap(mineralslimit_, other->mineralslimit_);
    std::swap(starid_, other->starid_);
    std::swap(sku_, other->sku_);
    std::swap(startype_, other->startype_);
    std::swap(hqlevel_, other->hqlevel_);
    std::swap(capital_, other->capital_);
    planet_.Swap(&other->planet_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgPlanet::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgPlanet_descriptor_;
  metadata.reflection = MsgPlanet_reflection_;
  return metadata;
}

