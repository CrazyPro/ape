// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "MsgShipyard.pb.h"
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>

namespace {

const ::google::protobuf::Descriptor* MsgShipyardSlot_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgShipyardSlot_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgShipyard_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgShipyard_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_MsgShipyard_2eproto() {
  protobuf_AddDesc_MsgShipyard_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "MsgShipyard.proto");
  GOOGLE_CHECK(file != NULL);
  MsgShipyardSlot_descriptor_ = file->message_type(0);
  static const int MsgShipyardSlot_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgShipyardSlot, sku_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgShipyardSlot, num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgShipyardSlot, timeleft_),
  };
  MsgShipyardSlot_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgShipyardSlot_descriptor_,
      MsgShipyardSlot::default_instance_,
      MsgShipyardSlot_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgShipyardSlot, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgShipyardSlot, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgShipyardSlot));
  MsgShipyard_descriptor_ = file->message_type(1);
  static const int MsgShipyard_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgShipyard, updatedat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgShipyard, sid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgShipyard, block_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgShipyard, unlockedslots_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgShipyard, shipyard_),
  };
  MsgShipyard_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgShipyard_descriptor_,
      MsgShipyard::default_instance_,
      MsgShipyard_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgShipyard, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgShipyard, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgShipyard));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_MsgShipyard_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgShipyardSlot_descriptor_, &MsgShipyardSlot::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgShipyard_descriptor_, &MsgShipyard::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_MsgShipyard_2eproto() {
  delete MsgShipyardSlot::default_instance_;
  delete MsgShipyardSlot_reflection_;
  delete MsgShipyard::default_instance_;
  delete MsgShipyard_reflection_;
}

void protobuf_AddDesc_MsgShipyard_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\021MsgShipyard.proto\"=\n\017MsgShipyardSlot\022\013"
    "\n\003sku\030\001 \001(\t\022\013\n\003num\030\002 \001(\005\022\020\n\010timeLeft\030\003 \001"
    "(\005\"w\n\013MsgShipyard\022\021\n\tupdatedAt\030\001 \001(\005\022\013\n\003"
    "sid\030\002 \001(\005\022\r\n\005block\030\003 \001(\005\022\025\n\runlockedSlot"
    "s\030\004 \001(\005\022\"\n\010Shipyard\030\005 \003(\0132\020.MsgShipyardS"
    "lot", 203);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "MsgShipyard.proto", &protobuf_RegisterTypes);
  MsgShipyardSlot::default_instance_ = new MsgShipyardSlot();
  MsgShipyard::default_instance_ = new MsgShipyard();
  MsgShipyardSlot::default_instance_->InitAsDefaultInstance();
  MsgShipyard::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_MsgShipyard_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_MsgShipyard_2eproto {
  StaticDescriptorInitializer_MsgShipyard_2eproto() {
    protobuf_AddDesc_MsgShipyard_2eproto();
  }
} static_descriptor_initializer_MsgShipyard_2eproto_;


// ===================================================================

const ::std::string MsgShipyardSlot::_default_sku_;
#ifndef _MSC_VER
const int MsgShipyardSlot::kSkuFieldNumber;
const int MsgShipyardSlot::kNumFieldNumber;
const int MsgShipyardSlot::kTimeLeftFieldNumber;
#endif  // !_MSC_VER

MsgShipyardSlot::MsgShipyardSlot() {
  SharedCtor();
}

void MsgShipyardSlot::InitAsDefaultInstance() {
}

MsgShipyardSlot::MsgShipyardSlot(const MsgShipyardSlot& from) {
  SharedCtor();
  MergeFrom(from);
}

void MsgShipyardSlot::SharedCtor() {
  _cached_size_ = 0;
  sku_ = const_cast< ::std::string*>(&_default_sku_);
  num_ = 0;
  timeleft_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgShipyardSlot::~MsgShipyardSlot() {
  SharedDtor();
}

void MsgShipyardSlot::SharedDtor() {
  if (sku_ != &_default_sku_) {
    delete sku_;
  }
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* MsgShipyardSlot::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgShipyardSlot_descriptor_;
}

const MsgShipyardSlot& MsgShipyardSlot::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MsgShipyard_2eproto();  return *default_instance_;
}

MsgShipyardSlot* MsgShipyardSlot::default_instance_ = NULL;

MsgShipyardSlot* MsgShipyardSlot::New() const {
  return new MsgShipyardSlot;
}

void MsgShipyardSlot::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (sku_ != &_default_sku_) {
        sku_->clear();
      }
    }
    num_ = 0;
    timeleft_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgShipyardSlot::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string sku = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadString(
              input, this->mutable_sku()));
        ::google::protobuf::internal::WireFormat::VerifyUTF8String(
          this->sku().data(), this->sku().length(),
          ::google::protobuf::internal::WireFormat::PARSE);
        if (input->ExpectTag(16)) goto parse_num;
        break;
      }
      
      // optional int32 num = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_num:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &num_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_timeLeft;
        break;
      }
      
      // optional int32 timeLeft = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_timeLeft:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &timeleft_));
        _set_bit(2);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MsgShipyardSlot::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    MsgShipyardSlot::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional string sku = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->sku().data(), this->sku().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->sku(), output);
  }
  
  // optional int32 num = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->num(), output);
  }
  
  // optional int32 timeLeft = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->timeleft(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MsgShipyardSlot::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string sku = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->sku().data(), this->sku().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->sku(), target);
  }
  
  // optional int32 num = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->num(), target);
  }
  
  // optional int32 timeLeft = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->timeleft(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MsgShipyardSlot::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string sku = 1;
    if (has_sku()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->sku());
    }
    
    // optional int32 num = 2;
    if (has_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->num());
    }
    
    // optional int32 timeLeft = 3;
    if (has_timeleft()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->timeleft());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void MsgShipyardSlot::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgShipyardSlot* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgShipyardSlot*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgShipyardSlot::MergeFrom(const MsgShipyardSlot& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_sku(from.sku());
    }
    if (from._has_bit(1)) {
      set_num(from.num());
    }
    if (from._has_bit(2)) {
      set_timeleft(from.timeleft());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgShipyardSlot::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgShipyardSlot::CopyFrom(const MsgShipyardSlot& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgShipyardSlot::IsInitialized() const {
  
  return true;
}

void MsgShipyardSlot::Swap(MsgShipyardSlot* other) {
  if (other != this) {
    std::swap(sku_, other->sku_);
    std::swap(num_, other->num_);
    std::swap(timeleft_, other->timeleft_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgShipyardSlot::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgShipyardSlot_descriptor_;
  metadata.reflection = MsgShipyardSlot_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgShipyard::kUpdatedAtFieldNumber;
const int MsgShipyard::kSidFieldNumber;
const int MsgShipyard::kBlockFieldNumber;
const int MsgShipyard::kUnlockedSlotsFieldNumber;
const int MsgShipyard::kShipyardFieldNumber;
#endif  // !_MSC_VER

MsgShipyard::MsgShipyard() {
  SharedCtor();
}

void MsgShipyard::InitAsDefaultInstance() {
}

MsgShipyard::MsgShipyard(const MsgShipyard& from) {
  SharedCtor();
  MergeFrom(from);
}

void MsgShipyard::SharedCtor() {
  _cached_size_ = 0;
  updatedat_ = 0;
  sid_ = 0;
  block_ = 0;
  unlockedslots_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgShipyard::~MsgShipyard() {
  SharedDtor();
}

void MsgShipyard::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* MsgShipyard::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgShipyard_descriptor_;
}

const MsgShipyard& MsgShipyard::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MsgShipyard_2eproto();  return *default_instance_;
}

MsgShipyard* MsgShipyard::default_instance_ = NULL;

MsgShipyard* MsgShipyard::New() const {
  return new MsgShipyard;
}

void MsgShipyard::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    updatedat_ = 0;
    sid_ = 0;
    block_ = 0;
    unlockedslots_ = 0;
  }
  shipyard_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgShipyard::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 updatedAt = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &updatedat_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_sid;
        break;
      }
      
      // optional int32 sid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_sid:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &sid_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_block;
        break;
      }
      
      // optional int32 block = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_block:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &block_));
        _set_bit(2);
        if (input->ExpectTag(32)) goto parse_unlockedSlots;
        break;
      }
      
      // optional int32 unlockedSlots = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_unlockedSlots:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &unlockedslots_));
        _set_bit(3);
        if (input->ExpectTag(42)) goto parse_Shipyard;
        break;
      }
      
      // repeated .MsgShipyardSlot Shipyard = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_Shipyard:
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, add_shipyard()));
        if (input->ExpectTag(42)) goto parse_Shipyard;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MsgShipyard::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    MsgShipyard::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional int32 updatedAt = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->updatedat(), output);
  }
  
  // optional int32 sid = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->sid(), output);
  }
  
  // optional int32 block = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->block(), output);
  }
  
  // optional int32 unlockedSlots = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->unlockedslots(), output);
  }
  
  // repeated .MsgShipyardSlot Shipyard = 5;
  for (int i = 0; i < this->shipyard_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      5, this->shipyard(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MsgShipyard::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 updatedAt = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->updatedat(), target);
  }
  
  // optional int32 sid = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->sid(), target);
  }
  
  // optional int32 block = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->block(), target);
  }
  
  // optional int32 unlockedSlots = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->unlockedslots(), target);
  }
  
  // repeated .MsgShipyardSlot Shipyard = 5;
  for (int i = 0; i < this->shipyard_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->shipyard(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MsgShipyard::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 updatedAt = 1;
    if (has_updatedat()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->updatedat());
    }
    
    // optional int32 sid = 2;
    if (has_sid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sid());
    }
    
    // optional int32 block = 3;
    if (has_block()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->block());
    }
    
    // optional int32 unlockedSlots = 4;
    if (has_unlockedslots()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->unlockedslots());
    }
    
  }
  // repeated .MsgShipyardSlot Shipyard = 5;
  total_size += 1 * this->shipyard_size();
  for (int i = 0; i < this->shipyard_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->shipyard(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void MsgShipyard::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgShipyard* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgShipyard*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgShipyard::MergeFrom(const MsgShipyard& from) {
  GOOGLE_CHECK_NE(&from, this);
  shipyard_.MergeFrom(from.shipyard_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_updatedat(from.updatedat());
    }
    if (from._has_bit(1)) {
      set_sid(from.sid());
    }
    if (from._has_bit(2)) {
      set_block(from.block());
    }
    if (from._has_bit(3)) {
      set_unlockedslots(from.unlockedslots());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgShipyard::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgShipyard::CopyFrom(const MsgShipyard& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgShipyard::IsInitialized() const {
  
  return true;
}

void MsgShipyard::Swap(MsgShipyard* other) {
  if (other != this) {
    std::swap(updatedat_, other->updatedat_);
    std::swap(sid_, other->sid_);
    std::swap(block_, other->block_);
    std::swap(unlockedslots_, other->unlockedslots_);
    shipyard_.Swap(&other->shipyard_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgShipyard::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgShipyard_descriptor_;
  metadata.reflection = MsgShipyard_reflection_;
  return metadata;
}

