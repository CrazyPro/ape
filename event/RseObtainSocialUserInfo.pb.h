// Generated by the protocol buffer compiler.  DO NOT EDIT!

#ifndef PROTOBUF_RseObtainSocialUserInfo_2eproto__INCLUDED
#define PROTOBUF_RseObtainSocialUserInfo_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2002000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2002000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_RseObtainSocialUserInfo_2eproto();
void protobuf_AssignDesc_RseObtainSocialUserInfo_2eproto();
void protobuf_ShutdownFile_RseObtainSocialUserInfo_2eproto();

class MsgSocialUserInfo;
class RseObtainSocialUserInfo;

// ===================================================================

class MsgSocialUserInfo : public ::google::protobuf::Message {
 public:
  MsgSocialUserInfo();
  virtual ~MsgSocialUserInfo();
  
  MsgSocialUserInfo(const MsgSocialUserInfo& from);
  
  inline MsgSocialUserInfo& operator=(const MsgSocialUserInfo& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const MsgSocialUserInfo& default_instance();
  void Swap(MsgSocialUserInfo* other);
  
  // implements Message ----------------------------------------------
  
  MsgSocialUserInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MsgSocialUserInfo& from);
  void MergeFrom(const MsgSocialUserInfo& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const { _cached_size_ = size; }
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  friend void  protobuf_AddDesc_RseObtainSocialUserInfo_2eproto();
  friend void protobuf_AssignDesc_RseObtainSocialUserInfo_2eproto();
  friend void protobuf_ShutdownFile_RseObtainSocialUserInfo_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[1];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static MsgSocialUserInfo* default_instance_;
};
// -------------------------------------------------------------------

class RseObtainSocialUserInfo : public ::google::protobuf::Message {
 public:
  RseObtainSocialUserInfo();
  virtual ~RseObtainSocialUserInfo();
  
  RseObtainSocialUserInfo(const RseObtainSocialUserInfo& from);
  
  inline RseObtainSocialUserInfo& operator=(const RseObtainSocialUserInfo& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const RseObtainSocialUserInfo& default_instance();
  void Swap(RseObtainSocialUserInfo* other);
  
  // implements Message ----------------------------------------------
  
  RseObtainSocialUserInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RseObtainSocialUserInfo& from);
  void MergeFrom(const RseObtainSocialUserInfo& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const { _cached_size_ = size; }
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional string name = 1;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 1;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  
  // optional string photoURL = 2;
  inline bool has_photourl() const;
  inline void clear_photourl();
  static const int kPhotoURLFieldNumber = 2;
  inline const ::std::string& photourl() const;
  inline void set_photourl(const ::std::string& value);
  inline void set_photourl(const char* value);
  inline void set_photourl(const char* value, size_t size);
  inline ::std::string* mutable_photourl();
  
  // optional int32 fan = 3;
  inline bool has_fan() const;
  inline void clear_fan();
  static const int kFanFieldNumber = 3;
  inline ::google::protobuf::int32 fan() const;
  inline void set_fan(::google::protobuf::int32 value);
  
  // repeated .MsgSocialUserInfo SocialUserInfo = 4;
  inline int socialuserinfo_size() const;
  inline void clear_socialuserinfo();
  static const int kSocialUserInfoFieldNumber = 4;
  inline const ::google::protobuf::RepeatedPtrField< ::MsgSocialUserInfo >& socialuserinfo() const;
  inline ::google::protobuf::RepeatedPtrField< ::MsgSocialUserInfo >* mutable_socialuserinfo();
  inline const ::MsgSocialUserInfo& socialuserinfo(int index) const;
  inline ::MsgSocialUserInfo* mutable_socialuserinfo(int index);
  inline ::MsgSocialUserInfo* add_socialuserinfo();
  
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::std::string* name_;
  static const ::std::string _default_name_;
  ::std::string* photourl_;
  static const ::std::string _default_photourl_;
  ::google::protobuf::int32 fan_;
  ::google::protobuf::RepeatedPtrField< ::MsgSocialUserInfo > socialuserinfo_;
  friend void  protobuf_AddDesc_RseObtainSocialUserInfo_2eproto();
  friend void protobuf_AssignDesc_RseObtainSocialUserInfo_2eproto();
  friend void protobuf_ShutdownFile_RseObtainSocialUserInfo_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static RseObtainSocialUserInfo* default_instance_;
};
// ===================================================================


// ===================================================================


// ===================================================================

// MsgSocialUserInfo

// -------------------------------------------------------------------

// RseObtainSocialUserInfo

// optional string name = 1;
inline bool RseObtainSocialUserInfo::has_name() const {
  return _has_bit(0);
}
inline void RseObtainSocialUserInfo::clear_name() {
  if (name_ != &_default_name_) {
    name_->clear();
  }
  _clear_bit(0);
}
inline const ::std::string& RseObtainSocialUserInfo::name() const {
  return *name_;
}
inline void RseObtainSocialUserInfo::set_name(const ::std::string& value) {
  _set_bit(0);
  if (name_ == &_default_name_) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void RseObtainSocialUserInfo::set_name(const char* value) {
  _set_bit(0);
  if (name_ == &_default_name_) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void RseObtainSocialUserInfo::set_name(const char* value, size_t size) {
  _set_bit(0);
  if (name_ == &_default_name_) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RseObtainSocialUserInfo::mutable_name() {
  _set_bit(0);
  if (name_ == &_default_name_) {
    name_ = new ::std::string;
  }
  return name_;
}

// optional string photoURL = 2;
inline bool RseObtainSocialUserInfo::has_photourl() const {
  return _has_bit(1);
}
inline void RseObtainSocialUserInfo::clear_photourl() {
  if (photourl_ != &_default_photourl_) {
    photourl_->clear();
  }
  _clear_bit(1);
}
inline const ::std::string& RseObtainSocialUserInfo::photourl() const {
  return *photourl_;
}
inline void RseObtainSocialUserInfo::set_photourl(const ::std::string& value) {
  _set_bit(1);
  if (photourl_ == &_default_photourl_) {
    photourl_ = new ::std::string;
  }
  photourl_->assign(value);
}
inline void RseObtainSocialUserInfo::set_photourl(const char* value) {
  _set_bit(1);
  if (photourl_ == &_default_photourl_) {
    photourl_ = new ::std::string;
  }
  photourl_->assign(value);
}
inline void RseObtainSocialUserInfo::set_photourl(const char* value, size_t size) {
  _set_bit(1);
  if (photourl_ == &_default_photourl_) {
    photourl_ = new ::std::string;
  }
  photourl_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RseObtainSocialUserInfo::mutable_photourl() {
  _set_bit(1);
  if (photourl_ == &_default_photourl_) {
    photourl_ = new ::std::string;
  }
  return photourl_;
}

// optional int32 fan = 3;
inline bool RseObtainSocialUserInfo::has_fan() const {
  return _has_bit(2);
}
inline void RseObtainSocialUserInfo::clear_fan() {
  fan_ = 0;
  _clear_bit(2);
}
inline ::google::protobuf::int32 RseObtainSocialUserInfo::fan() const {
  return fan_;
}
inline void RseObtainSocialUserInfo::set_fan(::google::protobuf::int32 value) {
  _set_bit(2);
  fan_ = value;
}

// repeated .MsgSocialUserInfo SocialUserInfo = 4;
inline int RseObtainSocialUserInfo::socialuserinfo_size() const {
  return socialuserinfo_.size();
}
inline void RseObtainSocialUserInfo::clear_socialuserinfo() {
  socialuserinfo_.Clear();
}
inline const ::google::protobuf::RepeatedPtrField< ::MsgSocialUserInfo >&
RseObtainSocialUserInfo::socialuserinfo() const {
  return socialuserinfo_;
}
inline ::google::protobuf::RepeatedPtrField< ::MsgSocialUserInfo >*
RseObtainSocialUserInfo::mutable_socialuserinfo() {
  return &socialuserinfo_;
}
inline const ::MsgSocialUserInfo& RseObtainSocialUserInfo::socialuserinfo(int index) const {
  return socialuserinfo_.Get(index);
}
inline ::MsgSocialUserInfo* RseObtainSocialUserInfo::mutable_socialuserinfo(int index) {
  return socialuserinfo_.Mutable(index);
}
inline ::MsgSocialUserInfo* RseObtainSocialUserInfo::add_socialuserinfo() {
  return socialuserinfo_.Add();
}


#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

#endif  // PROTOBUF_RseObtainSocialUserInfo_2eproto__INCLUDED
