// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "RceUpdateGameUnits.pb.h"
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>

namespace {

const ::google::protobuf::Descriptor* RceUpdateGameUnits_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RceUpdateGameUnits_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_RceUpdateGameUnits_2eproto() {
  protobuf_AddDesc_RceUpdateGameUnits_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "RceUpdateGameUnits.proto");
  GOOGLE_CHECK(file != NULL);
  RceUpdateGameUnits_descriptor_ = file->message_type(0);
  static const int RceUpdateGameUnits_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RceUpdateGameUnits, timeleft_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RceUpdateGameUnits, transaction_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RceUpdateGameUnits, sku_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RceUpdateGameUnits, planetid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RceUpdateGameUnits, action_),
  };
  RceUpdateGameUnits_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RceUpdateGameUnits_descriptor_,
      RceUpdateGameUnits::default_instance_,
      RceUpdateGameUnits_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RceUpdateGameUnits, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RceUpdateGameUnits, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RceUpdateGameUnits));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_RceUpdateGameUnits_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RceUpdateGameUnits_descriptor_, &RceUpdateGameUnits::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_RceUpdateGameUnits_2eproto() {
  delete RceUpdateGameUnits::default_instance_;
  delete RceUpdateGameUnits_reflection_;
}

void protobuf_AddDesc_RceUpdateGameUnits_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::protobuf_AddDesc_MsgTransaction_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\030RceUpdateGameUnits.proto\032\024MsgTransacti"
    "on.proto\"{\n\022RceUpdateGameUnits\022\020\n\010timeLe"
    "ft\030\001 \001(\005\022$\n\013transaction\030\002 \001(\0132\017.MsgTrans"
    "action\022\013\n\003sku\030\003 \001(\t\022\020\n\010planetId\030\004 \001(\005\022\016\n"
    "\006action\030\005 \001(\t", 173);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "RceUpdateGameUnits.proto", &protobuf_RegisterTypes);
  RceUpdateGameUnits::default_instance_ = new RceUpdateGameUnits();
  RceUpdateGameUnits::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_RceUpdateGameUnits_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_RceUpdateGameUnits_2eproto {
  StaticDescriptorInitializer_RceUpdateGameUnits_2eproto() {
    protobuf_AddDesc_RceUpdateGameUnits_2eproto();
  }
} static_descriptor_initializer_RceUpdateGameUnits_2eproto_;


// ===================================================================

const ::std::string RceUpdateGameUnits::_default_sku_;
const ::std::string RceUpdateGameUnits::_default_action_;
#ifndef _MSC_VER
const int RceUpdateGameUnits::kTimeLeftFieldNumber;
const int RceUpdateGameUnits::kTransactionFieldNumber;
const int RceUpdateGameUnits::kSkuFieldNumber;
const int RceUpdateGameUnits::kPlanetIdFieldNumber;
const int RceUpdateGameUnits::kActionFieldNumber;
#endif  // !_MSC_VER

RceUpdateGameUnits::RceUpdateGameUnits() {
  SharedCtor();
}

void RceUpdateGameUnits::InitAsDefaultInstance() {
  transaction_ = const_cast< ::MsgTransaction*>(&::MsgTransaction::default_instance());
}

RceUpdateGameUnits::RceUpdateGameUnits(const RceUpdateGameUnits& from) {
  SharedCtor();
  MergeFrom(from);
}

void RceUpdateGameUnits::SharedCtor() {
  _cached_size_ = 0;
  timeleft_ = 0;
  transaction_ = NULL;
  sku_ = const_cast< ::std::string*>(&_default_sku_);
  planetid_ = 0;
  action_ = const_cast< ::std::string*>(&_default_action_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RceUpdateGameUnits::~RceUpdateGameUnits() {
  SharedDtor();
}

void RceUpdateGameUnits::SharedDtor() {
  if (sku_ != &_default_sku_) {
    delete sku_;
  }
  if (action_ != &_default_action_) {
    delete action_;
  }
  if (this != default_instance_) {
    delete transaction_;
  }
}

const ::google::protobuf::Descriptor* RceUpdateGameUnits::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RceUpdateGameUnits_descriptor_;
}

const RceUpdateGameUnits& RceUpdateGameUnits::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_RceUpdateGameUnits_2eproto();  return *default_instance_;
}

RceUpdateGameUnits* RceUpdateGameUnits::default_instance_ = NULL;

RceUpdateGameUnits* RceUpdateGameUnits::New() const {
  return new RceUpdateGameUnits;
}

void RceUpdateGameUnits::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    timeleft_ = 0;
    if (_has_bit(1)) {
      if (transaction_ != NULL) transaction_->::MsgTransaction::Clear();
    }
    if (_has_bit(2)) {
      if (sku_ != &_default_sku_) {
        sku_->clear();
      }
    }
    planetid_ = 0;
    if (_has_bit(4)) {
      if (action_ != &_default_action_) {
        action_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RceUpdateGameUnits::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 timeLeft = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &timeleft_));
        _set_bit(0);
        if (input->ExpectTag(18)) goto parse_transaction;
        break;
      }
      
      // optional .MsgTransaction transaction = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_transaction:
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
             input, mutable_transaction()));
        if (input->ExpectTag(26)) goto parse_sku;
        break;
      }
      
      // optional string sku = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_sku:
        DO_(::google::protobuf::internal::WireFormatLite::ReadString(
              input, this->mutable_sku()));
        ::google::protobuf::internal::WireFormat::VerifyUTF8String(
          this->sku().data(), this->sku().length(),
          ::google::protobuf::internal::WireFormat::PARSE);
        if (input->ExpectTag(32)) goto parse_planetId;
        break;
      }
      
      // optional int32 planetId = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_planetId:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &planetid_));
        _set_bit(3);
        if (input->ExpectTag(42)) goto parse_action;
        break;
      }
      
      // optional string action = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_action:
        DO_(::google::protobuf::internal::WireFormatLite::ReadString(
              input, this->mutable_action()));
        ::google::protobuf::internal::WireFormat::VerifyUTF8String(
          this->action().data(), this->action().length(),
          ::google::protobuf::internal::WireFormat::PARSE);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RceUpdateGameUnits::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    RceUpdateGameUnits::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional int32 timeLeft = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->timeleft(), output);
  }
  
  // optional .MsgTransaction transaction = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      2, this->transaction(), output);
  }
  
  // optional string sku = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->sku().data(), this->sku().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->sku(), output);
  }
  
  // optional int32 planetId = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->planetid(), output);
  }
  
  // optional string action = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->action().data(), this->action().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->action(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RceUpdateGameUnits::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 timeLeft = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->timeleft(), target);
  }
  
  // optional .MsgTransaction transaction = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->transaction(), target);
  }
  
  // optional string sku = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->sku().data(), this->sku().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->sku(), target);
  }
  
  // optional int32 planetId = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->planetid(), target);
  }
  
  // optional string action = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->action().data(), this->action().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->action(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RceUpdateGameUnits::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 timeLeft = 1;
    if (has_timeleft()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->timeleft());
    }
    
    // optional .MsgTransaction transaction = 2;
    if (has_transaction()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->transaction());
    }
    
    // optional string sku = 3;
    if (has_sku()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->sku());
    }
    
    // optional int32 planetId = 4;
    if (has_planetid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->planetid());
    }
    
    // optional string action = 5;
    if (has_action()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->action());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void RceUpdateGameUnits::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RceUpdateGameUnits* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RceUpdateGameUnits*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RceUpdateGameUnits::MergeFrom(const RceUpdateGameUnits& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_timeleft(from.timeleft());
    }
    if (from._has_bit(1)) {
      mutable_transaction()->::MsgTransaction::MergeFrom(from.transaction());
    }
    if (from._has_bit(2)) {
      set_sku(from.sku());
    }
    if (from._has_bit(3)) {
      set_planetid(from.planetid());
    }
    if (from._has_bit(4)) {
      set_action(from.action());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RceUpdateGameUnits::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RceUpdateGameUnits::CopyFrom(const RceUpdateGameUnits& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RceUpdateGameUnits::IsInitialized() const {
  
  return true;
}

void RceUpdateGameUnits::Swap(RceUpdateGameUnits* other) {
  if (other != this) {
    std::swap(timeleft_, other->timeleft_);
    std::swap(transaction_, other->transaction_);
    std::swap(sku_, other->sku_);
    std::swap(planetid_, other->planetid_);
    std::swap(action_, other->action_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RceUpdateGameUnits::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RceUpdateGameUnits_descriptor_;
  metadata.reflection = RceUpdateGameUnits_reflection_;
  return metadata;
}

