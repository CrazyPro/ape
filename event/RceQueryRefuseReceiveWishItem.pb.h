// Generated by the protocol buffer compiler.  DO NOT EDIT!

#ifndef PROTOBUF_RceQueryRefuseReceiveWishItem_2eproto__INCLUDED
#define PROTOBUF_RceQueryRefuseReceiveWishItem_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2002000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2002000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_RceQueryRefuseReceiveWishItem_2eproto();
void protobuf_AssignDesc_RceQueryRefuseReceiveWishItem_2eproto();
void protobuf_ShutdownFile_RceQueryRefuseReceiveWishItem_2eproto();

class RceQueryRefuseReceiveWishItem;

// ===================================================================

class RceQueryRefuseReceiveWishItem : public ::google::protobuf::Message {
 public:
  RceQueryRefuseReceiveWishItem();
  virtual ~RceQueryRefuseReceiveWishItem();
  
  RceQueryRefuseReceiveWishItem(const RceQueryRefuseReceiveWishItem& from);
  
  inline RceQueryRefuseReceiveWishItem& operator=(const RceQueryRefuseReceiveWishItem& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const RceQueryRefuseReceiveWishItem& default_instance();
  void Swap(RceQueryRefuseReceiveWishItem* other);
  
  // implements Message ----------------------------------------------
  
  RceQueryRefuseReceiveWishItem* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RceQueryRefuseReceiveWishItem& from);
  void MergeFrom(const RceQueryRefuseReceiveWishItem& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const { _cached_size_ = size; }
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional string type = 1;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline const ::std::string& type() const;
  inline void set_type(const ::std::string& value);
  inline void set_type(const char* value);
  inline void set_type(const char* value, size_t size);
  inline ::std::string* mutable_type();
  
  // optional string name = 2;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 2;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  
  // optional string playerId = 3;
  inline bool has_playerid() const;
  inline void clear_playerid();
  static const int kPlayerIdFieldNumber = 3;
  inline const ::std::string& playerid() const;
  inline void set_playerid(const ::std::string& value);
  inline void set_playerid(const char* value);
  inline void set_playerid(const char* value, size_t size);
  inline ::std::string* mutable_playerid();
  
  // optional string id = 4;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 4;
  inline const ::std::string& id() const;
  inline void set_id(const ::std::string& value);
  inline void set_id(const char* value);
  inline void set_id(const char* value, size_t size);
  inline ::std::string* mutable_id();
  
  // optional string guid = 5;
  inline bool has_guid() const;
  inline void clear_guid();
  static const int kGuidFieldNumber = 5;
  inline const ::std::string& guid() const;
  inline void set_guid(const ::std::string& value);
  inline void set_guid(const char* value);
  inline void set_guid(const char* value, size_t size);
  inline ::std::string* mutable_guid();
  
  // optional string planetId = 6;
  inline bool has_planetid() const;
  inline void clear_planetid();
  static const int kPlanetIdFieldNumber = 6;
  inline const ::std::string& planetid() const;
  inline void set_planetid(const ::std::string& value);
  inline void set_planetid(const char* value);
  inline void set_planetid(const char* value, size_t size);
  inline ::std::string* mutable_planetid();
  
  // optional string time = 7;
  inline bool has_time() const;
  inline void clear_time();
  static const int kTimeFieldNumber = 7;
  inline const ::std::string& time() const;
  inline void set_time(const ::std::string& value);
  inline void set_time(const char* value);
  inline void set_time(const char* value, size_t size);
  inline ::std::string* mutable_time();
  
  // optional string msg = 8;
  inline bool has_msg() const;
  inline void clear_msg();
  static const int kMsgFieldNumber = 8;
  inline const ::std::string& msg() const;
  inline void set_msg(const ::std::string& value);
  inline void set_msg(const char* value);
  inline void set_msg(const char* value, size_t size);
  inline ::std::string* mutable_msg();
  
  // optional string url = 9;
  inline bool has_url() const;
  inline void clear_url();
  static const int kUrlFieldNumber = 9;
  inline const ::std::string& url() const;
  inline void set_url(const ::std::string& value);
  inline void set_url(const char* value);
  inline void set_url(const char* value, size_t size);
  inline ::std::string* mutable_url();
  
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::std::string* type_;
  static const ::std::string _default_type_;
  ::std::string* name_;
  static const ::std::string _default_name_;
  ::std::string* playerid_;
  static const ::std::string _default_playerid_;
  ::std::string* id_;
  static const ::std::string _default_id_;
  ::std::string* guid_;
  static const ::std::string _default_guid_;
  ::std::string* planetid_;
  static const ::std::string _default_planetid_;
  ::std::string* time_;
  static const ::std::string _default_time_;
  ::std::string* msg_;
  static const ::std::string _default_msg_;
  ::std::string* url_;
  static const ::std::string _default_url_;
  friend void  protobuf_AddDesc_RceQueryRefuseReceiveWishItem_2eproto();
  friend void protobuf_AssignDesc_RceQueryRefuseReceiveWishItem_2eproto();
  friend void protobuf_ShutdownFile_RceQueryRefuseReceiveWishItem_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(9 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static RceQueryRefuseReceiveWishItem* default_instance_;
};
// ===================================================================


// ===================================================================


// ===================================================================

// RceQueryRefuseReceiveWishItem

// optional string type = 1;
inline bool RceQueryRefuseReceiveWishItem::has_type() const {
  return _has_bit(0);
}
inline void RceQueryRefuseReceiveWishItem::clear_type() {
  if (type_ != &_default_type_) {
    type_->clear();
  }
  _clear_bit(0);
}
inline const ::std::string& RceQueryRefuseReceiveWishItem::type() const {
  return *type_;
}
inline void RceQueryRefuseReceiveWishItem::set_type(const ::std::string& value) {
  _set_bit(0);
  if (type_ == &_default_type_) {
    type_ = new ::std::string;
  }
  type_->assign(value);
}
inline void RceQueryRefuseReceiveWishItem::set_type(const char* value) {
  _set_bit(0);
  if (type_ == &_default_type_) {
    type_ = new ::std::string;
  }
  type_->assign(value);
}
inline void RceQueryRefuseReceiveWishItem::set_type(const char* value, size_t size) {
  _set_bit(0);
  if (type_ == &_default_type_) {
    type_ = new ::std::string;
  }
  type_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RceQueryRefuseReceiveWishItem::mutable_type() {
  _set_bit(0);
  if (type_ == &_default_type_) {
    type_ = new ::std::string;
  }
  return type_;
}

// optional string name = 2;
inline bool RceQueryRefuseReceiveWishItem::has_name() const {
  return _has_bit(1);
}
inline void RceQueryRefuseReceiveWishItem::clear_name() {
  if (name_ != &_default_name_) {
    name_->clear();
  }
  _clear_bit(1);
}
inline const ::std::string& RceQueryRefuseReceiveWishItem::name() const {
  return *name_;
}
inline void RceQueryRefuseReceiveWishItem::set_name(const ::std::string& value) {
  _set_bit(1);
  if (name_ == &_default_name_) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void RceQueryRefuseReceiveWishItem::set_name(const char* value) {
  _set_bit(1);
  if (name_ == &_default_name_) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void RceQueryRefuseReceiveWishItem::set_name(const char* value, size_t size) {
  _set_bit(1);
  if (name_ == &_default_name_) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RceQueryRefuseReceiveWishItem::mutable_name() {
  _set_bit(1);
  if (name_ == &_default_name_) {
    name_ = new ::std::string;
  }
  return name_;
}

// optional string playerId = 3;
inline bool RceQueryRefuseReceiveWishItem::has_playerid() const {
  return _has_bit(2);
}
inline void RceQueryRefuseReceiveWishItem::clear_playerid() {
  if (playerid_ != &_default_playerid_) {
    playerid_->clear();
  }
  _clear_bit(2);
}
inline const ::std::string& RceQueryRefuseReceiveWishItem::playerid() const {
  return *playerid_;
}
inline void RceQueryRefuseReceiveWishItem::set_playerid(const ::std::string& value) {
  _set_bit(2);
  if (playerid_ == &_default_playerid_) {
    playerid_ = new ::std::string;
  }
  playerid_->assign(value);
}
inline void RceQueryRefuseReceiveWishItem::set_playerid(const char* value) {
  _set_bit(2);
  if (playerid_ == &_default_playerid_) {
    playerid_ = new ::std::string;
  }
  playerid_->assign(value);
}
inline void RceQueryRefuseReceiveWishItem::set_playerid(const char* value, size_t size) {
  _set_bit(2);
  if (playerid_ == &_default_playerid_) {
    playerid_ = new ::std::string;
  }
  playerid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RceQueryRefuseReceiveWishItem::mutable_playerid() {
  _set_bit(2);
  if (playerid_ == &_default_playerid_) {
    playerid_ = new ::std::string;
  }
  return playerid_;
}

// optional string id = 4;
inline bool RceQueryRefuseReceiveWishItem::has_id() const {
  return _has_bit(3);
}
inline void RceQueryRefuseReceiveWishItem::clear_id() {
  if (id_ != &_default_id_) {
    id_->clear();
  }
  _clear_bit(3);
}
inline const ::std::string& RceQueryRefuseReceiveWishItem::id() const {
  return *id_;
}
inline void RceQueryRefuseReceiveWishItem::set_id(const ::std::string& value) {
  _set_bit(3);
  if (id_ == &_default_id_) {
    id_ = new ::std::string;
  }
  id_->assign(value);
}
inline void RceQueryRefuseReceiveWishItem::set_id(const char* value) {
  _set_bit(3);
  if (id_ == &_default_id_) {
    id_ = new ::std::string;
  }
  id_->assign(value);
}
inline void RceQueryRefuseReceiveWishItem::set_id(const char* value, size_t size) {
  _set_bit(3);
  if (id_ == &_default_id_) {
    id_ = new ::std::string;
  }
  id_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RceQueryRefuseReceiveWishItem::mutable_id() {
  _set_bit(3);
  if (id_ == &_default_id_) {
    id_ = new ::std::string;
  }
  return id_;
}

// optional string guid = 5;
inline bool RceQueryRefuseReceiveWishItem::has_guid() const {
  return _has_bit(4);
}
inline void RceQueryRefuseReceiveWishItem::clear_guid() {
  if (guid_ != &_default_guid_) {
    guid_->clear();
  }
  _clear_bit(4);
}
inline const ::std::string& RceQueryRefuseReceiveWishItem::guid() const {
  return *guid_;
}
inline void RceQueryRefuseReceiveWishItem::set_guid(const ::std::string& value) {
  _set_bit(4);
  if (guid_ == &_default_guid_) {
    guid_ = new ::std::string;
  }
  guid_->assign(value);
}
inline void RceQueryRefuseReceiveWishItem::set_guid(const char* value) {
  _set_bit(4);
  if (guid_ == &_default_guid_) {
    guid_ = new ::std::string;
  }
  guid_->assign(value);
}
inline void RceQueryRefuseReceiveWishItem::set_guid(const char* value, size_t size) {
  _set_bit(4);
  if (guid_ == &_default_guid_) {
    guid_ = new ::std::string;
  }
  guid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RceQueryRefuseReceiveWishItem::mutable_guid() {
  _set_bit(4);
  if (guid_ == &_default_guid_) {
    guid_ = new ::std::string;
  }
  return guid_;
}

// optional string planetId = 6;
inline bool RceQueryRefuseReceiveWishItem::has_planetid() const {
  return _has_bit(5);
}
inline void RceQueryRefuseReceiveWishItem::clear_planetid() {
  if (planetid_ != &_default_planetid_) {
    planetid_->clear();
  }
  _clear_bit(5);
}
inline const ::std::string& RceQueryRefuseReceiveWishItem::planetid() const {
  return *planetid_;
}
inline void RceQueryRefuseReceiveWishItem::set_planetid(const ::std::string& value) {
  _set_bit(5);
  if (planetid_ == &_default_planetid_) {
    planetid_ = new ::std::string;
  }
  planetid_->assign(value);
}
inline void RceQueryRefuseReceiveWishItem::set_planetid(const char* value) {
  _set_bit(5);
  if (planetid_ == &_default_planetid_) {
    planetid_ = new ::std::string;
  }
  planetid_->assign(value);
}
inline void RceQueryRefuseReceiveWishItem::set_planetid(const char* value, size_t size) {
  _set_bit(5);
  if (planetid_ == &_default_planetid_) {
    planetid_ = new ::std::string;
  }
  planetid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RceQueryRefuseReceiveWishItem::mutable_planetid() {
  _set_bit(5);
  if (planetid_ == &_default_planetid_) {
    planetid_ = new ::std::string;
  }
  return planetid_;
}

// optional string time = 7;
inline bool RceQueryRefuseReceiveWishItem::has_time() const {
  return _has_bit(6);
}
inline void RceQueryRefuseReceiveWishItem::clear_time() {
  if (time_ != &_default_time_) {
    time_->clear();
  }
  _clear_bit(6);
}
inline const ::std::string& RceQueryRefuseReceiveWishItem::time() const {
  return *time_;
}
inline void RceQueryRefuseReceiveWishItem::set_time(const ::std::string& value) {
  _set_bit(6);
  if (time_ == &_default_time_) {
    time_ = new ::std::string;
  }
  time_->assign(value);
}
inline void RceQueryRefuseReceiveWishItem::set_time(const char* value) {
  _set_bit(6);
  if (time_ == &_default_time_) {
    time_ = new ::std::string;
  }
  time_->assign(value);
}
inline void RceQueryRefuseReceiveWishItem::set_time(const char* value, size_t size) {
  _set_bit(6);
  if (time_ == &_default_time_) {
    time_ = new ::std::string;
  }
  time_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RceQueryRefuseReceiveWishItem::mutable_time() {
  _set_bit(6);
  if (time_ == &_default_time_) {
    time_ = new ::std::string;
  }
  return time_;
}

// optional string msg = 8;
inline bool RceQueryRefuseReceiveWishItem::has_msg() const {
  return _has_bit(7);
}
inline void RceQueryRefuseReceiveWishItem::clear_msg() {
  if (msg_ != &_default_msg_) {
    msg_->clear();
  }
  _clear_bit(7);
}
inline const ::std::string& RceQueryRefuseReceiveWishItem::msg() const {
  return *msg_;
}
inline void RceQueryRefuseReceiveWishItem::set_msg(const ::std::string& value) {
  _set_bit(7);
  if (msg_ == &_default_msg_) {
    msg_ = new ::std::string;
  }
  msg_->assign(value);
}
inline void RceQueryRefuseReceiveWishItem::set_msg(const char* value) {
  _set_bit(7);
  if (msg_ == &_default_msg_) {
    msg_ = new ::std::string;
  }
  msg_->assign(value);
}
inline void RceQueryRefuseReceiveWishItem::set_msg(const char* value, size_t size) {
  _set_bit(7);
  if (msg_ == &_default_msg_) {
    msg_ = new ::std::string;
  }
  msg_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RceQueryRefuseReceiveWishItem::mutable_msg() {
  _set_bit(7);
  if (msg_ == &_default_msg_) {
    msg_ = new ::std::string;
  }
  return msg_;
}

// optional string url = 9;
inline bool RceQueryRefuseReceiveWishItem::has_url() const {
  return _has_bit(8);
}
inline void RceQueryRefuseReceiveWishItem::clear_url() {
  if (url_ != &_default_url_) {
    url_->clear();
  }
  _clear_bit(8);
}
inline const ::std::string& RceQueryRefuseReceiveWishItem::url() const {
  return *url_;
}
inline void RceQueryRefuseReceiveWishItem::set_url(const ::std::string& value) {
  _set_bit(8);
  if (url_ == &_default_url_) {
    url_ = new ::std::string;
  }
  url_->assign(value);
}
inline void RceQueryRefuseReceiveWishItem::set_url(const char* value) {
  _set_bit(8);
  if (url_ == &_default_url_) {
    url_ = new ::std::string;
  }
  url_->assign(value);
}
inline void RceQueryRefuseReceiveWishItem::set_url(const char* value, size_t size) {
  _set_bit(8);
  if (url_ == &_default_url_) {
    url_ = new ::std::string;
  }
  url_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RceQueryRefuseReceiveWishItem::mutable_url() {
  _set_bit(8);
  if (url_ == &_default_url_) {
    url_ = new ::std::string;
  }
  return url_;
}


#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

#endif  // PROTOBUF_RceQueryRefuseReceiveWishItem_2eproto__INCLUDED
