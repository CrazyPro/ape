// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "FriendInfoLite.pb.h"
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>

namespace {

const ::google::protobuf::Descriptor* FriendInfoLite_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FriendInfoLite_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_FriendInfoLite_2eproto() {
  protobuf_AddDesc_FriendInfoLite_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "FriendInfoLite.proto");
  GOOGLE_CHECK(file != NULL);
  FriendInfoLite_descriptor_ = file->message_type(0);
  static const int FriendInfoLite_offsets_[23] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FriendInfoLite, baseid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FriendInfoLite, first_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FriendInfoLite, pic_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FriendInfoLite, lvl_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FriendInfoLite, is_yellow_vip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FriendInfoLite, is_yellow_year_vip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FriendInfoLite, yellow_vip_level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FriendInfoLite, totalpercharge_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FriendInfoLite, lastlogontime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FriendInfoLite, qqdmdlvl_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FriendInfoLite, isqqdmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FriendInfoLite, isqqdmdyear_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FriendInfoLite, sameregion_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FriendInfoLite, platid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FriendInfoLite, finishcapturetm_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FriendInfoLite, is_sumptuous_yellow_vip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FriendInfoLite, viplevel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FriendInfoLite, viptype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FriendInfoLite, qhalldmdlvl_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FriendInfoLite, isqhalldmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FriendInfoLite, isqhalldmdyear_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FriendInfoLite, ishighqhalldmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FriendInfoLite, ishighqhalldmeyear_),
  };
  FriendInfoLite_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FriendInfoLite_descriptor_,
      FriendInfoLite::default_instance_,
      FriendInfoLite_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FriendInfoLite, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FriendInfoLite, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FriendInfoLite));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_FriendInfoLite_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FriendInfoLite_descriptor_, &FriendInfoLite::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_FriendInfoLite_2eproto() {
  delete FriendInfoLite::default_instance_;
  delete FriendInfoLite_reflection_;
}

void protobuf_AddDesc_FriendInfoLite_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\024FriendInfoLite.proto\"\311\004\n\016FriendInfoLit"
    "e\022\016\n\006baseid\030\001 \002(\t\022\022\n\nfirst_name\030\002 \002(\t\022\013\n"
    "\003pic\030\003 \001(\t\022\013\n\003lvl\030\004 \002(\r\022\034\n\ris_yellow_vip"
    "\030\005 \001(\010:\005false\022!\n\022is_yellow_year_vip\030\006 \001("
    "\010:\005false\022\033\n\020yellow_vip_level\030\007 \001(\005:\0010\022\026\n"
    "\016totalpercharge\030\010 \001(\t\022\030\n\rlastLogonTime\030\t"
    " \001(\005:\0010\022\023\n\010QQDmdLvl\030\n \001(\005:\0010\022\026\n\007isQQDmd\030"
    "\013 \001(\010:\005false\022\032\n\013isQQDmdYear\030\014 \001(\010:\005false"
    "\022\022\n\nsameRegion\030\r \001(\010\022\016\n\006platid\030\016 \001(\t\022\027\n\017"
    "finishCaptureTm\030\017 \001(\005\022&\n\027is_sumptuous_ye"
    "llow_vip\030\020 \001(\010:\005false\022\023\n\010viplevel\030\021 \001(\005:"
    "\0010\022\022\n\007viptype\030\022 \001(\005:\0010\022\026\n\013QHallDmdLvl\030\023 "
    "\001(\005:\0010\022\031\n\nisQHallDmd\030\024 \001(\010:\005false\022\035\n\016isQ"
    "HallDmdYear\030\025 \001(\010:\005false\022\035\n\016isHighQHallD"
    "md\030\026 \001(\010:\005false\022!\n\022isHighQHallDmeYear\030\027 "
    "\001(\010:\005false", 610);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "FriendInfoLite.proto", &protobuf_RegisterTypes);
  FriendInfoLite::default_instance_ = new FriendInfoLite();
  FriendInfoLite::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_FriendInfoLite_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_FriendInfoLite_2eproto {
  StaticDescriptorInitializer_FriendInfoLite_2eproto() {
    protobuf_AddDesc_FriendInfoLite_2eproto();
  }
} static_descriptor_initializer_FriendInfoLite_2eproto_;


// ===================================================================

const ::std::string FriendInfoLite::_default_baseid_;
const ::std::string FriendInfoLite::_default_first_name_;
const ::std::string FriendInfoLite::_default_pic_;
const ::std::string FriendInfoLite::_default_totalpercharge_;
const ::std::string FriendInfoLite::_default_platid_;
#ifndef _MSC_VER
const int FriendInfoLite::kBaseidFieldNumber;
const int FriendInfoLite::kFirstNameFieldNumber;
const int FriendInfoLite::kPicFieldNumber;
const int FriendInfoLite::kLvlFieldNumber;
const int FriendInfoLite::kIsYellowVipFieldNumber;
const int FriendInfoLite::kIsYellowYearVipFieldNumber;
const int FriendInfoLite::kYellowVipLevelFieldNumber;
const int FriendInfoLite::kTotalperchargeFieldNumber;
const int FriendInfoLite::kLastLogonTimeFieldNumber;
const int FriendInfoLite::kQQDmdLvlFieldNumber;
const int FriendInfoLite::kIsQQDmdFieldNumber;
const int FriendInfoLite::kIsQQDmdYearFieldNumber;
const int FriendInfoLite::kSameRegionFieldNumber;
const int FriendInfoLite::kPlatidFieldNumber;
const int FriendInfoLite::kFinishCaptureTmFieldNumber;
const int FriendInfoLite::kIsSumptuousYellowVipFieldNumber;
const int FriendInfoLite::kViplevelFieldNumber;
const int FriendInfoLite::kViptypeFieldNumber;
const int FriendInfoLite::kQHallDmdLvlFieldNumber;
const int FriendInfoLite::kIsQHallDmdFieldNumber;
const int FriendInfoLite::kIsQHallDmdYearFieldNumber;
const int FriendInfoLite::kIsHighQHallDmdFieldNumber;
const int FriendInfoLite::kIsHighQHallDmeYearFieldNumber;
#endif  // !_MSC_VER

FriendInfoLite::FriendInfoLite() {
  SharedCtor();
}

void FriendInfoLite::InitAsDefaultInstance() {
}

FriendInfoLite::FriendInfoLite(const FriendInfoLite& from) {
  SharedCtor();
  MergeFrom(from);
}

void FriendInfoLite::SharedCtor() {
  _cached_size_ = 0;
  baseid_ = const_cast< ::std::string*>(&_default_baseid_);
  first_name_ = const_cast< ::std::string*>(&_default_first_name_);
  pic_ = const_cast< ::std::string*>(&_default_pic_);
  lvl_ = 0u;
  is_yellow_vip_ = false;
  is_yellow_year_vip_ = false;
  yellow_vip_level_ = 0;
  totalpercharge_ = const_cast< ::std::string*>(&_default_totalpercharge_);
  lastlogontime_ = 0;
  qqdmdlvl_ = 0;
  isqqdmd_ = false;
  isqqdmdyear_ = false;
  sameregion_ = false;
  platid_ = const_cast< ::std::string*>(&_default_platid_);
  finishcapturetm_ = 0;
  is_sumptuous_yellow_vip_ = false;
  viplevel_ = 0;
  viptype_ = 0;
  qhalldmdlvl_ = 0;
  isqhalldmd_ = false;
  isqhalldmdyear_ = false;
  ishighqhalldmd_ = false;
  ishighqhalldmeyear_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FriendInfoLite::~FriendInfoLite() {
  SharedDtor();
}

void FriendInfoLite::SharedDtor() {
  if (baseid_ != &_default_baseid_) {
    delete baseid_;
  }
  if (first_name_ != &_default_first_name_) {
    delete first_name_;
  }
  if (pic_ != &_default_pic_) {
    delete pic_;
  }
  if (totalpercharge_ != &_default_totalpercharge_) {
    delete totalpercharge_;
  }
  if (platid_ != &_default_platid_) {
    delete platid_;
  }
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* FriendInfoLite::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FriendInfoLite_descriptor_;
}

const FriendInfoLite& FriendInfoLite::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_FriendInfoLite_2eproto();  return *default_instance_;
}

FriendInfoLite* FriendInfoLite::default_instance_ = NULL;

FriendInfoLite* FriendInfoLite::New() const {
  return new FriendInfoLite;
}

void FriendInfoLite::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (baseid_ != &_default_baseid_) {
        baseid_->clear();
      }
    }
    if (_has_bit(1)) {
      if (first_name_ != &_default_first_name_) {
        first_name_->clear();
      }
    }
    if (_has_bit(2)) {
      if (pic_ != &_default_pic_) {
        pic_->clear();
      }
    }
    lvl_ = 0u;
    is_yellow_vip_ = false;
    is_yellow_year_vip_ = false;
    yellow_vip_level_ = 0;
    if (_has_bit(7)) {
      if (totalpercharge_ != &_default_totalpercharge_) {
        totalpercharge_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    lastlogontime_ = 0;
    qqdmdlvl_ = 0;
    isqqdmd_ = false;
    isqqdmdyear_ = false;
    sameregion_ = false;
    if (_has_bit(13)) {
      if (platid_ != &_default_platid_) {
        platid_->clear();
      }
    }
    finishcapturetm_ = 0;
    is_sumptuous_yellow_vip_ = false;
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    viplevel_ = 0;
    viptype_ = 0;
    qhalldmdlvl_ = 0;
    isqhalldmd_ = false;
    isqhalldmdyear_ = false;
    ishighqhalldmd_ = false;
    ishighqhalldmeyear_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FriendInfoLite::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string baseid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadString(
              input, this->mutable_baseid()));
        ::google::protobuf::internal::WireFormat::VerifyUTF8String(
          this->baseid().data(), this->baseid().length(),
          ::google::protobuf::internal::WireFormat::PARSE);
        if (input->ExpectTag(18)) goto parse_first_name;
        break;
      }
      
      // required string first_name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_first_name:
        DO_(::google::protobuf::internal::WireFormatLite::ReadString(
              input, this->mutable_first_name()));
        ::google::protobuf::internal::WireFormat::VerifyUTF8String(
          this->first_name().data(), this->first_name().length(),
          ::google::protobuf::internal::WireFormat::PARSE);
        if (input->ExpectTag(26)) goto parse_pic;
        break;
      }
      
      // optional string pic = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_pic:
        DO_(::google::protobuf::internal::WireFormatLite::ReadString(
              input, this->mutable_pic()));
        ::google::protobuf::internal::WireFormat::VerifyUTF8String(
          this->pic().data(), this->pic().length(),
          ::google::protobuf::internal::WireFormat::PARSE);
        if (input->ExpectTag(32)) goto parse_lvl;
        break;
      }
      
      // required uint32 lvl = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_lvl:
        DO_(::google::protobuf::internal::WireFormatLite::ReadUInt32(
              input, &lvl_));
        _set_bit(3);
        if (input->ExpectTag(40)) goto parse_is_yellow_vip;
        break;
      }
      
      // optional bool is_yellow_vip = 5 [default = false];
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_is_yellow_vip:
        DO_(::google::protobuf::internal::WireFormatLite::ReadBool(
              input, &is_yellow_vip_));
        _set_bit(4);
        if (input->ExpectTag(48)) goto parse_is_yellow_year_vip;
        break;
      }
      
      // optional bool is_yellow_year_vip = 6 [default = false];
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_is_yellow_year_vip:
        DO_(::google::protobuf::internal::WireFormatLite::ReadBool(
              input, &is_yellow_year_vip_));
        _set_bit(5);
        if (input->ExpectTag(56)) goto parse_yellow_vip_level;
        break;
      }
      
      // optional int32 yellow_vip_level = 7 [default = 0];
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_yellow_vip_level:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &yellow_vip_level_));
        _set_bit(6);
        if (input->ExpectTag(66)) goto parse_totalpercharge;
        break;
      }
      
      // optional string totalpercharge = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_totalpercharge:
        DO_(::google::protobuf::internal::WireFormatLite::ReadString(
              input, this->mutable_totalpercharge()));
        ::google::protobuf::internal::WireFormat::VerifyUTF8String(
          this->totalpercharge().data(), this->totalpercharge().length(),
          ::google::protobuf::internal::WireFormat::PARSE);
        if (input->ExpectTag(72)) goto parse_lastLogonTime;
        break;
      }
      
      // optional int32 lastLogonTime = 9 [default = 0];
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_lastLogonTime:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &lastlogontime_));
        _set_bit(8);
        if (input->ExpectTag(80)) goto parse_QQDmdLvl;
        break;
      }
      
      // optional int32 QQDmdLvl = 10 [default = 0];
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_QQDmdLvl:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &qqdmdlvl_));
        _set_bit(9);
        if (input->ExpectTag(88)) goto parse_isQQDmd;
        break;
      }
      
      // optional bool isQQDmd = 11 [default = false];
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_isQQDmd:
        DO_(::google::protobuf::internal::WireFormatLite::ReadBool(
              input, &isqqdmd_));
        _set_bit(10);
        if (input->ExpectTag(96)) goto parse_isQQDmdYear;
        break;
      }
      
      // optional bool isQQDmdYear = 12 [default = false];
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_isQQDmdYear:
        DO_(::google::protobuf::internal::WireFormatLite::ReadBool(
              input, &isqqdmdyear_));
        _set_bit(11);
        if (input->ExpectTag(104)) goto parse_sameRegion;
        break;
      }
      
      // optional bool sameRegion = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_sameRegion:
        DO_(::google::protobuf::internal::WireFormatLite::ReadBool(
              input, &sameregion_));
        _set_bit(12);
        if (input->ExpectTag(114)) goto parse_platid;
        break;
      }
      
      // optional string platid = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_platid:
        DO_(::google::protobuf::internal::WireFormatLite::ReadString(
              input, this->mutable_platid()));
        ::google::protobuf::internal::WireFormat::VerifyUTF8String(
          this->platid().data(), this->platid().length(),
          ::google::protobuf::internal::WireFormat::PARSE);
        if (input->ExpectTag(120)) goto parse_finishCaptureTm;
        break;
      }
      
      // optional int32 finishCaptureTm = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_finishCaptureTm:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &finishcapturetm_));
        _set_bit(14);
        if (input->ExpectTag(128)) goto parse_is_sumptuous_yellow_vip;
        break;
      }
      
      // optional bool is_sumptuous_yellow_vip = 16 [default = false];
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_is_sumptuous_yellow_vip:
        DO_(::google::protobuf::internal::WireFormatLite::ReadBool(
              input, &is_sumptuous_yellow_vip_));
        _set_bit(15);
        if (input->ExpectTag(136)) goto parse_viplevel;
        break;
      }
      
      // optional int32 viplevel = 17 [default = 0];
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_viplevel:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &viplevel_));
        _set_bit(16);
        if (input->ExpectTag(144)) goto parse_viptype;
        break;
      }
      
      // optional int32 viptype = 18 [default = 0];
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_viptype:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &viptype_));
        _set_bit(17);
        if (input->ExpectTag(152)) goto parse_QHallDmdLvl;
        break;
      }
      
      // optional int32 QHallDmdLvl = 19 [default = 0];
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_QHallDmdLvl:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &qhalldmdlvl_));
        _set_bit(18);
        if (input->ExpectTag(160)) goto parse_isQHallDmd;
        break;
      }
      
      // optional bool isQHallDmd = 20 [default = false];
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_isQHallDmd:
        DO_(::google::protobuf::internal::WireFormatLite::ReadBool(
              input, &isqhalldmd_));
        _set_bit(19);
        if (input->ExpectTag(168)) goto parse_isQHallDmdYear;
        break;
      }
      
      // optional bool isQHallDmdYear = 21 [default = false];
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_isQHallDmdYear:
        DO_(::google::protobuf::internal::WireFormatLite::ReadBool(
              input, &isqhalldmdyear_));
        _set_bit(20);
        if (input->ExpectTag(176)) goto parse_isHighQHallDmd;
        break;
      }
      
      // optional bool isHighQHallDmd = 22 [default = false];
      case 22: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_isHighQHallDmd:
        DO_(::google::protobuf::internal::WireFormatLite::ReadBool(
              input, &ishighqhalldmd_));
        _set_bit(21);
        if (input->ExpectTag(184)) goto parse_isHighQHallDmeYear;
        break;
      }
      
      // optional bool isHighQHallDmeYear = 23 [default = false];
      case 23: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_isHighQHallDmeYear:
        DO_(::google::protobuf::internal::WireFormatLite::ReadBool(
              input, &ishighqhalldmeyear_));
        _set_bit(22);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FriendInfoLite::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    FriendInfoLite::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // required string baseid = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->baseid().data(), this->baseid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->baseid(), output);
  }
  
  // required string first_name = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->first_name().data(), this->first_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->first_name(), output);
  }
  
  // optional string pic = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->pic().data(), this->pic().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->pic(), output);
  }
  
  // required uint32 lvl = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->lvl(), output);
  }
  
  // optional bool is_yellow_vip = 5 [default = false];
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->is_yellow_vip(), output);
  }
  
  // optional bool is_yellow_year_vip = 6 [default = false];
  if (_has_bit(5)) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->is_yellow_year_vip(), output);
  }
  
  // optional int32 yellow_vip_level = 7 [default = 0];
  if (_has_bit(6)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->yellow_vip_level(), output);
  }
  
  // optional string totalpercharge = 8;
  if (_has_bit(7)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->totalpercharge().data(), this->totalpercharge().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      8, this->totalpercharge(), output);
  }
  
  // optional int32 lastLogonTime = 9 [default = 0];
  if (_has_bit(8)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->lastlogontime(), output);
  }
  
  // optional int32 QQDmdLvl = 10 [default = 0];
  if (_has_bit(9)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->qqdmdlvl(), output);
  }
  
  // optional bool isQQDmd = 11 [default = false];
  if (_has_bit(10)) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(11, this->isqqdmd(), output);
  }
  
  // optional bool isQQDmdYear = 12 [default = false];
  if (_has_bit(11)) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(12, this->isqqdmdyear(), output);
  }
  
  // optional bool sameRegion = 13;
  if (_has_bit(12)) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(13, this->sameregion(), output);
  }
  
  // optional string platid = 14;
  if (_has_bit(13)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->platid().data(), this->platid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      14, this->platid(), output);
  }
  
  // optional int32 finishCaptureTm = 15;
  if (_has_bit(14)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(15, this->finishcapturetm(), output);
  }
  
  // optional bool is_sumptuous_yellow_vip = 16 [default = false];
  if (_has_bit(15)) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(16, this->is_sumptuous_yellow_vip(), output);
  }
  
  // optional int32 viplevel = 17 [default = 0];
  if (_has_bit(16)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(17, this->viplevel(), output);
  }
  
  // optional int32 viptype = 18 [default = 0];
  if (_has_bit(17)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(18, this->viptype(), output);
  }
  
  // optional int32 QHallDmdLvl = 19 [default = 0];
  if (_has_bit(18)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(19, this->qhalldmdlvl(), output);
  }
  
  // optional bool isQHallDmd = 20 [default = false];
  if (_has_bit(19)) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(20, this->isqhalldmd(), output);
  }
  
  // optional bool isQHallDmdYear = 21 [default = false];
  if (_has_bit(20)) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(21, this->isqhalldmdyear(), output);
  }
  
  // optional bool isHighQHallDmd = 22 [default = false];
  if (_has_bit(21)) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(22, this->ishighqhalldmd(), output);
  }
  
  // optional bool isHighQHallDmeYear = 23 [default = false];
  if (_has_bit(22)) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(23, this->ishighqhalldmeyear(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FriendInfoLite::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string baseid = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->baseid().data(), this->baseid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->baseid(), target);
  }
  
  // required string first_name = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->first_name().data(), this->first_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->first_name(), target);
  }
  
  // optional string pic = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->pic().data(), this->pic().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->pic(), target);
  }
  
  // required uint32 lvl = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->lvl(), target);
  }
  
  // optional bool is_yellow_vip = 5 [default = false];
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->is_yellow_vip(), target);
  }
  
  // optional bool is_yellow_year_vip = 6 [default = false];
  if (_has_bit(5)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->is_yellow_year_vip(), target);
  }
  
  // optional int32 yellow_vip_level = 7 [default = 0];
  if (_has_bit(6)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->yellow_vip_level(), target);
  }
  
  // optional string totalpercharge = 8;
  if (_has_bit(7)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->totalpercharge().data(), this->totalpercharge().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->totalpercharge(), target);
  }
  
  // optional int32 lastLogonTime = 9 [default = 0];
  if (_has_bit(8)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->lastlogontime(), target);
  }
  
  // optional int32 QQDmdLvl = 10 [default = 0];
  if (_has_bit(9)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->qqdmdlvl(), target);
  }
  
  // optional bool isQQDmd = 11 [default = false];
  if (_has_bit(10)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(11, this->isqqdmd(), target);
  }
  
  // optional bool isQQDmdYear = 12 [default = false];
  if (_has_bit(11)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(12, this->isqqdmdyear(), target);
  }
  
  // optional bool sameRegion = 13;
  if (_has_bit(12)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(13, this->sameregion(), target);
  }
  
  // optional string platid = 14;
  if (_has_bit(13)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->platid().data(), this->platid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        14, this->platid(), target);
  }
  
  // optional int32 finishCaptureTm = 15;
  if (_has_bit(14)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(15, this->finishcapturetm(), target);
  }
  
  // optional bool is_sumptuous_yellow_vip = 16 [default = false];
  if (_has_bit(15)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(16, this->is_sumptuous_yellow_vip(), target);
  }
  
  // optional int32 viplevel = 17 [default = 0];
  if (_has_bit(16)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(17, this->viplevel(), target);
  }
  
  // optional int32 viptype = 18 [default = 0];
  if (_has_bit(17)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(18, this->viptype(), target);
  }
  
  // optional int32 QHallDmdLvl = 19 [default = 0];
  if (_has_bit(18)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(19, this->qhalldmdlvl(), target);
  }
  
  // optional bool isQHallDmd = 20 [default = false];
  if (_has_bit(19)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(20, this->isqhalldmd(), target);
  }
  
  // optional bool isQHallDmdYear = 21 [default = false];
  if (_has_bit(20)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(21, this->isqhalldmdyear(), target);
  }
  
  // optional bool isHighQHallDmd = 22 [default = false];
  if (_has_bit(21)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(22, this->ishighqhalldmd(), target);
  }
  
  // optional bool isHighQHallDmeYear = 23 [default = false];
  if (_has_bit(22)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(23, this->ishighqhalldmeyear(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FriendInfoLite::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string baseid = 1;
    if (has_baseid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->baseid());
    }
    
    // required string first_name = 2;
    if (has_first_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->first_name());
    }
    
    // optional string pic = 3;
    if (has_pic()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->pic());
    }
    
    // required uint32 lvl = 4;
    if (has_lvl()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->lvl());
    }
    
    // optional bool is_yellow_vip = 5 [default = false];
    if (has_is_yellow_vip()) {
      total_size += 1 + 1;
    }
    
    // optional bool is_yellow_year_vip = 6 [default = false];
    if (has_is_yellow_year_vip()) {
      total_size += 1 + 1;
    }
    
    // optional int32 yellow_vip_level = 7 [default = 0];
    if (has_yellow_vip_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->yellow_vip_level());
    }
    
    // optional string totalpercharge = 8;
    if (has_totalpercharge()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->totalpercharge());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 lastLogonTime = 9 [default = 0];
    if (has_lastlogontime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->lastlogontime());
    }
    
    // optional int32 QQDmdLvl = 10 [default = 0];
    if (has_qqdmdlvl()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->qqdmdlvl());
    }
    
    // optional bool isQQDmd = 11 [default = false];
    if (has_isqqdmd()) {
      total_size += 1 + 1;
    }
    
    // optional bool isQQDmdYear = 12 [default = false];
    if (has_isqqdmdyear()) {
      total_size += 1 + 1;
    }
    
    // optional bool sameRegion = 13;
    if (has_sameregion()) {
      total_size += 1 + 1;
    }
    
    // optional string platid = 14;
    if (has_platid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->platid());
    }
    
    // optional int32 finishCaptureTm = 15;
    if (has_finishcapturetm()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->finishcapturetm());
    }
    
    // optional bool is_sumptuous_yellow_vip = 16 [default = false];
    if (has_is_sumptuous_yellow_vip()) {
      total_size += 2 + 1;
    }
    
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional int32 viplevel = 17 [default = 0];
    if (has_viplevel()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->viplevel());
    }
    
    // optional int32 viptype = 18 [default = 0];
    if (has_viptype()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->viptype());
    }
    
    // optional int32 QHallDmdLvl = 19 [default = 0];
    if (has_qhalldmdlvl()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->qhalldmdlvl());
    }
    
    // optional bool isQHallDmd = 20 [default = false];
    if (has_isqhalldmd()) {
      total_size += 2 + 1;
    }
    
    // optional bool isQHallDmdYear = 21 [default = false];
    if (has_isqhalldmdyear()) {
      total_size += 2 + 1;
    }
    
    // optional bool isHighQHallDmd = 22 [default = false];
    if (has_ishighqhalldmd()) {
      total_size += 2 + 1;
    }
    
    // optional bool isHighQHallDmeYear = 23 [default = false];
    if (has_ishighqhalldmeyear()) {
      total_size += 2 + 1;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void FriendInfoLite::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FriendInfoLite* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FriendInfoLite*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FriendInfoLite::MergeFrom(const FriendInfoLite& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_baseid(from.baseid());
    }
    if (from._has_bit(1)) {
      set_first_name(from.first_name());
    }
    if (from._has_bit(2)) {
      set_pic(from.pic());
    }
    if (from._has_bit(3)) {
      set_lvl(from.lvl());
    }
    if (from._has_bit(4)) {
      set_is_yellow_vip(from.is_yellow_vip());
    }
    if (from._has_bit(5)) {
      set_is_yellow_year_vip(from.is_yellow_year_vip());
    }
    if (from._has_bit(6)) {
      set_yellow_vip_level(from.yellow_vip_level());
    }
    if (from._has_bit(7)) {
      set_totalpercharge(from.totalpercharge());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from._has_bit(8)) {
      set_lastlogontime(from.lastlogontime());
    }
    if (from._has_bit(9)) {
      set_qqdmdlvl(from.qqdmdlvl());
    }
    if (from._has_bit(10)) {
      set_isqqdmd(from.isqqdmd());
    }
    if (from._has_bit(11)) {
      set_isqqdmdyear(from.isqqdmdyear());
    }
    if (from._has_bit(12)) {
      set_sameregion(from.sameregion());
    }
    if (from._has_bit(13)) {
      set_platid(from.platid());
    }
    if (from._has_bit(14)) {
      set_finishcapturetm(from.finishcapturetm());
    }
    if (from._has_bit(15)) {
      set_is_sumptuous_yellow_vip(from.is_sumptuous_yellow_vip());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from._has_bit(16)) {
      set_viplevel(from.viplevel());
    }
    if (from._has_bit(17)) {
      set_viptype(from.viptype());
    }
    if (from._has_bit(18)) {
      set_qhalldmdlvl(from.qhalldmdlvl());
    }
    if (from._has_bit(19)) {
      set_isqhalldmd(from.isqhalldmd());
    }
    if (from._has_bit(20)) {
      set_isqhalldmdyear(from.isqhalldmdyear());
    }
    if (from._has_bit(21)) {
      set_ishighqhalldmd(from.ishighqhalldmd());
    }
    if (from._has_bit(22)) {
      set_ishighqhalldmeyear(from.ishighqhalldmeyear());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FriendInfoLite::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FriendInfoLite::CopyFrom(const FriendInfoLite& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FriendInfoLite::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000b) != 0x0000000b) return false;
  
  return true;
}

void FriendInfoLite::Swap(FriendInfoLite* other) {
  if (other != this) {
    std::swap(baseid_, other->baseid_);
    std::swap(first_name_, other->first_name_);
    std::swap(pic_, other->pic_);
    std::swap(lvl_, other->lvl_);
    std::swap(is_yellow_vip_, other->is_yellow_vip_);
    std::swap(is_yellow_year_vip_, other->is_yellow_year_vip_);
    std::swap(yellow_vip_level_, other->yellow_vip_level_);
    std::swap(totalpercharge_, other->totalpercharge_);
    std::swap(lastlogontime_, other->lastlogontime_);
    std::swap(qqdmdlvl_, other->qqdmdlvl_);
    std::swap(isqqdmd_, other->isqqdmd_);
    std::swap(isqqdmdyear_, other->isqqdmdyear_);
    std::swap(sameregion_, other->sameregion_);
    std::swap(platid_, other->platid_);
    std::swap(finishcapturetm_, other->finishcapturetm_);
    std::swap(is_sumptuous_yellow_vip_, other->is_sumptuous_yellow_vip_);
    std::swap(viplevel_, other->viplevel_);
    std::swap(viptype_, other->viptype_);
    std::swap(qhalldmdlvl_, other->qhalldmdlvl_);
    std::swap(isqhalldmd_, other->isqhalldmd_);
    std::swap(isqhalldmdyear_, other->isqhalldmdyear_);
    std::swap(ishighqhalldmd_, other->ishighqhalldmd_);
    std::swap(ishighqhalldmeyear_, other->ishighqhalldmeyear_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FriendInfoLite::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FriendInfoLite_descriptor_;
  metadata.reflection = FriendInfoLite_reflection_;
  return metadata;
}

