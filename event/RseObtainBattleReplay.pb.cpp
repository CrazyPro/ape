// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "RseObtainBattleReplay.pb.h"
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>

namespace {

const ::google::protobuf::Descriptor* MsgBattle_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgBattle_reflection_ = NULL;
const ::google::protobuf::Descriptor* RseObtainBattleReplay_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RseObtainBattleReplay_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_RseObtainBattleReplay_2eproto() {
  protobuf_AddDesc_RseObtainBattleReplay_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "RseObtainBattleReplay.proto");
  GOOGLE_CHECK(file != NULL);
  MsgBattle_descriptor_ = file->message_type(0);
  static const int MsgBattle_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgBattle, planetid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgBattle, universe_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgBattle, accountid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgBattle, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgBattle, url_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgBattle, deploys_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgBattle, attackergameunits_),
  };
  MsgBattle_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgBattle_descriptor_,
      MsgBattle::default_instance_,
      MsgBattle_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgBattle, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgBattle, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgBattle));
  RseObtainBattleReplay_descriptor_ = file->message_type(1);
  static const int RseObtainBattleReplay_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RseObtainBattleReplay, battle_),
  };
  RseObtainBattleReplay_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RseObtainBattleReplay_descriptor_,
      RseObtainBattleReplay::default_instance_,
      RseObtainBattleReplay_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RseObtainBattleReplay, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RseObtainBattleReplay, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RseObtainBattleReplay));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_RseObtainBattleReplay_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgBattle_descriptor_, &MsgBattle::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RseObtainBattleReplay_descriptor_, &RseObtainBattleReplay::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_RseObtainBattleReplay_2eproto() {
  delete MsgBattle::default_instance_;
  delete MsgBattle_reflection_;
  delete RseObtainBattleReplay::default_instance_;
  delete RseObtainBattleReplay_reflection_;
}

void protobuf_AddDesc_RseObtainBattleReplay_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\033RseObtainBattleReplay.proto\"\211\001\n\tMsgBat"
    "tle\022\020\n\010planetId\030\001 \001(\005\022\020\n\010Universe\030\002 \003(\005\022"
    "\021\n\taccountId\030\003 \001(\005\022\014\n\004name\030\004 \001(\t\022\013\n\003url\030"
    "\005 \001(\t\022\017\n\007Deploys\030\006 \001(\005\022\031\n\021AttackerGameUn"
    "its\030\007 \001(\005\"3\n\025RseObtainBattleReplay\022\032\n\006Ba"
    "ttle\030\001 \003(\0132\n.MsgBattle", 222);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "RseObtainBattleReplay.proto", &protobuf_RegisterTypes);
  MsgBattle::default_instance_ = new MsgBattle();
  RseObtainBattleReplay::default_instance_ = new RseObtainBattleReplay();
  MsgBattle::default_instance_->InitAsDefaultInstance();
  RseObtainBattleReplay::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_RseObtainBattleReplay_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_RseObtainBattleReplay_2eproto {
  StaticDescriptorInitializer_RseObtainBattleReplay_2eproto() {
    protobuf_AddDesc_RseObtainBattleReplay_2eproto();
  }
} static_descriptor_initializer_RseObtainBattleReplay_2eproto_;


// ===================================================================

const ::std::string MsgBattle::_default_name_;
const ::std::string MsgBattle::_default_url_;
#ifndef _MSC_VER
const int MsgBattle::kPlanetIdFieldNumber;
const int MsgBattle::kUniverseFieldNumber;
const int MsgBattle::kAccountIdFieldNumber;
const int MsgBattle::kNameFieldNumber;
const int MsgBattle::kUrlFieldNumber;
const int MsgBattle::kDeploysFieldNumber;
const int MsgBattle::kAttackerGameUnitsFieldNumber;
#endif  // !_MSC_VER

MsgBattle::MsgBattle() {
  SharedCtor();
}

void MsgBattle::InitAsDefaultInstance() {
}

MsgBattle::MsgBattle(const MsgBattle& from) {
  SharedCtor();
  MergeFrom(from);
}

void MsgBattle::SharedCtor() {
  _cached_size_ = 0;
  planetid_ = 0;
  accountid_ = 0;
  name_ = const_cast< ::std::string*>(&_default_name_);
  url_ = const_cast< ::std::string*>(&_default_url_);
  deploys_ = 0;
  attackergameunits_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgBattle::~MsgBattle() {
  SharedDtor();
}

void MsgBattle::SharedDtor() {
  if (name_ != &_default_name_) {
    delete name_;
  }
  if (url_ != &_default_url_) {
    delete url_;
  }
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* MsgBattle::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgBattle_descriptor_;
}

const MsgBattle& MsgBattle::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_RseObtainBattleReplay_2eproto();  return *default_instance_;
}

MsgBattle* MsgBattle::default_instance_ = NULL;

MsgBattle* MsgBattle::New() const {
  return new MsgBattle;
}

void MsgBattle::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    planetid_ = 0;
    accountid_ = 0;
    if (_has_bit(3)) {
      if (name_ != &_default_name_) {
        name_->clear();
      }
    }
    if (_has_bit(4)) {
      if (url_ != &_default_url_) {
        url_->clear();
      }
    }
    deploys_ = 0;
    attackergameunits_ = 0;
  }
  universe_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgBattle::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 planetId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &planetid_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_Universe;
        break;
      }
      
      // repeated int32 Universe = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Universe:
        ::google::protobuf::int32 value;
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &value));
        add_universe(value);
        if (input->ExpectTag(16)) goto parse_Universe;
        if (input->ExpectTag(24)) goto parse_accountId;
        break;
      }
      
      // optional int32 accountId = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_accountId:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &accountid_));
        _set_bit(2);
        if (input->ExpectTag(34)) goto parse_name;
        break;
      }
      
      // optional string name = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_name:
        DO_(::google::protobuf::internal::WireFormatLite::ReadString(
              input, this->mutable_name()));
        ::google::protobuf::internal::WireFormat::VerifyUTF8String(
          this->name().data(), this->name().length(),
          ::google::protobuf::internal::WireFormat::PARSE);
        if (input->ExpectTag(42)) goto parse_url;
        break;
      }
      
      // optional string url = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_url:
        DO_(::google::protobuf::internal::WireFormatLite::ReadString(
              input, this->mutable_url()));
        ::google::protobuf::internal::WireFormat::VerifyUTF8String(
          this->url().data(), this->url().length(),
          ::google::protobuf::internal::WireFormat::PARSE);
        if (input->ExpectTag(48)) goto parse_Deploys;
        break;
      }
      
      // optional int32 Deploys = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Deploys:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &deploys_));
        _set_bit(5);
        if (input->ExpectTag(56)) goto parse_AttackerGameUnits;
        break;
      }
      
      // optional int32 AttackerGameUnits = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_AttackerGameUnits:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &attackergameunits_));
        _set_bit(6);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MsgBattle::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    MsgBattle::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional int32 planetId = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->planetid(), output);
  }
  
  // repeated int32 Universe = 2;
  for (int i = 0; i < this->universe_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      2, this->universe(i), output);
  }
  
  // optional int32 accountId = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->accountid(), output);
  }
  
  // optional string name = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->name(), output);
  }
  
  // optional string url = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->url().data(), this->url().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->url(), output);
  }
  
  // optional int32 Deploys = 6;
  if (_has_bit(5)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->deploys(), output);
  }
  
  // optional int32 AttackerGameUnits = 7;
  if (_has_bit(6)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->attackergameunits(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MsgBattle::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 planetId = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->planetid(), target);
  }
  
  // repeated int32 Universe = 2;
  for (int i = 0; i < this->universe_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(2, this->universe(i), target);
  }
  
  // optional int32 accountId = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->accountid(), target);
  }
  
  // optional string name = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->name(), target);
  }
  
  // optional string url = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->url().data(), this->url().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->url(), target);
  }
  
  // optional int32 Deploys = 6;
  if (_has_bit(5)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->deploys(), target);
  }
  
  // optional int32 AttackerGameUnits = 7;
  if (_has_bit(6)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->attackergameunits(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MsgBattle::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 planetId = 1;
    if (has_planetid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->planetid());
    }
    
    // optional int32 accountId = 3;
    if (has_accountid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->accountid());
    }
    
    // optional string name = 4;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }
    
    // optional string url = 5;
    if (has_url()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->url());
    }
    
    // optional int32 Deploys = 6;
    if (has_deploys()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->deploys());
    }
    
    // optional int32 AttackerGameUnits = 7;
    if (has_attackergameunits()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->attackergameunits());
    }
    
  }
  // repeated int32 Universe = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->universe_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->universe(i));
    }
    total_size += 1 * this->universe_size() + data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void MsgBattle::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgBattle* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgBattle*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgBattle::MergeFrom(const MsgBattle& from) {
  GOOGLE_CHECK_NE(&from, this);
  universe_.MergeFrom(from.universe_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_planetid(from.planetid());
    }
    if (from._has_bit(2)) {
      set_accountid(from.accountid());
    }
    if (from._has_bit(3)) {
      set_name(from.name());
    }
    if (from._has_bit(4)) {
      set_url(from.url());
    }
    if (from._has_bit(5)) {
      set_deploys(from.deploys());
    }
    if (from._has_bit(6)) {
      set_attackergameunits(from.attackergameunits());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgBattle::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgBattle::CopyFrom(const MsgBattle& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgBattle::IsInitialized() const {
  
  return true;
}

void MsgBattle::Swap(MsgBattle* other) {
  if (other != this) {
    std::swap(planetid_, other->planetid_);
    universe_.Swap(&other->universe_);
    std::swap(accountid_, other->accountid_);
    std::swap(name_, other->name_);
    std::swap(url_, other->url_);
    std::swap(deploys_, other->deploys_);
    std::swap(attackergameunits_, other->attackergameunits_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgBattle::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgBattle_descriptor_;
  metadata.reflection = MsgBattle_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RseObtainBattleReplay::kBattleFieldNumber;
#endif  // !_MSC_VER

RseObtainBattleReplay::RseObtainBattleReplay() {
  SharedCtor();
}

void RseObtainBattleReplay::InitAsDefaultInstance() {
}

RseObtainBattleReplay::RseObtainBattleReplay(const RseObtainBattleReplay& from) {
  SharedCtor();
  MergeFrom(from);
}

void RseObtainBattleReplay::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RseObtainBattleReplay::~RseObtainBattleReplay() {
  SharedDtor();
}

void RseObtainBattleReplay::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* RseObtainBattleReplay::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RseObtainBattleReplay_descriptor_;
}

const RseObtainBattleReplay& RseObtainBattleReplay::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_RseObtainBattleReplay_2eproto();  return *default_instance_;
}

RseObtainBattleReplay* RseObtainBattleReplay::default_instance_ = NULL;

RseObtainBattleReplay* RseObtainBattleReplay::New() const {
  return new RseObtainBattleReplay;
}

void RseObtainBattleReplay::Clear() {
  battle_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RseObtainBattleReplay::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .MsgBattle Battle = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_Battle:
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, add_battle()));
        if (input->ExpectTag(10)) goto parse_Battle;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RseObtainBattleReplay::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    RseObtainBattleReplay::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // repeated .MsgBattle Battle = 1;
  for (int i = 0; i < this->battle_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      1, this->battle(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RseObtainBattleReplay::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .MsgBattle Battle = 1;
  for (int i = 0; i < this->battle_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->battle(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RseObtainBattleReplay::ByteSize() const {
  int total_size = 0;
  
  // repeated .MsgBattle Battle = 1;
  total_size += 1 * this->battle_size();
  for (int i = 0; i < this->battle_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->battle(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void RseObtainBattleReplay::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RseObtainBattleReplay* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RseObtainBattleReplay*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RseObtainBattleReplay::MergeFrom(const RseObtainBattleReplay& from) {
  GOOGLE_CHECK_NE(&from, this);
  battle_.MergeFrom(from.battle_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RseObtainBattleReplay::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RseObtainBattleReplay::CopyFrom(const RseObtainBattleReplay& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RseObtainBattleReplay::IsInitialized() const {
  
  return true;
}

void RseObtainBattleReplay::Swap(RseObtainBattleReplay* other) {
  if (other != this) {
    battle_.Swap(&other->battle_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RseObtainBattleReplay::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RseObtainBattleReplay_descriptor_;
  metadata.reflection = RseObtainBattleReplay_reflection_;
  return metadata;
}

