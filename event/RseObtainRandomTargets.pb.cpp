// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "RseObtainRandomTargets.pb.h"
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>

namespace {

const ::google::protobuf::Descriptor* NonFriendsList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NonFriendsList_reflection_ = NULL;
const ::google::protobuf::Descriptor* RseObtainRandomTargets_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RseObtainRandomTargets_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_RseObtainRandomTargets_2eproto() {
  protobuf_AddDesc_RseObtainRandomTargets_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "RseObtainRandomTargets.proto");
  GOOGLE_CHECK(file != NULL);
  NonFriendsList_descriptor_ = file->message_type(0);
  static const int NonFriendsList_offsets_[13] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NonFriendsList, planetid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NonFriendsList, accountid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NonFriendsList, planetsku_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NonFriendsList, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NonFriendsList, score_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NonFriendsList, hqlevel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NonFriendsList, xp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NonFriendsList, levelbasedonscore_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NonFriendsList, user_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NonFriendsList, url_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NonFriendsList, damageprotectiontimeleft_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NonFriendsList, tutorialcompleted_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NonFriendsList, isonline_),
  };
  NonFriendsList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NonFriendsList_descriptor_,
      NonFriendsList::default_instance_,
      NonFriendsList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NonFriendsList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NonFriendsList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NonFriendsList));
  RseObtainRandomTargets_descriptor_ = file->message_type(1);
  static const int RseObtainRandomTargets_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RseObtainRandomTargets, nonfriendslist_),
  };
  RseObtainRandomTargets_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RseObtainRandomTargets_descriptor_,
      RseObtainRandomTargets::default_instance_,
      RseObtainRandomTargets_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RseObtainRandomTargets, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RseObtainRandomTargets, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RseObtainRandomTargets));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_RseObtainRandomTargets_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NonFriendsList_descriptor_, &NonFriendsList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RseObtainRandomTargets_descriptor_, &RseObtainRandomTargets::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_RseObtainRandomTargets_2eproto() {
  delete NonFriendsList::default_instance_;
  delete NonFriendsList_reflection_;
  delete RseObtainRandomTargets::default_instance_;
  delete RseObtainRandomTargets_reflection_;
}

void protobuf_AddDesc_RseObtainRandomTargets_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\034RseObtainRandomTargets.proto\"\207\002\n\016NonFr"
    "iendsList\022\020\n\010planetId\030\001 \001(\005\022\021\n\taccountId"
    "\030\002 \001(\003\022\021\n\tplanetSku\030\003 \001(\t\022\014\n\004name\030\004 \001(\t\022"
    "\r\n\005score\030\005 \001(\005\022\017\n\007hqLevel\030\006 \001(\005\022\n\n\002xp\030\007 "
    "\001(\003\022\031\n\021levelBasedOnScore\030\010 \001(\005\022\014\n\004user\030\t"
    " \003(\005\022\013\n\003url\030\n \001(\t\022 \n\030damageProtectionTim"
    "eLeft\030\013 \001(\005\022\031\n\021tutorialCompleted\030\014 \001(\005\022\020"
    "\n\010isOnline\030\r \001(\005\"A\n\026RseObtainRandomTarge"
    "ts\022\'\n\016nonFriendsList\030\001 \003(\0132\017.NonFriendsL"
    "ist", 363);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "RseObtainRandomTargets.proto", &protobuf_RegisterTypes);
  NonFriendsList::default_instance_ = new NonFriendsList();
  RseObtainRandomTargets::default_instance_ = new RseObtainRandomTargets();
  NonFriendsList::default_instance_->InitAsDefaultInstance();
  RseObtainRandomTargets::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_RseObtainRandomTargets_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_RseObtainRandomTargets_2eproto {
  StaticDescriptorInitializer_RseObtainRandomTargets_2eproto() {
    protobuf_AddDesc_RseObtainRandomTargets_2eproto();
  }
} static_descriptor_initializer_RseObtainRandomTargets_2eproto_;


// ===================================================================

const ::std::string NonFriendsList::_default_planetsku_;
const ::std::string NonFriendsList::_default_name_;
const ::std::string NonFriendsList::_default_url_;
#ifndef _MSC_VER
const int NonFriendsList::kPlanetIdFieldNumber;
const int NonFriendsList::kAccountIdFieldNumber;
const int NonFriendsList::kPlanetSkuFieldNumber;
const int NonFriendsList::kNameFieldNumber;
const int NonFriendsList::kScoreFieldNumber;
const int NonFriendsList::kHqLevelFieldNumber;
const int NonFriendsList::kXpFieldNumber;
const int NonFriendsList::kLevelBasedOnScoreFieldNumber;
const int NonFriendsList::kUserFieldNumber;
const int NonFriendsList::kUrlFieldNumber;
const int NonFriendsList::kDamageProtectionTimeLeftFieldNumber;
const int NonFriendsList::kTutorialCompletedFieldNumber;
const int NonFriendsList::kIsOnlineFieldNumber;
#endif  // !_MSC_VER

NonFriendsList::NonFriendsList() {
  SharedCtor();
}

void NonFriendsList::InitAsDefaultInstance() {
}

NonFriendsList::NonFriendsList(const NonFriendsList& from) {
  SharedCtor();
  MergeFrom(from);
}

void NonFriendsList::SharedCtor() {
  _cached_size_ = 0;
  planetid_ = 0;
  accountid_ = GOOGLE_LONGLONG(0);
  planetsku_ = const_cast< ::std::string*>(&_default_planetsku_);
  name_ = const_cast< ::std::string*>(&_default_name_);
  score_ = 0;
  hqlevel_ = 0;
  xp_ = GOOGLE_LONGLONG(0);
  levelbasedonscore_ = 0;
  url_ = const_cast< ::std::string*>(&_default_url_);
  damageprotectiontimeleft_ = 0;
  tutorialcompleted_ = 0;
  isonline_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NonFriendsList::~NonFriendsList() {
  SharedDtor();
}

void NonFriendsList::SharedDtor() {
  if (planetsku_ != &_default_planetsku_) {
    delete planetsku_;
  }
  if (name_ != &_default_name_) {
    delete name_;
  }
  if (url_ != &_default_url_) {
    delete url_;
  }
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* NonFriendsList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NonFriendsList_descriptor_;
}

const NonFriendsList& NonFriendsList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_RseObtainRandomTargets_2eproto();  return *default_instance_;
}

NonFriendsList* NonFriendsList::default_instance_ = NULL;

NonFriendsList* NonFriendsList::New() const {
  return new NonFriendsList;
}

void NonFriendsList::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    planetid_ = 0;
    accountid_ = GOOGLE_LONGLONG(0);
    if (_has_bit(2)) {
      if (planetsku_ != &_default_planetsku_) {
        planetsku_->clear();
      }
    }
    if (_has_bit(3)) {
      if (name_ != &_default_name_) {
        name_->clear();
      }
    }
    score_ = 0;
    hqlevel_ = 0;
    xp_ = GOOGLE_LONGLONG(0);
    levelbasedonscore_ = 0;
  }
  if (_has_bits_[9 / 32] & (0xffu << (9 % 32))) {
    if (_has_bit(9)) {
      if (url_ != &_default_url_) {
        url_->clear();
      }
    }
    damageprotectiontimeleft_ = 0;
    tutorialcompleted_ = 0;
    isonline_ = 0;
  }
  user_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NonFriendsList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 planetId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &planetid_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_accountId;
        break;
      }
      
      // optional int64 accountId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_accountId:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt64(
              input, &accountid_));
        _set_bit(1);
        if (input->ExpectTag(26)) goto parse_planetSku;
        break;
      }
      
      // optional string planetSku = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_planetSku:
        DO_(::google::protobuf::internal::WireFormatLite::ReadString(
              input, this->mutable_planetsku()));
        ::google::protobuf::internal::WireFormat::VerifyUTF8String(
          this->planetsku().data(), this->planetsku().length(),
          ::google::protobuf::internal::WireFormat::PARSE);
        if (input->ExpectTag(34)) goto parse_name;
        break;
      }
      
      // optional string name = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_name:
        DO_(::google::protobuf::internal::WireFormatLite::ReadString(
              input, this->mutable_name()));
        ::google::protobuf::internal::WireFormat::VerifyUTF8String(
          this->name().data(), this->name().length(),
          ::google::protobuf::internal::WireFormat::PARSE);
        if (input->ExpectTag(40)) goto parse_score;
        break;
      }
      
      // optional int32 score = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_score:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &score_));
        _set_bit(4);
        if (input->ExpectTag(48)) goto parse_hqLevel;
        break;
      }
      
      // optional int32 hqLevel = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_hqLevel:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &hqlevel_));
        _set_bit(5);
        if (input->ExpectTag(56)) goto parse_xp;
        break;
      }
      
      // optional int64 xp = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_xp:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt64(
              input, &xp_));
        _set_bit(6);
        if (input->ExpectTag(64)) goto parse_levelBasedOnScore;
        break;
      }
      
      // optional int32 levelBasedOnScore = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_levelBasedOnScore:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &levelbasedonscore_));
        _set_bit(7);
        if (input->ExpectTag(72)) goto parse_user;
        break;
      }
      
      // repeated int32 user = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_user:
        ::google::protobuf::int32 value;
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &value));
        add_user(value);
        if (input->ExpectTag(72)) goto parse_user;
        if (input->ExpectTag(82)) goto parse_url;
        break;
      }
      
      // optional string url = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_url:
        DO_(::google::protobuf::internal::WireFormatLite::ReadString(
              input, this->mutable_url()));
        ::google::protobuf::internal::WireFormat::VerifyUTF8String(
          this->url().data(), this->url().length(),
          ::google::protobuf::internal::WireFormat::PARSE);
        if (input->ExpectTag(88)) goto parse_damageProtectionTimeLeft;
        break;
      }
      
      // optional int32 damageProtectionTimeLeft = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_damageProtectionTimeLeft:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &damageprotectiontimeleft_));
        _set_bit(10);
        if (input->ExpectTag(96)) goto parse_tutorialCompleted;
        break;
      }
      
      // optional int32 tutorialCompleted = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_tutorialCompleted:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &tutorialcompleted_));
        _set_bit(11);
        if (input->ExpectTag(104)) goto parse_isOnline;
        break;
      }
      
      // optional int32 isOnline = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_isOnline:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &isonline_));
        _set_bit(12);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NonFriendsList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    NonFriendsList::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional int32 planetId = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->planetid(), output);
  }
  
  // optional int64 accountId = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->accountid(), output);
  }
  
  // optional string planetSku = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->planetsku().data(), this->planetsku().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->planetsku(), output);
  }
  
  // optional string name = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->name(), output);
  }
  
  // optional int32 score = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->score(), output);
  }
  
  // optional int32 hqLevel = 6;
  if (_has_bit(5)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->hqlevel(), output);
  }
  
  // optional int64 xp = 7;
  if (_has_bit(6)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(7, this->xp(), output);
  }
  
  // optional int32 levelBasedOnScore = 8;
  if (_has_bit(7)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->levelbasedonscore(), output);
  }
  
  // repeated int32 user = 9;
  for (int i = 0; i < this->user_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      9, this->user(i), output);
  }
  
  // optional string url = 10;
  if (_has_bit(9)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->url().data(), this->url().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      10, this->url(), output);
  }
  
  // optional int32 damageProtectionTimeLeft = 11;
  if (_has_bit(10)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->damageprotectiontimeleft(), output);
  }
  
  // optional int32 tutorialCompleted = 12;
  if (_has_bit(11)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->tutorialcompleted(), output);
  }
  
  // optional int32 isOnline = 13;
  if (_has_bit(12)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->isonline(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NonFriendsList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 planetId = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->planetid(), target);
  }
  
  // optional int64 accountId = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->accountid(), target);
  }
  
  // optional string planetSku = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->planetsku().data(), this->planetsku().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->planetsku(), target);
  }
  
  // optional string name = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->name(), target);
  }
  
  // optional int32 score = 5;
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->score(), target);
  }
  
  // optional int32 hqLevel = 6;
  if (_has_bit(5)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->hqlevel(), target);
  }
  
  // optional int64 xp = 7;
  if (_has_bit(6)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(7, this->xp(), target);
  }
  
  // optional int32 levelBasedOnScore = 8;
  if (_has_bit(7)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->levelbasedonscore(), target);
  }
  
  // repeated int32 user = 9;
  for (int i = 0; i < this->user_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(9, this->user(i), target);
  }
  
  // optional string url = 10;
  if (_has_bit(9)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->url().data(), this->url().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->url(), target);
  }
  
  // optional int32 damageProtectionTimeLeft = 11;
  if (_has_bit(10)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->damageprotectiontimeleft(), target);
  }
  
  // optional int32 tutorialCompleted = 12;
  if (_has_bit(11)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->tutorialcompleted(), target);
  }
  
  // optional int32 isOnline = 13;
  if (_has_bit(12)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->isonline(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NonFriendsList::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 planetId = 1;
    if (has_planetid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->planetid());
    }
    
    // optional int64 accountId = 2;
    if (has_accountid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->accountid());
    }
    
    // optional string planetSku = 3;
    if (has_planetsku()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->planetsku());
    }
    
    // optional string name = 4;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }
    
    // optional int32 score = 5;
    if (has_score()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->score());
    }
    
    // optional int32 hqLevel = 6;
    if (has_hqlevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->hqlevel());
    }
    
    // optional int64 xp = 7;
    if (has_xp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->xp());
    }
    
    // optional int32 levelBasedOnScore = 8;
    if (has_levelbasedonscore()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->levelbasedonscore());
    }
    
  }
  if (_has_bits_[9 / 32] & (0xffu << (9 % 32))) {
    // optional string url = 10;
    if (has_url()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->url());
    }
    
    // optional int32 damageProtectionTimeLeft = 11;
    if (has_damageprotectiontimeleft()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->damageprotectiontimeleft());
    }
    
    // optional int32 tutorialCompleted = 12;
    if (has_tutorialcompleted()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tutorialcompleted());
    }
    
    // optional int32 isOnline = 13;
    if (has_isonline()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->isonline());
    }
    
  }
  // repeated int32 user = 9;
  {
    int data_size = 0;
    for (int i = 0; i < this->user_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->user(i));
    }
    total_size += 1 * this->user_size() + data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void NonFriendsList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NonFriendsList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NonFriendsList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NonFriendsList::MergeFrom(const NonFriendsList& from) {
  GOOGLE_CHECK_NE(&from, this);
  user_.MergeFrom(from.user_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_planetid(from.planetid());
    }
    if (from._has_bit(1)) {
      set_accountid(from.accountid());
    }
    if (from._has_bit(2)) {
      set_planetsku(from.planetsku());
    }
    if (from._has_bit(3)) {
      set_name(from.name());
    }
    if (from._has_bit(4)) {
      set_score(from.score());
    }
    if (from._has_bit(5)) {
      set_hqlevel(from.hqlevel());
    }
    if (from._has_bit(6)) {
      set_xp(from.xp());
    }
    if (from._has_bit(7)) {
      set_levelbasedonscore(from.levelbasedonscore());
    }
  }
  if (from._has_bits_[9 / 32] & (0xffu << (9 % 32))) {
    if (from._has_bit(9)) {
      set_url(from.url());
    }
    if (from._has_bit(10)) {
      set_damageprotectiontimeleft(from.damageprotectiontimeleft());
    }
    if (from._has_bit(11)) {
      set_tutorialcompleted(from.tutorialcompleted());
    }
    if (from._has_bit(12)) {
      set_isonline(from.isonline());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NonFriendsList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NonFriendsList::CopyFrom(const NonFriendsList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NonFriendsList::IsInitialized() const {
  
  return true;
}

void NonFriendsList::Swap(NonFriendsList* other) {
  if (other != this) {
    std::swap(planetid_, other->planetid_);
    std::swap(accountid_, other->accountid_);
    std::swap(planetsku_, other->planetsku_);
    std::swap(name_, other->name_);
    std::swap(score_, other->score_);
    std::swap(hqlevel_, other->hqlevel_);
    std::swap(xp_, other->xp_);
    std::swap(levelbasedonscore_, other->levelbasedonscore_);
    user_.Swap(&other->user_);
    std::swap(url_, other->url_);
    std::swap(damageprotectiontimeleft_, other->damageprotectiontimeleft_);
    std::swap(tutorialcompleted_, other->tutorialcompleted_);
    std::swap(isonline_, other->isonline_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NonFriendsList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NonFriendsList_descriptor_;
  metadata.reflection = NonFriendsList_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RseObtainRandomTargets::kNonFriendsListFieldNumber;
#endif  // !_MSC_VER

RseObtainRandomTargets::RseObtainRandomTargets() {
  SharedCtor();
}

void RseObtainRandomTargets::InitAsDefaultInstance() {
}

RseObtainRandomTargets::RseObtainRandomTargets(const RseObtainRandomTargets& from) {
  SharedCtor();
  MergeFrom(from);
}

void RseObtainRandomTargets::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RseObtainRandomTargets::~RseObtainRandomTargets() {
  SharedDtor();
}

void RseObtainRandomTargets::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* RseObtainRandomTargets::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RseObtainRandomTargets_descriptor_;
}

const RseObtainRandomTargets& RseObtainRandomTargets::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_RseObtainRandomTargets_2eproto();  return *default_instance_;
}

RseObtainRandomTargets* RseObtainRandomTargets::default_instance_ = NULL;

RseObtainRandomTargets* RseObtainRandomTargets::New() const {
  return new RseObtainRandomTargets;
}

void RseObtainRandomTargets::Clear() {
  nonfriendslist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RseObtainRandomTargets::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .NonFriendsList nonFriendsList = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_nonFriendsList:
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, add_nonfriendslist()));
        if (input->ExpectTag(10)) goto parse_nonFriendsList;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RseObtainRandomTargets::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    RseObtainRandomTargets::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // repeated .NonFriendsList nonFriendsList = 1;
  for (int i = 0; i < this->nonfriendslist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      1, this->nonfriendslist(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RseObtainRandomTargets::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .NonFriendsList nonFriendsList = 1;
  for (int i = 0; i < this->nonfriendslist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->nonfriendslist(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RseObtainRandomTargets::ByteSize() const {
  int total_size = 0;
  
  // repeated .NonFriendsList nonFriendsList = 1;
  total_size += 1 * this->nonfriendslist_size();
  for (int i = 0; i < this->nonfriendslist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->nonfriendslist(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void RseObtainRandomTargets::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RseObtainRandomTargets* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RseObtainRandomTargets*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RseObtainRandomTargets::MergeFrom(const RseObtainRandomTargets& from) {
  GOOGLE_CHECK_NE(&from, this);
  nonfriendslist_.MergeFrom(from.nonfriendslist_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RseObtainRandomTargets::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RseObtainRandomTargets::CopyFrom(const RseObtainRandomTargets& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RseObtainRandomTargets::IsInitialized() const {
  
  return true;
}

void RseObtainRandomTargets::Swap(RseObtainRandomTargets* other) {
  if (other != this) {
    nonfriendslist_.Swap(&other->nonfriendslist_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RseObtainRandomTargets::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RseObtainRandomTargets_descriptor_;
  metadata.reflection = RseObtainRandomTargets_reflection_;
  return metadata;
}

