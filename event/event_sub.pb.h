// Generated by the protocol buffer compiler.  DO NOT EDIT!

#ifndef PROTOBUF_event_5fsub_2eproto__INCLUDED
#define PROTOBUF_event_5fsub_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2002000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2002000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>
#include "FriendInfoLite.pb.h"

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_event_5fsub_2eproto();
void protobuf_AssignDesc_event_5fsub_2eproto();
void protobuf_ShutdownFile_event_5fsub_2eproto();

class WebCrossPromotion;
class UserLogin_Req;
class UserLogin_Rsp;
class WorkingStatus_Req;
class UserAuth_Req;
class UserAuth_Rsp;
class SendRemoteUser_Req;
class WG_UserLeave;
class GWG_FriendRequest;
class ForwardInfo;
class WebGetRegion;
class GCG_PlanetLite;
class GCG_City;
class GCG_CountryNeed;
class GRG_RegionNeed;
class GRG_RankNeed;
class GSG_StatNeed;
class HttpAskMsg;
class HttpAnswerMsg;
class NewStar_Req;
class NewStar_Rsp;
class GWG_GameUnit;
class GWG_BattleInfo;
class Admin_AddCash_Req;
class Admin_AddCash_Rsp;

// ===================================================================

class WebCrossPromotion : public ::google::protobuf::Message {
 public:
  WebCrossPromotion();
  virtual ~WebCrossPromotion();
  
  WebCrossPromotion(const WebCrossPromotion& from);
  
  inline WebCrossPromotion& operator=(const WebCrossPromotion& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const WebCrossPromotion& default_instance();
  void Swap(WebCrossPromotion* other);
  
  // implements Message ----------------------------------------------
  
  WebCrossPromotion* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const WebCrossPromotion& from);
  void MergeFrom(const WebCrossPromotion& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const { _cached_size_ = size; }
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional string chanle = 1;
  inline bool has_chanle() const;
  inline void clear_chanle();
  static const int kChanleFieldNumber = 1;
  inline const ::std::string& chanle() const;
  inline void set_chanle(const ::std::string& value);
  inline void set_chanle(const char* value);
  inline void set_chanle(const char* value, size_t size);
  inline ::std::string* mutable_chanle();
  
  // optional string date = 2;
  inline bool has_date() const;
  inline void clear_date();
  static const int kDateFieldNumber = 2;
  inline const ::std::string& date() const;
  inline void set_date(const ::std::string& value);
  inline void set_date(const char* value);
  inline void set_date(const char* value, size_t size);
  inline ::std::string* mutable_date();
  
  // repeated string cdk = 3;
  inline int cdk_size() const;
  inline void clear_cdk();
  static const int kCdkFieldNumber = 3;
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& cdk() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_cdk();
  inline const ::std::string& cdk(int index) const;
  inline ::std::string* mutable_cdk(int index);
  inline void set_cdk(int index, const ::std::string& value);
  inline void set_cdk(int index, const char* value);
  inline void set_cdk(int index, const char* value, size_t size);
  inline ::std::string* add_cdk();
  inline void add_cdk(const ::std::string& value);
  inline void add_cdk(const char* value);
  inline void add_cdk(const char* value, size_t size);
  
  // optional bool canuse = 4 [default = false];
  inline bool has_canuse() const;
  inline void clear_canuse();
  static const int kCanuseFieldNumber = 4;
  inline bool canuse() const;
  inline void set_canuse(bool value);
  
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::std::string* chanle_;
  static const ::std::string _default_chanle_;
  ::std::string* date_;
  static const ::std::string _default_date_;
  ::google::protobuf::RepeatedPtrField< ::std::string> cdk_;
  bool canuse_;
  friend void  protobuf_AddDesc_event_5fsub_2eproto();
  friend void protobuf_AssignDesc_event_5fsub_2eproto();
  friend void protobuf_ShutdownFile_event_5fsub_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static WebCrossPromotion* default_instance_;
};
// -------------------------------------------------------------------

class UserLogin_Req : public ::google::protobuf::Message {
 public:
  UserLogin_Req();
  virtual ~UserLogin_Req();
  
  UserLogin_Req(const UserLogin_Req& from);
  
  inline UserLogin_Req& operator=(const UserLogin_Req& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const UserLogin_Req& default_instance();
  void Swap(UserLogin_Req* other);
  
  // implements Message ----------------------------------------------
  
  UserLogin_Req* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const UserLogin_Req& from);
  void MergeFrom(const UserLogin_Req& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const { _cached_size_ = size; }
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required int32 siteid = 1;
  inline bool has_siteid() const;
  inline void clear_siteid();
  static const int kSiteidFieldNumber = 1;
  inline ::google::protobuf::int32 siteid() const;
  inline void set_siteid(::google::protobuf::int32 value);
  
  // required string platform_id = 2;
  inline bool has_platform_id() const;
  inline void clear_platform_id();
  static const int kPlatformIdFieldNumber = 2;
  inline const ::std::string& platform_id() const;
  inline void set_platform_id(const ::std::string& value);
  inline void set_platform_id(const char* value);
  inline void set_platform_id(const char* value, size_t size);
  inline ::std::string* mutable_platform_id();
  
  // required string name = 3;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 3;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  
  // required string profile_link = 4;
  inline bool has_profile_link() const;
  inline void clear_profile_link();
  static const int kProfileLinkFieldNumber = 4;
  inline const ::std::string& profile_link() const;
  inline void set_profile_link(const ::std::string& value);
  inline void set_profile_link(const char* value);
  inline void set_profile_link(const char* value, size_t size);
  inline ::std::string* mutable_profile_link();
  
  // required int32 gender = 5;
  inline bool has_gender() const;
  inline void clear_gender();
  static const int kGenderFieldNumber = 5;
  inline ::google::protobuf::int32 gender() const;
  inline void set_gender(::google::protobuf::int32 value);
  
  // required bool is_yellow_dmd = 6;
  inline bool has_is_yellow_dmd() const;
  inline void clear_is_yellow_dmd();
  static const int kIsYellowDmdFieldNumber = 6;
  inline bool is_yellow_dmd() const;
  inline void set_is_yellow_dmd(bool value);
  
  // required bool is_yellow_dmd_year = 7;
  inline bool has_is_yellow_dmd_year() const;
  inline void clear_is_yellow_dmd_year();
  static const int kIsYellowDmdYearFieldNumber = 7;
  inline bool is_yellow_dmd_year() const;
  inline void set_is_yellow_dmd_year(bool value);
  
  // required int32 yellow_dmd_lv = 8;
  inline bool has_yellow_dmd_lv() const;
  inline void clear_yellow_dmd_lv();
  static const int kYellowDmdLvFieldNumber = 8;
  inline ::google::protobuf::int32 yellow_dmd_lv() const;
  inline void set_yellow_dmd_lv(::google::protobuf::int32 value);
  
  // repeated string friends_platid = 9;
  inline int friends_platid_size() const;
  inline void clear_friends_platid();
  static const int kFriendsPlatidFieldNumber = 9;
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& friends_platid() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_friends_platid();
  inline const ::std::string& friends_platid(int index) const;
  inline ::std::string* mutable_friends_platid(int index);
  inline void set_friends_platid(int index, const ::std::string& value);
  inline void set_friends_platid(int index, const char* value);
  inline void set_friends_platid(int index, const char* value, size_t size);
  inline ::std::string* add_friends_platid();
  inline void add_friends_platid(const ::std::string& value);
  inline void add_friends_platid(const char* value);
  inline void add_friends_platid(const char* value, size_t size);
  
  // required int32 webfd = 10;
  inline bool has_webfd() const;
  inline void clear_webfd();
  static const int kWebfdFieldNumber = 10;
  inline ::google::protobuf::int32 webfd() const;
  inline void set_webfd(::google::protobuf::int32 value);
  
  // required string sid = 11;
  inline bool has_sid() const;
  inline void clear_sid();
  static const int kSidFieldNumber = 11;
  inline const ::std::string& sid() const;
  inline void set_sid(const ::std::string& value);
  inline void set_sid(const char* value);
  inline void set_sid(const char* value, size_t size);
  inline ::std::string* mutable_sid();
  
  // optional int32 mydb_ret = 12 [default = 0];
  inline bool has_mydb_ret() const;
  inline void clear_mydb_ret();
  static const int kMydbRetFieldNumber = 12;
  inline ::google::protobuf::int32 mydb_ret() const;
  inline void set_mydb_ret(::google::protobuf::int32 value);
  
  // optional int32 mydb_oldid = 13 [default = 0];
  inline bool has_mydb_oldid() const;
  inline void clear_mydb_oldid();
  static const int kMydbOldidFieldNumber = 13;
  inline ::google::protobuf::int32 mydb_oldid() const;
  inline void set_mydb_oldid(::google::protobuf::int32 value);
  
  // required int32 region = 14;
  inline bool has_region() const;
  inline void clear_region();
  static const int kRegionFieldNumber = 14;
  inline ::google::protobuf::int32 region() const;
  inline void set_region(::google::protobuf::int32 value);
  
  // optional int64 uid = 15 [default = 0];
  inline bool has_uid() const;
  inline void clear_uid();
  static const int kUidFieldNumber = 15;
  inline ::google::protobuf::int64 uid() const;
  inline void set_uid(::google::protobuf::int64 value);
  
  // optional int32 level = 16 [default = 0];
  inline bool has_level() const;
  inline void clear_level();
  static const int kLevelFieldNumber = 16;
  inline ::google::protobuf::int32 level() const;
  inline void set_level(::google::protobuf::int32 value);
  
  // optional int64 defregion = 17 [default = 0];
  inline bool has_defregion() const;
  inline void clear_defregion();
  static const int kDefregionFieldNumber = 17;
  inline ::google::protobuf::int64 defregion() const;
  inline void set_defregion(::google::protobuf::int64 value);
  
  // optional int32 undealGiftCnt = 18 [default = 0];
  inline bool has_undealgiftcnt() const;
  inline void clear_undealgiftcnt();
  static const int kUndealGiftCntFieldNumber = 18;
  inline ::google::protobuf::int32 undealgiftcnt() const;
  inline void set_undealgiftcnt(::google::protobuf::int32 value);
  
  // optional int32 inviteFrdCnt = 19 [default = 0];
  inline bool has_invitefrdcnt() const;
  inline void clear_invitefrdcnt();
  static const int kInviteFrdCntFieldNumber = 19;
  inline ::google::protobuf::int32 invitefrdcnt() const;
  inline void set_invitefrdcnt(::google::protobuf::int32 value);
  
  // optional uint32 yellowDmdtime = 20 [default = 0];
  inline bool has_yellowdmdtime() const;
  inline void clear_yellowdmdtime();
  static const int kYellowDmdtimeFieldNumber = 20;
  inline ::google::protobuf::uint32 yellowdmdtime() const;
  inline void set_yellowdmdtime(::google::protobuf::uint32 value);
  
  // optional int64 gettime = 21 [default = 0];
  inline bool has_gettime() const;
  inline void clear_gettime();
  static const int kGettimeFieldNumber = 21;
  inline ::google::protobuf::int64 gettime() const;
  inline void set_gettime(::google::protobuf::int64 value);
  
  // optional string invitefriendid = 22 [default = ""];
  inline bool has_invitefriendid() const;
  inline void clear_invitefriendid();
  static const int kInvitefriendidFieldNumber = 22;
  inline const ::std::string& invitefriendid() const;
  inline void set_invitefriendid(const ::std::string& value);
  inline void set_invitefriendid(const char* value);
  inline void set_invitefriendid(const char* value, size_t size);
  inline ::std::string* mutable_invitefriendid();
  
  // optional bool isnewplayer = 23 [default = false];
  inline bool has_isnewplayer() const;
  inline void clear_isnewplayer();
  static const int kIsnewplayerFieldNumber = 23;
  inline bool isnewplayer() const;
  inline void set_isnewplayer(bool value);
  
  // optional int32 undealFrdGiftCnt = 24 [default = 0];
  inline bool has_undealfrdgiftcnt() const;
  inline void clear_undealfrdgiftcnt();
  static const int kUndealFrdGiftCntFieldNumber = 24;
  inline ::google::protobuf::int32 undealfrdgiftcnt() const;
  inline void set_undealfrdgiftcnt(::google::protobuf::int32 value);
  
  // optional int32 city = 25 [default = 0];
  inline bool has_city() const;
  inline void clear_city();
  static const int kCityFieldNumber = 25;
  inline ::google::protobuf::int32 city() const;
  inline void set_city(::google::protobuf::int32 value);
  
  // optional string via = 26;
  inline bool has_via() const;
  inline void clear_via();
  static const int kViaFieldNumber = 26;
  inline const ::std::string& via() const;
  inline void set_via(const ::std::string& value);
  inline void set_via(const char* value);
  inline void set_via(const char* value, size_t size);
  inline ::std::string* mutable_via();
  
  // optional bool isrecall = 27 [default = false];
  inline bool has_isrecall() const;
  inline void clear_isrecall();
  static const int kIsrecallFieldNumber = 27;
  inline bool isrecall() const;
  inline void set_isrecall(bool value);
  
  // optional bool is_high_yellow_dmd = 28 [default = false];
  inline bool has_is_high_yellow_dmd() const;
  inline void clear_is_high_yellow_dmd();
  static const int kIsHighYellowDmdFieldNumber = 28;
  inline bool is_high_yellow_dmd() const;
  inline void set_is_high_yellow_dmd(bool value);
  
  // optional bool isApp51Act = 29 [default = false];
  inline bool has_isapp51act() const;
  inline void clear_isapp51act();
  static const int kIsApp51ActFieldNumber = 29;
  inline bool isapp51act() const;
  inline void set_isapp51act(bool value);
  
  // optional int32 daySendGiftCnt = 30 [default = 0];
  inline bool has_daysendgiftcnt() const;
  inline void clear_daysendgiftcnt();
  static const int kDaySendGiftCntFieldNumber = 30;
  inline ::google::protobuf::int32 daysendgiftcnt() const;
  inline void set_daysendgiftcnt(::google::protobuf::int32 value);
  
  // optional int32 inviteFrdCntDay = 31 [default = 0];
  inline bool has_invitefrdcntday() const;
  inline void clear_invitefrdcntday();
  static const int kInviteFrdCntDayFieldNumber = 31;
  inline ::google::protobuf::int32 invitefrdcntday() const;
  inline void set_invitefrdcntday(::google::protobuf::int32 value);
  
  // optional int32 customFlag = 32 [default = 0];
  inline bool has_customflag() const;
  inline void clear_customflag();
  static const int kCustomFlagFieldNumber = 32;
  inline ::google::protobuf::int32 customflag() const;
  inline void set_customflag(::google::protobuf::int32 value);
  
  // optional string taskMarketId = 33 [default = ""];
  inline bool has_taskmarketid() const;
  inline void clear_taskmarketid();
  static const int kTaskMarketIdFieldNumber = 33;
  inline const ::std::string& taskmarketid() const;
  inline void set_taskmarketid(const ::std::string& value);
  inline void set_taskmarketid(const char* value);
  inline void set_taskmarketid(const char* value, size_t size);
  inline ::std::string* mutable_taskmarketid();
  
  // optional int32 qqTaskStep = 34 [default = 0];
  inline bool has_qqtaskstep() const;
  inline void clear_qqtaskstep();
  static const int kQqTaskStepFieldNumber = 34;
  inline ::google::protobuf::int32 qqtaskstep() const;
  inline void set_qqtaskstep(::google::protobuf::int32 value);
  
  // optional .WebCrossPromotion promotion = 35;
  inline bool has_promotion() const;
  inline void clear_promotion();
  static const int kPromotionFieldNumber = 35;
  inline const ::WebCrossPromotion& promotion() const;
  inline ::WebCrossPromotion* mutable_promotion();
  
  // repeated int32 inviteGiftRecord = 36;
  inline int invitegiftrecord_size() const;
  inline void clear_invitegiftrecord();
  static const int kInviteGiftRecordFieldNumber = 36;
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >& invitegiftrecord() const
      ;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >* mutable_invitegiftrecord();
  inline ::google::protobuf::int32 invitegiftrecord(int index) const;
  inline void set_invitegiftrecord(int index, ::google::protobuf::int32 value);
  inline void add_invitegiftrecord(::google::protobuf::int32 value);
  
  // optional int32 nBackFlowFlag = 37 [default = 0];
  inline bool has_nbackflowflag() const;
  inline void clear_nbackflowflag();
  static const int kNBackFlowFlagFieldNumber = 37;
  inline ::google::protobuf::int32 nbackflowflag() const;
  inline void set_nbackflowflag(::google::protobuf::int32 value);
  
  // optional int32 nAdultFlag = 38 [default = 100];
  inline bool has_nadultflag() const;
  inline void clear_nadultflag();
  static const int kNAdultFlagFieldNumber = 38;
  inline ::google::protobuf::int32 nadultflag() const;
  inline void set_nadultflag(::google::protobuf::int32 value);
  
  // optional bool is_high_dmd_year = 39 [default = false];
  inline bool has_is_high_dmd_year() const;
  inline void clear_is_high_dmd_year();
  static const int kIsHighDmdYearFieldNumber = 39;
  inline bool is_high_dmd_year() const;
  inline void set_is_high_dmd_year(bool value);
  
  // optional uint32 bluedmdtime = 40 [default = 0];
  inline bool has_bluedmdtime() const;
  inline void clear_bluedmdtime();
  static const int kBluedmdtimeFieldNumber = 40;
  inline ::google::protobuf::uint32 bluedmdtime() const;
  inline void set_bluedmdtime(::google::protobuf::uint32 value);
  
  // optional int32 bluetime = 41 [default = 0];
  inline bool has_bluetime() const;
  inline void clear_bluetime();
  static const int kBluetimeFieldNumber = 41;
  inline ::google::protobuf::int32 bluetime() const;
  inline void set_bluetime(::google::protobuf::int32 value);
  
  // optional int32 blueyeartime = 42 [default = 0];
  inline bool has_blueyeartime() const;
  inline void clear_blueyeartime();
  static const int kBlueyeartimeFieldNumber = 42;
  inline ::google::protobuf::int32 blueyeartime() const;
  inline void set_blueyeartime(::google::protobuf::int32 value);
  
  // optional int32 highbluetime = 43 [default = 0];
  inline bool has_highbluetime() const;
  inline void clear_highbluetime();
  static const int kHighbluetimeFieldNumber = 43;
  inline ::google::protobuf::int32 highbluetime() const;
  inline void set_highbluetime(::google::protobuf::int32 value);
  
  // optional int32 highblueyeartime = 44 [default = 0];
  inline bool has_highblueyeartime() const;
  inline void clear_highblueyeartime();
  static const int kHighblueyeartimeFieldNumber = 44;
  inline ::google::protobuf::int32 highblueyeartime() const;
  inline void set_highblueyeartime(::google::protobuf::int32 value);
  
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::google::protobuf::int32 siteid_;
  ::std::string* platform_id_;
  static const ::std::string _default_platform_id_;
  ::std::string* name_;
  static const ::std::string _default_name_;
  ::std::string* profile_link_;
  static const ::std::string _default_profile_link_;
  ::google::protobuf::int32 gender_;
  bool is_yellow_dmd_;
  bool is_yellow_dmd_year_;
  ::google::protobuf::int32 yellow_dmd_lv_;
  ::google::protobuf::RepeatedPtrField< ::std::string> friends_platid_;
  ::google::protobuf::int32 webfd_;
  ::std::string* sid_;
  static const ::std::string _default_sid_;
  ::google::protobuf::int32 mydb_ret_;
  ::google::protobuf::int32 mydb_oldid_;
  ::google::protobuf::int32 region_;
  ::google::protobuf::int64 uid_;
  ::google::protobuf::int32 level_;
  ::google::protobuf::int64 defregion_;
  ::google::protobuf::int32 undealgiftcnt_;
  ::google::protobuf::int32 invitefrdcnt_;
  ::google::protobuf::uint32 yellowdmdtime_;
  ::google::protobuf::int64 gettime_;
  ::std::string* invitefriendid_;
  static const ::std::string _default_invitefriendid_;
  bool isnewplayer_;
  ::google::protobuf::int32 undealfrdgiftcnt_;
  ::google::protobuf::int32 city_;
  ::std::string* via_;
  static const ::std::string _default_via_;
  bool isrecall_;
  bool is_high_yellow_dmd_;
  bool isapp51act_;
  ::google::protobuf::int32 daysendgiftcnt_;
  ::google::protobuf::int32 invitefrdcntday_;
  ::google::protobuf::int32 customflag_;
  ::std::string* taskmarketid_;
  static const ::std::string _default_taskmarketid_;
  ::google::protobuf::int32 qqtaskstep_;
  ::WebCrossPromotion* promotion_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > invitegiftrecord_;
  ::google::protobuf::int32 nbackflowflag_;
  ::google::protobuf::int32 nadultflag_;
  bool is_high_dmd_year_;
  ::google::protobuf::uint32 bluedmdtime_;
  ::google::protobuf::int32 bluetime_;
  ::google::protobuf::int32 blueyeartime_;
  ::google::protobuf::int32 highbluetime_;
  ::google::protobuf::int32 highblueyeartime_;
  friend void  protobuf_AddDesc_event_5fsub_2eproto();
  friend void protobuf_AssignDesc_event_5fsub_2eproto();
  friend void protobuf_ShutdownFile_event_5fsub_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(44 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static UserLogin_Req* default_instance_;
};
// -------------------------------------------------------------------

class UserLogin_Rsp : public ::google::protobuf::Message {
 public:
  UserLogin_Rsp();
  virtual ~UserLogin_Rsp();
  
  UserLogin_Rsp(const UserLogin_Rsp& from);
  
  inline UserLogin_Rsp& operator=(const UserLogin_Rsp& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const UserLogin_Rsp& default_instance();
  void Swap(UserLogin_Rsp* other);
  
  // implements Message ----------------------------------------------
  
  UserLogin_Rsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const UserLogin_Rsp& from);
  void MergeFrom(const UserLogin_Rsp& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const { _cached_size_ = size; }
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required int64 uid = 1;
  inline bool has_uid() const;
  inline void clear_uid();
  static const int kUidFieldNumber = 1;
  inline ::google::protobuf::int64 uid() const;
  inline void set_uid(::google::protobuf::int64 value);
  
  // required string secret = 2;
  inline bool has_secret() const;
  inline void clear_secret();
  static const int kSecretFieldNumber = 2;
  inline const ::std::string& secret() const;
  inline void set_secret(const ::std::string& value);
  inline void set_secret(const char* value);
  inline void set_secret(const char* value, size_t size);
  inline ::std::string* mutable_secret();
  
  // required string server = 3;
  inline bool has_server() const;
  inline void clear_server();
  static const int kServerFieldNumber = 3;
  inline const ::std::string& server() const;
  inline void set_server(const ::std::string& value);
  inline void set_server(const char* value);
  inline void set_server(const char* value, size_t size);
  inline ::std::string* mutable_server();
  
  // required int32 port = 4;
  inline bool has_port() const;
  inline void clear_port();
  static const int kPortFieldNumber = 4;
  inline ::google::protobuf::int32 port() const;
  inline void set_port(::google::protobuf::int32 value);
  
  // required int32 port1 = 5;
  inline bool has_port1() const;
  inline void clear_port1();
  static const int kPort1FieldNumber = 5;
  inline ::google::protobuf::int32 port1() const;
  inline void set_port1(::google::protobuf::int32 value);
  
  // required int32 webfd = 6;
  inline bool has_webfd() const;
  inline void clear_webfd();
  static const int kWebfdFieldNumber = 6;
  inline ::google::protobuf::int32 webfd() const;
  inline void set_webfd(::google::protobuf::int32 value);
  
  // required string sid = 7;
  inline bool has_sid() const;
  inline void clear_sid();
  static const int kSidFieldNumber = 7;
  inline const ::std::string& sid() const;
  inline void set_sid(const ::std::string& value);
  inline void set_sid(const char* value);
  inline void set_sid(const char* value, size_t size);
  inline ::std::string* mutable_sid();
  
  // required string mainload = 8;
  inline bool has_mainload() const;
  inline void clear_mainload();
  static const int kMainloadFieldNumber = 8;
  inline const ::std::string& mainload() const;
  inline void set_mainload(const ::std::string& value);
  inline void set_mainload(const char* value);
  inline void set_mainload(const char* value, size_t size);
  inline ::std::string* mutable_mainload();
  
  // required string version = 9;
  inline bool has_version() const;
  inline void clear_version();
  static const int kVersionFieldNumber = 9;
  inline const ::std::string& version() const;
  inline void set_version(const ::std::string& value);
  inline void set_version(const char* value);
  inline void set_version(const char* value, size_t size);
  inline ::std::string* mutable_version();
  
  // required int32 region = 10;
  inline bool has_region() const;
  inline void clear_region();
  static const int kRegionFieldNumber = 10;
  inline ::google::protobuf::int32 region() const;
  inline void set_region(::google::protobuf::int32 value);
  
  // optional int64 gettime = 11 [default = 0];
  inline bool has_gettime() const;
  inline void clear_gettime();
  static const int kGettimeFieldNumber = 11;
  inline ::google::protobuf::int64 gettime() const;
  inline void set_gettime(::google::protobuf::int64 value);
  
  // optional string platform_id = 12;
  inline bool has_platform_id() const;
  inline void clear_platform_id();
  static const int kPlatformIdFieldNumber = 12;
  inline const ::std::string& platform_id() const;
  inline void set_platform_id(const ::std::string& value);
  inline void set_platform_id(const char* value);
  inline void set_platform_id(const char* value, size_t size);
  inline ::std::string* mutable_platform_id();
  
  // optional int32 logintimes = 13;
  inline bool has_logintimes() const;
  inline void clear_logintimes();
  static const int kLogintimesFieldNumber = 13;
  inline ::google::protobuf::int32 logintimes() const;
  inline void set_logintimes(::google::protobuf::int32 value);
  
  // optional int32 playerlvl = 14;
  inline bool has_playerlvl() const;
  inline void clear_playerlvl();
  static const int kPlayerlvlFieldNumber = 14;
  inline ::google::protobuf::int32 playerlvl() const;
  inline void set_playerlvl(::google::protobuf::int32 value);
  
  // optional bool isnewplayer = 15 [default = false];
  inline bool has_isnewplayer() const;
  inline void clear_isnewplayer();
  static const int kIsnewplayerFieldNumber = 15;
  inline bool isnewplayer() const;
  inline void set_isnewplayer(bool value);
  
  // optional int32 customFlag = 16 [default = 0];
  inline bool has_customflag() const;
  inline void clear_customflag();
  static const int kCustomFlagFieldNumber = 16;
  inline ::google::protobuf::int32 customflag() const;
  inline void set_customflag(::google::protobuf::int32 value);
  
  // optional string channel = 17 [default = ""];
  inline bool has_channel() const;
  inline void clear_channel();
  static const int kChannelFieldNumber = 17;
  inline const ::std::string& channel() const;
  inline void set_channel(const ::std::string& value);
  inline void set_channel(const char* value);
  inline void set_channel(const char* value, size_t size);
  inline ::std::string* mutable_channel();
  
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::google::protobuf::int64 uid_;
  ::std::string* secret_;
  static const ::std::string _default_secret_;
  ::std::string* server_;
  static const ::std::string _default_server_;
  ::google::protobuf::int32 port_;
  ::google::protobuf::int32 port1_;
  ::google::protobuf::int32 webfd_;
  ::std::string* sid_;
  static const ::std::string _default_sid_;
  ::std::string* mainload_;
  static const ::std::string _default_mainload_;
  ::std::string* version_;
  static const ::std::string _default_version_;
  ::google::protobuf::int32 region_;
  ::google::protobuf::int64 gettime_;
  ::std::string* platform_id_;
  static const ::std::string _default_platform_id_;
  ::google::protobuf::int32 logintimes_;
  ::google::protobuf::int32 playerlvl_;
  bool isnewplayer_;
  ::google::protobuf::int32 customflag_;
  ::std::string* channel_;
  static const ::std::string _default_channel_;
  friend void  protobuf_AddDesc_event_5fsub_2eproto();
  friend void protobuf_AssignDesc_event_5fsub_2eproto();
  friend void protobuf_ShutdownFile_event_5fsub_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(17 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static UserLogin_Rsp* default_instance_;
};
// -------------------------------------------------------------------

class WorkingStatus_Req : public ::google::protobuf::Message {
 public:
  WorkingStatus_Req();
  virtual ~WorkingStatus_Req();
  
  WorkingStatus_Req(const WorkingStatus_Req& from);
  
  inline WorkingStatus_Req& operator=(const WorkingStatus_Req& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const WorkingStatus_Req& default_instance();
  void Swap(WorkingStatus_Req* other);
  
  // implements Message ----------------------------------------------
  
  WorkingStatus_Req* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const WorkingStatus_Req& from);
  void MergeFrom(const WorkingStatus_Req& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const { _cached_size_ = size; }
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required int32 gid = 1;
  inline bool has_gid() const;
  inline void clear_gid();
  static const int kGidFieldNumber = 1;
  inline ::google::protobuf::int32 gid() const;
  inline void set_gid(::google::protobuf::int32 value);
  
  // required bool finish = 2;
  inline bool has_finish() const;
  inline void clear_finish();
  static const int kFinishFieldNumber = 2;
  inline bool finish() const;
  inline void set_finish(bool value);
  
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::google::protobuf::int32 gid_;
  bool finish_;
  friend void  protobuf_AddDesc_event_5fsub_2eproto();
  friend void protobuf_AssignDesc_event_5fsub_2eproto();
  friend void protobuf_ShutdownFile_event_5fsub_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static WorkingStatus_Req* default_instance_;
};
// -------------------------------------------------------------------

class UserAuth_Req : public ::google::protobuf::Message {
 public:
  UserAuth_Req();
  virtual ~UserAuth_Req();
  
  UserAuth_Req(const UserAuth_Req& from);
  
  inline UserAuth_Req& operator=(const UserAuth_Req& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const UserAuth_Req& default_instance();
  void Swap(UserAuth_Req* other);
  
  // implements Message ----------------------------------------------
  
  UserAuth_Req* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const UserAuth_Req& from);
  void MergeFrom(const UserAuth_Req& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const { _cached_size_ = size; }
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required int64 uid = 1;
  inline bool has_uid() const;
  inline void clear_uid();
  static const int kUidFieldNumber = 1;
  inline ::google::protobuf::int64 uid() const;
  inline void set_uid(::google::protobuf::int64 value);
  
  // required int64 secret = 2;
  inline bool has_secret() const;
  inline void clear_secret();
  static const int kSecretFieldNumber = 2;
  inline ::google::protobuf::int64 secret() const;
  inline void set_secret(::google::protobuf::int64 value);
  
  // required int32 sockfd = 3;
  inline bool has_sockfd() const;
  inline void clear_sockfd();
  static const int kSockfdFieldNumber = 3;
  inline ::google::protobuf::int32 sockfd() const;
  inline void set_sockfd(::google::protobuf::int32 value);
  
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::google::protobuf::int64 uid_;
  ::google::protobuf::int64 secret_;
  ::google::protobuf::int32 sockfd_;
  friend void  protobuf_AddDesc_event_5fsub_2eproto();
  friend void protobuf_AssignDesc_event_5fsub_2eproto();
  friend void protobuf_ShutdownFile_event_5fsub_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static UserAuth_Req* default_instance_;
};
// -------------------------------------------------------------------

class UserAuth_Rsp : public ::google::protobuf::Message {
 public:
  UserAuth_Rsp();
  virtual ~UserAuth_Rsp();
  
  UserAuth_Rsp(const UserAuth_Rsp& from);
  
  inline UserAuth_Rsp& operator=(const UserAuth_Rsp& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const UserAuth_Rsp& default_instance();
  void Swap(UserAuth_Rsp* other);
  
  // implements Message ----------------------------------------------
  
  UserAuth_Rsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const UserAuth_Rsp& from);
  void MergeFrom(const UserAuth_Rsp& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const { _cached_size_ = size; }
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required bool pass = 1;
  inline bool has_pass() const;
  inline void clear_pass();
  static const int kPassFieldNumber = 1;
  inline bool pass() const;
  inline void set_pass(bool value);
  
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  bool pass_;
  friend void  protobuf_AddDesc_event_5fsub_2eproto();
  friend void protobuf_AssignDesc_event_5fsub_2eproto();
  friend void protobuf_ShutdownFile_event_5fsub_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static UserAuth_Rsp* default_instance_;
};
// -------------------------------------------------------------------

class SendRemoteUser_Req : public ::google::protobuf::Message {
 public:
  SendRemoteUser_Req();
  virtual ~SendRemoteUser_Req();
  
  SendRemoteUser_Req(const SendRemoteUser_Req& from);
  
  inline SendRemoteUser_Req& operator=(const SendRemoteUser_Req& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const SendRemoteUser_Req& default_instance();
  void Swap(SendRemoteUser_Req* other);
  
  // implements Message ----------------------------------------------
  
  SendRemoteUser_Req* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SendRemoteUser_Req& from);
  void MergeFrom(const SendRemoteUser_Req& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const { _cached_size_ = size; }
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required int64 uid = 1;
  inline bool has_uid() const;
  inline void clear_uid();
  static const int kUidFieldNumber = 1;
  inline ::google::protobuf::int64 uid() const;
  inline void set_uid(::google::protobuf::int64 value);
  
  // required int32 cmd = 2;
  inline bool has_cmd() const;
  inline void clear_cmd();
  static const int kCmdFieldNumber = 2;
  inline ::google::protobuf::int32 cmd() const;
  inline void set_cmd(::google::protobuf::int32 value);
  
  // required string text = 3;
  inline bool has_text() const;
  inline void clear_text();
  static const int kTextFieldNumber = 3;
  inline const ::std::string& text() const;
  inline void set_text(const ::std::string& value);
  inline void set_text(const char* value);
  inline void set_text(const char* value, size_t size);
  inline ::std::string* mutable_text();
  
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::google::protobuf::int64 uid_;
  ::google::protobuf::int32 cmd_;
  ::std::string* text_;
  static const ::std::string _default_text_;
  friend void  protobuf_AddDesc_event_5fsub_2eproto();
  friend void protobuf_AssignDesc_event_5fsub_2eproto();
  friend void protobuf_ShutdownFile_event_5fsub_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static SendRemoteUser_Req* default_instance_;
};
// -------------------------------------------------------------------

class WG_UserLeave : public ::google::protobuf::Message {
 public:
  WG_UserLeave();
  virtual ~WG_UserLeave();
  
  WG_UserLeave(const WG_UserLeave& from);
  
  inline WG_UserLeave& operator=(const WG_UserLeave& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const WG_UserLeave& default_instance();
  void Swap(WG_UserLeave* other);
  
  // implements Message ----------------------------------------------
  
  WG_UserLeave* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const WG_UserLeave& from);
  void MergeFrom(const WG_UserLeave& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const { _cached_size_ = size; }
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required int32 fd = 1;
  inline bool has_fd() const;
  inline void clear_fd();
  static const int kFdFieldNumber = 1;
  inline ::google::protobuf::int32 fd() const;
  inline void set_fd(::google::protobuf::int32 value);
  
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::google::protobuf::int32 fd_;
  friend void  protobuf_AddDesc_event_5fsub_2eproto();
  friend void protobuf_AssignDesc_event_5fsub_2eproto();
  friend void protobuf_ShutdownFile_event_5fsub_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static WG_UserLeave* default_instance_;
};
// -------------------------------------------------------------------

class GWG_FriendRequest : public ::google::protobuf::Message {
 public:
  GWG_FriendRequest();
  virtual ~GWG_FriendRequest();
  
  GWG_FriendRequest(const GWG_FriendRequest& from);
  
  inline GWG_FriendRequest& operator=(const GWG_FriendRequest& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const GWG_FriendRequest& default_instance();
  void Swap(GWG_FriendRequest* other);
  
  // implements Message ----------------------------------------------
  
  GWG_FriendRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GWG_FriendRequest& from);
  void MergeFrom(const GWG_FriendRequest& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const { _cached_size_ = size; }
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional int64 tuid = 1 [default = -1];
  inline bool has_tuid() const;
  inline void clear_tuid();
  static const int kTuidFieldNumber = 1;
  inline ::google::protobuf::int64 tuid() const;
  inline void set_tuid(::google::protobuf::int64 value);
  
  // optional bool ret = 2 [default = false];
  inline bool has_ret() const;
  inline void clear_ret();
  static const int kRetFieldNumber = 2;
  inline bool ret() const;
  inline void set_ret(bool value);
  
  // optional .FriendInfoLite info = 3;
  inline bool has_info() const;
  inline void clear_info();
  static const int kInfoFieldNumber = 3;
  inline const ::FriendInfoLite& info() const;
  inline ::FriendInfoLite* mutable_info();
  
  // optional int32 plat_type = 4 [default = 0];
  inline bool has_plat_type() const;
  inline void clear_plat_type();
  static const int kPlatTypeFieldNumber = 4;
  inline ::google::protobuf::int32 plat_type() const;
  inline void set_plat_type(::google::protobuf::int32 value);
  
  // optional string platid = 5 [default = ""];
  inline bool has_platid() const;
  inline void clear_platid();
  static const int kPlatidFieldNumber = 5;
  inline const ::std::string& platid() const;
  inline void set_platid(const ::std::string& value);
  inline void set_platid(const char* value);
  inline void set_platid(const char* value, size_t size);
  inline ::std::string* mutable_platid();
  
  // optional bool is_plat_friend = 6 [default = true];
  inline bool has_is_plat_friend() const;
  inline void clear_is_plat_friend();
  static const int kIsPlatFriendFieldNumber = 6;
  inline bool is_plat_friend() const;
  inline void set_is_plat_friend(bool value);
  
  // optional int32 region = 7;
  inline bool has_region() const;
  inline void clear_region();
  static const int kRegionFieldNumber = 7;
  inline ::google::protobuf::int32 region() const;
  inline void set_region(::google::protobuf::int32 value);
  
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::google::protobuf::int64 tuid_;
  bool ret_;
  ::FriendInfoLite* info_;
  ::google::protobuf::int32 plat_type_;
  ::std::string* platid_;
  static const ::std::string _default_platid_;
  bool is_plat_friend_;
  ::google::protobuf::int32 region_;
  friend void  protobuf_AddDesc_event_5fsub_2eproto();
  friend void protobuf_AssignDesc_event_5fsub_2eproto();
  friend void protobuf_ShutdownFile_event_5fsub_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(7 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static GWG_FriendRequest* default_instance_;
};
// -------------------------------------------------------------------

class ForwardInfo : public ::google::protobuf::Message {
 public:
  ForwardInfo();
  virtual ~ForwardInfo();
  
  ForwardInfo(const ForwardInfo& from);
  
  inline ForwardInfo& operator=(const ForwardInfo& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const ForwardInfo& default_instance();
  void Swap(ForwardInfo* other);
  
  // implements Message ----------------------------------------------
  
  ForwardInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ForwardInfo& from);
  void MergeFrom(const ForwardInfo& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const { _cached_size_ = size; }
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional int64 uid = 1 [default = -1];
  inline bool has_uid() const;
  inline void clear_uid();
  static const int kUidFieldNumber = 1;
  inline ::google::protobuf::int64 uid() const;
  inline void set_uid(::google::protobuf::int64 value);
  
  // optional string platid = 2 [default = "0"];
  inline bool has_platid() const;
  inline void clear_platid();
  static const int kPlatidFieldNumber = 2;
  inline const ::std::string& platid() const;
  inline void set_platid(const ::std::string& value);
  inline void set_platid(const char* value);
  inline void set_platid(const char* value, size_t size);
  inline ::std::string* mutable_platid();
  
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::google::protobuf::int64 uid_;
  ::std::string* platid_;
  static const ::std::string _default_platid_;
  friend void  protobuf_AddDesc_event_5fsub_2eproto();
  friend void protobuf_AssignDesc_event_5fsub_2eproto();
  friend void protobuf_ShutdownFile_event_5fsub_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static ForwardInfo* default_instance_;
};
// -------------------------------------------------------------------

class WebGetRegion : public ::google::protobuf::Message {
 public:
  WebGetRegion();
  virtual ~WebGetRegion();
  
  WebGetRegion(const WebGetRegion& from);
  
  inline WebGetRegion& operator=(const WebGetRegion& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const WebGetRegion& default_instance();
  void Swap(WebGetRegion* other);
  
  // implements Message ----------------------------------------------
  
  WebGetRegion* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const WebGetRegion& from);
  void MergeFrom(const WebGetRegion& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const { _cached_size_ = size; }
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required string openid = 1;
  inline bool has_openid() const;
  inline void clear_openid();
  static const int kOpenidFieldNumber = 1;
  inline const ::std::string& openid() const;
  inline void set_openid(const ::std::string& value);
  inline void set_openid(const char* value);
  inline void set_openid(const char* value, size_t size);
  inline ::std::string* mutable_openid();
  
  // required int32 fd = 2;
  inline bool has_fd() const;
  inline void clear_fd();
  static const int kFdFieldNumber = 2;
  inline ::google::protobuf::int32 fd() const;
  inline void set_fd(::google::protobuf::int32 value);
  
  // repeated int32 srvRegion = 3;
  inline int srvregion_size() const;
  inline void clear_srvregion();
  static const int kSrvRegionFieldNumber = 3;
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >& srvregion() const
      ;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >* mutable_srvregion();
  inline ::google::protobuf::int32 srvregion(int index) const;
  inline void set_srvregion(int index, ::google::protobuf::int32 value);
  inline void add_srvregion(::google::protobuf::int32 value);
  
  // optional int32 lastregion = 4;
  inline bool has_lastregion() const;
  inline void clear_lastregion();
  static const int kLastregionFieldNumber = 4;
  inline ::google::protobuf::int32 lastregion() const;
  inline void set_lastregion(::google::protobuf::int32 value);
  
  // required string sid = 5;
  inline bool has_sid() const;
  inline void clear_sid();
  static const int kSidFieldNumber = 5;
  inline const ::std::string& sid() const;
  inline void set_sid(const ::std::string& value);
  inline void set_sid(const char* value);
  inline void set_sid(const char* value, size_t size);
  inline ::std::string* mutable_sid();
  
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::std::string* openid_;
  static const ::std::string _default_openid_;
  ::google::protobuf::int32 fd_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > srvregion_;
  ::google::protobuf::int32 lastregion_;
  ::std::string* sid_;
  static const ::std::string _default_sid_;
  friend void  protobuf_AddDesc_event_5fsub_2eproto();
  friend void protobuf_AssignDesc_event_5fsub_2eproto();
  friend void protobuf_ShutdownFile_event_5fsub_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static WebGetRegion* default_instance_;
};
// -------------------------------------------------------------------

class GCG_PlanetLite : public ::google::protobuf::Message {
 public:
  GCG_PlanetLite();
  virtual ~GCG_PlanetLite();
  
  GCG_PlanetLite(const GCG_PlanetLite& from);
  
  inline GCG_PlanetLite& operator=(const GCG_PlanetLite& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const GCG_PlanetLite& default_instance();
  void Swap(GCG_PlanetLite* other);
  
  // implements Message ----------------------------------------------
  
  GCG_PlanetLite* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GCG_PlanetLite& from);
  void MergeFrom(const GCG_PlanetLite& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const { _cached_size_ = size; }
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional int64 uid = 1;
  inline bool has_uid() const;
  inline void clear_uid();
  static const int kUidFieldNumber = 1;
  inline ::google::protobuf::int64 uid() const;
  inline void set_uid(::google::protobuf::int64 value);
  
  // optional int32 planetId = 2;
  inline bool has_planetid() const;
  inline void clear_planetid();
  static const int kPlanetIdFieldNumber = 2;
  inline ::google::protobuf::int32 planetid() const;
  inline void set_planetid(::google::protobuf::int32 value);
  
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::google::protobuf::int64 uid_;
  ::google::protobuf::int32 planetid_;
  friend void  protobuf_AddDesc_event_5fsub_2eproto();
  friend void protobuf_AssignDesc_event_5fsub_2eproto();
  friend void protobuf_ShutdownFile_event_5fsub_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static GCG_PlanetLite* default_instance_;
};
// -------------------------------------------------------------------

class GCG_City : public ::google::protobuf::Message {
 public:
  GCG_City();
  virtual ~GCG_City();
  
  GCG_City(const GCG_City& from);
  
  inline GCG_City& operator=(const GCG_City& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const GCG_City& default_instance();
  void Swap(GCG_City* other);
  
  // implements Message ----------------------------------------------
  
  GCG_City* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GCG_City& from);
  void MergeFrom(const GCG_City& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const { _cached_size_ = size; }
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required int32 cityID = 1;
  inline bool has_cityid() const;
  inline void clear_cityid();
  static const int kCityIDFieldNumber = 1;
  inline ::google::protobuf::int32 cityid() const;
  inline void set_cityid(::google::protobuf::int32 value);
  
  // optional int32 x = 2;
  inline bool has_x() const;
  inline void clear_x();
  static const int kXFieldNumber = 2;
  inline ::google::protobuf::int32 x() const;
  inline void set_x(::google::protobuf::int32 value);
  
  // optional int32 y = 3;
  inline bool has_y() const;
  inline void clear_y();
  static const int kYFieldNumber = 3;
  inline ::google::protobuf::int32 y() const;
  inline void set_y(::google::protobuf::int32 value);
  
  // optional string name = 4;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 4;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  
  // repeated .GCG_PlanetLite planets = 5;
  inline int planets_size() const;
  inline void clear_planets();
  static const int kPlanetsFieldNumber = 5;
  inline const ::google::protobuf::RepeatedPtrField< ::GCG_PlanetLite >& planets() const;
  inline ::google::protobuf::RepeatedPtrField< ::GCG_PlanetLite >* mutable_planets();
  inline const ::GCG_PlanetLite& planets(int index) const;
  inline ::GCG_PlanetLite* mutable_planets(int index);
  inline ::GCG_PlanetLite* add_planets();
  
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::google::protobuf::int32 cityid_;
  ::google::protobuf::int32 x_;
  ::google::protobuf::int32 y_;
  ::std::string* name_;
  static const ::std::string _default_name_;
  ::google::protobuf::RepeatedPtrField< ::GCG_PlanetLite > planets_;
  friend void  protobuf_AddDesc_event_5fsub_2eproto();
  friend void protobuf_AssignDesc_event_5fsub_2eproto();
  friend void protobuf_ShutdownFile_event_5fsub_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static GCG_City* default_instance_;
};
// -------------------------------------------------------------------

class GCG_CountryNeed : public ::google::protobuf::Message {
 public:
  GCG_CountryNeed();
  virtual ~GCG_CountryNeed();
  
  GCG_CountryNeed(const GCG_CountryNeed& from);
  
  inline GCG_CountryNeed& operator=(const GCG_CountryNeed& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const GCG_CountryNeed& default_instance();
  void Swap(GCG_CountryNeed* other);
  
  // implements Message ----------------------------------------------
  
  GCG_CountryNeed* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GCG_CountryNeed& from);
  void MergeFrom(const GCG_CountryNeed& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const { _cached_size_ = size; }
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional int32 countrySrvID = 1;
  inline bool has_countrysrvid() const;
  inline void clear_countrysrvid();
  static const int kCountrySrvIDFieldNumber = 1;
  inline ::google::protobuf::int32 countrysrvid() const;
  inline void set_countrysrvid(::google::protobuf::int32 value);
  
  // optional int32 region = 2;
  inline bool has_region() const;
  inline void clear_region();
  static const int kRegionFieldNumber = 2;
  inline ::google::protobuf::int32 region() const;
  inline void set_region(::google::protobuf::int32 value);
  
  // optional int32 gameSrvID = 3;
  inline bool has_gamesrvid() const;
  inline void clear_gamesrvid();
  static const int kGameSrvIDFieldNumber = 3;
  inline ::google::protobuf::int32 gamesrvid() const;
  inline void set_gamesrvid(::google::protobuf::int32 value);
  
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::google::protobuf::int32 countrysrvid_;
  ::google::protobuf::int32 region_;
  ::google::protobuf::int32 gamesrvid_;
  friend void  protobuf_AddDesc_event_5fsub_2eproto();
  friend void protobuf_AssignDesc_event_5fsub_2eproto();
  friend void protobuf_ShutdownFile_event_5fsub_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static GCG_CountryNeed* default_instance_;
};
// -------------------------------------------------------------------

class GRG_RegionNeed : public ::google::protobuf::Message {
 public:
  GRG_RegionNeed();
  virtual ~GRG_RegionNeed();
  
  GRG_RegionNeed(const GRG_RegionNeed& from);
  
  inline GRG_RegionNeed& operator=(const GRG_RegionNeed& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const GRG_RegionNeed& default_instance();
  void Swap(GRG_RegionNeed* other);
  
  // implements Message ----------------------------------------------
  
  GRG_RegionNeed* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GRG_RegionNeed& from);
  void MergeFrom(const GRG_RegionNeed& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const { _cached_size_ = size; }
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional int32 regionSrvID = 1;
  inline bool has_regionsrvid() const;
  inline void clear_regionsrvid();
  static const int kRegionSrvIDFieldNumber = 1;
  inline ::google::protobuf::int32 regionsrvid() const;
  inline void set_regionsrvid(::google::protobuf::int32 value);
  
  // optional int32 region = 2;
  inline bool has_region() const;
  inline void clear_region();
  static const int kRegionFieldNumber = 2;
  inline ::google::protobuf::int32 region() const;
  inline void set_region(::google::protobuf::int32 value);
  
  // optional int32 gameSrvID = 3;
  inline bool has_gamesrvid() const;
  inline void clear_gamesrvid();
  static const int kGameSrvIDFieldNumber = 3;
  inline ::google::protobuf::int32 gamesrvid() const;
  inline void set_gamesrvid(::google::protobuf::int32 value);
  
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::google::protobuf::int32 regionsrvid_;
  ::google::protobuf::int32 region_;
  ::google::protobuf::int32 gamesrvid_;
  friend void  protobuf_AddDesc_event_5fsub_2eproto();
  friend void protobuf_AssignDesc_event_5fsub_2eproto();
  friend void protobuf_ShutdownFile_event_5fsub_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static GRG_RegionNeed* default_instance_;
};
// -------------------------------------------------------------------

class GRG_RankNeed : public ::google::protobuf::Message {
 public:
  GRG_RankNeed();
  virtual ~GRG_RankNeed();
  
  GRG_RankNeed(const GRG_RankNeed& from);
  
  inline GRG_RankNeed& operator=(const GRG_RankNeed& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const GRG_RankNeed& default_instance();
  void Swap(GRG_RankNeed* other);
  
  // implements Message ----------------------------------------------
  
  GRG_RankNeed* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GRG_RankNeed& from);
  void MergeFrom(const GRG_RankNeed& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const { _cached_size_ = size; }
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional int32 rankSrvID = 1;
  inline bool has_ranksrvid() const;
  inline void clear_ranksrvid();
  static const int kRankSrvIDFieldNumber = 1;
  inline ::google::protobuf::int32 ranksrvid() const;
  inline void set_ranksrvid(::google::protobuf::int32 value);
  
  // optional int32 region = 2;
  inline bool has_region() const;
  inline void clear_region();
  static const int kRegionFieldNumber = 2;
  inline ::google::protobuf::int32 region() const;
  inline void set_region(::google::protobuf::int32 value);
  
  // optional int32 gameSrvID = 3;
  inline bool has_gamesrvid() const;
  inline void clear_gamesrvid();
  static const int kGameSrvIDFieldNumber = 3;
  inline ::google::protobuf::int32 gamesrvid() const;
  inline void set_gamesrvid(::google::protobuf::int32 value);
  
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::google::protobuf::int32 ranksrvid_;
  ::google::protobuf::int32 region_;
  ::google::protobuf::int32 gamesrvid_;
  friend void  protobuf_AddDesc_event_5fsub_2eproto();
  friend void protobuf_AssignDesc_event_5fsub_2eproto();
  friend void protobuf_ShutdownFile_event_5fsub_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static GRG_RankNeed* default_instance_;
};
// -------------------------------------------------------------------

class GSG_StatNeed : public ::google::protobuf::Message {
 public:
  GSG_StatNeed();
  virtual ~GSG_StatNeed();
  
  GSG_StatNeed(const GSG_StatNeed& from);
  
  inline GSG_StatNeed& operator=(const GSG_StatNeed& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const GSG_StatNeed& default_instance();
  void Swap(GSG_StatNeed* other);
  
  // implements Message ----------------------------------------------
  
  GSG_StatNeed* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GSG_StatNeed& from);
  void MergeFrom(const GSG_StatNeed& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const { _cached_size_ = size; }
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional int32 statSrvID = 1;
  inline bool has_statsrvid() const;
  inline void clear_statsrvid();
  static const int kStatSrvIDFieldNumber = 1;
  inline ::google::protobuf::int32 statsrvid() const;
  inline void set_statsrvid(::google::protobuf::int32 value);
  
  // optional int32 region = 2;
  inline bool has_region() const;
  inline void clear_region();
  static const int kRegionFieldNumber = 2;
  inline ::google::protobuf::int32 region() const;
  inline void set_region(::google::protobuf::int32 value);
  
  // optional int32 gameSrvID = 3;
  inline bool has_gamesrvid() const;
  inline void clear_gamesrvid();
  static const int kGameSrvIDFieldNumber = 3;
  inline ::google::protobuf::int32 gamesrvid() const;
  inline void set_gamesrvid(::google::protobuf::int32 value);
  
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::google::protobuf::int32 statsrvid_;
  ::google::protobuf::int32 region_;
  ::google::protobuf::int32 gamesrvid_;
  friend void  protobuf_AddDesc_event_5fsub_2eproto();
  friend void protobuf_AssignDesc_event_5fsub_2eproto();
  friend void protobuf_ShutdownFile_event_5fsub_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static GSG_StatNeed* default_instance_;
};
// -------------------------------------------------------------------

class HttpAskMsg : public ::google::protobuf::Message {
 public:
  HttpAskMsg();
  virtual ~HttpAskMsg();
  
  HttpAskMsg(const HttpAskMsg& from);
  
  inline HttpAskMsg& operator=(const HttpAskMsg& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const HttpAskMsg& default_instance();
  void Swap(HttpAskMsg* other);
  
  // implements Message ----------------------------------------------
  
  HttpAskMsg* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const HttpAskMsg& from);
  void MergeFrom(const HttpAskMsg& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const { _cached_size_ = size; }
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional string szOpenid = 1;
  inline bool has_szopenid() const;
  inline void clear_szopenid();
  static const int kSzOpenidFieldNumber = 1;
  inline const ::std::string& szopenid() const;
  inline void set_szopenid(const ::std::string& value);
  inline void set_szopenid(const char* value);
  inline void set_szopenid(const char* value, size_t size);
  inline ::std::string* mutable_szopenid();
  
  // optional int64 nUid = 2;
  inline bool has_nuid() const;
  inline void clear_nuid();
  static const int kNUidFieldNumber = 2;
  inline ::google::protobuf::int64 nuid() const;
  inline void set_nuid(::google::protobuf::int64 value);
  
  // optional int32 nRegion = 3;
  inline bool has_nregion() const;
  inline void clear_nregion();
  static const int kNRegionFieldNumber = 3;
  inline ::google::protobuf::int32 nregion() const;
  inline void set_nregion(::google::protobuf::int32 value);
  
  // optional int32 nType = 4;
  inline bool has_ntype() const;
  inline void clear_ntype();
  static const int kNTypeFieldNumber = 4;
  inline ::google::protobuf::int32 ntype() const;
  inline void set_ntype(::google::protobuf::int32 value);
  
  // optional int32 nTypeSec = 5;
  inline bool has_ntypesec() const;
  inline void clear_ntypesec();
  static const int kNTypeSecFieldNumber = 5;
  inline ::google::protobuf::int32 ntypesec() const;
  inline void set_ntypesec(::google::protobuf::int32 value);
  
  // optional string szArgvs = 6;
  inline bool has_szargvs() const;
  inline void clear_szargvs();
  static const int kSzArgvsFieldNumber = 6;
  inline const ::std::string& szargvs() const;
  inline void set_szargvs(const ::std::string& value);
  inline void set_szargvs(const char* value);
  inline void set_szargvs(const char* value, size_t size);
  inline ::std::string* mutable_szargvs();
  
  // optional bool bToQQ = 7 [default = false];
  inline bool has_btoqq() const;
  inline void clear_btoqq();
  static const int kBToQQFieldNumber = 7;
  inline bool btoqq() const;
  inline void set_btoqq(bool value);
  
  // optional int32 nUserIP = 8 [default = 0];
  inline bool has_nuserip() const;
  inline void clear_nuserip();
  static const int kNUserIPFieldNumber = 8;
  inline ::google::protobuf::int32 nuserip() const;
  inline void set_nuserip(::google::protobuf::int32 value);
  
  // optional int32 nModifyfee = 9 [default = 0];
  inline bool has_nmodifyfee() const;
  inline void clear_nmodifyfee();
  static const int kNModifyfeeFieldNumber = 9;
  inline ::google::protobuf::int32 nmodifyfee() const;
  inline void set_nmodifyfee(::google::protobuf::int32 value);
  
  // optional int32 nTime = 10 [default = 0];
  inline bool has_ntime() const;
  inline void clear_ntime();
  static const int kNTimeFieldNumber = 10;
  inline ::google::protobuf::int32 ntime() const;
  inline void set_ntime(::google::protobuf::int32 value);
  
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::std::string* szopenid_;
  static const ::std::string _default_szopenid_;
  ::google::protobuf::int64 nuid_;
  ::google::protobuf::int32 nregion_;
  ::google::protobuf::int32 ntype_;
  ::google::protobuf::int32 ntypesec_;
  ::std::string* szargvs_;
  static const ::std::string _default_szargvs_;
  bool btoqq_;
  ::google::protobuf::int32 nuserip_;
  ::google::protobuf::int32 nmodifyfee_;
  ::google::protobuf::int32 ntime_;
  friend void  protobuf_AddDesc_event_5fsub_2eproto();
  friend void protobuf_AssignDesc_event_5fsub_2eproto();
  friend void protobuf_ShutdownFile_event_5fsub_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(10 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static HttpAskMsg* default_instance_;
};
// -------------------------------------------------------------------

class HttpAnswerMsg : public ::google::protobuf::Message {
 public:
  HttpAnswerMsg();
  virtual ~HttpAnswerMsg();
  
  HttpAnswerMsg(const HttpAnswerMsg& from);
  
  inline HttpAnswerMsg& operator=(const HttpAnswerMsg& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const HttpAnswerMsg& default_instance();
  void Swap(HttpAnswerMsg* other);
  
  // implements Message ----------------------------------------------
  
  HttpAnswerMsg* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const HttpAnswerMsg& from);
  void MergeFrom(const HttpAnswerMsg& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const { _cached_size_ = size; }
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional string szOpenid = 1;
  inline bool has_szopenid() const;
  inline void clear_szopenid();
  static const int kSzOpenidFieldNumber = 1;
  inline const ::std::string& szopenid() const;
  inline void set_szopenid(const ::std::string& value);
  inline void set_szopenid(const char* value);
  inline void set_szopenid(const char* value, size_t size);
  inline ::std::string* mutable_szopenid();
  
  // optional int64 nUid = 2;
  inline bool has_nuid() const;
  inline void clear_nuid();
  static const int kNUidFieldNumber = 2;
  inline ::google::protobuf::int64 nuid() const;
  inline void set_nuid(::google::protobuf::int64 value);
  
  // optional int32 nRegion = 3;
  inline bool has_nregion() const;
  inline void clear_nregion();
  static const int kNRegionFieldNumber = 3;
  inline ::google::protobuf::int32 nregion() const;
  inline void set_nregion(::google::protobuf::int32 value);
  
  // optional int32 nType = 4;
  inline bool has_ntype() const;
  inline void clear_ntype();
  static const int kNTypeFieldNumber = 4;
  inline ::google::protobuf::int32 ntype() const;
  inline void set_ntype(::google::protobuf::int32 value);
  
  // optional int32 nTypeSec = 5;
  inline bool has_ntypesec() const;
  inline void clear_ntypesec();
  static const int kNTypeSecFieldNumber = 5;
  inline ::google::protobuf::int32 ntypesec() const;
  inline void set_ntypesec(::google::protobuf::int32 value);
  
  // optional string szAnswer = 6;
  inline bool has_szanswer() const;
  inline void clear_szanswer();
  static const int kSzAnswerFieldNumber = 6;
  inline const ::std::string& szanswer() const;
  inline void set_szanswer(const ::std::string& value);
  inline void set_szanswer(const char* value);
  inline void set_szanswer(const char* value, size_t size);
  inline ::std::string* mutable_szanswer();
  
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::std::string* szopenid_;
  static const ::std::string _default_szopenid_;
  ::google::protobuf::int64 nuid_;
  ::google::protobuf::int32 nregion_;
  ::google::protobuf::int32 ntype_;
  ::google::protobuf::int32 ntypesec_;
  ::std::string* szanswer_;
  static const ::std::string _default_szanswer_;
  friend void  protobuf_AddDesc_event_5fsub_2eproto();
  friend void protobuf_AssignDesc_event_5fsub_2eproto();
  friend void protobuf_ShutdownFile_event_5fsub_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static HttpAnswerMsg* default_instance_;
};
// -------------------------------------------------------------------

class NewStar_Req : public ::google::protobuf::Message {
 public:
  NewStar_Req();
  virtual ~NewStar_Req();
  
  NewStar_Req(const NewStar_Req& from);
  
  inline NewStar_Req& operator=(const NewStar_Req& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const NewStar_Req& default_instance();
  void Swap(NewStar_Req* other);
  
  // implements Message ----------------------------------------------
  
  NewStar_Req* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const NewStar_Req& from);
  void MergeFrom(const NewStar_Req& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const { _cached_size_ = size; }
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional string name = 1;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 1;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  
  // optional string url = 2;
  inline bool has_url() const;
  inline void clear_url();
  static const int kUrlFieldNumber = 2;
  inline const ::std::string& url() const;
  inline void set_url(const ::std::string& value);
  inline void set_url(const char* value);
  inline void set_url(const char* value, size_t size);
  inline ::std::string* mutable_url();
  
  // optional int32 planetId = 3;
  inline bool has_planetid() const;
  inline void clear_planetid();
  static const int kPlanetIdFieldNumber = 3;
  inline ::google::protobuf::int32 planetid() const;
  inline void set_planetid(::google::protobuf::int32 value);
  
  // optional int64 accountId = 4;
  inline bool has_accountid() const;
  inline void clear_accountid();
  static const int kAccountIdFieldNumber = 4;
  inline ::google::protobuf::int64 accountid() const;
  inline void set_accountid(::google::protobuf::int64 value);
  
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::std::string* name_;
  static const ::std::string _default_name_;
  ::std::string* url_;
  static const ::std::string _default_url_;
  ::google::protobuf::int32 planetid_;
  ::google::protobuf::int64 accountid_;
  friend void  protobuf_AddDesc_event_5fsub_2eproto();
  friend void protobuf_AssignDesc_event_5fsub_2eproto();
  friend void protobuf_ShutdownFile_event_5fsub_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static NewStar_Req* default_instance_;
};
// -------------------------------------------------------------------

class NewStar_Rsp : public ::google::protobuf::Message {
 public:
  NewStar_Rsp();
  virtual ~NewStar_Rsp();
  
  NewStar_Rsp(const NewStar_Rsp& from);
  
  inline NewStar_Rsp& operator=(const NewStar_Rsp& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const NewStar_Rsp& default_instance();
  void Swap(NewStar_Rsp* other);
  
  // implements Message ----------------------------------------------
  
  NewStar_Rsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const NewStar_Rsp& from);
  void MergeFrom(const NewStar_Rsp& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const { _cached_size_ = size; }
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional int32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);
  
  // optional string sku = 2;
  inline bool has_sku() const;
  inline void clear_sku();
  static const int kSkuFieldNumber = 2;
  inline const ::std::string& sku() const;
  inline void set_sku(const ::std::string& value);
  inline void set_sku(const char* value);
  inline void set_sku(const char* value, size_t size);
  inline ::std::string* mutable_sku();
  
  // optional int32 type = 3;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 3;
  inline ::google::protobuf::int32 type() const;
  inline void set_type(::google::protobuf::int32 value);
  
  // optional int32 name = 4;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 4;
  inline ::google::protobuf::int32 name() const;
  inline void set_name(::google::protobuf::int32 value);
  
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::google::protobuf::int32 id_;
  ::std::string* sku_;
  static const ::std::string _default_sku_;
  ::google::protobuf::int32 type_;
  ::google::protobuf::int32 name_;
  friend void  protobuf_AddDesc_event_5fsub_2eproto();
  friend void protobuf_AssignDesc_event_5fsub_2eproto();
  friend void protobuf_ShutdownFile_event_5fsub_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static NewStar_Rsp* default_instance_;
};
// -------------------------------------------------------------------

class GWG_GameUnit : public ::google::protobuf::Message {
 public:
  GWG_GameUnit();
  virtual ~GWG_GameUnit();
  
  GWG_GameUnit(const GWG_GameUnit& from);
  
  inline GWG_GameUnit& operator=(const GWG_GameUnit& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const GWG_GameUnit& default_instance();
  void Swap(GWG_GameUnit* other);
  
  // implements Message ----------------------------------------------
  
  GWG_GameUnit* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GWG_GameUnit& from);
  void MergeFrom(const GWG_GameUnit& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const { _cached_size_ = size; }
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional int32 sku = 1;
  inline bool has_sku() const;
  inline void clear_sku();
  static const int kSkuFieldNumber = 1;
  inline ::google::protobuf::int32 sku() const;
  inline void set_sku(::google::protobuf::int32 value);
  
  // optional int32 unlock = 2;
  inline bool has_unlock() const;
  inline void clear_unlock();
  static const int kUnlockFieldNumber = 2;
  inline ::google::protobuf::int32 unlock() const;
  inline void set_unlock(::google::protobuf::int32 value);
  
  // optional int32 upgradeId = 3;
  inline bool has_upgradeid() const;
  inline void clear_upgradeid();
  static const int kUpgradeIdFieldNumber = 3;
  inline ::google::protobuf::int32 upgradeid() const;
  inline void set_upgradeid(::google::protobuf::int32 value);
  
  // optional int32 timeLeft = 4;
  inline bool has_timeleft() const;
  inline void clear_timeleft();
  static const int kTimeLeftFieldNumber = 4;
  inline ::google::protobuf::int32 timeleft() const;
  inline void set_timeleft(::google::protobuf::int32 value);
  
  // optional int64 updateAt = 5;
  inline bool has_updateat() const;
  inline void clear_updateat();
  static const int kUpdateAtFieldNumber = 5;
  inline ::google::protobuf::int64 updateat() const;
  inline void set_updateat(::google::protobuf::int64 value);
  
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::google::protobuf::int32 sku_;
  ::google::protobuf::int32 unlock_;
  ::google::protobuf::int32 upgradeid_;
  ::google::protobuf::int32 timeleft_;
  ::google::protobuf::int64 updateat_;
  friend void  protobuf_AddDesc_event_5fsub_2eproto();
  friend void protobuf_AssignDesc_event_5fsub_2eproto();
  friend void protobuf_ShutdownFile_event_5fsub_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static GWG_GameUnit* default_instance_;
};
// -------------------------------------------------------------------

class GWG_BattleInfo : public ::google::protobuf::Message {
 public:
  GWG_BattleInfo();
  virtual ~GWG_BattleInfo();
  
  GWG_BattleInfo(const GWG_BattleInfo& from);
  
  inline GWG_BattleInfo& operator=(const GWG_BattleInfo& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const GWG_BattleInfo& default_instance();
  void Swap(GWG_BattleInfo* other);
  
  // implements Message ----------------------------------------------
  
  GWG_BattleInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GWG_BattleInfo& from);
  void MergeFrom(const GWG_BattleInfo& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const { _cached_size_ = size; }
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional int64 time = 1;
  inline bool has_time() const;
  inline void clear_time();
  static const int kTimeFieldNumber = 1;
  inline ::google::protobuf::int64 time() const;
  inline void set_time(::google::protobuf::int64 value);
  
  // optional int64 accountId = 2;
  inline bool has_accountid() const;
  inline void clear_accountid();
  static const int kAccountIdFieldNumber = 2;
  inline ::google::protobuf::int64 accountid() const;
  inline void set_accountid(::google::protobuf::int64 value);
  
  // optional string starSku = 3;
  inline bool has_starsku() const;
  inline void clear_starsku();
  static const int kStarSkuFieldNumber = 3;
  inline const ::std::string& starsku() const;
  inline void set_starsku(const ::std::string& value);
  inline void set_starsku(const char* value);
  inline void set_starsku(const char* value, size_t size);
  inline ::std::string* mutable_starsku();
  
  // optional string name = 4;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 4;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  
  // optional string url = 5;
  inline bool has_url() const;
  inline void clear_url();
  static const int kUrlFieldNumber = 5;
  inline const ::std::string& url() const;
  inline void set_url(const ::std::string& value);
  inline void set_url(const char* value);
  inline void set_url(const char* value, size_t size);
  inline ::std::string* mutable_url();
  
  // optional int32 planetId = 6;
  inline bool has_planetid() const;
  inline void clear_planetid();
  static const int kPlanetIdFieldNumber = 6;
  inline ::google::protobuf::int32 planetid() const;
  inline void set_planetid(::google::protobuf::int32 value);
  
  // repeated .GWG_GameUnit gameUnits = 7;
  inline int gameunits_size() const;
  inline void clear_gameunits();
  static const int kGameUnitsFieldNumber = 7;
  inline const ::google::protobuf::RepeatedPtrField< ::GWG_GameUnit >& gameunits() const;
  inline ::google::protobuf::RepeatedPtrField< ::GWG_GameUnit >* mutable_gameunits();
  inline const ::GWG_GameUnit& gameunits(int index) const;
  inline ::GWG_GameUnit* mutable_gameunits(int index);
  inline ::GWG_GameUnit* add_gameunits();
  
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::google::protobuf::int64 time_;
  ::google::protobuf::int64 accountid_;
  ::std::string* starsku_;
  static const ::std::string _default_starsku_;
  ::std::string* name_;
  static const ::std::string _default_name_;
  ::std::string* url_;
  static const ::std::string _default_url_;
  ::google::protobuf::int32 planetid_;
  ::google::protobuf::RepeatedPtrField< ::GWG_GameUnit > gameunits_;
  friend void  protobuf_AddDesc_event_5fsub_2eproto();
  friend void protobuf_AssignDesc_event_5fsub_2eproto();
  friend void protobuf_ShutdownFile_event_5fsub_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(7 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static GWG_BattleInfo* default_instance_;
};
// -------------------------------------------------------------------

class Admin_AddCash_Req : public ::google::protobuf::Message {
 public:
  Admin_AddCash_Req();
  virtual ~Admin_AddCash_Req();
  
  Admin_AddCash_Req(const Admin_AddCash_Req& from);
  
  inline Admin_AddCash_Req& operator=(const Admin_AddCash_Req& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const Admin_AddCash_Req& default_instance();
  void Swap(Admin_AddCash_Req* other);
  
  // implements Message ----------------------------------------------
  
  Admin_AddCash_Req* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Admin_AddCash_Req& from);
  void MergeFrom(const Admin_AddCash_Req& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const { _cached_size_ = size; }
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required int64 uid = 1;
  inline bool has_uid() const;
  inline void clear_uid();
  static const int kUidFieldNumber = 1;
  inline ::google::protobuf::int64 uid() const;
  inline void set_uid(::google::protobuf::int64 value);
  
  // optional string platid = 2;
  inline bool has_platid() const;
  inline void clear_platid();
  static const int kPlatidFieldNumber = 2;
  inline const ::std::string& platid() const;
  inline void set_platid(const ::std::string& value);
  inline void set_platid(const char* value);
  inline void set_platid(const char* value, size_t size);
  inline ::std::string* mutable_platid();
  
  // required int32 cash = 3;
  inline bool has_cash() const;
  inline void clear_cash();
  static const int kCashFieldNumber = 3;
  inline ::google::protobuf::int32 cash() const;
  inline void set_cash(::google::protobuf::int32 value);
  
  // required int32 gid = 4 [default = 0];
  inline bool has_gid() const;
  inline void clear_gid();
  static const int kGidFieldNumber = 4;
  inline ::google::protobuf::int32 gid() const;
  inline void set_gid(::google::protobuf::int32 value);
  
  // required int32 adminfd = 5;
  inline bool has_adminfd() const;
  inline void clear_adminfd();
  static const int kAdminfdFieldNumber = 5;
  inline ::google::protobuf::int32 adminfd() const;
  inline void set_adminfd(::google::protobuf::int32 value);
  
  // required int32 type = 6 [default = 0];
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 6;
  inline ::google::protobuf::int32 type() const;
  inline void set_type(::google::protobuf::int32 value);
  
  // optional string sid = 7;
  inline bool has_sid() const;
  inline void clear_sid();
  static const int kSidFieldNumber = 7;
  inline const ::std::string& sid() const;
  inline void set_sid(const ::std::string& value);
  inline void set_sid(const char* value);
  inline void set_sid(const char* value, size_t size);
  inline ::std::string* mutable_sid();
  
  // optional bool fromweb = 9 [default = false];
  inline bool has_fromweb() const;
  inline void clear_fromweb();
  static const int kFromwebFieldNumber = 9;
  inline bool fromweb() const;
  inline void set_fromweb(bool value);
  
  // optional bool istxcross = 10 [default = false];
  inline bool has_istxcross() const;
  inline void clear_istxcross();
  static const int kIstxcrossFieldNumber = 10;
  inline bool istxcross() const;
  inline void set_istxcross(bool value);
  
  // optional int32 nChannel = 11 [default = 0];
  inline bool has_nchannel() const;
  inline void clear_nchannel();
  static const int kNChannelFieldNumber = 11;
  inline ::google::protobuf::int32 nchannel() const;
  inline void set_nchannel(::google::protobuf::int32 value);
  
  // optional string orderid = 12;
  inline bool has_orderid() const;
  inline void clear_orderid();
  static const int kOrderidFieldNumber = 12;
  inline const ::std::string& orderid() const;
  inline void set_orderid(const ::std::string& value);
  inline void set_orderid(const char* value);
  inline void set_orderid(const char* value, size_t size);
  inline ::std::string* mutable_orderid();
  
  // optional int32 nPrepayFlag = 13 [default = 0];
  inline bool has_nprepayflag() const;
  inline void clear_nprepayflag();
  static const int kNPrepayFlagFieldNumber = 13;
  inline ::google::protobuf::int32 nprepayflag() const;
  inline void set_nprepayflag(::google::protobuf::int32 value);
  
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::google::protobuf::int64 uid_;
  ::std::string* platid_;
  static const ::std::string _default_platid_;
  ::google::protobuf::int32 cash_;
  ::google::protobuf::int32 gid_;
  ::google::protobuf::int32 adminfd_;
  ::google::protobuf::int32 type_;
  ::std::string* sid_;
  static const ::std::string _default_sid_;
  bool fromweb_;
  bool istxcross_;
  ::google::protobuf::int32 nchannel_;
  ::std::string* orderid_;
  static const ::std::string _default_orderid_;
  ::google::protobuf::int32 nprepayflag_;
  friend void  protobuf_AddDesc_event_5fsub_2eproto();
  friend void protobuf_AssignDesc_event_5fsub_2eproto();
  friend void protobuf_ShutdownFile_event_5fsub_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(12 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static Admin_AddCash_Req* default_instance_;
};
// -------------------------------------------------------------------

class Admin_AddCash_Rsp : public ::google::protobuf::Message {
 public:
  Admin_AddCash_Rsp();
  virtual ~Admin_AddCash_Rsp();
  
  Admin_AddCash_Rsp(const Admin_AddCash_Rsp& from);
  
  inline Admin_AddCash_Rsp& operator=(const Admin_AddCash_Rsp& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const Admin_AddCash_Rsp& default_instance();
  void Swap(Admin_AddCash_Rsp* other);
  
  // implements Message ----------------------------------------------
  
  Admin_AddCash_Rsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Admin_AddCash_Rsp& from);
  void MergeFrom(const Admin_AddCash_Rsp& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const { _cached_size_ = size; }
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required int64 uid = 1;
  inline bool has_uid() const;
  inline void clear_uid();
  static const int kUidFieldNumber = 1;
  inline ::google::protobuf::int64 uid() const;
  inline void set_uid(::google::protobuf::int64 value);
  
  // optional string platid = 2;
  inline bool has_platid() const;
  inline void clear_platid();
  static const int kPlatidFieldNumber = 2;
  inline const ::std::string& platid() const;
  inline void set_platid(const ::std::string& value);
  inline void set_platid(const char* value);
  inline void set_platid(const char* value, size_t size);
  inline ::std::string* mutable_platid();
  
  // required int64 oldcash = 3;
  inline bool has_oldcash() const;
  inline void clear_oldcash();
  static const int kOldcashFieldNumber = 3;
  inline ::google::protobuf::int64 oldcash() const;
  inline void set_oldcash(::google::protobuf::int64 value);
  
  // required int64 newcash = 4;
  inline bool has_newcash() const;
  inline void clear_newcash();
  static const int kNewcashFieldNumber = 4;
  inline ::google::protobuf::int64 newcash() const;
  inline void set_newcash(::google::protobuf::int64 value);
  
  // required int32 gid = 5;
  inline bool has_gid() const;
  inline void clear_gid();
  static const int kGidFieldNumber = 5;
  inline ::google::protobuf::int32 gid() const;
  inline void set_gid(::google::protobuf::int32 value);
  
  // required int32 adminfd = 6;
  inline bool has_adminfd() const;
  inline void clear_adminfd();
  static const int kAdminfdFieldNumber = 6;
  inline ::google::protobuf::int32 adminfd() const;
  inline void set_adminfd(::google::protobuf::int32 value);
  
  // required int32 type = 7 [default = 0];
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 7;
  inline ::google::protobuf::int32 type() const;
  inline void set_type(::google::protobuf::int32 value);
  
  // optional string sid = 8;
  inline bool has_sid() const;
  inline void clear_sid();
  static const int kSidFieldNumber = 8;
  inline const ::std::string& sid() const;
  inline void set_sid(const ::std::string& value);
  inline void set_sid(const char* value);
  inline void set_sid(const char* value, size_t size);
  inline ::std::string* mutable_sid();
  
  // optional bool fromweb = 9 [default = false];
  inline bool has_fromweb() const;
  inline void clear_fromweb();
  static const int kFromwebFieldNumber = 9;
  inline bool fromweb() const;
  inline void set_fromweb(bool value);
  
  // optional bool istxcross = 10 [default = false];
  inline bool has_istxcross() const;
  inline void clear_istxcross();
  static const int kIstxcrossFieldNumber = 10;
  inline bool istxcross() const;
  inline void set_istxcross(bool value);
  
  // optional int32 nChannel = 11 [default = 0];
  inline bool has_nchannel() const;
  inline void clear_nchannel();
  static const int kNChannelFieldNumber = 11;
  inline ::google::protobuf::int32 nchannel() const;
  inline void set_nchannel(::google::protobuf::int32 value);
  
  // optional string orderid = 12;
  inline bool has_orderid() const;
  inline void clear_orderid();
  static const int kOrderidFieldNumber = 12;
  inline const ::std::string& orderid() const;
  inline void set_orderid(const ::std::string& value);
  inline void set_orderid(const char* value);
  inline void set_orderid(const char* value, size_t size);
  inline ::std::string* mutable_orderid();
  
  // optional int32 nPrepayFlag = 13 [default = 0];
  inline bool has_nprepayflag() const;
  inline void clear_nprepayflag();
  static const int kNPrepayFlagFieldNumber = 13;
  inline ::google::protobuf::int32 nprepayflag() const;
  inline void set_nprepayflag(::google::protobuf::int32 value);
  
  // optional bool bSuc = 14 [default = false];
  inline bool has_bsuc() const;
  inline void clear_bsuc();
  static const int kBSucFieldNumber = 14;
  inline bool bsuc() const;
  inline void set_bsuc(bool value);
  
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::google::protobuf::int64 uid_;
  ::std::string* platid_;
  static const ::std::string _default_platid_;
  ::google::protobuf::int64 oldcash_;
  ::google::protobuf::int64 newcash_;
  ::google::protobuf::int32 gid_;
  ::google::protobuf::int32 adminfd_;
  ::google::protobuf::int32 type_;
  ::std::string* sid_;
  static const ::std::string _default_sid_;
  bool fromweb_;
  bool istxcross_;
  ::google::protobuf::int32 nchannel_;
  ::std::string* orderid_;
  static const ::std::string _default_orderid_;
  ::google::protobuf::int32 nprepayflag_;
  bool bsuc_;
  friend void  protobuf_AddDesc_event_5fsub_2eproto();
  friend void protobuf_AssignDesc_event_5fsub_2eproto();
  friend void protobuf_ShutdownFile_event_5fsub_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(14 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static Admin_AddCash_Rsp* default_instance_;
};
// ===================================================================


// ===================================================================


// ===================================================================

// WebCrossPromotion

// optional string chanle = 1;
inline bool WebCrossPromotion::has_chanle() const {
  return _has_bit(0);
}
inline void WebCrossPromotion::clear_chanle() {
  if (chanle_ != &_default_chanle_) {
    chanle_->clear();
  }
  _clear_bit(0);
}
inline const ::std::string& WebCrossPromotion::chanle() const {
  return *chanle_;
}
inline void WebCrossPromotion::set_chanle(const ::std::string& value) {
  _set_bit(0);
  if (chanle_ == &_default_chanle_) {
    chanle_ = new ::std::string;
  }
  chanle_->assign(value);
}
inline void WebCrossPromotion::set_chanle(const char* value) {
  _set_bit(0);
  if (chanle_ == &_default_chanle_) {
    chanle_ = new ::std::string;
  }
  chanle_->assign(value);
}
inline void WebCrossPromotion::set_chanle(const char* value, size_t size) {
  _set_bit(0);
  if (chanle_ == &_default_chanle_) {
    chanle_ = new ::std::string;
  }
  chanle_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* WebCrossPromotion::mutable_chanle() {
  _set_bit(0);
  if (chanle_ == &_default_chanle_) {
    chanle_ = new ::std::string;
  }
  return chanle_;
}

// optional string date = 2;
inline bool WebCrossPromotion::has_date() const {
  return _has_bit(1);
}
inline void WebCrossPromotion::clear_date() {
  if (date_ != &_default_date_) {
    date_->clear();
  }
  _clear_bit(1);
}
inline const ::std::string& WebCrossPromotion::date() const {
  return *date_;
}
inline void WebCrossPromotion::set_date(const ::std::string& value) {
  _set_bit(1);
  if (date_ == &_default_date_) {
    date_ = new ::std::string;
  }
  date_->assign(value);
}
inline void WebCrossPromotion::set_date(const char* value) {
  _set_bit(1);
  if (date_ == &_default_date_) {
    date_ = new ::std::string;
  }
  date_->assign(value);
}
inline void WebCrossPromotion::set_date(const char* value, size_t size) {
  _set_bit(1);
  if (date_ == &_default_date_) {
    date_ = new ::std::string;
  }
  date_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* WebCrossPromotion::mutable_date() {
  _set_bit(1);
  if (date_ == &_default_date_) {
    date_ = new ::std::string;
  }
  return date_;
}

// repeated string cdk = 3;
inline int WebCrossPromotion::cdk_size() const {
  return cdk_.size();
}
inline void WebCrossPromotion::clear_cdk() {
  cdk_.Clear();
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
WebCrossPromotion::cdk() const {
  return cdk_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
WebCrossPromotion::mutable_cdk() {
  return &cdk_;
}
inline const ::std::string& WebCrossPromotion::cdk(int index) const {
  return cdk_.Get(index);
}
inline ::std::string* WebCrossPromotion::mutable_cdk(int index) {
  return cdk_.Mutable(index);
}
inline void WebCrossPromotion::set_cdk(int index, const ::std::string& value) {
  cdk_.Mutable(index)->assign(value);
}
inline void WebCrossPromotion::set_cdk(int index, const char* value) {
  cdk_.Mutable(index)->assign(value);
}
inline void WebCrossPromotion::set_cdk(int index, const char* value, size_t size) {
  cdk_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* WebCrossPromotion::add_cdk() {
  return cdk_.Add();
}
inline void WebCrossPromotion::add_cdk(const ::std::string& value) {
  cdk_.Add()->assign(value);
}
inline void WebCrossPromotion::add_cdk(const char* value) {
  cdk_.Add()->assign(value);
}
inline void WebCrossPromotion::add_cdk(const char* value, size_t size) {
  cdk_.Add()->assign(reinterpret_cast<const char*>(value), size);
}

// optional bool canuse = 4 [default = false];
inline bool WebCrossPromotion::has_canuse() const {
  return _has_bit(3);
}
inline void WebCrossPromotion::clear_canuse() {
  canuse_ = false;
  _clear_bit(3);
}
inline bool WebCrossPromotion::canuse() const {
  return canuse_;
}
inline void WebCrossPromotion::set_canuse(bool value) {
  _set_bit(3);
  canuse_ = value;
}

// -------------------------------------------------------------------

// UserLogin_Req

// required int32 siteid = 1;
inline bool UserLogin_Req::has_siteid() const {
  return _has_bit(0);
}
inline void UserLogin_Req::clear_siteid() {
  siteid_ = 0;
  _clear_bit(0);
}
inline ::google::protobuf::int32 UserLogin_Req::siteid() const {
  return siteid_;
}
inline void UserLogin_Req::set_siteid(::google::protobuf::int32 value) {
  _set_bit(0);
  siteid_ = value;
}

// required string platform_id = 2;
inline bool UserLogin_Req::has_platform_id() const {
  return _has_bit(1);
}
inline void UserLogin_Req::clear_platform_id() {
  if (platform_id_ != &_default_platform_id_) {
    platform_id_->clear();
  }
  _clear_bit(1);
}
inline const ::std::string& UserLogin_Req::platform_id() const {
  return *platform_id_;
}
inline void UserLogin_Req::set_platform_id(const ::std::string& value) {
  _set_bit(1);
  if (platform_id_ == &_default_platform_id_) {
    platform_id_ = new ::std::string;
  }
  platform_id_->assign(value);
}
inline void UserLogin_Req::set_platform_id(const char* value) {
  _set_bit(1);
  if (platform_id_ == &_default_platform_id_) {
    platform_id_ = new ::std::string;
  }
  platform_id_->assign(value);
}
inline void UserLogin_Req::set_platform_id(const char* value, size_t size) {
  _set_bit(1);
  if (platform_id_ == &_default_platform_id_) {
    platform_id_ = new ::std::string;
  }
  platform_id_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* UserLogin_Req::mutable_platform_id() {
  _set_bit(1);
  if (platform_id_ == &_default_platform_id_) {
    platform_id_ = new ::std::string;
  }
  return platform_id_;
}

// required string name = 3;
inline bool UserLogin_Req::has_name() const {
  return _has_bit(2);
}
inline void UserLogin_Req::clear_name() {
  if (name_ != &_default_name_) {
    name_->clear();
  }
  _clear_bit(2);
}
inline const ::std::string& UserLogin_Req::name() const {
  return *name_;
}
inline void UserLogin_Req::set_name(const ::std::string& value) {
  _set_bit(2);
  if (name_ == &_default_name_) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void UserLogin_Req::set_name(const char* value) {
  _set_bit(2);
  if (name_ == &_default_name_) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void UserLogin_Req::set_name(const char* value, size_t size) {
  _set_bit(2);
  if (name_ == &_default_name_) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* UserLogin_Req::mutable_name() {
  _set_bit(2);
  if (name_ == &_default_name_) {
    name_ = new ::std::string;
  }
  return name_;
}

// required string profile_link = 4;
inline bool UserLogin_Req::has_profile_link() const {
  return _has_bit(3);
}
inline void UserLogin_Req::clear_profile_link() {
  if (profile_link_ != &_default_profile_link_) {
    profile_link_->clear();
  }
  _clear_bit(3);
}
inline const ::std::string& UserLogin_Req::profile_link() const {
  return *profile_link_;
}
inline void UserLogin_Req::set_profile_link(const ::std::string& value) {
  _set_bit(3);
  if (profile_link_ == &_default_profile_link_) {
    profile_link_ = new ::std::string;
  }
  profile_link_->assign(value);
}
inline void UserLogin_Req::set_profile_link(const char* value) {
  _set_bit(3);
  if (profile_link_ == &_default_profile_link_) {
    profile_link_ = new ::std::string;
  }
  profile_link_->assign(value);
}
inline void UserLogin_Req::set_profile_link(const char* value, size_t size) {
  _set_bit(3);
  if (profile_link_ == &_default_profile_link_) {
    profile_link_ = new ::std::string;
  }
  profile_link_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* UserLogin_Req::mutable_profile_link() {
  _set_bit(3);
  if (profile_link_ == &_default_profile_link_) {
    profile_link_ = new ::std::string;
  }
  return profile_link_;
}

// required int32 gender = 5;
inline bool UserLogin_Req::has_gender() const {
  return _has_bit(4);
}
inline void UserLogin_Req::clear_gender() {
  gender_ = 0;
  _clear_bit(4);
}
inline ::google::protobuf::int32 UserLogin_Req::gender() const {
  return gender_;
}
inline void UserLogin_Req::set_gender(::google::protobuf::int32 value) {
  _set_bit(4);
  gender_ = value;
}

// required bool is_yellow_dmd = 6;
inline bool UserLogin_Req::has_is_yellow_dmd() const {
  return _has_bit(5);
}
inline void UserLogin_Req::clear_is_yellow_dmd() {
  is_yellow_dmd_ = false;
  _clear_bit(5);
}
inline bool UserLogin_Req::is_yellow_dmd() const {
  return is_yellow_dmd_;
}
inline void UserLogin_Req::set_is_yellow_dmd(bool value) {
  _set_bit(5);
  is_yellow_dmd_ = value;
}

// required bool is_yellow_dmd_year = 7;
inline bool UserLogin_Req::has_is_yellow_dmd_year() const {
  return _has_bit(6);
}
inline void UserLogin_Req::clear_is_yellow_dmd_year() {
  is_yellow_dmd_year_ = false;
  _clear_bit(6);
}
inline bool UserLogin_Req::is_yellow_dmd_year() const {
  return is_yellow_dmd_year_;
}
inline void UserLogin_Req::set_is_yellow_dmd_year(bool value) {
  _set_bit(6);
  is_yellow_dmd_year_ = value;
}

// required int32 yellow_dmd_lv = 8;
inline bool UserLogin_Req::has_yellow_dmd_lv() const {
  return _has_bit(7);
}
inline void UserLogin_Req::clear_yellow_dmd_lv() {
  yellow_dmd_lv_ = 0;
  _clear_bit(7);
}
inline ::google::protobuf::int32 UserLogin_Req::yellow_dmd_lv() const {
  return yellow_dmd_lv_;
}
inline void UserLogin_Req::set_yellow_dmd_lv(::google::protobuf::int32 value) {
  _set_bit(7);
  yellow_dmd_lv_ = value;
}

// repeated string friends_platid = 9;
inline int UserLogin_Req::friends_platid_size() const {
  return friends_platid_.size();
}
inline void UserLogin_Req::clear_friends_platid() {
  friends_platid_.Clear();
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
UserLogin_Req::friends_platid() const {
  return friends_platid_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
UserLogin_Req::mutable_friends_platid() {
  return &friends_platid_;
}
inline const ::std::string& UserLogin_Req::friends_platid(int index) const {
  return friends_platid_.Get(index);
}
inline ::std::string* UserLogin_Req::mutable_friends_platid(int index) {
  return friends_platid_.Mutable(index);
}
inline void UserLogin_Req::set_friends_platid(int index, const ::std::string& value) {
  friends_platid_.Mutable(index)->assign(value);
}
inline void UserLogin_Req::set_friends_platid(int index, const char* value) {
  friends_platid_.Mutable(index)->assign(value);
}
inline void UserLogin_Req::set_friends_platid(int index, const char* value, size_t size) {
  friends_platid_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* UserLogin_Req::add_friends_platid() {
  return friends_platid_.Add();
}
inline void UserLogin_Req::add_friends_platid(const ::std::string& value) {
  friends_platid_.Add()->assign(value);
}
inline void UserLogin_Req::add_friends_platid(const char* value) {
  friends_platid_.Add()->assign(value);
}
inline void UserLogin_Req::add_friends_platid(const char* value, size_t size) {
  friends_platid_.Add()->assign(reinterpret_cast<const char*>(value), size);
}

// required int32 webfd = 10;
inline bool UserLogin_Req::has_webfd() const {
  return _has_bit(9);
}
inline void UserLogin_Req::clear_webfd() {
  webfd_ = 0;
  _clear_bit(9);
}
inline ::google::protobuf::int32 UserLogin_Req::webfd() const {
  return webfd_;
}
inline void UserLogin_Req::set_webfd(::google::protobuf::int32 value) {
  _set_bit(9);
  webfd_ = value;
}

// required string sid = 11;
inline bool UserLogin_Req::has_sid() const {
  return _has_bit(10);
}
inline void UserLogin_Req::clear_sid() {
  if (sid_ != &_default_sid_) {
    sid_->clear();
  }
  _clear_bit(10);
}
inline const ::std::string& UserLogin_Req::sid() const {
  return *sid_;
}
inline void UserLogin_Req::set_sid(const ::std::string& value) {
  _set_bit(10);
  if (sid_ == &_default_sid_) {
    sid_ = new ::std::string;
  }
  sid_->assign(value);
}
inline void UserLogin_Req::set_sid(const char* value) {
  _set_bit(10);
  if (sid_ == &_default_sid_) {
    sid_ = new ::std::string;
  }
  sid_->assign(value);
}
inline void UserLogin_Req::set_sid(const char* value, size_t size) {
  _set_bit(10);
  if (sid_ == &_default_sid_) {
    sid_ = new ::std::string;
  }
  sid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* UserLogin_Req::mutable_sid() {
  _set_bit(10);
  if (sid_ == &_default_sid_) {
    sid_ = new ::std::string;
  }
  return sid_;
}

// optional int32 mydb_ret = 12 [default = 0];
inline bool UserLogin_Req::has_mydb_ret() const {
  return _has_bit(11);
}
inline void UserLogin_Req::clear_mydb_ret() {
  mydb_ret_ = 0;
  _clear_bit(11);
}
inline ::google::protobuf::int32 UserLogin_Req::mydb_ret() const {
  return mydb_ret_;
}
inline void UserLogin_Req::set_mydb_ret(::google::protobuf::int32 value) {
  _set_bit(11);
  mydb_ret_ = value;
}

// optional int32 mydb_oldid = 13 [default = 0];
inline bool UserLogin_Req::has_mydb_oldid() const {
  return _has_bit(12);
}
inline void UserLogin_Req::clear_mydb_oldid() {
  mydb_oldid_ = 0;
  _clear_bit(12);
}
inline ::google::protobuf::int32 UserLogin_Req::mydb_oldid() const {
  return mydb_oldid_;
}
inline void UserLogin_Req::set_mydb_oldid(::google::protobuf::int32 value) {
  _set_bit(12);
  mydb_oldid_ = value;
}

// required int32 region = 14;
inline bool UserLogin_Req::has_region() const {
  return _has_bit(13);
}
inline void UserLogin_Req::clear_region() {
  region_ = 0;
  _clear_bit(13);
}
inline ::google::protobuf::int32 UserLogin_Req::region() const {
  return region_;
}
inline void UserLogin_Req::set_region(::google::protobuf::int32 value) {
  _set_bit(13);
  region_ = value;
}

// optional int64 uid = 15 [default = 0];
inline bool UserLogin_Req::has_uid() const {
  return _has_bit(14);
}
inline void UserLogin_Req::clear_uid() {
  uid_ = GOOGLE_LONGLONG(0);
  _clear_bit(14);
}
inline ::google::protobuf::int64 UserLogin_Req::uid() const {
  return uid_;
}
inline void UserLogin_Req::set_uid(::google::protobuf::int64 value) {
  _set_bit(14);
  uid_ = value;
}

// optional int32 level = 16 [default = 0];
inline bool UserLogin_Req::has_level() const {
  return _has_bit(15);
}
inline void UserLogin_Req::clear_level() {
  level_ = 0;
  _clear_bit(15);
}
inline ::google::protobuf::int32 UserLogin_Req::level() const {
  return level_;
}
inline void UserLogin_Req::set_level(::google::protobuf::int32 value) {
  _set_bit(15);
  level_ = value;
}

// optional int64 defregion = 17 [default = 0];
inline bool UserLogin_Req::has_defregion() const {
  return _has_bit(16);
}
inline void UserLogin_Req::clear_defregion() {
  defregion_ = GOOGLE_LONGLONG(0);
  _clear_bit(16);
}
inline ::google::protobuf::int64 UserLogin_Req::defregion() const {
  return defregion_;
}
inline void UserLogin_Req::set_defregion(::google::protobuf::int64 value) {
  _set_bit(16);
  defregion_ = value;
}

// optional int32 undealGiftCnt = 18 [default = 0];
inline bool UserLogin_Req::has_undealgiftcnt() const {
  return _has_bit(17);
}
inline void UserLogin_Req::clear_undealgiftcnt() {
  undealgiftcnt_ = 0;
  _clear_bit(17);
}
inline ::google::protobuf::int32 UserLogin_Req::undealgiftcnt() const {
  return undealgiftcnt_;
}
inline void UserLogin_Req::set_undealgiftcnt(::google::protobuf::int32 value) {
  _set_bit(17);
  undealgiftcnt_ = value;
}

// optional int32 inviteFrdCnt = 19 [default = 0];
inline bool UserLogin_Req::has_invitefrdcnt() const {
  return _has_bit(18);
}
inline void UserLogin_Req::clear_invitefrdcnt() {
  invitefrdcnt_ = 0;
  _clear_bit(18);
}
inline ::google::protobuf::int32 UserLogin_Req::invitefrdcnt() const {
  return invitefrdcnt_;
}
inline void UserLogin_Req::set_invitefrdcnt(::google::protobuf::int32 value) {
  _set_bit(18);
  invitefrdcnt_ = value;
}

// optional uint32 yellowDmdtime = 20 [default = 0];
inline bool UserLogin_Req::has_yellowdmdtime() const {
  return _has_bit(19);
}
inline void UserLogin_Req::clear_yellowdmdtime() {
  yellowdmdtime_ = 0u;
  _clear_bit(19);
}
inline ::google::protobuf::uint32 UserLogin_Req::yellowdmdtime() const {
  return yellowdmdtime_;
}
inline void UserLogin_Req::set_yellowdmdtime(::google::protobuf::uint32 value) {
  _set_bit(19);
  yellowdmdtime_ = value;
}

// optional int64 gettime = 21 [default = 0];
inline bool UserLogin_Req::has_gettime() const {
  return _has_bit(20);
}
inline void UserLogin_Req::clear_gettime() {
  gettime_ = GOOGLE_LONGLONG(0);
  _clear_bit(20);
}
inline ::google::protobuf::int64 UserLogin_Req::gettime() const {
  return gettime_;
}
inline void UserLogin_Req::set_gettime(::google::protobuf::int64 value) {
  _set_bit(20);
  gettime_ = value;
}

// optional string invitefriendid = 22 [default = ""];
inline bool UserLogin_Req::has_invitefriendid() const {
  return _has_bit(21);
}
inline void UserLogin_Req::clear_invitefriendid() {
  if (invitefriendid_ != &_default_invitefriendid_) {
    invitefriendid_->clear();
  }
  _clear_bit(21);
}
inline const ::std::string& UserLogin_Req::invitefriendid() const {
  return *invitefriendid_;
}
inline void UserLogin_Req::set_invitefriendid(const ::std::string& value) {
  _set_bit(21);
  if (invitefriendid_ == &_default_invitefriendid_) {
    invitefriendid_ = new ::std::string;
  }
  invitefriendid_->assign(value);
}
inline void UserLogin_Req::set_invitefriendid(const char* value) {
  _set_bit(21);
  if (invitefriendid_ == &_default_invitefriendid_) {
    invitefriendid_ = new ::std::string;
  }
  invitefriendid_->assign(value);
}
inline void UserLogin_Req::set_invitefriendid(const char* value, size_t size) {
  _set_bit(21);
  if (invitefriendid_ == &_default_invitefriendid_) {
    invitefriendid_ = new ::std::string;
  }
  invitefriendid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* UserLogin_Req::mutable_invitefriendid() {
  _set_bit(21);
  if (invitefriendid_ == &_default_invitefriendid_) {
    invitefriendid_ = new ::std::string;
  }
  return invitefriendid_;
}

// optional bool isnewplayer = 23 [default = false];
inline bool UserLogin_Req::has_isnewplayer() const {
  return _has_bit(22);
}
inline void UserLogin_Req::clear_isnewplayer() {
  isnewplayer_ = false;
  _clear_bit(22);
}
inline bool UserLogin_Req::isnewplayer() const {
  return isnewplayer_;
}
inline void UserLogin_Req::set_isnewplayer(bool value) {
  _set_bit(22);
  isnewplayer_ = value;
}

// optional int32 undealFrdGiftCnt = 24 [default = 0];
inline bool UserLogin_Req::has_undealfrdgiftcnt() const {
  return _has_bit(23);
}
inline void UserLogin_Req::clear_undealfrdgiftcnt() {
  undealfrdgiftcnt_ = 0;
  _clear_bit(23);
}
inline ::google::protobuf::int32 UserLogin_Req::undealfrdgiftcnt() const {
  return undealfrdgiftcnt_;
}
inline void UserLogin_Req::set_undealfrdgiftcnt(::google::protobuf::int32 value) {
  _set_bit(23);
  undealfrdgiftcnt_ = value;
}

// optional int32 city = 25 [default = 0];
inline bool UserLogin_Req::has_city() const {
  return _has_bit(24);
}
inline void UserLogin_Req::clear_city() {
  city_ = 0;
  _clear_bit(24);
}
inline ::google::protobuf::int32 UserLogin_Req::city() const {
  return city_;
}
inline void UserLogin_Req::set_city(::google::protobuf::int32 value) {
  _set_bit(24);
  city_ = value;
}

// optional string via = 26;
inline bool UserLogin_Req::has_via() const {
  return _has_bit(25);
}
inline void UserLogin_Req::clear_via() {
  if (via_ != &_default_via_) {
    via_->clear();
  }
  _clear_bit(25);
}
inline const ::std::string& UserLogin_Req::via() const {
  return *via_;
}
inline void UserLogin_Req::set_via(const ::std::string& value) {
  _set_bit(25);
  if (via_ == &_default_via_) {
    via_ = new ::std::string;
  }
  via_->assign(value);
}
inline void UserLogin_Req::set_via(const char* value) {
  _set_bit(25);
  if (via_ == &_default_via_) {
    via_ = new ::std::string;
  }
  via_->assign(value);
}
inline void UserLogin_Req::set_via(const char* value, size_t size) {
  _set_bit(25);
  if (via_ == &_default_via_) {
    via_ = new ::std::string;
  }
  via_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* UserLogin_Req::mutable_via() {
  _set_bit(25);
  if (via_ == &_default_via_) {
    via_ = new ::std::string;
  }
  return via_;
}

// optional bool isrecall = 27 [default = false];
inline bool UserLogin_Req::has_isrecall() const {
  return _has_bit(26);
}
inline void UserLogin_Req::clear_isrecall() {
  isrecall_ = false;
  _clear_bit(26);
}
inline bool UserLogin_Req::isrecall() const {
  return isrecall_;
}
inline void UserLogin_Req::set_isrecall(bool value) {
  _set_bit(26);
  isrecall_ = value;
}

// optional bool is_high_yellow_dmd = 28 [default = false];
inline bool UserLogin_Req::has_is_high_yellow_dmd() const {
  return _has_bit(27);
}
inline void UserLogin_Req::clear_is_high_yellow_dmd() {
  is_high_yellow_dmd_ = false;
  _clear_bit(27);
}
inline bool UserLogin_Req::is_high_yellow_dmd() const {
  return is_high_yellow_dmd_;
}
inline void UserLogin_Req::set_is_high_yellow_dmd(bool value) {
  _set_bit(27);
  is_high_yellow_dmd_ = value;
}

// optional bool isApp51Act = 29 [default = false];
inline bool UserLogin_Req::has_isapp51act() const {
  return _has_bit(28);
}
inline void UserLogin_Req::clear_isapp51act() {
  isapp51act_ = false;
  _clear_bit(28);
}
inline bool UserLogin_Req::isapp51act() const {
  return isapp51act_;
}
inline void UserLogin_Req::set_isapp51act(bool value) {
  _set_bit(28);
  isapp51act_ = value;
}

// optional int32 daySendGiftCnt = 30 [default = 0];
inline bool UserLogin_Req::has_daysendgiftcnt() const {
  return _has_bit(29);
}
inline void UserLogin_Req::clear_daysendgiftcnt() {
  daysendgiftcnt_ = 0;
  _clear_bit(29);
}
inline ::google::protobuf::int32 UserLogin_Req::daysendgiftcnt() const {
  return daysendgiftcnt_;
}
inline void UserLogin_Req::set_daysendgiftcnt(::google::protobuf::int32 value) {
  _set_bit(29);
  daysendgiftcnt_ = value;
}

// optional int32 inviteFrdCntDay = 31 [default = 0];
inline bool UserLogin_Req::has_invitefrdcntday() const {
  return _has_bit(30);
}
inline void UserLogin_Req::clear_invitefrdcntday() {
  invitefrdcntday_ = 0;
  _clear_bit(30);
}
inline ::google::protobuf::int32 UserLogin_Req::invitefrdcntday() const {
  return invitefrdcntday_;
}
inline void UserLogin_Req::set_invitefrdcntday(::google::protobuf::int32 value) {
  _set_bit(30);
  invitefrdcntday_ = value;
}

// optional int32 customFlag = 32 [default = 0];
inline bool UserLogin_Req::has_customflag() const {
  return _has_bit(31);
}
inline void UserLogin_Req::clear_customflag() {
  customflag_ = 0;
  _clear_bit(31);
}
inline ::google::protobuf::int32 UserLogin_Req::customflag() const {
  return customflag_;
}
inline void UserLogin_Req::set_customflag(::google::protobuf::int32 value) {
  _set_bit(31);
  customflag_ = value;
}

// optional string taskMarketId = 33 [default = ""];
inline bool UserLogin_Req::has_taskmarketid() const {
  return _has_bit(32);
}
inline void UserLogin_Req::clear_taskmarketid() {
  if (taskmarketid_ != &_default_taskmarketid_) {
    taskmarketid_->clear();
  }
  _clear_bit(32);
}
inline const ::std::string& UserLogin_Req::taskmarketid() const {
  return *taskmarketid_;
}
inline void UserLogin_Req::set_taskmarketid(const ::std::string& value) {
  _set_bit(32);
  if (taskmarketid_ == &_default_taskmarketid_) {
    taskmarketid_ = new ::std::string;
  }
  taskmarketid_->assign(value);
}
inline void UserLogin_Req::set_taskmarketid(const char* value) {
  _set_bit(32);
  if (taskmarketid_ == &_default_taskmarketid_) {
    taskmarketid_ = new ::std::string;
  }
  taskmarketid_->assign(value);
}
inline void UserLogin_Req::set_taskmarketid(const char* value, size_t size) {
  _set_bit(32);
  if (taskmarketid_ == &_default_taskmarketid_) {
    taskmarketid_ = new ::std::string;
  }
  taskmarketid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* UserLogin_Req::mutable_taskmarketid() {
  _set_bit(32);
  if (taskmarketid_ == &_default_taskmarketid_) {
    taskmarketid_ = new ::std::string;
  }
  return taskmarketid_;
}

// optional int32 qqTaskStep = 34 [default = 0];
inline bool UserLogin_Req::has_qqtaskstep() const {
  return _has_bit(33);
}
inline void UserLogin_Req::clear_qqtaskstep() {
  qqtaskstep_ = 0;
  _clear_bit(33);
}
inline ::google::protobuf::int32 UserLogin_Req::qqtaskstep() const {
  return qqtaskstep_;
}
inline void UserLogin_Req::set_qqtaskstep(::google::protobuf::int32 value) {
  _set_bit(33);
  qqtaskstep_ = value;
}

// optional .WebCrossPromotion promotion = 35;
inline bool UserLogin_Req::has_promotion() const {
  return _has_bit(34);
}
inline void UserLogin_Req::clear_promotion() {
  if (promotion_ != NULL) promotion_->::WebCrossPromotion::Clear();
  _clear_bit(34);
}
inline const ::WebCrossPromotion& UserLogin_Req::promotion() const {
  return promotion_ != NULL ? *promotion_ : *default_instance_->promotion_;
}
inline ::WebCrossPromotion* UserLogin_Req::mutable_promotion() {
  _set_bit(34);
  if (promotion_ == NULL) promotion_ = new ::WebCrossPromotion;
  return promotion_;
}

// repeated int32 inviteGiftRecord = 36;
inline int UserLogin_Req::invitegiftrecord_size() const {
  return invitegiftrecord_.size();
}
inline void UserLogin_Req::clear_invitegiftrecord() {
  invitegiftrecord_.Clear();
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
UserLogin_Req::invitegiftrecord() const {
  return invitegiftrecord_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
UserLogin_Req::mutable_invitegiftrecord() {
  return &invitegiftrecord_;
}
inline ::google::protobuf::int32 UserLogin_Req::invitegiftrecord(int index) const {
  return invitegiftrecord_.Get(index);
}
inline void UserLogin_Req::set_invitegiftrecord(int index, ::google::protobuf::int32 value) {
  invitegiftrecord_.Set(index, value);
}
inline void UserLogin_Req::add_invitegiftrecord(::google::protobuf::int32 value) {
  invitegiftrecord_.Add(value);
}

// optional int32 nBackFlowFlag = 37 [default = 0];
inline bool UserLogin_Req::has_nbackflowflag() const {
  return _has_bit(36);
}
inline void UserLogin_Req::clear_nbackflowflag() {
  nbackflowflag_ = 0;
  _clear_bit(36);
}
inline ::google::protobuf::int32 UserLogin_Req::nbackflowflag() const {
  return nbackflowflag_;
}
inline void UserLogin_Req::set_nbackflowflag(::google::protobuf::int32 value) {
  _set_bit(36);
  nbackflowflag_ = value;
}

// optional int32 nAdultFlag = 38 [default = 100];
inline bool UserLogin_Req::has_nadultflag() const {
  return _has_bit(37);
}
inline void UserLogin_Req::clear_nadultflag() {
  nadultflag_ = 100;
  _clear_bit(37);
}
inline ::google::protobuf::int32 UserLogin_Req::nadultflag() const {
  return nadultflag_;
}
inline void UserLogin_Req::set_nadultflag(::google::protobuf::int32 value) {
  _set_bit(37);
  nadultflag_ = value;
}

// optional bool is_high_dmd_year = 39 [default = false];
inline bool UserLogin_Req::has_is_high_dmd_year() const {
  return _has_bit(38);
}
inline void UserLogin_Req::clear_is_high_dmd_year() {
  is_high_dmd_year_ = false;
  _clear_bit(38);
}
inline bool UserLogin_Req::is_high_dmd_year() const {
  return is_high_dmd_year_;
}
inline void UserLogin_Req::set_is_high_dmd_year(bool value) {
  _set_bit(38);
  is_high_dmd_year_ = value;
}

// optional uint32 bluedmdtime = 40 [default = 0];
inline bool UserLogin_Req::has_bluedmdtime() const {
  return _has_bit(39);
}
inline void UserLogin_Req::clear_bluedmdtime() {
  bluedmdtime_ = 0u;
  _clear_bit(39);
}
inline ::google::protobuf::uint32 UserLogin_Req::bluedmdtime() const {
  return bluedmdtime_;
}
inline void UserLogin_Req::set_bluedmdtime(::google::protobuf::uint32 value) {
  _set_bit(39);
  bluedmdtime_ = value;
}

// optional int32 bluetime = 41 [default = 0];
inline bool UserLogin_Req::has_bluetime() const {
  return _has_bit(40);
}
inline void UserLogin_Req::clear_bluetime() {
  bluetime_ = 0;
  _clear_bit(40);
}
inline ::google::protobuf::int32 UserLogin_Req::bluetime() const {
  return bluetime_;
}
inline void UserLogin_Req::set_bluetime(::google::protobuf::int32 value) {
  _set_bit(40);
  bluetime_ = value;
}

// optional int32 blueyeartime = 42 [default = 0];
inline bool UserLogin_Req::has_blueyeartime() const {
  return _has_bit(41);
}
inline void UserLogin_Req::clear_blueyeartime() {
  blueyeartime_ = 0;
  _clear_bit(41);
}
inline ::google::protobuf::int32 UserLogin_Req::blueyeartime() const {
  return blueyeartime_;
}
inline void UserLogin_Req::set_blueyeartime(::google::protobuf::int32 value) {
  _set_bit(41);
  blueyeartime_ = value;
}

// optional int32 highbluetime = 43 [default = 0];
inline bool UserLogin_Req::has_highbluetime() const {
  return _has_bit(42);
}
inline void UserLogin_Req::clear_highbluetime() {
  highbluetime_ = 0;
  _clear_bit(42);
}
inline ::google::protobuf::int32 UserLogin_Req::highbluetime() const {
  return highbluetime_;
}
inline void UserLogin_Req::set_highbluetime(::google::protobuf::int32 value) {
  _set_bit(42);
  highbluetime_ = value;
}

// optional int32 highblueyeartime = 44 [default = 0];
inline bool UserLogin_Req::has_highblueyeartime() const {
  return _has_bit(43);
}
inline void UserLogin_Req::clear_highblueyeartime() {
  highblueyeartime_ = 0;
  _clear_bit(43);
}
inline ::google::protobuf::int32 UserLogin_Req::highblueyeartime() const {
  return highblueyeartime_;
}
inline void UserLogin_Req::set_highblueyeartime(::google::protobuf::int32 value) {
  _set_bit(43);
  highblueyeartime_ = value;
}

// -------------------------------------------------------------------

// UserLogin_Rsp

// required int64 uid = 1;
inline bool UserLogin_Rsp::has_uid() const {
  return _has_bit(0);
}
inline void UserLogin_Rsp::clear_uid() {
  uid_ = GOOGLE_LONGLONG(0);
  _clear_bit(0);
}
inline ::google::protobuf::int64 UserLogin_Rsp::uid() const {
  return uid_;
}
inline void UserLogin_Rsp::set_uid(::google::protobuf::int64 value) {
  _set_bit(0);
  uid_ = value;
}

// required string secret = 2;
inline bool UserLogin_Rsp::has_secret() const {
  return _has_bit(1);
}
inline void UserLogin_Rsp::clear_secret() {
  if (secret_ != &_default_secret_) {
    secret_->clear();
  }
  _clear_bit(1);
}
inline const ::std::string& UserLogin_Rsp::secret() const {
  return *secret_;
}
inline void UserLogin_Rsp::set_secret(const ::std::string& value) {
  _set_bit(1);
  if (secret_ == &_default_secret_) {
    secret_ = new ::std::string;
  }
  secret_->assign(value);
}
inline void UserLogin_Rsp::set_secret(const char* value) {
  _set_bit(1);
  if (secret_ == &_default_secret_) {
    secret_ = new ::std::string;
  }
  secret_->assign(value);
}
inline void UserLogin_Rsp::set_secret(const char* value, size_t size) {
  _set_bit(1);
  if (secret_ == &_default_secret_) {
    secret_ = new ::std::string;
  }
  secret_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* UserLogin_Rsp::mutable_secret() {
  _set_bit(1);
  if (secret_ == &_default_secret_) {
    secret_ = new ::std::string;
  }
  return secret_;
}

// required string server = 3;
inline bool UserLogin_Rsp::has_server() const {
  return _has_bit(2);
}
inline void UserLogin_Rsp::clear_server() {
  if (server_ != &_default_server_) {
    server_->clear();
  }
  _clear_bit(2);
}
inline const ::std::string& UserLogin_Rsp::server() const {
  return *server_;
}
inline void UserLogin_Rsp::set_server(const ::std::string& value) {
  _set_bit(2);
  if (server_ == &_default_server_) {
    server_ = new ::std::string;
  }
  server_->assign(value);
}
inline void UserLogin_Rsp::set_server(const char* value) {
  _set_bit(2);
  if (server_ == &_default_server_) {
    server_ = new ::std::string;
  }
  server_->assign(value);
}
inline void UserLogin_Rsp::set_server(const char* value, size_t size) {
  _set_bit(2);
  if (server_ == &_default_server_) {
    server_ = new ::std::string;
  }
  server_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* UserLogin_Rsp::mutable_server() {
  _set_bit(2);
  if (server_ == &_default_server_) {
    server_ = new ::std::string;
  }
  return server_;
}

// required int32 port = 4;
inline bool UserLogin_Rsp::has_port() const {
  return _has_bit(3);
}
inline void UserLogin_Rsp::clear_port() {
  port_ = 0;
  _clear_bit(3);
}
inline ::google::protobuf::int32 UserLogin_Rsp::port() const {
  return port_;
}
inline void UserLogin_Rsp::set_port(::google::protobuf::int32 value) {
  _set_bit(3);
  port_ = value;
}

// required int32 port1 = 5;
inline bool UserLogin_Rsp::has_port1() const {
  return _has_bit(4);
}
inline void UserLogin_Rsp::clear_port1() {
  port1_ = 0;
  _clear_bit(4);
}
inline ::google::protobuf::int32 UserLogin_Rsp::port1() const {
  return port1_;
}
inline void UserLogin_Rsp::set_port1(::google::protobuf::int32 value) {
  _set_bit(4);
  port1_ = value;
}

// required int32 webfd = 6;
inline bool UserLogin_Rsp::has_webfd() const {
  return _has_bit(5);
}
inline void UserLogin_Rsp::clear_webfd() {
  webfd_ = 0;
  _clear_bit(5);
}
inline ::google::protobuf::int32 UserLogin_Rsp::webfd() const {
  return webfd_;
}
inline void UserLogin_Rsp::set_webfd(::google::protobuf::int32 value) {
  _set_bit(5);
  webfd_ = value;
}

// required string sid = 7;
inline bool UserLogin_Rsp::has_sid() const {
  return _has_bit(6);
}
inline void UserLogin_Rsp::clear_sid() {
  if (sid_ != &_default_sid_) {
    sid_->clear();
  }
  _clear_bit(6);
}
inline const ::std::string& UserLogin_Rsp::sid() const {
  return *sid_;
}
inline void UserLogin_Rsp::set_sid(const ::std::string& value) {
  _set_bit(6);
  if (sid_ == &_default_sid_) {
    sid_ = new ::std::string;
  }
  sid_->assign(value);
}
inline void UserLogin_Rsp::set_sid(const char* value) {
  _set_bit(6);
  if (sid_ == &_default_sid_) {
    sid_ = new ::std::string;
  }
  sid_->assign(value);
}
inline void UserLogin_Rsp::set_sid(const char* value, size_t size) {
  _set_bit(6);
  if (sid_ == &_default_sid_) {
    sid_ = new ::std::string;
  }
  sid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* UserLogin_Rsp::mutable_sid() {
  _set_bit(6);
  if (sid_ == &_default_sid_) {
    sid_ = new ::std::string;
  }
  return sid_;
}

// required string mainload = 8;
inline bool UserLogin_Rsp::has_mainload() const {
  return _has_bit(7);
}
inline void UserLogin_Rsp::clear_mainload() {
  if (mainload_ != &_default_mainload_) {
    mainload_->clear();
  }
  _clear_bit(7);
}
inline const ::std::string& UserLogin_Rsp::mainload() const {
  return *mainload_;
}
inline void UserLogin_Rsp::set_mainload(const ::std::string& value) {
  _set_bit(7);
  if (mainload_ == &_default_mainload_) {
    mainload_ = new ::std::string;
  }
  mainload_->assign(value);
}
inline void UserLogin_Rsp::set_mainload(const char* value) {
  _set_bit(7);
  if (mainload_ == &_default_mainload_) {
    mainload_ = new ::std::string;
  }
  mainload_->assign(value);
}
inline void UserLogin_Rsp::set_mainload(const char* value, size_t size) {
  _set_bit(7);
  if (mainload_ == &_default_mainload_) {
    mainload_ = new ::std::string;
  }
  mainload_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* UserLogin_Rsp::mutable_mainload() {
  _set_bit(7);
  if (mainload_ == &_default_mainload_) {
    mainload_ = new ::std::string;
  }
  return mainload_;
}

// required string version = 9;
inline bool UserLogin_Rsp::has_version() const {
  return _has_bit(8);
}
inline void UserLogin_Rsp::clear_version() {
  if (version_ != &_default_version_) {
    version_->clear();
  }
  _clear_bit(8);
}
inline const ::std::string& UserLogin_Rsp::version() const {
  return *version_;
}
inline void UserLogin_Rsp::set_version(const ::std::string& value) {
  _set_bit(8);
  if (version_ == &_default_version_) {
    version_ = new ::std::string;
  }
  version_->assign(value);
}
inline void UserLogin_Rsp::set_version(const char* value) {
  _set_bit(8);
  if (version_ == &_default_version_) {
    version_ = new ::std::string;
  }
  version_->assign(value);
}
inline void UserLogin_Rsp::set_version(const char* value, size_t size) {
  _set_bit(8);
  if (version_ == &_default_version_) {
    version_ = new ::std::string;
  }
  version_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* UserLogin_Rsp::mutable_version() {
  _set_bit(8);
  if (version_ == &_default_version_) {
    version_ = new ::std::string;
  }
  return version_;
}

// required int32 region = 10;
inline bool UserLogin_Rsp::has_region() const {
  return _has_bit(9);
}
inline void UserLogin_Rsp::clear_region() {
  region_ = 0;
  _clear_bit(9);
}
inline ::google::protobuf::int32 UserLogin_Rsp::region() const {
  return region_;
}
inline void UserLogin_Rsp::set_region(::google::protobuf::int32 value) {
  _set_bit(9);
  region_ = value;
}

// optional int64 gettime = 11 [default = 0];
inline bool UserLogin_Rsp::has_gettime() const {
  return _has_bit(10);
}
inline void UserLogin_Rsp::clear_gettime() {
  gettime_ = GOOGLE_LONGLONG(0);
  _clear_bit(10);
}
inline ::google::protobuf::int64 UserLogin_Rsp::gettime() const {
  return gettime_;
}
inline void UserLogin_Rsp::set_gettime(::google::protobuf::int64 value) {
  _set_bit(10);
  gettime_ = value;
}

// optional string platform_id = 12;
inline bool UserLogin_Rsp::has_platform_id() const {
  return _has_bit(11);
}
inline void UserLogin_Rsp::clear_platform_id() {
  if (platform_id_ != &_default_platform_id_) {
    platform_id_->clear();
  }
  _clear_bit(11);
}
inline const ::std::string& UserLogin_Rsp::platform_id() const {
  return *platform_id_;
}
inline void UserLogin_Rsp::set_platform_id(const ::std::string& value) {
  _set_bit(11);
  if (platform_id_ == &_default_platform_id_) {
    platform_id_ = new ::std::string;
  }
  platform_id_->assign(value);
}
inline void UserLogin_Rsp::set_platform_id(const char* value) {
  _set_bit(11);
  if (platform_id_ == &_default_platform_id_) {
    platform_id_ = new ::std::string;
  }
  platform_id_->assign(value);
}
inline void UserLogin_Rsp::set_platform_id(const char* value, size_t size) {
  _set_bit(11);
  if (platform_id_ == &_default_platform_id_) {
    platform_id_ = new ::std::string;
  }
  platform_id_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* UserLogin_Rsp::mutable_platform_id() {
  _set_bit(11);
  if (platform_id_ == &_default_platform_id_) {
    platform_id_ = new ::std::string;
  }
  return platform_id_;
}

// optional int32 logintimes = 13;
inline bool UserLogin_Rsp::has_logintimes() const {
  return _has_bit(12);
}
inline void UserLogin_Rsp::clear_logintimes() {
  logintimes_ = 0;
  _clear_bit(12);
}
inline ::google::protobuf::int32 UserLogin_Rsp::logintimes() const {
  return logintimes_;
}
inline void UserLogin_Rsp::set_logintimes(::google::protobuf::int32 value) {
  _set_bit(12);
  logintimes_ = value;
}

// optional int32 playerlvl = 14;
inline bool UserLogin_Rsp::has_playerlvl() const {
  return _has_bit(13);
}
inline void UserLogin_Rsp::clear_playerlvl() {
  playerlvl_ = 0;
  _clear_bit(13);
}
inline ::google::protobuf::int32 UserLogin_Rsp::playerlvl() const {
  return playerlvl_;
}
inline void UserLogin_Rsp::set_playerlvl(::google::protobuf::int32 value) {
  _set_bit(13);
  playerlvl_ = value;
}

// optional bool isnewplayer = 15 [default = false];
inline bool UserLogin_Rsp::has_isnewplayer() const {
  return _has_bit(14);
}
inline void UserLogin_Rsp::clear_isnewplayer() {
  isnewplayer_ = false;
  _clear_bit(14);
}
inline bool UserLogin_Rsp::isnewplayer() const {
  return isnewplayer_;
}
inline void UserLogin_Rsp::set_isnewplayer(bool value) {
  _set_bit(14);
  isnewplayer_ = value;
}

// optional int32 customFlag = 16 [default = 0];
inline bool UserLogin_Rsp::has_customflag() const {
  return _has_bit(15);
}
inline void UserLogin_Rsp::clear_customflag() {
  customflag_ = 0;
  _clear_bit(15);
}
inline ::google::protobuf::int32 UserLogin_Rsp::customflag() const {
  return customflag_;
}
inline void UserLogin_Rsp::set_customflag(::google::protobuf::int32 value) {
  _set_bit(15);
  customflag_ = value;
}

// optional string channel = 17 [default = ""];
inline bool UserLogin_Rsp::has_channel() const {
  return _has_bit(16);
}
inline void UserLogin_Rsp::clear_channel() {
  if (channel_ != &_default_channel_) {
    channel_->clear();
  }
  _clear_bit(16);
}
inline const ::std::string& UserLogin_Rsp::channel() const {
  return *channel_;
}
inline void UserLogin_Rsp::set_channel(const ::std::string& value) {
  _set_bit(16);
  if (channel_ == &_default_channel_) {
    channel_ = new ::std::string;
  }
  channel_->assign(value);
}
inline void UserLogin_Rsp::set_channel(const char* value) {
  _set_bit(16);
  if (channel_ == &_default_channel_) {
    channel_ = new ::std::string;
  }
  channel_->assign(value);
}
inline void UserLogin_Rsp::set_channel(const char* value, size_t size) {
  _set_bit(16);
  if (channel_ == &_default_channel_) {
    channel_ = new ::std::string;
  }
  channel_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* UserLogin_Rsp::mutable_channel() {
  _set_bit(16);
  if (channel_ == &_default_channel_) {
    channel_ = new ::std::string;
  }
  return channel_;
}

// -------------------------------------------------------------------

// WorkingStatus_Req

// required int32 gid = 1;
inline bool WorkingStatus_Req::has_gid() const {
  return _has_bit(0);
}
inline void WorkingStatus_Req::clear_gid() {
  gid_ = 0;
  _clear_bit(0);
}
inline ::google::protobuf::int32 WorkingStatus_Req::gid() const {
  return gid_;
}
inline void WorkingStatus_Req::set_gid(::google::protobuf::int32 value) {
  _set_bit(0);
  gid_ = value;
}

// required bool finish = 2;
inline bool WorkingStatus_Req::has_finish() const {
  return _has_bit(1);
}
inline void WorkingStatus_Req::clear_finish() {
  finish_ = false;
  _clear_bit(1);
}
inline bool WorkingStatus_Req::finish() const {
  return finish_;
}
inline void WorkingStatus_Req::set_finish(bool value) {
  _set_bit(1);
  finish_ = value;
}

// -------------------------------------------------------------------

// UserAuth_Req

// required int64 uid = 1;
inline bool UserAuth_Req::has_uid() const {
  return _has_bit(0);
}
inline void UserAuth_Req::clear_uid() {
  uid_ = GOOGLE_LONGLONG(0);
  _clear_bit(0);
}
inline ::google::protobuf::int64 UserAuth_Req::uid() const {
  return uid_;
}
inline void UserAuth_Req::set_uid(::google::protobuf::int64 value) {
  _set_bit(0);
  uid_ = value;
}

// required int64 secret = 2;
inline bool UserAuth_Req::has_secret() const {
  return _has_bit(1);
}
inline void UserAuth_Req::clear_secret() {
  secret_ = GOOGLE_LONGLONG(0);
  _clear_bit(1);
}
inline ::google::protobuf::int64 UserAuth_Req::secret() const {
  return secret_;
}
inline void UserAuth_Req::set_secret(::google::protobuf::int64 value) {
  _set_bit(1);
  secret_ = value;
}

// required int32 sockfd = 3;
inline bool UserAuth_Req::has_sockfd() const {
  return _has_bit(2);
}
inline void UserAuth_Req::clear_sockfd() {
  sockfd_ = 0;
  _clear_bit(2);
}
inline ::google::protobuf::int32 UserAuth_Req::sockfd() const {
  return sockfd_;
}
inline void UserAuth_Req::set_sockfd(::google::protobuf::int32 value) {
  _set_bit(2);
  sockfd_ = value;
}

// -------------------------------------------------------------------

// UserAuth_Rsp

// required bool pass = 1;
inline bool UserAuth_Rsp::has_pass() const {
  return _has_bit(0);
}
inline void UserAuth_Rsp::clear_pass() {
  pass_ = false;
  _clear_bit(0);
}
inline bool UserAuth_Rsp::pass() const {
  return pass_;
}
inline void UserAuth_Rsp::set_pass(bool value) {
  _set_bit(0);
  pass_ = value;
}

// -------------------------------------------------------------------

// SendRemoteUser_Req

// required int64 uid = 1;
inline bool SendRemoteUser_Req::has_uid() const {
  return _has_bit(0);
}
inline void SendRemoteUser_Req::clear_uid() {
  uid_ = GOOGLE_LONGLONG(0);
  _clear_bit(0);
}
inline ::google::protobuf::int64 SendRemoteUser_Req::uid() const {
  return uid_;
}
inline void SendRemoteUser_Req::set_uid(::google::protobuf::int64 value) {
  _set_bit(0);
  uid_ = value;
}

// required int32 cmd = 2;
inline bool SendRemoteUser_Req::has_cmd() const {
  return _has_bit(1);
}
inline void SendRemoteUser_Req::clear_cmd() {
  cmd_ = 0;
  _clear_bit(1);
}
inline ::google::protobuf::int32 SendRemoteUser_Req::cmd() const {
  return cmd_;
}
inline void SendRemoteUser_Req::set_cmd(::google::protobuf::int32 value) {
  _set_bit(1);
  cmd_ = value;
}

// required string text = 3;
inline bool SendRemoteUser_Req::has_text() const {
  return _has_bit(2);
}
inline void SendRemoteUser_Req::clear_text() {
  if (text_ != &_default_text_) {
    text_->clear();
  }
  _clear_bit(2);
}
inline const ::std::string& SendRemoteUser_Req::text() const {
  return *text_;
}
inline void SendRemoteUser_Req::set_text(const ::std::string& value) {
  _set_bit(2);
  if (text_ == &_default_text_) {
    text_ = new ::std::string;
  }
  text_->assign(value);
}
inline void SendRemoteUser_Req::set_text(const char* value) {
  _set_bit(2);
  if (text_ == &_default_text_) {
    text_ = new ::std::string;
  }
  text_->assign(value);
}
inline void SendRemoteUser_Req::set_text(const char* value, size_t size) {
  _set_bit(2);
  if (text_ == &_default_text_) {
    text_ = new ::std::string;
  }
  text_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SendRemoteUser_Req::mutable_text() {
  _set_bit(2);
  if (text_ == &_default_text_) {
    text_ = new ::std::string;
  }
  return text_;
}

// -------------------------------------------------------------------

// WG_UserLeave

// required int32 fd = 1;
inline bool WG_UserLeave::has_fd() const {
  return _has_bit(0);
}
inline void WG_UserLeave::clear_fd() {
  fd_ = 0;
  _clear_bit(0);
}
inline ::google::protobuf::int32 WG_UserLeave::fd() const {
  return fd_;
}
inline void WG_UserLeave::set_fd(::google::protobuf::int32 value) {
  _set_bit(0);
  fd_ = value;
}

// -------------------------------------------------------------------

// GWG_FriendRequest

// optional int64 tuid = 1 [default = -1];
inline bool GWG_FriendRequest::has_tuid() const {
  return _has_bit(0);
}
inline void GWG_FriendRequest::clear_tuid() {
  tuid_ = GOOGLE_LONGLONG(-1);
  _clear_bit(0);
}
inline ::google::protobuf::int64 GWG_FriendRequest::tuid() const {
  return tuid_;
}
inline void GWG_FriendRequest::set_tuid(::google::protobuf::int64 value) {
  _set_bit(0);
  tuid_ = value;
}

// optional bool ret = 2 [default = false];
inline bool GWG_FriendRequest::has_ret() const {
  return _has_bit(1);
}
inline void GWG_FriendRequest::clear_ret() {
  ret_ = false;
  _clear_bit(1);
}
inline bool GWG_FriendRequest::ret() const {
  return ret_;
}
inline void GWG_FriendRequest::set_ret(bool value) {
  _set_bit(1);
  ret_ = value;
}

// optional .FriendInfoLite info = 3;
inline bool GWG_FriendRequest::has_info() const {
  return _has_bit(2);
}
inline void GWG_FriendRequest::clear_info() {
  if (info_ != NULL) info_->::FriendInfoLite::Clear();
  _clear_bit(2);
}
inline const ::FriendInfoLite& GWG_FriendRequest::info() const {
  return info_ != NULL ? *info_ : *default_instance_->info_;
}
inline ::FriendInfoLite* GWG_FriendRequest::mutable_info() {
  _set_bit(2);
  if (info_ == NULL) info_ = new ::FriendInfoLite;
  return info_;
}

// optional int32 plat_type = 4 [default = 0];
inline bool GWG_FriendRequest::has_plat_type() const {
  return _has_bit(3);
}
inline void GWG_FriendRequest::clear_plat_type() {
  plat_type_ = 0;
  _clear_bit(3);
}
inline ::google::protobuf::int32 GWG_FriendRequest::plat_type() const {
  return plat_type_;
}
inline void GWG_FriendRequest::set_plat_type(::google::protobuf::int32 value) {
  _set_bit(3);
  plat_type_ = value;
}

// optional string platid = 5 [default = ""];
inline bool GWG_FriendRequest::has_platid() const {
  return _has_bit(4);
}
inline void GWG_FriendRequest::clear_platid() {
  if (platid_ != &_default_platid_) {
    platid_->clear();
  }
  _clear_bit(4);
}
inline const ::std::string& GWG_FriendRequest::platid() const {
  return *platid_;
}
inline void GWG_FriendRequest::set_platid(const ::std::string& value) {
  _set_bit(4);
  if (platid_ == &_default_platid_) {
    platid_ = new ::std::string;
  }
  platid_->assign(value);
}
inline void GWG_FriendRequest::set_platid(const char* value) {
  _set_bit(4);
  if (platid_ == &_default_platid_) {
    platid_ = new ::std::string;
  }
  platid_->assign(value);
}
inline void GWG_FriendRequest::set_platid(const char* value, size_t size) {
  _set_bit(4);
  if (platid_ == &_default_platid_) {
    platid_ = new ::std::string;
  }
  platid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* GWG_FriendRequest::mutable_platid() {
  _set_bit(4);
  if (platid_ == &_default_platid_) {
    platid_ = new ::std::string;
  }
  return platid_;
}

// optional bool is_plat_friend = 6 [default = true];
inline bool GWG_FriendRequest::has_is_plat_friend() const {
  return _has_bit(5);
}
inline void GWG_FriendRequest::clear_is_plat_friend() {
  is_plat_friend_ = true;
  _clear_bit(5);
}
inline bool GWG_FriendRequest::is_plat_friend() const {
  return is_plat_friend_;
}
inline void GWG_FriendRequest::set_is_plat_friend(bool value) {
  _set_bit(5);
  is_plat_friend_ = value;
}

// optional int32 region = 7;
inline bool GWG_FriendRequest::has_region() const {
  return _has_bit(6);
}
inline void GWG_FriendRequest::clear_region() {
  region_ = 0;
  _clear_bit(6);
}
inline ::google::protobuf::int32 GWG_FriendRequest::region() const {
  return region_;
}
inline void GWG_FriendRequest::set_region(::google::protobuf::int32 value) {
  _set_bit(6);
  region_ = value;
}

// -------------------------------------------------------------------

// ForwardInfo

// optional int64 uid = 1 [default = -1];
inline bool ForwardInfo::has_uid() const {
  return _has_bit(0);
}
inline void ForwardInfo::clear_uid() {
  uid_ = GOOGLE_LONGLONG(-1);
  _clear_bit(0);
}
inline ::google::protobuf::int64 ForwardInfo::uid() const {
  return uid_;
}
inline void ForwardInfo::set_uid(::google::protobuf::int64 value) {
  _set_bit(0);
  uid_ = value;
}

// optional string platid = 2 [default = "0"];
inline bool ForwardInfo::has_platid() const {
  return _has_bit(1);
}
inline void ForwardInfo::clear_platid() {
  if (platid_ != &_default_platid_) {
    platid_->assign(_default_platid_);
  }
  _clear_bit(1);
}
inline const ::std::string& ForwardInfo::platid() const {
  return *platid_;
}
inline void ForwardInfo::set_platid(const ::std::string& value) {
  _set_bit(1);
  if (platid_ == &_default_platid_) {
    platid_ = new ::std::string;
  }
  platid_->assign(value);
}
inline void ForwardInfo::set_platid(const char* value) {
  _set_bit(1);
  if (platid_ == &_default_platid_) {
    platid_ = new ::std::string;
  }
  platid_->assign(value);
}
inline void ForwardInfo::set_platid(const char* value, size_t size) {
  _set_bit(1);
  if (platid_ == &_default_platid_) {
    platid_ = new ::std::string;
  }
  platid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ForwardInfo::mutable_platid() {
  _set_bit(1);
  if (platid_ == &_default_platid_) {
    platid_ = new ::std::string(_default_platid_);
  }
  return platid_;
}

// -------------------------------------------------------------------

// WebGetRegion

// required string openid = 1;
inline bool WebGetRegion::has_openid() const {
  return _has_bit(0);
}
inline void WebGetRegion::clear_openid() {
  if (openid_ != &_default_openid_) {
    openid_->clear();
  }
  _clear_bit(0);
}
inline const ::std::string& WebGetRegion::openid() const {
  return *openid_;
}
inline void WebGetRegion::set_openid(const ::std::string& value) {
  _set_bit(0);
  if (openid_ == &_default_openid_) {
    openid_ = new ::std::string;
  }
  openid_->assign(value);
}
inline void WebGetRegion::set_openid(const char* value) {
  _set_bit(0);
  if (openid_ == &_default_openid_) {
    openid_ = new ::std::string;
  }
  openid_->assign(value);
}
inline void WebGetRegion::set_openid(const char* value, size_t size) {
  _set_bit(0);
  if (openid_ == &_default_openid_) {
    openid_ = new ::std::string;
  }
  openid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* WebGetRegion::mutable_openid() {
  _set_bit(0);
  if (openid_ == &_default_openid_) {
    openid_ = new ::std::string;
  }
  return openid_;
}

// required int32 fd = 2;
inline bool WebGetRegion::has_fd() const {
  return _has_bit(1);
}
inline void WebGetRegion::clear_fd() {
  fd_ = 0;
  _clear_bit(1);
}
inline ::google::protobuf::int32 WebGetRegion::fd() const {
  return fd_;
}
inline void WebGetRegion::set_fd(::google::protobuf::int32 value) {
  _set_bit(1);
  fd_ = value;
}

// repeated int32 srvRegion = 3;
inline int WebGetRegion::srvregion_size() const {
  return srvregion_.size();
}
inline void WebGetRegion::clear_srvregion() {
  srvregion_.Clear();
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
WebGetRegion::srvregion() const {
  return srvregion_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
WebGetRegion::mutable_srvregion() {
  return &srvregion_;
}
inline ::google::protobuf::int32 WebGetRegion::srvregion(int index) const {
  return srvregion_.Get(index);
}
inline void WebGetRegion::set_srvregion(int index, ::google::protobuf::int32 value) {
  srvregion_.Set(index, value);
}
inline void WebGetRegion::add_srvregion(::google::protobuf::int32 value) {
  srvregion_.Add(value);
}

// optional int32 lastregion = 4;
inline bool WebGetRegion::has_lastregion() const {
  return _has_bit(3);
}
inline void WebGetRegion::clear_lastregion() {
  lastregion_ = 0;
  _clear_bit(3);
}
inline ::google::protobuf::int32 WebGetRegion::lastregion() const {
  return lastregion_;
}
inline void WebGetRegion::set_lastregion(::google::protobuf::int32 value) {
  _set_bit(3);
  lastregion_ = value;
}

// required string sid = 5;
inline bool WebGetRegion::has_sid() const {
  return _has_bit(4);
}
inline void WebGetRegion::clear_sid() {
  if (sid_ != &_default_sid_) {
    sid_->clear();
  }
  _clear_bit(4);
}
inline const ::std::string& WebGetRegion::sid() const {
  return *sid_;
}
inline void WebGetRegion::set_sid(const ::std::string& value) {
  _set_bit(4);
  if (sid_ == &_default_sid_) {
    sid_ = new ::std::string;
  }
  sid_->assign(value);
}
inline void WebGetRegion::set_sid(const char* value) {
  _set_bit(4);
  if (sid_ == &_default_sid_) {
    sid_ = new ::std::string;
  }
  sid_->assign(value);
}
inline void WebGetRegion::set_sid(const char* value, size_t size) {
  _set_bit(4);
  if (sid_ == &_default_sid_) {
    sid_ = new ::std::string;
  }
  sid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* WebGetRegion::mutable_sid() {
  _set_bit(4);
  if (sid_ == &_default_sid_) {
    sid_ = new ::std::string;
  }
  return sid_;
}

// -------------------------------------------------------------------

// GCG_PlanetLite

// optional int64 uid = 1;
inline bool GCG_PlanetLite::has_uid() const {
  return _has_bit(0);
}
inline void GCG_PlanetLite::clear_uid() {
  uid_ = GOOGLE_LONGLONG(0);
  _clear_bit(0);
}
inline ::google::protobuf::int64 GCG_PlanetLite::uid() const {
  return uid_;
}
inline void GCG_PlanetLite::set_uid(::google::protobuf::int64 value) {
  _set_bit(0);
  uid_ = value;
}

// optional int32 planetId = 2;
inline bool GCG_PlanetLite::has_planetid() const {
  return _has_bit(1);
}
inline void GCG_PlanetLite::clear_planetid() {
  planetid_ = 0;
  _clear_bit(1);
}
inline ::google::protobuf::int32 GCG_PlanetLite::planetid() const {
  return planetid_;
}
inline void GCG_PlanetLite::set_planetid(::google::protobuf::int32 value) {
  _set_bit(1);
  planetid_ = value;
}

// -------------------------------------------------------------------

// GCG_City

// required int32 cityID = 1;
inline bool GCG_City::has_cityid() const {
  return _has_bit(0);
}
inline void GCG_City::clear_cityid() {
  cityid_ = 0;
  _clear_bit(0);
}
inline ::google::protobuf::int32 GCG_City::cityid() const {
  return cityid_;
}
inline void GCG_City::set_cityid(::google::protobuf::int32 value) {
  _set_bit(0);
  cityid_ = value;
}

// optional int32 x = 2;
inline bool GCG_City::has_x() const {
  return _has_bit(1);
}
inline void GCG_City::clear_x() {
  x_ = 0;
  _clear_bit(1);
}
inline ::google::protobuf::int32 GCG_City::x() const {
  return x_;
}
inline void GCG_City::set_x(::google::protobuf::int32 value) {
  _set_bit(1);
  x_ = value;
}

// optional int32 y = 3;
inline bool GCG_City::has_y() const {
  return _has_bit(2);
}
inline void GCG_City::clear_y() {
  y_ = 0;
  _clear_bit(2);
}
inline ::google::protobuf::int32 GCG_City::y() const {
  return y_;
}
inline void GCG_City::set_y(::google::protobuf::int32 value) {
  _set_bit(2);
  y_ = value;
}

// optional string name = 4;
inline bool GCG_City::has_name() const {
  return _has_bit(3);
}
inline void GCG_City::clear_name() {
  if (name_ != &_default_name_) {
    name_->clear();
  }
  _clear_bit(3);
}
inline const ::std::string& GCG_City::name() const {
  return *name_;
}
inline void GCG_City::set_name(const ::std::string& value) {
  _set_bit(3);
  if (name_ == &_default_name_) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void GCG_City::set_name(const char* value) {
  _set_bit(3);
  if (name_ == &_default_name_) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void GCG_City::set_name(const char* value, size_t size) {
  _set_bit(3);
  if (name_ == &_default_name_) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* GCG_City::mutable_name() {
  _set_bit(3);
  if (name_ == &_default_name_) {
    name_ = new ::std::string;
  }
  return name_;
}

// repeated .GCG_PlanetLite planets = 5;
inline int GCG_City::planets_size() const {
  return planets_.size();
}
inline void GCG_City::clear_planets() {
  planets_.Clear();
}
inline const ::google::protobuf::RepeatedPtrField< ::GCG_PlanetLite >&
GCG_City::planets() const {
  return planets_;
}
inline ::google::protobuf::RepeatedPtrField< ::GCG_PlanetLite >*
GCG_City::mutable_planets() {
  return &planets_;
}
inline const ::GCG_PlanetLite& GCG_City::planets(int index) const {
  return planets_.Get(index);
}
inline ::GCG_PlanetLite* GCG_City::mutable_planets(int index) {
  return planets_.Mutable(index);
}
inline ::GCG_PlanetLite* GCG_City::add_planets() {
  return planets_.Add();
}

// -------------------------------------------------------------------

// GCG_CountryNeed

// optional int32 countrySrvID = 1;
inline bool GCG_CountryNeed::has_countrysrvid() const {
  return _has_bit(0);
}
inline void GCG_CountryNeed::clear_countrysrvid() {
  countrysrvid_ = 0;
  _clear_bit(0);
}
inline ::google::protobuf::int32 GCG_CountryNeed::countrysrvid() const {
  return countrysrvid_;
}
inline void GCG_CountryNeed::set_countrysrvid(::google::protobuf::int32 value) {
  _set_bit(0);
  countrysrvid_ = value;
}

// optional int32 region = 2;
inline bool GCG_CountryNeed::has_region() const {
  return _has_bit(1);
}
inline void GCG_CountryNeed::clear_region() {
  region_ = 0;
  _clear_bit(1);
}
inline ::google::protobuf::int32 GCG_CountryNeed::region() const {
  return region_;
}
inline void GCG_CountryNeed::set_region(::google::protobuf::int32 value) {
  _set_bit(1);
  region_ = value;
}

// optional int32 gameSrvID = 3;
inline bool GCG_CountryNeed::has_gamesrvid() const {
  return _has_bit(2);
}
inline void GCG_CountryNeed::clear_gamesrvid() {
  gamesrvid_ = 0;
  _clear_bit(2);
}
inline ::google::protobuf::int32 GCG_CountryNeed::gamesrvid() const {
  return gamesrvid_;
}
inline void GCG_CountryNeed::set_gamesrvid(::google::protobuf::int32 value) {
  _set_bit(2);
  gamesrvid_ = value;
}

// -------------------------------------------------------------------

// GRG_RegionNeed

// optional int32 regionSrvID = 1;
inline bool GRG_RegionNeed::has_regionsrvid() const {
  return _has_bit(0);
}
inline void GRG_RegionNeed::clear_regionsrvid() {
  regionsrvid_ = 0;
  _clear_bit(0);
}
inline ::google::protobuf::int32 GRG_RegionNeed::regionsrvid() const {
  return regionsrvid_;
}
inline void GRG_RegionNeed::set_regionsrvid(::google::protobuf::int32 value) {
  _set_bit(0);
  regionsrvid_ = value;
}

// optional int32 region = 2;
inline bool GRG_RegionNeed::has_region() const {
  return _has_bit(1);
}
inline void GRG_RegionNeed::clear_region() {
  region_ = 0;
  _clear_bit(1);
}
inline ::google::protobuf::int32 GRG_RegionNeed::region() const {
  return region_;
}
inline void GRG_RegionNeed::set_region(::google::protobuf::int32 value) {
  _set_bit(1);
  region_ = value;
}

// optional int32 gameSrvID = 3;
inline bool GRG_RegionNeed::has_gamesrvid() const {
  return _has_bit(2);
}
inline void GRG_RegionNeed::clear_gamesrvid() {
  gamesrvid_ = 0;
  _clear_bit(2);
}
inline ::google::protobuf::int32 GRG_RegionNeed::gamesrvid() const {
  return gamesrvid_;
}
inline void GRG_RegionNeed::set_gamesrvid(::google::protobuf::int32 value) {
  _set_bit(2);
  gamesrvid_ = value;
}

// -------------------------------------------------------------------

// GRG_RankNeed

// optional int32 rankSrvID = 1;
inline bool GRG_RankNeed::has_ranksrvid() const {
  return _has_bit(0);
}
inline void GRG_RankNeed::clear_ranksrvid() {
  ranksrvid_ = 0;
  _clear_bit(0);
}
inline ::google::protobuf::int32 GRG_RankNeed::ranksrvid() const {
  return ranksrvid_;
}
inline void GRG_RankNeed::set_ranksrvid(::google::protobuf::int32 value) {
  _set_bit(0);
  ranksrvid_ = value;
}

// optional int32 region = 2;
inline bool GRG_RankNeed::has_region() const {
  return _has_bit(1);
}
inline void GRG_RankNeed::clear_region() {
  region_ = 0;
  _clear_bit(1);
}
inline ::google::protobuf::int32 GRG_RankNeed::region() const {
  return region_;
}
inline void GRG_RankNeed::set_region(::google::protobuf::int32 value) {
  _set_bit(1);
  region_ = value;
}

// optional int32 gameSrvID = 3;
inline bool GRG_RankNeed::has_gamesrvid() const {
  return _has_bit(2);
}
inline void GRG_RankNeed::clear_gamesrvid() {
  gamesrvid_ = 0;
  _clear_bit(2);
}
inline ::google::protobuf::int32 GRG_RankNeed::gamesrvid() const {
  return gamesrvid_;
}
inline void GRG_RankNeed::set_gamesrvid(::google::protobuf::int32 value) {
  _set_bit(2);
  gamesrvid_ = value;
}

// -------------------------------------------------------------------

// GSG_StatNeed

// optional int32 statSrvID = 1;
inline bool GSG_StatNeed::has_statsrvid() const {
  return _has_bit(0);
}
inline void GSG_StatNeed::clear_statsrvid() {
  statsrvid_ = 0;
  _clear_bit(0);
}
inline ::google::protobuf::int32 GSG_StatNeed::statsrvid() const {
  return statsrvid_;
}
inline void GSG_StatNeed::set_statsrvid(::google::protobuf::int32 value) {
  _set_bit(0);
  statsrvid_ = value;
}

// optional int32 region = 2;
inline bool GSG_StatNeed::has_region() const {
  return _has_bit(1);
}
inline void GSG_StatNeed::clear_region() {
  region_ = 0;
  _clear_bit(1);
}
inline ::google::protobuf::int32 GSG_StatNeed::region() const {
  return region_;
}
inline void GSG_StatNeed::set_region(::google::protobuf::int32 value) {
  _set_bit(1);
  region_ = value;
}

// optional int32 gameSrvID = 3;
inline bool GSG_StatNeed::has_gamesrvid() const {
  return _has_bit(2);
}
inline void GSG_StatNeed::clear_gamesrvid() {
  gamesrvid_ = 0;
  _clear_bit(2);
}
inline ::google::protobuf::int32 GSG_StatNeed::gamesrvid() const {
  return gamesrvid_;
}
inline void GSG_StatNeed::set_gamesrvid(::google::protobuf::int32 value) {
  _set_bit(2);
  gamesrvid_ = value;
}

// -------------------------------------------------------------------

// HttpAskMsg

// optional string szOpenid = 1;
inline bool HttpAskMsg::has_szopenid() const {
  return _has_bit(0);
}
inline void HttpAskMsg::clear_szopenid() {
  if (szopenid_ != &_default_szopenid_) {
    szopenid_->clear();
  }
  _clear_bit(0);
}
inline const ::std::string& HttpAskMsg::szopenid() const {
  return *szopenid_;
}
inline void HttpAskMsg::set_szopenid(const ::std::string& value) {
  _set_bit(0);
  if (szopenid_ == &_default_szopenid_) {
    szopenid_ = new ::std::string;
  }
  szopenid_->assign(value);
}
inline void HttpAskMsg::set_szopenid(const char* value) {
  _set_bit(0);
  if (szopenid_ == &_default_szopenid_) {
    szopenid_ = new ::std::string;
  }
  szopenid_->assign(value);
}
inline void HttpAskMsg::set_szopenid(const char* value, size_t size) {
  _set_bit(0);
  if (szopenid_ == &_default_szopenid_) {
    szopenid_ = new ::std::string;
  }
  szopenid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* HttpAskMsg::mutable_szopenid() {
  _set_bit(0);
  if (szopenid_ == &_default_szopenid_) {
    szopenid_ = new ::std::string;
  }
  return szopenid_;
}

// optional int64 nUid = 2;
inline bool HttpAskMsg::has_nuid() const {
  return _has_bit(1);
}
inline void HttpAskMsg::clear_nuid() {
  nuid_ = GOOGLE_LONGLONG(0);
  _clear_bit(1);
}
inline ::google::protobuf::int64 HttpAskMsg::nuid() const {
  return nuid_;
}
inline void HttpAskMsg::set_nuid(::google::protobuf::int64 value) {
  _set_bit(1);
  nuid_ = value;
}

// optional int32 nRegion = 3;
inline bool HttpAskMsg::has_nregion() const {
  return _has_bit(2);
}
inline void HttpAskMsg::clear_nregion() {
  nregion_ = 0;
  _clear_bit(2);
}
inline ::google::protobuf::int32 HttpAskMsg::nregion() const {
  return nregion_;
}
inline void HttpAskMsg::set_nregion(::google::protobuf::int32 value) {
  _set_bit(2);
  nregion_ = value;
}

// optional int32 nType = 4;
inline bool HttpAskMsg::has_ntype() const {
  return _has_bit(3);
}
inline void HttpAskMsg::clear_ntype() {
  ntype_ = 0;
  _clear_bit(3);
}
inline ::google::protobuf::int32 HttpAskMsg::ntype() const {
  return ntype_;
}
inline void HttpAskMsg::set_ntype(::google::protobuf::int32 value) {
  _set_bit(3);
  ntype_ = value;
}

// optional int32 nTypeSec = 5;
inline bool HttpAskMsg::has_ntypesec() const {
  return _has_bit(4);
}
inline void HttpAskMsg::clear_ntypesec() {
  ntypesec_ = 0;
  _clear_bit(4);
}
inline ::google::protobuf::int32 HttpAskMsg::ntypesec() const {
  return ntypesec_;
}
inline void HttpAskMsg::set_ntypesec(::google::protobuf::int32 value) {
  _set_bit(4);
  ntypesec_ = value;
}

// optional string szArgvs = 6;
inline bool HttpAskMsg::has_szargvs() const {
  return _has_bit(5);
}
inline void HttpAskMsg::clear_szargvs() {
  if (szargvs_ != &_default_szargvs_) {
    szargvs_->clear();
  }
  _clear_bit(5);
}
inline const ::std::string& HttpAskMsg::szargvs() const {
  return *szargvs_;
}
inline void HttpAskMsg::set_szargvs(const ::std::string& value) {
  _set_bit(5);
  if (szargvs_ == &_default_szargvs_) {
    szargvs_ = new ::std::string;
  }
  szargvs_->assign(value);
}
inline void HttpAskMsg::set_szargvs(const char* value) {
  _set_bit(5);
  if (szargvs_ == &_default_szargvs_) {
    szargvs_ = new ::std::string;
  }
  szargvs_->assign(value);
}
inline void HttpAskMsg::set_szargvs(const char* value, size_t size) {
  _set_bit(5);
  if (szargvs_ == &_default_szargvs_) {
    szargvs_ = new ::std::string;
  }
  szargvs_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* HttpAskMsg::mutable_szargvs() {
  _set_bit(5);
  if (szargvs_ == &_default_szargvs_) {
    szargvs_ = new ::std::string;
  }
  return szargvs_;
}

// optional bool bToQQ = 7 [default = false];
inline bool HttpAskMsg::has_btoqq() const {
  return _has_bit(6);
}
inline void HttpAskMsg::clear_btoqq() {
  btoqq_ = false;
  _clear_bit(6);
}
inline bool HttpAskMsg::btoqq() const {
  return btoqq_;
}
inline void HttpAskMsg::set_btoqq(bool value) {
  _set_bit(6);
  btoqq_ = value;
}

// optional int32 nUserIP = 8 [default = 0];
inline bool HttpAskMsg::has_nuserip() const {
  return _has_bit(7);
}
inline void HttpAskMsg::clear_nuserip() {
  nuserip_ = 0;
  _clear_bit(7);
}
inline ::google::protobuf::int32 HttpAskMsg::nuserip() const {
  return nuserip_;
}
inline void HttpAskMsg::set_nuserip(::google::protobuf::int32 value) {
  _set_bit(7);
  nuserip_ = value;
}

// optional int32 nModifyfee = 9 [default = 0];
inline bool HttpAskMsg::has_nmodifyfee() const {
  return _has_bit(8);
}
inline void HttpAskMsg::clear_nmodifyfee() {
  nmodifyfee_ = 0;
  _clear_bit(8);
}
inline ::google::protobuf::int32 HttpAskMsg::nmodifyfee() const {
  return nmodifyfee_;
}
inline void HttpAskMsg::set_nmodifyfee(::google::protobuf::int32 value) {
  _set_bit(8);
  nmodifyfee_ = value;
}

// optional int32 nTime = 10 [default = 0];
inline bool HttpAskMsg::has_ntime() const {
  return _has_bit(9);
}
inline void HttpAskMsg::clear_ntime() {
  ntime_ = 0;
  _clear_bit(9);
}
inline ::google::protobuf::int32 HttpAskMsg::ntime() const {
  return ntime_;
}
inline void HttpAskMsg::set_ntime(::google::protobuf::int32 value) {
  _set_bit(9);
  ntime_ = value;
}

// -------------------------------------------------------------------

// HttpAnswerMsg

// optional string szOpenid = 1;
inline bool HttpAnswerMsg::has_szopenid() const {
  return _has_bit(0);
}
inline void HttpAnswerMsg::clear_szopenid() {
  if (szopenid_ != &_default_szopenid_) {
    szopenid_->clear();
  }
  _clear_bit(0);
}
inline const ::std::string& HttpAnswerMsg::szopenid() const {
  return *szopenid_;
}
inline void HttpAnswerMsg::set_szopenid(const ::std::string& value) {
  _set_bit(0);
  if (szopenid_ == &_default_szopenid_) {
    szopenid_ = new ::std::string;
  }
  szopenid_->assign(value);
}
inline void HttpAnswerMsg::set_szopenid(const char* value) {
  _set_bit(0);
  if (szopenid_ == &_default_szopenid_) {
    szopenid_ = new ::std::string;
  }
  szopenid_->assign(value);
}
inline void HttpAnswerMsg::set_szopenid(const char* value, size_t size) {
  _set_bit(0);
  if (szopenid_ == &_default_szopenid_) {
    szopenid_ = new ::std::string;
  }
  szopenid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* HttpAnswerMsg::mutable_szopenid() {
  _set_bit(0);
  if (szopenid_ == &_default_szopenid_) {
    szopenid_ = new ::std::string;
  }
  return szopenid_;
}

// optional int64 nUid = 2;
inline bool HttpAnswerMsg::has_nuid() const {
  return _has_bit(1);
}
inline void HttpAnswerMsg::clear_nuid() {
  nuid_ = GOOGLE_LONGLONG(0);
  _clear_bit(1);
}
inline ::google::protobuf::int64 HttpAnswerMsg::nuid() const {
  return nuid_;
}
inline void HttpAnswerMsg::set_nuid(::google::protobuf::int64 value) {
  _set_bit(1);
  nuid_ = value;
}

// optional int32 nRegion = 3;
inline bool HttpAnswerMsg::has_nregion() const {
  return _has_bit(2);
}
inline void HttpAnswerMsg::clear_nregion() {
  nregion_ = 0;
  _clear_bit(2);
}
inline ::google::protobuf::int32 HttpAnswerMsg::nregion() const {
  return nregion_;
}
inline void HttpAnswerMsg::set_nregion(::google::protobuf::int32 value) {
  _set_bit(2);
  nregion_ = value;
}

// optional int32 nType = 4;
inline bool HttpAnswerMsg::has_ntype() const {
  return _has_bit(3);
}
inline void HttpAnswerMsg::clear_ntype() {
  ntype_ = 0;
  _clear_bit(3);
}
inline ::google::protobuf::int32 HttpAnswerMsg::ntype() const {
  return ntype_;
}
inline void HttpAnswerMsg::set_ntype(::google::protobuf::int32 value) {
  _set_bit(3);
  ntype_ = value;
}

// optional int32 nTypeSec = 5;
inline bool HttpAnswerMsg::has_ntypesec() const {
  return _has_bit(4);
}
inline void HttpAnswerMsg::clear_ntypesec() {
  ntypesec_ = 0;
  _clear_bit(4);
}
inline ::google::protobuf::int32 HttpAnswerMsg::ntypesec() const {
  return ntypesec_;
}
inline void HttpAnswerMsg::set_ntypesec(::google::protobuf::int32 value) {
  _set_bit(4);
  ntypesec_ = value;
}

// optional string szAnswer = 6;
inline bool HttpAnswerMsg::has_szanswer() const {
  return _has_bit(5);
}
inline void HttpAnswerMsg::clear_szanswer() {
  if (szanswer_ != &_default_szanswer_) {
    szanswer_->clear();
  }
  _clear_bit(5);
}
inline const ::std::string& HttpAnswerMsg::szanswer() const {
  return *szanswer_;
}
inline void HttpAnswerMsg::set_szanswer(const ::std::string& value) {
  _set_bit(5);
  if (szanswer_ == &_default_szanswer_) {
    szanswer_ = new ::std::string;
  }
  szanswer_->assign(value);
}
inline void HttpAnswerMsg::set_szanswer(const char* value) {
  _set_bit(5);
  if (szanswer_ == &_default_szanswer_) {
    szanswer_ = new ::std::string;
  }
  szanswer_->assign(value);
}
inline void HttpAnswerMsg::set_szanswer(const char* value, size_t size) {
  _set_bit(5);
  if (szanswer_ == &_default_szanswer_) {
    szanswer_ = new ::std::string;
  }
  szanswer_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* HttpAnswerMsg::mutable_szanswer() {
  _set_bit(5);
  if (szanswer_ == &_default_szanswer_) {
    szanswer_ = new ::std::string;
  }
  return szanswer_;
}

// -------------------------------------------------------------------

// NewStar_Req

// optional string name = 1;
inline bool NewStar_Req::has_name() const {
  return _has_bit(0);
}
inline void NewStar_Req::clear_name() {
  if (name_ != &_default_name_) {
    name_->clear();
  }
  _clear_bit(0);
}
inline const ::std::string& NewStar_Req::name() const {
  return *name_;
}
inline void NewStar_Req::set_name(const ::std::string& value) {
  _set_bit(0);
  if (name_ == &_default_name_) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void NewStar_Req::set_name(const char* value) {
  _set_bit(0);
  if (name_ == &_default_name_) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void NewStar_Req::set_name(const char* value, size_t size) {
  _set_bit(0);
  if (name_ == &_default_name_) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* NewStar_Req::mutable_name() {
  _set_bit(0);
  if (name_ == &_default_name_) {
    name_ = new ::std::string;
  }
  return name_;
}

// optional string url = 2;
inline bool NewStar_Req::has_url() const {
  return _has_bit(1);
}
inline void NewStar_Req::clear_url() {
  if (url_ != &_default_url_) {
    url_->clear();
  }
  _clear_bit(1);
}
inline const ::std::string& NewStar_Req::url() const {
  return *url_;
}
inline void NewStar_Req::set_url(const ::std::string& value) {
  _set_bit(1);
  if (url_ == &_default_url_) {
    url_ = new ::std::string;
  }
  url_->assign(value);
}
inline void NewStar_Req::set_url(const char* value) {
  _set_bit(1);
  if (url_ == &_default_url_) {
    url_ = new ::std::string;
  }
  url_->assign(value);
}
inline void NewStar_Req::set_url(const char* value, size_t size) {
  _set_bit(1);
  if (url_ == &_default_url_) {
    url_ = new ::std::string;
  }
  url_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* NewStar_Req::mutable_url() {
  _set_bit(1);
  if (url_ == &_default_url_) {
    url_ = new ::std::string;
  }
  return url_;
}

// optional int32 planetId = 3;
inline bool NewStar_Req::has_planetid() const {
  return _has_bit(2);
}
inline void NewStar_Req::clear_planetid() {
  planetid_ = 0;
  _clear_bit(2);
}
inline ::google::protobuf::int32 NewStar_Req::planetid() const {
  return planetid_;
}
inline void NewStar_Req::set_planetid(::google::protobuf::int32 value) {
  _set_bit(2);
  planetid_ = value;
}

// optional int64 accountId = 4;
inline bool NewStar_Req::has_accountid() const {
  return _has_bit(3);
}
inline void NewStar_Req::clear_accountid() {
  accountid_ = GOOGLE_LONGLONG(0);
  _clear_bit(3);
}
inline ::google::protobuf::int64 NewStar_Req::accountid() const {
  return accountid_;
}
inline void NewStar_Req::set_accountid(::google::protobuf::int64 value) {
  _set_bit(3);
  accountid_ = value;
}

// -------------------------------------------------------------------

// NewStar_Rsp

// optional int32 id = 1;
inline bool NewStar_Rsp::has_id() const {
  return _has_bit(0);
}
inline void NewStar_Rsp::clear_id() {
  id_ = 0;
  _clear_bit(0);
}
inline ::google::protobuf::int32 NewStar_Rsp::id() const {
  return id_;
}
inline void NewStar_Rsp::set_id(::google::protobuf::int32 value) {
  _set_bit(0);
  id_ = value;
}

// optional string sku = 2;
inline bool NewStar_Rsp::has_sku() const {
  return _has_bit(1);
}
inline void NewStar_Rsp::clear_sku() {
  if (sku_ != &_default_sku_) {
    sku_->clear();
  }
  _clear_bit(1);
}
inline const ::std::string& NewStar_Rsp::sku() const {
  return *sku_;
}
inline void NewStar_Rsp::set_sku(const ::std::string& value) {
  _set_bit(1);
  if (sku_ == &_default_sku_) {
    sku_ = new ::std::string;
  }
  sku_->assign(value);
}
inline void NewStar_Rsp::set_sku(const char* value) {
  _set_bit(1);
  if (sku_ == &_default_sku_) {
    sku_ = new ::std::string;
  }
  sku_->assign(value);
}
inline void NewStar_Rsp::set_sku(const char* value, size_t size) {
  _set_bit(1);
  if (sku_ == &_default_sku_) {
    sku_ = new ::std::string;
  }
  sku_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* NewStar_Rsp::mutable_sku() {
  _set_bit(1);
  if (sku_ == &_default_sku_) {
    sku_ = new ::std::string;
  }
  return sku_;
}

// optional int32 type = 3;
inline bool NewStar_Rsp::has_type() const {
  return _has_bit(2);
}
inline void NewStar_Rsp::clear_type() {
  type_ = 0;
  _clear_bit(2);
}
inline ::google::protobuf::int32 NewStar_Rsp::type() const {
  return type_;
}
inline void NewStar_Rsp::set_type(::google::protobuf::int32 value) {
  _set_bit(2);
  type_ = value;
}

// optional int32 name = 4;
inline bool NewStar_Rsp::has_name() const {
  return _has_bit(3);
}
inline void NewStar_Rsp::clear_name() {
  name_ = 0;
  _clear_bit(3);
}
inline ::google::protobuf::int32 NewStar_Rsp::name() const {
  return name_;
}
inline void NewStar_Rsp::set_name(::google::protobuf::int32 value) {
  _set_bit(3);
  name_ = value;
}

// -------------------------------------------------------------------

// GWG_GameUnit

// optional int32 sku = 1;
inline bool GWG_GameUnit::has_sku() const {
  return _has_bit(0);
}
inline void GWG_GameUnit::clear_sku() {
  sku_ = 0;
  _clear_bit(0);
}
inline ::google::protobuf::int32 GWG_GameUnit::sku() const {
  return sku_;
}
inline void GWG_GameUnit::set_sku(::google::protobuf::int32 value) {
  _set_bit(0);
  sku_ = value;
}

// optional int32 unlock = 2;
inline bool GWG_GameUnit::has_unlock() const {
  return _has_bit(1);
}
inline void GWG_GameUnit::clear_unlock() {
  unlock_ = 0;
  _clear_bit(1);
}
inline ::google::protobuf::int32 GWG_GameUnit::unlock() const {
  return unlock_;
}
inline void GWG_GameUnit::set_unlock(::google::protobuf::int32 value) {
  _set_bit(1);
  unlock_ = value;
}

// optional int32 upgradeId = 3;
inline bool GWG_GameUnit::has_upgradeid() const {
  return _has_bit(2);
}
inline void GWG_GameUnit::clear_upgradeid() {
  upgradeid_ = 0;
  _clear_bit(2);
}
inline ::google::protobuf::int32 GWG_GameUnit::upgradeid() const {
  return upgradeid_;
}
inline void GWG_GameUnit::set_upgradeid(::google::protobuf::int32 value) {
  _set_bit(2);
  upgradeid_ = value;
}

// optional int32 timeLeft = 4;
inline bool GWG_GameUnit::has_timeleft() const {
  return _has_bit(3);
}
inline void GWG_GameUnit::clear_timeleft() {
  timeleft_ = 0;
  _clear_bit(3);
}
inline ::google::protobuf::int32 GWG_GameUnit::timeleft() const {
  return timeleft_;
}
inline void GWG_GameUnit::set_timeleft(::google::protobuf::int32 value) {
  _set_bit(3);
  timeleft_ = value;
}

// optional int64 updateAt = 5;
inline bool GWG_GameUnit::has_updateat() const {
  return _has_bit(4);
}
inline void GWG_GameUnit::clear_updateat() {
  updateat_ = GOOGLE_LONGLONG(0);
  _clear_bit(4);
}
inline ::google::protobuf::int64 GWG_GameUnit::updateat() const {
  return updateat_;
}
inline void GWG_GameUnit::set_updateat(::google::protobuf::int64 value) {
  _set_bit(4);
  updateat_ = value;
}

// -------------------------------------------------------------------

// GWG_BattleInfo

// optional int64 time = 1;
inline bool GWG_BattleInfo::has_time() const {
  return _has_bit(0);
}
inline void GWG_BattleInfo::clear_time() {
  time_ = GOOGLE_LONGLONG(0);
  _clear_bit(0);
}
inline ::google::protobuf::int64 GWG_BattleInfo::time() const {
  return time_;
}
inline void GWG_BattleInfo::set_time(::google::protobuf::int64 value) {
  _set_bit(0);
  time_ = value;
}

// optional int64 accountId = 2;
inline bool GWG_BattleInfo::has_accountid() const {
  return _has_bit(1);
}
inline void GWG_BattleInfo::clear_accountid() {
  accountid_ = GOOGLE_LONGLONG(0);
  _clear_bit(1);
}
inline ::google::protobuf::int64 GWG_BattleInfo::accountid() const {
  return accountid_;
}
inline void GWG_BattleInfo::set_accountid(::google::protobuf::int64 value) {
  _set_bit(1);
  accountid_ = value;
}

// optional string starSku = 3;
inline bool GWG_BattleInfo::has_starsku() const {
  return _has_bit(2);
}
inline void GWG_BattleInfo::clear_starsku() {
  if (starsku_ != &_default_starsku_) {
    starsku_->clear();
  }
  _clear_bit(2);
}
inline const ::std::string& GWG_BattleInfo::starsku() const {
  return *starsku_;
}
inline void GWG_BattleInfo::set_starsku(const ::std::string& value) {
  _set_bit(2);
  if (starsku_ == &_default_starsku_) {
    starsku_ = new ::std::string;
  }
  starsku_->assign(value);
}
inline void GWG_BattleInfo::set_starsku(const char* value) {
  _set_bit(2);
  if (starsku_ == &_default_starsku_) {
    starsku_ = new ::std::string;
  }
  starsku_->assign(value);
}
inline void GWG_BattleInfo::set_starsku(const char* value, size_t size) {
  _set_bit(2);
  if (starsku_ == &_default_starsku_) {
    starsku_ = new ::std::string;
  }
  starsku_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* GWG_BattleInfo::mutable_starsku() {
  _set_bit(2);
  if (starsku_ == &_default_starsku_) {
    starsku_ = new ::std::string;
  }
  return starsku_;
}

// optional string name = 4;
inline bool GWG_BattleInfo::has_name() const {
  return _has_bit(3);
}
inline void GWG_BattleInfo::clear_name() {
  if (name_ != &_default_name_) {
    name_->clear();
  }
  _clear_bit(3);
}
inline const ::std::string& GWG_BattleInfo::name() const {
  return *name_;
}
inline void GWG_BattleInfo::set_name(const ::std::string& value) {
  _set_bit(3);
  if (name_ == &_default_name_) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void GWG_BattleInfo::set_name(const char* value) {
  _set_bit(3);
  if (name_ == &_default_name_) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void GWG_BattleInfo::set_name(const char* value, size_t size) {
  _set_bit(3);
  if (name_ == &_default_name_) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* GWG_BattleInfo::mutable_name() {
  _set_bit(3);
  if (name_ == &_default_name_) {
    name_ = new ::std::string;
  }
  return name_;
}

// optional string url = 5;
inline bool GWG_BattleInfo::has_url() const {
  return _has_bit(4);
}
inline void GWG_BattleInfo::clear_url() {
  if (url_ != &_default_url_) {
    url_->clear();
  }
  _clear_bit(4);
}
inline const ::std::string& GWG_BattleInfo::url() const {
  return *url_;
}
inline void GWG_BattleInfo::set_url(const ::std::string& value) {
  _set_bit(4);
  if (url_ == &_default_url_) {
    url_ = new ::std::string;
  }
  url_->assign(value);
}
inline void GWG_BattleInfo::set_url(const char* value) {
  _set_bit(4);
  if (url_ == &_default_url_) {
    url_ = new ::std::string;
  }
  url_->assign(value);
}
inline void GWG_BattleInfo::set_url(const char* value, size_t size) {
  _set_bit(4);
  if (url_ == &_default_url_) {
    url_ = new ::std::string;
  }
  url_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* GWG_BattleInfo::mutable_url() {
  _set_bit(4);
  if (url_ == &_default_url_) {
    url_ = new ::std::string;
  }
  return url_;
}

// optional int32 planetId = 6;
inline bool GWG_BattleInfo::has_planetid() const {
  return _has_bit(5);
}
inline void GWG_BattleInfo::clear_planetid() {
  planetid_ = 0;
  _clear_bit(5);
}
inline ::google::protobuf::int32 GWG_BattleInfo::planetid() const {
  return planetid_;
}
inline void GWG_BattleInfo::set_planetid(::google::protobuf::int32 value) {
  _set_bit(5);
  planetid_ = value;
}

// repeated .GWG_GameUnit gameUnits = 7;
inline int GWG_BattleInfo::gameunits_size() const {
  return gameunits_.size();
}
inline void GWG_BattleInfo::clear_gameunits() {
  gameunits_.Clear();
}
inline const ::google::protobuf::RepeatedPtrField< ::GWG_GameUnit >&
GWG_BattleInfo::gameunits() const {
  return gameunits_;
}
inline ::google::protobuf::RepeatedPtrField< ::GWG_GameUnit >*
GWG_BattleInfo::mutable_gameunits() {
  return &gameunits_;
}
inline const ::GWG_GameUnit& GWG_BattleInfo::gameunits(int index) const {
  return gameunits_.Get(index);
}
inline ::GWG_GameUnit* GWG_BattleInfo::mutable_gameunits(int index) {
  return gameunits_.Mutable(index);
}
inline ::GWG_GameUnit* GWG_BattleInfo::add_gameunits() {
  return gameunits_.Add();
}

// -------------------------------------------------------------------

// Admin_AddCash_Req

// required int64 uid = 1;
inline bool Admin_AddCash_Req::has_uid() const {
  return _has_bit(0);
}
inline void Admin_AddCash_Req::clear_uid() {
  uid_ = GOOGLE_LONGLONG(0);
  _clear_bit(0);
}
inline ::google::protobuf::int64 Admin_AddCash_Req::uid() const {
  return uid_;
}
inline void Admin_AddCash_Req::set_uid(::google::protobuf::int64 value) {
  _set_bit(0);
  uid_ = value;
}

// optional string platid = 2;
inline bool Admin_AddCash_Req::has_platid() const {
  return _has_bit(1);
}
inline void Admin_AddCash_Req::clear_platid() {
  if (platid_ != &_default_platid_) {
    platid_->clear();
  }
  _clear_bit(1);
}
inline const ::std::string& Admin_AddCash_Req::platid() const {
  return *platid_;
}
inline void Admin_AddCash_Req::set_platid(const ::std::string& value) {
  _set_bit(1);
  if (platid_ == &_default_platid_) {
    platid_ = new ::std::string;
  }
  platid_->assign(value);
}
inline void Admin_AddCash_Req::set_platid(const char* value) {
  _set_bit(1);
  if (platid_ == &_default_platid_) {
    platid_ = new ::std::string;
  }
  platid_->assign(value);
}
inline void Admin_AddCash_Req::set_platid(const char* value, size_t size) {
  _set_bit(1);
  if (platid_ == &_default_platid_) {
    platid_ = new ::std::string;
  }
  platid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Admin_AddCash_Req::mutable_platid() {
  _set_bit(1);
  if (platid_ == &_default_platid_) {
    platid_ = new ::std::string;
  }
  return platid_;
}

// required int32 cash = 3;
inline bool Admin_AddCash_Req::has_cash() const {
  return _has_bit(2);
}
inline void Admin_AddCash_Req::clear_cash() {
  cash_ = 0;
  _clear_bit(2);
}
inline ::google::protobuf::int32 Admin_AddCash_Req::cash() const {
  return cash_;
}
inline void Admin_AddCash_Req::set_cash(::google::protobuf::int32 value) {
  _set_bit(2);
  cash_ = value;
}

// required int32 gid = 4 [default = 0];
inline bool Admin_AddCash_Req::has_gid() const {
  return _has_bit(3);
}
inline void Admin_AddCash_Req::clear_gid() {
  gid_ = 0;
  _clear_bit(3);
}
inline ::google::protobuf::int32 Admin_AddCash_Req::gid() const {
  return gid_;
}
inline void Admin_AddCash_Req::set_gid(::google::protobuf::int32 value) {
  _set_bit(3);
  gid_ = value;
}

// required int32 adminfd = 5;
inline bool Admin_AddCash_Req::has_adminfd() const {
  return _has_bit(4);
}
inline void Admin_AddCash_Req::clear_adminfd() {
  adminfd_ = 0;
  _clear_bit(4);
}
inline ::google::protobuf::int32 Admin_AddCash_Req::adminfd() const {
  return adminfd_;
}
inline void Admin_AddCash_Req::set_adminfd(::google::protobuf::int32 value) {
  _set_bit(4);
  adminfd_ = value;
}

// required int32 type = 6 [default = 0];
inline bool Admin_AddCash_Req::has_type() const {
  return _has_bit(5);
}
inline void Admin_AddCash_Req::clear_type() {
  type_ = 0;
  _clear_bit(5);
}
inline ::google::protobuf::int32 Admin_AddCash_Req::type() const {
  return type_;
}
inline void Admin_AddCash_Req::set_type(::google::protobuf::int32 value) {
  _set_bit(5);
  type_ = value;
}

// optional string sid = 7;
inline bool Admin_AddCash_Req::has_sid() const {
  return _has_bit(6);
}
inline void Admin_AddCash_Req::clear_sid() {
  if (sid_ != &_default_sid_) {
    sid_->clear();
  }
  _clear_bit(6);
}
inline const ::std::string& Admin_AddCash_Req::sid() const {
  return *sid_;
}
inline void Admin_AddCash_Req::set_sid(const ::std::string& value) {
  _set_bit(6);
  if (sid_ == &_default_sid_) {
    sid_ = new ::std::string;
  }
  sid_->assign(value);
}
inline void Admin_AddCash_Req::set_sid(const char* value) {
  _set_bit(6);
  if (sid_ == &_default_sid_) {
    sid_ = new ::std::string;
  }
  sid_->assign(value);
}
inline void Admin_AddCash_Req::set_sid(const char* value, size_t size) {
  _set_bit(6);
  if (sid_ == &_default_sid_) {
    sid_ = new ::std::string;
  }
  sid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Admin_AddCash_Req::mutable_sid() {
  _set_bit(6);
  if (sid_ == &_default_sid_) {
    sid_ = new ::std::string;
  }
  return sid_;
}

// optional bool fromweb = 9 [default = false];
inline bool Admin_AddCash_Req::has_fromweb() const {
  return _has_bit(7);
}
inline void Admin_AddCash_Req::clear_fromweb() {
  fromweb_ = false;
  _clear_bit(7);
}
inline bool Admin_AddCash_Req::fromweb() const {
  return fromweb_;
}
inline void Admin_AddCash_Req::set_fromweb(bool value) {
  _set_bit(7);
  fromweb_ = value;
}

// optional bool istxcross = 10 [default = false];
inline bool Admin_AddCash_Req::has_istxcross() const {
  return _has_bit(8);
}
inline void Admin_AddCash_Req::clear_istxcross() {
  istxcross_ = false;
  _clear_bit(8);
}
inline bool Admin_AddCash_Req::istxcross() const {
  return istxcross_;
}
inline void Admin_AddCash_Req::set_istxcross(bool value) {
  _set_bit(8);
  istxcross_ = value;
}

// optional int32 nChannel = 11 [default = 0];
inline bool Admin_AddCash_Req::has_nchannel() const {
  return _has_bit(9);
}
inline void Admin_AddCash_Req::clear_nchannel() {
  nchannel_ = 0;
  _clear_bit(9);
}
inline ::google::protobuf::int32 Admin_AddCash_Req::nchannel() const {
  return nchannel_;
}
inline void Admin_AddCash_Req::set_nchannel(::google::protobuf::int32 value) {
  _set_bit(9);
  nchannel_ = value;
}

// optional string orderid = 12;
inline bool Admin_AddCash_Req::has_orderid() const {
  return _has_bit(10);
}
inline void Admin_AddCash_Req::clear_orderid() {
  if (orderid_ != &_default_orderid_) {
    orderid_->clear();
  }
  _clear_bit(10);
}
inline const ::std::string& Admin_AddCash_Req::orderid() const {
  return *orderid_;
}
inline void Admin_AddCash_Req::set_orderid(const ::std::string& value) {
  _set_bit(10);
  if (orderid_ == &_default_orderid_) {
    orderid_ = new ::std::string;
  }
  orderid_->assign(value);
}
inline void Admin_AddCash_Req::set_orderid(const char* value) {
  _set_bit(10);
  if (orderid_ == &_default_orderid_) {
    orderid_ = new ::std::string;
  }
  orderid_->assign(value);
}
inline void Admin_AddCash_Req::set_orderid(const char* value, size_t size) {
  _set_bit(10);
  if (orderid_ == &_default_orderid_) {
    orderid_ = new ::std::string;
  }
  orderid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Admin_AddCash_Req::mutable_orderid() {
  _set_bit(10);
  if (orderid_ == &_default_orderid_) {
    orderid_ = new ::std::string;
  }
  return orderid_;
}

// optional int32 nPrepayFlag = 13 [default = 0];
inline bool Admin_AddCash_Req::has_nprepayflag() const {
  return _has_bit(11);
}
inline void Admin_AddCash_Req::clear_nprepayflag() {
  nprepayflag_ = 0;
  _clear_bit(11);
}
inline ::google::protobuf::int32 Admin_AddCash_Req::nprepayflag() const {
  return nprepayflag_;
}
inline void Admin_AddCash_Req::set_nprepayflag(::google::protobuf::int32 value) {
  _set_bit(11);
  nprepayflag_ = value;
}

// -------------------------------------------------------------------

// Admin_AddCash_Rsp

// required int64 uid = 1;
inline bool Admin_AddCash_Rsp::has_uid() const {
  return _has_bit(0);
}
inline void Admin_AddCash_Rsp::clear_uid() {
  uid_ = GOOGLE_LONGLONG(0);
  _clear_bit(0);
}
inline ::google::protobuf::int64 Admin_AddCash_Rsp::uid() const {
  return uid_;
}
inline void Admin_AddCash_Rsp::set_uid(::google::protobuf::int64 value) {
  _set_bit(0);
  uid_ = value;
}

// optional string platid = 2;
inline bool Admin_AddCash_Rsp::has_platid() const {
  return _has_bit(1);
}
inline void Admin_AddCash_Rsp::clear_platid() {
  if (platid_ != &_default_platid_) {
    platid_->clear();
  }
  _clear_bit(1);
}
inline const ::std::string& Admin_AddCash_Rsp::platid() const {
  return *platid_;
}
inline void Admin_AddCash_Rsp::set_platid(const ::std::string& value) {
  _set_bit(1);
  if (platid_ == &_default_platid_) {
    platid_ = new ::std::string;
  }
  platid_->assign(value);
}
inline void Admin_AddCash_Rsp::set_platid(const char* value) {
  _set_bit(1);
  if (platid_ == &_default_platid_) {
    platid_ = new ::std::string;
  }
  platid_->assign(value);
}
inline void Admin_AddCash_Rsp::set_platid(const char* value, size_t size) {
  _set_bit(1);
  if (platid_ == &_default_platid_) {
    platid_ = new ::std::string;
  }
  platid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Admin_AddCash_Rsp::mutable_platid() {
  _set_bit(1);
  if (platid_ == &_default_platid_) {
    platid_ = new ::std::string;
  }
  return platid_;
}

// required int64 oldcash = 3;
inline bool Admin_AddCash_Rsp::has_oldcash() const {
  return _has_bit(2);
}
inline void Admin_AddCash_Rsp::clear_oldcash() {
  oldcash_ = GOOGLE_LONGLONG(0);
  _clear_bit(2);
}
inline ::google::protobuf::int64 Admin_AddCash_Rsp::oldcash() const {
  return oldcash_;
}
inline void Admin_AddCash_Rsp::set_oldcash(::google::protobuf::int64 value) {
  _set_bit(2);
  oldcash_ = value;
}

// required int64 newcash = 4;
inline bool Admin_AddCash_Rsp::has_newcash() const {
  return _has_bit(3);
}
inline void Admin_AddCash_Rsp::clear_newcash() {
  newcash_ = GOOGLE_LONGLONG(0);
  _clear_bit(3);
}
inline ::google::protobuf::int64 Admin_AddCash_Rsp::newcash() const {
  return newcash_;
}
inline void Admin_AddCash_Rsp::set_newcash(::google::protobuf::int64 value) {
  _set_bit(3);
  newcash_ = value;
}

// required int32 gid = 5;
inline bool Admin_AddCash_Rsp::has_gid() const {
  return _has_bit(4);
}
inline void Admin_AddCash_Rsp::clear_gid() {
  gid_ = 0;
  _clear_bit(4);
}
inline ::google::protobuf::int32 Admin_AddCash_Rsp::gid() const {
  return gid_;
}
inline void Admin_AddCash_Rsp::set_gid(::google::protobuf::int32 value) {
  _set_bit(4);
  gid_ = value;
}

// required int32 adminfd = 6;
inline bool Admin_AddCash_Rsp::has_adminfd() const {
  return _has_bit(5);
}
inline void Admin_AddCash_Rsp::clear_adminfd() {
  adminfd_ = 0;
  _clear_bit(5);
}
inline ::google::protobuf::int32 Admin_AddCash_Rsp::adminfd() const {
  return adminfd_;
}
inline void Admin_AddCash_Rsp::set_adminfd(::google::protobuf::int32 value) {
  _set_bit(5);
  adminfd_ = value;
}

// required int32 type = 7 [default = 0];
inline bool Admin_AddCash_Rsp::has_type() const {
  return _has_bit(6);
}
inline void Admin_AddCash_Rsp::clear_type() {
  type_ = 0;
  _clear_bit(6);
}
inline ::google::protobuf::int32 Admin_AddCash_Rsp::type() const {
  return type_;
}
inline void Admin_AddCash_Rsp::set_type(::google::protobuf::int32 value) {
  _set_bit(6);
  type_ = value;
}

// optional string sid = 8;
inline bool Admin_AddCash_Rsp::has_sid() const {
  return _has_bit(7);
}
inline void Admin_AddCash_Rsp::clear_sid() {
  if (sid_ != &_default_sid_) {
    sid_->clear();
  }
  _clear_bit(7);
}
inline const ::std::string& Admin_AddCash_Rsp::sid() const {
  return *sid_;
}
inline void Admin_AddCash_Rsp::set_sid(const ::std::string& value) {
  _set_bit(7);
  if (sid_ == &_default_sid_) {
    sid_ = new ::std::string;
  }
  sid_->assign(value);
}
inline void Admin_AddCash_Rsp::set_sid(const char* value) {
  _set_bit(7);
  if (sid_ == &_default_sid_) {
    sid_ = new ::std::string;
  }
  sid_->assign(value);
}
inline void Admin_AddCash_Rsp::set_sid(const char* value, size_t size) {
  _set_bit(7);
  if (sid_ == &_default_sid_) {
    sid_ = new ::std::string;
  }
  sid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Admin_AddCash_Rsp::mutable_sid() {
  _set_bit(7);
  if (sid_ == &_default_sid_) {
    sid_ = new ::std::string;
  }
  return sid_;
}

// optional bool fromweb = 9 [default = false];
inline bool Admin_AddCash_Rsp::has_fromweb() const {
  return _has_bit(8);
}
inline void Admin_AddCash_Rsp::clear_fromweb() {
  fromweb_ = false;
  _clear_bit(8);
}
inline bool Admin_AddCash_Rsp::fromweb() const {
  return fromweb_;
}
inline void Admin_AddCash_Rsp::set_fromweb(bool value) {
  _set_bit(8);
  fromweb_ = value;
}

// optional bool istxcross = 10 [default = false];
inline bool Admin_AddCash_Rsp::has_istxcross() const {
  return _has_bit(9);
}
inline void Admin_AddCash_Rsp::clear_istxcross() {
  istxcross_ = false;
  _clear_bit(9);
}
inline bool Admin_AddCash_Rsp::istxcross() const {
  return istxcross_;
}
inline void Admin_AddCash_Rsp::set_istxcross(bool value) {
  _set_bit(9);
  istxcross_ = value;
}

// optional int32 nChannel = 11 [default = 0];
inline bool Admin_AddCash_Rsp::has_nchannel() const {
  return _has_bit(10);
}
inline void Admin_AddCash_Rsp::clear_nchannel() {
  nchannel_ = 0;
  _clear_bit(10);
}
inline ::google::protobuf::int32 Admin_AddCash_Rsp::nchannel() const {
  return nchannel_;
}
inline void Admin_AddCash_Rsp::set_nchannel(::google::protobuf::int32 value) {
  _set_bit(10);
  nchannel_ = value;
}

// optional string orderid = 12;
inline bool Admin_AddCash_Rsp::has_orderid() const {
  return _has_bit(11);
}
inline void Admin_AddCash_Rsp::clear_orderid() {
  if (orderid_ != &_default_orderid_) {
    orderid_->clear();
  }
  _clear_bit(11);
}
inline const ::std::string& Admin_AddCash_Rsp::orderid() const {
  return *orderid_;
}
inline void Admin_AddCash_Rsp::set_orderid(const ::std::string& value) {
  _set_bit(11);
  if (orderid_ == &_default_orderid_) {
    orderid_ = new ::std::string;
  }
  orderid_->assign(value);
}
inline void Admin_AddCash_Rsp::set_orderid(const char* value) {
  _set_bit(11);
  if (orderid_ == &_default_orderid_) {
    orderid_ = new ::std::string;
  }
  orderid_->assign(value);
}
inline void Admin_AddCash_Rsp::set_orderid(const char* value, size_t size) {
  _set_bit(11);
  if (orderid_ == &_default_orderid_) {
    orderid_ = new ::std::string;
  }
  orderid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Admin_AddCash_Rsp::mutable_orderid() {
  _set_bit(11);
  if (orderid_ == &_default_orderid_) {
    orderid_ = new ::std::string;
  }
  return orderid_;
}

// optional int32 nPrepayFlag = 13 [default = 0];
inline bool Admin_AddCash_Rsp::has_nprepayflag() const {
  return _has_bit(12);
}
inline void Admin_AddCash_Rsp::clear_nprepayflag() {
  nprepayflag_ = 0;
  _clear_bit(12);
}
inline ::google::protobuf::int32 Admin_AddCash_Rsp::nprepayflag() const {
  return nprepayflag_;
}
inline void Admin_AddCash_Rsp::set_nprepayflag(::google::protobuf::int32 value) {
  _set_bit(12);
  nprepayflag_ = value;
}

// optional bool bSuc = 14 [default = false];
inline bool Admin_AddCash_Rsp::has_bsuc() const {
  return _has_bit(13);
}
inline void Admin_AddCash_Rsp::clear_bsuc() {
  bsuc_ = false;
  _clear_bit(13);
}
inline bool Admin_AddCash_Rsp::bsuc() const {
  return bsuc_;
}
inline void Admin_AddCash_Rsp::set_bsuc(bool value) {
  _set_bit(13);
  bsuc_ = value;
}


#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

#endif  // PROTOBUF_event_5fsub_2eproto__INCLUDED
