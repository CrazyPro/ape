// Generated by the protocol buffer compiler.  DO NOT EDIT!

#ifndef PROTOBUF_RceUpdateProfile_2eproto__INCLUDED
#define PROTOBUF_RceUpdateProfile_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2002000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2002000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>
#include "MsgSocialItems.pb.h"
#include "MsgTransaction.pb.h"

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_RceUpdateProfile_2eproto();
void protobuf_AssignDesc_RceUpdateProfile_2eproto();
void protobuf_ShutdownFile_RceUpdateProfile_2eproto();

class RceUpdateProfile;

// ===================================================================

class RceUpdateProfile : public ::google::protobuf::Message {
 public:
  RceUpdateProfile();
  virtual ~RceUpdateProfile();
  
  RceUpdateProfile(const RceUpdateProfile& from);
  
  inline RceUpdateProfile& operator=(const RceUpdateProfile& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const RceUpdateProfile& default_instance();
  void Swap(RceUpdateProfile* other);
  
  // implements Message ----------------------------------------------
  
  RceUpdateProfile* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RceUpdateProfile& from);
  void MergeFrom(const RceUpdateProfile& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const { _cached_size_ = size; }
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional .MsgTransaction transaction = 1;
  inline bool has_transaction() const;
  inline void clear_transaction();
  static const int kTransactionFieldNumber = 1;
  inline const ::MsgTransaction& transaction() const;
  inline ::MsgTransaction* mutable_transaction();
  
  // optional string sku = 2;
  inline bool has_sku() const;
  inline void clear_sku();
  static const int kSkuFieldNumber = 2;
  inline const ::std::string& sku() const;
  inline void set_sku(const ::std::string& value);
  inline void set_sku(const char* value);
  inline void set_sku(const char* value, size_t size);
  inline ::std::string* mutable_sku();
  
  // optional int32 value = 3;
  inline bool has_value() const;
  inline void clear_value();
  static const int kValueFieldNumber = 3;
  inline ::google::protobuf::int32 value() const;
  inline void set_value(::google::protobuf::int32 value);
  
  // optional string key = 4;
  inline bool has_key() const;
  inline void clear_key();
  static const int kKeyFieldNumber = 4;
  inline const ::std::string& key() const;
  inline void set_key(const ::std::string& value);
  inline void set_key(const char* value);
  inline void set_key(const char* value, size_t size);
  inline ::std::string* mutable_key();
  
  // optional int32 planetId = 5;
  inline bool has_planetid() const;
  inline void clear_planetid();
  static const int kPlanetIdFieldNumber = 5;
  inline ::google::protobuf::int32 planetid() const;
  inline void set_planetid(::google::protobuf::int32 value);
  
  // optional string action = 6;
  inline bool has_action() const;
  inline void clear_action();
  static const int kActionFieldNumber = 6;
  inline const ::std::string& action() const;
  inline void set_action(const ::std::string& value);
  inline void set_action(const char* value);
  inline void set_action(const char* value, size_t size);
  inline ::std::string* mutable_action();
  
  // optional int32 level = 7;
  inline bool has_level() const;
  inline void clear_level();
  static const int kLevelFieldNumber = 7;
  inline ::google::protobuf::int32 level() const;
  inline void set_level(::google::protobuf::int32 value);
  
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::MsgTransaction* transaction_;
  ::std::string* sku_;
  static const ::std::string _default_sku_;
  ::google::protobuf::int32 value_;
  ::std::string* key_;
  static const ::std::string _default_key_;
  ::google::protobuf::int32 planetid_;
  ::std::string* action_;
  static const ::std::string _default_action_;
  ::google::protobuf::int32 level_;
  friend void  protobuf_AddDesc_RceUpdateProfile_2eproto();
  friend void protobuf_AssignDesc_RceUpdateProfile_2eproto();
  friend void protobuf_ShutdownFile_RceUpdateProfile_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(7 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static RceUpdateProfile* default_instance_;
};
// ===================================================================


// ===================================================================


// ===================================================================

// RceUpdateProfile

// optional .MsgTransaction transaction = 1;
inline bool RceUpdateProfile::has_transaction() const {
  return _has_bit(0);
}
inline void RceUpdateProfile::clear_transaction() {
  if (transaction_ != NULL) transaction_->::MsgTransaction::Clear();
  _clear_bit(0);
}
inline const ::MsgTransaction& RceUpdateProfile::transaction() const {
  return transaction_ != NULL ? *transaction_ : *default_instance_->transaction_;
}
inline ::MsgTransaction* RceUpdateProfile::mutable_transaction() {
  _set_bit(0);
  if (transaction_ == NULL) transaction_ = new ::MsgTransaction;
  return transaction_;
}

// optional string sku = 2;
inline bool RceUpdateProfile::has_sku() const {
  return _has_bit(1);
}
inline void RceUpdateProfile::clear_sku() {
  if (sku_ != &_default_sku_) {
    sku_->clear();
  }
  _clear_bit(1);
}
inline const ::std::string& RceUpdateProfile::sku() const {
  return *sku_;
}
inline void RceUpdateProfile::set_sku(const ::std::string& value) {
  _set_bit(1);
  if (sku_ == &_default_sku_) {
    sku_ = new ::std::string;
  }
  sku_->assign(value);
}
inline void RceUpdateProfile::set_sku(const char* value) {
  _set_bit(1);
  if (sku_ == &_default_sku_) {
    sku_ = new ::std::string;
  }
  sku_->assign(value);
}
inline void RceUpdateProfile::set_sku(const char* value, size_t size) {
  _set_bit(1);
  if (sku_ == &_default_sku_) {
    sku_ = new ::std::string;
  }
  sku_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RceUpdateProfile::mutable_sku() {
  _set_bit(1);
  if (sku_ == &_default_sku_) {
    sku_ = new ::std::string;
  }
  return sku_;
}

// optional int32 value = 3;
inline bool RceUpdateProfile::has_value() const {
  return _has_bit(2);
}
inline void RceUpdateProfile::clear_value() {
  value_ = 0;
  _clear_bit(2);
}
inline ::google::protobuf::int32 RceUpdateProfile::value() const {
  return value_;
}
inline void RceUpdateProfile::set_value(::google::protobuf::int32 value) {
  _set_bit(2);
  value_ = value;
}

// optional string key = 4;
inline bool RceUpdateProfile::has_key() const {
  return _has_bit(3);
}
inline void RceUpdateProfile::clear_key() {
  if (key_ != &_default_key_) {
    key_->clear();
  }
  _clear_bit(3);
}
inline const ::std::string& RceUpdateProfile::key() const {
  return *key_;
}
inline void RceUpdateProfile::set_key(const ::std::string& value) {
  _set_bit(3);
  if (key_ == &_default_key_) {
    key_ = new ::std::string;
  }
  key_->assign(value);
}
inline void RceUpdateProfile::set_key(const char* value) {
  _set_bit(3);
  if (key_ == &_default_key_) {
    key_ = new ::std::string;
  }
  key_->assign(value);
}
inline void RceUpdateProfile::set_key(const char* value, size_t size) {
  _set_bit(3);
  if (key_ == &_default_key_) {
    key_ = new ::std::string;
  }
  key_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RceUpdateProfile::mutable_key() {
  _set_bit(3);
  if (key_ == &_default_key_) {
    key_ = new ::std::string;
  }
  return key_;
}

// optional int32 planetId = 5;
inline bool RceUpdateProfile::has_planetid() const {
  return _has_bit(4);
}
inline void RceUpdateProfile::clear_planetid() {
  planetid_ = 0;
  _clear_bit(4);
}
inline ::google::protobuf::int32 RceUpdateProfile::planetid() const {
  return planetid_;
}
inline void RceUpdateProfile::set_planetid(::google::protobuf::int32 value) {
  _set_bit(4);
  planetid_ = value;
}

// optional string action = 6;
inline bool RceUpdateProfile::has_action() const {
  return _has_bit(5);
}
inline void RceUpdateProfile::clear_action() {
  if (action_ != &_default_action_) {
    action_->clear();
  }
  _clear_bit(5);
}
inline const ::std::string& RceUpdateProfile::action() const {
  return *action_;
}
inline void RceUpdateProfile::set_action(const ::std::string& value) {
  _set_bit(5);
  if (action_ == &_default_action_) {
    action_ = new ::std::string;
  }
  action_->assign(value);
}
inline void RceUpdateProfile::set_action(const char* value) {
  _set_bit(5);
  if (action_ == &_default_action_) {
    action_ = new ::std::string;
  }
  action_->assign(value);
}
inline void RceUpdateProfile::set_action(const char* value, size_t size) {
  _set_bit(5);
  if (action_ == &_default_action_) {
    action_ = new ::std::string;
  }
  action_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RceUpdateProfile::mutable_action() {
  _set_bit(5);
  if (action_ == &_default_action_) {
    action_ = new ::std::string;
  }
  return action_;
}

// optional int32 level = 7;
inline bool RceUpdateProfile::has_level() const {
  return _has_bit(6);
}
inline void RceUpdateProfile::clear_level() {
  level_ = 0;
  _clear_bit(6);
}
inline ::google::protobuf::int32 RceUpdateProfile::level() const {
  return level_;
}
inline void RceUpdateProfile::set_level(::google::protobuf::int32 value) {
  _set_bit(6);
  level_ = value;
}


#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

#endif  // PROTOBUF_RceUpdateProfile_2eproto__INCLUDED
