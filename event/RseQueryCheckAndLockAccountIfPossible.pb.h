// Generated by the protocol buffer compiler.  DO NOT EDIT!

#ifndef PROTOBUF_RseQueryCheckAndLockAccountIfPossible_2eproto__INCLUDED
#define PROTOBUF_RseQueryCheckAndLockAccountIfPossible_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2002000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2002000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_RseQueryCheckAndLockAccountIfPossible_2eproto();
void protobuf_AssignDesc_RseQueryCheckAndLockAccountIfPossible_2eproto();
void protobuf_ShutdownFile_RseQueryCheckAndLockAccountIfPossible_2eproto();

class RseQueryCheckAndLockAccountIfPossible;

// ===================================================================

class RseQueryCheckAndLockAccountIfPossible : public ::google::protobuf::Message {
 public:
  RseQueryCheckAndLockAccountIfPossible();
  virtual ~RseQueryCheckAndLockAccountIfPossible();
  
  RseQueryCheckAndLockAccountIfPossible(const RseQueryCheckAndLockAccountIfPossible& from);
  
  inline RseQueryCheckAndLockAccountIfPossible& operator=(const RseQueryCheckAndLockAccountIfPossible& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const RseQueryCheckAndLockAccountIfPossible& default_instance();
  void Swap(RseQueryCheckAndLockAccountIfPossible* other);
  
  // implements Message ----------------------------------------------
  
  RseQueryCheckAndLockAccountIfPossible* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RseQueryCheckAndLockAccountIfPossible& from);
  void MergeFrom(const RseQueryCheckAndLockAccountIfPossible& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const { _cached_size_ = size; }
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional int32 lockRequested = 1;
  inline bool has_lockrequested() const;
  inline void clear_lockrequested();
  static const int kLockRequestedFieldNumber = 1;
  inline ::google::protobuf::int32 lockrequested() const;
  inline void set_lockrequested(::google::protobuf::int32 value);
  
  // optional int32 lockApplied = 2;
  inline bool has_lockapplied() const;
  inline void clear_lockapplied();
  static const int kLockAppliedFieldNumber = 2;
  inline ::google::protobuf::int32 lockapplied() const;
  inline void set_lockapplied(::google::protobuf::int32 value);
  
  // optional int32 lockSuccess = 3;
  inline bool has_locksuccess() const;
  inline void clear_locksuccess();
  static const int kLockSuccessFieldNumber = 3;
  inline ::google::protobuf::int32 locksuccess() const;
  inline void set_locksuccess(::google::protobuf::int32 value);
  
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::google::protobuf::int32 lockrequested_;
  ::google::protobuf::int32 lockapplied_;
  ::google::protobuf::int32 locksuccess_;
  friend void  protobuf_AddDesc_RseQueryCheckAndLockAccountIfPossible_2eproto();
  friend void protobuf_AssignDesc_RseQueryCheckAndLockAccountIfPossible_2eproto();
  friend void protobuf_ShutdownFile_RseQueryCheckAndLockAccountIfPossible_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static RseQueryCheckAndLockAccountIfPossible* default_instance_;
};
// ===================================================================


// ===================================================================


// ===================================================================

// RseQueryCheckAndLockAccountIfPossible

// optional int32 lockRequested = 1;
inline bool RseQueryCheckAndLockAccountIfPossible::has_lockrequested() const {
  return _has_bit(0);
}
inline void RseQueryCheckAndLockAccountIfPossible::clear_lockrequested() {
  lockrequested_ = 0;
  _clear_bit(0);
}
inline ::google::protobuf::int32 RseQueryCheckAndLockAccountIfPossible::lockrequested() const {
  return lockrequested_;
}
inline void RseQueryCheckAndLockAccountIfPossible::set_lockrequested(::google::protobuf::int32 value) {
  _set_bit(0);
  lockrequested_ = value;
}

// optional int32 lockApplied = 2;
inline bool RseQueryCheckAndLockAccountIfPossible::has_lockapplied() const {
  return _has_bit(1);
}
inline void RseQueryCheckAndLockAccountIfPossible::clear_lockapplied() {
  lockapplied_ = 0;
  _clear_bit(1);
}
inline ::google::protobuf::int32 RseQueryCheckAndLockAccountIfPossible::lockapplied() const {
  return lockapplied_;
}
inline void RseQueryCheckAndLockAccountIfPossible::set_lockapplied(::google::protobuf::int32 value) {
  _set_bit(1);
  lockapplied_ = value;
}

// optional int32 lockSuccess = 3;
inline bool RseQueryCheckAndLockAccountIfPossible::has_locksuccess() const {
  return _has_bit(2);
}
inline void RseQueryCheckAndLockAccountIfPossible::clear_locksuccess() {
  locksuccess_ = 0;
  _clear_bit(2);
}
inline ::google::protobuf::int32 RseQueryCheckAndLockAccountIfPossible::locksuccess() const {
  return locksuccess_;
}
inline void RseQueryCheckAndLockAccountIfPossible::set_locksuccess(::google::protobuf::int32 value) {
  _set_bit(2);
  locksuccess_ = value;
}


#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

#endif  // PROTOBUF_RseQueryCheckAndLockAccountIfPossible_2eproto__INCLUDED
