// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "RceQueryRefuseReceiveWishItem.pb.h"
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>

namespace {

const ::google::protobuf::Descriptor* RceQueryRefuseReceiveWishItem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RceQueryRefuseReceiveWishItem_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_RceQueryRefuseReceiveWishItem_2eproto() {
  protobuf_AddDesc_RceQueryRefuseReceiveWishItem_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "RceQueryRefuseReceiveWishItem.proto");
  GOOGLE_CHECK(file != NULL);
  RceQueryRefuseReceiveWishItem_descriptor_ = file->message_type(0);
  static const int RceQueryRefuseReceiveWishItem_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RceQueryRefuseReceiveWishItem, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RceQueryRefuseReceiveWishItem, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RceQueryRefuseReceiveWishItem, playerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RceQueryRefuseReceiveWishItem, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RceQueryRefuseReceiveWishItem, guid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RceQueryRefuseReceiveWishItem, planetid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RceQueryRefuseReceiveWishItem, time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RceQueryRefuseReceiveWishItem, msg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RceQueryRefuseReceiveWishItem, url_),
  };
  RceQueryRefuseReceiveWishItem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RceQueryRefuseReceiveWishItem_descriptor_,
      RceQueryRefuseReceiveWishItem::default_instance_,
      RceQueryRefuseReceiveWishItem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RceQueryRefuseReceiveWishItem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RceQueryRefuseReceiveWishItem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RceQueryRefuseReceiveWishItem));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_RceQueryRefuseReceiveWishItem_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RceQueryRefuseReceiveWishItem_descriptor_, &RceQueryRefuseReceiveWishItem::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_RceQueryRefuseReceiveWishItem_2eproto() {
  delete RceQueryRefuseReceiveWishItem::default_instance_;
  delete RceQueryRefuseReceiveWishItem_reflection_;
}

void protobuf_AddDesc_RceQueryRefuseReceiveWishItem_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n#RceQueryRefuseReceiveWishItem.proto\"\241\001"
    "\n\035RceQueryRefuseReceiveWishItem\022\014\n\004type\030"
    "\001 \001(\t\022\014\n\004name\030\002 \001(\t\022\020\n\010playerId\030\003 \001(\t\022\n\n"
    "\002id\030\004 \001(\t\022\014\n\004guid\030\005 \001(\t\022\020\n\010planetId\030\006 \001("
    "\t\022\014\n\004time\030\007 \001(\t\022\013\n\003msg\030\010 \001(\t\022\013\n\003url\030\t \001("
    "\t", 201);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "RceQueryRefuseReceiveWishItem.proto", &protobuf_RegisterTypes);
  RceQueryRefuseReceiveWishItem::default_instance_ = new RceQueryRefuseReceiveWishItem();
  RceQueryRefuseReceiveWishItem::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_RceQueryRefuseReceiveWishItem_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_RceQueryRefuseReceiveWishItem_2eproto {
  StaticDescriptorInitializer_RceQueryRefuseReceiveWishItem_2eproto() {
    protobuf_AddDesc_RceQueryRefuseReceiveWishItem_2eproto();
  }
} static_descriptor_initializer_RceQueryRefuseReceiveWishItem_2eproto_;


// ===================================================================

const ::std::string RceQueryRefuseReceiveWishItem::_default_type_;
const ::std::string RceQueryRefuseReceiveWishItem::_default_name_;
const ::std::string RceQueryRefuseReceiveWishItem::_default_playerid_;
const ::std::string RceQueryRefuseReceiveWishItem::_default_id_;
const ::std::string RceQueryRefuseReceiveWishItem::_default_guid_;
const ::std::string RceQueryRefuseReceiveWishItem::_default_planetid_;
const ::std::string RceQueryRefuseReceiveWishItem::_default_time_;
const ::std::string RceQueryRefuseReceiveWishItem::_default_msg_;
const ::std::string RceQueryRefuseReceiveWishItem::_default_url_;
#ifndef _MSC_VER
const int RceQueryRefuseReceiveWishItem::kTypeFieldNumber;
const int RceQueryRefuseReceiveWishItem::kNameFieldNumber;
const int RceQueryRefuseReceiveWishItem::kPlayerIdFieldNumber;
const int RceQueryRefuseReceiveWishItem::kIdFieldNumber;
const int RceQueryRefuseReceiveWishItem::kGuidFieldNumber;
const int RceQueryRefuseReceiveWishItem::kPlanetIdFieldNumber;
const int RceQueryRefuseReceiveWishItem::kTimeFieldNumber;
const int RceQueryRefuseReceiveWishItem::kMsgFieldNumber;
const int RceQueryRefuseReceiveWishItem::kUrlFieldNumber;
#endif  // !_MSC_VER

RceQueryRefuseReceiveWishItem::RceQueryRefuseReceiveWishItem() {
  SharedCtor();
}

void RceQueryRefuseReceiveWishItem::InitAsDefaultInstance() {
}

RceQueryRefuseReceiveWishItem::RceQueryRefuseReceiveWishItem(const RceQueryRefuseReceiveWishItem& from) {
  SharedCtor();
  MergeFrom(from);
}

void RceQueryRefuseReceiveWishItem::SharedCtor() {
  _cached_size_ = 0;
  type_ = const_cast< ::std::string*>(&_default_type_);
  name_ = const_cast< ::std::string*>(&_default_name_);
  playerid_ = const_cast< ::std::string*>(&_default_playerid_);
  id_ = const_cast< ::std::string*>(&_default_id_);
  guid_ = const_cast< ::std::string*>(&_default_guid_);
  planetid_ = const_cast< ::std::string*>(&_default_planetid_);
  time_ = const_cast< ::std::string*>(&_default_time_);
  msg_ = const_cast< ::std::string*>(&_default_msg_);
  url_ = const_cast< ::std::string*>(&_default_url_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RceQueryRefuseReceiveWishItem::~RceQueryRefuseReceiveWishItem() {
  SharedDtor();
}

void RceQueryRefuseReceiveWishItem::SharedDtor() {
  if (type_ != &_default_type_) {
    delete type_;
  }
  if (name_ != &_default_name_) {
    delete name_;
  }
  if (playerid_ != &_default_playerid_) {
    delete playerid_;
  }
  if (id_ != &_default_id_) {
    delete id_;
  }
  if (guid_ != &_default_guid_) {
    delete guid_;
  }
  if (planetid_ != &_default_planetid_) {
    delete planetid_;
  }
  if (time_ != &_default_time_) {
    delete time_;
  }
  if (msg_ != &_default_msg_) {
    delete msg_;
  }
  if (url_ != &_default_url_) {
    delete url_;
  }
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* RceQueryRefuseReceiveWishItem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RceQueryRefuseReceiveWishItem_descriptor_;
}

const RceQueryRefuseReceiveWishItem& RceQueryRefuseReceiveWishItem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_RceQueryRefuseReceiveWishItem_2eproto();  return *default_instance_;
}

RceQueryRefuseReceiveWishItem* RceQueryRefuseReceiveWishItem::default_instance_ = NULL;

RceQueryRefuseReceiveWishItem* RceQueryRefuseReceiveWishItem::New() const {
  return new RceQueryRefuseReceiveWishItem;
}

void RceQueryRefuseReceiveWishItem::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (type_ != &_default_type_) {
        type_->clear();
      }
    }
    if (_has_bit(1)) {
      if (name_ != &_default_name_) {
        name_->clear();
      }
    }
    if (_has_bit(2)) {
      if (playerid_ != &_default_playerid_) {
        playerid_->clear();
      }
    }
    if (_has_bit(3)) {
      if (id_ != &_default_id_) {
        id_->clear();
      }
    }
    if (_has_bit(4)) {
      if (guid_ != &_default_guid_) {
        guid_->clear();
      }
    }
    if (_has_bit(5)) {
      if (planetid_ != &_default_planetid_) {
        planetid_->clear();
      }
    }
    if (_has_bit(6)) {
      if (time_ != &_default_time_) {
        time_->clear();
      }
    }
    if (_has_bit(7)) {
      if (msg_ != &_default_msg_) {
        msg_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (_has_bit(8)) {
      if (url_ != &_default_url_) {
        url_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RceQueryRefuseReceiveWishItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadString(
              input, this->mutable_type()));
        ::google::protobuf::internal::WireFormat::VerifyUTF8String(
          this->type().data(), this->type().length(),
          ::google::protobuf::internal::WireFormat::PARSE);
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }
      
      // optional string name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_name:
        DO_(::google::protobuf::internal::WireFormatLite::ReadString(
              input, this->mutable_name()));
        ::google::protobuf::internal::WireFormat::VerifyUTF8String(
          this->name().data(), this->name().length(),
          ::google::protobuf::internal::WireFormat::PARSE);
        if (input->ExpectTag(26)) goto parse_playerId;
        break;
      }
      
      // optional string playerId = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_playerId:
        DO_(::google::protobuf::internal::WireFormatLite::ReadString(
              input, this->mutable_playerid()));
        ::google::protobuf::internal::WireFormat::VerifyUTF8String(
          this->playerid().data(), this->playerid().length(),
          ::google::protobuf::internal::WireFormat::PARSE);
        if (input->ExpectTag(34)) goto parse_id;
        break;
      }
      
      // optional string id = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_id:
        DO_(::google::protobuf::internal::WireFormatLite::ReadString(
              input, this->mutable_id()));
        ::google::protobuf::internal::WireFormat::VerifyUTF8String(
          this->id().data(), this->id().length(),
          ::google::protobuf::internal::WireFormat::PARSE);
        if (input->ExpectTag(42)) goto parse_guid;
        break;
      }
      
      // optional string guid = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_guid:
        DO_(::google::protobuf::internal::WireFormatLite::ReadString(
              input, this->mutable_guid()));
        ::google::protobuf::internal::WireFormat::VerifyUTF8String(
          this->guid().data(), this->guid().length(),
          ::google::protobuf::internal::WireFormat::PARSE);
        if (input->ExpectTag(50)) goto parse_planetId;
        break;
      }
      
      // optional string planetId = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_planetId:
        DO_(::google::protobuf::internal::WireFormatLite::ReadString(
              input, this->mutable_planetid()));
        ::google::protobuf::internal::WireFormat::VerifyUTF8String(
          this->planetid().data(), this->planetid().length(),
          ::google::protobuf::internal::WireFormat::PARSE);
        if (input->ExpectTag(58)) goto parse_time;
        break;
      }
      
      // optional string time = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_time:
        DO_(::google::protobuf::internal::WireFormatLite::ReadString(
              input, this->mutable_time()));
        ::google::protobuf::internal::WireFormat::VerifyUTF8String(
          this->time().data(), this->time().length(),
          ::google::protobuf::internal::WireFormat::PARSE);
        if (input->ExpectTag(66)) goto parse_msg;
        break;
      }
      
      // optional string msg = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_msg:
        DO_(::google::protobuf::internal::WireFormatLite::ReadString(
              input, this->mutable_msg()));
        ::google::protobuf::internal::WireFormat::VerifyUTF8String(
          this->msg().data(), this->msg().length(),
          ::google::protobuf::internal::WireFormat::PARSE);
        if (input->ExpectTag(74)) goto parse_url;
        break;
      }
      
      // optional string url = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_url:
        DO_(::google::protobuf::internal::WireFormatLite::ReadString(
              input, this->mutable_url()));
        ::google::protobuf::internal::WireFormat::VerifyUTF8String(
          this->url().data(), this->url().length(),
          ::google::protobuf::internal::WireFormat::PARSE);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RceQueryRefuseReceiveWishItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    RceQueryRefuseReceiveWishItem::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional string type = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->type().data(), this->type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->type(), output);
  }
  
  // optional string name = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->name(), output);
  }
  
  // optional string playerId = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->playerid().data(), this->playerid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->playerid(), output);
  }
  
  // optional string id = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->id(), output);
  }
  
  // optional string guid = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->guid().data(), this->guid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->guid(), output);
  }
  
  // optional string planetId = 6;
  if (_has_bit(5)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->planetid().data(), this->planetid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->planetid(), output);
  }
  
  // optional string time = 7;
  if (_has_bit(6)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->time().data(), this->time().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->time(), output);
  }
  
  // optional string msg = 8;
  if (_has_bit(7)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msg().data(), this->msg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      8, this->msg(), output);
  }
  
  // optional string url = 9;
  if (_has_bit(8)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->url().data(), this->url().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      9, this->url(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RceQueryRefuseReceiveWishItem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string type = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->type().data(), this->type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->type(), target);
  }
  
  // optional string name = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }
  
  // optional string playerId = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->playerid().data(), this->playerid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->playerid(), target);
  }
  
  // optional string id = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->id(), target);
  }
  
  // optional string guid = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->guid().data(), this->guid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->guid(), target);
  }
  
  // optional string planetId = 6;
  if (_has_bit(5)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->planetid().data(), this->planetid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->planetid(), target);
  }
  
  // optional string time = 7;
  if (_has_bit(6)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->time().data(), this->time().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->time(), target);
  }
  
  // optional string msg = 8;
  if (_has_bit(7)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msg().data(), this->msg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->msg(), target);
  }
  
  // optional string url = 9;
  if (_has_bit(8)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->url().data(), this->url().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->url(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RceQueryRefuseReceiveWishItem::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->type());
    }
    
    // optional string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }
    
    // optional string playerId = 3;
    if (has_playerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->playerid());
    }
    
    // optional string id = 4;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->id());
    }
    
    // optional string guid = 5;
    if (has_guid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->guid());
    }
    
    // optional string planetId = 6;
    if (has_planetid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->planetid());
    }
    
    // optional string time = 7;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->time());
    }
    
    // optional string msg = 8;
    if (has_msg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->msg());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional string url = 9;
    if (has_url()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->url());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void RceQueryRefuseReceiveWishItem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RceQueryRefuseReceiveWishItem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RceQueryRefuseReceiveWishItem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RceQueryRefuseReceiveWishItem::MergeFrom(const RceQueryRefuseReceiveWishItem& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_type(from.type());
    }
    if (from._has_bit(1)) {
      set_name(from.name());
    }
    if (from._has_bit(2)) {
      set_playerid(from.playerid());
    }
    if (from._has_bit(3)) {
      set_id(from.id());
    }
    if (from._has_bit(4)) {
      set_guid(from.guid());
    }
    if (from._has_bit(5)) {
      set_planetid(from.planetid());
    }
    if (from._has_bit(6)) {
      set_time(from.time());
    }
    if (from._has_bit(7)) {
      set_msg(from.msg());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from._has_bit(8)) {
      set_url(from.url());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RceQueryRefuseReceiveWishItem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RceQueryRefuseReceiveWishItem::CopyFrom(const RceQueryRefuseReceiveWishItem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RceQueryRefuseReceiveWishItem::IsInitialized() const {
  
  return true;
}

void RceQueryRefuseReceiveWishItem::Swap(RceQueryRefuseReceiveWishItem* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(name_, other->name_);
    std::swap(playerid_, other->playerid_);
    std::swap(id_, other->id_);
    std::swap(guid_, other->guid_);
    std::swap(planetid_, other->planetid_);
    std::swap(time_, other->time_);
    std::swap(msg_, other->msg_);
    std::swap(url_, other->url_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RceQueryRefuseReceiveWishItem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RceQueryRefuseReceiveWishItem_descriptor_;
  metadata.reflection = RceQueryRefuseReceiveWishItem_reflection_;
  return metadata;
}

