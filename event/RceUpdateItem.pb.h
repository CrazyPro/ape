// Generated by the protocol buffer compiler.  DO NOT EDIT!

#ifndef PROTOBUF_RceUpdateItem_2eproto__INCLUDED
#define PROTOBUF_RceUpdateItem_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2002000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2002000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>
#include "MsgBuildingItem.pb.h"
#include "MsgSocialItems.pb.h"
#include "MsgTransaction.pb.h"

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_RceUpdateItem_2eproto();
void protobuf_AssignDesc_RceUpdateItem_2eproto();
void protobuf_ShutdownFile_RceUpdateItem_2eproto();

class RceUpdateItem;

// ===================================================================

class RceUpdateItem : public ::google::protobuf::Message {
 public:
  RceUpdateItem();
  virtual ~RceUpdateItem();
  
  RceUpdateItem(const RceUpdateItem& from);
  
  inline RceUpdateItem& operator=(const RceUpdateItem& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const RceUpdateItem& default_instance();
  void Swap(RceUpdateItem* other);
  
  // implements Message ----------------------------------------------
  
  RceUpdateItem* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RceUpdateItem& from);
  void MergeFrom(const RceUpdateItem& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const { _cached_size_ = size; }
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional int32 sid = 1;
  inline bool has_sid() const;
  inline void clear_sid();
  static const int kSidFieldNumber = 1;
  inline ::google::protobuf::int32 sid() const;
  inline void set_sid(::google::protobuf::int32 value);
  
  // optional int64 time = 2;
  inline bool has_time() const;
  inline void clear_time();
  static const int kTimeFieldNumber = 2;
  inline ::google::protobuf::int64 time() const;
  inline void set_time(::google::protobuf::int64 value);
  
  // optional .MsgTransaction transaction = 3;
  inline bool has_transaction() const;
  inline void clear_transaction();
  static const int kTransactionFieldNumber = 3;
  inline const ::MsgTransaction& transaction() const;
  inline ::MsgTransaction* mutable_transaction();
  
  // optional .MsgBuildingItem item = 4;
  inline bool has_item() const;
  inline void clear_item();
  static const int kItemFieldNumber = 4;
  inline const ::MsgBuildingItem& item() const;
  inline ::MsgBuildingItem* mutable_item();
  
  // optional int32 oldState = 5;
  inline bool has_oldstate() const;
  inline void clear_oldstate();
  static const int kOldStateFieldNumber = 5;
  inline ::google::protobuf::int32 oldstate() const;
  inline void set_oldstate(::google::protobuf::int32 value);
  
  // optional int64 id = 6;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 6;
  inline ::google::protobuf::int64 id() const;
  inline void set_id(::google::protobuf::int64 value);
  
  // optional int32 planetId = 7;
  inline bool has_planetid() const;
  inline void clear_planetid();
  static const int kPlanetIdFieldNumber = 7;
  inline ::google::protobuf::int32 planetid() const;
  inline void set_planetid(::google::protobuf::int32 value);
  
  // optional int32 newState = 8;
  inline bool has_newstate() const;
  inline void clear_newstate();
  static const int kNewStateFieldNumber = 8;
  inline ::google::protobuf::int32 newstate() const;
  inline void set_newstate(::google::protobuf::int32 value);
  
  // optional string action = 9;
  inline bool has_action() const;
  inline void clear_action();
  static const int kActionFieldNumber = 9;
  inline const ::std::string& action() const;
  inline void set_action(const ::std::string& value);
  inline void set_action(const char* value);
  inline void set_action(const char* value, size_t size);
  inline ::std::string* mutable_action();
  
  // optional int64 timePassed = 10;
  inline bool has_timepassed() const;
  inline void clear_timepassed();
  static const int kTimePassedFieldNumber = 10;
  inline ::google::protobuf::int64 timepassed() const;
  inline void set_timepassed(::google::protobuf::int64 value);
  
  // optional int32 x = 11;
  inline bool has_x() const;
  inline void clear_x();
  static const int kXFieldNumber = 11;
  inline ::google::protobuf::int32 x() const;
  inline void set_x(::google::protobuf::int32 value);
  
  // optional int32 y = 12;
  inline bool has_y() const;
  inline void clear_y();
  static const int kYFieldNumber = 12;
  inline ::google::protobuf::int32 y() const;
  inline void set_y(::google::protobuf::int32 value);
  
  // optional int32 flip = 13;
  inline bool has_flip() const;
  inline void clear_flip();
  static const int kFlipFieldNumber = 13;
  inline ::google::protobuf::int32 flip() const;
  inline void set_flip(::google::protobuf::int32 value);
  
  // optional int32 role = 14;
  inline bool has_role() const;
  inline void clear_role();
  static const int kRoleFieldNumber = 14;
  inline ::google::protobuf::int32 role() const;
  inline void set_role(::google::protobuf::int32 value);
  
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::google::protobuf::int32 sid_;
  ::google::protobuf::int64 time_;
  ::MsgTransaction* transaction_;
  ::MsgBuildingItem* item_;
  ::google::protobuf::int32 oldstate_;
  ::google::protobuf::int64 id_;
  ::google::protobuf::int32 planetid_;
  ::google::protobuf::int32 newstate_;
  ::std::string* action_;
  static const ::std::string _default_action_;
  ::google::protobuf::int64 timepassed_;
  ::google::protobuf::int32 x_;
  ::google::protobuf::int32 y_;
  ::google::protobuf::int32 flip_;
  ::google::protobuf::int32 role_;
  friend void  protobuf_AddDesc_RceUpdateItem_2eproto();
  friend void protobuf_AssignDesc_RceUpdateItem_2eproto();
  friend void protobuf_ShutdownFile_RceUpdateItem_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(14 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static RceUpdateItem* default_instance_;
};
// ===================================================================


// ===================================================================


// ===================================================================

// RceUpdateItem

// optional int32 sid = 1;
inline bool RceUpdateItem::has_sid() const {
  return _has_bit(0);
}
inline void RceUpdateItem::clear_sid() {
  sid_ = 0;
  _clear_bit(0);
}
inline ::google::protobuf::int32 RceUpdateItem::sid() const {
  return sid_;
}
inline void RceUpdateItem::set_sid(::google::protobuf::int32 value) {
  _set_bit(0);
  sid_ = value;
}

// optional int64 time = 2;
inline bool RceUpdateItem::has_time() const {
  return _has_bit(1);
}
inline void RceUpdateItem::clear_time() {
  time_ = GOOGLE_LONGLONG(0);
  _clear_bit(1);
}
inline ::google::protobuf::int64 RceUpdateItem::time() const {
  return time_;
}
inline void RceUpdateItem::set_time(::google::protobuf::int64 value) {
  _set_bit(1);
  time_ = value;
}

// optional .MsgTransaction transaction = 3;
inline bool RceUpdateItem::has_transaction() const {
  return _has_bit(2);
}
inline void RceUpdateItem::clear_transaction() {
  if (transaction_ != NULL) transaction_->::MsgTransaction::Clear();
  _clear_bit(2);
}
inline const ::MsgTransaction& RceUpdateItem::transaction() const {
  return transaction_ != NULL ? *transaction_ : *default_instance_->transaction_;
}
inline ::MsgTransaction* RceUpdateItem::mutable_transaction() {
  _set_bit(2);
  if (transaction_ == NULL) transaction_ = new ::MsgTransaction;
  return transaction_;
}

// optional .MsgBuildingItem item = 4;
inline bool RceUpdateItem::has_item() const {
  return _has_bit(3);
}
inline void RceUpdateItem::clear_item() {
  if (item_ != NULL) item_->::MsgBuildingItem::Clear();
  _clear_bit(3);
}
inline const ::MsgBuildingItem& RceUpdateItem::item() const {
  return item_ != NULL ? *item_ : *default_instance_->item_;
}
inline ::MsgBuildingItem* RceUpdateItem::mutable_item() {
  _set_bit(3);
  if (item_ == NULL) item_ = new ::MsgBuildingItem;
  return item_;
}

// optional int32 oldState = 5;
inline bool RceUpdateItem::has_oldstate() const {
  return _has_bit(4);
}
inline void RceUpdateItem::clear_oldstate() {
  oldstate_ = 0;
  _clear_bit(4);
}
inline ::google::protobuf::int32 RceUpdateItem::oldstate() const {
  return oldstate_;
}
inline void RceUpdateItem::set_oldstate(::google::protobuf::int32 value) {
  _set_bit(4);
  oldstate_ = value;
}

// optional int64 id = 6;
inline bool RceUpdateItem::has_id() const {
  return _has_bit(5);
}
inline void RceUpdateItem::clear_id() {
  id_ = GOOGLE_LONGLONG(0);
  _clear_bit(5);
}
inline ::google::protobuf::int64 RceUpdateItem::id() const {
  return id_;
}
inline void RceUpdateItem::set_id(::google::protobuf::int64 value) {
  _set_bit(5);
  id_ = value;
}

// optional int32 planetId = 7;
inline bool RceUpdateItem::has_planetid() const {
  return _has_bit(6);
}
inline void RceUpdateItem::clear_planetid() {
  planetid_ = 0;
  _clear_bit(6);
}
inline ::google::protobuf::int32 RceUpdateItem::planetid() const {
  return planetid_;
}
inline void RceUpdateItem::set_planetid(::google::protobuf::int32 value) {
  _set_bit(6);
  planetid_ = value;
}

// optional int32 newState = 8;
inline bool RceUpdateItem::has_newstate() const {
  return _has_bit(7);
}
inline void RceUpdateItem::clear_newstate() {
  newstate_ = 0;
  _clear_bit(7);
}
inline ::google::protobuf::int32 RceUpdateItem::newstate() const {
  return newstate_;
}
inline void RceUpdateItem::set_newstate(::google::protobuf::int32 value) {
  _set_bit(7);
  newstate_ = value;
}

// optional string action = 9;
inline bool RceUpdateItem::has_action() const {
  return _has_bit(8);
}
inline void RceUpdateItem::clear_action() {
  if (action_ != &_default_action_) {
    action_->clear();
  }
  _clear_bit(8);
}
inline const ::std::string& RceUpdateItem::action() const {
  return *action_;
}
inline void RceUpdateItem::set_action(const ::std::string& value) {
  _set_bit(8);
  if (action_ == &_default_action_) {
    action_ = new ::std::string;
  }
  action_->assign(value);
}
inline void RceUpdateItem::set_action(const char* value) {
  _set_bit(8);
  if (action_ == &_default_action_) {
    action_ = new ::std::string;
  }
  action_->assign(value);
}
inline void RceUpdateItem::set_action(const char* value, size_t size) {
  _set_bit(8);
  if (action_ == &_default_action_) {
    action_ = new ::std::string;
  }
  action_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RceUpdateItem::mutable_action() {
  _set_bit(8);
  if (action_ == &_default_action_) {
    action_ = new ::std::string;
  }
  return action_;
}

// optional int64 timePassed = 10;
inline bool RceUpdateItem::has_timepassed() const {
  return _has_bit(9);
}
inline void RceUpdateItem::clear_timepassed() {
  timepassed_ = GOOGLE_LONGLONG(0);
  _clear_bit(9);
}
inline ::google::protobuf::int64 RceUpdateItem::timepassed() const {
  return timepassed_;
}
inline void RceUpdateItem::set_timepassed(::google::protobuf::int64 value) {
  _set_bit(9);
  timepassed_ = value;
}

// optional int32 x = 11;
inline bool RceUpdateItem::has_x() const {
  return _has_bit(10);
}
inline void RceUpdateItem::clear_x() {
  x_ = 0;
  _clear_bit(10);
}
inline ::google::protobuf::int32 RceUpdateItem::x() const {
  return x_;
}
inline void RceUpdateItem::set_x(::google::protobuf::int32 value) {
  _set_bit(10);
  x_ = value;
}

// optional int32 y = 12;
inline bool RceUpdateItem::has_y() const {
  return _has_bit(11);
}
inline void RceUpdateItem::clear_y() {
  y_ = 0;
  _clear_bit(11);
}
inline ::google::protobuf::int32 RceUpdateItem::y() const {
  return y_;
}
inline void RceUpdateItem::set_y(::google::protobuf::int32 value) {
  _set_bit(11);
  y_ = value;
}

// optional int32 flip = 13;
inline bool RceUpdateItem::has_flip() const {
  return _has_bit(12);
}
inline void RceUpdateItem::clear_flip() {
  flip_ = 0;
  _clear_bit(12);
}
inline ::google::protobuf::int32 RceUpdateItem::flip() const {
  return flip_;
}
inline void RceUpdateItem::set_flip(::google::protobuf::int32 value) {
  _set_bit(12);
  flip_ = value;
}

// optional int32 role = 14;
inline bool RceUpdateItem::has_role() const {
  return _has_bit(13);
}
inline void RceUpdateItem::clear_role() {
  role_ = 0;
  _clear_bit(13);
}
inline ::google::protobuf::int32 RceUpdateItem::role() const {
  return role_;
}
inline void RceUpdateItem::set_role(::google::protobuf::int32 value) {
  _set_bit(13);
  role_ = value;
}


#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

#endif  // PROTOBUF_RceUpdateItem_2eproto__INCLUDED
