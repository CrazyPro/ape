// Generated by the protocol buffer compiler.  DO NOT EDIT!

#ifndef PROTOBUF_RceQueryVisitHelpsGiftUnitsOnBunker_2eproto__INCLUDED
#define PROTOBUF_RceQueryVisitHelpsGiftUnitsOnBunker_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2002000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2002000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_RceQueryVisitHelpsGiftUnitsOnBunker_2eproto();
void protobuf_AssignDesc_RceQueryVisitHelpsGiftUnitsOnBunker_2eproto();
void protobuf_ShutdownFile_RceQueryVisitHelpsGiftUnitsOnBunker_2eproto();

class RceQueryVisitHelpsGiftUnitsOnBunker;
class UnitsArray;

// ===================================================================

class RceQueryVisitHelpsGiftUnitsOnBunker : public ::google::protobuf::Message {
 public:
  RceQueryVisitHelpsGiftUnitsOnBunker();
  virtual ~RceQueryVisitHelpsGiftUnitsOnBunker();
  
  RceQueryVisitHelpsGiftUnitsOnBunker(const RceQueryVisitHelpsGiftUnitsOnBunker& from);
  
  inline RceQueryVisitHelpsGiftUnitsOnBunker& operator=(const RceQueryVisitHelpsGiftUnitsOnBunker& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const RceQueryVisitHelpsGiftUnitsOnBunker& default_instance();
  void Swap(RceQueryVisitHelpsGiftUnitsOnBunker* other);
  
  // implements Message ----------------------------------------------
  
  RceQueryVisitHelpsGiftUnitsOnBunker* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RceQueryVisitHelpsGiftUnitsOnBunker& from);
  void MergeFrom(const RceQueryVisitHelpsGiftUnitsOnBunker& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const { _cached_size_ = size; }
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional string planetId = 1;
  inline bool has_planetid() const;
  inline void clear_planetid();
  static const int kPlanetIdFieldNumber = 1;
  inline const ::std::string& planetid() const;
  inline void set_planetid(const ::std::string& value);
  inline void set_planetid(const char* value);
  inline void set_planetid(const char* value, size_t size);
  inline ::std::string* mutable_planetid();
  
  // optional int32 bunkerSid = 2;
  inline bool has_bunkersid() const;
  inline void clear_bunkersid();
  static const int kBunkerSidFieldNumber = 2;
  inline ::google::protobuf::int32 bunkersid() const;
  inline void set_bunkersid(::google::protobuf::int32 value);
  
  // repeated .UnitsArray unitsArray = 3;
  inline int unitsarray_size() const;
  inline void clear_unitsarray();
  static const int kUnitsArrayFieldNumber = 3;
  inline const ::google::protobuf::RepeatedPtrField< ::UnitsArray >& unitsarray() const;
  inline ::google::protobuf::RepeatedPtrField< ::UnitsArray >* mutable_unitsarray();
  inline const ::UnitsArray& unitsarray(int index) const;
  inline ::UnitsArray* mutable_unitsarray(int index);
  inline ::UnitsArray* add_unitsarray();
  
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::std::string* planetid_;
  static const ::std::string _default_planetid_;
  ::google::protobuf::int32 bunkersid_;
  ::google::protobuf::RepeatedPtrField< ::UnitsArray > unitsarray_;
  friend void  protobuf_AddDesc_RceQueryVisitHelpsGiftUnitsOnBunker_2eproto();
  friend void protobuf_AssignDesc_RceQueryVisitHelpsGiftUnitsOnBunker_2eproto();
  friend void protobuf_ShutdownFile_RceQueryVisitHelpsGiftUnitsOnBunker_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static RceQueryVisitHelpsGiftUnitsOnBunker* default_instance_;
};
// -------------------------------------------------------------------

class UnitsArray : public ::google::protobuf::Message {
 public:
  UnitsArray();
  virtual ~UnitsArray();
  
  UnitsArray(const UnitsArray& from);
  
  inline UnitsArray& operator=(const UnitsArray& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const UnitsArray& default_instance();
  void Swap(UnitsArray* other);
  
  // implements Message ----------------------------------------------
  
  UnitsArray* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const UnitsArray& from);
  void MergeFrom(const UnitsArray& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const { _cached_size_ = size; }
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional int32 hangarSid = 1;
  inline bool has_hangarsid() const;
  inline void clear_hangarsid();
  static const int kHangarSidFieldNumber = 1;
  inline ::google::protobuf::int32 hangarsid() const;
  inline void set_hangarsid(::google::protobuf::int32 value);
  
  // optional string sku = 2;
  inline bool has_sku() const;
  inline void clear_sku();
  static const int kSkuFieldNumber = 2;
  inline const ::std::string& sku() const;
  inline void set_sku(const ::std::string& value);
  inline void set_sku(const char* value);
  inline void set_sku(const char* value, size_t size);
  inline ::std::string* mutable_sku();
  
  // optional string amount = 3;
  inline bool has_amount() const;
  inline void clear_amount();
  static const int kAmountFieldNumber = 3;
  inline const ::std::string& amount() const;
  inline void set_amount(const ::std::string& value);
  inline void set_amount(const char* value);
  inline void set_amount(const char* value, size_t size);
  inline ::std::string* mutable_amount();
  
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::google::protobuf::int32 hangarsid_;
  ::std::string* sku_;
  static const ::std::string _default_sku_;
  ::std::string* amount_;
  static const ::std::string _default_amount_;
  friend void  protobuf_AddDesc_RceQueryVisitHelpsGiftUnitsOnBunker_2eproto();
  friend void protobuf_AssignDesc_RceQueryVisitHelpsGiftUnitsOnBunker_2eproto();
  friend void protobuf_ShutdownFile_RceQueryVisitHelpsGiftUnitsOnBunker_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static UnitsArray* default_instance_;
};
// ===================================================================


// ===================================================================


// ===================================================================

// RceQueryVisitHelpsGiftUnitsOnBunker

// optional string planetId = 1;
inline bool RceQueryVisitHelpsGiftUnitsOnBunker::has_planetid() const {
  return _has_bit(0);
}
inline void RceQueryVisitHelpsGiftUnitsOnBunker::clear_planetid() {
  if (planetid_ != &_default_planetid_) {
    planetid_->clear();
  }
  _clear_bit(0);
}
inline const ::std::string& RceQueryVisitHelpsGiftUnitsOnBunker::planetid() const {
  return *planetid_;
}
inline void RceQueryVisitHelpsGiftUnitsOnBunker::set_planetid(const ::std::string& value) {
  _set_bit(0);
  if (planetid_ == &_default_planetid_) {
    planetid_ = new ::std::string;
  }
  planetid_->assign(value);
}
inline void RceQueryVisitHelpsGiftUnitsOnBunker::set_planetid(const char* value) {
  _set_bit(0);
  if (planetid_ == &_default_planetid_) {
    planetid_ = new ::std::string;
  }
  planetid_->assign(value);
}
inline void RceQueryVisitHelpsGiftUnitsOnBunker::set_planetid(const char* value, size_t size) {
  _set_bit(0);
  if (planetid_ == &_default_planetid_) {
    planetid_ = new ::std::string;
  }
  planetid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RceQueryVisitHelpsGiftUnitsOnBunker::mutable_planetid() {
  _set_bit(0);
  if (planetid_ == &_default_planetid_) {
    planetid_ = new ::std::string;
  }
  return planetid_;
}

// optional int32 bunkerSid = 2;
inline bool RceQueryVisitHelpsGiftUnitsOnBunker::has_bunkersid() const {
  return _has_bit(1);
}
inline void RceQueryVisitHelpsGiftUnitsOnBunker::clear_bunkersid() {
  bunkersid_ = 0;
  _clear_bit(1);
}
inline ::google::protobuf::int32 RceQueryVisitHelpsGiftUnitsOnBunker::bunkersid() const {
  return bunkersid_;
}
inline void RceQueryVisitHelpsGiftUnitsOnBunker::set_bunkersid(::google::protobuf::int32 value) {
  _set_bit(1);
  bunkersid_ = value;
}

// repeated .UnitsArray unitsArray = 3;
inline int RceQueryVisitHelpsGiftUnitsOnBunker::unitsarray_size() const {
  return unitsarray_.size();
}
inline void RceQueryVisitHelpsGiftUnitsOnBunker::clear_unitsarray() {
  unitsarray_.Clear();
}
inline const ::google::protobuf::RepeatedPtrField< ::UnitsArray >&
RceQueryVisitHelpsGiftUnitsOnBunker::unitsarray() const {
  return unitsarray_;
}
inline ::google::protobuf::RepeatedPtrField< ::UnitsArray >*
RceQueryVisitHelpsGiftUnitsOnBunker::mutable_unitsarray() {
  return &unitsarray_;
}
inline const ::UnitsArray& RceQueryVisitHelpsGiftUnitsOnBunker::unitsarray(int index) const {
  return unitsarray_.Get(index);
}
inline ::UnitsArray* RceQueryVisitHelpsGiftUnitsOnBunker::mutable_unitsarray(int index) {
  return unitsarray_.Mutable(index);
}
inline ::UnitsArray* RceQueryVisitHelpsGiftUnitsOnBunker::add_unitsarray() {
  return unitsarray_.Add();
}

// -------------------------------------------------------------------

// UnitsArray

// optional int32 hangarSid = 1;
inline bool UnitsArray::has_hangarsid() const {
  return _has_bit(0);
}
inline void UnitsArray::clear_hangarsid() {
  hangarsid_ = 0;
  _clear_bit(0);
}
inline ::google::protobuf::int32 UnitsArray::hangarsid() const {
  return hangarsid_;
}
inline void UnitsArray::set_hangarsid(::google::protobuf::int32 value) {
  _set_bit(0);
  hangarsid_ = value;
}

// optional string sku = 2;
inline bool UnitsArray::has_sku() const {
  return _has_bit(1);
}
inline void UnitsArray::clear_sku() {
  if (sku_ != &_default_sku_) {
    sku_->clear();
  }
  _clear_bit(1);
}
inline const ::std::string& UnitsArray::sku() const {
  return *sku_;
}
inline void UnitsArray::set_sku(const ::std::string& value) {
  _set_bit(1);
  if (sku_ == &_default_sku_) {
    sku_ = new ::std::string;
  }
  sku_->assign(value);
}
inline void UnitsArray::set_sku(const char* value) {
  _set_bit(1);
  if (sku_ == &_default_sku_) {
    sku_ = new ::std::string;
  }
  sku_->assign(value);
}
inline void UnitsArray::set_sku(const char* value, size_t size) {
  _set_bit(1);
  if (sku_ == &_default_sku_) {
    sku_ = new ::std::string;
  }
  sku_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* UnitsArray::mutable_sku() {
  _set_bit(1);
  if (sku_ == &_default_sku_) {
    sku_ = new ::std::string;
  }
  return sku_;
}

// optional string amount = 3;
inline bool UnitsArray::has_amount() const {
  return _has_bit(2);
}
inline void UnitsArray::clear_amount() {
  if (amount_ != &_default_amount_) {
    amount_->clear();
  }
  _clear_bit(2);
}
inline const ::std::string& UnitsArray::amount() const {
  return *amount_;
}
inline void UnitsArray::set_amount(const ::std::string& value) {
  _set_bit(2);
  if (amount_ == &_default_amount_) {
    amount_ = new ::std::string;
  }
  amount_->assign(value);
}
inline void UnitsArray::set_amount(const char* value) {
  _set_bit(2);
  if (amount_ == &_default_amount_) {
    amount_ = new ::std::string;
  }
  amount_->assign(value);
}
inline void UnitsArray::set_amount(const char* value, size_t size) {
  _set_bit(2);
  if (amount_ == &_default_amount_) {
    amount_ = new ::std::string;
  }
  amount_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* UnitsArray::mutable_amount() {
  _set_bit(2);
  if (amount_ == &_default_amount_) {
    amount_ = new ::std::string;
  }
  return amount_;
}


#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

#endif  // PROTOBUF_RceQueryVisitHelpsGiftUnitsOnBunker_2eproto__INCLUDED
