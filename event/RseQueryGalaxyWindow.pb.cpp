// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "RseQueryGalaxyWindow.pb.h"
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>

namespace {

const ::google::protobuf::Descriptor* RseQueryGalaxyWindow_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RseQueryGalaxyWindow_reflection_ = NULL;
const ::google::protobuf::Descriptor* GalaxyWindow_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GalaxyWindow_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_RseQueryGalaxyWindow_2eproto() {
  protobuf_AddDesc_RseQueryGalaxyWindow_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "RseQueryGalaxyWindow.proto");
  GOOGLE_CHECK(file != NULL);
  RseQueryGalaxyWindow_descriptor_ = file->message_type(0);
  static const int RseQueryGalaxyWindow_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RseQueryGalaxyWindow, ret_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RseQueryGalaxyWindow, galaxywindow_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RseQueryGalaxyWindow, topleftcoorx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RseQueryGalaxyWindow, topleftcoory_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RseQueryGalaxyWindow, bottomrightcoorx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RseQueryGalaxyWindow, bottomrightcoory_),
  };
  RseQueryGalaxyWindow_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RseQueryGalaxyWindow_descriptor_,
      RseQueryGalaxyWindow::default_instance_,
      RseQueryGalaxyWindow_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RseQueryGalaxyWindow, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RseQueryGalaxyWindow, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RseQueryGalaxyWindow));
  GalaxyWindow_descriptor_ = file->message_type(1);
  static const int GalaxyWindow_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GalaxyWindow, planetsfree_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GalaxyWindow, planetsoccupied_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GalaxyWindow, sku_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GalaxyWindow, starid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GalaxyWindow, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GalaxyWindow, name_),
  };
  GalaxyWindow_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GalaxyWindow_descriptor_,
      GalaxyWindow::default_instance_,
      GalaxyWindow_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GalaxyWindow, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GalaxyWindow, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GalaxyWindow));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_RseQueryGalaxyWindow_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RseQueryGalaxyWindow_descriptor_, &RseQueryGalaxyWindow::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GalaxyWindow_descriptor_, &GalaxyWindow::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_RseQueryGalaxyWindow_2eproto() {
  delete RseQueryGalaxyWindow::default_instance_;
  delete RseQueryGalaxyWindow_reflection_;
  delete GalaxyWindow::default_instance_;
  delete GalaxyWindow_reflection_;
}

void protobuf_AddDesc_RseQueryGalaxyWindow_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\032RseQueryGalaxyWindow.proto\"\250\001\n\024RseQuer"
    "yGalaxyWindow\022\013\n\003ret\030\001 \001(\005\022#\n\014galaxyWind"
    "ow\030\002 \003(\0132\r.GalaxyWindow\022\024\n\014topLeftCoorX\030"
    "\003 \001(\005\022\024\n\014topLeftCoorY\030\004 \001(\005\022\030\n\020bottomRig"
    "htCoorX\030\005 \001(\005\022\030\n\020bottomRightCoorY\030\006 \001(\005\""
    "u\n\014GalaxyWindow\022\023\n\013planetsFree\030\001 \001(\005\022\027\n\017"
    "planetsOccupied\030\002 \001(\005\022\013\n\003sku\030\003 \001(\t\022\016\n\006st"
    "arId\030\004 \001(\005\022\014\n\004type\030\005 \001(\005\022\014\n\004name\030\006 \001(\005", 318);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "RseQueryGalaxyWindow.proto", &protobuf_RegisterTypes);
  RseQueryGalaxyWindow::default_instance_ = new RseQueryGalaxyWindow();
  GalaxyWindow::default_instance_ = new GalaxyWindow();
  RseQueryGalaxyWindow::default_instance_->InitAsDefaultInstance();
  GalaxyWindow::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_RseQueryGalaxyWindow_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_RseQueryGalaxyWindow_2eproto {
  StaticDescriptorInitializer_RseQueryGalaxyWindow_2eproto() {
    protobuf_AddDesc_RseQueryGalaxyWindow_2eproto();
  }
} static_descriptor_initializer_RseQueryGalaxyWindow_2eproto_;


// ===================================================================

#ifndef _MSC_VER
const int RseQueryGalaxyWindow::kRetFieldNumber;
const int RseQueryGalaxyWindow::kGalaxyWindowFieldNumber;
const int RseQueryGalaxyWindow::kTopLeftCoorXFieldNumber;
const int RseQueryGalaxyWindow::kTopLeftCoorYFieldNumber;
const int RseQueryGalaxyWindow::kBottomRightCoorXFieldNumber;
const int RseQueryGalaxyWindow::kBottomRightCoorYFieldNumber;
#endif  // !_MSC_VER

RseQueryGalaxyWindow::RseQueryGalaxyWindow() {
  SharedCtor();
}

void RseQueryGalaxyWindow::InitAsDefaultInstance() {
}

RseQueryGalaxyWindow::RseQueryGalaxyWindow(const RseQueryGalaxyWindow& from) {
  SharedCtor();
  MergeFrom(from);
}

void RseQueryGalaxyWindow::SharedCtor() {
  _cached_size_ = 0;
  ret_ = 0;
  topleftcoorx_ = 0;
  topleftcoory_ = 0;
  bottomrightcoorx_ = 0;
  bottomrightcoory_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RseQueryGalaxyWindow::~RseQueryGalaxyWindow() {
  SharedDtor();
}

void RseQueryGalaxyWindow::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* RseQueryGalaxyWindow::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RseQueryGalaxyWindow_descriptor_;
}

const RseQueryGalaxyWindow& RseQueryGalaxyWindow::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_RseQueryGalaxyWindow_2eproto();  return *default_instance_;
}

RseQueryGalaxyWindow* RseQueryGalaxyWindow::default_instance_ = NULL;

RseQueryGalaxyWindow* RseQueryGalaxyWindow::New() const {
  return new RseQueryGalaxyWindow;
}

void RseQueryGalaxyWindow::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ret_ = 0;
    topleftcoorx_ = 0;
    topleftcoory_ = 0;
    bottomrightcoorx_ = 0;
    bottomrightcoory_ = 0;
  }
  galaxywindow_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RseQueryGalaxyWindow::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 ret = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &ret_));
        _set_bit(0);
        if (input->ExpectTag(18)) goto parse_galaxyWindow;
        break;
      }
      
      // repeated .GalaxyWindow galaxyWindow = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_galaxyWindow:
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, add_galaxywindow()));
        if (input->ExpectTag(18)) goto parse_galaxyWindow;
        if (input->ExpectTag(24)) goto parse_topLeftCoorX;
        break;
      }
      
      // optional int32 topLeftCoorX = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_topLeftCoorX:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &topleftcoorx_));
        _set_bit(2);
        if (input->ExpectTag(32)) goto parse_topLeftCoorY;
        break;
      }
      
      // optional int32 topLeftCoorY = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_topLeftCoorY:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &topleftcoory_));
        _set_bit(3);
        if (input->ExpectTag(40)) goto parse_bottomRightCoorX;
        break;
      }
      
      // optional int32 bottomRightCoorX = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_bottomRightCoorX:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &bottomrightcoorx_));
        _set_bit(4);
        if (input->ExpectTag(48)) goto parse_bottomRightCoorY;
        break;
      }
      
      // optional int32 bottomRightCoorY = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_bottomRightCoorY:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &bottomrightcoory_));
        _set_bit(5);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RseQueryGalaxyWindow::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    RseQueryGalaxyWindow::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional int32 ret = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ret(), output);
  }
  
  // repeated .GalaxyWindow galaxyWindow = 2;
  for (int i = 0; i < this->galaxywindow_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      2, this->galaxywindow(i), output);
  }
  
  // optional int32 topLeftCoorX = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->topleftcoorx(), output);
  }
  
  // optional int32 topLeftCoorY = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->topleftcoory(), output);
  }
  
  // optional int32 bottomRightCoorX = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->bottomrightcoorx(), output);
  }
  
  // optional int32 bottomRightCoorY = 6;
  if (_has_bit(5)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->bottomrightcoory(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RseQueryGalaxyWindow::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 ret = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ret(), target);
  }
  
  // repeated .GalaxyWindow galaxyWindow = 2;
  for (int i = 0; i < this->galaxywindow_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->galaxywindow(i), target);
  }
  
  // optional int32 topLeftCoorX = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->topleftcoorx(), target);
  }
  
  // optional int32 topLeftCoorY = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->topleftcoory(), target);
  }
  
  // optional int32 bottomRightCoorX = 5;
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->bottomrightcoorx(), target);
  }
  
  // optional int32 bottomRightCoorY = 6;
  if (_has_bit(5)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->bottomrightcoory(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RseQueryGalaxyWindow::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 ret = 1;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ret());
    }
    
    // optional int32 topLeftCoorX = 3;
    if (has_topleftcoorx()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->topleftcoorx());
    }
    
    // optional int32 topLeftCoorY = 4;
    if (has_topleftcoory()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->topleftcoory());
    }
    
    // optional int32 bottomRightCoorX = 5;
    if (has_bottomrightcoorx()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bottomrightcoorx());
    }
    
    // optional int32 bottomRightCoorY = 6;
    if (has_bottomrightcoory()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bottomrightcoory());
    }
    
  }
  // repeated .GalaxyWindow galaxyWindow = 2;
  total_size += 1 * this->galaxywindow_size();
  for (int i = 0; i < this->galaxywindow_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->galaxywindow(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void RseQueryGalaxyWindow::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RseQueryGalaxyWindow* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RseQueryGalaxyWindow*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RseQueryGalaxyWindow::MergeFrom(const RseQueryGalaxyWindow& from) {
  GOOGLE_CHECK_NE(&from, this);
  galaxywindow_.MergeFrom(from.galaxywindow_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_ret(from.ret());
    }
    if (from._has_bit(2)) {
      set_topleftcoorx(from.topleftcoorx());
    }
    if (from._has_bit(3)) {
      set_topleftcoory(from.topleftcoory());
    }
    if (from._has_bit(4)) {
      set_bottomrightcoorx(from.bottomrightcoorx());
    }
    if (from._has_bit(5)) {
      set_bottomrightcoory(from.bottomrightcoory());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RseQueryGalaxyWindow::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RseQueryGalaxyWindow::CopyFrom(const RseQueryGalaxyWindow& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RseQueryGalaxyWindow::IsInitialized() const {
  
  return true;
}

void RseQueryGalaxyWindow::Swap(RseQueryGalaxyWindow* other) {
  if (other != this) {
    std::swap(ret_, other->ret_);
    galaxywindow_.Swap(&other->galaxywindow_);
    std::swap(topleftcoorx_, other->topleftcoorx_);
    std::swap(topleftcoory_, other->topleftcoory_);
    std::swap(bottomrightcoorx_, other->bottomrightcoorx_);
    std::swap(bottomrightcoory_, other->bottomrightcoory_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RseQueryGalaxyWindow::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RseQueryGalaxyWindow_descriptor_;
  metadata.reflection = RseQueryGalaxyWindow_reflection_;
  return metadata;
}


// ===================================================================

const ::std::string GalaxyWindow::_default_sku_;
#ifndef _MSC_VER
const int GalaxyWindow::kPlanetsFreeFieldNumber;
const int GalaxyWindow::kPlanetsOccupiedFieldNumber;
const int GalaxyWindow::kSkuFieldNumber;
const int GalaxyWindow::kStarIdFieldNumber;
const int GalaxyWindow::kTypeFieldNumber;
const int GalaxyWindow::kNameFieldNumber;
#endif  // !_MSC_VER

GalaxyWindow::GalaxyWindow() {
  SharedCtor();
}

void GalaxyWindow::InitAsDefaultInstance() {
}

GalaxyWindow::GalaxyWindow(const GalaxyWindow& from) {
  SharedCtor();
  MergeFrom(from);
}

void GalaxyWindow::SharedCtor() {
  _cached_size_ = 0;
  planetsfree_ = 0;
  planetsoccupied_ = 0;
  sku_ = const_cast< ::std::string*>(&_default_sku_);
  starid_ = 0;
  type_ = 0;
  name_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GalaxyWindow::~GalaxyWindow() {
  SharedDtor();
}

void GalaxyWindow::SharedDtor() {
  if (sku_ != &_default_sku_) {
    delete sku_;
  }
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* GalaxyWindow::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GalaxyWindow_descriptor_;
}

const GalaxyWindow& GalaxyWindow::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_RseQueryGalaxyWindow_2eproto();  return *default_instance_;
}

GalaxyWindow* GalaxyWindow::default_instance_ = NULL;

GalaxyWindow* GalaxyWindow::New() const {
  return new GalaxyWindow;
}

void GalaxyWindow::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    planetsfree_ = 0;
    planetsoccupied_ = 0;
    if (_has_bit(2)) {
      if (sku_ != &_default_sku_) {
        sku_->clear();
      }
    }
    starid_ = 0;
    type_ = 0;
    name_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GalaxyWindow::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 planetsFree = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &planetsfree_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_planetsOccupied;
        break;
      }
      
      // optional int32 planetsOccupied = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_planetsOccupied:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &planetsoccupied_));
        _set_bit(1);
        if (input->ExpectTag(26)) goto parse_sku;
        break;
      }
      
      // optional string sku = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_sku:
        DO_(::google::protobuf::internal::WireFormatLite::ReadString(
              input, this->mutable_sku()));
        ::google::protobuf::internal::WireFormat::VerifyUTF8String(
          this->sku().data(), this->sku().length(),
          ::google::protobuf::internal::WireFormat::PARSE);
        if (input->ExpectTag(32)) goto parse_starId;
        break;
      }
      
      // optional int32 starId = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_starId:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &starid_));
        _set_bit(3);
        if (input->ExpectTag(40)) goto parse_type;
        break;
      }
      
      // optional int32 type = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_type:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &type_));
        _set_bit(4);
        if (input->ExpectTag(48)) goto parse_name;
        break;
      }
      
      // optional int32 name = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_name:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &name_));
        _set_bit(5);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GalaxyWindow::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    GalaxyWindow::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional int32 planetsFree = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->planetsfree(), output);
  }
  
  // optional int32 planetsOccupied = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->planetsoccupied(), output);
  }
  
  // optional string sku = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->sku().data(), this->sku().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->sku(), output);
  }
  
  // optional int32 starId = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->starid(), output);
  }
  
  // optional int32 type = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->type(), output);
  }
  
  // optional int32 name = 6;
  if (_has_bit(5)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->name(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GalaxyWindow::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 planetsFree = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->planetsfree(), target);
  }
  
  // optional int32 planetsOccupied = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->planetsoccupied(), target);
  }
  
  // optional string sku = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->sku().data(), this->sku().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->sku(), target);
  }
  
  // optional int32 starId = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->starid(), target);
  }
  
  // optional int32 type = 5;
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->type(), target);
  }
  
  // optional int32 name = 6;
  if (_has_bit(5)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->name(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GalaxyWindow::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 planetsFree = 1;
    if (has_planetsfree()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->planetsfree());
    }
    
    // optional int32 planetsOccupied = 2;
    if (has_planetsoccupied()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->planetsoccupied());
    }
    
    // optional string sku = 3;
    if (has_sku()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->sku());
    }
    
    // optional int32 starId = 4;
    if (has_starid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->starid());
    }
    
    // optional int32 type = 5;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }
    
    // optional int32 name = 6;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->name());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void GalaxyWindow::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GalaxyWindow* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GalaxyWindow*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GalaxyWindow::MergeFrom(const GalaxyWindow& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_planetsfree(from.planetsfree());
    }
    if (from._has_bit(1)) {
      set_planetsoccupied(from.planetsoccupied());
    }
    if (from._has_bit(2)) {
      set_sku(from.sku());
    }
    if (from._has_bit(3)) {
      set_starid(from.starid());
    }
    if (from._has_bit(4)) {
      set_type(from.type());
    }
    if (from._has_bit(5)) {
      set_name(from.name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GalaxyWindow::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GalaxyWindow::CopyFrom(const GalaxyWindow& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GalaxyWindow::IsInitialized() const {
  
  return true;
}

void GalaxyWindow::Swap(GalaxyWindow* other) {
  if (other != this) {
    std::swap(planetsfree_, other->planetsfree_);
    std::swap(planetsoccupied_, other->planetsoccupied_);
    std::swap(sku_, other->sku_);
    std::swap(starid_, other->starid_);
    std::swap(type_, other->type_);
    std::swap(name_, other->name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GalaxyWindow::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GalaxyWindow_descriptor_;
  metadata.reflection = GalaxyWindow_reflection_;
  return metadata;
}

