// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "RseObtainUniverse.pb.h"
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>

namespace {

const ::google::protobuf::Descriptor* MsgSlot_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgSlot_reflection_ = NULL;
const ::google::protobuf::Descriptor* RseObtainUniverse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RseObtainUniverse_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_RseObtainUniverse_2eproto() {
  protobuf_AddDesc_RseObtainUniverse_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "RseObtainUniverse.proto");
  GOOGLE_CHECK(file != NULL);
  MsgSlot_descriptor_ = file->message_type(0);
  static const int MsgSlot_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgSlot, ship_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgSlot, timeleft_),
  };
  MsgSlot_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgSlot_descriptor_,
      MsgSlot::default_instance_,
      MsgSlot_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgSlot, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgSlot, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgSlot));
  RseObtainUniverse_descriptor_ = file->message_type(1);
  static const int RseObtainUniverse_offsets_[31] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RseObtainUniverse, vip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RseObtainUniverse, yearvip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RseObtainUniverse, viplevel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RseObtainUniverse, newplayergiftbag_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RseObtainUniverse, everydaygiftbag_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RseObtainUniverse, spycapsulestimeleft_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RseObtainUniverse, dcplayername_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RseObtainUniverse, dcworldname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RseObtainUniverse, levelbasedonscore_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RseObtainUniverse, dcplayerrank_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RseObtainUniverse, dccoins_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RseObtainUniverse, dcminerals_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RseObtainUniverse, score_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RseObtainUniverse, exp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RseObtainUniverse, lastvisittime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RseObtainUniverse, lastlevelnotified_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RseObtainUniverse, dccash_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RseObtainUniverse, dcdroids_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RseObtainUniverse, dcdroidsinuse_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RseObtainUniverse, damageprotectiontimeleft_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RseObtainUniverse, damageprotectiontimetotal_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RseObtainUniverse, tutorialcompleted_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RseObtainUniverse, flags_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RseObtainUniverse, missions_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RseObtainUniverse, planets_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RseObtainUniverse, items_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RseObtainUniverse, shipyards_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RseObtainUniverse, hangars_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RseObtainUniverse, bunkers_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RseObtainUniverse, gameunits_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RseObtainUniverse, npc_),
  };
  RseObtainUniverse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RseObtainUniverse_descriptor_,
      RseObtainUniverse::default_instance_,
      RseObtainUniverse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RseObtainUniverse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RseObtainUniverse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RseObtainUniverse));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_RseObtainUniverse_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgSlot_descriptor_, &MsgSlot::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RseObtainUniverse_descriptor_, &RseObtainUniverse::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_RseObtainUniverse_2eproto() {
  delete MsgSlot::default_instance_;
  delete MsgSlot_reflection_;
  delete RseObtainUniverse::default_instance_;
  delete RseObtainUniverse_reflection_;
}

void protobuf_AddDesc_RseObtainUniverse_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::protobuf_AddDesc_MsgBuildingItem_2eproto();
  ::protobuf_AddDesc_MsgPlanet_2eproto();
  ::protobuf_AddDesc_MsgMission_2eproto();
  ::protobuf_AddDesc_MsgShipyard_2eproto();
  ::protobuf_AddDesc_MsgHangars_2eproto();
  ::protobuf_AddDesc_MsgBunker_2eproto();
  ::protobuf_AddDesc_MsgGameUnit_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\027RseObtainUniverse.proto\032\025MsgBuildingIt"
    "em.proto\032\017MsgPlanet.proto\032\020MsgMission.pr"
    "oto\032\021MsgShipyard.proto\032\020MsgHangars.proto"
    "\032\017MsgBunker.proto\032\021MsgGameUnit.proto\")\n\007"
    "MsgSlot\022\014\n\004Ship\030\001 \003(\005\022\020\n\010timeLeft\030\002 \001(\005\""
    "\366\005\n\021RseObtainUniverse\022\013\n\003vip\030\001 \001(\010\022\017\n\007ye"
    "arVip\030\002 \001(\010\022\020\n\010vipLevel\030\003 \001(\005\022\030\n\020newPlay"
    "erGiftBag\030\004 \001(\010\022\027\n\017everydayGiftBag\030\005 \001(\010"
    "\022\033\n\023spyCapsulesTimeLeft\030\006 \001(\005\022\024\n\014DCPlaye"
    "rName\030\007 \001(\t\022\023\n\013DCWorldName\030\010 \001(\t\022\031\n\021leve"
    "lBasedOnScore\030\t \001(\005\022\024\n\014DCPlayerRank\030\n \001("
    "\005\022\017\n\007DCCoins\030\013 \001(\005\022\022\n\nDCMinerals\030\014 \001(\005\022\r"
    "\n\005score\030\r \001(\005\022\013\n\003exp\030\016 \001(\005\022\025\n\rlastVisitT"
    "ime\030\017 \001(\005\022\031\n\021lastLevelNotified\030\020 \001(\005\022\016\n\006"
    "DCCash\030\021 \001(\005\022\020\n\010DCDroids\030\022 \001(\005\022\025\n\rDCDroi"
    "dsInUse\030\023 \001(\005\022 \n\030damageProtectionTimeLef"
    "t\030\024 \001(\005\022!\n\031damageProtectionTimeTotal\030\025 \001"
    "(\005\022\031\n\021tutorialCompleted\030\026 \001(\010\022\r\n\005flags\030\027"
    " \001(\t\022\"\n\010Missions\030\030 \001(\0132\020.MsgMissionState"
    "\022\033\n\007Planets\030\031 \003(\0132\n.MsgPlanet\022\037\n\005Items\030\032"
    " \003(\0132\020.MsgBuildingItem\022\037\n\tShipyards\030\033 \003("
    "\0132\014.MsgShipyard\022\034\n\007Hangars\030\034 \003(\0132\013.MsgHa"
    "ngars\022\033\n\007Bunkers\030\035 \003(\0132\n.MsgBunker\022\037\n\tGa"
    "meUnits\030\036 \003(\0132\014.MsgGameUnit\022\013\n\003npc\030\037 \001(\t", 960);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "RseObtainUniverse.proto", &protobuf_RegisterTypes);
  MsgSlot::default_instance_ = new MsgSlot();
  RseObtainUniverse::default_instance_ = new RseObtainUniverse();
  MsgSlot::default_instance_->InitAsDefaultInstance();
  RseObtainUniverse::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_RseObtainUniverse_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_RseObtainUniverse_2eproto {
  StaticDescriptorInitializer_RseObtainUniverse_2eproto() {
    protobuf_AddDesc_RseObtainUniverse_2eproto();
  }
} static_descriptor_initializer_RseObtainUniverse_2eproto_;


// ===================================================================

#ifndef _MSC_VER
const int MsgSlot::kShipFieldNumber;
const int MsgSlot::kTimeLeftFieldNumber;
#endif  // !_MSC_VER

MsgSlot::MsgSlot() {
  SharedCtor();
}

void MsgSlot::InitAsDefaultInstance() {
}

MsgSlot::MsgSlot(const MsgSlot& from) {
  SharedCtor();
  MergeFrom(from);
}

void MsgSlot::SharedCtor() {
  _cached_size_ = 0;
  timeleft_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgSlot::~MsgSlot() {
  SharedDtor();
}

void MsgSlot::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* MsgSlot::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgSlot_descriptor_;
}

const MsgSlot& MsgSlot::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_RseObtainUniverse_2eproto();  return *default_instance_;
}

MsgSlot* MsgSlot::default_instance_ = NULL;

MsgSlot* MsgSlot::New() const {
  return new MsgSlot;
}

void MsgSlot::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    timeleft_ = 0;
  }
  ship_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgSlot::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated int32 Ship = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Ship:
        ::google::protobuf::int32 value;
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &value));
        add_ship(value);
        if (input->ExpectTag(8)) goto parse_Ship;
        if (input->ExpectTag(16)) goto parse_timeLeft;
        break;
      }
      
      // optional int32 timeLeft = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_timeLeft:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &timeleft_));
        _set_bit(1);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MsgSlot::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    MsgSlot::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // repeated int32 Ship = 1;
  for (int i = 0; i < this->ship_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      1, this->ship(i), output);
  }
  
  // optional int32 timeLeft = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->timeleft(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MsgSlot::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated int32 Ship = 1;
  for (int i = 0; i < this->ship_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(1, this->ship(i), target);
  }
  
  // optional int32 timeLeft = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->timeleft(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MsgSlot::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional int32 timeLeft = 2;
    if (has_timeleft()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->timeleft());
    }
    
  }
  // repeated int32 Ship = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->ship_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->ship(i));
    }
    total_size += 1 * this->ship_size() + data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void MsgSlot::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgSlot* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgSlot*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgSlot::MergeFrom(const MsgSlot& from) {
  GOOGLE_CHECK_NE(&from, this);
  ship_.MergeFrom(from.ship_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from._has_bit(1)) {
      set_timeleft(from.timeleft());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgSlot::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgSlot::CopyFrom(const MsgSlot& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgSlot::IsInitialized() const {
  
  return true;
}

void MsgSlot::Swap(MsgSlot* other) {
  if (other != this) {
    ship_.Swap(&other->ship_);
    std::swap(timeleft_, other->timeleft_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgSlot::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgSlot_descriptor_;
  metadata.reflection = MsgSlot_reflection_;
  return metadata;
}


// ===================================================================

const ::std::string RseObtainUniverse::_default_dcplayername_;
const ::std::string RseObtainUniverse::_default_dcworldname_;
const ::std::string RseObtainUniverse::_default_flags_;
const ::std::string RseObtainUniverse::_default_npc_;
#ifndef _MSC_VER
const int RseObtainUniverse::kVipFieldNumber;
const int RseObtainUniverse::kYearVipFieldNumber;
const int RseObtainUniverse::kVipLevelFieldNumber;
const int RseObtainUniverse::kNewPlayerGiftBagFieldNumber;
const int RseObtainUniverse::kEverydayGiftBagFieldNumber;
const int RseObtainUniverse::kSpyCapsulesTimeLeftFieldNumber;
const int RseObtainUniverse::kDCPlayerNameFieldNumber;
const int RseObtainUniverse::kDCWorldNameFieldNumber;
const int RseObtainUniverse::kLevelBasedOnScoreFieldNumber;
const int RseObtainUniverse::kDCPlayerRankFieldNumber;
const int RseObtainUniverse::kDCCoinsFieldNumber;
const int RseObtainUniverse::kDCMineralsFieldNumber;
const int RseObtainUniverse::kScoreFieldNumber;
const int RseObtainUniverse::kExpFieldNumber;
const int RseObtainUniverse::kLastVisitTimeFieldNumber;
const int RseObtainUniverse::kLastLevelNotifiedFieldNumber;
const int RseObtainUniverse::kDCCashFieldNumber;
const int RseObtainUniverse::kDCDroidsFieldNumber;
const int RseObtainUniverse::kDCDroidsInUseFieldNumber;
const int RseObtainUniverse::kDamageProtectionTimeLeftFieldNumber;
const int RseObtainUniverse::kDamageProtectionTimeTotalFieldNumber;
const int RseObtainUniverse::kTutorialCompletedFieldNumber;
const int RseObtainUniverse::kFlagsFieldNumber;
const int RseObtainUniverse::kMissionsFieldNumber;
const int RseObtainUniverse::kPlanetsFieldNumber;
const int RseObtainUniverse::kItemsFieldNumber;
const int RseObtainUniverse::kShipyardsFieldNumber;
const int RseObtainUniverse::kHangarsFieldNumber;
const int RseObtainUniverse::kBunkersFieldNumber;
const int RseObtainUniverse::kGameUnitsFieldNumber;
const int RseObtainUniverse::kNpcFieldNumber;
#endif  // !_MSC_VER

RseObtainUniverse::RseObtainUniverse() {
  SharedCtor();
}

void RseObtainUniverse::InitAsDefaultInstance() {
  missions_ = const_cast< ::MsgMissionState*>(&::MsgMissionState::default_instance());
}

RseObtainUniverse::RseObtainUniverse(const RseObtainUniverse& from) {
  SharedCtor();
  MergeFrom(from);
}

void RseObtainUniverse::SharedCtor() {
  _cached_size_ = 0;
  vip_ = false;
  yearvip_ = false;
  viplevel_ = 0;
  newplayergiftbag_ = false;
  everydaygiftbag_ = false;
  spycapsulestimeleft_ = 0;
  dcplayername_ = const_cast< ::std::string*>(&_default_dcplayername_);
  dcworldname_ = const_cast< ::std::string*>(&_default_dcworldname_);
  levelbasedonscore_ = 0;
  dcplayerrank_ = 0;
  dccoins_ = 0;
  dcminerals_ = 0;
  score_ = 0;
  exp_ = 0;
  lastvisittime_ = 0;
  lastlevelnotified_ = 0;
  dccash_ = 0;
  dcdroids_ = 0;
  dcdroidsinuse_ = 0;
  damageprotectiontimeleft_ = 0;
  damageprotectiontimetotal_ = 0;
  tutorialcompleted_ = false;
  flags_ = const_cast< ::std::string*>(&_default_flags_);
  missions_ = NULL;
  npc_ = const_cast< ::std::string*>(&_default_npc_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RseObtainUniverse::~RseObtainUniverse() {
  SharedDtor();
}

void RseObtainUniverse::SharedDtor() {
  if (dcplayername_ != &_default_dcplayername_) {
    delete dcplayername_;
  }
  if (dcworldname_ != &_default_dcworldname_) {
    delete dcworldname_;
  }
  if (flags_ != &_default_flags_) {
    delete flags_;
  }
  if (npc_ != &_default_npc_) {
    delete npc_;
  }
  if (this != default_instance_) {
    delete missions_;
  }
}

const ::google::protobuf::Descriptor* RseObtainUniverse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RseObtainUniverse_descriptor_;
}

const RseObtainUniverse& RseObtainUniverse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_RseObtainUniverse_2eproto();  return *default_instance_;
}

RseObtainUniverse* RseObtainUniverse::default_instance_ = NULL;

RseObtainUniverse* RseObtainUniverse::New() const {
  return new RseObtainUniverse;
}

void RseObtainUniverse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    vip_ = false;
    yearvip_ = false;
    viplevel_ = 0;
    newplayergiftbag_ = false;
    everydaygiftbag_ = false;
    spycapsulestimeleft_ = 0;
    if (_has_bit(6)) {
      if (dcplayername_ != &_default_dcplayername_) {
        dcplayername_->clear();
      }
    }
    if (_has_bit(7)) {
      if (dcworldname_ != &_default_dcworldname_) {
        dcworldname_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    levelbasedonscore_ = 0;
    dcplayerrank_ = 0;
    dccoins_ = 0;
    dcminerals_ = 0;
    score_ = 0;
    exp_ = 0;
    lastvisittime_ = 0;
    lastlevelnotified_ = 0;
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    dccash_ = 0;
    dcdroids_ = 0;
    dcdroidsinuse_ = 0;
    damageprotectiontimeleft_ = 0;
    damageprotectiontimetotal_ = 0;
    tutorialcompleted_ = false;
    if (_has_bit(22)) {
      if (flags_ != &_default_flags_) {
        flags_->clear();
      }
    }
    if (_has_bit(23)) {
      if (missions_ != NULL) missions_->::MsgMissionState::Clear();
    }
  }
  if (_has_bits_[30 / 32] & (0xffu << (30 % 32))) {
    if (_has_bit(30)) {
      if (npc_ != &_default_npc_) {
        npc_->clear();
      }
    }
  }
  planets_.Clear();
  items_.Clear();
  shipyards_.Clear();
  hangars_.Clear();
  bunkers_.Clear();
  gameunits_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RseObtainUniverse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool vip = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadBool(
              input, &vip_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_yearVip;
        break;
      }
      
      // optional bool yearVip = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_yearVip:
        DO_(::google::protobuf::internal::WireFormatLite::ReadBool(
              input, &yearvip_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_vipLevel;
        break;
      }
      
      // optional int32 vipLevel = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_vipLevel:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &viplevel_));
        _set_bit(2);
        if (input->ExpectTag(32)) goto parse_newPlayerGiftBag;
        break;
      }
      
      // optional bool newPlayerGiftBag = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_newPlayerGiftBag:
        DO_(::google::protobuf::internal::WireFormatLite::ReadBool(
              input, &newplayergiftbag_));
        _set_bit(3);
        if (input->ExpectTag(40)) goto parse_everydayGiftBag;
        break;
      }
      
      // optional bool everydayGiftBag = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_everydayGiftBag:
        DO_(::google::protobuf::internal::WireFormatLite::ReadBool(
              input, &everydaygiftbag_));
        _set_bit(4);
        if (input->ExpectTag(48)) goto parse_spyCapsulesTimeLeft;
        break;
      }
      
      // optional int32 spyCapsulesTimeLeft = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_spyCapsulesTimeLeft:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &spycapsulestimeleft_));
        _set_bit(5);
        if (input->ExpectTag(58)) goto parse_DCPlayerName;
        break;
      }
      
      // optional string DCPlayerName = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_DCPlayerName:
        DO_(::google::protobuf::internal::WireFormatLite::ReadString(
              input, this->mutable_dcplayername()));
        ::google::protobuf::internal::WireFormat::VerifyUTF8String(
          this->dcplayername().data(), this->dcplayername().length(),
          ::google::protobuf::internal::WireFormat::PARSE);
        if (input->ExpectTag(66)) goto parse_DCWorldName;
        break;
      }
      
      // optional string DCWorldName = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_DCWorldName:
        DO_(::google::protobuf::internal::WireFormatLite::ReadString(
              input, this->mutable_dcworldname()));
        ::google::protobuf::internal::WireFormat::VerifyUTF8String(
          this->dcworldname().data(), this->dcworldname().length(),
          ::google::protobuf::internal::WireFormat::PARSE);
        if (input->ExpectTag(72)) goto parse_levelBasedOnScore;
        break;
      }
      
      // optional int32 levelBasedOnScore = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_levelBasedOnScore:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &levelbasedonscore_));
        _set_bit(8);
        if (input->ExpectTag(80)) goto parse_DCPlayerRank;
        break;
      }
      
      // optional int32 DCPlayerRank = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_DCPlayerRank:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &dcplayerrank_));
        _set_bit(9);
        if (input->ExpectTag(88)) goto parse_DCCoins;
        break;
      }
      
      // optional int32 DCCoins = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_DCCoins:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &dccoins_));
        _set_bit(10);
        if (input->ExpectTag(96)) goto parse_DCMinerals;
        break;
      }
      
      // optional int32 DCMinerals = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_DCMinerals:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &dcminerals_));
        _set_bit(11);
        if (input->ExpectTag(104)) goto parse_score;
        break;
      }
      
      // optional int32 score = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_score:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &score_));
        _set_bit(12);
        if (input->ExpectTag(112)) goto parse_exp;
        break;
      }
      
      // optional int32 exp = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_exp:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &exp_));
        _set_bit(13);
        if (input->ExpectTag(120)) goto parse_lastVisitTime;
        break;
      }
      
      // optional int32 lastVisitTime = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_lastVisitTime:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &lastvisittime_));
        _set_bit(14);
        if (input->ExpectTag(128)) goto parse_lastLevelNotified;
        break;
      }
      
      // optional int32 lastLevelNotified = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_lastLevelNotified:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &lastlevelnotified_));
        _set_bit(15);
        if (input->ExpectTag(136)) goto parse_DCCash;
        break;
      }
      
      // optional int32 DCCash = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_DCCash:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &dccash_));
        _set_bit(16);
        if (input->ExpectTag(144)) goto parse_DCDroids;
        break;
      }
      
      // optional int32 DCDroids = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_DCDroids:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &dcdroids_));
        _set_bit(17);
        if (input->ExpectTag(152)) goto parse_DCDroidsInUse;
        break;
      }
      
      // optional int32 DCDroidsInUse = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_DCDroidsInUse:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &dcdroidsinuse_));
        _set_bit(18);
        if (input->ExpectTag(160)) goto parse_damageProtectionTimeLeft;
        break;
      }
      
      // optional int32 damageProtectionTimeLeft = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_damageProtectionTimeLeft:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &damageprotectiontimeleft_));
        _set_bit(19);
        if (input->ExpectTag(168)) goto parse_damageProtectionTimeTotal;
        break;
      }
      
      // optional int32 damageProtectionTimeTotal = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_damageProtectionTimeTotal:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &damageprotectiontimetotal_));
        _set_bit(20);
        if (input->ExpectTag(176)) goto parse_tutorialCompleted;
        break;
      }
      
      // optional bool tutorialCompleted = 22;
      case 22: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_tutorialCompleted:
        DO_(::google::protobuf::internal::WireFormatLite::ReadBool(
              input, &tutorialcompleted_));
        _set_bit(21);
        if (input->ExpectTag(186)) goto parse_flags;
        break;
      }
      
      // optional string flags = 23;
      case 23: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_flags:
        DO_(::google::protobuf::internal::WireFormatLite::ReadString(
              input, this->mutable_flags()));
        ::google::protobuf::internal::WireFormat::VerifyUTF8String(
          this->flags().data(), this->flags().length(),
          ::google::protobuf::internal::WireFormat::PARSE);
        if (input->ExpectTag(194)) goto parse_Missions;
        break;
      }
      
      // optional .MsgMissionState Missions = 24;
      case 24: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_Missions:
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
             input, mutable_missions()));
        if (input->ExpectTag(202)) goto parse_Planets;
        break;
      }
      
      // repeated .MsgPlanet Planets = 25;
      case 25: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_Planets:
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, add_planets()));
        if (input->ExpectTag(202)) goto parse_Planets;
        if (input->ExpectTag(210)) goto parse_Items;
        break;
      }
      
      // repeated .MsgBuildingItem Items = 26;
      case 26: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_Items:
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, add_items()));
        if (input->ExpectTag(210)) goto parse_Items;
        if (input->ExpectTag(218)) goto parse_Shipyards;
        break;
      }
      
      // repeated .MsgShipyard Shipyards = 27;
      case 27: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_Shipyards:
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, add_shipyards()));
        if (input->ExpectTag(218)) goto parse_Shipyards;
        if (input->ExpectTag(226)) goto parse_Hangars;
        break;
      }
      
      // repeated .MsgHangars Hangars = 28;
      case 28: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_Hangars:
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, add_hangars()));
        if (input->ExpectTag(226)) goto parse_Hangars;
        if (input->ExpectTag(234)) goto parse_Bunkers;
        break;
      }
      
      // repeated .MsgBunker Bunkers = 29;
      case 29: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_Bunkers:
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, add_bunkers()));
        if (input->ExpectTag(234)) goto parse_Bunkers;
        if (input->ExpectTag(242)) goto parse_GameUnits;
        break;
      }
      
      // repeated .MsgGameUnit GameUnits = 30;
      case 30: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_GameUnits:
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, add_gameunits()));
        if (input->ExpectTag(242)) goto parse_GameUnits;
        if (input->ExpectTag(250)) goto parse_npc;
        break;
      }
      
      // optional string npc = 31;
      case 31: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_npc:
        DO_(::google::protobuf::internal::WireFormatLite::ReadString(
              input, this->mutable_npc()));
        ::google::protobuf::internal::WireFormat::VerifyUTF8String(
          this->npc().data(), this->npc().length(),
          ::google::protobuf::internal::WireFormat::PARSE);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RseObtainUniverse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    RseObtainUniverse::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional bool vip = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->vip(), output);
  }
  
  // optional bool yearVip = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->yearvip(), output);
  }
  
  // optional int32 vipLevel = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->viplevel(), output);
  }
  
  // optional bool newPlayerGiftBag = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->newplayergiftbag(), output);
  }
  
  // optional bool everydayGiftBag = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->everydaygiftbag(), output);
  }
  
  // optional int32 spyCapsulesTimeLeft = 6;
  if (_has_bit(5)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->spycapsulestimeleft(), output);
  }
  
  // optional string DCPlayerName = 7;
  if (_has_bit(6)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->dcplayername().data(), this->dcplayername().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->dcplayername(), output);
  }
  
  // optional string DCWorldName = 8;
  if (_has_bit(7)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->dcworldname().data(), this->dcworldname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      8, this->dcworldname(), output);
  }
  
  // optional int32 levelBasedOnScore = 9;
  if (_has_bit(8)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->levelbasedonscore(), output);
  }
  
  // optional int32 DCPlayerRank = 10;
  if (_has_bit(9)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->dcplayerrank(), output);
  }
  
  // optional int32 DCCoins = 11;
  if (_has_bit(10)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->dccoins(), output);
  }
  
  // optional int32 DCMinerals = 12;
  if (_has_bit(11)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->dcminerals(), output);
  }
  
  // optional int32 score = 13;
  if (_has_bit(12)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->score(), output);
  }
  
  // optional int32 exp = 14;
  if (_has_bit(13)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->exp(), output);
  }
  
  // optional int32 lastVisitTime = 15;
  if (_has_bit(14)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(15, this->lastvisittime(), output);
  }
  
  // optional int32 lastLevelNotified = 16;
  if (_has_bit(15)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(16, this->lastlevelnotified(), output);
  }
  
  // optional int32 DCCash = 17;
  if (_has_bit(16)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(17, this->dccash(), output);
  }
  
  // optional int32 DCDroids = 18;
  if (_has_bit(17)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(18, this->dcdroids(), output);
  }
  
  // optional int32 DCDroidsInUse = 19;
  if (_has_bit(18)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(19, this->dcdroidsinuse(), output);
  }
  
  // optional int32 damageProtectionTimeLeft = 20;
  if (_has_bit(19)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(20, this->damageprotectiontimeleft(), output);
  }
  
  // optional int32 damageProtectionTimeTotal = 21;
  if (_has_bit(20)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(21, this->damageprotectiontimetotal(), output);
  }
  
  // optional bool tutorialCompleted = 22;
  if (_has_bit(21)) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(22, this->tutorialcompleted(), output);
  }
  
  // optional string flags = 23;
  if (_has_bit(22)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->flags().data(), this->flags().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      23, this->flags(), output);
  }
  
  // optional .MsgMissionState Missions = 24;
  if (_has_bit(23)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      24, this->missions(), output);
  }
  
  // repeated .MsgPlanet Planets = 25;
  for (int i = 0; i < this->planets_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      25, this->planets(i), output);
  }
  
  // repeated .MsgBuildingItem Items = 26;
  for (int i = 0; i < this->items_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      26, this->items(i), output);
  }
  
  // repeated .MsgShipyard Shipyards = 27;
  for (int i = 0; i < this->shipyards_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      27, this->shipyards(i), output);
  }
  
  // repeated .MsgHangars Hangars = 28;
  for (int i = 0; i < this->hangars_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      28, this->hangars(i), output);
  }
  
  // repeated .MsgBunker Bunkers = 29;
  for (int i = 0; i < this->bunkers_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      29, this->bunkers(i), output);
  }
  
  // repeated .MsgGameUnit GameUnits = 30;
  for (int i = 0; i < this->gameunits_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      30, this->gameunits(i), output);
  }
  
  // optional string npc = 31;
  if (_has_bit(30)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->npc().data(), this->npc().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      31, this->npc(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RseObtainUniverse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bool vip = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->vip(), target);
  }
  
  // optional bool yearVip = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->yearvip(), target);
  }
  
  // optional int32 vipLevel = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->viplevel(), target);
  }
  
  // optional bool newPlayerGiftBag = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->newplayergiftbag(), target);
  }
  
  // optional bool everydayGiftBag = 5;
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->everydaygiftbag(), target);
  }
  
  // optional int32 spyCapsulesTimeLeft = 6;
  if (_has_bit(5)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->spycapsulestimeleft(), target);
  }
  
  // optional string DCPlayerName = 7;
  if (_has_bit(6)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->dcplayername().data(), this->dcplayername().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->dcplayername(), target);
  }
  
  // optional string DCWorldName = 8;
  if (_has_bit(7)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->dcworldname().data(), this->dcworldname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->dcworldname(), target);
  }
  
  // optional int32 levelBasedOnScore = 9;
  if (_has_bit(8)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->levelbasedonscore(), target);
  }
  
  // optional int32 DCPlayerRank = 10;
  if (_has_bit(9)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->dcplayerrank(), target);
  }
  
  // optional int32 DCCoins = 11;
  if (_has_bit(10)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->dccoins(), target);
  }
  
  // optional int32 DCMinerals = 12;
  if (_has_bit(11)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->dcminerals(), target);
  }
  
  // optional int32 score = 13;
  if (_has_bit(12)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->score(), target);
  }
  
  // optional int32 exp = 14;
  if (_has_bit(13)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(14, this->exp(), target);
  }
  
  // optional int32 lastVisitTime = 15;
  if (_has_bit(14)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(15, this->lastvisittime(), target);
  }
  
  // optional int32 lastLevelNotified = 16;
  if (_has_bit(15)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(16, this->lastlevelnotified(), target);
  }
  
  // optional int32 DCCash = 17;
  if (_has_bit(16)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(17, this->dccash(), target);
  }
  
  // optional int32 DCDroids = 18;
  if (_has_bit(17)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(18, this->dcdroids(), target);
  }
  
  // optional int32 DCDroidsInUse = 19;
  if (_has_bit(18)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(19, this->dcdroidsinuse(), target);
  }
  
  // optional int32 damageProtectionTimeLeft = 20;
  if (_has_bit(19)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(20, this->damageprotectiontimeleft(), target);
  }
  
  // optional int32 damageProtectionTimeTotal = 21;
  if (_has_bit(20)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(21, this->damageprotectiontimetotal(), target);
  }
  
  // optional bool tutorialCompleted = 22;
  if (_has_bit(21)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(22, this->tutorialcompleted(), target);
  }
  
  // optional string flags = 23;
  if (_has_bit(22)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->flags().data(), this->flags().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        23, this->flags(), target);
  }
  
  // optional .MsgMissionState Missions = 24;
  if (_has_bit(23)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        24, this->missions(), target);
  }
  
  // repeated .MsgPlanet Planets = 25;
  for (int i = 0; i < this->planets_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        25, this->planets(i), target);
  }
  
  // repeated .MsgBuildingItem Items = 26;
  for (int i = 0; i < this->items_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        26, this->items(i), target);
  }
  
  // repeated .MsgShipyard Shipyards = 27;
  for (int i = 0; i < this->shipyards_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        27, this->shipyards(i), target);
  }
  
  // repeated .MsgHangars Hangars = 28;
  for (int i = 0; i < this->hangars_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        28, this->hangars(i), target);
  }
  
  // repeated .MsgBunker Bunkers = 29;
  for (int i = 0; i < this->bunkers_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        29, this->bunkers(i), target);
  }
  
  // repeated .MsgGameUnit GameUnits = 30;
  for (int i = 0; i < this->gameunits_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        30, this->gameunits(i), target);
  }
  
  // optional string npc = 31;
  if (_has_bit(30)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->npc().data(), this->npc().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        31, this->npc(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RseObtainUniverse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bool vip = 1;
    if (has_vip()) {
      total_size += 1 + 1;
    }
    
    // optional bool yearVip = 2;
    if (has_yearvip()) {
      total_size += 1 + 1;
    }
    
    // optional int32 vipLevel = 3;
    if (has_viplevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->viplevel());
    }
    
    // optional bool newPlayerGiftBag = 4;
    if (has_newplayergiftbag()) {
      total_size += 1 + 1;
    }
    
    // optional bool everydayGiftBag = 5;
    if (has_everydaygiftbag()) {
      total_size += 1 + 1;
    }
    
    // optional int32 spyCapsulesTimeLeft = 6;
    if (has_spycapsulestimeleft()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->spycapsulestimeleft());
    }
    
    // optional string DCPlayerName = 7;
    if (has_dcplayername()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->dcplayername());
    }
    
    // optional string DCWorldName = 8;
    if (has_dcworldname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->dcworldname());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 levelBasedOnScore = 9;
    if (has_levelbasedonscore()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->levelbasedonscore());
    }
    
    // optional int32 DCPlayerRank = 10;
    if (has_dcplayerrank()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->dcplayerrank());
    }
    
    // optional int32 DCCoins = 11;
    if (has_dccoins()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->dccoins());
    }
    
    // optional int32 DCMinerals = 12;
    if (has_dcminerals()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->dcminerals());
    }
    
    // optional int32 score = 13;
    if (has_score()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->score());
    }
    
    // optional int32 exp = 14;
    if (has_exp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->exp());
    }
    
    // optional int32 lastVisitTime = 15;
    if (has_lastvisittime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->lastvisittime());
    }
    
    // optional int32 lastLevelNotified = 16;
    if (has_lastlevelnotified()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->lastlevelnotified());
    }
    
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional int32 DCCash = 17;
    if (has_dccash()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->dccash());
    }
    
    // optional int32 DCDroids = 18;
    if (has_dcdroids()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->dcdroids());
    }
    
    // optional int32 DCDroidsInUse = 19;
    if (has_dcdroidsinuse()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->dcdroidsinuse());
    }
    
    // optional int32 damageProtectionTimeLeft = 20;
    if (has_damageprotectiontimeleft()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->damageprotectiontimeleft());
    }
    
    // optional int32 damageProtectionTimeTotal = 21;
    if (has_damageprotectiontimetotal()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->damageprotectiontimetotal());
    }
    
    // optional bool tutorialCompleted = 22;
    if (has_tutorialcompleted()) {
      total_size += 2 + 1;
    }
    
    // optional string flags = 23;
    if (has_flags()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->flags());
    }
    
    // optional .MsgMissionState Missions = 24;
    if (has_missions()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->missions());
    }
    
  }
  if (_has_bits_[30 / 32] & (0xffu << (30 % 32))) {
    // optional string npc = 31;
    if (has_npc()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->npc());
    }
    
  }
  // repeated .MsgPlanet Planets = 25;
  total_size += 2 * this->planets_size();
  for (int i = 0; i < this->planets_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->planets(i));
  }
  
  // repeated .MsgBuildingItem Items = 26;
  total_size += 2 * this->items_size();
  for (int i = 0; i < this->items_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->items(i));
  }
  
  // repeated .MsgShipyard Shipyards = 27;
  total_size += 2 * this->shipyards_size();
  for (int i = 0; i < this->shipyards_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->shipyards(i));
  }
  
  // repeated .MsgHangars Hangars = 28;
  total_size += 2 * this->hangars_size();
  for (int i = 0; i < this->hangars_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->hangars(i));
  }
  
  // repeated .MsgBunker Bunkers = 29;
  total_size += 2 * this->bunkers_size();
  for (int i = 0; i < this->bunkers_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->bunkers(i));
  }
  
  // repeated .MsgGameUnit GameUnits = 30;
  total_size += 2 * this->gameunits_size();
  for (int i = 0; i < this->gameunits_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->gameunits(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void RseObtainUniverse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RseObtainUniverse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RseObtainUniverse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RseObtainUniverse::MergeFrom(const RseObtainUniverse& from) {
  GOOGLE_CHECK_NE(&from, this);
  planets_.MergeFrom(from.planets_);
  items_.MergeFrom(from.items_);
  shipyards_.MergeFrom(from.shipyards_);
  hangars_.MergeFrom(from.hangars_);
  bunkers_.MergeFrom(from.bunkers_);
  gameunits_.MergeFrom(from.gameunits_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_vip(from.vip());
    }
    if (from._has_bit(1)) {
      set_yearvip(from.yearvip());
    }
    if (from._has_bit(2)) {
      set_viplevel(from.viplevel());
    }
    if (from._has_bit(3)) {
      set_newplayergiftbag(from.newplayergiftbag());
    }
    if (from._has_bit(4)) {
      set_everydaygiftbag(from.everydaygiftbag());
    }
    if (from._has_bit(5)) {
      set_spycapsulestimeleft(from.spycapsulestimeleft());
    }
    if (from._has_bit(6)) {
      set_dcplayername(from.dcplayername());
    }
    if (from._has_bit(7)) {
      set_dcworldname(from.dcworldname());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from._has_bit(8)) {
      set_levelbasedonscore(from.levelbasedonscore());
    }
    if (from._has_bit(9)) {
      set_dcplayerrank(from.dcplayerrank());
    }
    if (from._has_bit(10)) {
      set_dccoins(from.dccoins());
    }
    if (from._has_bit(11)) {
      set_dcminerals(from.dcminerals());
    }
    if (from._has_bit(12)) {
      set_score(from.score());
    }
    if (from._has_bit(13)) {
      set_exp(from.exp());
    }
    if (from._has_bit(14)) {
      set_lastvisittime(from.lastvisittime());
    }
    if (from._has_bit(15)) {
      set_lastlevelnotified(from.lastlevelnotified());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from._has_bit(16)) {
      set_dccash(from.dccash());
    }
    if (from._has_bit(17)) {
      set_dcdroids(from.dcdroids());
    }
    if (from._has_bit(18)) {
      set_dcdroidsinuse(from.dcdroidsinuse());
    }
    if (from._has_bit(19)) {
      set_damageprotectiontimeleft(from.damageprotectiontimeleft());
    }
    if (from._has_bit(20)) {
      set_damageprotectiontimetotal(from.damageprotectiontimetotal());
    }
    if (from._has_bit(21)) {
      set_tutorialcompleted(from.tutorialcompleted());
    }
    if (from._has_bit(22)) {
      set_flags(from.flags());
    }
    if (from._has_bit(23)) {
      mutable_missions()->::MsgMissionState::MergeFrom(from.missions());
    }
  }
  if (from._has_bits_[30 / 32] & (0xffu << (30 % 32))) {
    if (from._has_bit(30)) {
      set_npc(from.npc());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RseObtainUniverse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RseObtainUniverse::CopyFrom(const RseObtainUniverse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RseObtainUniverse::IsInitialized() const {
  
  return true;
}

void RseObtainUniverse::Swap(RseObtainUniverse* other) {
  if (other != this) {
    std::swap(vip_, other->vip_);
    std::swap(yearvip_, other->yearvip_);
    std::swap(viplevel_, other->viplevel_);
    std::swap(newplayergiftbag_, other->newplayergiftbag_);
    std::swap(everydaygiftbag_, other->everydaygiftbag_);
    std::swap(spycapsulestimeleft_, other->spycapsulestimeleft_);
    std::swap(dcplayername_, other->dcplayername_);
    std::swap(dcworldname_, other->dcworldname_);
    std::swap(levelbasedonscore_, other->levelbasedonscore_);
    std::swap(dcplayerrank_, other->dcplayerrank_);
    std::swap(dccoins_, other->dccoins_);
    std::swap(dcminerals_, other->dcminerals_);
    std::swap(score_, other->score_);
    std::swap(exp_, other->exp_);
    std::swap(lastvisittime_, other->lastvisittime_);
    std::swap(lastlevelnotified_, other->lastlevelnotified_);
    std::swap(dccash_, other->dccash_);
    std::swap(dcdroids_, other->dcdroids_);
    std::swap(dcdroidsinuse_, other->dcdroidsinuse_);
    std::swap(damageprotectiontimeleft_, other->damageprotectiontimeleft_);
    std::swap(damageprotectiontimetotal_, other->damageprotectiontimetotal_);
    std::swap(tutorialcompleted_, other->tutorialcompleted_);
    std::swap(flags_, other->flags_);
    std::swap(missions_, other->missions_);
    planets_.Swap(&other->planets_);
    items_.Swap(&other->items_);
    shipyards_.Swap(&other->shipyards_);
    hangars_.Swap(&other->hangars_);
    bunkers_.Swap(&other->bunkers_);
    gameunits_.Swap(&other->gameunits_);
    std::swap(npc_, other->npc_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RseObtainUniverse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RseObtainUniverse_descriptor_;
  metadata.reflection = RseObtainUniverse_reflection_;
  return metadata;
}

