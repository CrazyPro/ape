// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "event.pb.h"
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>

namespace {

const ::google::protobuf::Descriptor* Forward_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Forward_reflection_ = NULL;
const ::google::protobuf::Descriptor* WorkingStatusData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  WorkingStatusData_reflection_ = NULL;
const ::google::protobuf::Descriptor* UserLeave_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UserLeave_reflection_ = NULL;
const ::google::protobuf::Descriptor* UserAuthData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UserAuthData_reflection_ = NULL;
const ::google::protobuf::Descriptor* Event_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Event_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_event_2eproto() {
  protobuf_AddDesc_event_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "event.proto");
  GOOGLE_CHECK(file != NULL);
  Forward_descriptor_ = file->message_type(0);
  static const int Forward_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Forward, serveridfrom_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Forward, serveridto_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Forward, serverfdfrom_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Forward, serverfdto_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Forward, worldfd_),
  };
  Forward_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Forward_descriptor_,
      Forward::default_instance_,
      Forward_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Forward, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Forward, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Forward));
  WorkingStatusData_descriptor_ = file->message_type(1);
  static const int WorkingStatusData_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorkingStatusData, gid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorkingStatusData, finish_),
  };
  WorkingStatusData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      WorkingStatusData_descriptor_,
      WorkingStatusData::default_instance_,
      WorkingStatusData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorkingStatusData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorkingStatusData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(WorkingStatusData));
  UserLeave_descriptor_ = file->message_type(2);
  static const int UserLeave_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserLeave, fd_),
  };
  UserLeave_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UserLeave_descriptor_,
      UserLeave::default_instance_,
      UserLeave_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserLeave, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserLeave, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UserLeave));
  UserAuthData_descriptor_ = file->message_type(3);
  static const int UserAuthData_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserAuthData, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserAuthData, secret_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserAuthData, sockfd_),
  };
  UserAuthData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UserAuthData_descriptor_,
      UserAuthData::default_instance_,
      UserAuthData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserAuthData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserAuthData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UserAuthData));
  Event_descriptor_ = file->message_type(4);
  static const int Event_offsets_[11] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Event, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Event, state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Event, time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Event, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Event, forward_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Event, content_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Event, workingstatus_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Event, userauthdata_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Event, userleave_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Event, se_rsebroadcast_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Event, se_rseauthstate_),
  };
  Event_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Event_descriptor_,
      Event::default_instance_,
      Event_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Event, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Event, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Event));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_event_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Forward_descriptor_, &Forward::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    WorkingStatusData_descriptor_, &WorkingStatusData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UserLeave_descriptor_, &UserLeave::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UserAuthData_descriptor_, &UserAuthData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Event_descriptor_, &Event::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_event_2eproto() {
  delete Forward::default_instance_;
  delete Forward_reflection_;
  delete WorkingStatusData::default_instance_;
  delete WorkingStatusData_reflection_;
  delete UserLeave::default_instance_;
  delete UserLeave_reflection_;
  delete UserAuthData::default_instance_;
  delete UserAuthData_reflection_;
  delete Event::default_instance_;
  delete Event_reflection_;
}

void protobuf_AddDesc_event_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::protobuf_AddDesc_RseAuthState_2eproto();
  ::protobuf_AddDesc_RseBroadcast_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\013event.proto\032\022RseAuthState.proto\032\022RseBr"
    "oadcast.proto\"n\n\007Forward\022\024\n\014serveridFrom"
    "\030\001 \001(\005\022\022\n\nserveridTo\030\002 \001(\005\022\024\n\014serverfdFr"
    "om\030\003 \001(\005\022\022\n\nserverfdTo\030\004 \001(\005\022\017\n\007worldfd\030"
    "\005 \001(\005\"0\n\021WorkingStatusData\022\013\n\003gid\030\001 \002(\005\022"
    "\016\n\006finish\030\002 \002(\010\"\027\n\tUserLeave\022\n\n\002fd\030\001 \002(\005"
    "\";\n\014UserAuthData\022\013\n\003uid\030\001 \002(\003\022\016\n\006secret\030"
    "\002 \002(\003\022\016\n\006sockfd\030\003 \002(\005\"\253\002\n\005Event\022\013\n\003cmd\030\001"
    " \002(\005\022\r\n\005state\030\002 \002(\005\022\014\n\004time\030\003 \002(\003\022\013\n\003uid"
    "\030\004 \001(\003\022\031\n\007forward\030\005 \001(\0132\010.Forward\022\017\n\007con"
    "tent\030\006 \001(\t\022)\n\rworkingStatus\030@ \001(\0132\022.Work"
    "ingStatusData\022#\n\014userAuthData\030A \001(\0132\r.Us"
    "erAuthData\022\035\n\tuserleave\030D \001(\0132\n.UserLeav"
    "e\022\'\n\017se_RseBroadcast\030\300\001 \001(\0132\r.RseBroadca"
    "st\022\'\n\017se_RseAuthState\030\301\001 \001(\0132\r.RseAuthSt"
    "ate", 603);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "event.proto", &protobuf_RegisterTypes);
  Forward::default_instance_ = new Forward();
  WorkingStatusData::default_instance_ = new WorkingStatusData();
  UserLeave::default_instance_ = new UserLeave();
  UserAuthData::default_instance_ = new UserAuthData();
  Event::default_instance_ = new Event();
  Forward::default_instance_->InitAsDefaultInstance();
  WorkingStatusData::default_instance_->InitAsDefaultInstance();
  UserLeave::default_instance_->InitAsDefaultInstance();
  UserAuthData::default_instance_->InitAsDefaultInstance();
  Event::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_event_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_event_2eproto {
  StaticDescriptorInitializer_event_2eproto() {
    protobuf_AddDesc_event_2eproto();
  }
} static_descriptor_initializer_event_2eproto_;


// ===================================================================

#ifndef _MSC_VER
const int Forward::kServeridFromFieldNumber;
const int Forward::kServeridToFieldNumber;
const int Forward::kServerfdFromFieldNumber;
const int Forward::kServerfdToFieldNumber;
const int Forward::kWorldfdFieldNumber;
#endif  // !_MSC_VER

Forward::Forward() {
  SharedCtor();
}

void Forward::InitAsDefaultInstance() {
}

Forward::Forward(const Forward& from) {
  SharedCtor();
  MergeFrom(from);
}

void Forward::SharedCtor() {
  _cached_size_ = 0;
  serveridfrom_ = 0;
  serveridto_ = 0;
  serverfdfrom_ = 0;
  serverfdto_ = 0;
  worldfd_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Forward::~Forward() {
  SharedDtor();
}

void Forward::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* Forward::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Forward_descriptor_;
}

const Forward& Forward::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_event_2eproto();  return *default_instance_;
}

Forward* Forward::default_instance_ = NULL;

Forward* Forward::New() const {
  return new Forward;
}

void Forward::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    serveridfrom_ = 0;
    serveridto_ = 0;
    serverfdfrom_ = 0;
    serverfdto_ = 0;
    worldfd_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Forward::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 serveridFrom = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &serveridfrom_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_serveridTo;
        break;
      }
      
      // optional int32 serveridTo = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_serveridTo:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &serveridto_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_serverfdFrom;
        break;
      }
      
      // optional int32 serverfdFrom = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_serverfdFrom:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &serverfdfrom_));
        _set_bit(2);
        if (input->ExpectTag(32)) goto parse_serverfdTo;
        break;
      }
      
      // optional int32 serverfdTo = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_serverfdTo:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &serverfdto_));
        _set_bit(3);
        if (input->ExpectTag(40)) goto parse_worldfd;
        break;
      }
      
      // optional int32 worldfd = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_worldfd:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &worldfd_));
        _set_bit(4);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Forward::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    Forward::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional int32 serveridFrom = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->serveridfrom(), output);
  }
  
  // optional int32 serveridTo = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->serveridto(), output);
  }
  
  // optional int32 serverfdFrom = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->serverfdfrom(), output);
  }
  
  // optional int32 serverfdTo = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->serverfdto(), output);
  }
  
  // optional int32 worldfd = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->worldfd(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Forward::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 serveridFrom = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->serveridfrom(), target);
  }
  
  // optional int32 serveridTo = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->serveridto(), target);
  }
  
  // optional int32 serverfdFrom = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->serverfdfrom(), target);
  }
  
  // optional int32 serverfdTo = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->serverfdto(), target);
  }
  
  // optional int32 worldfd = 5;
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->worldfd(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Forward::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 serveridFrom = 1;
    if (has_serveridfrom()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->serveridfrom());
    }
    
    // optional int32 serveridTo = 2;
    if (has_serveridto()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->serveridto());
    }
    
    // optional int32 serverfdFrom = 3;
    if (has_serverfdfrom()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->serverfdfrom());
    }
    
    // optional int32 serverfdTo = 4;
    if (has_serverfdto()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->serverfdto());
    }
    
    // optional int32 worldfd = 5;
    if (has_worldfd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->worldfd());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void Forward::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Forward* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Forward*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Forward::MergeFrom(const Forward& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_serveridfrom(from.serveridfrom());
    }
    if (from._has_bit(1)) {
      set_serveridto(from.serveridto());
    }
    if (from._has_bit(2)) {
      set_serverfdfrom(from.serverfdfrom());
    }
    if (from._has_bit(3)) {
      set_serverfdto(from.serverfdto());
    }
    if (from._has_bit(4)) {
      set_worldfd(from.worldfd());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Forward::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Forward::CopyFrom(const Forward& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Forward::IsInitialized() const {
  
  return true;
}

void Forward::Swap(Forward* other) {
  if (other != this) {
    std::swap(serveridfrom_, other->serveridfrom_);
    std::swap(serveridto_, other->serveridto_);
    std::swap(serverfdfrom_, other->serverfdfrom_);
    std::swap(serverfdto_, other->serverfdto_);
    std::swap(worldfd_, other->worldfd_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Forward::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Forward_descriptor_;
  metadata.reflection = Forward_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int WorkingStatusData::kGidFieldNumber;
const int WorkingStatusData::kFinishFieldNumber;
#endif  // !_MSC_VER

WorkingStatusData::WorkingStatusData() {
  SharedCtor();
}

void WorkingStatusData::InitAsDefaultInstance() {
}

WorkingStatusData::WorkingStatusData(const WorkingStatusData& from) {
  SharedCtor();
  MergeFrom(from);
}

void WorkingStatusData::SharedCtor() {
  _cached_size_ = 0;
  gid_ = 0;
  finish_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

WorkingStatusData::~WorkingStatusData() {
  SharedDtor();
}

void WorkingStatusData::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* WorkingStatusData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WorkingStatusData_descriptor_;
}

const WorkingStatusData& WorkingStatusData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_event_2eproto();  return *default_instance_;
}

WorkingStatusData* WorkingStatusData::default_instance_ = NULL;

WorkingStatusData* WorkingStatusData::New() const {
  return new WorkingStatusData;
}

void WorkingStatusData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    gid_ = 0;
    finish_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool WorkingStatusData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 gid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &gid_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_finish;
        break;
      }
      
      // required bool finish = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_finish:
        DO_(::google::protobuf::internal::WireFormatLite::ReadBool(
              input, &finish_));
        _set_bit(1);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void WorkingStatusData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    WorkingStatusData::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // required int32 gid = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->gid(), output);
  }
  
  // required bool finish = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->finish(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* WorkingStatusData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 gid = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->gid(), target);
  }
  
  // required bool finish = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->finish(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int WorkingStatusData::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 gid = 1;
    if (has_gid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gid());
    }
    
    // required bool finish = 2;
    if (has_finish()) {
      total_size += 1 + 1;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void WorkingStatusData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const WorkingStatusData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const WorkingStatusData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void WorkingStatusData::MergeFrom(const WorkingStatusData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_gid(from.gid());
    }
    if (from._has_bit(1)) {
      set_finish(from.finish());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void WorkingStatusData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WorkingStatusData::CopyFrom(const WorkingStatusData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WorkingStatusData::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void WorkingStatusData::Swap(WorkingStatusData* other) {
  if (other != this) {
    std::swap(gid_, other->gid_);
    std::swap(finish_, other->finish_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata WorkingStatusData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = WorkingStatusData_descriptor_;
  metadata.reflection = WorkingStatusData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UserLeave::kFdFieldNumber;
#endif  // !_MSC_VER

UserLeave::UserLeave() {
  SharedCtor();
}

void UserLeave::InitAsDefaultInstance() {
}

UserLeave::UserLeave(const UserLeave& from) {
  SharedCtor();
  MergeFrom(from);
}

void UserLeave::SharedCtor() {
  _cached_size_ = 0;
  fd_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UserLeave::~UserLeave() {
  SharedDtor();
}

void UserLeave::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* UserLeave::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UserLeave_descriptor_;
}

const UserLeave& UserLeave::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_event_2eproto();  return *default_instance_;
}

UserLeave* UserLeave::default_instance_ = NULL;

UserLeave* UserLeave::New() const {
  return new UserLeave;
}

void UserLeave::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    fd_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UserLeave::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 fd = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &fd_));
        _set_bit(0);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void UserLeave::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    UserLeave::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // required int32 fd = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->fd(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* UserLeave::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 fd = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->fd(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int UserLeave::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 fd = 1;
    if (has_fd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->fd());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void UserLeave::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UserLeave* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UserLeave*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UserLeave::MergeFrom(const UserLeave& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_fd(from.fd());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UserLeave::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserLeave::CopyFrom(const UserLeave& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserLeave::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void UserLeave::Swap(UserLeave* other) {
  if (other != this) {
    std::swap(fd_, other->fd_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UserLeave::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UserLeave_descriptor_;
  metadata.reflection = UserLeave_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UserAuthData::kUidFieldNumber;
const int UserAuthData::kSecretFieldNumber;
const int UserAuthData::kSockfdFieldNumber;
#endif  // !_MSC_VER

UserAuthData::UserAuthData() {
  SharedCtor();
}

void UserAuthData::InitAsDefaultInstance() {
}

UserAuthData::UserAuthData(const UserAuthData& from) {
  SharedCtor();
  MergeFrom(from);
}

void UserAuthData::SharedCtor() {
  _cached_size_ = 0;
  uid_ = GOOGLE_LONGLONG(0);
  secret_ = GOOGLE_LONGLONG(0);
  sockfd_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UserAuthData::~UserAuthData() {
  SharedDtor();
}

void UserAuthData::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* UserAuthData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UserAuthData_descriptor_;
}

const UserAuthData& UserAuthData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_event_2eproto();  return *default_instance_;
}

UserAuthData* UserAuthData::default_instance_ = NULL;

UserAuthData* UserAuthData::New() const {
  return new UserAuthData;
}

void UserAuthData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    uid_ = GOOGLE_LONGLONG(0);
    secret_ = GOOGLE_LONGLONG(0);
    sockfd_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UserAuthData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 uid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt64(
              input, &uid_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_secret;
        break;
      }
      
      // required int64 secret = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_secret:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt64(
              input, &secret_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_sockfd;
        break;
      }
      
      // required int32 sockfd = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_sockfd:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &sockfd_));
        _set_bit(2);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void UserAuthData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    UserAuthData::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // required int64 uid = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->uid(), output);
  }
  
  // required int64 secret = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->secret(), output);
  }
  
  // required int32 sockfd = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->sockfd(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* UserAuthData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 uid = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->uid(), target);
  }
  
  // required int64 secret = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->secret(), target);
  }
  
  // required int32 sockfd = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->sockfd(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int UserAuthData::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 uid = 1;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->uid());
    }
    
    // required int64 secret = 2;
    if (has_secret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->secret());
    }
    
    // required int32 sockfd = 3;
    if (has_sockfd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sockfd());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void UserAuthData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UserAuthData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UserAuthData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UserAuthData::MergeFrom(const UserAuthData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_uid(from.uid());
    }
    if (from._has_bit(1)) {
      set_secret(from.secret());
    }
    if (from._has_bit(2)) {
      set_sockfd(from.sockfd());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UserAuthData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserAuthData::CopyFrom(const UserAuthData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserAuthData::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  
  return true;
}

void UserAuthData::Swap(UserAuthData* other) {
  if (other != this) {
    std::swap(uid_, other->uid_);
    std::swap(secret_, other->secret_);
    std::swap(sockfd_, other->sockfd_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UserAuthData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UserAuthData_descriptor_;
  metadata.reflection = UserAuthData_reflection_;
  return metadata;
}


// ===================================================================

const ::std::string Event::_default_content_;
#ifndef _MSC_VER
const int Event::kCmdFieldNumber;
const int Event::kStateFieldNumber;
const int Event::kTimeFieldNumber;
const int Event::kUidFieldNumber;
const int Event::kForwardFieldNumber;
const int Event::kContentFieldNumber;
const int Event::kWorkingStatusFieldNumber;
const int Event::kUserAuthDataFieldNumber;
const int Event::kUserleaveFieldNumber;
const int Event::kSeRseBroadcastFieldNumber;
const int Event::kSeRseAuthStateFieldNumber;
#endif  // !_MSC_VER

Event::Event() {
  SharedCtor();
}

void Event::InitAsDefaultInstance() {
  forward_ = const_cast< ::Forward*>(&::Forward::default_instance());
  workingstatus_ = const_cast< ::WorkingStatusData*>(&::WorkingStatusData::default_instance());
  userauthdata_ = const_cast< ::UserAuthData*>(&::UserAuthData::default_instance());
  userleave_ = const_cast< ::UserLeave*>(&::UserLeave::default_instance());
  se_rsebroadcast_ = const_cast< ::RseBroadcast*>(&::RseBroadcast::default_instance());
  se_rseauthstate_ = const_cast< ::RseAuthState*>(&::RseAuthState::default_instance());
}

Event::Event(const Event& from) {
  SharedCtor();
  MergeFrom(from);
}

void Event::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 0;
  state_ = 0;
  time_ = GOOGLE_LONGLONG(0);
  uid_ = GOOGLE_LONGLONG(0);
  forward_ = NULL;
  content_ = const_cast< ::std::string*>(&_default_content_);
  workingstatus_ = NULL;
  userauthdata_ = NULL;
  userleave_ = NULL;
  se_rsebroadcast_ = NULL;
  se_rseauthstate_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Event::~Event() {
  SharedDtor();
}

void Event::SharedDtor() {
  if (content_ != &_default_content_) {
    delete content_;
  }
  if (this != default_instance_) {
    delete forward_;
    delete workingstatus_;
    delete userauthdata_;
    delete userleave_;
    delete se_rsebroadcast_;
    delete se_rseauthstate_;
  }
}

const ::google::protobuf::Descriptor* Event::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Event_descriptor_;
}

const Event& Event::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_event_2eproto();  return *default_instance_;
}

Event* Event::default_instance_ = NULL;

Event* Event::New() const {
  return new Event;
}

void Event::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    cmd_ = 0;
    state_ = 0;
    time_ = GOOGLE_LONGLONG(0);
    uid_ = GOOGLE_LONGLONG(0);
    if (_has_bit(4)) {
      if (forward_ != NULL) forward_->::Forward::Clear();
    }
    if (_has_bit(5)) {
      if (content_ != &_default_content_) {
        content_->clear();
      }
    }
    if (_has_bit(6)) {
      if (workingstatus_ != NULL) workingstatus_->::WorkingStatusData::Clear();
    }
    if (_has_bit(7)) {
      if (userauthdata_ != NULL) userauthdata_->::UserAuthData::Clear();
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (_has_bit(8)) {
      if (userleave_ != NULL) userleave_->::UserLeave::Clear();
    }
    if (_has_bit(9)) {
      if (se_rsebroadcast_ != NULL) se_rsebroadcast_->::RseBroadcast::Clear();
    }
    if (_has_bit(10)) {
      if (se_rseauthstate_ != NULL) se_rseauthstate_->::RseAuthState::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Event::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 cmd = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &cmd_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_state;
        break;
      }
      
      // required int32 state = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_state:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &state_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_time;
        break;
      }
      
      // required int64 time = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_time:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt64(
              input, &time_));
        _set_bit(2);
        if (input->ExpectTag(32)) goto parse_uid;
        break;
      }
      
      // optional int64 uid = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_uid:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt64(
              input, &uid_));
        _set_bit(3);
        if (input->ExpectTag(42)) goto parse_forward;
        break;
      }
      
      // optional .Forward forward = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_forward:
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
             input, mutable_forward()));
        if (input->ExpectTag(50)) goto parse_content;
        break;
      }
      
      // optional string content = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_content:
        DO_(::google::protobuf::internal::WireFormatLite::ReadString(
              input, this->mutable_content()));
        ::google::protobuf::internal::WireFormat::VerifyUTF8String(
          this->content().data(), this->content().length(),
          ::google::protobuf::internal::WireFormat::PARSE);
        if (input->ExpectTag(514)) goto parse_workingStatus;
        break;
      }
      
      // optional .WorkingStatusData workingStatus = 64;
      case 64: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_workingStatus:
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
             input, mutable_workingstatus()));
        if (input->ExpectTag(522)) goto parse_userAuthData;
        break;
      }
      
      // optional .UserAuthData userAuthData = 65;
      case 65: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_userAuthData:
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
             input, mutable_userauthdata()));
        if (input->ExpectTag(546)) goto parse_userleave;
        break;
      }
      
      // optional .UserLeave userleave = 68;
      case 68: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_userleave:
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
             input, mutable_userleave()));
        if (input->ExpectTag(1538)) goto parse_se_RseBroadcast;
        break;
      }
      
      // optional .RseBroadcast se_RseBroadcast = 192;
      case 192: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_se_RseBroadcast:
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
             input, mutable_se_rsebroadcast()));
        if (input->ExpectTag(1546)) goto parse_se_RseAuthState;
        break;
      }
      
      // optional .RseAuthState se_RseAuthState = 193;
      case 193: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_se_RseAuthState:
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
             input, mutable_se_rseauthstate()));
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Event::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    Event::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // required int32 cmd = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->cmd(), output);
  }
  
  // required int32 state = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->state(), output);
  }
  
  // required int64 time = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->time(), output);
  }
  
  // optional int64 uid = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->uid(), output);
  }
  
  // optional .Forward forward = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      5, this->forward(), output);
  }
  
  // optional string content = 6;
  if (_has_bit(5)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->content().data(), this->content().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->content(), output);
  }
  
  // optional .WorkingStatusData workingStatus = 64;
  if (_has_bit(6)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      64, this->workingstatus(), output);
  }
  
  // optional .UserAuthData userAuthData = 65;
  if (_has_bit(7)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      65, this->userauthdata(), output);
  }
  
  // optional .UserLeave userleave = 68;
  if (_has_bit(8)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      68, this->userleave(), output);
  }
  
  // optional .RseBroadcast se_RseBroadcast = 192;
  if (_has_bit(9)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      192, this->se_rsebroadcast(), output);
  }
  
  // optional .RseAuthState se_RseAuthState = 193;
  if (_has_bit(10)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      193, this->se_rseauthstate(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Event::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 cmd = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->cmd(), target);
  }
  
  // required int32 state = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->state(), target);
  }
  
  // required int64 time = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->time(), target);
  }
  
  // optional int64 uid = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->uid(), target);
  }
  
  // optional .Forward forward = 5;
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->forward(), target);
  }
  
  // optional string content = 6;
  if (_has_bit(5)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->content().data(), this->content().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->content(), target);
  }
  
  // optional .WorkingStatusData workingStatus = 64;
  if (_has_bit(6)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        64, this->workingstatus(), target);
  }
  
  // optional .UserAuthData userAuthData = 65;
  if (_has_bit(7)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        65, this->userauthdata(), target);
  }
  
  // optional .UserLeave userleave = 68;
  if (_has_bit(8)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        68, this->userleave(), target);
  }
  
  // optional .RseBroadcast se_RseBroadcast = 192;
  if (_has_bit(9)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        192, this->se_rsebroadcast(), target);
  }
  
  // optional .RseAuthState se_RseAuthState = 193;
  if (_has_bit(10)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        193, this->se_rseauthstate(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Event::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 cmd = 1;
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cmd());
    }
    
    // required int32 state = 2;
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->state());
    }
    
    // required int64 time = 3;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->time());
    }
    
    // optional int64 uid = 4;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->uid());
    }
    
    // optional .Forward forward = 5;
    if (has_forward()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->forward());
    }
    
    // optional string content = 6;
    if (has_content()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->content());
    }
    
    // optional .WorkingStatusData workingStatus = 64;
    if (has_workingstatus()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->workingstatus());
    }
    
    // optional .UserAuthData userAuthData = 65;
    if (has_userauthdata()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->userauthdata());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional .UserLeave userleave = 68;
    if (has_userleave()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->userleave());
    }
    
    // optional .RseBroadcast se_RseBroadcast = 192;
    if (has_se_rsebroadcast()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->se_rsebroadcast());
    }
    
    // optional .RseAuthState se_RseAuthState = 193;
    if (has_se_rseauthstate()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->se_rseauthstate());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void Event::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Event* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Event*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Event::MergeFrom(const Event& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_cmd(from.cmd());
    }
    if (from._has_bit(1)) {
      set_state(from.state());
    }
    if (from._has_bit(2)) {
      set_time(from.time());
    }
    if (from._has_bit(3)) {
      set_uid(from.uid());
    }
    if (from._has_bit(4)) {
      mutable_forward()->::Forward::MergeFrom(from.forward());
    }
    if (from._has_bit(5)) {
      set_content(from.content());
    }
    if (from._has_bit(6)) {
      mutable_workingstatus()->::WorkingStatusData::MergeFrom(from.workingstatus());
    }
    if (from._has_bit(7)) {
      mutable_userauthdata()->::UserAuthData::MergeFrom(from.userauthdata());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from._has_bit(8)) {
      mutable_userleave()->::UserLeave::MergeFrom(from.userleave());
    }
    if (from._has_bit(9)) {
      mutable_se_rsebroadcast()->::RseBroadcast::MergeFrom(from.se_rsebroadcast());
    }
    if (from._has_bit(10)) {
      mutable_se_rseauthstate()->::RseAuthState::MergeFrom(from.se_rseauthstate());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Event::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Event::CopyFrom(const Event& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Event::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  
  if (has_workingstatus()) {
    if (!this->workingstatus().IsInitialized()) return false;
  }
  if (has_userauthdata()) {
    if (!this->userauthdata().IsInitialized()) return false;
  }
  if (has_userleave()) {
    if (!this->userleave().IsInitialized()) return false;
  }
  if (has_se_rseauthstate()) {
    if (!this->se_rseauthstate().IsInitialized()) return false;
  }
  return true;
}

void Event::Swap(Event* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(state_, other->state_);
    std::swap(time_, other->time_);
    std::swap(uid_, other->uid_);
    std::swap(forward_, other->forward_);
    std::swap(content_, other->content_);
    std::swap(workingstatus_, other->workingstatus_);
    std::swap(userauthdata_, other->userauthdata_);
    std::swap(userleave_, other->userleave_);
    std::swap(se_rsebroadcast_, other->se_rsebroadcast_);
    std::swap(se_rseauthstate_, other->se_rseauthstate_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Event::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Event_descriptor_;
  metadata.reflection = Event_reflection_;
  return metadata;
}

