// Generated by the protocol buffer compiler.  DO NOT EDIT!

#ifndef PROTOBUF_RseAuthState_2eproto__INCLUDED
#define PROTOBUF_RseAuthState_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2002000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2002000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_RseAuthState_2eproto();
void protobuf_AssignDesc_RseAuthState_2eproto();
void protobuf_ShutdownFile_RseAuthState_2eproto();

class RseAuthState;

// ===================================================================

class RseAuthState : public ::google::protobuf::Message {
 public:
  RseAuthState();
  virtual ~RseAuthState();
  
  RseAuthState(const RseAuthState& from);
  
  inline RseAuthState& operator=(const RseAuthState& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const RseAuthState& default_instance();
  void Swap(RseAuthState* other);
  
  // implements Message ----------------------------------------------
  
  RseAuthState* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RseAuthState& from);
  void MergeFrom(const RseAuthState& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const { _cached_size_ = size; }
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required bool pass = 1;
  inline bool has_pass() const;
  inline void clear_pass();
  static const int kPassFieldNumber = 1;
  inline bool pass() const;
  inline void set_pass(bool value);
  
  // required int32 type = 2;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 2;
  inline ::google::protobuf::int32 type() const;
  inline void set_type(::google::protobuf::int32 value);
  
  // required int32 leftMin = 3;
  inline bool has_leftmin() const;
  inline void clear_leftmin();
  static const int kLeftMinFieldNumber = 3;
  inline ::google::protobuf::int32 leftmin() const;
  inline void set_leftmin(::google::protobuf::int32 value);
  
  // required int32 time = 4;
  inline bool has_time() const;
  inline void clear_time();
  static const int kTimeFieldNumber = 4;
  inline ::google::protobuf::int32 time() const;
  inline void set_time(::google::protobuf::int32 value);
  
  // required int32 zone = 5;
  inline bool has_zone() const;
  inline void clear_zone();
  static const int kZoneFieldNumber = 5;
  inline ::google::protobuf::int32 zone() const;
  inline void set_zone(::google::protobuf::int32 value);
  
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  bool pass_;
  ::google::protobuf::int32 type_;
  ::google::protobuf::int32 leftmin_;
  ::google::protobuf::int32 time_;
  ::google::protobuf::int32 zone_;
  friend void  protobuf_AddDesc_RseAuthState_2eproto();
  friend void protobuf_AssignDesc_RseAuthState_2eproto();
  friend void protobuf_ShutdownFile_RseAuthState_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static RseAuthState* default_instance_;
};
// ===================================================================


// ===================================================================


// ===================================================================

// RseAuthState

// required bool pass = 1;
inline bool RseAuthState::has_pass() const {
  return _has_bit(0);
}
inline void RseAuthState::clear_pass() {
  pass_ = false;
  _clear_bit(0);
}
inline bool RseAuthState::pass() const {
  return pass_;
}
inline void RseAuthState::set_pass(bool value) {
  _set_bit(0);
  pass_ = value;
}

// required int32 type = 2;
inline bool RseAuthState::has_type() const {
  return _has_bit(1);
}
inline void RseAuthState::clear_type() {
  type_ = 0;
  _clear_bit(1);
}
inline ::google::protobuf::int32 RseAuthState::type() const {
  return type_;
}
inline void RseAuthState::set_type(::google::protobuf::int32 value) {
  _set_bit(1);
  type_ = value;
}

// required int32 leftMin = 3;
inline bool RseAuthState::has_leftmin() const {
  return _has_bit(2);
}
inline void RseAuthState::clear_leftmin() {
  leftmin_ = 0;
  _clear_bit(2);
}
inline ::google::protobuf::int32 RseAuthState::leftmin() const {
  return leftmin_;
}
inline void RseAuthState::set_leftmin(::google::protobuf::int32 value) {
  _set_bit(2);
  leftmin_ = value;
}

// required int32 time = 4;
inline bool RseAuthState::has_time() const {
  return _has_bit(3);
}
inline void RseAuthState::clear_time() {
  time_ = 0;
  _clear_bit(3);
}
inline ::google::protobuf::int32 RseAuthState::time() const {
  return time_;
}
inline void RseAuthState::set_time(::google::protobuf::int32 value) {
  _set_bit(3);
  time_ = value;
}

// required int32 zone = 5;
inline bool RseAuthState::has_zone() const {
  return _has_bit(4);
}
inline void RseAuthState::clear_zone() {
  zone_ = 0;
  _clear_bit(4);
}
inline ::google::protobuf::int32 RseAuthState::zone() const {
  return zone_;
}
inline void RseAuthState::set_zone(::google::protobuf::int32 value) {
  _set_bit(4);
  zone_ = value;
}


#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

#endif  // PROTOBUF_RseAuthState_2eproto__INCLUDED
