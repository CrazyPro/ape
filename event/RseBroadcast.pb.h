// Generated by the protocol buffer compiler.  DO NOT EDIT!

#ifndef PROTOBUF_RseBroadcast_2eproto__INCLUDED
#define PROTOBUF_RseBroadcast_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2002000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2002000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_RseBroadcast_2eproto();
void protobuf_AssignDesc_RseBroadcast_2eproto();
void protobuf_ShutdownFile_RseBroadcast_2eproto();

class RseBroadcast;

// ===================================================================

class RseBroadcast : public ::google::protobuf::Message {
 public:
  RseBroadcast();
  virtual ~RseBroadcast();
  
  RseBroadcast(const RseBroadcast& from);
  
  inline RseBroadcast& operator=(const RseBroadcast& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const RseBroadcast& default_instance();
  void Swap(RseBroadcast* other);
  
  // implements Message ----------------------------------------------
  
  RseBroadcast* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RseBroadcast& from);
  void MergeFrom(const RseBroadcast& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const { _cached_size_ = size; }
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional string content = 1;
  inline bool has_content() const;
  inline void clear_content();
  static const int kContentFieldNumber = 1;
  inline const ::std::string& content() const;
  inline void set_content(const ::std::string& value);
  inline void set_content(const char* value);
  inline void set_content(const char* value, size_t size);
  inline ::std::string* mutable_content();
  
  // optional int32 type = 2;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 2;
  inline ::google::protobuf::int32 type() const;
  inline void set_type(::google::protobuf::int32 value);
  
  // optional int32 id = 3;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 3;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);
  
  // repeated string param = 4;
  inline int param_size() const;
  inline void clear_param();
  static const int kParamFieldNumber = 4;
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& param() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_param();
  inline const ::std::string& param(int index) const;
  inline ::std::string* mutable_param(int index);
  inline void set_param(int index, const ::std::string& value);
  inline void set_param(int index, const char* value);
  inline void set_param(int index, const char* value, size_t size);
  inline ::std::string* add_param();
  inline void add_param(const ::std::string& value);
  inline void add_param(const char* value);
  inline void add_param(const char* value, size_t size);
  
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::std::string* content_;
  static const ::std::string _default_content_;
  ::google::protobuf::int32 type_;
  ::google::protobuf::int32 id_;
  ::google::protobuf::RepeatedPtrField< ::std::string> param_;
  friend void  protobuf_AddDesc_RseBroadcast_2eproto();
  friend void protobuf_AssignDesc_RseBroadcast_2eproto();
  friend void protobuf_ShutdownFile_RseBroadcast_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static RseBroadcast* default_instance_;
};
// ===================================================================


// ===================================================================


// ===================================================================

// RseBroadcast

// optional string content = 1;
inline bool RseBroadcast::has_content() const {
  return _has_bit(0);
}
inline void RseBroadcast::clear_content() {
  if (content_ != &_default_content_) {
    content_->clear();
  }
  _clear_bit(0);
}
inline const ::std::string& RseBroadcast::content() const {
  return *content_;
}
inline void RseBroadcast::set_content(const ::std::string& value) {
  _set_bit(0);
  if (content_ == &_default_content_) {
    content_ = new ::std::string;
  }
  content_->assign(value);
}
inline void RseBroadcast::set_content(const char* value) {
  _set_bit(0);
  if (content_ == &_default_content_) {
    content_ = new ::std::string;
  }
  content_->assign(value);
}
inline void RseBroadcast::set_content(const char* value, size_t size) {
  _set_bit(0);
  if (content_ == &_default_content_) {
    content_ = new ::std::string;
  }
  content_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RseBroadcast::mutable_content() {
  _set_bit(0);
  if (content_ == &_default_content_) {
    content_ = new ::std::string;
  }
  return content_;
}

// optional int32 type = 2;
inline bool RseBroadcast::has_type() const {
  return _has_bit(1);
}
inline void RseBroadcast::clear_type() {
  type_ = 0;
  _clear_bit(1);
}
inline ::google::protobuf::int32 RseBroadcast::type() const {
  return type_;
}
inline void RseBroadcast::set_type(::google::protobuf::int32 value) {
  _set_bit(1);
  type_ = value;
}

// optional int32 id = 3;
inline bool RseBroadcast::has_id() const {
  return _has_bit(2);
}
inline void RseBroadcast::clear_id() {
  id_ = 0;
  _clear_bit(2);
}
inline ::google::protobuf::int32 RseBroadcast::id() const {
  return id_;
}
inline void RseBroadcast::set_id(::google::protobuf::int32 value) {
  _set_bit(2);
  id_ = value;
}

// repeated string param = 4;
inline int RseBroadcast::param_size() const {
  return param_.size();
}
inline void RseBroadcast::clear_param() {
  param_.Clear();
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
RseBroadcast::param() const {
  return param_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
RseBroadcast::mutable_param() {
  return &param_;
}
inline const ::std::string& RseBroadcast::param(int index) const {
  return param_.Get(index);
}
inline ::std::string* RseBroadcast::mutable_param(int index) {
  return param_.Mutable(index);
}
inline void RseBroadcast::set_param(int index, const ::std::string& value) {
  param_.Mutable(index)->assign(value);
}
inline void RseBroadcast::set_param(int index, const char* value) {
  param_.Mutable(index)->assign(value);
}
inline void RseBroadcast::set_param(int index, const char* value, size_t size) {
  param_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RseBroadcast::add_param() {
  return param_.Add();
}
inline void RseBroadcast::add_param(const ::std::string& value) {
  param_.Add()->assign(value);
}
inline void RseBroadcast::add_param(const char* value) {
  param_.Add()->assign(value);
}
inline void RseBroadcast::add_param(const char* value, size_t size) {
  param_.Add()->assign(reinterpret_cast<const char*>(value), size);
}


#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

#endif  // PROTOBUF_RseBroadcast_2eproto__INCLUDED
