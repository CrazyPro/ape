// Generated by the protocol buffer compiler.  DO NOT EDIT!

#ifndef PROTOBUF_RceQueryGalaxyWindow_2eproto__INCLUDED
#define PROTOBUF_RceQueryGalaxyWindow_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2002000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2002000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_RceQueryGalaxyWindow_2eproto();
void protobuf_AssignDesc_RceQueryGalaxyWindow_2eproto();
void protobuf_ShutdownFile_RceQueryGalaxyWindow_2eproto();

class RceQueryGalaxyWindow;

// ===================================================================

class RceQueryGalaxyWindow : public ::google::protobuf::Message {
 public:
  RceQueryGalaxyWindow();
  virtual ~RceQueryGalaxyWindow();
  
  RceQueryGalaxyWindow(const RceQueryGalaxyWindow& from);
  
  inline RceQueryGalaxyWindow& operator=(const RceQueryGalaxyWindow& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const RceQueryGalaxyWindow& default_instance();
  void Swap(RceQueryGalaxyWindow* other);
  
  // implements Message ----------------------------------------------
  
  RceQueryGalaxyWindow* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RceQueryGalaxyWindow& from);
  void MergeFrom(const RceQueryGalaxyWindow& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const { _cached_size_ = size; }
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional int32 topLeftCoordX = 1;
  inline bool has_topleftcoordx() const;
  inline void clear_topleftcoordx();
  static const int kTopLeftCoordXFieldNumber = 1;
  inline ::google::protobuf::int32 topleftcoordx() const;
  inline void set_topleftcoordx(::google::protobuf::int32 value);
  
  // optional int32 bottomRightCoordY = 2;
  inline bool has_bottomrightcoordy() const;
  inline void clear_bottomrightcoordy();
  static const int kBottomRightCoordYFieldNumber = 2;
  inline ::google::protobuf::int32 bottomrightcoordy() const;
  inline void set_bottomrightcoordy(::google::protobuf::int32 value);
  
  // optional string planetId = 3;
  inline bool has_planetid() const;
  inline void clear_planetid();
  static const int kPlanetIdFieldNumber = 3;
  inline const ::std::string& planetid() const;
  inline void set_planetid(const ::std::string& value);
  inline void set_planetid(const char* value);
  inline void set_planetid(const char* value, size_t size);
  inline ::std::string* mutable_planetid();
  
  // optional int32 topLeftCoordY = 4;
  inline bool has_topleftcoordy() const;
  inline void clear_topleftcoordy();
  static const int kTopLeftCoordYFieldNumber = 4;
  inline ::google::protobuf::int32 topleftcoordy() const;
  inline void set_topleftcoordy(::google::protobuf::int32 value);
  
  // optional int32 bottomRightCoordX = 5;
  inline bool has_bottomrightcoordx() const;
  inline void clear_bottomrightcoordx();
  static const int kBottomRightCoordXFieldNumber = 5;
  inline ::google::protobuf::int32 bottomrightcoordx() const;
  inline void set_bottomrightcoordx(::google::protobuf::int32 value);
  
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::google::protobuf::int32 topleftcoordx_;
  ::google::protobuf::int32 bottomrightcoordy_;
  ::std::string* planetid_;
  static const ::std::string _default_planetid_;
  ::google::protobuf::int32 topleftcoordy_;
  ::google::protobuf::int32 bottomrightcoordx_;
  friend void  protobuf_AddDesc_RceQueryGalaxyWindow_2eproto();
  friend void protobuf_AssignDesc_RceQueryGalaxyWindow_2eproto();
  friend void protobuf_ShutdownFile_RceQueryGalaxyWindow_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static RceQueryGalaxyWindow* default_instance_;
};
// ===================================================================


// ===================================================================


// ===================================================================

// RceQueryGalaxyWindow

// optional int32 topLeftCoordX = 1;
inline bool RceQueryGalaxyWindow::has_topleftcoordx() const {
  return _has_bit(0);
}
inline void RceQueryGalaxyWindow::clear_topleftcoordx() {
  topleftcoordx_ = 0;
  _clear_bit(0);
}
inline ::google::protobuf::int32 RceQueryGalaxyWindow::topleftcoordx() const {
  return topleftcoordx_;
}
inline void RceQueryGalaxyWindow::set_topleftcoordx(::google::protobuf::int32 value) {
  _set_bit(0);
  topleftcoordx_ = value;
}

// optional int32 bottomRightCoordY = 2;
inline bool RceQueryGalaxyWindow::has_bottomrightcoordy() const {
  return _has_bit(1);
}
inline void RceQueryGalaxyWindow::clear_bottomrightcoordy() {
  bottomrightcoordy_ = 0;
  _clear_bit(1);
}
inline ::google::protobuf::int32 RceQueryGalaxyWindow::bottomrightcoordy() const {
  return bottomrightcoordy_;
}
inline void RceQueryGalaxyWindow::set_bottomrightcoordy(::google::protobuf::int32 value) {
  _set_bit(1);
  bottomrightcoordy_ = value;
}

// optional string planetId = 3;
inline bool RceQueryGalaxyWindow::has_planetid() const {
  return _has_bit(2);
}
inline void RceQueryGalaxyWindow::clear_planetid() {
  if (planetid_ != &_default_planetid_) {
    planetid_->clear();
  }
  _clear_bit(2);
}
inline const ::std::string& RceQueryGalaxyWindow::planetid() const {
  return *planetid_;
}
inline void RceQueryGalaxyWindow::set_planetid(const ::std::string& value) {
  _set_bit(2);
  if (planetid_ == &_default_planetid_) {
    planetid_ = new ::std::string;
  }
  planetid_->assign(value);
}
inline void RceQueryGalaxyWindow::set_planetid(const char* value) {
  _set_bit(2);
  if (planetid_ == &_default_planetid_) {
    planetid_ = new ::std::string;
  }
  planetid_->assign(value);
}
inline void RceQueryGalaxyWindow::set_planetid(const char* value, size_t size) {
  _set_bit(2);
  if (planetid_ == &_default_planetid_) {
    planetid_ = new ::std::string;
  }
  planetid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RceQueryGalaxyWindow::mutable_planetid() {
  _set_bit(2);
  if (planetid_ == &_default_planetid_) {
    planetid_ = new ::std::string;
  }
  return planetid_;
}

// optional int32 topLeftCoordY = 4;
inline bool RceQueryGalaxyWindow::has_topleftcoordy() const {
  return _has_bit(3);
}
inline void RceQueryGalaxyWindow::clear_topleftcoordy() {
  topleftcoordy_ = 0;
  _clear_bit(3);
}
inline ::google::protobuf::int32 RceQueryGalaxyWindow::topleftcoordy() const {
  return topleftcoordy_;
}
inline void RceQueryGalaxyWindow::set_topleftcoordy(::google::protobuf::int32 value) {
  _set_bit(3);
  topleftcoordy_ = value;
}

// optional int32 bottomRightCoordX = 5;
inline bool RceQueryGalaxyWindow::has_bottomrightcoordx() const {
  return _has_bit(4);
}
inline void RceQueryGalaxyWindow::clear_bottomrightcoordx() {
  bottomrightcoordx_ = 0;
  _clear_bit(4);
}
inline ::google::protobuf::int32 RceQueryGalaxyWindow::bottomrightcoordx() const {
  return bottomrightcoordx_;
}
inline void RceQueryGalaxyWindow::set_bottomrightcoordx(::google::protobuf::int32 value) {
  _set_bit(4);
  bottomrightcoordx_ = value;
}


#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

#endif  // PROTOBUF_RceQueryGalaxyWindow_2eproto__INCLUDED
