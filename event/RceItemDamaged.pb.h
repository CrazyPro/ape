// Generated by the protocol buffer compiler.  DO NOT EDIT!

#ifndef PROTOBUF_RceItemDamaged_2eproto__INCLUDED
#define PROTOBUF_RceItemDamaged_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2002000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2002000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>
#include "MsgTransaction.pb.h"

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_RceItemDamaged_2eproto();
void protobuf_AssignDesc_RceItemDamaged_2eproto();
void protobuf_ShutdownFile_RceItemDamaged_2eproto();

class RceItemDamaged;

// ===================================================================

class RceItemDamaged : public ::google::protobuf::Message {
 public:
  RceItemDamaged();
  virtual ~RceItemDamaged();
  
  RceItemDamaged(const RceItemDamaged& from);
  
  inline RceItemDamaged& operator=(const RceItemDamaged& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const RceItemDamaged& default_instance();
  void Swap(RceItemDamaged* other);
  
  // implements Message ----------------------------------------------
  
  RceItemDamaged* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RceItemDamaged& from);
  void MergeFrom(const RceItemDamaged& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const { _cached_size_ = size; }
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional int32 planetId = 1;
  inline bool has_planetid() const;
  inline void clear_planetid();
  static const int kPlanetIdFieldNumber = 1;
  inline ::google::protobuf::int32 planetid() const;
  inline void set_planetid(::google::protobuf::int32 value);
  
  // optional int32 energyBeforeShot = 2;
  inline bool has_energybeforeshot() const;
  inline void clear_energybeforeshot();
  static const int kEnergyBeforeShotFieldNumber = 2;
  inline ::google::protobuf::int32 energybeforeshot() const;
  inline void set_energybeforeshot(::google::protobuf::int32 value);
  
  // optional .MsgTransaction transaction = 3;
  inline bool has_transaction() const;
  inline void clear_transaction();
  static const int kTransactionFieldNumber = 3;
  inline const ::MsgTransaction& transaction() const;
  inline ::MsgTransaction* mutable_transaction();
  
  // optional int32 destroyed = 4;
  inline bool has_destroyed() const;
  inline void clear_destroyed();
  static const int kDestroyedFieldNumber = 4;
  inline ::google::protobuf::int32 destroyed() const;
  inline void set_destroyed(::google::protobuf::int32 value);
  
  // optional int32 damage = 5;
  inline bool has_damage() const;
  inline void clear_damage();
  static const int kDamageFieldNumber = 5;
  inline ::google::protobuf::int32 damage() const;
  inline void set_damage(::google::protobuf::int32 value);
  
  // optional .MsgTransaction transactionTarget = 6;
  inline bool has_transactiontarget() const;
  inline void clear_transactiontarget();
  static const int kTransactionTargetFieldNumber = 6;
  inline const ::MsgTransaction& transactiontarget() const;
  inline ::MsgTransaction* mutable_transactiontarget();
  
  // repeated string attackers = 7;
  inline int attackers_size() const;
  inline void clear_attackers();
  static const int kAttackersFieldNumber = 7;
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& attackers() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_attackers();
  inline const ::std::string& attackers(int index) const;
  inline ::std::string* mutable_attackers(int index);
  inline void set_attackers(int index, const ::std::string& value);
  inline void set_attackers(int index, const char* value);
  inline void set_attackers(int index, const char* value, size_t size);
  inline ::std::string* add_attackers();
  inline void add_attackers(const ::std::string& value);
  inline void add_attackers(const char* value);
  inline void add_attackers(const char* value, size_t size);
  
  // optional int32 itemSid = 8;
  inline bool has_itemsid() const;
  inline void clear_itemsid();
  static const int kItemSidFieldNumber = 8;
  inline ::google::protobuf::int32 itemsid() const;
  inline void set_itemsid(::google::protobuf::int32 value);
  
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::google::protobuf::int32 planetid_;
  ::google::protobuf::int32 energybeforeshot_;
  ::MsgTransaction* transaction_;
  ::google::protobuf::int32 destroyed_;
  ::google::protobuf::int32 damage_;
  ::MsgTransaction* transactiontarget_;
  ::google::protobuf::RepeatedPtrField< ::std::string> attackers_;
  ::google::protobuf::int32 itemsid_;
  friend void  protobuf_AddDesc_RceItemDamaged_2eproto();
  friend void protobuf_AssignDesc_RceItemDamaged_2eproto();
  friend void protobuf_ShutdownFile_RceItemDamaged_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(8 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static RceItemDamaged* default_instance_;
};
// ===================================================================


// ===================================================================


// ===================================================================

// RceItemDamaged

// optional int32 planetId = 1;
inline bool RceItemDamaged::has_planetid() const {
  return _has_bit(0);
}
inline void RceItemDamaged::clear_planetid() {
  planetid_ = 0;
  _clear_bit(0);
}
inline ::google::protobuf::int32 RceItemDamaged::planetid() const {
  return planetid_;
}
inline void RceItemDamaged::set_planetid(::google::protobuf::int32 value) {
  _set_bit(0);
  planetid_ = value;
}

// optional int32 energyBeforeShot = 2;
inline bool RceItemDamaged::has_energybeforeshot() const {
  return _has_bit(1);
}
inline void RceItemDamaged::clear_energybeforeshot() {
  energybeforeshot_ = 0;
  _clear_bit(1);
}
inline ::google::protobuf::int32 RceItemDamaged::energybeforeshot() const {
  return energybeforeshot_;
}
inline void RceItemDamaged::set_energybeforeshot(::google::protobuf::int32 value) {
  _set_bit(1);
  energybeforeshot_ = value;
}

// optional .MsgTransaction transaction = 3;
inline bool RceItemDamaged::has_transaction() const {
  return _has_bit(2);
}
inline void RceItemDamaged::clear_transaction() {
  if (transaction_ != NULL) transaction_->::MsgTransaction::Clear();
  _clear_bit(2);
}
inline const ::MsgTransaction& RceItemDamaged::transaction() const {
  return transaction_ != NULL ? *transaction_ : *default_instance_->transaction_;
}
inline ::MsgTransaction* RceItemDamaged::mutable_transaction() {
  _set_bit(2);
  if (transaction_ == NULL) transaction_ = new ::MsgTransaction;
  return transaction_;
}

// optional int32 destroyed = 4;
inline bool RceItemDamaged::has_destroyed() const {
  return _has_bit(3);
}
inline void RceItemDamaged::clear_destroyed() {
  destroyed_ = 0;
  _clear_bit(3);
}
inline ::google::protobuf::int32 RceItemDamaged::destroyed() const {
  return destroyed_;
}
inline void RceItemDamaged::set_destroyed(::google::protobuf::int32 value) {
  _set_bit(3);
  destroyed_ = value;
}

// optional int32 damage = 5;
inline bool RceItemDamaged::has_damage() const {
  return _has_bit(4);
}
inline void RceItemDamaged::clear_damage() {
  damage_ = 0;
  _clear_bit(4);
}
inline ::google::protobuf::int32 RceItemDamaged::damage() const {
  return damage_;
}
inline void RceItemDamaged::set_damage(::google::protobuf::int32 value) {
  _set_bit(4);
  damage_ = value;
}

// optional .MsgTransaction transactionTarget = 6;
inline bool RceItemDamaged::has_transactiontarget() const {
  return _has_bit(5);
}
inline void RceItemDamaged::clear_transactiontarget() {
  if (transactiontarget_ != NULL) transactiontarget_->::MsgTransaction::Clear();
  _clear_bit(5);
}
inline const ::MsgTransaction& RceItemDamaged::transactiontarget() const {
  return transactiontarget_ != NULL ? *transactiontarget_ : *default_instance_->transactiontarget_;
}
inline ::MsgTransaction* RceItemDamaged::mutable_transactiontarget() {
  _set_bit(5);
  if (transactiontarget_ == NULL) transactiontarget_ = new ::MsgTransaction;
  return transactiontarget_;
}

// repeated string attackers = 7;
inline int RceItemDamaged::attackers_size() const {
  return attackers_.size();
}
inline void RceItemDamaged::clear_attackers() {
  attackers_.Clear();
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
RceItemDamaged::attackers() const {
  return attackers_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
RceItemDamaged::mutable_attackers() {
  return &attackers_;
}
inline const ::std::string& RceItemDamaged::attackers(int index) const {
  return attackers_.Get(index);
}
inline ::std::string* RceItemDamaged::mutable_attackers(int index) {
  return attackers_.Mutable(index);
}
inline void RceItemDamaged::set_attackers(int index, const ::std::string& value) {
  attackers_.Mutable(index)->assign(value);
}
inline void RceItemDamaged::set_attackers(int index, const char* value) {
  attackers_.Mutable(index)->assign(value);
}
inline void RceItemDamaged::set_attackers(int index, const char* value, size_t size) {
  attackers_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RceItemDamaged::add_attackers() {
  return attackers_.Add();
}
inline void RceItemDamaged::add_attackers(const ::std::string& value) {
  attackers_.Add()->assign(value);
}
inline void RceItemDamaged::add_attackers(const char* value) {
  attackers_.Add()->assign(value);
}
inline void RceItemDamaged::add_attackers(const char* value, size_t size) {
  attackers_.Add()->assign(reinterpret_cast<const char*>(value), size);
}

// optional int32 itemSid = 8;
inline bool RceItemDamaged::has_itemsid() const {
  return _has_bit(7);
}
inline void RceItemDamaged::clear_itemsid() {
  itemsid_ = 0;
  _clear_bit(7);
}
inline ::google::protobuf::int32 RceItemDamaged::itemsid() const {
  return itemsid_;
}
inline void RceItemDamaged::set_itemsid(::google::protobuf::int32 value) {
  _set_bit(7);
  itemsid_ = value;
}


#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

#endif  // PROTOBUF_RceItemDamaged_2eproto__INCLUDED
