// Generated by the protocol buffer compiler.  DO NOT EDIT!

#ifndef PROTOBUF_RceUpdateGameUnits_2eproto__INCLUDED
#define PROTOBUF_RceUpdateGameUnits_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2002000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2002000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_RceUpdateGameUnits_2eproto();
void protobuf_AssignDesc_RceUpdateGameUnits_2eproto();
void protobuf_ShutdownFile_RceUpdateGameUnits_2eproto();

class RceUpdateGameUnits;
class Transaction;

// ===================================================================

class RceUpdateGameUnits : public ::google::protobuf::Message {
 public:
  RceUpdateGameUnits();
  virtual ~RceUpdateGameUnits();
  
  RceUpdateGameUnits(const RceUpdateGameUnits& from);
  
  inline RceUpdateGameUnits& operator=(const RceUpdateGameUnits& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const RceUpdateGameUnits& default_instance();
  void Swap(RceUpdateGameUnits* other);
  
  // implements Message ----------------------------------------------
  
  RceUpdateGameUnits* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RceUpdateGameUnits& from);
  void MergeFrom(const RceUpdateGameUnits& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const { _cached_size_ = size; }
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional int64 timeLeft = 1;
  inline bool has_timeleft() const;
  inline void clear_timeleft();
  static const int kTimeLeftFieldNumber = 1;
  inline ::google::protobuf::int64 timeleft() const;
  inline void set_timeleft(::google::protobuf::int64 value);
  
  // optional .Transaction transaction = 2;
  inline bool has_transaction() const;
  inline void clear_transaction();
  static const int kTransactionFieldNumber = 2;
  inline const ::Transaction& transaction() const;
  inline ::Transaction* mutable_transaction();
  
  // optional string sku = 3;
  inline bool has_sku() const;
  inline void clear_sku();
  static const int kSkuFieldNumber = 3;
  inline const ::std::string& sku() const;
  inline void set_sku(const ::std::string& value);
  inline void set_sku(const char* value);
  inline void set_sku(const char* value, size_t size);
  inline ::std::string* mutable_sku();
  
  // optional string planetId = 4;
  inline bool has_planetid() const;
  inline void clear_planetid();
  static const int kPlanetIdFieldNumber = 4;
  inline const ::std::string& planetid() const;
  inline void set_planetid(const ::std::string& value);
  inline void set_planetid(const char* value);
  inline void set_planetid(const char* value, size_t size);
  inline ::std::string* mutable_planetid();
  
  // optional string action = 5;
  inline bool has_action() const;
  inline void clear_action();
  static const int kActionFieldNumber = 5;
  inline const ::std::string& action() const;
  inline void set_action(const ::std::string& value);
  inline void set_action(const char* value);
  inline void set_action(const char* value, size_t size);
  inline ::std::string* mutable_action();
  
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::google::protobuf::int64 timeleft_;
  ::Transaction* transaction_;
  ::std::string* sku_;
  static const ::std::string _default_sku_;
  ::std::string* planetid_;
  static const ::std::string _default_planetid_;
  ::std::string* action_;
  static const ::std::string _default_action_;
  friend void  protobuf_AddDesc_RceUpdateGameUnits_2eproto();
  friend void protobuf_AssignDesc_RceUpdateGameUnits_2eproto();
  friend void protobuf_ShutdownFile_RceUpdateGameUnits_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static RceUpdateGameUnits* default_instance_;
};
// -------------------------------------------------------------------

class Transaction : public ::google::protobuf::Message {
 public:
  Transaction();
  virtual ~Transaction();
  
  Transaction(const Transaction& from);
  
  inline Transaction& operator=(const Transaction& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const Transaction& default_instance();
  void Swap(Transaction* other);
  
  // implements Message ----------------------------------------------
  
  Transaction* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Transaction& from);
  void MergeFrom(const Transaction& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const { _cached_size_ = size; }
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional int32 exp = 1;
  inline bool has_exp() const;
  inline void clear_exp();
  static const int kExpFieldNumber = 1;
  inline ::google::protobuf::int32 exp() const;
  inline void set_exp(::google::protobuf::int32 value);
  
  // optional int32 minerals = 2;
  inline bool has_minerals() const;
  inline void clear_minerals();
  static const int kMineralsFieldNumber = 2;
  inline ::google::protobuf::int32 minerals() const;
  inline void set_minerals(::google::protobuf::int32 value);
  
  // optional string client = 3;
  inline bool has_client() const;
  inline void clear_client();
  static const int kClientFieldNumber = 3;
  inline const ::std::string& client() const;
  inline void set_client(const ::std::string& value);
  inline void set_client(const char* value);
  inline void set_client(const char* value, size_t size);
  inline ::std::string* mutable_client();
  
  // optional string event = 4;
  inline bool has_event() const;
  inline void clear_event();
  static const int kEventFieldNumber = 4;
  inline const ::std::string& event() const;
  inline void set_event(const ::std::string& value);
  inline void set_event(const char* value);
  inline void set_event(const char* value, size_t size);
  inline ::std::string* mutable_event();
  
  // optional int32 cash = 5;
  inline bool has_cash() const;
  inline void clear_cash();
  static const int kCashFieldNumber = 5;
  inline ::google::protobuf::int32 cash() const;
  inline void set_cash(::google::protobuf::int32 value);
  
  // optional double instantOperationMinutesLeft = 6;
  inline bool has_instantoperationminutesleft() const;
  inline void clear_instantoperationminutesleft();
  static const int kInstantOperationMinutesLeftFieldNumber = 6;
  inline double instantoperationminutesleft() const;
  inline void set_instantoperationminutesleft(double value);
  
  // optional int32 droids = 7;
  inline bool has_droids() const;
  inline void clear_droids();
  static const int kDroidsFieldNumber = 7;
  inline ::google::protobuf::int32 droids() const;
  inline void set_droids(::google::protobuf::int32 value);
  
  // optional int32 coins = 8;
  inline bool has_coins() const;
  inline void clear_coins();
  static const int kCoinsFieldNumber = 8;
  inline ::google::protobuf::int32 coins() const;
  inline void set_coins(::google::protobuf::int32 value);
  
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::google::protobuf::int32 exp_;
  ::google::protobuf::int32 minerals_;
  ::std::string* client_;
  static const ::std::string _default_client_;
  ::std::string* event_;
  static const ::std::string _default_event_;
  ::google::protobuf::int32 cash_;
  double instantoperationminutesleft_;
  ::google::protobuf::int32 droids_;
  ::google::protobuf::int32 coins_;
  friend void  protobuf_AddDesc_RceUpdateGameUnits_2eproto();
  friend void protobuf_AssignDesc_RceUpdateGameUnits_2eproto();
  friend void protobuf_ShutdownFile_RceUpdateGameUnits_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(8 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static Transaction* default_instance_;
};
// ===================================================================


// ===================================================================


// ===================================================================

// RceUpdateGameUnits

// optional int64 timeLeft = 1;
inline bool RceUpdateGameUnits::has_timeleft() const {
  return _has_bit(0);
}
inline void RceUpdateGameUnits::clear_timeleft() {
  timeleft_ = GOOGLE_LONGLONG(0);
  _clear_bit(0);
}
inline ::google::protobuf::int64 RceUpdateGameUnits::timeleft() const {
  return timeleft_;
}
inline void RceUpdateGameUnits::set_timeleft(::google::protobuf::int64 value) {
  _set_bit(0);
  timeleft_ = value;
}

// optional .Transaction transaction = 2;
inline bool RceUpdateGameUnits::has_transaction() const {
  return _has_bit(1);
}
inline void RceUpdateGameUnits::clear_transaction() {
  if (transaction_ != NULL) transaction_->::Transaction::Clear();
  _clear_bit(1);
}
inline const ::Transaction& RceUpdateGameUnits::transaction() const {
  return transaction_ != NULL ? *transaction_ : *default_instance_->transaction_;
}
inline ::Transaction* RceUpdateGameUnits::mutable_transaction() {
  _set_bit(1);
  if (transaction_ == NULL) transaction_ = new ::Transaction;
  return transaction_;
}

// optional string sku = 3;
inline bool RceUpdateGameUnits::has_sku() const {
  return _has_bit(2);
}
inline void RceUpdateGameUnits::clear_sku() {
  if (sku_ != &_default_sku_) {
    sku_->clear();
  }
  _clear_bit(2);
}
inline const ::std::string& RceUpdateGameUnits::sku() const {
  return *sku_;
}
inline void RceUpdateGameUnits::set_sku(const ::std::string& value) {
  _set_bit(2);
  if (sku_ == &_default_sku_) {
    sku_ = new ::std::string;
  }
  sku_->assign(value);
}
inline void RceUpdateGameUnits::set_sku(const char* value) {
  _set_bit(2);
  if (sku_ == &_default_sku_) {
    sku_ = new ::std::string;
  }
  sku_->assign(value);
}
inline void RceUpdateGameUnits::set_sku(const char* value, size_t size) {
  _set_bit(2);
  if (sku_ == &_default_sku_) {
    sku_ = new ::std::string;
  }
  sku_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RceUpdateGameUnits::mutable_sku() {
  _set_bit(2);
  if (sku_ == &_default_sku_) {
    sku_ = new ::std::string;
  }
  return sku_;
}

// optional string planetId = 4;
inline bool RceUpdateGameUnits::has_planetid() const {
  return _has_bit(3);
}
inline void RceUpdateGameUnits::clear_planetid() {
  if (planetid_ != &_default_planetid_) {
    planetid_->clear();
  }
  _clear_bit(3);
}
inline const ::std::string& RceUpdateGameUnits::planetid() const {
  return *planetid_;
}
inline void RceUpdateGameUnits::set_planetid(const ::std::string& value) {
  _set_bit(3);
  if (planetid_ == &_default_planetid_) {
    planetid_ = new ::std::string;
  }
  planetid_->assign(value);
}
inline void RceUpdateGameUnits::set_planetid(const char* value) {
  _set_bit(3);
  if (planetid_ == &_default_planetid_) {
    planetid_ = new ::std::string;
  }
  planetid_->assign(value);
}
inline void RceUpdateGameUnits::set_planetid(const char* value, size_t size) {
  _set_bit(3);
  if (planetid_ == &_default_planetid_) {
    planetid_ = new ::std::string;
  }
  planetid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RceUpdateGameUnits::mutable_planetid() {
  _set_bit(3);
  if (planetid_ == &_default_planetid_) {
    planetid_ = new ::std::string;
  }
  return planetid_;
}

// optional string action = 5;
inline bool RceUpdateGameUnits::has_action() const {
  return _has_bit(4);
}
inline void RceUpdateGameUnits::clear_action() {
  if (action_ != &_default_action_) {
    action_->clear();
  }
  _clear_bit(4);
}
inline const ::std::string& RceUpdateGameUnits::action() const {
  return *action_;
}
inline void RceUpdateGameUnits::set_action(const ::std::string& value) {
  _set_bit(4);
  if (action_ == &_default_action_) {
    action_ = new ::std::string;
  }
  action_->assign(value);
}
inline void RceUpdateGameUnits::set_action(const char* value) {
  _set_bit(4);
  if (action_ == &_default_action_) {
    action_ = new ::std::string;
  }
  action_->assign(value);
}
inline void RceUpdateGameUnits::set_action(const char* value, size_t size) {
  _set_bit(4);
  if (action_ == &_default_action_) {
    action_ = new ::std::string;
  }
  action_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RceUpdateGameUnits::mutable_action() {
  _set_bit(4);
  if (action_ == &_default_action_) {
    action_ = new ::std::string;
  }
  return action_;
}

// -------------------------------------------------------------------

// Transaction

// optional int32 exp = 1;
inline bool Transaction::has_exp() const {
  return _has_bit(0);
}
inline void Transaction::clear_exp() {
  exp_ = 0;
  _clear_bit(0);
}
inline ::google::protobuf::int32 Transaction::exp() const {
  return exp_;
}
inline void Transaction::set_exp(::google::protobuf::int32 value) {
  _set_bit(0);
  exp_ = value;
}

// optional int32 minerals = 2;
inline bool Transaction::has_minerals() const {
  return _has_bit(1);
}
inline void Transaction::clear_minerals() {
  minerals_ = 0;
  _clear_bit(1);
}
inline ::google::protobuf::int32 Transaction::minerals() const {
  return minerals_;
}
inline void Transaction::set_minerals(::google::protobuf::int32 value) {
  _set_bit(1);
  minerals_ = value;
}

// optional string client = 3;
inline bool Transaction::has_client() const {
  return _has_bit(2);
}
inline void Transaction::clear_client() {
  if (client_ != &_default_client_) {
    client_->clear();
  }
  _clear_bit(2);
}
inline const ::std::string& Transaction::client() const {
  return *client_;
}
inline void Transaction::set_client(const ::std::string& value) {
  _set_bit(2);
  if (client_ == &_default_client_) {
    client_ = new ::std::string;
  }
  client_->assign(value);
}
inline void Transaction::set_client(const char* value) {
  _set_bit(2);
  if (client_ == &_default_client_) {
    client_ = new ::std::string;
  }
  client_->assign(value);
}
inline void Transaction::set_client(const char* value, size_t size) {
  _set_bit(2);
  if (client_ == &_default_client_) {
    client_ = new ::std::string;
  }
  client_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Transaction::mutable_client() {
  _set_bit(2);
  if (client_ == &_default_client_) {
    client_ = new ::std::string;
  }
  return client_;
}

// optional string event = 4;
inline bool Transaction::has_event() const {
  return _has_bit(3);
}
inline void Transaction::clear_event() {
  if (event_ != &_default_event_) {
    event_->clear();
  }
  _clear_bit(3);
}
inline const ::std::string& Transaction::event() const {
  return *event_;
}
inline void Transaction::set_event(const ::std::string& value) {
  _set_bit(3);
  if (event_ == &_default_event_) {
    event_ = new ::std::string;
  }
  event_->assign(value);
}
inline void Transaction::set_event(const char* value) {
  _set_bit(3);
  if (event_ == &_default_event_) {
    event_ = new ::std::string;
  }
  event_->assign(value);
}
inline void Transaction::set_event(const char* value, size_t size) {
  _set_bit(3);
  if (event_ == &_default_event_) {
    event_ = new ::std::string;
  }
  event_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Transaction::mutable_event() {
  _set_bit(3);
  if (event_ == &_default_event_) {
    event_ = new ::std::string;
  }
  return event_;
}

// optional int32 cash = 5;
inline bool Transaction::has_cash() const {
  return _has_bit(4);
}
inline void Transaction::clear_cash() {
  cash_ = 0;
  _clear_bit(4);
}
inline ::google::protobuf::int32 Transaction::cash() const {
  return cash_;
}
inline void Transaction::set_cash(::google::protobuf::int32 value) {
  _set_bit(4);
  cash_ = value;
}

// optional double instantOperationMinutesLeft = 6;
inline bool Transaction::has_instantoperationminutesleft() const {
  return _has_bit(5);
}
inline void Transaction::clear_instantoperationminutesleft() {
  instantoperationminutesleft_ = 0;
  _clear_bit(5);
}
inline double Transaction::instantoperationminutesleft() const {
  return instantoperationminutesleft_;
}
inline void Transaction::set_instantoperationminutesleft(double value) {
  _set_bit(5);
  instantoperationminutesleft_ = value;
}

// optional int32 droids = 7;
inline bool Transaction::has_droids() const {
  return _has_bit(6);
}
inline void Transaction::clear_droids() {
  droids_ = 0;
  _clear_bit(6);
}
inline ::google::protobuf::int32 Transaction::droids() const {
  return droids_;
}
inline void Transaction::set_droids(::google::protobuf::int32 value) {
  _set_bit(6);
  droids_ = value;
}

// optional int32 coins = 8;
inline bool Transaction::has_coins() const {
  return _has_bit(7);
}
inline void Transaction::clear_coins() {
  coins_ = 0;
  _clear_bit(7);
}
inline ::google::protobuf::int32 Transaction::coins() const {
  return coins_;
}
inline void Transaction::set_coins(::google::protobuf::int32 value) {
  _set_bit(7);
  coins_ = value;
}


#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

#endif  // PROTOBUF_RceUpdateGameUnits_2eproto__INCLUDED
