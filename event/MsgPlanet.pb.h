// Generated by the protocol buffer compiler.  DO NOT EDIT!

#ifndef PROTOBUF_MsgPlanet_2eproto__INCLUDED
#define PROTOBUF_MsgPlanet_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2002000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2002000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_MsgPlanet_2eproto();
void protobuf_AssignDesc_MsgPlanet_2eproto();
void protobuf_ShutdownFile_MsgPlanet_2eproto();

class MsgPlanet;

// ===================================================================

class MsgPlanet : public ::google::protobuf::Message {
 public:
  MsgPlanet();
  virtual ~MsgPlanet();
  
  MsgPlanet(const MsgPlanet& from);
  
  inline MsgPlanet& operator=(const MsgPlanet& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const MsgPlanet& default_instance();
  void Swap(MsgPlanet* other);
  
  // implements Message ----------------------------------------------
  
  MsgPlanet* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MsgPlanet& from);
  void MergeFrom(const MsgPlanet& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const { _cached_size_ = size; }
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional int32 planetId = 1;
  inline bool has_planetid() const;
  inline void clear_planetid();
  static const int kPlanetIdFieldNumber = 1;
  inline ::google::protobuf::int32 planetid() const;
  inline void set_planetid(::google::protobuf::int32 value);
  
  // optional int32 planetType = 2;
  inline bool has_planettype() const;
  inline void clear_planettype();
  static const int kPlanetTypeFieldNumber = 2;
  inline ::google::protobuf::int32 planettype() const;
  inline void set_planettype(::google::protobuf::int32 value);
  
  // optional string starName = 3;
  inline bool has_starname() const;
  inline void clear_starname();
  static const int kStarNameFieldNumber = 3;
  inline const ::std::string& starname() const;
  inline void set_starname(const ::std::string& value);
  inline void set_starname(const char* value);
  inline void set_starname(const char* value, size_t size);
  inline ::std::string* mutable_starname();
  
  // optional int32 coinsLimit = 4;
  inline bool has_coinslimit() const;
  inline void clear_coinslimit();
  static const int kCoinsLimitFieldNumber = 4;
  inline ::google::protobuf::int32 coinslimit() const;
  inline void set_coinslimit(::google::protobuf::int32 value);
  
  // optional int32 mineralsLimit = 5;
  inline bool has_mineralslimit() const;
  inline void clear_mineralslimit();
  static const int kMineralsLimitFieldNumber = 5;
  inline ::google::protobuf::int32 mineralslimit() const;
  inline void set_mineralslimit(::google::protobuf::int32 value);
  
  // optional int32 starId = 6;
  inline bool has_starid() const;
  inline void clear_starid();
  static const int kStarIdFieldNumber = 6;
  inline ::google::protobuf::int32 starid() const;
  inline void set_starid(::google::protobuf::int32 value);
  
  // optional string sku = 7;
  inline bool has_sku() const;
  inline void clear_sku();
  static const int kSkuFieldNumber = 7;
  inline const ::std::string& sku() const;
  inline void set_sku(const ::std::string& value);
  inline void set_sku(const char* value);
  inline void set_sku(const char* value, size_t size);
  inline ::std::string* mutable_sku();
  
  // optional int32 starType = 8;
  inline bool has_startype() const;
  inline void clear_startype();
  static const int kStarTypeFieldNumber = 8;
  inline ::google::protobuf::int32 startype() const;
  inline void set_startype(::google::protobuf::int32 value);
  
  // optional int32 HQLevel = 9;
  inline bool has_hqlevel() const;
  inline void clear_hqlevel();
  static const int kHQLevelFieldNumber = 9;
  inline ::google::protobuf::int32 hqlevel() const;
  inline void set_hqlevel(::google::protobuf::int32 value);
  
  // optional int32 capital = 10;
  inline bool has_capital() const;
  inline void clear_capital();
  static const int kCapitalFieldNumber = 10;
  inline ::google::protobuf::int32 capital() const;
  inline void set_capital(::google::protobuf::int32 value);
  
  // repeated int32 Planet = 11;
  inline int planet_size() const;
  inline void clear_planet();
  static const int kPlanetFieldNumber = 11;
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >& planet() const
      ;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >* mutable_planet();
  inline ::google::protobuf::int32 planet(int index) const;
  inline void set_planet(int index, ::google::protobuf::int32 value);
  inline void add_planet(::google::protobuf::int32 value);
  
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::google::protobuf::int32 planetid_;
  ::google::protobuf::int32 planettype_;
  ::std::string* starname_;
  static const ::std::string _default_starname_;
  ::google::protobuf::int32 coinslimit_;
  ::google::protobuf::int32 mineralslimit_;
  ::google::protobuf::int32 starid_;
  ::std::string* sku_;
  static const ::std::string _default_sku_;
  ::google::protobuf::int32 startype_;
  ::google::protobuf::int32 hqlevel_;
  ::google::protobuf::int32 capital_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > planet_;
  friend void  protobuf_AddDesc_MsgPlanet_2eproto();
  friend void protobuf_AssignDesc_MsgPlanet_2eproto();
  friend void protobuf_ShutdownFile_MsgPlanet_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(11 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static MsgPlanet* default_instance_;
};
// ===================================================================


// ===================================================================


// ===================================================================

// MsgPlanet

// optional int32 planetId = 1;
inline bool MsgPlanet::has_planetid() const {
  return _has_bit(0);
}
inline void MsgPlanet::clear_planetid() {
  planetid_ = 0;
  _clear_bit(0);
}
inline ::google::protobuf::int32 MsgPlanet::planetid() const {
  return planetid_;
}
inline void MsgPlanet::set_planetid(::google::protobuf::int32 value) {
  _set_bit(0);
  planetid_ = value;
}

// optional int32 planetType = 2;
inline bool MsgPlanet::has_planettype() const {
  return _has_bit(1);
}
inline void MsgPlanet::clear_planettype() {
  planettype_ = 0;
  _clear_bit(1);
}
inline ::google::protobuf::int32 MsgPlanet::planettype() const {
  return planettype_;
}
inline void MsgPlanet::set_planettype(::google::protobuf::int32 value) {
  _set_bit(1);
  planettype_ = value;
}

// optional string starName = 3;
inline bool MsgPlanet::has_starname() const {
  return _has_bit(2);
}
inline void MsgPlanet::clear_starname() {
  if (starname_ != &_default_starname_) {
    starname_->clear();
  }
  _clear_bit(2);
}
inline const ::std::string& MsgPlanet::starname() const {
  return *starname_;
}
inline void MsgPlanet::set_starname(const ::std::string& value) {
  _set_bit(2);
  if (starname_ == &_default_starname_) {
    starname_ = new ::std::string;
  }
  starname_->assign(value);
}
inline void MsgPlanet::set_starname(const char* value) {
  _set_bit(2);
  if (starname_ == &_default_starname_) {
    starname_ = new ::std::string;
  }
  starname_->assign(value);
}
inline void MsgPlanet::set_starname(const char* value, size_t size) {
  _set_bit(2);
  if (starname_ == &_default_starname_) {
    starname_ = new ::std::string;
  }
  starname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* MsgPlanet::mutable_starname() {
  _set_bit(2);
  if (starname_ == &_default_starname_) {
    starname_ = new ::std::string;
  }
  return starname_;
}

// optional int32 coinsLimit = 4;
inline bool MsgPlanet::has_coinslimit() const {
  return _has_bit(3);
}
inline void MsgPlanet::clear_coinslimit() {
  coinslimit_ = 0;
  _clear_bit(3);
}
inline ::google::protobuf::int32 MsgPlanet::coinslimit() const {
  return coinslimit_;
}
inline void MsgPlanet::set_coinslimit(::google::protobuf::int32 value) {
  _set_bit(3);
  coinslimit_ = value;
}

// optional int32 mineralsLimit = 5;
inline bool MsgPlanet::has_mineralslimit() const {
  return _has_bit(4);
}
inline void MsgPlanet::clear_mineralslimit() {
  mineralslimit_ = 0;
  _clear_bit(4);
}
inline ::google::protobuf::int32 MsgPlanet::mineralslimit() const {
  return mineralslimit_;
}
inline void MsgPlanet::set_mineralslimit(::google::protobuf::int32 value) {
  _set_bit(4);
  mineralslimit_ = value;
}

// optional int32 starId = 6;
inline bool MsgPlanet::has_starid() const {
  return _has_bit(5);
}
inline void MsgPlanet::clear_starid() {
  starid_ = 0;
  _clear_bit(5);
}
inline ::google::protobuf::int32 MsgPlanet::starid() const {
  return starid_;
}
inline void MsgPlanet::set_starid(::google::protobuf::int32 value) {
  _set_bit(5);
  starid_ = value;
}

// optional string sku = 7;
inline bool MsgPlanet::has_sku() const {
  return _has_bit(6);
}
inline void MsgPlanet::clear_sku() {
  if (sku_ != &_default_sku_) {
    sku_->clear();
  }
  _clear_bit(6);
}
inline const ::std::string& MsgPlanet::sku() const {
  return *sku_;
}
inline void MsgPlanet::set_sku(const ::std::string& value) {
  _set_bit(6);
  if (sku_ == &_default_sku_) {
    sku_ = new ::std::string;
  }
  sku_->assign(value);
}
inline void MsgPlanet::set_sku(const char* value) {
  _set_bit(6);
  if (sku_ == &_default_sku_) {
    sku_ = new ::std::string;
  }
  sku_->assign(value);
}
inline void MsgPlanet::set_sku(const char* value, size_t size) {
  _set_bit(6);
  if (sku_ == &_default_sku_) {
    sku_ = new ::std::string;
  }
  sku_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* MsgPlanet::mutable_sku() {
  _set_bit(6);
  if (sku_ == &_default_sku_) {
    sku_ = new ::std::string;
  }
  return sku_;
}

// optional int32 starType = 8;
inline bool MsgPlanet::has_startype() const {
  return _has_bit(7);
}
inline void MsgPlanet::clear_startype() {
  startype_ = 0;
  _clear_bit(7);
}
inline ::google::protobuf::int32 MsgPlanet::startype() const {
  return startype_;
}
inline void MsgPlanet::set_startype(::google::protobuf::int32 value) {
  _set_bit(7);
  startype_ = value;
}

// optional int32 HQLevel = 9;
inline bool MsgPlanet::has_hqlevel() const {
  return _has_bit(8);
}
inline void MsgPlanet::clear_hqlevel() {
  hqlevel_ = 0;
  _clear_bit(8);
}
inline ::google::protobuf::int32 MsgPlanet::hqlevel() const {
  return hqlevel_;
}
inline void MsgPlanet::set_hqlevel(::google::protobuf::int32 value) {
  _set_bit(8);
  hqlevel_ = value;
}

// optional int32 capital = 10;
inline bool MsgPlanet::has_capital() const {
  return _has_bit(9);
}
inline void MsgPlanet::clear_capital() {
  capital_ = 0;
  _clear_bit(9);
}
inline ::google::protobuf::int32 MsgPlanet::capital() const {
  return capital_;
}
inline void MsgPlanet::set_capital(::google::protobuf::int32 value) {
  _set_bit(9);
  capital_ = value;
}

// repeated int32 Planet = 11;
inline int MsgPlanet::planet_size() const {
  return planet_.size();
}
inline void MsgPlanet::clear_planet() {
  planet_.Clear();
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
MsgPlanet::planet() const {
  return planet_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
MsgPlanet::mutable_planet() {
  return &planet_;
}
inline ::google::protobuf::int32 MsgPlanet::planet(int index) const {
  return planet_.Get(index);
}
inline void MsgPlanet::set_planet(int index, ::google::protobuf::int32 value) {
  planet_.Set(index, value);
}
inline void MsgPlanet::add_planet(::google::protobuf::int32 value) {
  planet_.Add(value);
}


#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

#endif  // PROTOBUF_MsgPlanet_2eproto__INCLUDED
