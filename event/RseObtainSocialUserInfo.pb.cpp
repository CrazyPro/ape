// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "RseObtainSocialUserInfo.pb.h"
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>

namespace {

const ::google::protobuf::Descriptor* MsgSocialUserInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgSocialUserInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* RseObtainSocialUserInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RseObtainSocialUserInfo_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_RseObtainSocialUserInfo_2eproto() {
  protobuf_AddDesc_RseObtainSocialUserInfo_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "RseObtainSocialUserInfo.proto");
  GOOGLE_CHECK(file != NULL);
  MsgSocialUserInfo_descriptor_ = file->message_type(0);
  static const int MsgSocialUserInfo_offsets_[1] = {
  };
  MsgSocialUserInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgSocialUserInfo_descriptor_,
      MsgSocialUserInfo::default_instance_,
      MsgSocialUserInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgSocialUserInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgSocialUserInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgSocialUserInfo));
  RseObtainSocialUserInfo_descriptor_ = file->message_type(1);
  static const int RseObtainSocialUserInfo_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RseObtainSocialUserInfo, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RseObtainSocialUserInfo, photourl_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RseObtainSocialUserInfo, fan_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RseObtainSocialUserInfo, socialuserinfo_),
  };
  RseObtainSocialUserInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RseObtainSocialUserInfo_descriptor_,
      RseObtainSocialUserInfo::default_instance_,
      RseObtainSocialUserInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RseObtainSocialUserInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RseObtainSocialUserInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RseObtainSocialUserInfo));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_RseObtainSocialUserInfo_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgSocialUserInfo_descriptor_, &MsgSocialUserInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RseObtainSocialUserInfo_descriptor_, &RseObtainSocialUserInfo::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_RseObtainSocialUserInfo_2eproto() {
  delete MsgSocialUserInfo::default_instance_;
  delete MsgSocialUserInfo_reflection_;
  delete RseObtainSocialUserInfo::default_instance_;
  delete RseObtainSocialUserInfo_reflection_;
}

void protobuf_AddDesc_RseObtainSocialUserInfo_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\035RseObtainSocialUserInfo.proto\"\023\n\021MsgSo"
    "cialUserInfo\"r\n\027RseObtainSocialUserInfo\022"
    "\014\n\004name\030\001 \001(\t\022\020\n\010photoURL\030\002 \001(\t\022\013\n\003fan\030\003"
    " \001(\005\022*\n\016SocialUserInfo\030\004 \003(\0132\022.MsgSocial"
    "UserInfo", 168);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "RseObtainSocialUserInfo.proto", &protobuf_RegisterTypes);
  MsgSocialUserInfo::default_instance_ = new MsgSocialUserInfo();
  RseObtainSocialUserInfo::default_instance_ = new RseObtainSocialUserInfo();
  MsgSocialUserInfo::default_instance_->InitAsDefaultInstance();
  RseObtainSocialUserInfo::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_RseObtainSocialUserInfo_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_RseObtainSocialUserInfo_2eproto {
  StaticDescriptorInitializer_RseObtainSocialUserInfo_2eproto() {
    protobuf_AddDesc_RseObtainSocialUserInfo_2eproto();
  }
} static_descriptor_initializer_RseObtainSocialUserInfo_2eproto_;


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

MsgSocialUserInfo::MsgSocialUserInfo() {
  SharedCtor();
}

void MsgSocialUserInfo::InitAsDefaultInstance() {
}

MsgSocialUserInfo::MsgSocialUserInfo(const MsgSocialUserInfo& from) {
  SharedCtor();
  MergeFrom(from);
}

void MsgSocialUserInfo::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgSocialUserInfo::~MsgSocialUserInfo() {
  SharedDtor();
}

void MsgSocialUserInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* MsgSocialUserInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgSocialUserInfo_descriptor_;
}

const MsgSocialUserInfo& MsgSocialUserInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_RseObtainSocialUserInfo_2eproto();  return *default_instance_;
}

MsgSocialUserInfo* MsgSocialUserInfo::default_instance_ = NULL;

MsgSocialUserInfo* MsgSocialUserInfo::New() const {
  return new MsgSocialUserInfo;
}

void MsgSocialUserInfo::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgSocialUserInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void MsgSocialUserInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    MsgSocialUserInfo::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MsgSocialUserInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MsgSocialUserInfo::ByteSize() const {
  int total_size = 0;
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void MsgSocialUserInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgSocialUserInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgSocialUserInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgSocialUserInfo::MergeFrom(const MsgSocialUserInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgSocialUserInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgSocialUserInfo::CopyFrom(const MsgSocialUserInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgSocialUserInfo::IsInitialized() const {
  
  return true;
}

void MsgSocialUserInfo::Swap(MsgSocialUserInfo* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgSocialUserInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgSocialUserInfo_descriptor_;
  metadata.reflection = MsgSocialUserInfo_reflection_;
  return metadata;
}


// ===================================================================

const ::std::string RseObtainSocialUserInfo::_default_name_;
const ::std::string RseObtainSocialUserInfo::_default_photourl_;
#ifndef _MSC_VER
const int RseObtainSocialUserInfo::kNameFieldNumber;
const int RseObtainSocialUserInfo::kPhotoURLFieldNumber;
const int RseObtainSocialUserInfo::kFanFieldNumber;
const int RseObtainSocialUserInfo::kSocialUserInfoFieldNumber;
#endif  // !_MSC_VER

RseObtainSocialUserInfo::RseObtainSocialUserInfo() {
  SharedCtor();
}

void RseObtainSocialUserInfo::InitAsDefaultInstance() {
}

RseObtainSocialUserInfo::RseObtainSocialUserInfo(const RseObtainSocialUserInfo& from) {
  SharedCtor();
  MergeFrom(from);
}

void RseObtainSocialUserInfo::SharedCtor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&_default_name_);
  photourl_ = const_cast< ::std::string*>(&_default_photourl_);
  fan_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RseObtainSocialUserInfo::~RseObtainSocialUserInfo() {
  SharedDtor();
}

void RseObtainSocialUserInfo::SharedDtor() {
  if (name_ != &_default_name_) {
    delete name_;
  }
  if (photourl_ != &_default_photourl_) {
    delete photourl_;
  }
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* RseObtainSocialUserInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RseObtainSocialUserInfo_descriptor_;
}

const RseObtainSocialUserInfo& RseObtainSocialUserInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_RseObtainSocialUserInfo_2eproto();  return *default_instance_;
}

RseObtainSocialUserInfo* RseObtainSocialUserInfo::default_instance_ = NULL;

RseObtainSocialUserInfo* RseObtainSocialUserInfo::New() const {
  return new RseObtainSocialUserInfo;
}

void RseObtainSocialUserInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (name_ != &_default_name_) {
        name_->clear();
      }
    }
    if (_has_bit(1)) {
      if (photourl_ != &_default_photourl_) {
        photourl_->clear();
      }
    }
    fan_ = 0;
  }
  socialuserinfo_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RseObtainSocialUserInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadString(
              input, this->mutable_name()));
        ::google::protobuf::internal::WireFormat::VerifyUTF8String(
          this->name().data(), this->name().length(),
          ::google::protobuf::internal::WireFormat::PARSE);
        if (input->ExpectTag(18)) goto parse_photoURL;
        break;
      }
      
      // optional string photoURL = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_photoURL:
        DO_(::google::protobuf::internal::WireFormatLite::ReadString(
              input, this->mutable_photourl()));
        ::google::protobuf::internal::WireFormat::VerifyUTF8String(
          this->photourl().data(), this->photourl().length(),
          ::google::protobuf::internal::WireFormat::PARSE);
        if (input->ExpectTag(24)) goto parse_fan;
        break;
      }
      
      // optional int32 fan = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_fan:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &fan_));
        _set_bit(2);
        if (input->ExpectTag(34)) goto parse_SocialUserInfo;
        break;
      }
      
      // repeated .MsgSocialUserInfo SocialUserInfo = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_SocialUserInfo:
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, add_socialuserinfo()));
        if (input->ExpectTag(34)) goto parse_SocialUserInfo;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RseObtainSocialUserInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    RseObtainSocialUserInfo::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional string name = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->name(), output);
  }
  
  // optional string photoURL = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->photourl().data(), this->photourl().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->photourl(), output);
  }
  
  // optional int32 fan = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->fan(), output);
  }
  
  // repeated .MsgSocialUserInfo SocialUserInfo = 4;
  for (int i = 0; i < this->socialuserinfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      4, this->socialuserinfo(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RseObtainSocialUserInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string name = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }
  
  // optional string photoURL = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->photourl().data(), this->photourl().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->photourl(), target);
  }
  
  // optional int32 fan = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->fan(), target);
  }
  
  // repeated .MsgSocialUserInfo SocialUserInfo = 4;
  for (int i = 0; i < this->socialuserinfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->socialuserinfo(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RseObtainSocialUserInfo::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }
    
    // optional string photoURL = 2;
    if (has_photourl()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->photourl());
    }
    
    // optional int32 fan = 3;
    if (has_fan()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->fan());
    }
    
  }
  // repeated .MsgSocialUserInfo SocialUserInfo = 4;
  total_size += 1 * this->socialuserinfo_size();
  for (int i = 0; i < this->socialuserinfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->socialuserinfo(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void RseObtainSocialUserInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RseObtainSocialUserInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RseObtainSocialUserInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RseObtainSocialUserInfo::MergeFrom(const RseObtainSocialUserInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  socialuserinfo_.MergeFrom(from.socialuserinfo_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_name(from.name());
    }
    if (from._has_bit(1)) {
      set_photourl(from.photourl());
    }
    if (from._has_bit(2)) {
      set_fan(from.fan());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RseObtainSocialUserInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RseObtainSocialUserInfo::CopyFrom(const RseObtainSocialUserInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RseObtainSocialUserInfo::IsInitialized() const {
  
  return true;
}

void RseObtainSocialUserInfo::Swap(RseObtainSocialUserInfo* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(photourl_, other->photourl_);
    std::swap(fan_, other->fan_);
    socialuserinfo_.Swap(&other->socialuserinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RseObtainSocialUserInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RseObtainSocialUserInfo_descriptor_;
  metadata.reflection = RseObtainSocialUserInfo_reflection_;
  return metadata;
}

