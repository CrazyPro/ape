// Generated by the protocol buffer compiler.  DO NOT EDIT!

#ifndef PROTOBUF_RceUnitDamaged_2eproto__INCLUDED
#define PROTOBUF_RceUnitDamaged_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2002000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2002000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_RceUnitDamaged_2eproto();
void protobuf_AssignDesc_RceUnitDamaged_2eproto();
void protobuf_ShutdownFile_RceUnitDamaged_2eproto();

class RceUnitDamaged;

// ===================================================================

class RceUnitDamaged : public ::google::protobuf::Message {
 public:
  RceUnitDamaged();
  virtual ~RceUnitDamaged();
  
  RceUnitDamaged(const RceUnitDamaged& from);
  
  inline RceUnitDamaged& operator=(const RceUnitDamaged& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const RceUnitDamaged& default_instance();
  void Swap(RceUnitDamaged* other);
  
  // implements Message ----------------------------------------------
  
  RceUnitDamaged* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RceUnitDamaged& from);
  void MergeFrom(const RceUnitDamaged& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const { _cached_size_ = size; }
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional int32 planetId = 1;
  inline bool has_planetid() const;
  inline void clear_planetid();
  static const int kPlanetIdFieldNumber = 1;
  inline ::google::protobuf::int32 planetid() const;
  inline void set_planetid(::google::protobuf::int32 value);
  
  // optional int32 energyBeforeShot = 2;
  inline bool has_energybeforeshot() const;
  inline void clear_energybeforeshot();
  static const int kEnergyBeforeShotFieldNumber = 2;
  inline ::google::protobuf::int32 energybeforeshot() const;
  inline void set_energybeforeshot(::google::protobuf::int32 value);
  
  // optional int32 unitId = 3;
  inline bool has_unitid() const;
  inline void clear_unitid();
  static const int kUnitIdFieldNumber = 3;
  inline ::google::protobuf::int32 unitid() const;
  inline void set_unitid(::google::protobuf::int32 value);
  
  // optional string unitSku = 4;
  inline bool has_unitsku() const;
  inline void clear_unitsku();
  static const int kUnitSkuFieldNumber = 4;
  inline const ::std::string& unitsku() const;
  inline void set_unitsku(const ::std::string& value);
  inline void set_unitsku(const char* value);
  inline void set_unitsku(const char* value, size_t size);
  inline ::std::string* mutable_unitsku();
  
  // optional int32 fromBunkerSid = 5;
  inline bool has_frombunkersid() const;
  inline void clear_frombunkersid();
  static const int kFromBunkerSidFieldNumber = 5;
  inline ::google::protobuf::int32 frombunkersid() const;
  inline void set_frombunkersid(::google::protobuf::int32 value);
  
  // optional int32 damage = 6;
  inline bool has_damage() const;
  inline void clear_damage();
  static const int kDamageFieldNumber = 6;
  inline ::google::protobuf::int32 damage() const;
  inline void set_damage(::google::protobuf::int32 value);
  
  // optional int32 destroyed = 7;
  inline bool has_destroyed() const;
  inline void clear_destroyed();
  static const int kDestroyedFieldNumber = 7;
  inline ::google::protobuf::int32 destroyed() const;
  inline void set_destroyed(::google::protobuf::int32 value);
  
  // repeated string attackers = 8;
  inline int attackers_size() const;
  inline void clear_attackers();
  static const int kAttackersFieldNumber = 8;
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& attackers() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_attackers();
  inline const ::std::string& attackers(int index) const;
  inline ::std::string* mutable_attackers(int index);
  inline void set_attackers(int index, const ::std::string& value);
  inline void set_attackers(int index, const char* value);
  inline void set_attackers(int index, const char* value, size_t size);
  inline ::std::string* add_attackers();
  inline void add_attackers(const ::std::string& value);
  inline void add_attackers(const char* value);
  inline void add_attackers(const char* value, size_t size);
  
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::google::protobuf::int32 planetid_;
  ::google::protobuf::int32 energybeforeshot_;
  ::google::protobuf::int32 unitid_;
  ::std::string* unitsku_;
  static const ::std::string _default_unitsku_;
  ::google::protobuf::int32 frombunkersid_;
  ::google::protobuf::int32 damage_;
  ::google::protobuf::int32 destroyed_;
  ::google::protobuf::RepeatedPtrField< ::std::string> attackers_;
  friend void  protobuf_AddDesc_RceUnitDamaged_2eproto();
  friend void protobuf_AssignDesc_RceUnitDamaged_2eproto();
  friend void protobuf_ShutdownFile_RceUnitDamaged_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(8 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static RceUnitDamaged* default_instance_;
};
// ===================================================================


// ===================================================================


// ===================================================================

// RceUnitDamaged

// optional int32 planetId = 1;
inline bool RceUnitDamaged::has_planetid() const {
  return _has_bit(0);
}
inline void RceUnitDamaged::clear_planetid() {
  planetid_ = 0;
  _clear_bit(0);
}
inline ::google::protobuf::int32 RceUnitDamaged::planetid() const {
  return planetid_;
}
inline void RceUnitDamaged::set_planetid(::google::protobuf::int32 value) {
  _set_bit(0);
  planetid_ = value;
}

// optional int32 energyBeforeShot = 2;
inline bool RceUnitDamaged::has_energybeforeshot() const {
  return _has_bit(1);
}
inline void RceUnitDamaged::clear_energybeforeshot() {
  energybeforeshot_ = 0;
  _clear_bit(1);
}
inline ::google::protobuf::int32 RceUnitDamaged::energybeforeshot() const {
  return energybeforeshot_;
}
inline void RceUnitDamaged::set_energybeforeshot(::google::protobuf::int32 value) {
  _set_bit(1);
  energybeforeshot_ = value;
}

// optional int32 unitId = 3;
inline bool RceUnitDamaged::has_unitid() const {
  return _has_bit(2);
}
inline void RceUnitDamaged::clear_unitid() {
  unitid_ = 0;
  _clear_bit(2);
}
inline ::google::protobuf::int32 RceUnitDamaged::unitid() const {
  return unitid_;
}
inline void RceUnitDamaged::set_unitid(::google::protobuf::int32 value) {
  _set_bit(2);
  unitid_ = value;
}

// optional string unitSku = 4;
inline bool RceUnitDamaged::has_unitsku() const {
  return _has_bit(3);
}
inline void RceUnitDamaged::clear_unitsku() {
  if (unitsku_ != &_default_unitsku_) {
    unitsku_->clear();
  }
  _clear_bit(3);
}
inline const ::std::string& RceUnitDamaged::unitsku() const {
  return *unitsku_;
}
inline void RceUnitDamaged::set_unitsku(const ::std::string& value) {
  _set_bit(3);
  if (unitsku_ == &_default_unitsku_) {
    unitsku_ = new ::std::string;
  }
  unitsku_->assign(value);
}
inline void RceUnitDamaged::set_unitsku(const char* value) {
  _set_bit(3);
  if (unitsku_ == &_default_unitsku_) {
    unitsku_ = new ::std::string;
  }
  unitsku_->assign(value);
}
inline void RceUnitDamaged::set_unitsku(const char* value, size_t size) {
  _set_bit(3);
  if (unitsku_ == &_default_unitsku_) {
    unitsku_ = new ::std::string;
  }
  unitsku_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RceUnitDamaged::mutable_unitsku() {
  _set_bit(3);
  if (unitsku_ == &_default_unitsku_) {
    unitsku_ = new ::std::string;
  }
  return unitsku_;
}

// optional int32 fromBunkerSid = 5;
inline bool RceUnitDamaged::has_frombunkersid() const {
  return _has_bit(4);
}
inline void RceUnitDamaged::clear_frombunkersid() {
  frombunkersid_ = 0;
  _clear_bit(4);
}
inline ::google::protobuf::int32 RceUnitDamaged::frombunkersid() const {
  return frombunkersid_;
}
inline void RceUnitDamaged::set_frombunkersid(::google::protobuf::int32 value) {
  _set_bit(4);
  frombunkersid_ = value;
}

// optional int32 damage = 6;
inline bool RceUnitDamaged::has_damage() const {
  return _has_bit(5);
}
inline void RceUnitDamaged::clear_damage() {
  damage_ = 0;
  _clear_bit(5);
}
inline ::google::protobuf::int32 RceUnitDamaged::damage() const {
  return damage_;
}
inline void RceUnitDamaged::set_damage(::google::protobuf::int32 value) {
  _set_bit(5);
  damage_ = value;
}

// optional int32 destroyed = 7;
inline bool RceUnitDamaged::has_destroyed() const {
  return _has_bit(6);
}
inline void RceUnitDamaged::clear_destroyed() {
  destroyed_ = 0;
  _clear_bit(6);
}
inline ::google::protobuf::int32 RceUnitDamaged::destroyed() const {
  return destroyed_;
}
inline void RceUnitDamaged::set_destroyed(::google::protobuf::int32 value) {
  _set_bit(6);
  destroyed_ = value;
}

// repeated string attackers = 8;
inline int RceUnitDamaged::attackers_size() const {
  return attackers_.size();
}
inline void RceUnitDamaged::clear_attackers() {
  attackers_.Clear();
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
RceUnitDamaged::attackers() const {
  return attackers_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
RceUnitDamaged::mutable_attackers() {
  return &attackers_;
}
inline const ::std::string& RceUnitDamaged::attackers(int index) const {
  return attackers_.Get(index);
}
inline ::std::string* RceUnitDamaged::mutable_attackers(int index) {
  return attackers_.Mutable(index);
}
inline void RceUnitDamaged::set_attackers(int index, const ::std::string& value) {
  attackers_.Mutable(index)->assign(value);
}
inline void RceUnitDamaged::set_attackers(int index, const char* value) {
  attackers_.Mutable(index)->assign(value);
}
inline void RceUnitDamaged::set_attackers(int index, const char* value, size_t size) {
  attackers_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RceUnitDamaged::add_attackers() {
  return attackers_.Add();
}
inline void RceUnitDamaged::add_attackers(const ::std::string& value) {
  attackers_.Add()->assign(value);
}
inline void RceUnitDamaged::add_attackers(const char* value) {
  attackers_.Add()->assign(value);
}
inline void RceUnitDamaged::add_attackers(const char* value, size_t size) {
  attackers_.Add()->assign(reinterpret_cast<const char*>(value), size);
}


#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

#endif  // PROTOBUF_RceUnitDamaged_2eproto__INCLUDED
