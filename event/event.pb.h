// Generated by the protocol buffer compiler.  DO NOT EDIT!

#ifndef PROTOBUF_event_2eproto__INCLUDED
#define PROTOBUF_event_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2002000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2002000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>
#include "RseAuthState.pb.h"
#include "RseBroadcast.pb.h"

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_event_2eproto();
void protobuf_AssignDesc_event_2eproto();
void protobuf_ShutdownFile_event_2eproto();

class Forward;
class WorkingStatusData;
class UserLeave;
class UserAuthData;
class Event;

// ===================================================================

class Forward : public ::google::protobuf::Message {
 public:
  Forward();
  virtual ~Forward();
  
  Forward(const Forward& from);
  
  inline Forward& operator=(const Forward& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const Forward& default_instance();
  void Swap(Forward* other);
  
  // implements Message ----------------------------------------------
  
  Forward* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Forward& from);
  void MergeFrom(const Forward& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const { _cached_size_ = size; }
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional int32 serveridFrom = 1;
  inline bool has_serveridfrom() const;
  inline void clear_serveridfrom();
  static const int kServeridFromFieldNumber = 1;
  inline ::google::protobuf::int32 serveridfrom() const;
  inline void set_serveridfrom(::google::protobuf::int32 value);
  
  // optional int32 serveridTo = 2;
  inline bool has_serveridto() const;
  inline void clear_serveridto();
  static const int kServeridToFieldNumber = 2;
  inline ::google::protobuf::int32 serveridto() const;
  inline void set_serveridto(::google::protobuf::int32 value);
  
  // optional int32 serverfdFrom = 3;
  inline bool has_serverfdfrom() const;
  inline void clear_serverfdfrom();
  static const int kServerfdFromFieldNumber = 3;
  inline ::google::protobuf::int32 serverfdfrom() const;
  inline void set_serverfdfrom(::google::protobuf::int32 value);
  
  // optional int32 serverfdTo = 4;
  inline bool has_serverfdto() const;
  inline void clear_serverfdto();
  static const int kServerfdToFieldNumber = 4;
  inline ::google::protobuf::int32 serverfdto() const;
  inline void set_serverfdto(::google::protobuf::int32 value);
  
  // optional int32 worldfd = 5;
  inline bool has_worldfd() const;
  inline void clear_worldfd();
  static const int kWorldfdFieldNumber = 5;
  inline ::google::protobuf::int32 worldfd() const;
  inline void set_worldfd(::google::protobuf::int32 value);
  
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::google::protobuf::int32 serveridfrom_;
  ::google::protobuf::int32 serveridto_;
  ::google::protobuf::int32 serverfdfrom_;
  ::google::protobuf::int32 serverfdto_;
  ::google::protobuf::int32 worldfd_;
  friend void  protobuf_AddDesc_event_2eproto();
  friend void protobuf_AssignDesc_event_2eproto();
  friend void protobuf_ShutdownFile_event_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static Forward* default_instance_;
};
// -------------------------------------------------------------------

class WorkingStatusData : public ::google::protobuf::Message {
 public:
  WorkingStatusData();
  virtual ~WorkingStatusData();
  
  WorkingStatusData(const WorkingStatusData& from);
  
  inline WorkingStatusData& operator=(const WorkingStatusData& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const WorkingStatusData& default_instance();
  void Swap(WorkingStatusData* other);
  
  // implements Message ----------------------------------------------
  
  WorkingStatusData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const WorkingStatusData& from);
  void MergeFrom(const WorkingStatusData& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const { _cached_size_ = size; }
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required int32 gid = 1;
  inline bool has_gid() const;
  inline void clear_gid();
  static const int kGidFieldNumber = 1;
  inline ::google::protobuf::int32 gid() const;
  inline void set_gid(::google::protobuf::int32 value);
  
  // required bool finish = 2;
  inline bool has_finish() const;
  inline void clear_finish();
  static const int kFinishFieldNumber = 2;
  inline bool finish() const;
  inline void set_finish(bool value);
  
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::google::protobuf::int32 gid_;
  bool finish_;
  friend void  protobuf_AddDesc_event_2eproto();
  friend void protobuf_AssignDesc_event_2eproto();
  friend void protobuf_ShutdownFile_event_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static WorkingStatusData* default_instance_;
};
// -------------------------------------------------------------------

class UserLeave : public ::google::protobuf::Message {
 public:
  UserLeave();
  virtual ~UserLeave();
  
  UserLeave(const UserLeave& from);
  
  inline UserLeave& operator=(const UserLeave& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const UserLeave& default_instance();
  void Swap(UserLeave* other);
  
  // implements Message ----------------------------------------------
  
  UserLeave* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const UserLeave& from);
  void MergeFrom(const UserLeave& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const { _cached_size_ = size; }
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required int32 fd = 1;
  inline bool has_fd() const;
  inline void clear_fd();
  static const int kFdFieldNumber = 1;
  inline ::google::protobuf::int32 fd() const;
  inline void set_fd(::google::protobuf::int32 value);
  
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::google::protobuf::int32 fd_;
  friend void  protobuf_AddDesc_event_2eproto();
  friend void protobuf_AssignDesc_event_2eproto();
  friend void protobuf_ShutdownFile_event_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static UserLeave* default_instance_;
};
// -------------------------------------------------------------------

class UserAuthData : public ::google::protobuf::Message {
 public:
  UserAuthData();
  virtual ~UserAuthData();
  
  UserAuthData(const UserAuthData& from);
  
  inline UserAuthData& operator=(const UserAuthData& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const UserAuthData& default_instance();
  void Swap(UserAuthData* other);
  
  // implements Message ----------------------------------------------
  
  UserAuthData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const UserAuthData& from);
  void MergeFrom(const UserAuthData& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const { _cached_size_ = size; }
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required int64 uid = 1;
  inline bool has_uid() const;
  inline void clear_uid();
  static const int kUidFieldNumber = 1;
  inline ::google::protobuf::int64 uid() const;
  inline void set_uid(::google::protobuf::int64 value);
  
  // required int64 secret = 2;
  inline bool has_secret() const;
  inline void clear_secret();
  static const int kSecretFieldNumber = 2;
  inline ::google::protobuf::int64 secret() const;
  inline void set_secret(::google::protobuf::int64 value);
  
  // required int32 sockfd = 3;
  inline bool has_sockfd() const;
  inline void clear_sockfd();
  static const int kSockfdFieldNumber = 3;
  inline ::google::protobuf::int32 sockfd() const;
  inline void set_sockfd(::google::protobuf::int32 value);
  
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::google::protobuf::int64 uid_;
  ::google::protobuf::int64 secret_;
  ::google::protobuf::int32 sockfd_;
  friend void  protobuf_AddDesc_event_2eproto();
  friend void protobuf_AssignDesc_event_2eproto();
  friend void protobuf_ShutdownFile_event_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static UserAuthData* default_instance_;
};
// -------------------------------------------------------------------

class Event : public ::google::protobuf::Message {
 public:
  Event();
  virtual ~Event();
  
  Event(const Event& from);
  
  inline Event& operator=(const Event& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const Event& default_instance();
  void Swap(Event* other);
  
  // implements Message ----------------------------------------------
  
  Event* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Event& from);
  void MergeFrom(const Event& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const { _cached_size_ = size; }
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required int32 cmd = 1;
  inline bool has_cmd() const;
  inline void clear_cmd();
  static const int kCmdFieldNumber = 1;
  inline ::google::protobuf::int32 cmd() const;
  inline void set_cmd(::google::protobuf::int32 value);
  
  // required int32 state = 2;
  inline bool has_state() const;
  inline void clear_state();
  static const int kStateFieldNumber = 2;
  inline ::google::protobuf::int32 state() const;
  inline void set_state(::google::protobuf::int32 value);
  
  // required int64 time = 3;
  inline bool has_time() const;
  inline void clear_time();
  static const int kTimeFieldNumber = 3;
  inline ::google::protobuf::int64 time() const;
  inline void set_time(::google::protobuf::int64 value);
  
  // optional int64 uid = 4;
  inline bool has_uid() const;
  inline void clear_uid();
  static const int kUidFieldNumber = 4;
  inline ::google::protobuf::int64 uid() const;
  inline void set_uid(::google::protobuf::int64 value);
  
  // optional .Forward forward = 5;
  inline bool has_forward() const;
  inline void clear_forward();
  static const int kForwardFieldNumber = 5;
  inline const ::Forward& forward() const;
  inline ::Forward* mutable_forward();
  
  // optional string content = 6;
  inline bool has_content() const;
  inline void clear_content();
  static const int kContentFieldNumber = 6;
  inline const ::std::string& content() const;
  inline void set_content(const ::std::string& value);
  inline void set_content(const char* value);
  inline void set_content(const char* value, size_t size);
  inline ::std::string* mutable_content();
  
  // optional .WorkingStatusData workingStatus = 64;
  inline bool has_workingstatus() const;
  inline void clear_workingstatus();
  static const int kWorkingStatusFieldNumber = 64;
  inline const ::WorkingStatusData& workingstatus() const;
  inline ::WorkingStatusData* mutable_workingstatus();
  
  // optional .UserAuthData userAuthData = 65;
  inline bool has_userauthdata() const;
  inline void clear_userauthdata();
  static const int kUserAuthDataFieldNumber = 65;
  inline const ::UserAuthData& userauthdata() const;
  inline ::UserAuthData* mutable_userauthdata();
  
  // optional .UserLeave userleave = 68;
  inline bool has_userleave() const;
  inline void clear_userleave();
  static const int kUserleaveFieldNumber = 68;
  inline const ::UserLeave& userleave() const;
  inline ::UserLeave* mutable_userleave();
  
  // optional .RseBroadcast se_RseBroadcast = 192;
  inline bool has_se_rsebroadcast() const;
  inline void clear_se_rsebroadcast();
  static const int kSeRseBroadcastFieldNumber = 192;
  inline const ::RseBroadcast& se_rsebroadcast() const;
  inline ::RseBroadcast* mutable_se_rsebroadcast();
  
  // optional .RseAuthState se_RseAuthState = 193;
  inline bool has_se_rseauthstate() const;
  inline void clear_se_rseauthstate();
  static const int kSeRseAuthStateFieldNumber = 193;
  inline const ::RseAuthState& se_rseauthstate() const;
  inline ::RseAuthState* mutable_se_rseauthstate();
  
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::google::protobuf::int32 cmd_;
  ::google::protobuf::int32 state_;
  ::google::protobuf::int64 time_;
  ::google::protobuf::int64 uid_;
  ::Forward* forward_;
  ::std::string* content_;
  static const ::std::string _default_content_;
  ::WorkingStatusData* workingstatus_;
  ::UserAuthData* userauthdata_;
  ::UserLeave* userleave_;
  ::RseBroadcast* se_rsebroadcast_;
  ::RseAuthState* se_rseauthstate_;
  friend void  protobuf_AddDesc_event_2eproto();
  friend void protobuf_AssignDesc_event_2eproto();
  friend void protobuf_ShutdownFile_event_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(11 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static Event* default_instance_;
};
// ===================================================================


// ===================================================================


// ===================================================================

// Forward

// optional int32 serveridFrom = 1;
inline bool Forward::has_serveridfrom() const {
  return _has_bit(0);
}
inline void Forward::clear_serveridfrom() {
  serveridfrom_ = 0;
  _clear_bit(0);
}
inline ::google::protobuf::int32 Forward::serveridfrom() const {
  return serveridfrom_;
}
inline void Forward::set_serveridfrom(::google::protobuf::int32 value) {
  _set_bit(0);
  serveridfrom_ = value;
}

// optional int32 serveridTo = 2;
inline bool Forward::has_serveridto() const {
  return _has_bit(1);
}
inline void Forward::clear_serveridto() {
  serveridto_ = 0;
  _clear_bit(1);
}
inline ::google::protobuf::int32 Forward::serveridto() const {
  return serveridto_;
}
inline void Forward::set_serveridto(::google::protobuf::int32 value) {
  _set_bit(1);
  serveridto_ = value;
}

// optional int32 serverfdFrom = 3;
inline bool Forward::has_serverfdfrom() const {
  return _has_bit(2);
}
inline void Forward::clear_serverfdfrom() {
  serverfdfrom_ = 0;
  _clear_bit(2);
}
inline ::google::protobuf::int32 Forward::serverfdfrom() const {
  return serverfdfrom_;
}
inline void Forward::set_serverfdfrom(::google::protobuf::int32 value) {
  _set_bit(2);
  serverfdfrom_ = value;
}

// optional int32 serverfdTo = 4;
inline bool Forward::has_serverfdto() const {
  return _has_bit(3);
}
inline void Forward::clear_serverfdto() {
  serverfdto_ = 0;
  _clear_bit(3);
}
inline ::google::protobuf::int32 Forward::serverfdto() const {
  return serverfdto_;
}
inline void Forward::set_serverfdto(::google::protobuf::int32 value) {
  _set_bit(3);
  serverfdto_ = value;
}

// optional int32 worldfd = 5;
inline bool Forward::has_worldfd() const {
  return _has_bit(4);
}
inline void Forward::clear_worldfd() {
  worldfd_ = 0;
  _clear_bit(4);
}
inline ::google::protobuf::int32 Forward::worldfd() const {
  return worldfd_;
}
inline void Forward::set_worldfd(::google::protobuf::int32 value) {
  _set_bit(4);
  worldfd_ = value;
}

// -------------------------------------------------------------------

// WorkingStatusData

// required int32 gid = 1;
inline bool WorkingStatusData::has_gid() const {
  return _has_bit(0);
}
inline void WorkingStatusData::clear_gid() {
  gid_ = 0;
  _clear_bit(0);
}
inline ::google::protobuf::int32 WorkingStatusData::gid() const {
  return gid_;
}
inline void WorkingStatusData::set_gid(::google::protobuf::int32 value) {
  _set_bit(0);
  gid_ = value;
}

// required bool finish = 2;
inline bool WorkingStatusData::has_finish() const {
  return _has_bit(1);
}
inline void WorkingStatusData::clear_finish() {
  finish_ = false;
  _clear_bit(1);
}
inline bool WorkingStatusData::finish() const {
  return finish_;
}
inline void WorkingStatusData::set_finish(bool value) {
  _set_bit(1);
  finish_ = value;
}

// -------------------------------------------------------------------

// UserLeave

// required int32 fd = 1;
inline bool UserLeave::has_fd() const {
  return _has_bit(0);
}
inline void UserLeave::clear_fd() {
  fd_ = 0;
  _clear_bit(0);
}
inline ::google::protobuf::int32 UserLeave::fd() const {
  return fd_;
}
inline void UserLeave::set_fd(::google::protobuf::int32 value) {
  _set_bit(0);
  fd_ = value;
}

// -------------------------------------------------------------------

// UserAuthData

// required int64 uid = 1;
inline bool UserAuthData::has_uid() const {
  return _has_bit(0);
}
inline void UserAuthData::clear_uid() {
  uid_ = GOOGLE_LONGLONG(0);
  _clear_bit(0);
}
inline ::google::protobuf::int64 UserAuthData::uid() const {
  return uid_;
}
inline void UserAuthData::set_uid(::google::protobuf::int64 value) {
  _set_bit(0);
  uid_ = value;
}

// required int64 secret = 2;
inline bool UserAuthData::has_secret() const {
  return _has_bit(1);
}
inline void UserAuthData::clear_secret() {
  secret_ = GOOGLE_LONGLONG(0);
  _clear_bit(1);
}
inline ::google::protobuf::int64 UserAuthData::secret() const {
  return secret_;
}
inline void UserAuthData::set_secret(::google::protobuf::int64 value) {
  _set_bit(1);
  secret_ = value;
}

// required int32 sockfd = 3;
inline bool UserAuthData::has_sockfd() const {
  return _has_bit(2);
}
inline void UserAuthData::clear_sockfd() {
  sockfd_ = 0;
  _clear_bit(2);
}
inline ::google::protobuf::int32 UserAuthData::sockfd() const {
  return sockfd_;
}
inline void UserAuthData::set_sockfd(::google::protobuf::int32 value) {
  _set_bit(2);
  sockfd_ = value;
}

// -------------------------------------------------------------------

// Event

// required int32 cmd = 1;
inline bool Event::has_cmd() const {
  return _has_bit(0);
}
inline void Event::clear_cmd() {
  cmd_ = 0;
  _clear_bit(0);
}
inline ::google::protobuf::int32 Event::cmd() const {
  return cmd_;
}
inline void Event::set_cmd(::google::protobuf::int32 value) {
  _set_bit(0);
  cmd_ = value;
}

// required int32 state = 2;
inline bool Event::has_state() const {
  return _has_bit(1);
}
inline void Event::clear_state() {
  state_ = 0;
  _clear_bit(1);
}
inline ::google::protobuf::int32 Event::state() const {
  return state_;
}
inline void Event::set_state(::google::protobuf::int32 value) {
  _set_bit(1);
  state_ = value;
}

// required int64 time = 3;
inline bool Event::has_time() const {
  return _has_bit(2);
}
inline void Event::clear_time() {
  time_ = GOOGLE_LONGLONG(0);
  _clear_bit(2);
}
inline ::google::protobuf::int64 Event::time() const {
  return time_;
}
inline void Event::set_time(::google::protobuf::int64 value) {
  _set_bit(2);
  time_ = value;
}

// optional int64 uid = 4;
inline bool Event::has_uid() const {
  return _has_bit(3);
}
inline void Event::clear_uid() {
  uid_ = GOOGLE_LONGLONG(0);
  _clear_bit(3);
}
inline ::google::protobuf::int64 Event::uid() const {
  return uid_;
}
inline void Event::set_uid(::google::protobuf::int64 value) {
  _set_bit(3);
  uid_ = value;
}

// optional .Forward forward = 5;
inline bool Event::has_forward() const {
  return _has_bit(4);
}
inline void Event::clear_forward() {
  if (forward_ != NULL) forward_->::Forward::Clear();
  _clear_bit(4);
}
inline const ::Forward& Event::forward() const {
  return forward_ != NULL ? *forward_ : *default_instance_->forward_;
}
inline ::Forward* Event::mutable_forward() {
  _set_bit(4);
  if (forward_ == NULL) forward_ = new ::Forward;
  return forward_;
}

// optional string content = 6;
inline bool Event::has_content() const {
  return _has_bit(5);
}
inline void Event::clear_content() {
  if (content_ != &_default_content_) {
    content_->clear();
  }
  _clear_bit(5);
}
inline const ::std::string& Event::content() const {
  return *content_;
}
inline void Event::set_content(const ::std::string& value) {
  _set_bit(5);
  if (content_ == &_default_content_) {
    content_ = new ::std::string;
  }
  content_->assign(value);
}
inline void Event::set_content(const char* value) {
  _set_bit(5);
  if (content_ == &_default_content_) {
    content_ = new ::std::string;
  }
  content_->assign(value);
}
inline void Event::set_content(const char* value, size_t size) {
  _set_bit(5);
  if (content_ == &_default_content_) {
    content_ = new ::std::string;
  }
  content_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Event::mutable_content() {
  _set_bit(5);
  if (content_ == &_default_content_) {
    content_ = new ::std::string;
  }
  return content_;
}

// optional .WorkingStatusData workingStatus = 64;
inline bool Event::has_workingstatus() const {
  return _has_bit(6);
}
inline void Event::clear_workingstatus() {
  if (workingstatus_ != NULL) workingstatus_->::WorkingStatusData::Clear();
  _clear_bit(6);
}
inline const ::WorkingStatusData& Event::workingstatus() const {
  return workingstatus_ != NULL ? *workingstatus_ : *default_instance_->workingstatus_;
}
inline ::WorkingStatusData* Event::mutable_workingstatus() {
  _set_bit(6);
  if (workingstatus_ == NULL) workingstatus_ = new ::WorkingStatusData;
  return workingstatus_;
}

// optional .UserAuthData userAuthData = 65;
inline bool Event::has_userauthdata() const {
  return _has_bit(7);
}
inline void Event::clear_userauthdata() {
  if (userauthdata_ != NULL) userauthdata_->::UserAuthData::Clear();
  _clear_bit(7);
}
inline const ::UserAuthData& Event::userauthdata() const {
  return userauthdata_ != NULL ? *userauthdata_ : *default_instance_->userauthdata_;
}
inline ::UserAuthData* Event::mutable_userauthdata() {
  _set_bit(7);
  if (userauthdata_ == NULL) userauthdata_ = new ::UserAuthData;
  return userauthdata_;
}

// optional .UserLeave userleave = 68;
inline bool Event::has_userleave() const {
  return _has_bit(8);
}
inline void Event::clear_userleave() {
  if (userleave_ != NULL) userleave_->::UserLeave::Clear();
  _clear_bit(8);
}
inline const ::UserLeave& Event::userleave() const {
  return userleave_ != NULL ? *userleave_ : *default_instance_->userleave_;
}
inline ::UserLeave* Event::mutable_userleave() {
  _set_bit(8);
  if (userleave_ == NULL) userleave_ = new ::UserLeave;
  return userleave_;
}

// optional .RseBroadcast se_RseBroadcast = 192;
inline bool Event::has_se_rsebroadcast() const {
  return _has_bit(9);
}
inline void Event::clear_se_rsebroadcast() {
  if (se_rsebroadcast_ != NULL) se_rsebroadcast_->::RseBroadcast::Clear();
  _clear_bit(9);
}
inline const ::RseBroadcast& Event::se_rsebroadcast() const {
  return se_rsebroadcast_ != NULL ? *se_rsebroadcast_ : *default_instance_->se_rsebroadcast_;
}
inline ::RseBroadcast* Event::mutable_se_rsebroadcast() {
  _set_bit(9);
  if (se_rsebroadcast_ == NULL) se_rsebroadcast_ = new ::RseBroadcast;
  return se_rsebroadcast_;
}

// optional .RseAuthState se_RseAuthState = 193;
inline bool Event::has_se_rseauthstate() const {
  return _has_bit(10);
}
inline void Event::clear_se_rseauthstate() {
  if (se_rseauthstate_ != NULL) se_rseauthstate_->::RseAuthState::Clear();
  _clear_bit(10);
}
inline const ::RseAuthState& Event::se_rseauthstate() const {
  return se_rseauthstate_ != NULL ? *se_rseauthstate_ : *default_instance_->se_rseauthstate_;
}
inline ::RseAuthState* Event::mutable_se_rseauthstate() {
  _set_bit(10);
  if (se_rseauthstate_ == NULL) se_rseauthstate_ = new ::RseAuthState;
  return se_rseauthstate_;
}


#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

#endif  // PROTOBUF_event_2eproto__INCLUDED
