// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "RceQueryStarInfo.pb.h"
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>

namespace {

const ::google::protobuf::Descriptor* RceQueryStarInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RceQueryStarInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* Coords_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Coords_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_RceQueryStarInfo_2eproto() {
  protobuf_AddDesc_RceQueryStarInfo_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "RceQueryStarInfo.proto");
  GOOGLE_CHECK(file != NULL);
  RceQueryStarInfo_descriptor_ = file->message_type(0);
  static const int RceQueryStarInfo_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RceQueryStarInfo, coordy_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RceQueryStarInfo, planetid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RceQueryStarInfo, coords_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RceQueryStarInfo, coordx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RceQueryStarInfo, starid_),
  };
  RceQueryStarInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RceQueryStarInfo_descriptor_,
      RceQueryStarInfo::default_instance_,
      RceQueryStarInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RceQueryStarInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RceQueryStarInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RceQueryStarInfo));
  Coords_descriptor_ = file->message_type(1);
  static const int Coords_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Coords, x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Coords, z_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Coords, y_),
  };
  Coords_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Coords_descriptor_,
      Coords::default_instance_,
      Coords_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Coords, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Coords, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Coords));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_RceQueryStarInfo_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RceQueryStarInfo_descriptor_, &RceQueryStarInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Coords_descriptor_, &Coords::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_RceQueryStarInfo_2eproto() {
  delete RceQueryStarInfo::default_instance_;
  delete RceQueryStarInfo_reflection_;
  delete Coords::default_instance_;
  delete Coords_reflection_;
}

void protobuf_AddDesc_RceQueryStarInfo_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\026RceQueryStarInfo.proto\"m\n\020RceQueryStar"
    "Info\022\016\n\006coordY\030\001 \001(\005\022\020\n\010planetId\030\002 \001(\t\022\027"
    "\n\006coords\030\003 \001(\0132\007.Coords\022\016\n\006coordX\030\004 \001(\005\022"
    "\016\n\006starId\030\005 \001(\005\")\n\006Coords\022\t\n\001x\030\001 \001(\005\022\t\n\001"
    "z\030\002 \001(\005\022\t\n\001y\030\003 \001(\005", 178);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "RceQueryStarInfo.proto", &protobuf_RegisterTypes);
  RceQueryStarInfo::default_instance_ = new RceQueryStarInfo();
  Coords::default_instance_ = new Coords();
  RceQueryStarInfo::default_instance_->InitAsDefaultInstance();
  Coords::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_RceQueryStarInfo_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_RceQueryStarInfo_2eproto {
  StaticDescriptorInitializer_RceQueryStarInfo_2eproto() {
    protobuf_AddDesc_RceQueryStarInfo_2eproto();
  }
} static_descriptor_initializer_RceQueryStarInfo_2eproto_;


// ===================================================================

const ::std::string RceQueryStarInfo::_default_planetid_;
#ifndef _MSC_VER
const int RceQueryStarInfo::kCoordYFieldNumber;
const int RceQueryStarInfo::kPlanetIdFieldNumber;
const int RceQueryStarInfo::kCoordsFieldNumber;
const int RceQueryStarInfo::kCoordXFieldNumber;
const int RceQueryStarInfo::kStarIdFieldNumber;
#endif  // !_MSC_VER

RceQueryStarInfo::RceQueryStarInfo() {
  SharedCtor();
}

void RceQueryStarInfo::InitAsDefaultInstance() {
  coords_ = const_cast< ::Coords*>(&::Coords::default_instance());
}

RceQueryStarInfo::RceQueryStarInfo(const RceQueryStarInfo& from) {
  SharedCtor();
  MergeFrom(from);
}

void RceQueryStarInfo::SharedCtor() {
  _cached_size_ = 0;
  coordy_ = 0;
  planetid_ = const_cast< ::std::string*>(&_default_planetid_);
  coords_ = NULL;
  coordx_ = 0;
  starid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RceQueryStarInfo::~RceQueryStarInfo() {
  SharedDtor();
}

void RceQueryStarInfo::SharedDtor() {
  if (planetid_ != &_default_planetid_) {
    delete planetid_;
  }
  if (this != default_instance_) {
    delete coords_;
  }
}

const ::google::protobuf::Descriptor* RceQueryStarInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RceQueryStarInfo_descriptor_;
}

const RceQueryStarInfo& RceQueryStarInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_RceQueryStarInfo_2eproto();  return *default_instance_;
}

RceQueryStarInfo* RceQueryStarInfo::default_instance_ = NULL;

RceQueryStarInfo* RceQueryStarInfo::New() const {
  return new RceQueryStarInfo;
}

void RceQueryStarInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    coordy_ = 0;
    if (_has_bit(1)) {
      if (planetid_ != &_default_planetid_) {
        planetid_->clear();
      }
    }
    if (_has_bit(2)) {
      if (coords_ != NULL) coords_->::Coords::Clear();
    }
    coordx_ = 0;
    starid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RceQueryStarInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 coordY = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &coordy_));
        _set_bit(0);
        if (input->ExpectTag(18)) goto parse_planetId;
        break;
      }
      
      // optional string planetId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_planetId:
        DO_(::google::protobuf::internal::WireFormatLite::ReadString(
              input, this->mutable_planetid()));
        ::google::protobuf::internal::WireFormat::VerifyUTF8String(
          this->planetid().data(), this->planetid().length(),
          ::google::protobuf::internal::WireFormat::PARSE);
        if (input->ExpectTag(26)) goto parse_coords;
        break;
      }
      
      // optional .Coords coords = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_coords:
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
             input, mutable_coords()));
        if (input->ExpectTag(32)) goto parse_coordX;
        break;
      }
      
      // optional int32 coordX = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_coordX:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &coordx_));
        _set_bit(3);
        if (input->ExpectTag(40)) goto parse_starId;
        break;
      }
      
      // optional int32 starId = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_starId:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &starid_));
        _set_bit(4);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RceQueryStarInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    RceQueryStarInfo::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional int32 coordY = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->coordy(), output);
  }
  
  // optional string planetId = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->planetid().data(), this->planetid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->planetid(), output);
  }
  
  // optional .Coords coords = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      3, this->coords(), output);
  }
  
  // optional int32 coordX = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->coordx(), output);
  }
  
  // optional int32 starId = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->starid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RceQueryStarInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 coordY = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->coordy(), target);
  }
  
  // optional string planetId = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->planetid().data(), this->planetid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->planetid(), target);
  }
  
  // optional .Coords coords = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->coords(), target);
  }
  
  // optional int32 coordX = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->coordx(), target);
  }
  
  // optional int32 starId = 5;
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->starid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RceQueryStarInfo::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 coordY = 1;
    if (has_coordy()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->coordy());
    }
    
    // optional string planetId = 2;
    if (has_planetid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->planetid());
    }
    
    // optional .Coords coords = 3;
    if (has_coords()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->coords());
    }
    
    // optional int32 coordX = 4;
    if (has_coordx()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->coordx());
    }
    
    // optional int32 starId = 5;
    if (has_starid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->starid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void RceQueryStarInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RceQueryStarInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RceQueryStarInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RceQueryStarInfo::MergeFrom(const RceQueryStarInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_coordy(from.coordy());
    }
    if (from._has_bit(1)) {
      set_planetid(from.planetid());
    }
    if (from._has_bit(2)) {
      mutable_coords()->::Coords::MergeFrom(from.coords());
    }
    if (from._has_bit(3)) {
      set_coordx(from.coordx());
    }
    if (from._has_bit(4)) {
      set_starid(from.starid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RceQueryStarInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RceQueryStarInfo::CopyFrom(const RceQueryStarInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RceQueryStarInfo::IsInitialized() const {
  
  return true;
}

void RceQueryStarInfo::Swap(RceQueryStarInfo* other) {
  if (other != this) {
    std::swap(coordy_, other->coordy_);
    std::swap(planetid_, other->planetid_);
    std::swap(coords_, other->coords_);
    std::swap(coordx_, other->coordx_);
    std::swap(starid_, other->starid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RceQueryStarInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RceQueryStarInfo_descriptor_;
  metadata.reflection = RceQueryStarInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Coords::kXFieldNumber;
const int Coords::kZFieldNumber;
const int Coords::kYFieldNumber;
#endif  // !_MSC_VER

Coords::Coords() {
  SharedCtor();
}

void Coords::InitAsDefaultInstance() {
}

Coords::Coords(const Coords& from) {
  SharedCtor();
  MergeFrom(from);
}

void Coords::SharedCtor() {
  _cached_size_ = 0;
  x_ = 0;
  z_ = 0;
  y_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Coords::~Coords() {
  SharedDtor();
}

void Coords::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* Coords::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Coords_descriptor_;
}

const Coords& Coords::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_RceQueryStarInfo_2eproto();  return *default_instance_;
}

Coords* Coords::default_instance_ = NULL;

Coords* Coords::New() const {
  return new Coords;
}

void Coords::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    x_ = 0;
    z_ = 0;
    y_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Coords::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 x = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &x_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_z;
        break;
      }
      
      // optional int32 z = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_z:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &z_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_y;
        break;
      }
      
      // optional int32 y = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_y:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &y_));
        _set_bit(2);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Coords::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    Coords::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional int32 x = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->x(), output);
  }
  
  // optional int32 z = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->z(), output);
  }
  
  // optional int32 y = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->y(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Coords::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 x = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->x(), target);
  }
  
  // optional int32 z = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->z(), target);
  }
  
  // optional int32 y = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->y(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Coords::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 x = 1;
    if (has_x()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->x());
    }
    
    // optional int32 z = 2;
    if (has_z()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->z());
    }
    
    // optional int32 y = 3;
    if (has_y()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->y());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void Coords::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Coords* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Coords*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Coords::MergeFrom(const Coords& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_x(from.x());
    }
    if (from._has_bit(1)) {
      set_z(from.z());
    }
    if (from._has_bit(2)) {
      set_y(from.y());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Coords::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Coords::CopyFrom(const Coords& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Coords::IsInitialized() const {
  
  return true;
}

void Coords::Swap(Coords* other) {
  if (other != this) {
    std::swap(x_, other->x_);
    std::swap(z_, other->z_);
    std::swap(y_, other->y_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Coords::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Coords_descriptor_;
  metadata.reflection = Coords_reflection_;
  return metadata;
}

