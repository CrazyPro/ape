// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "RceObtainPayUrlParame.pb.h"
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>

namespace {

const ::google::protobuf::Descriptor* RceObtainPayUrlParame_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RceObtainPayUrlParame_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_RceObtainPayUrlParame_2eproto() {
  protobuf_AddDesc_RceObtainPayUrlParame_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "RceObtainPayUrlParame.proto");
  GOOGLE_CHECK(file != NULL);
  RceObtainPayUrlParame_descriptor_ = file->message_type(0);
  static const int RceObtainPayUrlParame_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RceObtainPayUrlParame, openid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RceObtainPayUrlParame, appmode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RceObtainPayUrlParame, platid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RceObtainPayUrlParame, planetid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RceObtainPayUrlParame, goodsmeta_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RceObtainPayUrlParame, gdurl_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RceObtainPayUrlParame, payitem_),
  };
  RceObtainPayUrlParame_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RceObtainPayUrlParame_descriptor_,
      RceObtainPayUrlParame::default_instance_,
      RceObtainPayUrlParame_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RceObtainPayUrlParame, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RceObtainPayUrlParame, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RceObtainPayUrlParame));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_RceObtainPayUrlParame_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RceObtainPayUrlParame_descriptor_, &RceObtainPayUrlParame::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_RceObtainPayUrlParame_2eproto() {
  delete RceObtainPayUrlParame::default_instance_;
  delete RceObtainPayUrlParame_reflection_;
}

void protobuf_AddDesc_RceObtainPayUrlParame_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\033RceObtainPayUrlParame.proto\"\215\001\n\025RceObt"
    "ainPayUrlParame\022\016\n\006openid\030\001 \001(\t\022\017\n\007appmo"
    "de\030\002 \001(\005\022\016\n\006platId\030\003 \001(\t\022\020\n\010planetId\030\004 \001"
    "(\t\022\021\n\tgoodsmeta\030\005 \001(\t\022\r\n\005gdurl\030\006 \001(\t\022\017\n\007"
    "payitem\030\007 \001(\t", 173);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "RceObtainPayUrlParame.proto", &protobuf_RegisterTypes);
  RceObtainPayUrlParame::default_instance_ = new RceObtainPayUrlParame();
  RceObtainPayUrlParame::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_RceObtainPayUrlParame_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_RceObtainPayUrlParame_2eproto {
  StaticDescriptorInitializer_RceObtainPayUrlParame_2eproto() {
    protobuf_AddDesc_RceObtainPayUrlParame_2eproto();
  }
} static_descriptor_initializer_RceObtainPayUrlParame_2eproto_;


// ===================================================================

const ::std::string RceObtainPayUrlParame::_default_openid_;
const ::std::string RceObtainPayUrlParame::_default_platid_;
const ::std::string RceObtainPayUrlParame::_default_planetid_;
const ::std::string RceObtainPayUrlParame::_default_goodsmeta_;
const ::std::string RceObtainPayUrlParame::_default_gdurl_;
const ::std::string RceObtainPayUrlParame::_default_payitem_;
#ifndef _MSC_VER
const int RceObtainPayUrlParame::kOpenidFieldNumber;
const int RceObtainPayUrlParame::kAppmodeFieldNumber;
const int RceObtainPayUrlParame::kPlatIdFieldNumber;
const int RceObtainPayUrlParame::kPlanetIdFieldNumber;
const int RceObtainPayUrlParame::kGoodsmetaFieldNumber;
const int RceObtainPayUrlParame::kGdurlFieldNumber;
const int RceObtainPayUrlParame::kPayitemFieldNumber;
#endif  // !_MSC_VER

RceObtainPayUrlParame::RceObtainPayUrlParame() {
  SharedCtor();
}

void RceObtainPayUrlParame::InitAsDefaultInstance() {
}

RceObtainPayUrlParame::RceObtainPayUrlParame(const RceObtainPayUrlParame& from) {
  SharedCtor();
  MergeFrom(from);
}

void RceObtainPayUrlParame::SharedCtor() {
  _cached_size_ = 0;
  openid_ = const_cast< ::std::string*>(&_default_openid_);
  appmode_ = 0;
  platid_ = const_cast< ::std::string*>(&_default_platid_);
  planetid_ = const_cast< ::std::string*>(&_default_planetid_);
  goodsmeta_ = const_cast< ::std::string*>(&_default_goodsmeta_);
  gdurl_ = const_cast< ::std::string*>(&_default_gdurl_);
  payitem_ = const_cast< ::std::string*>(&_default_payitem_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RceObtainPayUrlParame::~RceObtainPayUrlParame() {
  SharedDtor();
}

void RceObtainPayUrlParame::SharedDtor() {
  if (openid_ != &_default_openid_) {
    delete openid_;
  }
  if (platid_ != &_default_platid_) {
    delete platid_;
  }
  if (planetid_ != &_default_planetid_) {
    delete planetid_;
  }
  if (goodsmeta_ != &_default_goodsmeta_) {
    delete goodsmeta_;
  }
  if (gdurl_ != &_default_gdurl_) {
    delete gdurl_;
  }
  if (payitem_ != &_default_payitem_) {
    delete payitem_;
  }
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* RceObtainPayUrlParame::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RceObtainPayUrlParame_descriptor_;
}

const RceObtainPayUrlParame& RceObtainPayUrlParame::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_RceObtainPayUrlParame_2eproto();  return *default_instance_;
}

RceObtainPayUrlParame* RceObtainPayUrlParame::default_instance_ = NULL;

RceObtainPayUrlParame* RceObtainPayUrlParame::New() const {
  return new RceObtainPayUrlParame;
}

void RceObtainPayUrlParame::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (openid_ != &_default_openid_) {
        openid_->clear();
      }
    }
    appmode_ = 0;
    if (_has_bit(2)) {
      if (platid_ != &_default_platid_) {
        platid_->clear();
      }
    }
    if (_has_bit(3)) {
      if (planetid_ != &_default_planetid_) {
        planetid_->clear();
      }
    }
    if (_has_bit(4)) {
      if (goodsmeta_ != &_default_goodsmeta_) {
        goodsmeta_->clear();
      }
    }
    if (_has_bit(5)) {
      if (gdurl_ != &_default_gdurl_) {
        gdurl_->clear();
      }
    }
    if (_has_bit(6)) {
      if (payitem_ != &_default_payitem_) {
        payitem_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RceObtainPayUrlParame::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string openid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadString(
              input, this->mutable_openid()));
        ::google::protobuf::internal::WireFormat::VerifyUTF8String(
          this->openid().data(), this->openid().length(),
          ::google::protobuf::internal::WireFormat::PARSE);
        if (input->ExpectTag(16)) goto parse_appmode;
        break;
      }
      
      // optional int32 appmode = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_appmode:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &appmode_));
        _set_bit(1);
        if (input->ExpectTag(26)) goto parse_platId;
        break;
      }
      
      // optional string platId = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_platId:
        DO_(::google::protobuf::internal::WireFormatLite::ReadString(
              input, this->mutable_platid()));
        ::google::protobuf::internal::WireFormat::VerifyUTF8String(
          this->platid().data(), this->platid().length(),
          ::google::protobuf::internal::WireFormat::PARSE);
        if (input->ExpectTag(34)) goto parse_planetId;
        break;
      }
      
      // optional string planetId = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_planetId:
        DO_(::google::protobuf::internal::WireFormatLite::ReadString(
              input, this->mutable_planetid()));
        ::google::protobuf::internal::WireFormat::VerifyUTF8String(
          this->planetid().data(), this->planetid().length(),
          ::google::protobuf::internal::WireFormat::PARSE);
        if (input->ExpectTag(42)) goto parse_goodsmeta;
        break;
      }
      
      // optional string goodsmeta = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_goodsmeta:
        DO_(::google::protobuf::internal::WireFormatLite::ReadString(
              input, this->mutable_goodsmeta()));
        ::google::protobuf::internal::WireFormat::VerifyUTF8String(
          this->goodsmeta().data(), this->goodsmeta().length(),
          ::google::protobuf::internal::WireFormat::PARSE);
        if (input->ExpectTag(50)) goto parse_gdurl;
        break;
      }
      
      // optional string gdurl = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_gdurl:
        DO_(::google::protobuf::internal::WireFormatLite::ReadString(
              input, this->mutable_gdurl()));
        ::google::protobuf::internal::WireFormat::VerifyUTF8String(
          this->gdurl().data(), this->gdurl().length(),
          ::google::protobuf::internal::WireFormat::PARSE);
        if (input->ExpectTag(58)) goto parse_payitem;
        break;
      }
      
      // optional string payitem = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_payitem:
        DO_(::google::protobuf::internal::WireFormatLite::ReadString(
              input, this->mutable_payitem()));
        ::google::protobuf::internal::WireFormat::VerifyUTF8String(
          this->payitem().data(), this->payitem().length(),
          ::google::protobuf::internal::WireFormat::PARSE);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RceObtainPayUrlParame::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    RceObtainPayUrlParame::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional string openid = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->openid().data(), this->openid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->openid(), output);
  }
  
  // optional int32 appmode = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->appmode(), output);
  }
  
  // optional string platId = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->platid().data(), this->platid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->platid(), output);
  }
  
  // optional string planetId = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->planetid().data(), this->planetid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->planetid(), output);
  }
  
  // optional string goodsmeta = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->goodsmeta().data(), this->goodsmeta().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->goodsmeta(), output);
  }
  
  // optional string gdurl = 6;
  if (_has_bit(5)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->gdurl().data(), this->gdurl().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->gdurl(), output);
  }
  
  // optional string payitem = 7;
  if (_has_bit(6)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->payitem().data(), this->payitem().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->payitem(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RceObtainPayUrlParame::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string openid = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->openid().data(), this->openid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->openid(), target);
  }
  
  // optional int32 appmode = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->appmode(), target);
  }
  
  // optional string platId = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->platid().data(), this->platid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->platid(), target);
  }
  
  // optional string planetId = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->planetid().data(), this->planetid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->planetid(), target);
  }
  
  // optional string goodsmeta = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->goodsmeta().data(), this->goodsmeta().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->goodsmeta(), target);
  }
  
  // optional string gdurl = 6;
  if (_has_bit(5)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->gdurl().data(), this->gdurl().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->gdurl(), target);
  }
  
  // optional string payitem = 7;
  if (_has_bit(6)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->payitem().data(), this->payitem().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->payitem(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RceObtainPayUrlParame::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string openid = 1;
    if (has_openid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->openid());
    }
    
    // optional int32 appmode = 2;
    if (has_appmode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->appmode());
    }
    
    // optional string platId = 3;
    if (has_platid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->platid());
    }
    
    // optional string planetId = 4;
    if (has_planetid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->planetid());
    }
    
    // optional string goodsmeta = 5;
    if (has_goodsmeta()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->goodsmeta());
    }
    
    // optional string gdurl = 6;
    if (has_gdurl()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->gdurl());
    }
    
    // optional string payitem = 7;
    if (has_payitem()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->payitem());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void RceObtainPayUrlParame::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RceObtainPayUrlParame* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RceObtainPayUrlParame*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RceObtainPayUrlParame::MergeFrom(const RceObtainPayUrlParame& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_openid(from.openid());
    }
    if (from._has_bit(1)) {
      set_appmode(from.appmode());
    }
    if (from._has_bit(2)) {
      set_platid(from.platid());
    }
    if (from._has_bit(3)) {
      set_planetid(from.planetid());
    }
    if (from._has_bit(4)) {
      set_goodsmeta(from.goodsmeta());
    }
    if (from._has_bit(5)) {
      set_gdurl(from.gdurl());
    }
    if (from._has_bit(6)) {
      set_payitem(from.payitem());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RceObtainPayUrlParame::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RceObtainPayUrlParame::CopyFrom(const RceObtainPayUrlParame& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RceObtainPayUrlParame::IsInitialized() const {
  
  return true;
}

void RceObtainPayUrlParame::Swap(RceObtainPayUrlParame* other) {
  if (other != this) {
    std::swap(openid_, other->openid_);
    std::swap(appmode_, other->appmode_);
    std::swap(platid_, other->platid_);
    std::swap(planetid_, other->planetid_);
    std::swap(goodsmeta_, other->goodsmeta_);
    std::swap(gdurl_, other->gdurl_);
    std::swap(payitem_, other->payitem_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RceObtainPayUrlParame::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RceObtainPayUrlParame_descriptor_;
  metadata.reflection = RceObtainPayUrlParame_reflection_;
  return metadata;
}

