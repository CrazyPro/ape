// Generated by the protocol buffer compiler.  DO NOT EDIT!

#ifndef PROTOBUF_RseObtainBattleReplay_2eproto__INCLUDED
#define PROTOBUF_RseObtainBattleReplay_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2002000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2002000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_RseObtainBattleReplay_2eproto();
void protobuf_AssignDesc_RseObtainBattleReplay_2eproto();
void protobuf_ShutdownFile_RseObtainBattleReplay_2eproto();

class MsgBattle;
class RseObtainBattleReplay;

// ===================================================================

class MsgBattle : public ::google::protobuf::Message {
 public:
  MsgBattle();
  virtual ~MsgBattle();
  
  MsgBattle(const MsgBattle& from);
  
  inline MsgBattle& operator=(const MsgBattle& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const MsgBattle& default_instance();
  void Swap(MsgBattle* other);
  
  // implements Message ----------------------------------------------
  
  MsgBattle* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MsgBattle& from);
  void MergeFrom(const MsgBattle& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const { _cached_size_ = size; }
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional int32 planetId = 1;
  inline bool has_planetid() const;
  inline void clear_planetid();
  static const int kPlanetIdFieldNumber = 1;
  inline ::google::protobuf::int32 planetid() const;
  inline void set_planetid(::google::protobuf::int32 value);
  
  // repeated int32 Universe = 2;
  inline int universe_size() const;
  inline void clear_universe();
  static const int kUniverseFieldNumber = 2;
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >& universe() const
      ;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >* mutable_universe();
  inline ::google::protobuf::int32 universe(int index) const;
  inline void set_universe(int index, ::google::protobuf::int32 value);
  inline void add_universe(::google::protobuf::int32 value);
  
  // optional int32 accountId = 3;
  inline bool has_accountid() const;
  inline void clear_accountid();
  static const int kAccountIdFieldNumber = 3;
  inline ::google::protobuf::int32 accountid() const;
  inline void set_accountid(::google::protobuf::int32 value);
  
  // optional string name = 4;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 4;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  
  // optional string url = 5;
  inline bool has_url() const;
  inline void clear_url();
  static const int kUrlFieldNumber = 5;
  inline const ::std::string& url() const;
  inline void set_url(const ::std::string& value);
  inline void set_url(const char* value);
  inline void set_url(const char* value, size_t size);
  inline ::std::string* mutable_url();
  
  // optional int32 Deploys = 6;
  inline bool has_deploys() const;
  inline void clear_deploys();
  static const int kDeploysFieldNumber = 6;
  inline ::google::protobuf::int32 deploys() const;
  inline void set_deploys(::google::protobuf::int32 value);
  
  // optional int32 AttackerGameUnits = 7;
  inline bool has_attackergameunits() const;
  inline void clear_attackergameunits();
  static const int kAttackerGameUnitsFieldNumber = 7;
  inline ::google::protobuf::int32 attackergameunits() const;
  inline void set_attackergameunits(::google::protobuf::int32 value);
  
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::google::protobuf::int32 planetid_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > universe_;
  ::google::protobuf::int32 accountid_;
  ::std::string* name_;
  static const ::std::string _default_name_;
  ::std::string* url_;
  static const ::std::string _default_url_;
  ::google::protobuf::int32 deploys_;
  ::google::protobuf::int32 attackergameunits_;
  friend void  protobuf_AddDesc_RseObtainBattleReplay_2eproto();
  friend void protobuf_AssignDesc_RseObtainBattleReplay_2eproto();
  friend void protobuf_ShutdownFile_RseObtainBattleReplay_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(7 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static MsgBattle* default_instance_;
};
// -------------------------------------------------------------------

class RseObtainBattleReplay : public ::google::protobuf::Message {
 public:
  RseObtainBattleReplay();
  virtual ~RseObtainBattleReplay();
  
  RseObtainBattleReplay(const RseObtainBattleReplay& from);
  
  inline RseObtainBattleReplay& operator=(const RseObtainBattleReplay& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const RseObtainBattleReplay& default_instance();
  void Swap(RseObtainBattleReplay* other);
  
  // implements Message ----------------------------------------------
  
  RseObtainBattleReplay* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RseObtainBattleReplay& from);
  void MergeFrom(const RseObtainBattleReplay& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const { _cached_size_ = size; }
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // repeated .MsgBattle Battle = 1;
  inline int battle_size() const;
  inline void clear_battle();
  static const int kBattleFieldNumber = 1;
  inline const ::google::protobuf::RepeatedPtrField< ::MsgBattle >& battle() const;
  inline ::google::protobuf::RepeatedPtrField< ::MsgBattle >* mutable_battle();
  inline const ::MsgBattle& battle(int index) const;
  inline ::MsgBattle* mutable_battle(int index);
  inline ::MsgBattle* add_battle();
  
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::google::protobuf::RepeatedPtrField< ::MsgBattle > battle_;
  friend void  protobuf_AddDesc_RseObtainBattleReplay_2eproto();
  friend void protobuf_AssignDesc_RseObtainBattleReplay_2eproto();
  friend void protobuf_ShutdownFile_RseObtainBattleReplay_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static RseObtainBattleReplay* default_instance_;
};
// ===================================================================


// ===================================================================


// ===================================================================

// MsgBattle

// optional int32 planetId = 1;
inline bool MsgBattle::has_planetid() const {
  return _has_bit(0);
}
inline void MsgBattle::clear_planetid() {
  planetid_ = 0;
  _clear_bit(0);
}
inline ::google::protobuf::int32 MsgBattle::planetid() const {
  return planetid_;
}
inline void MsgBattle::set_planetid(::google::protobuf::int32 value) {
  _set_bit(0);
  planetid_ = value;
}

// repeated int32 Universe = 2;
inline int MsgBattle::universe_size() const {
  return universe_.size();
}
inline void MsgBattle::clear_universe() {
  universe_.Clear();
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
MsgBattle::universe() const {
  return universe_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
MsgBattle::mutable_universe() {
  return &universe_;
}
inline ::google::protobuf::int32 MsgBattle::universe(int index) const {
  return universe_.Get(index);
}
inline void MsgBattle::set_universe(int index, ::google::protobuf::int32 value) {
  universe_.Set(index, value);
}
inline void MsgBattle::add_universe(::google::protobuf::int32 value) {
  universe_.Add(value);
}

// optional int32 accountId = 3;
inline bool MsgBattle::has_accountid() const {
  return _has_bit(2);
}
inline void MsgBattle::clear_accountid() {
  accountid_ = 0;
  _clear_bit(2);
}
inline ::google::protobuf::int32 MsgBattle::accountid() const {
  return accountid_;
}
inline void MsgBattle::set_accountid(::google::protobuf::int32 value) {
  _set_bit(2);
  accountid_ = value;
}

// optional string name = 4;
inline bool MsgBattle::has_name() const {
  return _has_bit(3);
}
inline void MsgBattle::clear_name() {
  if (name_ != &_default_name_) {
    name_->clear();
  }
  _clear_bit(3);
}
inline const ::std::string& MsgBattle::name() const {
  return *name_;
}
inline void MsgBattle::set_name(const ::std::string& value) {
  _set_bit(3);
  if (name_ == &_default_name_) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void MsgBattle::set_name(const char* value) {
  _set_bit(3);
  if (name_ == &_default_name_) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void MsgBattle::set_name(const char* value, size_t size) {
  _set_bit(3);
  if (name_ == &_default_name_) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* MsgBattle::mutable_name() {
  _set_bit(3);
  if (name_ == &_default_name_) {
    name_ = new ::std::string;
  }
  return name_;
}

// optional string url = 5;
inline bool MsgBattle::has_url() const {
  return _has_bit(4);
}
inline void MsgBattle::clear_url() {
  if (url_ != &_default_url_) {
    url_->clear();
  }
  _clear_bit(4);
}
inline const ::std::string& MsgBattle::url() const {
  return *url_;
}
inline void MsgBattle::set_url(const ::std::string& value) {
  _set_bit(4);
  if (url_ == &_default_url_) {
    url_ = new ::std::string;
  }
  url_->assign(value);
}
inline void MsgBattle::set_url(const char* value) {
  _set_bit(4);
  if (url_ == &_default_url_) {
    url_ = new ::std::string;
  }
  url_->assign(value);
}
inline void MsgBattle::set_url(const char* value, size_t size) {
  _set_bit(4);
  if (url_ == &_default_url_) {
    url_ = new ::std::string;
  }
  url_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* MsgBattle::mutable_url() {
  _set_bit(4);
  if (url_ == &_default_url_) {
    url_ = new ::std::string;
  }
  return url_;
}

// optional int32 Deploys = 6;
inline bool MsgBattle::has_deploys() const {
  return _has_bit(5);
}
inline void MsgBattle::clear_deploys() {
  deploys_ = 0;
  _clear_bit(5);
}
inline ::google::protobuf::int32 MsgBattle::deploys() const {
  return deploys_;
}
inline void MsgBattle::set_deploys(::google::protobuf::int32 value) {
  _set_bit(5);
  deploys_ = value;
}

// optional int32 AttackerGameUnits = 7;
inline bool MsgBattle::has_attackergameunits() const {
  return _has_bit(6);
}
inline void MsgBattle::clear_attackergameunits() {
  attackergameunits_ = 0;
  _clear_bit(6);
}
inline ::google::protobuf::int32 MsgBattle::attackergameunits() const {
  return attackergameunits_;
}
inline void MsgBattle::set_attackergameunits(::google::protobuf::int32 value) {
  _set_bit(6);
  attackergameunits_ = value;
}

// -------------------------------------------------------------------

// RseObtainBattleReplay

// repeated .MsgBattle Battle = 1;
inline int RseObtainBattleReplay::battle_size() const {
  return battle_.size();
}
inline void RseObtainBattleReplay::clear_battle() {
  battle_.Clear();
}
inline const ::google::protobuf::RepeatedPtrField< ::MsgBattle >&
RseObtainBattleReplay::battle() const {
  return battle_;
}
inline ::google::protobuf::RepeatedPtrField< ::MsgBattle >*
RseObtainBattleReplay::mutable_battle() {
  return &battle_;
}
inline const ::MsgBattle& RseObtainBattleReplay::battle(int index) const {
  return battle_.Get(index);
}
inline ::MsgBattle* RseObtainBattleReplay::mutable_battle(int index) {
  return battle_.Mutable(index);
}
inline ::MsgBattle* RseObtainBattleReplay::add_battle() {
  return battle_.Add();
}


#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

#endif  // PROTOBUF_RseObtainBattleReplay_2eproto__INCLUDED
