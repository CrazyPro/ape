// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "RseAuthState.pb.h"
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>

namespace {

const ::google::protobuf::Descriptor* RseAuthState_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RseAuthState_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_RseAuthState_2eproto() {
  protobuf_AddDesc_RseAuthState_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "RseAuthState.proto");
  GOOGLE_CHECK(file != NULL);
  RseAuthState_descriptor_ = file->message_type(0);
  static const int RseAuthState_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RseAuthState, pass_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RseAuthState, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RseAuthState, leftmin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RseAuthState, time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RseAuthState, zone_),
  };
  RseAuthState_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RseAuthState_descriptor_,
      RseAuthState::default_instance_,
      RseAuthState_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RseAuthState, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RseAuthState, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RseAuthState));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_RseAuthState_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RseAuthState_descriptor_, &RseAuthState::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_RseAuthState_2eproto() {
  delete RseAuthState::default_instance_;
  delete RseAuthState_reflection_;
}

void protobuf_AddDesc_RseAuthState_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\022RseAuthState.proto\"W\n\014RseAuthState\022\014\n\004"
    "pass\030\001 \002(\010\022\014\n\004type\030\002 \002(\005\022\017\n\007leftMin\030\003 \002("
    "\005\022\014\n\004time\030\004 \002(\005\022\014\n\004zone\030\005 \002(\005", 109);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "RseAuthState.proto", &protobuf_RegisterTypes);
  RseAuthState::default_instance_ = new RseAuthState();
  RseAuthState::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_RseAuthState_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_RseAuthState_2eproto {
  StaticDescriptorInitializer_RseAuthState_2eproto() {
    protobuf_AddDesc_RseAuthState_2eproto();
  }
} static_descriptor_initializer_RseAuthState_2eproto_;


// ===================================================================

#ifndef _MSC_VER
const int RseAuthState::kPassFieldNumber;
const int RseAuthState::kTypeFieldNumber;
const int RseAuthState::kLeftMinFieldNumber;
const int RseAuthState::kTimeFieldNumber;
const int RseAuthState::kZoneFieldNumber;
#endif  // !_MSC_VER

RseAuthState::RseAuthState() {
  SharedCtor();
}

void RseAuthState::InitAsDefaultInstance() {
}

RseAuthState::RseAuthState(const RseAuthState& from) {
  SharedCtor();
  MergeFrom(from);
}

void RseAuthState::SharedCtor() {
  _cached_size_ = 0;
  pass_ = false;
  type_ = 0;
  leftmin_ = 0;
  time_ = 0;
  zone_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RseAuthState::~RseAuthState() {
  SharedDtor();
}

void RseAuthState::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* RseAuthState::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RseAuthState_descriptor_;
}

const RseAuthState& RseAuthState::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_RseAuthState_2eproto();  return *default_instance_;
}

RseAuthState* RseAuthState::default_instance_ = NULL;

RseAuthState* RseAuthState::New() const {
  return new RseAuthState;
}

void RseAuthState::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    pass_ = false;
    type_ = 0;
    leftmin_ = 0;
    time_ = 0;
    zone_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RseAuthState::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bool pass = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadBool(
              input, &pass_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }
      
      // required int32 type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_type:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &type_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_leftMin;
        break;
      }
      
      // required int32 leftMin = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_leftMin:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &leftmin_));
        _set_bit(2);
        if (input->ExpectTag(32)) goto parse_time;
        break;
      }
      
      // required int32 time = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_time:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &time_));
        _set_bit(3);
        if (input->ExpectTag(40)) goto parse_zone;
        break;
      }
      
      // required int32 zone = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_zone:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &zone_));
        _set_bit(4);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RseAuthState::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    RseAuthState::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // required bool pass = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->pass(), output);
  }
  
  // required int32 type = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->type(), output);
  }
  
  // required int32 leftMin = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->leftmin(), output);
  }
  
  // required int32 time = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->time(), output);
  }
  
  // required int32 zone = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->zone(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RseAuthState::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bool pass = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->pass(), target);
  }
  
  // required int32 type = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->type(), target);
  }
  
  // required int32 leftMin = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->leftmin(), target);
  }
  
  // required int32 time = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->time(), target);
  }
  
  // required int32 zone = 5;
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->zone(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RseAuthState::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bool pass = 1;
    if (has_pass()) {
      total_size += 1 + 1;
    }
    
    // required int32 type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }
    
    // required int32 leftMin = 3;
    if (has_leftmin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->leftmin());
    }
    
    // required int32 time = 4;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->time());
    }
    
    // required int32 zone = 5;
    if (has_zone()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->zone());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void RseAuthState::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RseAuthState* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RseAuthState*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RseAuthState::MergeFrom(const RseAuthState& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_pass(from.pass());
    }
    if (from._has_bit(1)) {
      set_type(from.type());
    }
    if (from._has_bit(2)) {
      set_leftmin(from.leftmin());
    }
    if (from._has_bit(3)) {
      set_time(from.time());
    }
    if (from._has_bit(4)) {
      set_zone(from.zone());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RseAuthState::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RseAuthState::CopyFrom(const RseAuthState& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RseAuthState::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;
  
  return true;
}

void RseAuthState::Swap(RseAuthState* other) {
  if (other != this) {
    std::swap(pass_, other->pass_);
    std::swap(type_, other->type_);
    std::swap(leftmin_, other->leftmin_);
    std::swap(time_, other->time_);
    std::swap(zone_, other->zone_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RseAuthState::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RseAuthState_descriptor_;
  metadata.reflection = RseAuthState_reflection_;
  return metadata;
}

