// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "RceUnitDamaged.pb.h"
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>

namespace {

const ::google::protobuf::Descriptor* RceUnitDamaged_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RceUnitDamaged_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_RceUnitDamaged_2eproto() {
  protobuf_AddDesc_RceUnitDamaged_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "RceUnitDamaged.proto");
  GOOGLE_CHECK(file != NULL);
  RceUnitDamaged_descriptor_ = file->message_type(0);
  static const int RceUnitDamaged_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RceUnitDamaged, planetid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RceUnitDamaged, energybeforeshot_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RceUnitDamaged, unitid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RceUnitDamaged, unitsku_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RceUnitDamaged, frombunkersid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RceUnitDamaged, damage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RceUnitDamaged, destroyed_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RceUnitDamaged, attackers_),
  };
  RceUnitDamaged_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RceUnitDamaged_descriptor_,
      RceUnitDamaged::default_instance_,
      RceUnitDamaged_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RceUnitDamaged, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RceUnitDamaged, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RceUnitDamaged));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_RceUnitDamaged_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RceUnitDamaged_descriptor_, &RceUnitDamaged::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_RceUnitDamaged_2eproto() {
  delete RceUnitDamaged::default_instance_;
  delete RceUnitDamaged_reflection_;
}

void protobuf_AddDesc_RceUnitDamaged_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\024RceUnitDamaged.proto\"\252\001\n\016RceUnitDamage"
    "d\022\020\n\010planetId\030\001 \001(\005\022\030\n\020energyBeforeShot\030"
    "\002 \001(\005\022\016\n\006unitId\030\003 \001(\005\022\017\n\007unitSku\030\004 \001(\t\022\025"
    "\n\rfromBunkerSid\030\005 \001(\005\022\016\n\006damage\030\006 \001(\005\022\021\n"
    "\tdestroyed\030\007 \001(\005\022\021\n\tattackers\030\010 \003(\t", 195);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "RceUnitDamaged.proto", &protobuf_RegisterTypes);
  RceUnitDamaged::default_instance_ = new RceUnitDamaged();
  RceUnitDamaged::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_RceUnitDamaged_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_RceUnitDamaged_2eproto {
  StaticDescriptorInitializer_RceUnitDamaged_2eproto() {
    protobuf_AddDesc_RceUnitDamaged_2eproto();
  }
} static_descriptor_initializer_RceUnitDamaged_2eproto_;


// ===================================================================

const ::std::string RceUnitDamaged::_default_unitsku_;
#ifndef _MSC_VER
const int RceUnitDamaged::kPlanetIdFieldNumber;
const int RceUnitDamaged::kEnergyBeforeShotFieldNumber;
const int RceUnitDamaged::kUnitIdFieldNumber;
const int RceUnitDamaged::kUnitSkuFieldNumber;
const int RceUnitDamaged::kFromBunkerSidFieldNumber;
const int RceUnitDamaged::kDamageFieldNumber;
const int RceUnitDamaged::kDestroyedFieldNumber;
const int RceUnitDamaged::kAttackersFieldNumber;
#endif  // !_MSC_VER

RceUnitDamaged::RceUnitDamaged() {
  SharedCtor();
}

void RceUnitDamaged::InitAsDefaultInstance() {
}

RceUnitDamaged::RceUnitDamaged(const RceUnitDamaged& from) {
  SharedCtor();
  MergeFrom(from);
}

void RceUnitDamaged::SharedCtor() {
  _cached_size_ = 0;
  planetid_ = 0;
  energybeforeshot_ = 0;
  unitid_ = 0;
  unitsku_ = const_cast< ::std::string*>(&_default_unitsku_);
  frombunkersid_ = 0;
  damage_ = 0;
  destroyed_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RceUnitDamaged::~RceUnitDamaged() {
  SharedDtor();
}

void RceUnitDamaged::SharedDtor() {
  if (unitsku_ != &_default_unitsku_) {
    delete unitsku_;
  }
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* RceUnitDamaged::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RceUnitDamaged_descriptor_;
}

const RceUnitDamaged& RceUnitDamaged::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_RceUnitDamaged_2eproto();  return *default_instance_;
}

RceUnitDamaged* RceUnitDamaged::default_instance_ = NULL;

RceUnitDamaged* RceUnitDamaged::New() const {
  return new RceUnitDamaged;
}

void RceUnitDamaged::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    planetid_ = 0;
    energybeforeshot_ = 0;
    unitid_ = 0;
    if (_has_bit(3)) {
      if (unitsku_ != &_default_unitsku_) {
        unitsku_->clear();
      }
    }
    frombunkersid_ = 0;
    damage_ = 0;
    destroyed_ = 0;
  }
  attackers_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RceUnitDamaged::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 planetId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &planetid_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_energyBeforeShot;
        break;
      }
      
      // optional int32 energyBeforeShot = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_energyBeforeShot:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &energybeforeshot_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_unitId;
        break;
      }
      
      // optional int32 unitId = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_unitId:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &unitid_));
        _set_bit(2);
        if (input->ExpectTag(34)) goto parse_unitSku;
        break;
      }
      
      // optional string unitSku = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_unitSku:
        DO_(::google::protobuf::internal::WireFormatLite::ReadString(
              input, this->mutable_unitsku()));
        ::google::protobuf::internal::WireFormat::VerifyUTF8String(
          this->unitsku().data(), this->unitsku().length(),
          ::google::protobuf::internal::WireFormat::PARSE);
        if (input->ExpectTag(40)) goto parse_fromBunkerSid;
        break;
      }
      
      // optional int32 fromBunkerSid = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_fromBunkerSid:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &frombunkersid_));
        _set_bit(4);
        if (input->ExpectTag(48)) goto parse_damage;
        break;
      }
      
      // optional int32 damage = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_damage:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &damage_));
        _set_bit(5);
        if (input->ExpectTag(56)) goto parse_destroyed;
        break;
      }
      
      // optional int32 destroyed = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_destroyed:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &destroyed_));
        _set_bit(6);
        if (input->ExpectTag(66)) goto parse_attackers;
        break;
      }
      
      // repeated string attackers = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_attackers:
        DO_(::google::protobuf::internal::WireFormatLite::ReadString(
              input, this->add_attackers()));
        ::google::protobuf::internal::WireFormat::VerifyUTF8String(
          this->attackers(0).data(), this->attackers(0).length(),
          ::google::protobuf::internal::WireFormat::PARSE);
        if (input->ExpectTag(66)) goto parse_attackers;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RceUnitDamaged::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    RceUnitDamaged::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional int32 planetId = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->planetid(), output);
  }
  
  // optional int32 energyBeforeShot = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->energybeforeshot(), output);
  }
  
  // optional int32 unitId = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->unitid(), output);
  }
  
  // optional string unitSku = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->unitsku().data(), this->unitsku().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->unitsku(), output);
  }
  
  // optional int32 fromBunkerSid = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->frombunkersid(), output);
  }
  
  // optional int32 damage = 6;
  if (_has_bit(5)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->damage(), output);
  }
  
  // optional int32 destroyed = 7;
  if (_has_bit(6)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->destroyed(), output);
  }
  
  // repeated string attackers = 8;
  for (int i = 0; i < this->attackers_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->attackers(i).data(), this->attackers(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      8, this->attackers(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RceUnitDamaged::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 planetId = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->planetid(), target);
  }
  
  // optional int32 energyBeforeShot = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->energybeforeshot(), target);
  }
  
  // optional int32 unitId = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->unitid(), target);
  }
  
  // optional string unitSku = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->unitsku().data(), this->unitsku().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->unitsku(), target);
  }
  
  // optional int32 fromBunkerSid = 5;
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->frombunkersid(), target);
  }
  
  // optional int32 damage = 6;
  if (_has_bit(5)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->damage(), target);
  }
  
  // optional int32 destroyed = 7;
  if (_has_bit(6)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->destroyed(), target);
  }
  
  // repeated string attackers = 8;
  for (int i = 0; i < this->attackers_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->attackers(i).data(), this->attackers(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(8, this->attackers(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RceUnitDamaged::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 planetId = 1;
    if (has_planetid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->planetid());
    }
    
    // optional int32 energyBeforeShot = 2;
    if (has_energybeforeshot()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->energybeforeshot());
    }
    
    // optional int32 unitId = 3;
    if (has_unitid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->unitid());
    }
    
    // optional string unitSku = 4;
    if (has_unitsku()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->unitsku());
    }
    
    // optional int32 fromBunkerSid = 5;
    if (has_frombunkersid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->frombunkersid());
    }
    
    // optional int32 damage = 6;
    if (has_damage()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->damage());
    }
    
    // optional int32 destroyed = 7;
    if (has_destroyed()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->destroyed());
    }
    
  }
  // repeated string attackers = 8;
  total_size += 1 * this->attackers_size();
  for (int i = 0; i < this->attackers_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->attackers(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void RceUnitDamaged::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RceUnitDamaged* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RceUnitDamaged*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RceUnitDamaged::MergeFrom(const RceUnitDamaged& from) {
  GOOGLE_CHECK_NE(&from, this);
  attackers_.MergeFrom(from.attackers_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_planetid(from.planetid());
    }
    if (from._has_bit(1)) {
      set_energybeforeshot(from.energybeforeshot());
    }
    if (from._has_bit(2)) {
      set_unitid(from.unitid());
    }
    if (from._has_bit(3)) {
      set_unitsku(from.unitsku());
    }
    if (from._has_bit(4)) {
      set_frombunkersid(from.frombunkersid());
    }
    if (from._has_bit(5)) {
      set_damage(from.damage());
    }
    if (from._has_bit(6)) {
      set_destroyed(from.destroyed());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RceUnitDamaged::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RceUnitDamaged::CopyFrom(const RceUnitDamaged& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RceUnitDamaged::IsInitialized() const {
  
  return true;
}

void RceUnitDamaged::Swap(RceUnitDamaged* other) {
  if (other != this) {
    std::swap(planetid_, other->planetid_);
    std::swap(energybeforeshot_, other->energybeforeshot_);
    std::swap(unitid_, other->unitid_);
    std::swap(unitsku_, other->unitsku_);
    std::swap(frombunkersid_, other->frombunkersid_);
    std::swap(damage_, other->damage_);
    std::swap(destroyed_, other->destroyed_);
    attackers_.Swap(&other->attackers_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RceUnitDamaged::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RceUnitDamaged_descriptor_;
  metadata.reflection = RceUnitDamaged_reflection_;
  return metadata;
}

