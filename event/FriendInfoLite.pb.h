// Generated by the protocol buffer compiler.  DO NOT EDIT!

#ifndef PROTOBUF_FriendInfoLite_2eproto__INCLUDED
#define PROTOBUF_FriendInfoLite_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2002000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2002000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_FriendInfoLite_2eproto();
void protobuf_AssignDesc_FriendInfoLite_2eproto();
void protobuf_ShutdownFile_FriendInfoLite_2eproto();

class FriendInfoLite;

// ===================================================================

class FriendInfoLite : public ::google::protobuf::Message {
 public:
  FriendInfoLite();
  virtual ~FriendInfoLite();
  
  FriendInfoLite(const FriendInfoLite& from);
  
  inline FriendInfoLite& operator=(const FriendInfoLite& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const FriendInfoLite& default_instance();
  void Swap(FriendInfoLite* other);
  
  // implements Message ----------------------------------------------
  
  FriendInfoLite* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FriendInfoLite& from);
  void MergeFrom(const FriendInfoLite& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const { _cached_size_ = size; }
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required string baseid = 1;
  inline bool has_baseid() const;
  inline void clear_baseid();
  static const int kBaseidFieldNumber = 1;
  inline const ::std::string& baseid() const;
  inline void set_baseid(const ::std::string& value);
  inline void set_baseid(const char* value);
  inline void set_baseid(const char* value, size_t size);
  inline ::std::string* mutable_baseid();
  
  // required string first_name = 2;
  inline bool has_first_name() const;
  inline void clear_first_name();
  static const int kFirstNameFieldNumber = 2;
  inline const ::std::string& first_name() const;
  inline void set_first_name(const ::std::string& value);
  inline void set_first_name(const char* value);
  inline void set_first_name(const char* value, size_t size);
  inline ::std::string* mutable_first_name();
  
  // optional string pic = 3;
  inline bool has_pic() const;
  inline void clear_pic();
  static const int kPicFieldNumber = 3;
  inline const ::std::string& pic() const;
  inline void set_pic(const ::std::string& value);
  inline void set_pic(const char* value);
  inline void set_pic(const char* value, size_t size);
  inline ::std::string* mutable_pic();
  
  // required uint32 lvl = 4;
  inline bool has_lvl() const;
  inline void clear_lvl();
  static const int kLvlFieldNumber = 4;
  inline ::google::protobuf::uint32 lvl() const;
  inline void set_lvl(::google::protobuf::uint32 value);
  
  // optional bool is_yellow_vip = 5 [default = false];
  inline bool has_is_yellow_vip() const;
  inline void clear_is_yellow_vip();
  static const int kIsYellowVipFieldNumber = 5;
  inline bool is_yellow_vip() const;
  inline void set_is_yellow_vip(bool value);
  
  // optional bool is_yellow_year_vip = 6 [default = false];
  inline bool has_is_yellow_year_vip() const;
  inline void clear_is_yellow_year_vip();
  static const int kIsYellowYearVipFieldNumber = 6;
  inline bool is_yellow_year_vip() const;
  inline void set_is_yellow_year_vip(bool value);
  
  // optional int32 yellow_vip_level = 7 [default = 0];
  inline bool has_yellow_vip_level() const;
  inline void clear_yellow_vip_level();
  static const int kYellowVipLevelFieldNumber = 7;
  inline ::google::protobuf::int32 yellow_vip_level() const;
  inline void set_yellow_vip_level(::google::protobuf::int32 value);
  
  // optional string totalpercharge = 8;
  inline bool has_totalpercharge() const;
  inline void clear_totalpercharge();
  static const int kTotalperchargeFieldNumber = 8;
  inline const ::std::string& totalpercharge() const;
  inline void set_totalpercharge(const ::std::string& value);
  inline void set_totalpercharge(const char* value);
  inline void set_totalpercharge(const char* value, size_t size);
  inline ::std::string* mutable_totalpercharge();
  
  // optional int32 lastLogonTime = 9 [default = 0];
  inline bool has_lastlogontime() const;
  inline void clear_lastlogontime();
  static const int kLastLogonTimeFieldNumber = 9;
  inline ::google::protobuf::int32 lastlogontime() const;
  inline void set_lastlogontime(::google::protobuf::int32 value);
  
  // optional int32 QQDmdLvl = 10 [default = 0];
  inline bool has_qqdmdlvl() const;
  inline void clear_qqdmdlvl();
  static const int kQQDmdLvlFieldNumber = 10;
  inline ::google::protobuf::int32 qqdmdlvl() const;
  inline void set_qqdmdlvl(::google::protobuf::int32 value);
  
  // optional bool isQQDmd = 11 [default = false];
  inline bool has_isqqdmd() const;
  inline void clear_isqqdmd();
  static const int kIsQQDmdFieldNumber = 11;
  inline bool isqqdmd() const;
  inline void set_isqqdmd(bool value);
  
  // optional bool isQQDmdYear = 12 [default = false];
  inline bool has_isqqdmdyear() const;
  inline void clear_isqqdmdyear();
  static const int kIsQQDmdYearFieldNumber = 12;
  inline bool isqqdmdyear() const;
  inline void set_isqqdmdyear(bool value);
  
  // optional bool sameRegion = 13;
  inline bool has_sameregion() const;
  inline void clear_sameregion();
  static const int kSameRegionFieldNumber = 13;
  inline bool sameregion() const;
  inline void set_sameregion(bool value);
  
  // optional string platid = 14;
  inline bool has_platid() const;
  inline void clear_platid();
  static const int kPlatidFieldNumber = 14;
  inline const ::std::string& platid() const;
  inline void set_platid(const ::std::string& value);
  inline void set_platid(const char* value);
  inline void set_platid(const char* value, size_t size);
  inline ::std::string* mutable_platid();
  
  // optional int32 finishCaptureTm = 15;
  inline bool has_finishcapturetm() const;
  inline void clear_finishcapturetm();
  static const int kFinishCaptureTmFieldNumber = 15;
  inline ::google::protobuf::int32 finishcapturetm() const;
  inline void set_finishcapturetm(::google::protobuf::int32 value);
  
  // optional bool is_sumptuous_yellow_vip = 16 [default = false];
  inline bool has_is_sumptuous_yellow_vip() const;
  inline void clear_is_sumptuous_yellow_vip();
  static const int kIsSumptuousYellowVipFieldNumber = 16;
  inline bool is_sumptuous_yellow_vip() const;
  inline void set_is_sumptuous_yellow_vip(bool value);
  
  // optional int32 viplevel = 17 [default = 0];
  inline bool has_viplevel() const;
  inline void clear_viplevel();
  static const int kViplevelFieldNumber = 17;
  inline ::google::protobuf::int32 viplevel() const;
  inline void set_viplevel(::google::protobuf::int32 value);
  
  // optional int32 viptype = 18 [default = 0];
  inline bool has_viptype() const;
  inline void clear_viptype();
  static const int kViptypeFieldNumber = 18;
  inline ::google::protobuf::int32 viptype() const;
  inline void set_viptype(::google::protobuf::int32 value);
  
  // optional int32 QHallDmdLvl = 19 [default = 0];
  inline bool has_qhalldmdlvl() const;
  inline void clear_qhalldmdlvl();
  static const int kQHallDmdLvlFieldNumber = 19;
  inline ::google::protobuf::int32 qhalldmdlvl() const;
  inline void set_qhalldmdlvl(::google::protobuf::int32 value);
  
  // optional bool isQHallDmd = 20 [default = false];
  inline bool has_isqhalldmd() const;
  inline void clear_isqhalldmd();
  static const int kIsQHallDmdFieldNumber = 20;
  inline bool isqhalldmd() const;
  inline void set_isqhalldmd(bool value);
  
  // optional bool isQHallDmdYear = 21 [default = false];
  inline bool has_isqhalldmdyear() const;
  inline void clear_isqhalldmdyear();
  static const int kIsQHallDmdYearFieldNumber = 21;
  inline bool isqhalldmdyear() const;
  inline void set_isqhalldmdyear(bool value);
  
  // optional bool isHighQHallDmd = 22 [default = false];
  inline bool has_ishighqhalldmd() const;
  inline void clear_ishighqhalldmd();
  static const int kIsHighQHallDmdFieldNumber = 22;
  inline bool ishighqhalldmd() const;
  inline void set_ishighqhalldmd(bool value);
  
  // optional bool isHighQHallDmeYear = 23 [default = false];
  inline bool has_ishighqhalldmeyear() const;
  inline void clear_ishighqhalldmeyear();
  static const int kIsHighQHallDmeYearFieldNumber = 23;
  inline bool ishighqhalldmeyear() const;
  inline void set_ishighqhalldmeyear(bool value);
  
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::std::string* baseid_;
  static const ::std::string _default_baseid_;
  ::std::string* first_name_;
  static const ::std::string _default_first_name_;
  ::std::string* pic_;
  static const ::std::string _default_pic_;
  ::google::protobuf::uint32 lvl_;
  bool is_yellow_vip_;
  bool is_yellow_year_vip_;
  ::google::protobuf::int32 yellow_vip_level_;
  ::std::string* totalpercharge_;
  static const ::std::string _default_totalpercharge_;
  ::google::protobuf::int32 lastlogontime_;
  ::google::protobuf::int32 qqdmdlvl_;
  bool isqqdmd_;
  bool isqqdmdyear_;
  bool sameregion_;
  ::std::string* platid_;
  static const ::std::string _default_platid_;
  ::google::protobuf::int32 finishcapturetm_;
  bool is_sumptuous_yellow_vip_;
  ::google::protobuf::int32 viplevel_;
  ::google::protobuf::int32 viptype_;
  ::google::protobuf::int32 qhalldmdlvl_;
  bool isqhalldmd_;
  bool isqhalldmdyear_;
  bool ishighqhalldmd_;
  bool ishighqhalldmeyear_;
  friend void  protobuf_AddDesc_FriendInfoLite_2eproto();
  friend void protobuf_AssignDesc_FriendInfoLite_2eproto();
  friend void protobuf_ShutdownFile_FriendInfoLite_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(23 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static FriendInfoLite* default_instance_;
};
// ===================================================================


// ===================================================================


// ===================================================================

// FriendInfoLite

// required string baseid = 1;
inline bool FriendInfoLite::has_baseid() const {
  return _has_bit(0);
}
inline void FriendInfoLite::clear_baseid() {
  if (baseid_ != &_default_baseid_) {
    baseid_->clear();
  }
  _clear_bit(0);
}
inline const ::std::string& FriendInfoLite::baseid() const {
  return *baseid_;
}
inline void FriendInfoLite::set_baseid(const ::std::string& value) {
  _set_bit(0);
  if (baseid_ == &_default_baseid_) {
    baseid_ = new ::std::string;
  }
  baseid_->assign(value);
}
inline void FriendInfoLite::set_baseid(const char* value) {
  _set_bit(0);
  if (baseid_ == &_default_baseid_) {
    baseid_ = new ::std::string;
  }
  baseid_->assign(value);
}
inline void FriendInfoLite::set_baseid(const char* value, size_t size) {
  _set_bit(0);
  if (baseid_ == &_default_baseid_) {
    baseid_ = new ::std::string;
  }
  baseid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* FriendInfoLite::mutable_baseid() {
  _set_bit(0);
  if (baseid_ == &_default_baseid_) {
    baseid_ = new ::std::string;
  }
  return baseid_;
}

// required string first_name = 2;
inline bool FriendInfoLite::has_first_name() const {
  return _has_bit(1);
}
inline void FriendInfoLite::clear_first_name() {
  if (first_name_ != &_default_first_name_) {
    first_name_->clear();
  }
  _clear_bit(1);
}
inline const ::std::string& FriendInfoLite::first_name() const {
  return *first_name_;
}
inline void FriendInfoLite::set_first_name(const ::std::string& value) {
  _set_bit(1);
  if (first_name_ == &_default_first_name_) {
    first_name_ = new ::std::string;
  }
  first_name_->assign(value);
}
inline void FriendInfoLite::set_first_name(const char* value) {
  _set_bit(1);
  if (first_name_ == &_default_first_name_) {
    first_name_ = new ::std::string;
  }
  first_name_->assign(value);
}
inline void FriendInfoLite::set_first_name(const char* value, size_t size) {
  _set_bit(1);
  if (first_name_ == &_default_first_name_) {
    first_name_ = new ::std::string;
  }
  first_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* FriendInfoLite::mutable_first_name() {
  _set_bit(1);
  if (first_name_ == &_default_first_name_) {
    first_name_ = new ::std::string;
  }
  return first_name_;
}

// optional string pic = 3;
inline bool FriendInfoLite::has_pic() const {
  return _has_bit(2);
}
inline void FriendInfoLite::clear_pic() {
  if (pic_ != &_default_pic_) {
    pic_->clear();
  }
  _clear_bit(2);
}
inline const ::std::string& FriendInfoLite::pic() const {
  return *pic_;
}
inline void FriendInfoLite::set_pic(const ::std::string& value) {
  _set_bit(2);
  if (pic_ == &_default_pic_) {
    pic_ = new ::std::string;
  }
  pic_->assign(value);
}
inline void FriendInfoLite::set_pic(const char* value) {
  _set_bit(2);
  if (pic_ == &_default_pic_) {
    pic_ = new ::std::string;
  }
  pic_->assign(value);
}
inline void FriendInfoLite::set_pic(const char* value, size_t size) {
  _set_bit(2);
  if (pic_ == &_default_pic_) {
    pic_ = new ::std::string;
  }
  pic_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* FriendInfoLite::mutable_pic() {
  _set_bit(2);
  if (pic_ == &_default_pic_) {
    pic_ = new ::std::string;
  }
  return pic_;
}

// required uint32 lvl = 4;
inline bool FriendInfoLite::has_lvl() const {
  return _has_bit(3);
}
inline void FriendInfoLite::clear_lvl() {
  lvl_ = 0u;
  _clear_bit(3);
}
inline ::google::protobuf::uint32 FriendInfoLite::lvl() const {
  return lvl_;
}
inline void FriendInfoLite::set_lvl(::google::protobuf::uint32 value) {
  _set_bit(3);
  lvl_ = value;
}

// optional bool is_yellow_vip = 5 [default = false];
inline bool FriendInfoLite::has_is_yellow_vip() const {
  return _has_bit(4);
}
inline void FriendInfoLite::clear_is_yellow_vip() {
  is_yellow_vip_ = false;
  _clear_bit(4);
}
inline bool FriendInfoLite::is_yellow_vip() const {
  return is_yellow_vip_;
}
inline void FriendInfoLite::set_is_yellow_vip(bool value) {
  _set_bit(4);
  is_yellow_vip_ = value;
}

// optional bool is_yellow_year_vip = 6 [default = false];
inline bool FriendInfoLite::has_is_yellow_year_vip() const {
  return _has_bit(5);
}
inline void FriendInfoLite::clear_is_yellow_year_vip() {
  is_yellow_year_vip_ = false;
  _clear_bit(5);
}
inline bool FriendInfoLite::is_yellow_year_vip() const {
  return is_yellow_year_vip_;
}
inline void FriendInfoLite::set_is_yellow_year_vip(bool value) {
  _set_bit(5);
  is_yellow_year_vip_ = value;
}

// optional int32 yellow_vip_level = 7 [default = 0];
inline bool FriendInfoLite::has_yellow_vip_level() const {
  return _has_bit(6);
}
inline void FriendInfoLite::clear_yellow_vip_level() {
  yellow_vip_level_ = 0;
  _clear_bit(6);
}
inline ::google::protobuf::int32 FriendInfoLite::yellow_vip_level() const {
  return yellow_vip_level_;
}
inline void FriendInfoLite::set_yellow_vip_level(::google::protobuf::int32 value) {
  _set_bit(6);
  yellow_vip_level_ = value;
}

// optional string totalpercharge = 8;
inline bool FriendInfoLite::has_totalpercharge() const {
  return _has_bit(7);
}
inline void FriendInfoLite::clear_totalpercharge() {
  if (totalpercharge_ != &_default_totalpercharge_) {
    totalpercharge_->clear();
  }
  _clear_bit(7);
}
inline const ::std::string& FriendInfoLite::totalpercharge() const {
  return *totalpercharge_;
}
inline void FriendInfoLite::set_totalpercharge(const ::std::string& value) {
  _set_bit(7);
  if (totalpercharge_ == &_default_totalpercharge_) {
    totalpercharge_ = new ::std::string;
  }
  totalpercharge_->assign(value);
}
inline void FriendInfoLite::set_totalpercharge(const char* value) {
  _set_bit(7);
  if (totalpercharge_ == &_default_totalpercharge_) {
    totalpercharge_ = new ::std::string;
  }
  totalpercharge_->assign(value);
}
inline void FriendInfoLite::set_totalpercharge(const char* value, size_t size) {
  _set_bit(7);
  if (totalpercharge_ == &_default_totalpercharge_) {
    totalpercharge_ = new ::std::string;
  }
  totalpercharge_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* FriendInfoLite::mutable_totalpercharge() {
  _set_bit(7);
  if (totalpercharge_ == &_default_totalpercharge_) {
    totalpercharge_ = new ::std::string;
  }
  return totalpercharge_;
}

// optional int32 lastLogonTime = 9 [default = 0];
inline bool FriendInfoLite::has_lastlogontime() const {
  return _has_bit(8);
}
inline void FriendInfoLite::clear_lastlogontime() {
  lastlogontime_ = 0;
  _clear_bit(8);
}
inline ::google::protobuf::int32 FriendInfoLite::lastlogontime() const {
  return lastlogontime_;
}
inline void FriendInfoLite::set_lastlogontime(::google::protobuf::int32 value) {
  _set_bit(8);
  lastlogontime_ = value;
}

// optional int32 QQDmdLvl = 10 [default = 0];
inline bool FriendInfoLite::has_qqdmdlvl() const {
  return _has_bit(9);
}
inline void FriendInfoLite::clear_qqdmdlvl() {
  qqdmdlvl_ = 0;
  _clear_bit(9);
}
inline ::google::protobuf::int32 FriendInfoLite::qqdmdlvl() const {
  return qqdmdlvl_;
}
inline void FriendInfoLite::set_qqdmdlvl(::google::protobuf::int32 value) {
  _set_bit(9);
  qqdmdlvl_ = value;
}

// optional bool isQQDmd = 11 [default = false];
inline bool FriendInfoLite::has_isqqdmd() const {
  return _has_bit(10);
}
inline void FriendInfoLite::clear_isqqdmd() {
  isqqdmd_ = false;
  _clear_bit(10);
}
inline bool FriendInfoLite::isqqdmd() const {
  return isqqdmd_;
}
inline void FriendInfoLite::set_isqqdmd(bool value) {
  _set_bit(10);
  isqqdmd_ = value;
}

// optional bool isQQDmdYear = 12 [default = false];
inline bool FriendInfoLite::has_isqqdmdyear() const {
  return _has_bit(11);
}
inline void FriendInfoLite::clear_isqqdmdyear() {
  isqqdmdyear_ = false;
  _clear_bit(11);
}
inline bool FriendInfoLite::isqqdmdyear() const {
  return isqqdmdyear_;
}
inline void FriendInfoLite::set_isqqdmdyear(bool value) {
  _set_bit(11);
  isqqdmdyear_ = value;
}

// optional bool sameRegion = 13;
inline bool FriendInfoLite::has_sameregion() const {
  return _has_bit(12);
}
inline void FriendInfoLite::clear_sameregion() {
  sameregion_ = false;
  _clear_bit(12);
}
inline bool FriendInfoLite::sameregion() const {
  return sameregion_;
}
inline void FriendInfoLite::set_sameregion(bool value) {
  _set_bit(12);
  sameregion_ = value;
}

// optional string platid = 14;
inline bool FriendInfoLite::has_platid() const {
  return _has_bit(13);
}
inline void FriendInfoLite::clear_platid() {
  if (platid_ != &_default_platid_) {
    platid_->clear();
  }
  _clear_bit(13);
}
inline const ::std::string& FriendInfoLite::platid() const {
  return *platid_;
}
inline void FriendInfoLite::set_platid(const ::std::string& value) {
  _set_bit(13);
  if (platid_ == &_default_platid_) {
    platid_ = new ::std::string;
  }
  platid_->assign(value);
}
inline void FriendInfoLite::set_platid(const char* value) {
  _set_bit(13);
  if (platid_ == &_default_platid_) {
    platid_ = new ::std::string;
  }
  platid_->assign(value);
}
inline void FriendInfoLite::set_platid(const char* value, size_t size) {
  _set_bit(13);
  if (platid_ == &_default_platid_) {
    platid_ = new ::std::string;
  }
  platid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* FriendInfoLite::mutable_platid() {
  _set_bit(13);
  if (platid_ == &_default_platid_) {
    platid_ = new ::std::string;
  }
  return platid_;
}

// optional int32 finishCaptureTm = 15;
inline bool FriendInfoLite::has_finishcapturetm() const {
  return _has_bit(14);
}
inline void FriendInfoLite::clear_finishcapturetm() {
  finishcapturetm_ = 0;
  _clear_bit(14);
}
inline ::google::protobuf::int32 FriendInfoLite::finishcapturetm() const {
  return finishcapturetm_;
}
inline void FriendInfoLite::set_finishcapturetm(::google::protobuf::int32 value) {
  _set_bit(14);
  finishcapturetm_ = value;
}

// optional bool is_sumptuous_yellow_vip = 16 [default = false];
inline bool FriendInfoLite::has_is_sumptuous_yellow_vip() const {
  return _has_bit(15);
}
inline void FriendInfoLite::clear_is_sumptuous_yellow_vip() {
  is_sumptuous_yellow_vip_ = false;
  _clear_bit(15);
}
inline bool FriendInfoLite::is_sumptuous_yellow_vip() const {
  return is_sumptuous_yellow_vip_;
}
inline void FriendInfoLite::set_is_sumptuous_yellow_vip(bool value) {
  _set_bit(15);
  is_sumptuous_yellow_vip_ = value;
}

// optional int32 viplevel = 17 [default = 0];
inline bool FriendInfoLite::has_viplevel() const {
  return _has_bit(16);
}
inline void FriendInfoLite::clear_viplevel() {
  viplevel_ = 0;
  _clear_bit(16);
}
inline ::google::protobuf::int32 FriendInfoLite::viplevel() const {
  return viplevel_;
}
inline void FriendInfoLite::set_viplevel(::google::protobuf::int32 value) {
  _set_bit(16);
  viplevel_ = value;
}

// optional int32 viptype = 18 [default = 0];
inline bool FriendInfoLite::has_viptype() const {
  return _has_bit(17);
}
inline void FriendInfoLite::clear_viptype() {
  viptype_ = 0;
  _clear_bit(17);
}
inline ::google::protobuf::int32 FriendInfoLite::viptype() const {
  return viptype_;
}
inline void FriendInfoLite::set_viptype(::google::protobuf::int32 value) {
  _set_bit(17);
  viptype_ = value;
}

// optional int32 QHallDmdLvl = 19 [default = 0];
inline bool FriendInfoLite::has_qhalldmdlvl() const {
  return _has_bit(18);
}
inline void FriendInfoLite::clear_qhalldmdlvl() {
  qhalldmdlvl_ = 0;
  _clear_bit(18);
}
inline ::google::protobuf::int32 FriendInfoLite::qhalldmdlvl() const {
  return qhalldmdlvl_;
}
inline void FriendInfoLite::set_qhalldmdlvl(::google::protobuf::int32 value) {
  _set_bit(18);
  qhalldmdlvl_ = value;
}

// optional bool isQHallDmd = 20 [default = false];
inline bool FriendInfoLite::has_isqhalldmd() const {
  return _has_bit(19);
}
inline void FriendInfoLite::clear_isqhalldmd() {
  isqhalldmd_ = false;
  _clear_bit(19);
}
inline bool FriendInfoLite::isqhalldmd() const {
  return isqhalldmd_;
}
inline void FriendInfoLite::set_isqhalldmd(bool value) {
  _set_bit(19);
  isqhalldmd_ = value;
}

// optional bool isQHallDmdYear = 21 [default = false];
inline bool FriendInfoLite::has_isqhalldmdyear() const {
  return _has_bit(20);
}
inline void FriendInfoLite::clear_isqhalldmdyear() {
  isqhalldmdyear_ = false;
  _clear_bit(20);
}
inline bool FriendInfoLite::isqhalldmdyear() const {
  return isqhalldmdyear_;
}
inline void FriendInfoLite::set_isqhalldmdyear(bool value) {
  _set_bit(20);
  isqhalldmdyear_ = value;
}

// optional bool isHighQHallDmd = 22 [default = false];
inline bool FriendInfoLite::has_ishighqhalldmd() const {
  return _has_bit(21);
}
inline void FriendInfoLite::clear_ishighqhalldmd() {
  ishighqhalldmd_ = false;
  _clear_bit(21);
}
inline bool FriendInfoLite::ishighqhalldmd() const {
  return ishighqhalldmd_;
}
inline void FriendInfoLite::set_ishighqhalldmd(bool value) {
  _set_bit(21);
  ishighqhalldmd_ = value;
}

// optional bool isHighQHallDmeYear = 23 [default = false];
inline bool FriendInfoLite::has_ishighqhalldmeyear() const {
  return _has_bit(22);
}
inline void FriendInfoLite::clear_ishighqhalldmeyear() {
  ishighqhalldmeyear_ = false;
  _clear_bit(22);
}
inline bool FriendInfoLite::ishighqhalldmeyear() const {
  return ishighqhalldmeyear_;
}
inline void FriendInfoLite::set_ishighqhalldmeyear(bool value) {
  _set_bit(22);
  ishighqhalldmeyear_ = value;
}


#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

#endif  // PROTOBUF_FriendInfoLite_2eproto__INCLUDED
