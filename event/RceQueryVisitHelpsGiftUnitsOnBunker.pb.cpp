// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "RceQueryVisitHelpsGiftUnitsOnBunker.pb.h"
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>

namespace {

const ::google::protobuf::Descriptor* RceQueryVisitHelpsGiftUnitsOnBunker_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RceQueryVisitHelpsGiftUnitsOnBunker_reflection_ = NULL;
const ::google::protobuf::Descriptor* UnitsArray_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UnitsArray_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_RceQueryVisitHelpsGiftUnitsOnBunker_2eproto() {
  protobuf_AddDesc_RceQueryVisitHelpsGiftUnitsOnBunker_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "RceQueryVisitHelpsGiftUnitsOnBunker.proto");
  GOOGLE_CHECK(file != NULL);
  RceQueryVisitHelpsGiftUnitsOnBunker_descriptor_ = file->message_type(0);
  static const int RceQueryVisitHelpsGiftUnitsOnBunker_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RceQueryVisitHelpsGiftUnitsOnBunker, planetid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RceQueryVisitHelpsGiftUnitsOnBunker, bunkersid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RceQueryVisitHelpsGiftUnitsOnBunker, unitsarray_),
  };
  RceQueryVisitHelpsGiftUnitsOnBunker_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RceQueryVisitHelpsGiftUnitsOnBunker_descriptor_,
      RceQueryVisitHelpsGiftUnitsOnBunker::default_instance_,
      RceQueryVisitHelpsGiftUnitsOnBunker_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RceQueryVisitHelpsGiftUnitsOnBunker, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RceQueryVisitHelpsGiftUnitsOnBunker, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RceQueryVisitHelpsGiftUnitsOnBunker));
  UnitsArray_descriptor_ = file->message_type(1);
  static const int UnitsArray_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnitsArray, hangarsid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnitsArray, sku_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnitsArray, amount_),
  };
  UnitsArray_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UnitsArray_descriptor_,
      UnitsArray::default_instance_,
      UnitsArray_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnitsArray, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnitsArray, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UnitsArray));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_RceQueryVisitHelpsGiftUnitsOnBunker_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RceQueryVisitHelpsGiftUnitsOnBunker_descriptor_, &RceQueryVisitHelpsGiftUnitsOnBunker::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UnitsArray_descriptor_, &UnitsArray::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_RceQueryVisitHelpsGiftUnitsOnBunker_2eproto() {
  delete RceQueryVisitHelpsGiftUnitsOnBunker::default_instance_;
  delete RceQueryVisitHelpsGiftUnitsOnBunker_reflection_;
  delete UnitsArray::default_instance_;
  delete UnitsArray_reflection_;
}

void protobuf_AddDesc_RceQueryVisitHelpsGiftUnitsOnBunker_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n)RceQueryVisitHelpsGiftUnitsOnBunker.pr"
    "oto\"k\n#RceQueryVisitHelpsGiftUnitsOnBunk"
    "er\022\020\n\010planetId\030\001 \001(\t\022\021\n\tbunkerSid\030\002 \001(\005\022"
    "\037\n\nunitsArray\030\003 \003(\0132\013.UnitsArray\"<\n\nUnit"
    "sArray\022\021\n\thangarSid\030\001 \001(\005\022\013\n\003sku\030\002 \001(\t\022\016"
    "\n\006amount\030\003 \001(\t", 214);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "RceQueryVisitHelpsGiftUnitsOnBunker.proto", &protobuf_RegisterTypes);
  RceQueryVisitHelpsGiftUnitsOnBunker::default_instance_ = new RceQueryVisitHelpsGiftUnitsOnBunker();
  UnitsArray::default_instance_ = new UnitsArray();
  RceQueryVisitHelpsGiftUnitsOnBunker::default_instance_->InitAsDefaultInstance();
  UnitsArray::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_RceQueryVisitHelpsGiftUnitsOnBunker_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_RceQueryVisitHelpsGiftUnitsOnBunker_2eproto {
  StaticDescriptorInitializer_RceQueryVisitHelpsGiftUnitsOnBunker_2eproto() {
    protobuf_AddDesc_RceQueryVisitHelpsGiftUnitsOnBunker_2eproto();
  }
} static_descriptor_initializer_RceQueryVisitHelpsGiftUnitsOnBunker_2eproto_;


// ===================================================================

const ::std::string RceQueryVisitHelpsGiftUnitsOnBunker::_default_planetid_;
#ifndef _MSC_VER
const int RceQueryVisitHelpsGiftUnitsOnBunker::kPlanetIdFieldNumber;
const int RceQueryVisitHelpsGiftUnitsOnBunker::kBunkerSidFieldNumber;
const int RceQueryVisitHelpsGiftUnitsOnBunker::kUnitsArrayFieldNumber;
#endif  // !_MSC_VER

RceQueryVisitHelpsGiftUnitsOnBunker::RceQueryVisitHelpsGiftUnitsOnBunker() {
  SharedCtor();
}

void RceQueryVisitHelpsGiftUnitsOnBunker::InitAsDefaultInstance() {
}

RceQueryVisitHelpsGiftUnitsOnBunker::RceQueryVisitHelpsGiftUnitsOnBunker(const RceQueryVisitHelpsGiftUnitsOnBunker& from) {
  SharedCtor();
  MergeFrom(from);
}

void RceQueryVisitHelpsGiftUnitsOnBunker::SharedCtor() {
  _cached_size_ = 0;
  planetid_ = const_cast< ::std::string*>(&_default_planetid_);
  bunkersid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RceQueryVisitHelpsGiftUnitsOnBunker::~RceQueryVisitHelpsGiftUnitsOnBunker() {
  SharedDtor();
}

void RceQueryVisitHelpsGiftUnitsOnBunker::SharedDtor() {
  if (planetid_ != &_default_planetid_) {
    delete planetid_;
  }
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* RceQueryVisitHelpsGiftUnitsOnBunker::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RceQueryVisitHelpsGiftUnitsOnBunker_descriptor_;
}

const RceQueryVisitHelpsGiftUnitsOnBunker& RceQueryVisitHelpsGiftUnitsOnBunker::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_RceQueryVisitHelpsGiftUnitsOnBunker_2eproto();  return *default_instance_;
}

RceQueryVisitHelpsGiftUnitsOnBunker* RceQueryVisitHelpsGiftUnitsOnBunker::default_instance_ = NULL;

RceQueryVisitHelpsGiftUnitsOnBunker* RceQueryVisitHelpsGiftUnitsOnBunker::New() const {
  return new RceQueryVisitHelpsGiftUnitsOnBunker;
}

void RceQueryVisitHelpsGiftUnitsOnBunker::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (planetid_ != &_default_planetid_) {
        planetid_->clear();
      }
    }
    bunkersid_ = 0;
  }
  unitsarray_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RceQueryVisitHelpsGiftUnitsOnBunker::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string planetId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadString(
              input, this->mutable_planetid()));
        ::google::protobuf::internal::WireFormat::VerifyUTF8String(
          this->planetid().data(), this->planetid().length(),
          ::google::protobuf::internal::WireFormat::PARSE);
        if (input->ExpectTag(16)) goto parse_bunkerSid;
        break;
      }
      
      // optional int32 bunkerSid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_bunkerSid:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &bunkersid_));
        _set_bit(1);
        if (input->ExpectTag(26)) goto parse_unitsArray;
        break;
      }
      
      // repeated .UnitsArray unitsArray = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_unitsArray:
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, add_unitsarray()));
        if (input->ExpectTag(26)) goto parse_unitsArray;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RceQueryVisitHelpsGiftUnitsOnBunker::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    RceQueryVisitHelpsGiftUnitsOnBunker::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional string planetId = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->planetid().data(), this->planetid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->planetid(), output);
  }
  
  // optional int32 bunkerSid = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->bunkersid(), output);
  }
  
  // repeated .UnitsArray unitsArray = 3;
  for (int i = 0; i < this->unitsarray_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      3, this->unitsarray(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RceQueryVisitHelpsGiftUnitsOnBunker::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string planetId = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->planetid().data(), this->planetid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->planetid(), target);
  }
  
  // optional int32 bunkerSid = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->bunkersid(), target);
  }
  
  // repeated .UnitsArray unitsArray = 3;
  for (int i = 0; i < this->unitsarray_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->unitsarray(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RceQueryVisitHelpsGiftUnitsOnBunker::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string planetId = 1;
    if (has_planetid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->planetid());
    }
    
    // optional int32 bunkerSid = 2;
    if (has_bunkersid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bunkersid());
    }
    
  }
  // repeated .UnitsArray unitsArray = 3;
  total_size += 1 * this->unitsarray_size();
  for (int i = 0; i < this->unitsarray_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->unitsarray(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void RceQueryVisitHelpsGiftUnitsOnBunker::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RceQueryVisitHelpsGiftUnitsOnBunker* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RceQueryVisitHelpsGiftUnitsOnBunker*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RceQueryVisitHelpsGiftUnitsOnBunker::MergeFrom(const RceQueryVisitHelpsGiftUnitsOnBunker& from) {
  GOOGLE_CHECK_NE(&from, this);
  unitsarray_.MergeFrom(from.unitsarray_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_planetid(from.planetid());
    }
    if (from._has_bit(1)) {
      set_bunkersid(from.bunkersid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RceQueryVisitHelpsGiftUnitsOnBunker::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RceQueryVisitHelpsGiftUnitsOnBunker::CopyFrom(const RceQueryVisitHelpsGiftUnitsOnBunker& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RceQueryVisitHelpsGiftUnitsOnBunker::IsInitialized() const {
  
  return true;
}

void RceQueryVisitHelpsGiftUnitsOnBunker::Swap(RceQueryVisitHelpsGiftUnitsOnBunker* other) {
  if (other != this) {
    std::swap(planetid_, other->planetid_);
    std::swap(bunkersid_, other->bunkersid_);
    unitsarray_.Swap(&other->unitsarray_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RceQueryVisitHelpsGiftUnitsOnBunker::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RceQueryVisitHelpsGiftUnitsOnBunker_descriptor_;
  metadata.reflection = RceQueryVisitHelpsGiftUnitsOnBunker_reflection_;
  return metadata;
}


// ===================================================================

const ::std::string UnitsArray::_default_sku_;
const ::std::string UnitsArray::_default_amount_;
#ifndef _MSC_VER
const int UnitsArray::kHangarSidFieldNumber;
const int UnitsArray::kSkuFieldNumber;
const int UnitsArray::kAmountFieldNumber;
#endif  // !_MSC_VER

UnitsArray::UnitsArray() {
  SharedCtor();
}

void UnitsArray::InitAsDefaultInstance() {
}

UnitsArray::UnitsArray(const UnitsArray& from) {
  SharedCtor();
  MergeFrom(from);
}

void UnitsArray::SharedCtor() {
  _cached_size_ = 0;
  hangarsid_ = 0;
  sku_ = const_cast< ::std::string*>(&_default_sku_);
  amount_ = const_cast< ::std::string*>(&_default_amount_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UnitsArray::~UnitsArray() {
  SharedDtor();
}

void UnitsArray::SharedDtor() {
  if (sku_ != &_default_sku_) {
    delete sku_;
  }
  if (amount_ != &_default_amount_) {
    delete amount_;
  }
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* UnitsArray::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UnitsArray_descriptor_;
}

const UnitsArray& UnitsArray::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_RceQueryVisitHelpsGiftUnitsOnBunker_2eproto();  return *default_instance_;
}

UnitsArray* UnitsArray::default_instance_ = NULL;

UnitsArray* UnitsArray::New() const {
  return new UnitsArray;
}

void UnitsArray::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    hangarsid_ = 0;
    if (_has_bit(1)) {
      if (sku_ != &_default_sku_) {
        sku_->clear();
      }
    }
    if (_has_bit(2)) {
      if (amount_ != &_default_amount_) {
        amount_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UnitsArray::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 hangarSid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &hangarsid_));
        _set_bit(0);
        if (input->ExpectTag(18)) goto parse_sku;
        break;
      }
      
      // optional string sku = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_sku:
        DO_(::google::protobuf::internal::WireFormatLite::ReadString(
              input, this->mutable_sku()));
        ::google::protobuf::internal::WireFormat::VerifyUTF8String(
          this->sku().data(), this->sku().length(),
          ::google::protobuf::internal::WireFormat::PARSE);
        if (input->ExpectTag(26)) goto parse_amount;
        break;
      }
      
      // optional string amount = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_amount:
        DO_(::google::protobuf::internal::WireFormatLite::ReadString(
              input, this->mutable_amount()));
        ::google::protobuf::internal::WireFormat::VerifyUTF8String(
          this->amount().data(), this->amount().length(),
          ::google::protobuf::internal::WireFormat::PARSE);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void UnitsArray::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    UnitsArray::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional int32 hangarSid = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->hangarsid(), output);
  }
  
  // optional string sku = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->sku().data(), this->sku().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->sku(), output);
  }
  
  // optional string amount = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->amount().data(), this->amount().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->amount(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* UnitsArray::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 hangarSid = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->hangarsid(), target);
  }
  
  // optional string sku = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->sku().data(), this->sku().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->sku(), target);
  }
  
  // optional string amount = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->amount().data(), this->amount().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->amount(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int UnitsArray::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 hangarSid = 1;
    if (has_hangarsid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->hangarsid());
    }
    
    // optional string sku = 2;
    if (has_sku()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->sku());
    }
    
    // optional string amount = 3;
    if (has_amount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->amount());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void UnitsArray::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UnitsArray* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UnitsArray*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UnitsArray::MergeFrom(const UnitsArray& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_hangarsid(from.hangarsid());
    }
    if (from._has_bit(1)) {
      set_sku(from.sku());
    }
    if (from._has_bit(2)) {
      set_amount(from.amount());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UnitsArray::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UnitsArray::CopyFrom(const UnitsArray& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UnitsArray::IsInitialized() const {
  
  return true;
}

void UnitsArray::Swap(UnitsArray* other) {
  if (other != this) {
    std::swap(hangarsid_, other->hangarsid_);
    std::swap(sku_, other->sku_);
    std::swap(amount_, other->amount_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UnitsArray::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UnitsArray_descriptor_;
  metadata.reflection = UnitsArray_reflection_;
  return metadata;
}

