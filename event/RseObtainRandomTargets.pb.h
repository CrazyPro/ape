// Generated by the protocol buffer compiler.  DO NOT EDIT!

#ifndef PROTOBUF_RseObtainRandomTargets_2eproto__INCLUDED
#define PROTOBUF_RseObtainRandomTargets_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2002000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2002000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_RseObtainRandomTargets_2eproto();
void protobuf_AssignDesc_RseObtainRandomTargets_2eproto();
void protobuf_ShutdownFile_RseObtainRandomTargets_2eproto();

class NonFriendsList;
class RseObtainRandomTargets;

// ===================================================================

class NonFriendsList : public ::google::protobuf::Message {
 public:
  NonFriendsList();
  virtual ~NonFriendsList();
  
  NonFriendsList(const NonFriendsList& from);
  
  inline NonFriendsList& operator=(const NonFriendsList& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const NonFriendsList& default_instance();
  void Swap(NonFriendsList* other);
  
  // implements Message ----------------------------------------------
  
  NonFriendsList* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const NonFriendsList& from);
  void MergeFrom(const NonFriendsList& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const { _cached_size_ = size; }
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional int32 planetId = 1;
  inline bool has_planetid() const;
  inline void clear_planetid();
  static const int kPlanetIdFieldNumber = 1;
  inline ::google::protobuf::int32 planetid() const;
  inline void set_planetid(::google::protobuf::int32 value);
  
  // optional int64 accountId = 2;
  inline bool has_accountid() const;
  inline void clear_accountid();
  static const int kAccountIdFieldNumber = 2;
  inline ::google::protobuf::int64 accountid() const;
  inline void set_accountid(::google::protobuf::int64 value);
  
  // optional string planetSku = 3;
  inline bool has_planetsku() const;
  inline void clear_planetsku();
  static const int kPlanetSkuFieldNumber = 3;
  inline const ::std::string& planetsku() const;
  inline void set_planetsku(const ::std::string& value);
  inline void set_planetsku(const char* value);
  inline void set_planetsku(const char* value, size_t size);
  inline ::std::string* mutable_planetsku();
  
  // optional string name = 4;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 4;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  
  // optional int32 score = 5;
  inline bool has_score() const;
  inline void clear_score();
  static const int kScoreFieldNumber = 5;
  inline ::google::protobuf::int32 score() const;
  inline void set_score(::google::protobuf::int32 value);
  
  // optional int32 hqLevel = 6;
  inline bool has_hqlevel() const;
  inline void clear_hqlevel();
  static const int kHqLevelFieldNumber = 6;
  inline ::google::protobuf::int32 hqlevel() const;
  inline void set_hqlevel(::google::protobuf::int32 value);
  
  // optional int64 xp = 7;
  inline bool has_xp() const;
  inline void clear_xp();
  static const int kXpFieldNumber = 7;
  inline ::google::protobuf::int64 xp() const;
  inline void set_xp(::google::protobuf::int64 value);
  
  // optional int32 levelBasedOnScore = 8;
  inline bool has_levelbasedonscore() const;
  inline void clear_levelbasedonscore();
  static const int kLevelBasedOnScoreFieldNumber = 8;
  inline ::google::protobuf::int32 levelbasedonscore() const;
  inline void set_levelbasedonscore(::google::protobuf::int32 value);
  
  // repeated int32 user = 9;
  inline int user_size() const;
  inline void clear_user();
  static const int kUserFieldNumber = 9;
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >& user() const
      ;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >* mutable_user();
  inline ::google::protobuf::int32 user(int index) const;
  inline void set_user(int index, ::google::protobuf::int32 value);
  inline void add_user(::google::protobuf::int32 value);
  
  // optional string url = 10;
  inline bool has_url() const;
  inline void clear_url();
  static const int kUrlFieldNumber = 10;
  inline const ::std::string& url() const;
  inline void set_url(const ::std::string& value);
  inline void set_url(const char* value);
  inline void set_url(const char* value, size_t size);
  inline ::std::string* mutable_url();
  
  // optional int32 damageProtectionTimeLeft = 11;
  inline bool has_damageprotectiontimeleft() const;
  inline void clear_damageprotectiontimeleft();
  static const int kDamageProtectionTimeLeftFieldNumber = 11;
  inline ::google::protobuf::int32 damageprotectiontimeleft() const;
  inline void set_damageprotectiontimeleft(::google::protobuf::int32 value);
  
  // optional int32 tutorialCompleted = 12;
  inline bool has_tutorialcompleted() const;
  inline void clear_tutorialcompleted();
  static const int kTutorialCompletedFieldNumber = 12;
  inline ::google::protobuf::int32 tutorialcompleted() const;
  inline void set_tutorialcompleted(::google::protobuf::int32 value);
  
  // optional int32 isOnline = 13;
  inline bool has_isonline() const;
  inline void clear_isonline();
  static const int kIsOnlineFieldNumber = 13;
  inline ::google::protobuf::int32 isonline() const;
  inline void set_isonline(::google::protobuf::int32 value);
  
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::google::protobuf::int32 planetid_;
  ::google::protobuf::int64 accountid_;
  ::std::string* planetsku_;
  static const ::std::string _default_planetsku_;
  ::std::string* name_;
  static const ::std::string _default_name_;
  ::google::protobuf::int32 score_;
  ::google::protobuf::int32 hqlevel_;
  ::google::protobuf::int64 xp_;
  ::google::protobuf::int32 levelbasedonscore_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > user_;
  ::std::string* url_;
  static const ::std::string _default_url_;
  ::google::protobuf::int32 damageprotectiontimeleft_;
  ::google::protobuf::int32 tutorialcompleted_;
  ::google::protobuf::int32 isonline_;
  friend void  protobuf_AddDesc_RseObtainRandomTargets_2eproto();
  friend void protobuf_AssignDesc_RseObtainRandomTargets_2eproto();
  friend void protobuf_ShutdownFile_RseObtainRandomTargets_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(13 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static NonFriendsList* default_instance_;
};
// -------------------------------------------------------------------

class RseObtainRandomTargets : public ::google::protobuf::Message {
 public:
  RseObtainRandomTargets();
  virtual ~RseObtainRandomTargets();
  
  RseObtainRandomTargets(const RseObtainRandomTargets& from);
  
  inline RseObtainRandomTargets& operator=(const RseObtainRandomTargets& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const RseObtainRandomTargets& default_instance();
  void Swap(RseObtainRandomTargets* other);
  
  // implements Message ----------------------------------------------
  
  RseObtainRandomTargets* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RseObtainRandomTargets& from);
  void MergeFrom(const RseObtainRandomTargets& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const { _cached_size_ = size; }
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // repeated .NonFriendsList nonFriendsList = 1;
  inline int nonfriendslist_size() const;
  inline void clear_nonfriendslist();
  static const int kNonFriendsListFieldNumber = 1;
  inline const ::google::protobuf::RepeatedPtrField< ::NonFriendsList >& nonfriendslist() const;
  inline ::google::protobuf::RepeatedPtrField< ::NonFriendsList >* mutable_nonfriendslist();
  inline const ::NonFriendsList& nonfriendslist(int index) const;
  inline ::NonFriendsList* mutable_nonfriendslist(int index);
  inline ::NonFriendsList* add_nonfriendslist();
  
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::google::protobuf::RepeatedPtrField< ::NonFriendsList > nonfriendslist_;
  friend void  protobuf_AddDesc_RseObtainRandomTargets_2eproto();
  friend void protobuf_AssignDesc_RseObtainRandomTargets_2eproto();
  friend void protobuf_ShutdownFile_RseObtainRandomTargets_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static RseObtainRandomTargets* default_instance_;
};
// ===================================================================


// ===================================================================


// ===================================================================

// NonFriendsList

// optional int32 planetId = 1;
inline bool NonFriendsList::has_planetid() const {
  return _has_bit(0);
}
inline void NonFriendsList::clear_planetid() {
  planetid_ = 0;
  _clear_bit(0);
}
inline ::google::protobuf::int32 NonFriendsList::planetid() const {
  return planetid_;
}
inline void NonFriendsList::set_planetid(::google::protobuf::int32 value) {
  _set_bit(0);
  planetid_ = value;
}

// optional int64 accountId = 2;
inline bool NonFriendsList::has_accountid() const {
  return _has_bit(1);
}
inline void NonFriendsList::clear_accountid() {
  accountid_ = GOOGLE_LONGLONG(0);
  _clear_bit(1);
}
inline ::google::protobuf::int64 NonFriendsList::accountid() const {
  return accountid_;
}
inline void NonFriendsList::set_accountid(::google::protobuf::int64 value) {
  _set_bit(1);
  accountid_ = value;
}

// optional string planetSku = 3;
inline bool NonFriendsList::has_planetsku() const {
  return _has_bit(2);
}
inline void NonFriendsList::clear_planetsku() {
  if (planetsku_ != &_default_planetsku_) {
    planetsku_->clear();
  }
  _clear_bit(2);
}
inline const ::std::string& NonFriendsList::planetsku() const {
  return *planetsku_;
}
inline void NonFriendsList::set_planetsku(const ::std::string& value) {
  _set_bit(2);
  if (planetsku_ == &_default_planetsku_) {
    planetsku_ = new ::std::string;
  }
  planetsku_->assign(value);
}
inline void NonFriendsList::set_planetsku(const char* value) {
  _set_bit(2);
  if (planetsku_ == &_default_planetsku_) {
    planetsku_ = new ::std::string;
  }
  planetsku_->assign(value);
}
inline void NonFriendsList::set_planetsku(const char* value, size_t size) {
  _set_bit(2);
  if (planetsku_ == &_default_planetsku_) {
    planetsku_ = new ::std::string;
  }
  planetsku_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* NonFriendsList::mutable_planetsku() {
  _set_bit(2);
  if (planetsku_ == &_default_planetsku_) {
    planetsku_ = new ::std::string;
  }
  return planetsku_;
}

// optional string name = 4;
inline bool NonFriendsList::has_name() const {
  return _has_bit(3);
}
inline void NonFriendsList::clear_name() {
  if (name_ != &_default_name_) {
    name_->clear();
  }
  _clear_bit(3);
}
inline const ::std::string& NonFriendsList::name() const {
  return *name_;
}
inline void NonFriendsList::set_name(const ::std::string& value) {
  _set_bit(3);
  if (name_ == &_default_name_) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void NonFriendsList::set_name(const char* value) {
  _set_bit(3);
  if (name_ == &_default_name_) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void NonFriendsList::set_name(const char* value, size_t size) {
  _set_bit(3);
  if (name_ == &_default_name_) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* NonFriendsList::mutable_name() {
  _set_bit(3);
  if (name_ == &_default_name_) {
    name_ = new ::std::string;
  }
  return name_;
}

// optional int32 score = 5;
inline bool NonFriendsList::has_score() const {
  return _has_bit(4);
}
inline void NonFriendsList::clear_score() {
  score_ = 0;
  _clear_bit(4);
}
inline ::google::protobuf::int32 NonFriendsList::score() const {
  return score_;
}
inline void NonFriendsList::set_score(::google::protobuf::int32 value) {
  _set_bit(4);
  score_ = value;
}

// optional int32 hqLevel = 6;
inline bool NonFriendsList::has_hqlevel() const {
  return _has_bit(5);
}
inline void NonFriendsList::clear_hqlevel() {
  hqlevel_ = 0;
  _clear_bit(5);
}
inline ::google::protobuf::int32 NonFriendsList::hqlevel() const {
  return hqlevel_;
}
inline void NonFriendsList::set_hqlevel(::google::protobuf::int32 value) {
  _set_bit(5);
  hqlevel_ = value;
}

// optional int64 xp = 7;
inline bool NonFriendsList::has_xp() const {
  return _has_bit(6);
}
inline void NonFriendsList::clear_xp() {
  xp_ = GOOGLE_LONGLONG(0);
  _clear_bit(6);
}
inline ::google::protobuf::int64 NonFriendsList::xp() const {
  return xp_;
}
inline void NonFriendsList::set_xp(::google::protobuf::int64 value) {
  _set_bit(6);
  xp_ = value;
}

// optional int32 levelBasedOnScore = 8;
inline bool NonFriendsList::has_levelbasedonscore() const {
  return _has_bit(7);
}
inline void NonFriendsList::clear_levelbasedonscore() {
  levelbasedonscore_ = 0;
  _clear_bit(7);
}
inline ::google::protobuf::int32 NonFriendsList::levelbasedonscore() const {
  return levelbasedonscore_;
}
inline void NonFriendsList::set_levelbasedonscore(::google::protobuf::int32 value) {
  _set_bit(7);
  levelbasedonscore_ = value;
}

// repeated int32 user = 9;
inline int NonFriendsList::user_size() const {
  return user_.size();
}
inline void NonFriendsList::clear_user() {
  user_.Clear();
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
NonFriendsList::user() const {
  return user_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
NonFriendsList::mutable_user() {
  return &user_;
}
inline ::google::protobuf::int32 NonFriendsList::user(int index) const {
  return user_.Get(index);
}
inline void NonFriendsList::set_user(int index, ::google::protobuf::int32 value) {
  user_.Set(index, value);
}
inline void NonFriendsList::add_user(::google::protobuf::int32 value) {
  user_.Add(value);
}

// optional string url = 10;
inline bool NonFriendsList::has_url() const {
  return _has_bit(9);
}
inline void NonFriendsList::clear_url() {
  if (url_ != &_default_url_) {
    url_->clear();
  }
  _clear_bit(9);
}
inline const ::std::string& NonFriendsList::url() const {
  return *url_;
}
inline void NonFriendsList::set_url(const ::std::string& value) {
  _set_bit(9);
  if (url_ == &_default_url_) {
    url_ = new ::std::string;
  }
  url_->assign(value);
}
inline void NonFriendsList::set_url(const char* value) {
  _set_bit(9);
  if (url_ == &_default_url_) {
    url_ = new ::std::string;
  }
  url_->assign(value);
}
inline void NonFriendsList::set_url(const char* value, size_t size) {
  _set_bit(9);
  if (url_ == &_default_url_) {
    url_ = new ::std::string;
  }
  url_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* NonFriendsList::mutable_url() {
  _set_bit(9);
  if (url_ == &_default_url_) {
    url_ = new ::std::string;
  }
  return url_;
}

// optional int32 damageProtectionTimeLeft = 11;
inline bool NonFriendsList::has_damageprotectiontimeleft() const {
  return _has_bit(10);
}
inline void NonFriendsList::clear_damageprotectiontimeleft() {
  damageprotectiontimeleft_ = 0;
  _clear_bit(10);
}
inline ::google::protobuf::int32 NonFriendsList::damageprotectiontimeleft() const {
  return damageprotectiontimeleft_;
}
inline void NonFriendsList::set_damageprotectiontimeleft(::google::protobuf::int32 value) {
  _set_bit(10);
  damageprotectiontimeleft_ = value;
}

// optional int32 tutorialCompleted = 12;
inline bool NonFriendsList::has_tutorialcompleted() const {
  return _has_bit(11);
}
inline void NonFriendsList::clear_tutorialcompleted() {
  tutorialcompleted_ = 0;
  _clear_bit(11);
}
inline ::google::protobuf::int32 NonFriendsList::tutorialcompleted() const {
  return tutorialcompleted_;
}
inline void NonFriendsList::set_tutorialcompleted(::google::protobuf::int32 value) {
  _set_bit(11);
  tutorialcompleted_ = value;
}

// optional int32 isOnline = 13;
inline bool NonFriendsList::has_isonline() const {
  return _has_bit(12);
}
inline void NonFriendsList::clear_isonline() {
  isonline_ = 0;
  _clear_bit(12);
}
inline ::google::protobuf::int32 NonFriendsList::isonline() const {
  return isonline_;
}
inline void NonFriendsList::set_isonline(::google::protobuf::int32 value) {
  _set_bit(12);
  isonline_ = value;
}

// -------------------------------------------------------------------

// RseObtainRandomTargets

// repeated .NonFriendsList nonFriendsList = 1;
inline int RseObtainRandomTargets::nonfriendslist_size() const {
  return nonfriendslist_.size();
}
inline void RseObtainRandomTargets::clear_nonfriendslist() {
  nonfriendslist_.Clear();
}
inline const ::google::protobuf::RepeatedPtrField< ::NonFriendsList >&
RseObtainRandomTargets::nonfriendslist() const {
  return nonfriendslist_;
}
inline ::google::protobuf::RepeatedPtrField< ::NonFriendsList >*
RseObtainRandomTargets::mutable_nonfriendslist() {
  return &nonfriendslist_;
}
inline const ::NonFriendsList& RseObtainRandomTargets::nonfriendslist(int index) const {
  return nonfriendslist_.Get(index);
}
inline ::NonFriendsList* RseObtainRandomTargets::mutable_nonfriendslist(int index) {
  return nonfriendslist_.Mutable(index);
}
inline ::NonFriendsList* RseObtainRandomTargets::add_nonfriendslist() {
  return nonfriendslist_.Add();
}


#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

#endif  // PROTOBUF_RseObtainRandomTargets_2eproto__INCLUDED
