// Generated by the protocol buffer compiler.  DO NOT EDIT!

#ifndef PROTOBUF_MsgMission_2eproto__INCLUDED
#define PROTOBUF_MsgMission_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2002000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2002000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_MsgMission_2eproto();
void protobuf_AssignDesc_MsgMission_2eproto();
void protobuf_ShutdownFile_MsgMission_2eproto();

class MsgMissionParam;
class MsgMissionState;

// ===================================================================

class MsgMissionParam : public ::google::protobuf::Message {
 public:
  MsgMissionParam();
  virtual ~MsgMissionParam();
  
  MsgMissionParam(const MsgMissionParam& from);
  
  inline MsgMissionParam& operator=(const MsgMissionParam& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const MsgMissionParam& default_instance();
  void Swap(MsgMissionParam* other);
  
  // implements Message ----------------------------------------------
  
  MsgMissionParam* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MsgMissionParam& from);
  void MergeFrom(const MsgMissionParam& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const { _cached_size_ = size; }
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // repeated string Target = 1;
  inline int target_size() const;
  inline void clear_target();
  static const int kTargetFieldNumber = 1;
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& target() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_target();
  inline const ::std::string& target(int index) const;
  inline ::std::string* mutable_target(int index);
  inline void set_target(int index, const ::std::string& value);
  inline void set_target(int index, const char* value);
  inline void set_target(int index, const char* value, size_t size);
  inline ::std::string* add_target();
  inline void add_target(const ::std::string& value);
  inline void add_target(const char* value);
  inline void add_target(const char* value, size_t size);
  
  // optional int32 endTime = 2;
  inline bool has_endtime() const;
  inline void clear_endtime();
  static const int kEndTimeFieldNumber = 2;
  inline ::google::protobuf::int32 endtime() const;
  inline void set_endtime(::google::protobuf::int32 value);
  
  // optional string sku = 3;
  inline bool has_sku() const;
  inline void clear_sku();
  static const int kSkuFieldNumber = 3;
  inline const ::std::string& sku() const;
  inline void set_sku(const ::std::string& value);
  inline void set_sku(const char* value);
  inline void set_sku(const char* value, size_t size);
  inline ::std::string* mutable_sku();
  
  // optional string progress = 4;
  inline bool has_progress() const;
  inline void clear_progress();
  static const int kProgressFieldNumber = 4;
  inline const ::std::string& progress() const;
  inline void set_progress(const ::std::string& value);
  inline void set_progress(const char* value);
  inline void set_progress(const char* value, size_t size);
  inline ::std::string* mutable_progress();
  
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::google::protobuf::RepeatedPtrField< ::std::string> target_;
  ::google::protobuf::int32 endtime_;
  ::std::string* sku_;
  static const ::std::string _default_sku_;
  ::std::string* progress_;
  static const ::std::string _default_progress_;
  friend void  protobuf_AddDesc_MsgMission_2eproto();
  friend void protobuf_AssignDesc_MsgMission_2eproto();
  friend void protobuf_ShutdownFile_MsgMission_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static MsgMissionParam* default_instance_;
};
// -------------------------------------------------------------------

class MsgMissionState : public ::google::protobuf::Message {
 public:
  MsgMissionState();
  virtual ~MsgMissionState();
  
  MsgMissionState(const MsgMissionState& from);
  
  inline MsgMissionState& operator=(const MsgMissionState& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const MsgMissionState& default_instance();
  void Swap(MsgMissionState* other);
  
  // implements Message ----------------------------------------------
  
  MsgMissionState* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MsgMissionState& from);
  void MergeFrom(const MsgMissionState& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const { _cached_size_ = size; }
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional string ReadyToStart = 1;
  inline bool has_readytostart() const;
  inline void clear_readytostart();
  static const int kReadyToStartFieldNumber = 1;
  inline const ::std::string& readytostart() const;
  inline void set_readytostart(const ::std::string& value);
  inline void set_readytostart(const char* value);
  inline void set_readytostart(const char* value, size_t size);
  inline ::std::string* mutable_readytostart();
  
  // optional string Available = 2;
  inline bool has_available() const;
  inline void clear_available();
  static const int kAvailableFieldNumber = 2;
  inline const ::std::string& available() const;
  inline void set_available(const ::std::string& value);
  inline void set_available(const char* value);
  inline void set_available(const char* value, size_t size);
  inline ::std::string* mutable_available();
  
  // optional string Rewarded = 3;
  inline bool has_rewarded() const;
  inline void clear_rewarded();
  static const int kRewardedFieldNumber = 3;
  inline const ::std::string& rewarded() const;
  inline void set_rewarded(const ::std::string& value);
  inline void set_rewarded(const char* value);
  inline void set_rewarded(const char* value, size_t size);
  inline ::std::string* mutable_rewarded();
  
  // optional string Completed = 4;
  inline bool has_completed() const;
  inline void clear_completed();
  static const int kCompletedFieldNumber = 4;
  inline const ::std::string& completed() const;
  inline void set_completed(const ::std::string& value);
  inline void set_completed(const char* value);
  inline void set_completed(const char* value, size_t size);
  inline ::std::string* mutable_completed();
  
  // repeated .MsgMissionParam Params = 5;
  inline int params_size() const;
  inline void clear_params();
  static const int kParamsFieldNumber = 5;
  inline const ::google::protobuf::RepeatedPtrField< ::MsgMissionParam >& params() const;
  inline ::google::protobuf::RepeatedPtrField< ::MsgMissionParam >* mutable_params();
  inline const ::MsgMissionParam& params(int index) const;
  inline ::MsgMissionParam* mutable_params(int index);
  inline ::MsgMissionParam* add_params();
  
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::std::string* readytostart_;
  static const ::std::string _default_readytostart_;
  ::std::string* available_;
  static const ::std::string _default_available_;
  ::std::string* rewarded_;
  static const ::std::string _default_rewarded_;
  ::std::string* completed_;
  static const ::std::string _default_completed_;
  ::google::protobuf::RepeatedPtrField< ::MsgMissionParam > params_;
  friend void  protobuf_AddDesc_MsgMission_2eproto();
  friend void protobuf_AssignDesc_MsgMission_2eproto();
  friend void protobuf_ShutdownFile_MsgMission_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static MsgMissionState* default_instance_;
};
// ===================================================================


// ===================================================================


// ===================================================================

// MsgMissionParam

// repeated string Target = 1;
inline int MsgMissionParam::target_size() const {
  return target_.size();
}
inline void MsgMissionParam::clear_target() {
  target_.Clear();
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
MsgMissionParam::target() const {
  return target_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
MsgMissionParam::mutable_target() {
  return &target_;
}
inline const ::std::string& MsgMissionParam::target(int index) const {
  return target_.Get(index);
}
inline ::std::string* MsgMissionParam::mutable_target(int index) {
  return target_.Mutable(index);
}
inline void MsgMissionParam::set_target(int index, const ::std::string& value) {
  target_.Mutable(index)->assign(value);
}
inline void MsgMissionParam::set_target(int index, const char* value) {
  target_.Mutable(index)->assign(value);
}
inline void MsgMissionParam::set_target(int index, const char* value, size_t size) {
  target_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* MsgMissionParam::add_target() {
  return target_.Add();
}
inline void MsgMissionParam::add_target(const ::std::string& value) {
  target_.Add()->assign(value);
}
inline void MsgMissionParam::add_target(const char* value) {
  target_.Add()->assign(value);
}
inline void MsgMissionParam::add_target(const char* value, size_t size) {
  target_.Add()->assign(reinterpret_cast<const char*>(value), size);
}

// optional int32 endTime = 2;
inline bool MsgMissionParam::has_endtime() const {
  return _has_bit(1);
}
inline void MsgMissionParam::clear_endtime() {
  endtime_ = 0;
  _clear_bit(1);
}
inline ::google::protobuf::int32 MsgMissionParam::endtime() const {
  return endtime_;
}
inline void MsgMissionParam::set_endtime(::google::protobuf::int32 value) {
  _set_bit(1);
  endtime_ = value;
}

// optional string sku = 3;
inline bool MsgMissionParam::has_sku() const {
  return _has_bit(2);
}
inline void MsgMissionParam::clear_sku() {
  if (sku_ != &_default_sku_) {
    sku_->clear();
  }
  _clear_bit(2);
}
inline const ::std::string& MsgMissionParam::sku() const {
  return *sku_;
}
inline void MsgMissionParam::set_sku(const ::std::string& value) {
  _set_bit(2);
  if (sku_ == &_default_sku_) {
    sku_ = new ::std::string;
  }
  sku_->assign(value);
}
inline void MsgMissionParam::set_sku(const char* value) {
  _set_bit(2);
  if (sku_ == &_default_sku_) {
    sku_ = new ::std::string;
  }
  sku_->assign(value);
}
inline void MsgMissionParam::set_sku(const char* value, size_t size) {
  _set_bit(2);
  if (sku_ == &_default_sku_) {
    sku_ = new ::std::string;
  }
  sku_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* MsgMissionParam::mutable_sku() {
  _set_bit(2);
  if (sku_ == &_default_sku_) {
    sku_ = new ::std::string;
  }
  return sku_;
}

// optional string progress = 4;
inline bool MsgMissionParam::has_progress() const {
  return _has_bit(3);
}
inline void MsgMissionParam::clear_progress() {
  if (progress_ != &_default_progress_) {
    progress_->clear();
  }
  _clear_bit(3);
}
inline const ::std::string& MsgMissionParam::progress() const {
  return *progress_;
}
inline void MsgMissionParam::set_progress(const ::std::string& value) {
  _set_bit(3);
  if (progress_ == &_default_progress_) {
    progress_ = new ::std::string;
  }
  progress_->assign(value);
}
inline void MsgMissionParam::set_progress(const char* value) {
  _set_bit(3);
  if (progress_ == &_default_progress_) {
    progress_ = new ::std::string;
  }
  progress_->assign(value);
}
inline void MsgMissionParam::set_progress(const char* value, size_t size) {
  _set_bit(3);
  if (progress_ == &_default_progress_) {
    progress_ = new ::std::string;
  }
  progress_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* MsgMissionParam::mutable_progress() {
  _set_bit(3);
  if (progress_ == &_default_progress_) {
    progress_ = new ::std::string;
  }
  return progress_;
}

// -------------------------------------------------------------------

// MsgMissionState

// optional string ReadyToStart = 1;
inline bool MsgMissionState::has_readytostart() const {
  return _has_bit(0);
}
inline void MsgMissionState::clear_readytostart() {
  if (readytostart_ != &_default_readytostart_) {
    readytostart_->clear();
  }
  _clear_bit(0);
}
inline const ::std::string& MsgMissionState::readytostart() const {
  return *readytostart_;
}
inline void MsgMissionState::set_readytostart(const ::std::string& value) {
  _set_bit(0);
  if (readytostart_ == &_default_readytostart_) {
    readytostart_ = new ::std::string;
  }
  readytostart_->assign(value);
}
inline void MsgMissionState::set_readytostart(const char* value) {
  _set_bit(0);
  if (readytostart_ == &_default_readytostart_) {
    readytostart_ = new ::std::string;
  }
  readytostart_->assign(value);
}
inline void MsgMissionState::set_readytostart(const char* value, size_t size) {
  _set_bit(0);
  if (readytostart_ == &_default_readytostart_) {
    readytostart_ = new ::std::string;
  }
  readytostart_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* MsgMissionState::mutable_readytostart() {
  _set_bit(0);
  if (readytostart_ == &_default_readytostart_) {
    readytostart_ = new ::std::string;
  }
  return readytostart_;
}

// optional string Available = 2;
inline bool MsgMissionState::has_available() const {
  return _has_bit(1);
}
inline void MsgMissionState::clear_available() {
  if (available_ != &_default_available_) {
    available_->clear();
  }
  _clear_bit(1);
}
inline const ::std::string& MsgMissionState::available() const {
  return *available_;
}
inline void MsgMissionState::set_available(const ::std::string& value) {
  _set_bit(1);
  if (available_ == &_default_available_) {
    available_ = new ::std::string;
  }
  available_->assign(value);
}
inline void MsgMissionState::set_available(const char* value) {
  _set_bit(1);
  if (available_ == &_default_available_) {
    available_ = new ::std::string;
  }
  available_->assign(value);
}
inline void MsgMissionState::set_available(const char* value, size_t size) {
  _set_bit(1);
  if (available_ == &_default_available_) {
    available_ = new ::std::string;
  }
  available_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* MsgMissionState::mutable_available() {
  _set_bit(1);
  if (available_ == &_default_available_) {
    available_ = new ::std::string;
  }
  return available_;
}

// optional string Rewarded = 3;
inline bool MsgMissionState::has_rewarded() const {
  return _has_bit(2);
}
inline void MsgMissionState::clear_rewarded() {
  if (rewarded_ != &_default_rewarded_) {
    rewarded_->clear();
  }
  _clear_bit(2);
}
inline const ::std::string& MsgMissionState::rewarded() const {
  return *rewarded_;
}
inline void MsgMissionState::set_rewarded(const ::std::string& value) {
  _set_bit(2);
  if (rewarded_ == &_default_rewarded_) {
    rewarded_ = new ::std::string;
  }
  rewarded_->assign(value);
}
inline void MsgMissionState::set_rewarded(const char* value) {
  _set_bit(2);
  if (rewarded_ == &_default_rewarded_) {
    rewarded_ = new ::std::string;
  }
  rewarded_->assign(value);
}
inline void MsgMissionState::set_rewarded(const char* value, size_t size) {
  _set_bit(2);
  if (rewarded_ == &_default_rewarded_) {
    rewarded_ = new ::std::string;
  }
  rewarded_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* MsgMissionState::mutable_rewarded() {
  _set_bit(2);
  if (rewarded_ == &_default_rewarded_) {
    rewarded_ = new ::std::string;
  }
  return rewarded_;
}

// optional string Completed = 4;
inline bool MsgMissionState::has_completed() const {
  return _has_bit(3);
}
inline void MsgMissionState::clear_completed() {
  if (completed_ != &_default_completed_) {
    completed_->clear();
  }
  _clear_bit(3);
}
inline const ::std::string& MsgMissionState::completed() const {
  return *completed_;
}
inline void MsgMissionState::set_completed(const ::std::string& value) {
  _set_bit(3);
  if (completed_ == &_default_completed_) {
    completed_ = new ::std::string;
  }
  completed_->assign(value);
}
inline void MsgMissionState::set_completed(const char* value) {
  _set_bit(3);
  if (completed_ == &_default_completed_) {
    completed_ = new ::std::string;
  }
  completed_->assign(value);
}
inline void MsgMissionState::set_completed(const char* value, size_t size) {
  _set_bit(3);
  if (completed_ == &_default_completed_) {
    completed_ = new ::std::string;
  }
  completed_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* MsgMissionState::mutable_completed() {
  _set_bit(3);
  if (completed_ == &_default_completed_) {
    completed_ = new ::std::string;
  }
  return completed_;
}

// repeated .MsgMissionParam Params = 5;
inline int MsgMissionState::params_size() const {
  return params_.size();
}
inline void MsgMissionState::clear_params() {
  params_.Clear();
}
inline const ::google::protobuf::RepeatedPtrField< ::MsgMissionParam >&
MsgMissionState::params() const {
  return params_;
}
inline ::google::protobuf::RepeatedPtrField< ::MsgMissionParam >*
MsgMissionState::mutable_params() {
  return &params_;
}
inline const ::MsgMissionParam& MsgMissionState::params(int index) const {
  return params_.Get(index);
}
inline ::MsgMissionParam* MsgMissionState::mutable_params(int index) {
  return params_.Mutable(index);
}
inline ::MsgMissionParam* MsgMissionState::add_params() {
  return params_.Add();
}


#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

#endif  // PROTOBUF_MsgMission_2eproto__INCLUDED
